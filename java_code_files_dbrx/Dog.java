import java.lang.String;
import java.lang.Integer;

interface Animal {
    void eat();
}

interface Pet extends Animal { }

class Dog implements Pet {
    @Override
    public void eat() { // this is not a bridge method since it's not part of a generic class hierarchy.
    }
}

/* Compare that with the following more complex example: */
abstract class BaseAction<T> {
    abstract T doWorkOrReallyDoNothing(Class<T> c); // this is NOT a bridge method, although it does use generics for its return type and argument.
}

abstract class SubAction1 extends BaseAction<Integer>{
    @Override
    Integer doWorkOrReallyDoNothing(Class<Integer> c) { return null; } // This is also not a bridge method per se. But check what happens next:
    abstract boolean work();     // This is used later on to refine some behavior when implementing SubAction2. Remember this line as it'll be important for the bridge methods to come later!
}

abstract class SubSubAction extends SubAction1{  // Here we are in generics land again, but no bridges yet... wait for it!
    @Override
    Integer doWorkOrReallyDoNothing(Class<Integer> c){ return null; }
    // This overrides the method from BaseAction<Integer>, adding a return type refinement to SubAction1's work() definition.
}

class AnotherSubSubAction extends SubSubAction {  // And here comes our bridge:
    @Override
    public final boolean work() { return false; } // Adding this line will cause the Java compiler to generate in bytecode both methods below (at least conceptually! The real implementation might vary), creating a method hierarchy like this: AnotherSubSubAction[work()]->SubSubAction[boolean work()] ->  SubAction1[(bridge) java.lang.Object $jacocoInit(...)]
    // In the above, the bridge method is generated by Java to maintain binary compatibility with any previous versions of classes that might call methods using subclasses/subinterfaces which refine return types via type parameterization (e.g., if somebody called SubSubAction#work())!
    }

    public static void main(String[] args) {
    }
}