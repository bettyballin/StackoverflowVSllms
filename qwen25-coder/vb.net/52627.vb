Imports System.Data\n\nPublic Function ExportDataSetToTabDelimitedStream(dataSet As DataSet) As MemoryStream\n    Dim stream As New MemoryStream()\n    Using writer As New StreamWriter(stream)\n        For Each table As DataTable In dataSet.Tables\n            ' Write header line with field names\n            If table.Columns.Count > 0 Then\n                writer.Write(table.Columns(0).ColumnName)\n                For colIndex As Integer = 1 To table.Columns.Count - 1\n                    writer.Write(vbTab & table.Columns(colIndex).ColumnName)\n                Next\n                writer.WriteLine()\n            End If\n\n            ' Write rows\n            For Each row As DataRow In table.Rows\n                If Not row.IsNull(0) Then writer.Write(row(0))\n                For colIndex As Integer = 1 To table.Columns.Count - 1\n                    writer.Write(vbTab)\n                    If Not row.IsNull(colIndex) Then writer.Write(row(colIndex))\n                Next\n                writer.WriteLine()\n            Next\n\n            ' Optionally, separate tables in the DataSet with a blank line\n            writer.WriteLine()\n        Next\n    End Using\n    Return stream\nEnd Function\n\n' Example usage in an ASP.NET page to return the response\nProtected Sub GenerateReportButton_Click(sender As Object, e As EventArgs) Handles GenerateReportButton.Click\n    Dim dataSet As New DataSet ' Populate this with your data\n    ' ... code to populate the dataSet ...\n\n    Using memoryStream As MemoryStream = ExportDataSetToTabDelimitedStream(dataSet)\n        Response.Clear()\n        Response.ContentType = "text/tab-separated-values"\n        Response.AddHeader("Content-Disposition", "attachment;filename=report.tsv")\n        memoryStream.WriteTo(Response.OutputStream)\n        Response.Flush()\n        Response.End()\n    End Using\nEnd Sub