Public Class Class1\n    Implements IDisposable\n\n    Private disposedValue As Boolean = False ' To detect redundant calls\n    Private _unmanagedResource As IntPtr ' Example unmanaged resource\n\n    Protected Overridable Sub Dispose(disposing As Boolean)\n        If Not Me.disposedValue Then\n            If disposing Then\n                ' Free managed resources when explicitly called\n                ' Can also call finalize on contained objects that implement IDisposable\n            End If\n\n            ' Free shared unmanaged resources\n            NativeMethods.Free(_unmanagedResource)\n            _unmanagedResource = IntPtr.Zero\n        End If\n        Me.disposedValue = True\n    End Sub\n\n#Region "IDisposable Support"\n    ' This code is added by Visual Basic to correctly implement the disposable pattern.\n    Public Sub Dispose() Implements IDisposable.Dispose\n        ' Do not change this code. Put cleanup code in Dispose(disposing As Boolean) above.\n        Dispose(True)\n        GC.SuppressFinalize(Me)\n    End Sub\n\n    Protected Overrides Sub Finalize()\n        ' Ensure unmanaged resources are cleaned up if Dispose has not been called already.\n        Dispose(False)\n        MyBase.Finalize()  ' Call base class finalizer, if needed\n    End Sub\n#End Region\n\nEnd Class