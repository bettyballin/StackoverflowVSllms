Imports System.Data.SqlClient\n\nSub ReserveBlockOfLabels()\n    Using conn As SqlConnection = New SqlConnection("YourConnectionStringHere")\n        conn.Open()\n\n        ' Begin a transaction\n        Using trans As SqlTransaction = conn.BeginTransaction()\n            Try\n                Dim cmdReserve As SqlCommand = conn.CreateCommand()\n                cmdReserve.Transaction = trans\n                cmdReserve.CommandText = "\n                    DECLARE @NextIDs TABLE (Floor INT, Row INT, Column INT, Shelf INT, BoxNumber INT);\n                    \n                    -- Find available slots\n                    INSERT INTO @NextIDs (Floor, Row, Column, Shelf, BoxNumber)\n                        SELECT f, r, c, s, x+1 AS Bx\n                        FROM (\n                            SELECT TOP 20 f, r, c, s, MAX(BoxNumber) AS x,\n                                     ROW_NUMBER() OVER(ORDER BY (SELECT NULL)) as rn\n                            FROM Scans\n                            GROUP BY f, r, c, s\n                            HAVING MAX(BoxNumber) < ISNULL((SELECT MaxBoxes FROM Exceptions e WHERE e.f = f AND e.r = r AND e.c = c AND e.s = s), (SELECT MAX(MaxBoxes) FROM Locations))\n                            ) a\n                        ORDER BY rn;\n\n                    -- Insert reserved slots into Scans table with ReservedUntil timestamp\n                    INSERT INTO Scans (Floor, Row, Column, Shelf, BoxNumber)\n                        SELECT * , DATEADD(MINUTE, 10, GETDATE()) AS ReservedUntil\n                        FROM @NextIDs;\n                    \n                    -- Return the IDs for printing labels\n                    SELECT Floor, Row, Column, Shelf, BoxNumber\n                    FROM @NextIDs;\n                "\n                Dim reader As SqlDataReader = cmdReserve.ExecuteReader()\n\n                ' Process and print labels\n                While reader.Read()\n                    Console.WriteLine($"f{reader("Floor")}r{reader("Row")}c{reader("Column")}s{reader("Shelf")}b{reader("BoxNumber")}")\n                End While\n\n                ' Commit the transaction\n                trans.Commit()\n            Catch ex As Exception\n                ' Rollback transaction in case of error\n                trans.Rollback()\n                Console.WriteLine($"An error occurred: {ex.Message}")\n            Finally\n                reader.Close()\n            End Try\n        End Using\n    End Using\nEnd Sub