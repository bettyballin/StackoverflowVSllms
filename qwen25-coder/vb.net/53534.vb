Imports System.Linq.Expressions\n\nPublic Class Item\n    Public Property A As Integer\n    Public Property B As Integer\nEnd Class\n\nModule Module1\n    Sub Main()\n        Dim myItems As New List(Of Item) From {\n            New Item With {.A = 1, .B = 2},\n            New Item With {.A = 1, .B = 4},\n            New Item With {.A = 2, .B = 4}\n        }\n\n        ' Assume we have a collection of objects to filter\n        Dim source As New List(Of SomeObject) From {\n            ' Add some objects here for demonstration\n        }\n\n        Dim parameter = Expression.Parameter(GetType(SomeObject), "x")\n        Dim body As Expression = Expression.Constant(False)\n\n        For Each item In myItems\n            Dim equalsA = Expression.Equal(Expression.Property(parameter, "This"), Expression.Constant(item.A))\n            Dim equalsB = Expression.Equal(Expression.Property(parameter, "That"), Expression.Constant(item.B))\n            Dim andExpression = Expression.AndAlso(equalsA, equalsB)\n            body = Expression.OrElse(body, andExpression)\n        Next\n\n        Dim lambda As Expression(Of Func(Of SomeObject, Boolean)) = Expression.Lambda(Of Func(Of SomeObject, Boolean))(body, parameter)\n\n        ' Build the query\n        Dim query = source.AsQueryable().Where(lambda)\n\n        For Each result In query\n            Console.WriteLine($"Found: This={result.This}, That={result.That}")\n        Next\n    End Sub\n\n    Public Class SomeObject\n        Public Property This As Integer\n        Public Property That As Integer\n    End Class\nEnd Module