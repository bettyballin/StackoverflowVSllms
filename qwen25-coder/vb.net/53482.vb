Imports System.ServiceModel\n\n' Ensure this is the correct AlgorithmSuite; may need adjustment based on server capabilities\nDim binding As New NetTcpBinding()\nbinding.Security.Mode = SecurityMode.Message\nbinding.Security.Message.AlgorithmSuite = SecurityAlgorithmSuite.Basic128Rsa15 ' Adjust if necessary\nbinding.Security.Message.ClientCredentialType = MessageCredentialType.Windows\n\n' Define the UPN of the user account you are impersonating/using\nDim upn As String = "usertest@testdomain.com"\n\n' Set the endpoint address with UPN identity\nDim ep As New EndpointAddress(New Uri("net.tcp://server1.testdomain.com:1111/ServiceTest"),\n                              EndpointIdentity.CreateUpnIdentity(upn))\n\n' Create a channel factory and configure credentials for delegation\nDim factory As New ChannelFactory(Of ICredentialTest)(binding, ep)\nfactory.Credentials.Windows.AllowNtlm = False\nfactory.Credentials.Windows.AllowedImpersonationLevel = TokenImpersonationLevel.Delegation ' Ensure delegation is allowed\n\nTry\n    Dim iproxy As ICredentialTest = factory.CreateChannel()\n    ' Perform service calls here\n    iproxy.ToService(result)\nCatch ex As Exception\n    ' Handle exceptions\nFinally\n    CType(iproxy, ICommunicationObject).Close()\nEnd Try