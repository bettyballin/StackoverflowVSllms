' Define an Enum for PhoneticTypes\nPublic Enum PhoneticType\n    <Description("Phonetic Soundex")>\n    phonSoundex\n    \n    <Description("Double Metaphone")>\n    phonDoubleMetaphone\n    \n    <Description("No Phonetic")>\n    noPhonetic\nEnd Enum\n\n' Use the enum in your method parameter\nPublic Sub LoadDict(ByVal PhoneticType As PhoneticType, ByVal strDict As String)\n    ' Implementation here\n    Select Case PhoneticType\n        Case PhoneticType.phonSoundex\n            ' Handle soundex\n        Case PhoneticType.phonDoubleMetaphone\n            ' Handle double metaphone\n        Case PhoneticType.noPhonetic\n            ' No phonetic processing\n    End Select\nEnd Sub\n\n' Optionally, create a helper extension method to get the description attribute value from enum.\nPublic Module EnumHelper\n    <Extension()>\n    Public Function GetDescription(ByVal value As [Enum]) As String\n        Dim fieldInfo = value.[GetType]().GetField(value.ToString())\n        Dim attributes = CType(fieldInfo.GetCustomAttributes(GetType(DescriptionAttribute), False), DescriptionAttribute())()\n        Return If(attributes IsNot Nothing AndAlso attributes.Length > 0, attributes.Description, value.ToString())\n    End Function\nEnd Module