Imports System.DirectoryServices.Protocols\n\nPublic Overloads Shared Function GetSearchResultEntry(connection As LdapConnection, searchDirectoryPath As String, filter As String,\n                                                      attributes As String(), scope As SearchScope) As SearchResultEntry\n    If connection Is Nothing Then Throw New ArgumentNullException("connection", "An ldap connection must be provided in order to search for a directory.")\n    If String.IsNullOrWhiteSpace(searchDirectoryPath) Then Throw New ArgumentException("A directory path must be provided in order to search for a directory.", "searchDirectoryPath")\n    If String.IsNullOrWhiteSpace(filter) Then Throw New ArgumentException("A search filter must be provided in order to search for a directory.", "filter")\n\n    Dim pageResultRequestControl As New PageResultRequestControl(1000) ' Adjust pageSize as needed\n    connection.Controls.Add(pageResultRequestControl)\n\n    Dim request = New SearchRequest(searchDirectoryPath, filter, scope, attributes)\n    Dim responseMessage As DirectoryResponse\n\n    Do\n        responseMessage = CType(connection.SendRequest(request), SearchResponse)\n        For Each entry In responseMessage.Entries\n            Return entry ' Since you only need the first match\n        Next\n\n        For Each respControl In responseMessage.Controls\n            If TypeOf respControl Is PageResultResponseControl Then\n                Dim resControl As PageResultResponseControl = CType(respControl, PageResultResponseControl)\n                pageResultRequestControl.Cookie = resControl.Cookie\n                Exit For\n            End If\n        Next\n    Loop While Not (pageResultRequestControl.Cookie.Length = 0)\n\n    Return Nothing\nEnd Functio