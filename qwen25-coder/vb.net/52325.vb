Private Sub DataGridView1_MouseDown(ByVal sender As System.Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles DataGridView1.MouseDown\n    If e.Button = MouseButtons.Left Then\n        ' Store the current cell index for drag operation\n        Dim rowIndex As Integer = DataGridView1.CurrentCell.RowIndex\n        Dim columnIndex As Integer = DataGridView1.CurrentCell.ColumnIndex\n        Dim dragData As String = rowIndex.ToString() & "," & columnIndex.ToString()\n        DataGridView1.DoDragDrop(dragData, DragDropEffects.Move)\n    End If\nEnd Sub\n\nPrivate Sub DataGridView1_DragOver(ByVal sender As System.Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles DataGridView1.DragOver\n    ' Ensure the drag operation is valid\n    If Not e.Data.GetDataPresent(DataFormats.StringFormat) Then e.Effect = DragDropEffects.None\nEnd Sub\n\nPrivate Sub DataGridView1_DragDrop(ByVal sender As System.Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles DataGridView1.DragDrop\n    Dim cellIndexString As String = DirectCast(e.Data.GetData(DataFormats.StringFormat), String)\n    Dim splitIndexes() As String = cellIndexString.Split(","c)\n    Dim originalRowIndex As Integer = Integer.Parse(splitIndexes(0))\n    Dim originalColumnIndex As Integer = Integer.Parse(splitIndexes(1))\n\n    ' Get the target cell indices\n    Dim targetCell As DataGridViewCell = DataGridView1.HitTest(e.X, e.Y).FromPosition(e.X, e.Y)\n    If targetCell Is Nothing Then Exit Sub\n\n    ' Ensure the drag and drop operation is within bounds\n    If originalRowIndex = targetCell.RowIndex AndAlso originalColumnIndex = targetCell.ColumnIndex Then Exit Sub\n\n    ' Retrieve cells for swapping\n    Dim sourceCell As DataGridViewCell = DataGridView1.Rows(originalRowIndex).Cells(originalColumnIndex)\n    Dim destCell As DataGridViewCell = DataGridView1.Rows(targetCell.RowIndex).Cells(targetCell.ColumnIndex)\n\n    ' Swap values and mappings\n    Dim tempValue = sourceCell.Value\n    sourceCell.Value = destCell.Value\n    destCell.Value = tempValue\n\n    Dim originalKey As String = GetMappingForCell(sourceCell)\n    Dim targetKey As String = GetMappingForCell(destCell)\n\n    ' Assuming mappings is a dictionary\n    Dim tempMapping = mappings(originalKey)\n    mappings(originalKey) = mappings(targetKey)\n    mappings(targetKey) = tempMapping\nEnd Sub\n\n' Placeholder for your mapping function\nPrivate Function GetMappingForCell(cell As DataGridViewCell) As String\n    ' Implement this to return the key corresponding to the cell in your dictionary\n    Return ""\nEnd Functio