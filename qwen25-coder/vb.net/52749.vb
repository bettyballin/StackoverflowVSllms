Public Sub ScanPluginsInDirectory(ByVal Directory As String)\n    Dim Plugins = New IO.DirectoryInfo(Directory)\n    Dim Files = Plugins.GetFiles("*.dll")\n    Dim CryptType = GetType(CryptPluginBase)\n    Dim PluginsData As New List(Of LoadedPluginsInfo)()\n\n    For Each DllFile In Files\n        Try\n            Using fileStream As New System.IO.FileStream(DllFile.FullName, IO.FileMode.Open, IO.FileAccess.Read)\n                Dim thisAsm = Assembly.Load(AssemblyName.GetAssemblyName(fileStream.Name))\n                Dim classDefs = thisAsm.GetTypes().Where(Function(type) CryptType.IsAssignableFrom(type))\n\n                For Each ClassDef In classDefs\n                    If Not ClassDef.IsAbstract Then\n                        Dim instance As Object = Activator.CreateInstance(ClassDef)\n                        ' Assuming Plugin() is a method that returns an object suitable for LoadedPluginsInfo\n                        Dim pluginResult As Object = CallPluginMethod(instance, "Plugin")\n                        PluginsData.Add(New LoadedPluginsInfo(pluginResult, False))\n                    End If\n                Next\n            End Using\n        Catch ex As Exception\n            ' Consider logging the exception or handling it appropriately\n            Console.WriteLine($"Error loading {DllFile.Name}: {ex.Message}")\n        End Try\n    Next\nEnd Sub\n\nPrivate Function CallPluginMethod(instance As Object, methodName As String) As Object\n    Dim method = instance.GetType().GetMethod(methodName)\n    If method IsNot Nothing Then\n        Return method.Invoke(instance, Nothing)\n    Else\n        Throw New MissingMethodException($"The method {methodName} is not found in the type {instance.GetType()} or it's not public.")\n    End If\nEnd Functio