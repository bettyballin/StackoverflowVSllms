Imports System.Runtime.InteropServices\n\nModule Module1\n\n    ' Import necessary user32.dll functions\n    <DllImport("user32.dll", SetLastError:=True)>\n    Private Function FindWindow(ByVal lpClassName As String, ByVal lpWindowName As String) As IntPtr\n    End Function\n\n    <DllImport("user32.dll", CharSet:=CharSet.Auto)>\n    Private Function SendMessage(ByVal hWnd As IntPtr, ByVal Msg As Integer, ByVal wParam As IntPtr, <Out()> ByRef lParam As IntPtr) As IntPtr\n    End Function\n\n    ' Constants for sending messages to window\n    Const WM_GETTEXT = &HD\n    Const WM_GETTEXTLENGTH = &HE\n\n    Sub Main()\n        ' Find the Word application window. The class name "OpusApp" is commonly used by Word.\n        Dim hWndWord As IntPtr = FindWindow("OpusApp", Nothing)\n\n        If hWndWord <> IntPtr.Zero Then\n            Console.WriteLine("Found Word window handle: " & hWndWord.ToString())\n\n            ' Optionally, retrieve text from the window (this may not work as expected for Office apps)\n            Dim length As Integer = SendMessage(hWndWord, WM_GETTEXTLENGTH, IntPtr.Zero, IntPtr.Zero).ToInt32()\n            Dim builder As New System.Text.StringBuilder(length + 1)\n            SendMessage(hWndWord, WM_GETTEXT, CType(builder.Capacity, IntPtr), builder)\n\n            Console.WriteLine("Text from window: " & builder.ToString())\n\n            ' For Office applications like Word, interacting via UI Automation is recommended\n        Else\n            Console.WriteLine("Could not find Word application window.")\n        End If\n\n        Console.ReadLine()\n    End Sub\n\nEnd Module