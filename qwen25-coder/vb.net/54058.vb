Imports System.ComponentModel\n\n' Define an ImportExport class that handles import/export logic.\nPublic Class ImportExport\n\n    ' Declare an event handler for sending real-time messages.\n    Public Event UpdateStatus(ByVal message As String)\n\n    ' Method that performs the heavy lifting and raises events.\n    Public Sub PerformImport()\n        Dim totalSteps As Integer = 100\n        For i As Integer = 1 To totalSteps\n            ' Simulate a step of importing/exporting data.\n            System.Threading.Thread.Sleep(200) ' Sleep to simulate time-consuming operation\n\n            ' Raise the event with an update message.\n            RaiseEvent UpdateStatus(String.Format("Processing step {0}/{1}", i, totalSteps))\n        Next\n    End Sub\nEnd Class\n\n' Define the form that hosts the GUI and logic for handling import/export operations.\nPublic Class Form1\n    Inherits System.Windows.Forms.Form\n\n    ' Declare a background worker to handle asynchronous operation.\n    Private WithEvents bwImportExport As New BackgroundWorker()\n\n    Public Sub New()\n        InitializeComponent()\n        SetupBackgroundWorker()\n    End Sub\n\n    Private Sub SetupBackgroundWorker()\n        ' Set up the BackgroundWorker.\n        bwImportExport.WorkerReportsProgress = True\n        bwImportExport.DoWork += New DoWorkEventHandler(AddressOf ImportExport_DoWork)\n        bwImportExport.ProgressChanged += New ProgressChangedEventHandler(AddressOf ImportExport_ProgressChanged)\n    End Sub\n\n    Private Sub btnStart_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnStart.Click\n        ' Start the asynchronous operation.\n        If Not bwImportExport.IsBusy Then\n            Dim ieInstance As New ImportExport()\n            AddHandler ieInstance.UpdateStatus, AddressOf ImportExport_UpdateStatus\n            bwImportExport.RunWorkerAsync(ieInstance)\n        End If\n    End Sub\n\n    Private Sub ImportExport_DoWork(ByVal sender As Object, ByVal e As DoWorkEventArgs)\n        ' Retrieve the ImportExport instance from the argument.\n        Dim ieInstance As ImportExport = DirectCast(e.Argument, ImportExport)\n\n        ' Perform import/export operation and raise events as necessary.\n        ieInstance.PerformImport()\n    End Sub\n\n    Private Sub ImportExport_UpdateStatus(ByVal message As String)\n        ' Update the ProgressBar or another UI element with the progress message.\n        If Me.InvokeRequired Then\n            ' Use Invoke to update control on main thread.\n            Me.BeginInvoke(New Action(Of String)(AddressOf ImportExport_UpdateStatus), message)\n        Else\n            txtStatus.AppendText(message & Environment.NewLine)\n        End If\n    End Sub\n\n    Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load\n        ' Initialize GUI components.\n        txtStatus.Clear()\n    End Sub\nEnd Class