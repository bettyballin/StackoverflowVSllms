Imports System.Management\n\nPublic Function GetMachineGuid() As String\n    Dim biosID As String = GetIdentifier("Win32_BIOS", "SerialNumber")\n    Dim baseboardID As String = GetIdentifier("Win32_BaseBoard", "Product")\n    Dim cpuId As String = GetIdentifier("Win32_Processor", "UniqueId")\n    Dim volumeId As String = GetIdentifier("Win32_DiskDrive", "PnpDeviceID")\n\n    ' Combine the identifiers\n    Dim machineGuid As String = biosID & baseboardID & cpuId & volumeId\n\n    ' Create a unique hash for these identifiers\n    Using sha1 As New System.Security.Cryptography.SHA1Managed()\n        Dim hashBytes As Byte() = sha1.ComputeHash(System.Text.Encoding.UTF8.GetBytes(machineGuid))\n        Return Convert.ToBase64String(hashBytes).Replace("/", "_").Replace("+", "-")\n    End Using\nEnd Function\n\nPrivate Function GetIdentifier(className As String, propertyName As String) As String\n    Dim result As String = String.Empty\n    Using searcher As New ManagementObjectSearcher("SELECT * FROM " & className)\n        For Each obj As ManagementObject In searcher.Get()\n            If Not String.IsNullOrEmpty(result) Then Exit For\n            Try\n                result = obj(propertyName).ToString().Trim()\n            Catch ex As Exception\n                ' Handle any unexpected errors\n                result = String.Empty\n            End Try\n        Next\n    End Using\n    Return result.PadLeft(32, "0"c)\nEnd Functio