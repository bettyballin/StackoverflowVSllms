Imports System.Runtime.InteropServices\n\n<StructLayout(LayoutKind.Sequential, CharSet:=CharSet.Ansi)>\nPublic Structure dx_entry\n    <MarshalAs(UnmanagedType.ByValTStr, SizeConst:=10)>\n    Public dx As String\n    <MarshalAs(UnmanagedType.ByValTStr, SizeConst:=3)>\n    Public type As String\n    <MarshalAs(UnmanagedType.ByValTStr, SizeConst:=1)>\n    Public narray As String\n    <MarshalAs(UnmanagedType.ByValTStr, SizeConst:=1)>\n    Public ctier As String\n    <MarshalAs(UnmanagedType.ByValTStr, SizeConst:=1)>\n    Public poa As String\n    <MarshalAs(UnmanagedType.ByValTStr, SizeConst:=1)>\n    Public poa_rsvd As String\n    <MarshalAs(UnmanagedType.ByValTStr, SizeConst:=81)>\n    Public filler As String\nEnd Structure\n\nPublic Class Example\n    Public Sub InitializeAndMarshal()\n        Dim stpDx(1) As dx_entry ' Note: Arrays are 0-indexed in VB.NET\n        stpDx(0).dx = "5939" & Space(6)\n        stpDx(0).type = "BK" & Space(1)\n        stpDx(0).narray = Space(1)\n        stpDx(0).ctier = Space(1)\n        stpDx(0).poa = "Y"\n        stpDx(0).poa_rsvd = Space(1)\n        stpDx(0).filler = Space(81)\n\n        stpDx(1).dx = "1231" & Space(6)\n        stpDx(1).type = "BF" & Space(1)\n        stpDx(1).narray = Space(1)\n        stpDx(1).ctier = Space(1)\n        stpDx(1).poa = "Y"\n        stpDx(1).poa_rsvd = Space(1)\n        stpDx(1).filler = Space(81)\n\n        Dim SizeOfdx_entry As Integer = Marshal.SizeOf(GetType(dx_entry))\n        Dim pDxBuf As IntPtr = Marshal.AllocHGlobal(SizeOfdx_entry * 2) ' Allocate memory for the entire array\n\n        Try\n            For i As Integer = 0 To stpDx.Length - 1\n                Dim elementPtr As IntPtr = New IntPtr(pDxBuf.ToInt64() + (i * SizeOfdx_entry))\n                Marshal.StructureToPtr(stpDx(i), elementPtr, False)\n            Next\n\n            ' Use pDxBuf as needed...\n\n        Finally\n            Marshal.FreeHGlobal(pDxBuf) ' Don't forget to free the allocated memory\n        End Try\n    End Sub\nEnd Class