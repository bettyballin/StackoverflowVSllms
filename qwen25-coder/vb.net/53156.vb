Protected Sub Page_Init(ByVal sender As Object, ByVal e As EventArgs) Handles Me.Init\n    ' Re-create the dynamic GridView every time the page initializes\n    sbLoadGrid(dataElement)\n    \n    ' Bind Grid RowCommand function to all dynamic grids\n    Dim dynamicGrids = findWebControlsRecursive(Page, "^gvDyn")\n    For Each dynamicGrid As GridView In dynamicGrids\n        AddHandler dynamicGrid.RowCommand, AddressOf subHandleRowCommand\n        Response.Write(String.Format("{0} has {1} rows<br/>", dynamicGrid.ID, dynamicGrid.Rows.Count))\n    Next\nEnd Sub\n\nProtected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs) Handles Me.Load\n    ' Your existing Load code here\nEnd Sub\n\nPrivate Sub sbLoadGrid(ByVal gridNode As XmlNode)\n    Dim gvName = gridNode.Attributes.GetNamedItem("name").Value\n\n    ' Ensure that you're appending controls to a placeholder or similar container on your page.\n    Dim placeHolder As PlaceHolder = CType(Page.FindControl("PlaceHolderForDynamicControls"), PlaceHolder)\n\n    Dim gv As New GridView()\n    gv.ID = gvName\n    gv.DataKeyNames = {"primary_key"}\n\n    Dim primaryKeyField As New BoundField With {\n        .DataField = "primary_key",\n        .Visible = False,\n        .SortExpression = "primary_key"\n    }\n    gv.Columns.Add(primaryKeyField)\n\n    Dim selectCommandField As New CommandField() With {\n        .SelectText = "Edit",\n        .ShowSelectButton = True\n    }\n    gv.Columns.Add(selectCommandField)\n\n    Dim deleteCommandField As New CommandField() With {\n        .ShowDeleteButton = True\n    }\n    gv.Columns.Add(deleteCommandField)\n\n    For Each data_item As XmlNode In gridNode.SelectSingleNode("data_items").ChildNodes\n        Dim header As String = fnGetAttributeValue(data_item, "label")\n        If header = "" Then header = data_item.Attributes.GetNamedItem("dbfield").Value\n\n        Dim boundField As New BoundField With {\n            .DataField = data_item.Attributes.GetNamedItem("dbfield").Value,\n            .HeaderText = header,\n            .SortExpression = data_item.Attributes.GetNamedItem("dbfield").Value\n        }\n        gv.Columns.Add(boundField)\n    Next\n\n    ' Add the GridView to your placeholder or container\n    placeHolder.Controls.Add(gv)\n\n    ' Databind the GridView right after adding it to the controls collection of the placeholder.\n    Using conn As New SqlConnection("YourConnectionStringHere")\n        conn.Open()\n        Dim cmd As SqlCommand = New SqlCommand("", conn)\n        cmd.CommandText = String.Format("SELECT {0}ID AS primary_key,", dbTable) '& ...\n        \n        ' Append more fields and complete the query\n        For Each data_item In gridNode.SelectSingleNode("data_items").ChildNodes\n            cmd.CommandText &= String.Format(" {0},", data_item.Attributes.GetNamedItem("dbfield").Value)\n        Next\n\n        ' Use a StringBuilder or similar to clean up the last comma\n        Dim sb As New System.Text.StringBuilder(cmd.CommandText.TrimEnd(","))\n        sb.AppendFormat(" FROM {0}", dbTable)\n\n        cmd.CommandText = sb.ToString()\n        \n        Using dsGrid As SqlDataReader = cmd.ExecuteReader()\n            gv.DataSource = dsGrid\n            gv.DataBind()\n        End Using\n    End Using\nEnd Sub\n\nProtected Sub subHandleRowCommand(ByVal sender As GridView, ByVal e As System.Web.UI.WebControls.GridViewCommandEventArgs)\n    ' Handle the row command event here\n    If e.CommandName = "Select" Then\n        Try\n            Dim rowIndex As Integer = Convert.ToInt32(e.CommandArgument)\n            Dim selectedGridView As GridView = CType(sender, GridView)\n            \n            ' Now you can safely access the grid rows\n            Dim selectedRow As GridViewRow = selectedGridView.Rows(rowIndex)\n            \n            Response.Write(String.Format("Selected Row Index: {0}<br/>", rowIndex))\n        Catch ex As Exception\n            ' Handle exceptions\n        End Try\n    ElseIf e.CommandName = "Delete" Then\n        ' Handle delete command here\n    End If\nEnd Sub