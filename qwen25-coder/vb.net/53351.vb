Imports System.Net.Sockets\n\nModule Module1\n    Sub Main()\n        Dim listener As TcpListener = New TcpListener(System.Net.IPAddress.Any, 12345)\n        listener.Start()\n\n        While True\n            Dim client As TcpClient = listener.AcceptTcpClient()\n            Using networkStream As NetworkStream = client.GetStream()\n\n                ' Check if the connection is active before proceeding.\n                If IsConnected(client) Then\n                    Do\n                        Try\n                            Dim buffer(1024) As Byte\n                            Dim bytesRead As Integer = networkStream.Read(buffer, 0, buffer.Length)\n\n                            If bytesRead > 0 Then\n                                Dim receivedData As String = System.Text.Encoding.ASCII.GetString(buffer, 0, bytesRead)\n                                Console.WriteLine("Received: " & receivedData)\n                            Else\n                                Exit Do ' No more data to read\n                            End If\n                        Catch ex As Exception\n                            ' Handle exception if any I/O error occurs\n                            Console.WriteLine("Error reading from client: " & ex.Message)\n                            Exit Do\n                        End Try\n                    Loop While IsConnected(client)\n\n                    Console.WriteLine("Client disconnected.")\n                Else\n                    Console.WriteLine("Client is not connected.")\n                End If\n\n            End Using\n            client.Close()\n        End While\n    End Sub\n\n    Function IsConnected(ByVal tcpClient As TcpClient) As Boolean\n        Try\n            ' Send a small byte array to check connection\n            Dim buffer(0) As Byte\n            Dim bytesWritten As Integer = tcpClient.Client.Send(buffer, 0, 1, SocketFlags.None)\n            If bytesWritten <> 1 Then Return False\n\n            ' Check if there's data available to read\n            Return (tcpClient.Client.Poll(-1, SelectMode.SelectRead) AndAlso (Not tcpClient.Client.Receive(New Byte(0), 0, 0, SocketFlags.Peek Or SocketFlags.None) = 0))\n        Catch ex As Exception\n            ' An exception is thrown when the client is disconnected.\n            Return False\n        End Try\n    End Function\nEnd Module