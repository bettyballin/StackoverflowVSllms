Imports System.Text.RegularExpressions\n\nModule Module1\n    Sub Main()\n        Dim sql As String = "USE [MyDB] GO /****** Object: Table [dbo].[User] Script Date: 07/07/2009 10:16:48 ******/ SET ANSI_NULLS ON GO SET QUOTED_IDENTIFIER ON GO SET ANSI_PADDING ON GO CREATE TABLE [dbo].[User]( [UserId] [int] IDENTITY(1,1) NOT NULL, [FirstName] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL, [MiddleName] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_A NOT NULL ) GO"\n\n        Dim fields As List(Of String) = ExtractFields(sql)\n\n        For Each field In fields\n            Console.WriteLine(field)\n        Next\n    End Sub\n\n    Function ExtractFields(sql As String) As List(Of String)\n        Dim fields As New List(Of String)\n        Dim pattern As String = "\[(\w+)\] \[([\w()]+)\]"\n        Dim matches As MatchCollection = Regex.Matches(sql, pattern)\n\n        For Each match As Match In matches\n            If match.Success Then\n                Dim fieldName As String = match.Groups(1).Value\n                Dim dataType As String = ConvertDataType(match.Groups(2).Value)\n\n                fields.Add($"{fieldName} {dataType}")\n            End If\n        Next\n\n        Return fields\n    End Function\n\n    Function ConvertDataType(sqlType As String) As String\n        Select Case sqlType.ToLower()\n            Case "int", "bigint"\n                Return "Integer"\n            Case "varchar", "char"\n                Return "String"\n            ' Add more mappings as needed\n            Case Else\n                Return sqlType\n        End Select\n    End Function\nEnd Module