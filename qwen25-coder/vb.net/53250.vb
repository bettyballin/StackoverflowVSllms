' Define a class for holding the data\nPublic Class ComboBoxItem\n    Public Property Key As Object\n    Public Property Value As String\n\n    ' Override ToString to control how each item is displayed in the ComboBox\n    Public Overrides Function ToString() As String\n        Return Value\n    End Function\nEnd Class\n\nSub PopulateComboBox(hashtable As Hashtable)\n    ' Assuming your hashtable values are objects and keys are what you display initially\n    For Each key As Object In hashtable.Keys\n        Dim displayText As String = TryCast(hashtable(key), YourObjectType).GetSomeDisplayString() ' Adjust this line as needed to get the string representation from your object.\n        Dim item As New ComboBoxItem With {\n            .Key = key,\n            .Value = displayText\n        }\n        ComboBox1.Items.Add(item)\n    Next\n\n    ' Add extra values\n    ComboBox1.Items.Add(New ComboBoxItem With {.Key = "newKey1", .Value = "New Display Text 1"})\n    ComboBox1.Items.Add(New ComboBoxItem With {.Key = "newKey2", .Value = "New Display Text 2"})\n\nEnd Sub\n\nSub GetSelectedItem()\n    Dim selectedItem As ComboBoxItem = TryCast(ComboBox1.SelectedItem, ComboBoxItem)\n    If selectedItem IsNot Nothing Then\n        ' Now you can access the key and value of the selected item consistently\n        MessageBox.Show($"Key: {selectedItem.Key}, Value: {selectedItem.Value}")\n    End If\nEnd Sub