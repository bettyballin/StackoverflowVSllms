Imports System.Reflection\n\nSub ProcessGenericList(obj1 As Object)\n    Dim t As Type = obj1.GetType()\n    If t.IsGenericType AndAlso t.GetGenericTypeDefinition() Is GetType(List(Of )) Then\n        Dim typeParameters() As Type = t.GetGenericArguments()\n        Dim typeParam As Type = typeParameters(0)\n\n        ' Get the Count property using reflection\n        Dim countProperty As PropertyInfo = t.GetProperty("Count")\n        Dim count As Integer = DirectCast(countProperty.GetValue(obj1, Nothing), Integer)\n        Console.WriteLine($"List has {count} items")\n\n        ' Get the GetEnumerator method using reflection\n        Dim enumeratorMethod As MethodInfo = t.GetMethod("GetEnumerator")\n        Dim enumerator As IEnumerator = DirectCast(enumeratorMethod.Invoke(obj1, Nothing), IEnumerator)\n\n        While enumerator.MoveNext()\n            Dim item As Object = enumerator.Current\n            If TypeOf item Is String Then\n                Console.WriteLine(DirectCast(item, String))\n            Else\n                ' Handle other types as needed\n                Console.WriteLine(item.ToString())\n            End If\n        End While\n    Else\n        Throw New ArgumentException("Provided object is not a List(Of T)")\n    End If\nEnd Sub