Class Window1\n\n    Private myTestData As TestData\n\n    Public Sub New()\n        InitializeComponent()\n        myTestData = New TestData()\n        Me.DataContext = myTestData\n    End Sub\n\n    ' Event handler to wire up Grid.Column and Grid.Row on each item\n    Private Sub OnLoaded(sender As Object, e As RoutedEventArgs)\n        Dim itemsControl = DirectCast(sender, ItemsControl)\n        Dim grid = DirectCast(itemsControl.ItemsPanelRoot, Grid)\n\n        For Each container In itemsControl.ItemContainerGenerator.ContainerFromIndex(0) To itemsControl.ItemContainerGenerator.ContainerFromIndex(myTestData.DataSet.Count - 1)\n            Dim dataPoint = DirectCast(itemsControl.Items(container), DataPoint)\n            Dim child = ContainerHelper.GetChildItem(control:=container)\n            If child IsNot Nothing Then\n                Grid.SetRow(child, dataPoint.Row)\n                Grid.SetColumn(child, dataPoint.Col)\n                grid.Children.Add(child)\n            End If\n        Next\n    End Sub\nEnd Class\n\n' Helper class to work with UI elements\nPublic Class ContainerHelper\n    Public Shared Function GetChildItem(control As Control) As FrameworkElement\n        Dim contentPresenter = VisualTreeHelpers.FindVisualChild(Of ContentPresenter)(control)\n        Return DirectCast(contentPresenter.ContentTemplateRoot, FrameworkElement)\n    End Function\nEnd Class\n\n' Helper class to find visual elements in the tree\nPublic Module VisualTreeHelpers\n    Public Function FindVisualChild(Of T As DependencyObject)(obj As DependencyObject) As T\n        For i As Integer = 0 To VisualTreeHelper.GetChildrenCount(obj) - 1\n            Dim child = VisualTreeHelper.GetChild(obj, i)\n            If TypeOf child Is T Then\n                Return DirectCast(child, T)\n            End If\n\n            Dim childOfChild As T = FindVisualChild(Of T)(child)\n            If childOfChild IsNot Nothing Then\n                Return childOfChild\n            End If\n        Next\n        Return Nothing\n    End Function\nEnd Module