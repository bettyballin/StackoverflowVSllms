Imports System.IO\n\nModule Module1\n    Sub Main()\n        Dim filePath As String = "yourfile.txt"\n        Dim requestedStartTime As Date = New Date(2023, 10, 1, 12, 0, 0) ' Example date\n        Dim criteriaMatched As Boolean = False\n\n        Using fileStream As New FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.Read)\n            Using reader As New StreamReader(fileStream)\n                Dim fileSize As Long = fileStream.Length\n                Dim increment As Long = CInt(fileSize * 0.0001) ' 0.01% of the file size\n\n                For position As Long = fileSize - increment To 0 Step -increment\n                    If position > 0 Then\n                        fileStream.Seek(position, SeekOrigin.Begin)\n                        reader.DiscardBufferedData() ' Discard buffer to ensure reading from the new position\n                        Dim line As String = ReadPartialLine(reader)\n\n                        If line IsNot Nothing Then\n                            Dim parts = line.Split(","c)\n                            Dim messageTime As Date = DateTime.ParseExact(parts(3) & " " & parts(4).Substring(0, 8), "yyyy-MM-dd HH:mm:ss", System.Globalization.CultureInfo.InvariantCulture)\n                            Dim diff As Integer = DateDiff(DateInterval.Minute, messageTime, requestedStartTime)\n\n                            If diff >= 2 Then\n                                criteriaMatched = True\n                                Exit For\n                            End If\n                        End If\n                    End If\n                Next\n            End Using\n\n            If criteriaMatched Then\n                Console.WriteLine("Criteria matched.")\n            Else\n                Console.WriteLine("No matching line found.")\n            End If\n        End Using\n    End Sub\n\n    Function ReadPartialLine(reader As StreamReader) As String\n        ' Read from the current position to get a full line\n        Dim startPosition As Long = reader.BaseStream.Position\n        Dim line As String = reader.ReadLine()\n\n        While line IsNot Nothing AndAlso Not line.EndsWith(ControlChars.CrLf)\n            Dim nextPosition As Long = reader.BaseStream.Position\n            If nextPosition = startPosition Then ' No progress, end of file likely reached\n                Exit While\n            End If\n            line = reader.ReadLine()\n            startPosition = nextPosition\n        End While\n\n        Return line\n    End Function\nEnd Module