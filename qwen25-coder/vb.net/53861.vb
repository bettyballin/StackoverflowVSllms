Imports System.Runtime.CompilerServices\n\n' Define your enum\nPublic Enum ReasonCodeEnum\n    ServiceNotCovered\n    MemberNotEligible\n    ' Add other codes here\nEnd Enum\n\n' Create a class to handle the mappings\nPublic Class ReasonCodeHelper\n    Private Shared ReadOnly _reasonCodes As New Dictionary(Of String, ReasonCodeEnum) From {\n        {"SNCV", ReasonCodeEnum.ServiceNotCovered},\n        {"MNEL", ReasonCodeEnum.MemberNotEligible}\n        ' Add other mappings here\n    }\n\n    Public Shared Function FromCode(code As String) As ReasonCodeEnum?\n        Dim result As ReasonCodeEnum\n        If _reasonCodes.TryGetValue(code, result) Then\n            Return result\n        Else\n            Return Nothing\n        End If\n    End Function\n\n    Public Shared Function ToCode(reasonCodeEnum As ReasonCodeEnum) As String\n        Select Case reasonCodeEnum\n            Case ReasonCodeEnum.ServiceNotCovered\n                Return "SNCV"\n            Case ReasonCodeEnum.MemberNotEligible\n                Return "MNEL"\n            ' Add other cases here\n            Case Else\n                Throw New ArgumentException($"Unknown enum value: {reasonCodeEnum}")\n        End Select\n    End Function\nEnd Class\n\n' Usage example\nPublic Sub ProcessInput(code As String)\n    Dim reasonCode = ReasonCodeHelper.FromCode(code)\n\n    If reasonCode.HasValue Then\n        Select Case reasonCode.Value\n            Case ReasonCodeEnum.ServiceNotCovered\n                ' Do one thing\n            Case ReasonCodeEnum.MemberNotEligible\n                ' Do something different\n            ' Other enum value cases and default\n        End Select\n    Else\n        ' Handle unknown code\n    End If\nEnd Sub