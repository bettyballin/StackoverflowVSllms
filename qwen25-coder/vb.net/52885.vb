<#@ output extension=".vb" #>\n<#@ import namespace="System.Xml.Schema" #>\n<# \n    var fileName = "Dataset.xsd";\n    var xmlSchemaSet = new XmlSchemaSet();\n    using (var reader = System.IO.File.OpenText(fileName))\n    {\n        xmlSchemaSet.Add("", XmlReader.Create(reader));\n    }\n    \n    foreach (XmlSchema schema in xmlSchemaSet.Schemas())\n    {\n        if (schema.TargetNamespace != null)\n        {\n#>\nImports <#=schema.TargetNamespace #>\n\nNamespace DataAccess\n<#\n            foreach (XmlSchemaElement element in schema.Elements.Values)\n            {\n                var tableName = element.Name;\n#>\n    Partial Public Class <#=tableName #>\n        ' Property definition based on the schema\n<#\n                if (element.SchemaType is XmlSchemaComplexType complexType)\n                {\n                    foreach (var attribute in ((XmlSchemaSequence)complexType.ContentTypeParticle).Items)\n                    {\n                        if (attribute is XmlSchemaElement attributeElement)\n                        {\n                            var colName = attributeElement.Name;\n                            var attributeTypeName = GetVBNetDataType(attributeElement);\n#>\n        Public Property <#=colName #> As <#=attributeTypeName #>\n<#\n                        }\n                    }\n                }\n#>\n\n        ' Example CRUD methods\n        Public Function Read() As Boolean\n            Throw New NotImplementedException()\n        End Function\n\n        Public Function Create() As Boolean\n            Throw New NotImplementedException()\n        End Function\n\n        Public Function Update() As Boolean\n            Throw New NotImplementedException()\n        End Function\n\n        Public Function Delete() As Boolean\n            Throw New NotImplementedException()\n        End Function\n    End Class\n<#\n            }\n#>\nEnd Namespace\n<#\n        }\n    }\n\nstring GetVBNetDataType(XmlSchemaElement element)\n{\n    switch (element.SchemaTypeName.Name.ToLower())\n    {\n        case "int":\n        case "integer":\n            return "Integer";\n        case "long":\n            return "Long";\n        case "boolean":\n            return "Boolean";\n        case "double":\n            return "Double";\n        case "string":\n            return "String";\n        case "decimal":\n            return "Decimal";\n        default:\n            return "Object"; // Default case for unrecognized types\n    }\n}\n#>