Imports System.Collections\n\nModule Module1\n\n    Public Class RingBuffer\n\n        Private m_Capacity As Integer\n        Private m_Queue As Queue\n        Private m_DoneProducingEvent As New Threading.ManualResetEvent(False)\n\n        Public Sub New(ByVal Capacity As Integer)\n            m_Capacity = Capacity\n            m_Queue = Queue.Synchronized(New Queue(Capacity))\n        End Sub\n\n        Public Sub Enqueue(ByVal value As Object)\n            SyncLock m_Queue.SyncRoot\n                If m_Queue.Count = m_Capacity Then\n                    Threading.Monitor.Wait(m_Queue.SyncRoot)\n                End If\n                m_Queue.Enqueue(value)\n                Threading.Monitor.PulseAll(m_Queue.SyncRoot)\n            End SyncLock\n        End Sub\n\n        Public Function Dequeue() As Object\n            Dim value As Object = Nothing\n            SyncLock m_Queue.SyncRoot\n                While m_Queue.Count = 0 AndAlso Not m_DoneProducingEvent.WaitOne(0)\n                    Threading.Monitor.Wait(m_Queue.SyncRoot)\n                End While\n                If m_Queue.Count > 0 Then\n                    value = m_Queue.Dequeue()\n                    Console.WriteLine("Full Slots: {0} - Open Slots: {1}", m_Queue.Count, m_Capacity - m_Queue.Count)\n                    Threading.Monitor.PulseAll(m_Queue.SyncRoot)\n                End If\n            End SyncLock\n            Return value\n        End Function\n\n        Public Sub SignalProducerDone()\n            m_DoneProducingEvent.Set()\n        End Sub\n\n    End Class\n\n    Public Class Tile\n        Public buffer() As Byte\n        Public Sub New() : buffer = New Byte(1023) {} : End Sub\n    End Class\n\n    Public Sub Producer(ByVal rb As RingBuffer)\n        Dim rng As New System.Security.Cryptography.RNGCryptoServiceProvider\n        For i As Integer = 0 To 1023\n            Dim t As New Tile\n            rng.GetNonZeroBytes(t.buffer)\n            rb.Enqueue(t)\n            Threading.Thread.Sleep(10)\n        Next\n        Console.WriteLine("Done Producing!")\n        rb.SignalProducerDone()\n    End Sub\n\n    Public Sub Consumer(ByVal rb As RingBuffer)\n        Using fs As New IO.FileStream("c:\test.bin", IO.FileMode.Create)\n            While True\n                Dim t As Tile = rb.Dequeue()\n                If t Is Nothing AndAlso rb.m_DoneProducingEvent.WaitOne(0) Then Exit While\n                fs.Write(t.buffer, 0, t.buffer.Length)\n            End While\n        End Using\n        Console.WriteLine("Done Consuming!")\n    End Sub\n\n    Sub Main()\n        Dim rb As New RingBuffer(1000)\n\n        Dim thrdProducer As New Threading.Thread(AddressOf Producer)\n        thrdProducer.Name = "Producer"\n        thrdProducer.IsBackground = True\n        thrdProducer.Start(rb)\n\n        Dim thrdConsumer As New Threading.Thread(AddressOf Consumer)\n        thrdConsumer.Name = "Consumer"\n        thrdConsumer.IsBackground = True\n        thrdConsumer.Start(rb)\n\n        Console.ReadKey()\n    End Sub\n\nEnd Module