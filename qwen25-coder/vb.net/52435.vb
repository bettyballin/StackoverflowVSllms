Public Class Parent\n    Private _TestProperty As String\n    Private _Child As List(Of Child) ' Use List instead of IList for better manipulation\n\n    Public Property Test() As String\n        Get\n            Return _TestProperty\n        End Get\n        Set(ByVal value As String)\n            _TestProperty = value\n        End Set\n    End Property\n\n    Public Property Child() As List(Of Child)\n        Get\n            Return _Child\n        End Get\n        Set(ByVal value As List(Of Child))\n            If _Child IsNot Nothing Then\n                ' Unsubscribe from previous child events\n                For Each c In _Child\n                    RemoveHandler c.PropertyChanged, AddressOf eventHandler\n                Next\n            End If\n\n            _Child = value\n\n            ' Subscribe to new child events\n            If _Child IsNot Nothing Then\n                For Each c In _Child\n                    AddHandler c.PropertyChanged, AddressOf eventHandler\n                Next\n            End If\n\n        End Set\n    End Property\n\n    Private Sub AddNewChild(ByVal newChild As Child)\n        If _Child Is Nothing Then\n            _Child = New List(Of Child)()\n        End If\n        ' Adding a child and subscribing to its PropertyChanged event\n        _Child.Add(newChild)\n        AddHandler newChild.PropertyChanged, AddressOf eventHandler\n    End Sub\n\n    Private Sub RemoveChild(ByVal oldChild As Child)\n        If _Child IsNot Nothing Then\n            ' Removing a child and unsubscribing from its PropertyChanged event\n            RemoveHandler oldChild.PropertyChanged, AddressOf eventHandler\n            _Child.Remove(oldChild)\n        End If\n    End Sub\n\n    Private Sub eventHandler(sender As Object, e As EventArgs)\n        Dim source As Child = CType(sender, Child)\n        ' Handle the event here. For example:\n        Console.WriteLine($"Child Test property changed to {source.Test}")\n    End Sub\nEnd Class