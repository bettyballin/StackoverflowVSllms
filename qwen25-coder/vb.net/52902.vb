Imports System.Windows.Forms\n\nNamespace YourNamespace\n    Module Program\n        Sub Main()\n            ' Handle UI thread exceptions\n            AddHandler Application.ThreadException, AddressOf OnApplicationErrorHandler\n\n            ' Handle non-UI thread exceptions\n            Dim currentDomain As AppDomain = AppDomain.CurrentDomain\n            AddHandler currentDomain.UnhandledException, AddressOf OnUnhandledExceptionHandler\n\n            Try\n                ' Start your application process here\n                Application.Run(New YourForm())\n            Catch ex As Exception\n                MsgBox("Unhandled exception in Main: " & ex.Message)\n            End Try\n        End Sub\n\n        Private Sub OnApplicationErrorHandler(ByVal sender As Object, ByVal e As System.Threading.ThreadExceptionEventArgs)\n            Dim handler As New GlobalErrorHandler()\n            handler.HandleError(e.Exception)\n            ' Prevent the application from terminating\n            e.Handled = True\n        End Sub\n\n        Private Sub OnUnhandledExceptionHandler(ByVal sender As Object, ByVal e As UnhandledExceptionEventArgs)\n            Dim ex As Exception = DirectCast(e.ExceptionObject, Exception)\n            Dim handler As New GlobalErrorHandler()\n            handler.HandleError(ex)\n            ' Prevent the application from terminating if possible\n            ' Note: Setting ExitApplication to False in MyApplication_UnhandledException might be sufficient\n        End Sub\n    End Module\n\n    Class GlobalErrorHandler\n        Public Sub HandleError(ByVal ex As Exception)\n            ' Your custom error handling logic (e.g., logging, showing message boxes)\n            MsgBox("An error occurred: " & ex.Message)\n            ' Log the exception details\n        End Sub\n    End Class\nEnd Namespace