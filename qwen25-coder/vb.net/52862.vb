Imports System.Runtime.InteropServices\n\n' Define the C structures in VB.NET with StructLayout attribute\n<StructLayout(LayoutKind.Sequential)>\nPublic Structure SubStructure\n    Public Field1 As Integer\n    ' Add other fields as per your .H file\nEnd Structure\n\n<StructLayout(LayoutKind.Sequential)>\nPublic Structure MainStructure\n    Public subStructPtr As IntPtr  ' Pointer to SubStructure\n    ' Add other fields including pointers as per your .H file\nEnd Structure\n\nModule Module1\n    ' Declare the DLL function\n    <DllImport("YourDll.dll", CallingConvention:=CallingConvention.Cdecl)>\n    Public Function YourdllFunction(mainStructPtr As IntPtr) As Integer\n    End Function\n\n    Sub Main()\n        Dim subStruct As New SubStructure With {\n            .Field1 = 42\n            ' Initialize other fields as per your .H file\n        }\n\n        Dim mainStruct As New MainStructure With {\n            .subStructPtr = Marshal.AllocHGlobal(Marshal.SizeOf(GetType(SubStructure)))\n        }\n\n        Try\n            ' Copy the .NET structure into unmanaged memory.\n            Marshal.StructureToPtr(subStruct, mainStruct.subStructPtr, False)\n\n            ' Allocate memory for the MainStructure and copy it\n            Dim mainStructPtr = Marshal.AllocHGlobal(Marshal.SizeOf(GetType(MainStructure)))\n            Marshal.StructureToPtr(mainStruct, mainStructPtr, False)\n\n            ' Call the C function\n            Dim result As Integer = YourdllFunction(mainStructPtr)\n\n        Finally\n            ' Free allocated unmanaged memory.\n            Marshal.FreeHGlobal(mainStruct.subStructPtr)\n            Marshal.FreeHGlobal(mainStructPtr)\n        End Try\n\n    End Sub\nEnd Module