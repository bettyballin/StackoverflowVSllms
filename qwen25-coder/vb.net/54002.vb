Public Class TreeNode(Of T As IComparable(Of T))\n    Public Left As TreeNode(Of T)\n    Public Right As TreeNode(Of T)\n    Public Value As T\n    Public Sub New(ByVal _value As T)\n        Value = _value\n    End Sub\nEnd Class\n\nPublic Class Tree(Of T As IComparable(Of T))\n\n    Private _Root As TreeNode(Of T)\n\n    Public ReadOnly Property Root()\n        Get\n            Return _Root\n        End Get\n    End Property\n\n    Public Sub New()\n        _Root = Nothing\n    End Sub\n\n    Public Function Add(ByVal value As T) As TreeNode(Of T)\n        If _Root Is Nothing Then\n            _Root = New TreeNode(Of T)(value)\n        Else\n            Dim node As TreeNode(Of T) = _Root\n            While node IsNot Nothing\n                Dim comparisonResult As Integer = value.CompareTo(node.Value)\n                If comparisonResult < 0 Then\n                    If node.Left IsNot Nothing Then\n                        node = node.Left\n                    Else\n                        node.Left = New TreeNode(Of T)(value)\n                        Return node.Left\n                    End If\n                ElseIf comparisonResult > 0 Then\n                    If node.Right IsNot Nothing Then\n                        node = node.Right\n                    Else\n                        node.Right = New TreeNode(Of T)(value)\n                        Return node.Right\n                    End If\n                Else\n                    ' Equal, could decide to ignore duplicates or handle differently.\n                    Exit While\n                End If\n            End While\n        End If\n        Return _Root\n    End Function\n\n    Public Sub Print(ByVal node As TreeNode(Of T))\n        If node IsNot Nothing Then\n            Print(node.Left)\n            Console.WriteLine(node.Value)\n            Print(node.Right)\n        End If\n    End Sub\n\nEnd Class