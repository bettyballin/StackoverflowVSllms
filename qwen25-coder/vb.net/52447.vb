Private Sub btnGenerateReport_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnGenerateReport.Click\n    pbReports.Style = ProgressBarStyle.Marquee\n\n    If t.ThreadState = ThreadState.Unstarted Then\n        t.IsBackground = True\n        t.Start(ReportType.Roads)\n    ElseIf t.ThreadState = ThreadState.Stopped Then\n        t = Nothing\n        t = New Thread(New ParameterizedThreadStart(AddressOf GenerateReport))\n        t.IsBackground = True\n        t.Start(ReportType.Roads)\n    End If\nEnd Sub\n\nPublic Sub GenerateReport(ByVal rt As ReportType)\n    ' Set up the report viewer properties on the UI thread if needed\n    Me.Invoke(Sub()\n                   rvReport.ProcessingMode = ProcessingMode.Remote\n                   rvReport.ShowParameterPrompts = False\n                   rvReport.ServerReport.ReportServerUrl = New Uri("My_Report_Server_URL")\n                   rvReport.ServerReport.ReportPath = "My_Report_Path"\n                   rvReport.BackColor = Color.White\n               End Sub)\n\n    ' Call the method that takes time on a background thread\n    rvReport.RefreshReport()\n\n    ' Update UI elements back on the UI thread after report generation is complete\n    Me.Invoke(Sub()\n                  StopProgressBar()\n              End Sub)\nEnd Sub\n\nPrivate Sub StopProgressBar()\n    pbReports.Style = ProgressBarStyle.Blocks\n    pbReports.Value = 0\nEnd Sub