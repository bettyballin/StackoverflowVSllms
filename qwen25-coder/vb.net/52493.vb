Imports System.Data\n\nPublic Class Form1\n    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load\n        ' Simulate loading data from database\n        Dim dt As DataTable = GetData()\n        \n        ' Populate TreeView\n        PopulateTreeView(dt)\n    End Sub\n\n    Private Function GetData() As DataTable\n        ' This function simulates a database call and returns a DataTable\n        ' Replace with your actual database access code\n        Dim dt As New DataTable()\n        dt.Columns.Add("Id", GetType(Integer))\n        dt.Columns.Add("Name", GetType(String))\n        dt.Columns.Add("ParentId", GetType(Integer))\n\n        dt.Rows.Add(1, "Root", DBNull.Value)\n        dt.Rows.Add(2, "Child 1 of Root", 1)\n        dt.Rows.Add(3, "Child 2 of Root", 1)\n        dt.Rows.Add(4, "Child 1 of Child 1", 2)\n\n        Return dt\n    End Function\n\n    Private Sub PopulateTreeView(dt As DataTable)\n        Dim nodesDictionary As New Dictionary(Of Integer, TreeNode)()\n\n        ' Create each node and add to the dictionary\n        For Each row As DataRow In dt.Rows\n            Dim node As New TreeNode(row("Name").ToString())\n            nodesDictionary.Add(Convert.ToInt32(row("Id")), node)\n\n            If IsDBNull(row("ParentId")) Then\n                ' This is a root node (no parent)\n                TreeView1.Nodes.Add(node)\n            Else\n                Dim parentNodeId As Integer = Convert.ToInt32(row("ParentId"))\n                ' Find the parent node and add child to it\n                If nodesDictionary.ContainsKey(parentNodeId) Then\n                    nodesDictionary(parentNodeId).Nodes.Add(node)\n                End If\n            End If\n        Next\n    End Sub\nEnd Class