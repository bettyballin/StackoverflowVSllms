Imports System.IO\nImports System.Security.Cryptography.Pkcs\nImports System.Security.Cryptography.X509Certificates\n\nModule Module1\n    Sub Main()\n        Dim filePath As String = "C:\Windows\System32\kernel32.dll"\n        \n        Try\n            Dim fileBytes() As Byte = File.ReadAllBytes(filePath)\n            \n            ' Create a new SignedCms instance to verify the signature.\n            Dim signedContent As New ContentInfo(fileBytes)\n            Dim signedCms As New SignedCms(signedContent, True)\n\n            Console.WriteLine("Extracting the signatures from the specified file...")\n            signedCms.Decode(fileBytes)\n\n            If signedCms.SignerInfos.Count < 1 Then\n                Console.WriteLine("No digital signature found.")\n                Return\n            End If\n\n            Dim signerInfo As SignerInfo = signedCms.SignerInfos(0)\n            \n            ' Check if the certificate has a trusted chain.\n            Dim chainPolicy As New X509ChainPolicy With {\n                .RevocationMode = X509RevocationMode.Online\n            }\n            Dim certificationChain As New X509Chain()\n            certificationChain.Build(signerInfo.Certificate, chainPolicy)\n\n            If certificationChain.ChainStatus.Length > 0 Then\n                Console.WriteLine("This certificate has the following problems:")\n                For Each status In certificationChain.ChainStatus\n                    Console.WriteLine($"   {status.StatusInformation} ({status.Status})")\n                Next\n            Else\n                Console.WriteLine("The certificate is valid. The file has not been tampered with.")\n            End If\n\n        Catch ex As Exception\n            Console.WriteLine($"An error occurred: {ex.Message}")\n        End Try\n    End Sub\nEnd Module