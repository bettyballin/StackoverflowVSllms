Imports NUnit.Framework\n\n<TestFixture>\nPublic Class DiaryModeTests\n\n    <Test>\n    Public Sub TestAdminMode()\n        Dim result As Object = GetModeObject(DiaryMode.Admin)\n        Assert.AreEqual(DBNull.Value, result)\n    End Sub\n\n    <Test>\n    Public Sub TestAcademyMode()\n        Dim result As Object = GetModeObject(DiaryMode.Academy)\n        Assert.AreEqual(ApplicationSettings.Academy, result)\n    End Sub\n\n    <Test>\n    Public Sub TestScoutingMode()\n        Dim result As Object = GetModeObject(DiaryMode.Scouting)\n        Assert.AreEqual(ApplicationSettings.Scouting, result)\n    End Sub\n\n    <Test>\n    <ExpectedException(GetType(NotSupportedException))>\n    Public Sub TestInvalidMode()\n        ' Assuming you have another value in the enum or a way to simulate an invalid state\n        Dim mode As DiaryMode = DiaryMode.Admin ' Use any valid enum value for demonstration\n        Dim type = GetType(DiaryMode)\n        Dim fieldInfo = type.GetField("value__")\n        fieldInfo.SetValue(mode, -1) ' Simulate setting to an invalid value\n\n        GetModeObject(mode)\n    End Sub\n\n    Private Function GetModeObject(mode As DiaryMode) As Object\n        If mode = DiaryMode.Admin Then\n            Return DBNull.Value\n        ElseIf mode = DiaryMode.Academy Then\n            Return ApplicationSettings.Academy\n        ElseIf mode = DiaryMode.Scouting Then\n            Return ApplicationSettings.Scouting\n        Else\n            Throw New NotSupportedException()\n        End If\n    End Function\n\nEnd Class