using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Pkcs;\nusing System.Security.Cryptography.X509Certificates;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        string certificatePath = "path_to_your_certificate.pfx";\n        string password = "your_certificate_password";\n        string fileToSign = "file_to_sign.ext";\n\n        SignFile(certificatePath, password, fileToSign);\n    }\n\n    static void SignFile(string certPath, string certPassword, string filePath)\n    {\n        try\n        {\n            using (var certificate = new X509Certificate2(certPath, certPassword))\n            {\n                CmsSigner signer = new CmsSigner(certificate);\n                \n                // Read the file data to be signed\n                byte[] contentBytes = File.ReadAllBytes(filePath);\n\n                // Create a ContentInfo object for the file data\n                var contentInfo = new ContentInfo(contentBytes);\n\n                // Create a SignedCms object using the content info and specify whether it's detached or not\n                var signedCMS = new SignedCms(contentInfo, false); \n\n                // Compute the signature\n                signedCMS.ComputeSignature(signer, true);\n\n                // Encode the signed data to a byte array\n                byte[] cmsMessage = signedCMS.Encode();\n\n                string outputFilePath = filePath + ".signed";\n\n                // Write the encoded message to a file\n                File.WriteAllBytes(outputFilePath, cmsMessage);\n\n                Console.WriteLine($"Signed file: {outputFilePath}");\n            }\n        }\n        catch (CryptographicException ex)\n        {\n            Console.WriteLine($"A cryptographic error occurred: {ex.Message}");\n        }\n        catch (IOException ex)\n        {\n            Console.WriteLine($"An I/O error occurred: {ex.Message}");\n        }\n    }\n}