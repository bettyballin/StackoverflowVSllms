using System;\nusing System.Globalization;\nusing System.IO.Ports;\nusing System.Net.Sockets;\nusing System.Threading;\n\npublic class NtpClient\n{\n    // The IP address for the NTP server to connect to. In this example, we use pool.ntp.org.\n    private const string NtpServer = "pool.ntp.org";\n\n    // NTP message size - 16 bytes of data (RFC 2030).\n    private const int NtpMessageSize = 48;\n\n    // Leap indicator field value indicating no warning.\n    private const byte NoLeapIndicator = 0;\n\n    // Mode field value for client mode packets.\n    private const byte ClientMode = 3;\n\n    // Version number field value for version 3 packets (RFC 2030).\n    private const byte NtpVersionNumber = 3;\n\n    // STUN "magic cookie" as defined in RFC 5769\n    private const uint MagicCookieRFC5769 = 0x2112A442;\n\n    public DateTime Synchronize()\n    {\n        // Open a UDP socket to the NTP server.\n        using (var udpClient = new UdpClient())\n        {\n            udpClient.Connect(NtpServer, 123);\n\n            // Initialize the message data with zeroes.\n            var requestData = new byte[NtpMessageSize];\n            Array.Clear(requestData, 0, requestData.Length);\n\n            // Setting the Leap Indicator, Version Number and Mode values\n            requestData[0] = (byte)(NoLeapIndicator << 6 | NtpVersionNumber << 3 | ClientMode);\n\n            // Get a timestamp so we know how long the request took.\n            var requestTimestampTicks = DateTimeOffset.UtcNow.Ticks;\n\n            // Send the data to the server.\n            udpClient.Send(requestData, requestData.Length);\n\n            // Receive the response from the server.\n            var responseDataRaw = udpClient.Receive(out _);\n            Array.Copy(responseDataRaw, 40, requestData, 0, 8); // This timestamp describes the UTC\n                                                              // time that's just after the packet left\n                                                              // the server.\n\n            requestTimestampTicks -= DateTimeOffset.UtcNow.Ticks; // Compute the drift (positive if the\n                                                                 // server is fast, negative if slow).\n\n            // The seconds portion of the received timestamp.\n            var secondsSince1900 = requestData[4] * 256 * 256 * 256 + requestData[5] * 256 * 256 +\n                                 requestData[6] * 256 + requestData[7];\n\n            // DateTimeOffset.Now in UTC\n            var responseTimestampUdpDatagram = new DateTime(1900, 1, 1).AddSeconds(secondsSince1900)\n                .AddTicks((long)(requestTimestampTicks / (TimeSpan.TicksPerSecond * 256.0)));\n\n            return responseTimestampUdpDatagram;\n        }\n    }\n}