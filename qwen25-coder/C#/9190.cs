using System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.IO;\nusing Microsoft.Win32;\n\nclass IconMapper {\n    private Dictionary<string, Icon> _iconCache = new Dictionary<string, Icon>();\n\n    public Icon GetIconForExtension(string extension) {\n        if (_iconCache.TryGetValue(extension.ToLower(), out var icon)) {\n            return icon;\n        }\n\n        // Fetch the default icon for a file type from the system\n        string keyPath = $"Software\\Classes\\{extension}\\DefaultIcon";\n        using (var key = Registry.CurrentUser.OpenSubKey(keyPath) ?? Registry.LocalMachine.OpenSubKey(keyPath)) {\n            if (key == null) {\n                return null; // Default fallback icon or nothing\n            }\n\n            var defaultValue = key.GetValue(null)?.ToString();\n            if (defaultValue != null) {\n                string[] parts = defaultValue.Split(',');\n                string path = parts[0];\n                int index = 0;\n                if (parts.Length > 1 && int.TryParse(parts[1], out index)) {\n                    icon = Icon.ExtractAssociatedIcon(path, index);\n                } else {\n                    icon = Icon.ExtractAssociatedIcon(path);\n                }\n\n                _iconCache[extension.ToLower()] = icon;\n                return icon;\n            }\n        }\n\n        return null;\n    }\n}