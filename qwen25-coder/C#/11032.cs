using System;\nusing System.Collections.Generic;\nusing System.Linq.Expressions;\nusing System.Text;\n\npublic class SimpleExpressionToSqlConverter<T>\n{\n    public string Convert(Expression<Func<T, bool>> expression)\n    {\n        var body = (BinaryExpression)expression.Body;\n        StringBuilder sqlWhereClauseBuilder = new StringBuilder();\n\n        foreach (var operand in ExtractOperands(body))\n        {\n            string fieldName = GetFieldName(operand.Member);\n            object value = GetConstantValue(operand.Constant);\n\n            sqlWhereClauseBuilder.Append($" {fieldName} = '{value}' AND");\n        }\n\n        // Remove the last 'AND'\n        if (sqlWhereClauseBuilder.Length > 0)\n        {\n            sqlWhereClauseBuilder.Remove(sqlWhereClauseBuilder.Length - 4, 4);\n        }\n        \n        return sqlWhereClauseBuilder.ToString();\n    }\n\n    private IEnumerable<MemberConstantPair> ExtractOperands(BinaryExpression body)\n    {\n        Stack<BinaryExpression> binaryExpressions = new Stack<BinaryExpression>();\n        binaryExpressions.Push(body);\n\n        while (binaryExpressions.Count > 0)\n        {\n            var exp = binaryExpressions.Pop();\n\n            if (exp.NodeType == ExpressionType.AndAlso || exp.NodeType == ExpressionType.OrElse)\n            {\n                if (exp.Left is BinaryExpression left) binaryExpressions.Push(left);\n                if (exp.Right is BinaryExpression right) binaryExpressions.Push(right);\n            }\n            else\n            {\n                var memberExpression = (MemberExpression)exp.Left;\n                var constantExpression = (ConstantExpression)exp.Right;\n\n                yield return new MemberConstantPair(memberExpression, constantExpression);\n            }\n        }\n    }\n\n    private string GetFieldName(MemberExpression member)\n    {\n        // This is a naive implementation that does not handle nested members\n        return member.Member.Name.ToLower();\n    }\n\n    private object GetConstantValue(ConstantExpression constant)\n    {\n        return constant.Value;\n    }\n\n    internal class MemberConstantPair\n    {\n        public MemberExpression Member { get; }\n        public ConstantExpression Constant { get; }\n\n        public MemberConstantPair(MemberExpression member, ConstantExpression constant)\n        {\n            Member = member ?? throw new ArgumentNullException(nameof(member));\n            Constant = constant ?? throw new ArgumentNullException(nameof(constant));\n        }\n    }\n}\n\n// Usage example:\nvar converter = new SimpleExpressionToSqlConverter<YourModelType>();\nstring sqlWhereClause = converter.Convert(b => b.user == "joe" && b.domain == "bloggs.com");\nConsole.WriteLine(sqlWhereClause);