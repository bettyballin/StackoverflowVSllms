public DataTable ReadCsv(string filePath)\n{\n    if (string.IsNullOrEmpty(filePath))\n    {\n        log.Error("Invalid CSV file name.");\n        return null;\n    }\n\n    try\n    {\n        DataTable dt = new DataTable();\n        \n        // Detect file encoding, assuming UTF-8 or UTF-16 for Unicode files\n        Encoding encoding = GetFileEncoding(filePath);\n\n        using (StreamReader sr = new StreamReader(filePath, encoding))\n        {\n            string line = sr.ReadLine();\n\n            // If the first line is not null, add columns to DataTable\n            if (!string.IsNullOrEmpty(line))\n            {\n                string[] headers = line.Split(',');\n                foreach (var header in headers)\n                {\n                    dt.Columns.Add(header.Trim());\n                }\n            }\n\n            while ((line = sr.ReadLine()) != null)\n            {\n                string[] rows = line.Split(',');\n                DataRow dr = dt.NewRow();\n                \n                for (int i = 0; i < headers.Length && i < rows.Length; i++)\n                {\n                    dr[i] = rows[i].Trim();\n                }\n                dt.Rows.Add(dr);\n            }\n        }\n\n        return dt;\n    }\n    catch (Exception ex)\n    {\n        log.Error("Error loading CSV content", ex);\n        return null;\n    }\n}\n\npublic static Encoding GetFileEncoding(string srcPath)\n{\n    // Read the BOM\n    using (var reader = new FileStream(srcPath, FileMode.Open, FileAccess.Read))\n    {\n        var bom = new byte[4];\n        int bytesread = reader.Read(bom, 0, 4);\n        if (bytesread >= 2 && bom[0] == 0xFF && bom[1] == 0xFE)\n        {\n            // UTF-16 Little Endian\n            return Encoding.Unicode;\n        }\n        else if (bytesread >= 2 && bom[0] == 0xFE && bom[1] == 0xFF)\n        {\n            // UTF-16 Big Endian\n            return Encoding.BigEndianUnicode;\n        }\n        else if (bytesread >= 3 && bom[0] == 0xEF && bom[1] == 0xBB && bom[2] == 0xBF)\n        {\n            // UTF-8\n            return Encoding.UTF8;\n        }\n    }\n\n    // Default to UTF-8 encoding\n    return Encoding.UTF8;\n}