// Define interfaces for CRUD operations\npublic interface ICreateService<T>\n{\n    T Create(T entity);\n}\n\npublic interface IReadService<T, K>\n{\n    T GetById(K id);\n}\n\n// Concrete service implementations\npublic class ProductService : ICreateService<Product>, IReadService<Product, int>\n{\n    public Product Create(Product entity) { /* implementation */ return entity; }\n    public Product GetById(int id) { /* implementation */ return new Product(); }\n}\n\n// Base controller for common logic\npublic abstract class BaseController : Controller\n{\n    protected void LogError(string message)\n    {\n        // logging implementation\n    }\n}\n\n// Specific controllers with composition\npublic class ProductsController : BaseController\n{\n    private readonly ICreateService<Product> _productCreationService;\n    private readonly IReadService<Product, int> _productReadingService;\n\n    public ProductsController(ICreateService<Product> productCreationService,\n                             IReadService<Product, int> productReadingService)\n    {\n        _productCreationService = productCreationService;\n        _productReadingService = productReadingService;\n    }\n\n    [HttpPost]\n    public ActionResult Create(Product product)\n    {\n        var createdProduct = _productCreationService.Create(product);\n        return Json(createdProduct);\n    }\n\n    public ActionResult GetById(int id)\n    {\n        var product = _productReadingService.GetById(id);\n        return Json(product);\n    }\n}