using System;\nusing System.Data.SqlClient;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static void Main()\n    {\n        var tasks = new Task[10]; // Number of threads\n\n        for (int i = 0; i < tasks.Length; i++)\n        {\n            int id = i; // Capture the current value of i in a local variable\n            tasks[i] = Task.Run(() => ProcessCustomers(id));\n        }\n\n        Task.WaitAll(tasks);\n    }\n\n    static void ProcessCustomers(int threadId)\n    {\n        using (var connection = new SqlConnection("YourConnectionStringHere"))\n        {\n            connection.Open();\n            while (true) // This should have an exit condition in production\n            {\n                var commandText = @"UPDATE TOP(1000) CustomerTable\n                                   SET ProcessingStatus = @LockStatus\n                                   OUTPUT INSERTED.CustomerID\n                                   FROM CustomerTable WITH (ROWLOCK, UPDLOCK)\n                                   WHERE LastUpdated >= DATEADD(hour, -1, GETDATE())\n                                     AND ProcessingStatus IS NULL";\n\n                using (var command = new SqlCommand(commandText, connection))\n                {\n                    command.Parameters.AddWithValue("@LockStatus", "locked");\n                    var reader = command.ExecuteReader();\n\n                    if (!reader.HasRows)\n                        return; // Exit condition if no more rows to process\n\n                    while (reader.Read())\n                    {\n                        int customerId = reader.GetInt32(0);\n                        ProcessCustomerData(customerId, threadId);\n                    }\n\n                    reader.Close();\n                }\n            }\n        }\n    }\n\n    static void ProcessCustomerData(int customerId, int threadId)\n    {\n        Console.WriteLine($"Thread {threadId} processing customer ID: {customerId}");\n        // Simulate processing\n        System.Threading.Thread.Sleep(100);\n\n        using (var connection = new SqlConnection("YourConnectionStringHere"))\n        {\n            connection.Open();\n            var commandText = "UPDATE CustomerTable SET ProcessingStatus = NULL WHERE CustomerID = @CustomerID";\n            using (var command = new SqlCommand(commandText, connection))\n            {\n                command.Parameters.AddWithValue("@CustomerID", customerId);\n                command.ExecuteNonQuery();\n            }\n        }\n    }\n}