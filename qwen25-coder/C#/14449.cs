using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic static class CryptoHelper\n{\n    private static readonly byte[] Key = Encoding.UTF8.GetBytes("YourSecretKey1234567"); // Must be 16, 24 or 32 bytes long\n    private static readonly byte[] IV = Encoding.UTF8.GetBytes("YourIVVector12");       // Must be 16 bytes long\n\n    public static string Encrypt(string plainText)\n    {\n        if (string.IsNullOrEmpty(plainText)) return null;\n\n        using var aesAlg = Aes.Create();\n        aesAlg.Key = Key;\n        aesAlg.IV = IV;\n\n        ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n        using var memoryStream = new MemoryStream();\n        using var cryptoStream = new CryptoStream(memoryStream, encryptor, CryptoStreamMode.Write);\n        using (var streamWriter = new StreamWriter(cryptoStream))\n        {\n            streamWriter.Write(plainText);\n        }\n        return Convert.ToBase64String(memoryStream.ToArray());\n    }\n\n    public static string Decrypt(string cipherText)\n    {\n        if (string.IsNullOrEmpty(cipherText)) return null;\n\n        using var aesAlg = Aes.Create();\n        aesAlg.Key = Key;\n        aesAlg.IV = IV;\n\n        ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);\n\n        using var memoryStream = new MemoryStream(Convert.FromBase64String(cipherText));\n        using var cryptoStream = new CryptoStream(memoryStream, decryptor, CryptoStreamMode.Read);\n        using (var streamReader = new StreamReader(cryptoStream))\n        {\n            return streamReader.ReadToEnd();\n        }\n    }\n}