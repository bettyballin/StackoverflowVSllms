// Aggregate Root: Organization\npublic class Organization {\n    public int Id { get; private set; }\n    public string Name { get; private set; }\n    private readonly List<OrganizationUser> _users = new();\n\n    // Adding user to organization can encapsulate rules about role, flagging, etc.\n    public void AddUser(User user, bool flagged = false) {\n        var orgUser = new OrganizationUser(user, this, flagged: flagged);\n        _users.Add(orgUser);\n    }\n\n    public void RemoveUser(User user) {\n        // logic to remove\n    }\n}\n\n// Aggregate Root: User\npublic class User {\n    public int Id { get; private set; }\n    public string Name { get; private set; }\n    private readonly List<OrganizationUser> _organizations = new();\n\n    // Method to associate a user with an organization\n    public void JoinOrganization(Organization org, bool flagged = false) {\n        var orgUser = new OrganizationUser(this, org, flagged);\n        _organizations.Add(orgUser);\n    }\n\n    public void LeaveOrganization(Organization org) {\n        // logic to remove\n    }\n}\n\n// Association Class: OrganizationUser\npublic class OrganizationUser {\n    private readonly User _user;\n    private readonly Organization _organization;\n    public bool Flagged { get; set; }\n\n    // Constructor and any other business logic related to user-organization association\n    public OrganizationUser(User user, Organization organization, bool flagged) {\n        _user = user;\n        _organization = organization;\n        Flagged = flagged;\n    }\n}