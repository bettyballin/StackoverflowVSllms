using System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\npublic class Category\n{\n    public string ID { get; set; }\n    public string Name { get; set; }\n    public string ParentCategoryID { get; set; }\n\n    // Child categories will be stored in a list\n    public List<Category> Children { get; set; } = new List<Category>();\n}\n\npublic class CategoryTreeBuilder\n{\n    private Dictionary<string, Category> _categoryById = new Dictionary<string, Category>();\n\n    public ObservableCollection<Category> BuildCategoryTree(ObservableCollection<Category> categories)\n    {\n        // Populate dictionary for quick lookup by ID\n        foreach (var category in categories)\n        {\n            _categoryById[category.ID] = category;\n        }\n\n        // Add each category to its parent's child list (or treat as root if no parent is found)\n        foreach (var category in categories)\n        {\n            if (_categoryById.TryGetValue(category.ParentCategoryID, out var parent))\n            {\n                parent.Children.Add(category);\n            }\n        }\n\n        var tree = new ObservableCollection<Category>();\n\n        // Add categories without a ParentCategoryID to the root level of the tree\n        foreach (var category in _categoryById.Values)\n        {\n            if (string.IsNullOrEmpty(category.ParentCategoryID))\n            {\n                tree.Add(category);\n            }\n        }\n\n        return tree;\n    }\n}