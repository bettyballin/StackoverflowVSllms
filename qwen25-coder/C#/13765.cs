using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class AesEncryptionHelper\n{\n    public static string Encrypt(string plainText, string key)\n    {\n        using (Aes aesAlg = Aes.Create())\n        {\n            byte[] keyBytes = Encoding.UTF8.GetBytes(SubstituteKey(key));\n            aesAlg.Key = keyBytes;\n            aesAlg.IV = new byte[16]; // AES block size is 128 bits, so IV should be 16 bytes\n            aesAlg.Mode = CipherMode.CBC; // Ensure match with JS AES library mode\n            aesAlg.Padding = PaddingMode.PKCS7; // Ensure match with JS AES library padding\n\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n            \n            using (MemoryStream msEncrypt = new MemoryStream())\n            {\n                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                {\n                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))\n                    {\n                        swEncrypt.Write(plainText);\n                    }\n                    return Convert.ToBase64String(msEncrypt.ToArray());\n                }\n            }\n        }\n    }\n\n    public static string Decrypt(string cipherText, string key)\n    {\n        byte[] encryptedDataBytes = Convert.FromBase64String(cipherText);\n\n        using (Aes aesAlg = Aes.Create())\n        {\n            byte[] keyBytes = Encoding.UTF8.GetBytes(SubstituteKey(key));\n            aesAlg.Key = keyBytes;\n            aesAlg.IV = new byte[16]; // AES block size is 128 bits, so IV should be 16 bytes\n            aesAlg.Mode = CipherMode.CBC; // Ensure match with JS AES library mode\n            aesAlg.Padding = PaddingMode.PKCS7; // Ensure match with JS AES library padding\n\n            ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);\n            \n            using (MemoryStream msDecrypt = new MemoryStream(encryptedDataBytes))\n            {\n                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n                {\n                    using (StreamReader srDecrypt = new StreamReader(csDecrypt))\n                    {\n                        return srDecrypt.ReadToEnd();\n                    }\n                }\n            }\n        }\n    }\n\n    private static string SubstituteKey(string key)\n    {\n        // Ensure key length is either 16, 24 or 32 bytes (128, 192 or 256 bits). \n        // This is a simple implementation and should be replaced with proper truncation/extension.\n        return key.Length <= 16 ? key.PadRight(16) : key.Substring(0, 32);\n    }\n}