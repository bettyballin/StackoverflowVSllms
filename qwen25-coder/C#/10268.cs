public class EventSourceLogger : ILogger<EventSourceLogger>\n{\n    private readonly MyEventSource _eventSource;\n\n    public EventSourceLogger(MyEventSource eventSource)\n    {\n        _eventSource = eventSource;\n    }\n\n    public IDisposable BeginScope<TState>(TState state) => null;\n\n    public bool IsEnabled(LogLevel logLevel) => true;\n\n    public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter)\n    {\n        if (formatter == null)\n        {\n            throw new ArgumentNullException(nameof(formatter));\n        }\n\n        var message = formatter(state, exception);\n\n        if (string.IsNullOrEmpty(message))\n        {\n            return;\n        }\n\n        _eventSource.MessageWritten($"{logLevel}: {message}");\n    }\n}\n\n[EventSource(Name = "MyApplication-Events")]\npublic class MyEventSource : EventSource\n{\n    public static readonly MyEventSource Log = new MyEventSource();\n\n    [Event(1, Message = "{0}", Level = EventLevel.Informational)]\n    public void MessageWritten(string message) => WriteEvent(1, message);\n}\n\n// Usage in your service:\npublic class SomeService\n{\n    private readonly ILogger<SomeService> _logger;\n\n    public SomeService(ILogger<SomeService> logger)\n    {\n        _logger = logger;\n    }\n\n    public void DoWork()\n    {\n        _logger.LogInformation("DoWork called");\n        // method implementation\n    }\n}\n\n// Register the logger and event source in your Startup.cs or similar:\nservices.AddSingleton<EventSourceLogger>();\nservices.AddLogging(loggingBuilder => loggingBuilder.AddProvider(new EventSourceLoggerProvider()));