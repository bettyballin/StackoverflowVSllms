using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.Composition;\nusing System.ComponentModel.Composition.Hosting;\n\n[Export]\npublic interface IPlugin {\n    void Execute();\n}\n\npublic class PluginManager : IDisposable {\n    private CompositionContainer _container;\n\n    public IEnumerable<IPlugin> Plugins { get; set; }\n\n    public PluginManager() {\n        var catalog = new AggregateCatalog();\n        // Add your plugin source here, e.g., from a directory\n        catalog.Catalogs.Add(new DirectoryCatalog("Plugins"));\n\n        _container = new CompositionContainer(catalog);\n\n        // Compose parts\n        _container.ComposeParts(this);\n    }\n\n    public void RunPlugins() {\n        foreach (var plugin in Plugins) {\n            plugin.Execute();\n        }\n    }\n\n    public void Dispose() {\n        if (_container != null) {\n            _container.Dispose();\n        }\n    }\n}\n\n// Example of a plugin class\n[Export(typeof(IPlugin))]\npublic class SamplePlugin : IPlugin {\n    public void Execute() {\n        Console.WriteLine("Sample plugin is executing.");\n    }\n}