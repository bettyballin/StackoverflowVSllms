using System;\nusing System.Collections.Generic;\nusing System.Dynamic;\n\npublic class InterfaceProxy : DynamicObject {\n    private readonly object _targetObject;\n    private readonly Type _interfaceType;\n\n    public InterfaceProxy(object targetObject, Type interfaceType) {\n        this._targetObject = targetObject;\n        this._interfaceType = interfaceType;\n    }\n\n    public override bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object result) {\n        var methodInfo = _targetObject.GetType().GetMethod(binder.Name);\n        if (methodInfo != null) {\n            try {\n                result = methodInfo.Invoke(_targetObject, args);\n                return true;\n            } catch (Exception ex) {\n                Console.WriteLine($"Error invoking {binder.Name}: {ex}");\n                result = null;\n                return false;\n            }\n        }\n\n        // Handle missing methods gracefully\n        var interfaceMethods = _interfaceType.GetMethod(binder.Name);\n        if (interfaceMethods != null && !methodInfo.IsPublic) {\n            throw new NotImplementedException($"Method '{binder.Name}' was not implemented in the provided object.");\n        } else {\n            result = null;\n            return false;\n        }\n    }\n\n    public static T Cast<T>(object obj) where T : class {\n        var proxy = new InterfaceProxy(obj, typeof(T));\n        return proxy as T;\n    }\n}