using System;\nusing System.DirectoryServices;\nusing System.Management.Automation.Runspaces;\n\nprivate static void CreateVDir(string metabasePath, string vDirName, string physicalPath)\n{\n    // Ensure .NET Framework 2.0 is configured for application pool\n    var appPoolName = "Net2AppPool";\n    ConfigureAppPoolForNetFramework(appPoolName, "v2.0");\n\n    Console.WriteLine("\nCreating virtual directory {0}/{1}, mapping the Root application to {2}:",\n                      metabasePath, vDirName, physicalPath);\n\n    DirectoryEntry site = new DirectoryEntry(metabasePath);\n    string className = site.SchemaClassName;\n    if ((className.EndsWith("Server")) || (className.EndsWith("VirtualDir")))\n    {\n        DirectoryEntries vdirs = site.Children;\n        DirectoryEntry newVDir = vdirs.Add(vDirName, (className.Replace("Service", "VirtualDir")));\n        newVDir.Properties["Path"][0] = physicalPath;\n        newVDir.Properties["AccessScript"][0] = true;\n        // These properties are necessary for an application to be created.\n        newVDir.Properties["AppFriendlyName"][0] = vDirName;\n        newVDir.Properties["AppIsolated"][0] = "1";\n        newVDir.Properties["AppRoot"][0] =\n           "/LM" +\n           metabasePath.Substring(metabasePath.IndexOf("/", ("IIS://".Length)));\n        \n        // Set the application pool for this virtual directory\n        newVDir.Properties["AppPoolId"][0] = appPoolName;\n        newVDir.CommitChanges();\n        Console.WriteLine(" Done.");\n    }\n    else\n        Console.WriteLine(\n            " Failed. A virtual directory can only be created in a site or virtual directory node.");\n}\n\nprivate static void ConfigureAppPoolForNetFramework(string appPoolName, string frameworkVersion)\n{\n    // Check if application pool already exists and configure it if necessary\n    var powershellCommand = $@"\n        Import-Module WebAdministration;\n        if (!(Test-Path IIS:\AppPools\{appPoolName})) {{\n            New-Item IIS:\AppPools\{appPoolName};\n            Set-ItemProperty -Path IIS:\AppPools\{appPoolName} -Name autoStart -Value $true;\n            Set-ItemProperty -Path IIS:\AppPools\{appPoolName}\managedRuntimeVersion -Value {frameworkVersion};\n        }}\n    ";\n\n    // Execute the PowerShell script\n    using (PowerShell ps = PowerShell.Create())\n    {\n        ps.AddScript(powershellCommand);\n        ps.Invoke();\n    }\n}