List<string> keysToReturn = new List<string>();\nint numberPossibleToGet = requestedNumberToGet > cachedKeys.Length ? cachedKeys.Length : requestedNumberToGet;\nHashSet<string> seenKeys = new HashSet<string>(); // Use a HashSet for O(1) average lookups\nRandom rand = new Random(); // Avoid creating this in loop\n\nDateTime breakoutTime = DateTime.Now.AddMilliseconds(5);\n\nwhile (DateTime.Now < breakoutTime && keysToReturn.Count < numberPossibleToGet)\n{\n    string randomKey;\n    do\n    {\n        randomKey = cachedKeys[rand.Next(cachedKeys.Length)];\n    } while (!seenKeys.Add(randomKey)); // Add and check in one step\n    \n    keysToReturn.Add(randomKey);\n}\n\nif (keysToReturn.Count != numberPossibleToGet)\n{\n    Debugger.Break();\n}