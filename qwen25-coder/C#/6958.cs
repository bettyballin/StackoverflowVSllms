using System;\nusing System.Drawing;\nusing System.Drawing.Imaging;\n\npublic class ImageSaver\n{\n    public static void SaveImage(string sourcePath, string destinationPath, int targetFileSizeInKb)\n    {\n        var image = new Bitmap(sourcePath);\n        var jpegCodec = GetEncoderInfo("image/jpeg");\n        var encoderParameters = new EncoderParameters(1);\n\n        // Initial quality setting (0-100, 100 being the highest)\n        int quality = 90;\n        int fileSize;\n\n        do\n        {\n            using (var ms = new System.IO.MemoryStream())\n            {\n                encoderParameters.Param[0] = new EncoderParameter(System.Drawing.Imaging.Encoder.Quality, quality);\n                image.Save(ms, jpegCodec, encoderParameters);\n                fileSize = (int)(ms.Length / 1024.0); // Size in KB\n            }\n\n            // Reduce quality if file size is larger than target\n            if (fileSize > targetFileSizeInKb)\n            {\n                quality -= 5;\n            }\n            else if (Math.Abs(fileSize - targetFileSizeInKb) <= 1 && quality < 90)\n            {\n                quality += 1; // Fine-tune upwards\n            }\n\n        } while ((quality >= 10) && (fileSize > targetFileSizeInKb || Math.Abs(targetFileSizeInKb - fileSize) > 1));\n\n        image.Save(destinationPath, jpegCodec, encoderParameters);\n    }\n\n    private static ImageCodecInfo GetEncoderInfo(string mimeType)\n    {\n        var encoders = ImageCodecInfo.GetImageEncoders();\n        return Array.Find(encoders, coder => coder.MimeType == mimeType);\n    }\n}