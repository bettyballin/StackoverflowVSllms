// Event arguments class\npublic class SpeakToMeEventArgs : EventArgs\n{\n    public string Message { get; }\n    public SpeakToMeEventArgs(string message)\n    {\n        this.Message = message;\n    }\n}\n\npublic delegate void SpeakToMeHandler(object sender, SpeakToMeEventArgs e);\n\n// Tweeter class\npublic class Tweeter\n{\n    public event SpeakToMeHandler SpeakToMe;\n\n    protected virtual void OnSpeakToMe(string message)\n    {\n        SpeakToMe?.Invoke(this, new SpeakToMeEventArgs(message));\n    }\n\n    public void Execute()\n    {\n        // Simulate some work and raise the SpeakToMe event\n        OnSpeakToMe("Tweeter is speaking!");\n    }\n}\n\n// Woofer class\npublic class Woofer\n{\n    public event SpeakToMeHandler SpeakToMe;\n\n    protected virtual void OnSpeakToMe(string message)\n    {\n        SpeakToMe?.Invoke(this, new SpeakToMeEventArgs(message));\n    }\n\n    public void Execute()\n    {\n        // Simulate some work and raise the SpeakToMe event\n        OnSpeakToMe("Woofer is speaking!");\n    }\n}\n\n// Speaker class\npublic class Speaker\n{\n    private Tweeter tweeter;\n    private Woofer woofer;\n\n    public Speaker()\n    {\n        tweeter = new Tweeter();\n        woofer = new Woofer();\n\n        // Subscribe to the SpeakToMe events of Tweeter and Woofer\n        tweeter.SpeakToMe += OnTweeterSpeakToMe;\n        woofer.SpeakToMe += OnWooferSpeakToMe;\n    }\n\n    public event SpeakToMeHandler SpeakToMe;\n\n    protected virtual void OnSpeakToMe(string message)\n    {\n        SpeakToMe?.Invoke(this, new SpeakToMeEventArgs(message));\n    }\n\n    private void OnTweeterSpeakToMe(object sender, SpeakToMeEventArgs e)\n    {\n        Console.WriteLine("the tweeter is speaking: " + e.Message);\n        this.OnSpeakToMe("tweeter rockin' out [" + e.Message + "]");\n    }\n\n    private void OnWooferSpeakToMe(object sender, SpeakToMeEventArgs e)\n    {\n        Console.WriteLine("the woofer is speaking: " + e.Message);\n        this.OnSpeakToMe("woofer rumbling [" + e.Message + "]");\n    }\n}\n\n// Usage in your WinForm\npublic partial class MainForm : Form\n{\n    private Speaker speaker;\n\n    public MainForm()\n    {\n        InitializeComponent();\n\n        speaker = new Speaker();\n        // Subscribe to the SpeakToMe event of Speaker to capture all propagated messages\n        speaker.SpeakToMe += Speaker_SpeakToMe;\n    }\n\n    private void SpeakButton_Click(object sender, EventArgs e)\n    {\n        // Trigger execution in Tweeter and Woofer\n        speaker.tweeter.Execute();\n        speaker.woofer.Execute();\n    }\n\n    private void Speaker_SpeakToMe(object sender, SpeakToMeEventArgs e)\n    {\n        Console.WriteLine("Speaker event heard: " + e.Message);\n        // Optionally update your UI here\n    }\n}