using System;\nusing System.Collections.Generic;\n\npublic class RandomizeWhenEqualComparer<T> : IComparer<T>\n{\n    private readonly Func<T, T, int> _comparer;\n    private static Random StaticRandom = new Random();\n\n    public int Compare(T x, T y)\n    {\n        // First, use the provided comparer to compare the items.\n        int result = _comparer(x, y);\n\n        // If they are equal based on the score (or whatever criteria you're using),\n        // return a random -1 or 1 to shuffle them.\n        if (result == 0)\n        {\n            double random = StaticRandom.NextDouble();\n            return (random < 0.5) ? -1 : 1;\n        }\n\n        // Otherwise, return the result of the comparison.\n        return result;\n    }\n\n    public RandomizeWhenEqualComparer(Func<T, T, int> comparer)\n    {\n        _comparer = comparer ?? throw new ArgumentNullException(nameof(comparer));\n    }\n}\n\n// Usage example with a list of objects that have a Score property.\npublic class Item\n{\n    public int Score { get; set; }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        List<Item> myList = new List<Item>\n        {\n            new Item { Score = 10 },\n            new Item { Score = 20 },\n            new Item { Score = 10 },\n            new Item { Score = 30 }\n        };\n\n        myList.Sort(new RandomizeWhenEqualComparer<Item>((x, y) => x.Score.CompareTo(y.Score)));\n\n        foreach (var item in myList)\n        {\n            Console.WriteLine(item.Score);\n        }\n    }\n}