// Example of UnitOfWork class\n   public class UnitOfWork : IUnitOfWork {\n       private readonly YourDbContext _context;\n       public IRepository<Customer> CustomerRepository { get; }\n\n       public UnitOfWork(YourDbContext context) {\n           _context = context;\n           CustomerRepository = new Repository<Customer>(context);\n       }\n\n       public void Commit() {\n           _context.SaveChanges();\n       }\n\n       // IDisposable implementation\n   }\n\n   // In Business Logic Layer, use the unit of work to manage transactions\n   public class CustomerService : ICustomerService {\n       private readonly IUnitOfWork _unitOfWork;\n\n       public CustomerService(IUnitOfWork unitOfWork) {\n           _unitOfWork = unitOfWork;\n       }\n\n       public void UpdateCustomer(CustomerDto customerDto) {\n           var existingCustomer = _unitOfWork.CustomerRepository.Get(customerDto.Id);\n           if (existingCustomer != null) {\n               // Update properties\n               existingCustomer.Name = customerDto.Name;\n\n               try {\n                   _unitOfWork.Commit();\n               } catch (Exception ex) {\n                   // Handle exceptions, possibly rollback\n               }\n           }\n       }\n   }