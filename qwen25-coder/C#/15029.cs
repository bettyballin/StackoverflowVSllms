using System;\nusing System.Net.Sockets;\nusing System.Threading.Tasks;\n\npublic class AsynchronousTcpListener\n{\n    TcpListener listener;\n\n    public AsynchronousTcpListener(int port)\n    {\n        listener = new TcpListener(System.Net.IPAddress.Any, port);\n    }\n\n    public async Task StartAsync()\n    {\n        listener.Start();\n        Console.WriteLine("Listening for connections...");\n        while (true)\n        {\n            var client = await listener.AcceptTcpClientAsync();\n            _ = HandleClientConnectionAsync(client); // spawn off a new task to handle the client\n        }\n    }\n\n    private async Task HandleClientConnectionAsync(TcpClient client)\n    {\n        var stream = client.GetStream();\n        byte[] buffer = new byte[1024];\n\n        try\n        {\n            while (true) // Long-lived connection loop\n            {\n                int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n                if (bytesRead == 0) break; // End of transmission\n\n                // Process the data received from the client.\n                byte[] response = GetResponseFromBuffer(buffer, bytesRead);\n                \n                // Send a response back to the client.\n                await stream.WriteAsync(response, 0, response.Length);\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($"An error occurred: {ex}");\n        }\n        finally\n        {\n            client.Close();\n        }\n    }\n\n    private byte[] GetResponseFromBuffer(byte[] buffer, int bytesRead)\n    {\n        // Implement your logic to process the data and prepare a response.\n        return new byte[bytesRead]; \n    }\n}\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        var server = new AsynchronousTcpListener(5000);\n        await server.StartAsync();\n    }\n}