using System;\nusing Newtonsoft.Json.Linq;\nusing Newtonsoft.Json.Schema;\n\npublic class ApiTest\n{\n    public void TestApi()\n    {\n        // Example dynamic JSON response (usually obtained by calling the API)\n        string jsonResponse = "{\"videos\":[{\"id\":230482394920,\"name\":\"foobarrr\",\"shortDescription\":\"foo\"}],\"page_number\":0,\"page_size\":100,\"total_count\":0}";\n\n        // Define JSON schema\n        var schemaJson = @"\n{\n  ''$schema'': 'http://json-schema.org/draft-07/schema#',\n  'type': 'object',\n  'properties': {\n    'videos': {\n      'type': 'array',\n      'items': {\n        'type': 'object',\n        'properties': {\n          'id': {'type': 'integer'},\n          'name': {'type': 'string'},\n          'shortDescription': {'type': 'string'}\n        },\n        'required': ['id', 'name']\n      }\n    },\n    'page_number': {'type': 'integer'},\n    'page_size': {'type': 'integer'},\n    'total_count': {'type': 'integer'}\n  },\n  'required': ['videos', 'page_number', 'page_size', 'total_count']\n}";\n\n        var schema = JSchema.Parse(schemaJson);\n        \n        // Parse the JSON response\n        var responseObj = JObject.Parse(jsonResponse);\n\n        // Validate the JSON against the schema\n        bool isValid = responseObj.IsValid(schema, out IList<string> messages);\n        if (!isValid)\n        {\n            foreach (var message in messages)\n            {\n                Console.WriteLine(message);  // Output any validation errors\n            }\n        }\n        \n        Console.WriteLine($"Is valid: {isValid}");\n    }\n}