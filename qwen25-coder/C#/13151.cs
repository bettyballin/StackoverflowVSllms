using System;\nusing System.Net.Sockets;\nusing System.Text;\nusing System.Threading.Tasks;\n\npublic class Client\n{\n    private TcpClient _clientSocket;\n\n    public async Task ConnectAsync(string server, int port)\n    {\n        _clientSocket = new TcpClient();\n        await _clientSocket.ConnectAsync(server, port);\n        Console.WriteLine("Connected to server.");\n\n        // Start a listener for incoming messages from the server in the background\n        _ = ListenForMessages();\n\n        // Send some data to the server\n        await SendMessage("Hello Server!");\n\n        // Keep the client running to receive more responses or send new requests\n    }\n\n    private async Task sendMessage(string message)\n    {\n        using var stream = _clientSocket.GetStream();\n        byte[] data = Encoding.UTF8.GetBytes(message);\n        await stream.WriteAsync(data, 0, data.Length);\n    }\n\n    private async Task ListenForMessages()\n    {\n        using var networkStream = _clientSocket.GetStream();\n        byte[] buffer = new byte[1024];\n\n        while (_clientSocket.Connected)\n        {\n            int bytesRead = await networkStream.ReadAsync(buffer, 0, buffer.Length);\n            if (bytesRead == 0) break;\n\n            string message = Encoding.UTF8.GetString(buffer, 0, bytesRead);\n            Console.WriteLine("Received from server: " + message);\n\n            // Process the received data\n            // ...\n        }\n    }\n\n    public void Disconnect()\n    {\n        _clientSocket.Close();\n        Console.WriteLine("Disconnected from server.");\n    }\n}