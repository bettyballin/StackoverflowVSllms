using System;\nusing System.Net.Http;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class CustomHttpMessageHandler : HttpMessageHandler\n{\n    protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\n    {\n        // Intercept the HTTP request here\n        Console.WriteLine($"Intercepted request: {request.Method} {request.RequestUri}");\n\n        // You can cancel the request by throwing an exception or modifying the cancellation token\n        // Example to cancel by throwing an exception:\n        if (shouldCancelRequest(request))\n        {\n            throw new OperationCanceledException("Request was cancelled.");\n        }\n\n        // Call the base SendAsync method to send the actual request\n        var response = await base.SendAsync(request, cancellationToken);\n\n        // Intercept the HTTP response here\n        Console.WriteLine($"Response status code: {response.StatusCode}");\n\n        return response;\n    }\n\n    private bool shouldCancelRequest(HttpRequestMessage request)\n    {\n        // Define your logic for canceling requests here\n        // For example:\n        return request.RequestUri.ToString().Contains("cancelthis");\n    }\n}\n\npublic class Program\n{\n    public static async Task Main(string[] args)\n    {\n        var handler = new CustomHttpMessageHandler();\n        using (var httpClient = new HttpClient(handler))\n        {\n            try\n            {\n                var response = await httpClient.GetAsync("http://example.com/endpoint");\n                Console.WriteLine($"Actual response: {await response.Content.ReadAsStringAsync()}");\n            }\n            catch (OperationCanceledException e)\n            {\n                Console.WriteLine(e.Message);\n            }\n        }\n    }\n}