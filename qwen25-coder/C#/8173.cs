using Google.Apis.Auth.OAuth2;\nusing Google.Apis.Services;\nusing Google.Apis.AnalyticsReporting.v4;\nusing Google.Apis.AnalyticsReporting.v4.Data;\n\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    private static readonly string[] Scopes = { AnalyticsReportingService.Scope.AnalyticsReadonly };\n    private static readonly string ApplicationName = "Analytics Reporting Quickstart";\n\n    static void Main(string[] args)\n    {\n        Run().Wait();\n    }\n\n    public static async Task Run()\n    {\n        UserCredential credential;\n\n        using (var stream =\n            new FileStream("credentials.json", FileMode.Open, FileAccess.Read))\n        {\n            // The file token.json stores the user's access and refresh tokens, and is created\n            // automatically when the authorization flow completes for the first time.\n            string credPath = "token.json";\n            credential = GoogleWebAuthorizationBroker.AuthorizeAsync(\n                GoogleClientSecrets.Load(stream).Secrets,\n                Scopes,\n                "user",\n                CancellationToken.None,\n                new FileDataStore(credPath, true)).Result;\n        }\n\n        // Create the service.\n        var service = new AnalyticsReportingService(new BaseClientService.Initializer()\n        {\n            HttpClientInitializer = credential,\n            ApplicationName = ApplicationName,\n        });\n\n        var dateRange = new DateRange();\n        dateRange.StartDate = "7daysAgo";\n        dateRange.EndDate = "today";\n\n        // Create the Metrics object.\n        var sessions = new Metric\n        {\n            Expression = "ga:sessions",\n            Alias = "Sessions"\n        };\n\n        //Create the Dimensions object.\n        var pagePath = new Dimension\n        {\n            Name = "ga:pagePath"\n        };\n\n        // Create the Reporting request.\n        var request = new GetReportsRequest()\n        {\n            ReportRequests = new List<ReportRequest>()\n                {\n                    new ReportRequest()\n                    {\n                        ViewId = "YOUR_VIEW_ID",\n                        DateRanges = new List<DateRange>() { dateRange },\n                        Dimensions = new List<Dimension>() { pagePath },\n                        Metrics = new List<Metric>() { sessions }\n                    }\n                }\n        };\n\n        var batchRequest = service.Reports.BatchGet(request);\n        try\n        {\n            var response = batchRequest.Execute();\n            PrintResponse(response);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine("There was an error running the report. Error message: " + e.Message);\n        }\n\n    }\n\n    public static void PrintResponse(GetReportsResponse response)\n    {\n        foreach (var report in response.Reports)\n        {\n            var columnHeader = report.ColumnHeader;\n            var dimensionHeaders = columnHeader.Dimensions;\n            var metricHeaders = columnHeader.MetricHeader.MetricHeaderEntries;\n            foreach (var row in report.Data.Rows)\n            {\n                for (int i = 0; i < dimensionHeaders.Count && i < row.Dimensions.Count; i++)\n                {\n                    Console.Write(dimensionHeaders[i] + ": " + row.Dimensions[i]);\n                }\n                Console.Write("    ");\n\n                for (var j = 0; j < metricHeaders.Count && j < row.Metrics.Count; j++)\n                {\n                    for (var k = 0; k < metricHeaders[j].MetricNames.Count; k++)\n                    {\n                        Console.Write(metricHeaders[j].MetricNames[k] + ": " + row.Metrics[j].Values[k]);\n                    }\n                }\n\n                Console.WriteLine();\n            }\n        }\n    }\n}