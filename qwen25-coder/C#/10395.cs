using System;\nusing System.Collections.Generic;\n\npublic abstract class AmICircular\n{\n    private List<AmICircular> Children { get; set; }\n\n    protected AmICircular()\n    {\n        Children = new List<AmICircular>();\n    }\n\n    public void Add(AmICircular target)\n    {\n        PerformCircularReferenceCheck(target);\n        Children.Add(target);\n    }\n\n    protected abstract void PerformCircularReferenceCheck(AmICircular target);\n\n    protected bool IsReachableFrom(AmICircular target)\n    {\n        if (this == target) return true;\n\n        var queue = new Queue<AmICircular>();\n        var visited = new HashSet<AmICircular>();\n\n        foreach (var child in Children)\n        {\n            queue.Enqueue(child);\n            visited.Add(child);\n        }\n\n        while (queue.Count > 0)\n        {\n            var current = queue.Dequeue();\n            if (current == target) return true;\n\n            foreach (var child in current.Children)\n            {\n                if (!visited.Contains(child))\n                {\n                    queue.Enqueue(child);\n                    visited.Add(child);\n                }\n            }\n        }\n\n        return false;\n    }\n}\n\npublic class ConcreteClass : AmICircular\n{\n    protected override void PerformCircularReferenceCheck(AmICircular target)\n    {\n        if (IsReachableFrom(target))\n        {\n            throw new InvalidOperationException("Circular reference detected!");\n        }\n    }\n}