using System;\nusing System.IO.Pipes;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class SecureCommunication\n{\n    // Method for the parent process to send data\n    public static void SendSecureData(string pipeName, string plainText)\n    {\n        var encryptedData = EncryptString(plainText);\n        using (var pipeServer = new NamedPipeServerStream(pipeName, PipeDirection.Out, 1,\n            PipeTransmissionMode.Byte, PipeOptions.None))\n        {\n            pipeServer.WaitForConnection();\n            using (var writer = new StreamWriter(pipeServer))\n            {\n                writer.WriteLine(Convert.ToBase64String(encryptedData));\n            }\n        }\n    }\n\n    // Method for the child process to receive and decrypt data\n    public static string ReceiveSecureData(string pipeName)\n    {\n        using (var pipeClient = new NamedPipeClientStream(".", pipeName, PipeDirection.In))\n        {\n            pipeClient.Connect();\n            using (var reader = new StreamReader(pipeClient))\n            {\n                var encryptedBase64 = reader.ReadLine();\n                if (encryptedBase64 != null)\n                {\n                    byte[] encryptedData = Convert.FromBase64String(encryptedBase64);\n                    return DecryptString(encryptedData);\n                }\n            }\n        }\n        return "";\n    }\n\n    private static byte[] EncryptString(string plainText)\n    {\n        using (var aes = Aes.Create())\n        {\n            aes.GenerateKey();\n            aes.GenerateIV();\n\n            using var encryptor = aes.CreateEncryptor(aes.Key, aes.IV);\n\n            // Key and IV need to be securely stored or transferred with the encrypted data\n            Console.WriteLine($"AES Key: {Convert.ToBase64String(aes.Key)}");\n            Console.WriteLine($"AES IV: {Convert.ToBase64String(aes.IV)}");\n\n            using var ms = new MemoryStream();\n            using (var cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))\n            {\n                using var sw = new StreamWriter(cs);\n                sw.Write(plainText);\n            }\n            return ms.ToArray();\n        }\n    }\n\n    private static string DecryptString(byte[] cipherData)\n    {\n        // Use the same Key and IV as used during encryption\n        using (var aes = Aes.Create())\n        {\n            aes.Key = Convert.FromBase64String("YOUR_BASE64_KEY_HERE");\n            aes.IV = Convert.FromBase64String("YOUR_BASE64_IV_HERE");\n\n            using var decryptor = aes.CreateDecryptor(aes.Key, aes.IV);\n\n            using var ms = new MemoryStream(cipherData);\n            using (var cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read))\n            {\n                using var sr = new StreamReader(cs);\n                return sr.ReadToEnd();\n            }\n        }\n    }\n}