using System;\nusing System.Reflection;\n\npublic class ChildClass : BaseClass\n{\n    public new virtual string TempProperty { get; set; }\n}\n\npublic class BaseClass\n{\n    public virtual string TempProperty { get; set; }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        var childType = typeof(ChildClass);\n        var baseType = childType.BaseType;\n\n        // Get the property from ChildClass\n        var childProperty = childType.GetProperty("TempProperty");\n        \n        // Get all properties in BaseClass to compare\n        var baseProperties = baseType.GetProperties();\n\n        foreach (var baseProperty in baseProperties)\n        {\n            if (baseProperty.Name == childProperty.Name && \n                baseProperty.DeclaringType != childProperty.DeclaringType &&\n                !childProperty.GetCustomAttributes(typeof(HideFromDebuggerAttribute), true).Length > 0) // To ensure it's not a debugger issue\n            {\n                Console.WriteLine($"ChildClass is hiding BaseClass's {baseProperty.Name} property.");\n            }\n        }\n    }\n}