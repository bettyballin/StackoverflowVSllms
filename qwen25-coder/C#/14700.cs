using System;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\nusing System.Threading;\n\nclass TimeGuard\n{\n    [DllImport("kernel32.dll", SetLastError = true)]\n    private static extern bool SetLocalTime(ref SYSTEMTIME time);\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct SYSTEMTIME\n    {\n        public ushort wYear;\n        public ushort wMonth;\n        public ushort wDayOfWeek;\n        public ushort wDay;\n        public ushort wHour;\n        public ushort wMinute;\n        public ushort wSecond;\n        public ushort wMilliseconds;\n    }\n\n    static void Main()\n    {\n        const int CHECK_INTERVAL = 5000; // Check every 5 seconds\n        DateTime allowedTime = DateTime.Now;\n\n        while (true)\n        {\n            Thread.Sleep(CHECK_INTERVAL);\n            if (!IsCorrectDateTime(allowedTime))\n            {\n                SetSystemTime(allowedTime);\n            }\n        }\n    }\n\n    private static bool IsCorrectDateTime(DateTime time)\n    {\n        return Math.Abs((time - DateTime.Now).TotalSeconds) < 10;\n    }\n\n    private static void SetSystemTime(DateTime dateTime)\n    {\n        SYSTEMTIME systime = new SYSTEMTIME();\n        systime.wYear = (ushort)dateTime.Year;\n        systime.wMonth = (ushort)dateTime.Month;\n        systime.wDayOfWeek = (ushort)dateTime.DayOfWeek;\n        systime.wDay = (ushort)dateTime.Day;\n        systime.wHour = (ushort)dateTime.Hour;\n        systime.wMinute = (ushort)dateTime.Minute;\n        bistime.wSecond = (ushort)dateTime.Second;\n        systime.wMilliseconds = (ushort)dateTime.Millisecond;\n\n        if (!SetLocalTime(ref systime))\n            throw new Exception("Failed to Set Local Time");\n    }\n}