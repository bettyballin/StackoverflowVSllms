using System;\nusing System.IO;\nusing System.Net;\nusing System.Threading.Tasks;\n\npublic class HttpProxyServer\n{\n    private readonly string _prefix;\n    private readonly HttpListener _httpListener;\n\n    public HttpProxyServer(string prefix)\n    {\n        _prefix = prefix;\n        _httpListener = new HttpListener();\n        _httpListener.Prefixes.Add(prefix);\n    }\n\n    public void Start()\n    {\n        _httpListener.Start();\n        Task.Run(ProcessRequestsAsync);\n    }\n\n    private async Task ProcessRequestsAsync()\n    {\n        while (_httpListener.IsListening)\n        {\n            var context = await _httpListener.GetContextAsync();\n\n            _ = Task.Run(() => ForwardRequestToServer(context));\n        }\n    }\n\n    private async Task ForwardRequestToServer(HttpListenerContext context)\n    {\n        try\n        {\n            var request = context.Request;\n            var url = new UriBuilder("http", request.Url.Host, request.Url.Port, request.Url.AbsolutePath, request.Url.Query).Uri;\n\n            using (var client = new HttpClient())\n            {\n                // Capture the traffic here if needed.\n                Console.WriteLine($"Request: {request.HttpMethod} {url}");\n\n                using (var serverRequest = new HttpRequestMessage(new HttpMethod(request.HttpMethod), url))\n                {\n                    foreach (string header in request.Headers)\n                    {\n                        if (!serverRequest.Headers.TryAddWithoutValidation(header, request.Headers[header]))\n                            serverRequest.Content?.Headers.Add(header, request.Headers[header]);\n                    }\n\n                    if (request.HasEntityBody)\n                    {\n                        var body = new byte[request.ContentLength64];\n                        await request.InputStream.ReadAsync(body, 0, body.Length);\n                        serverRequest.Content = new ByteArrayContent(body);\n                    }\n\n                    using (var serverResponse = await client.SendAsync(serverRequest))\n                    {\n                        // Capture the traffic here if needed.\n                        Console.WriteLine($"Response: {serverResponse.StatusCode} {url}");\n\n                        context.Response.StatusCode = (int)serverResponse.StatusCode;\n\n                        foreach (var header in serverResponse.Headers)\n                            context.Response.Headers.Add(header.Key, string.Join(", ", header.Value));\n\n                        if (serverResponse.Content != null)\n                        {\n                            var contentHeaders = serverResponse.Content.Headers;\n                            foreach (string contentHeader in contentHeaders)\n                                context.Response.Headers.Add(contentHeader.Key, string.Join(", ", contentHeader.Value));\n\n                            using (var responseStream = await serverResponse.Content.ReadAsStreamAsync())\n                                await responseStream.CopyToAsync(context.Response.OutputStream);\n                        }\n\n                        context.Response.Close();\n                    }\n                }\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($"Error: {ex}");\n            context.Response.StatusCode = 500;\n            context.Response.Close();\n        }\n    }\n\n    public void Stop()\n    {\n        _httpListener.Stop();\n        _httpListener.Abort();\n    }\n}