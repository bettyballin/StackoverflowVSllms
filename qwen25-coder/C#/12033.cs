using System;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\nusing System.Windows.Forms;\n\nclass Program : Form\n{\n    private const int RIDEV_INPUTSINK = 0x100;\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct RAWINPUTDEVICE\n    {\n        public ushort usUsagePage;\n        public ushort usUsage;\n        public uint dwFlags;\n        public IntPtr hwndTarget;\n    }\n\n    [DllImport("user32.dll")]\n    static extern bool RegisterRawInputDevices(RAWINPUTDEVICE[] pRawInputDevice, uint uiNumDevices, uint cbSize);\n\n    protected override void WndProc(ref Message m)\n    {\n        const int WM_INPUT = 0x00FF;\n\n        switch (m.Msg)\n        {\n            case WM_INPUT:\n                ProcessRawInput((IntPtr)m.LParam);\n                break;\n        }\n        base.WndProc(ref m);\n    }\n\n    private void ProcessRawInput(IntPtr pRawInputBuffer)\n    {\n        uint sizeRequired = 0;\n        GetRawInputData(pRawInputBuffer, RID_INPUT, IntPtr.Zero, ref sizeRequired, Marshal.SizeOf(typeof(RAWINPUTHEADER)));\n\n        IntPtr rawData = Marshal.AllocHGlobal((int)sizeRequired);\n        GetRawInputData(pRawInputBuffer, RID_INPUT, rawData, ref sizeRequired, Marshal.SizeOf(typeof(RAWINPUTHEADER)));\n\n        RAWINPUT raw;\n        raw.header = (RAWINPUTHEADER)Marshal.PtrToStructure(rawData, typeof(RAWINPUTHEADER));\n\n        if (raw.header.dwType == RIM_TYPEKEYBOARD)\n        {\n            raw.data.keyboard = (RAWINPUT.KEYBOARDSTRUCT)Marshal.PtrToStructure(\n                IntPtr.Add(rawData, Marshal.SizeOf(typeof(RAWINPUTHEADER))),\n                typeof(RAWINPUT.KEYBOARDSTRUCT));\n            Console.WriteLine($"VKey: {raw.data.keyboard.VKey}, DeviceHandle: {raw.header.hDevice}");\n        }\n\n        Marshal.FreeHGlobal(rawData);\n    }\n    \n    static void Main()\n    {\n        RAWINPUTDEVICE[] rid = new RAWINPUTDEVICE[1];\n        rid[0].usUsagePage = 0x01; // Generic desktop page\n        rid[0].usUsage = 0x06; // Keyboard\n        rid[0].dwFlags = RIDEV_INPUTSINK;   // Flags (RIDEV_INPUTSINK)\n        rid[0].hwndTarget = IntPtr.Zero;    // Target hwnd\n\n        if (!RegisterRawInputDevices(rid, (uint)rid.Length, (uint)Marshal.SizeOf(rid[0])))\n            throw new Exception("Failed to register raw input devices");\n\n        Application.Run(new Program());\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct RAWINPUTHEADER\n    {\n        public DWORD dwType;\n        public DWORD cbSize;\n        public IntPtr hDevice;\n        public IntPtr wParam; // Virtual-key code for keyboard and mouse input or button transition for joysticks\n\n        private const uint RIM_HOTKEY = 2;\n        private const uint RIM_INPUTSINK = 0x100;\n\n        [StructLayout(LayoutKind.Explicit)]\n        public struct DWORD\n        {\n            [FieldOffset(0)] public int Int32;\n            [FieldOffset(0)] public uint UInt32;\n        }\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct RAWINPUT\n    {\n        public RAWINPUTHEADER header;\n        public RAWDATA data;\n\n        [StructLayout(LayoutKind.Explicit)]\n        public struct RAWDATA\n        {\n            [FieldOffset(0)] public RAWMOUSE mouse;\n            [FieldOffset(0)] public RAWKEYBOARD keyboard;\n            [FieldOffset(0)] public RAWHID hid;\n        }\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    struct RAWHID\n    {\n        public DWORD dwSizeHid;\n        public DWORD dwCount;\n        Byte bRawData;\n\n        [StructLayout(LayoutKind.Explicit)]\n        struct DWORD\n        {\n            [FieldOffset(0)] public int Int32;\n            [FieldOffset(0)] public uint UInt32;\n        }\n    }\n\n    [StructLayout(LayoutKind.Sequential, Pack = 1)]\n    struct RAWKEYBOARD\n    {\n        public WORD MakeCode; // Scan code for key depression\n        public WORD Flags;\n        public byte Reserved;\n        public BYTE Vk; // Virtual-Key Code: http://msdn.microsoft.com/en-us/library/dd375731(VS.85).aspx\n        public DWORD Message; // Corresponding Windows message for the keyboard event\n        public ULONG ExtraInformation;\n\n        [StructLayout(LayoutKind.Explicit)]\n        struct WORD\n        {\n            [FieldOffset(0)] public short Int16;\n            [FieldOffset(0)] public ushort UInt16;\n        }\n\n        [StructLayout(LayoutKind.Explicit)]\n        struct BYTE\n        {\n            [FieldOffset(0)] public byte Byte8;\n            [FieldOffset(0)] public sbyte SByte8;\n        }\n\n        [StructLayout(LayoutKind.Sequential)]\n        private struct DWORD\n        {\n            public uint Int32;\n        }\n\n        private struct ULONG\n        {\n            public uint UInt32;\n        }\n    }\n\n    [DllImport("user32.dll", SetLastError = true)]\n    static extern uint GetRawInputData(IntPtr hrawinput, uint uiCommand,\n                                       IntPtr pData, ref uint pcbSize, uint cbSizeHeader);\n\n    private const uint RID_HEADER = 0x10000005;\n    private const uint RIM_TYPEKEYBOARD = 2;\n}\n\n[StructLayout(LayoutKind.Sequential)]\ninternal struct RAWMOUSE\n{\n    public ushort usFlags;\n\n    [StructLayout(LayoutKind.Explicit)]\n    public struct RAWMOUSEDATA\n    {\n        [FieldOffset(0)] public LONG lLastX;\n        [FieldOffset(0)] public ULONG ulButtons;\n    }\n\n    public RAWMOUSEDATA data;\n\n    public uint ulRawButtons;\n    public LONG lLastX;\n    public LONG lLastY;\n    public uint ulExtraInformation;\n\n    [StructLayout(LayoutKind.Sequential)]\n    private struct LONG\n    {\n        public int Int32;\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    private struct ULONG\n    {\n        public uint UInt32;\n    }\n}