using Microsoft.Web.WebView2.Core;\n   using System;\n   using System.Diagnostics;\n   using System.Threading.Tasks;\n   using System.Windows.Forms;\n\n   public partial class Form1 : Form\n   {\n       private CoreWebView2 _webView;\n\n       public Form1()\n       {\n           InitializeComponent();\n           InitializeAsync().ConfigureAwait(false);\n       }\n\n       async Task InitializeAsync()\n       {\n           await webView.EnsureCoreWebView2Async(null);\n\n           _webView = webView.CoreWebView2;\n           \n           // Set up the navigation events to track load times\n           _webView.NavigationStarting += NavigationStarting;\n           _webView.NavigationCompleted += NavigationCompleted;\n\n           // Navigate to a webpage, replace with your URL\n           _webView.Navigate("https://example.com");\n       }\n\n       private void NavigationStarting(object sender, CoreWebView2NavigationStartingEventArgs args)\n       {\n           Debug.WriteLine("Page load started.");\n       }\n\n       private void NavigationCompleted(object sender, CoreWebView2NavigationCompletedEventArgs args)\n       {\n           Debug.WriteLine("Page load completed.");\n\n           // Start the stopwatch to measure resource loading time\n           Stopwatch stopwatch = new Stopwatch();\n           stopwatch.Start();\n\n           ExecuteScriptAndGetLoadTimes().ConfigureAwait(false);\n       }\n\n       async Task ExecuteScriptAndGetLoadTimes()\n       {\n           string script = @"\n           (function() {\n               var performanceTiming = performance.timing;\n               return JSON.stringify({\n                   'loadEventEnd': performanceTiming.loadEventEnd,\n                   'navigationStart': performanceTiming.navigationStart,\n                   'responseEnd': performanceTiming.responseEnd\n               });\n           })();\n           ";\n\n           var result = await _webView.ExecuteScriptAsync(script);\n\n           // Parse the JSON response and calculate load time\n           var responseJson = Newtonsoft.Json.Linq.JObject.Parse(result.ResultAsJson);\n           long navigationStart = (long)responseJson["navigationStart"];\n           long loadEventEnd = (long)responseJson["loadEventEnd"];\n\n           double totalLoadTimeInSeconds = (double)(loadEventEnd - navigationStart) / 1000;\n\n           Debug.WriteLine($"Total page load time: {totalLoadTimeInSeconds} seconds");\n\n           // Now you can save this to a database or generate reports as required\n       }\n   }