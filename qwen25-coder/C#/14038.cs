using System;\nusing System.Data.SqlClient;\nusing System.Text;\n\npublic class QueryBuilder\n{\n    public SqlConnection Connection { get; private set; }\n    public StringBuilder QueryBuilderString { get; private set; }\n    public List<SqlParameter> Parameters { get; private set; }\n\n    public QueryBuilder(SqlConnection connection)\n    {\n        this.Connection = connection;\n        this.QueryBuilderString = new StringBuilder();\n        this.Parameters = new List<SqlParameter>();\n    }\n\n    public void AddCondition(string condition, SqlParameter parameter)\n    {\n        if (QueryBuilderString.Length > 0)\n        {\n            QueryBuilderString.Append(" AND ");\n        }\n        QueryBuilderString.Append(condition);\n        Parameters.Add(parameter);\n    }\n\n    public void AddJoinClause(string joinClause)\n    {\n        QueryBuilderString.Append(joinClause);\n    }\n\n    public void SetSelectAndFrom(string select, string from)\n    {\n        QueryBuilderString.AppendFormat("SELECT {0} FROM {1}", select, from);\n    }\n\n    // Method to execute the query\n    public void ExecuteQuery()\n    {\n        using (SqlCommand command = new SqlCommand(QueryBuilderString.ToString(), Connection))\n        {\n            command.Parameters.AddRange(Parameters.ToArray());\n            connection.Open();\n            command.ExecuteNonQuery();\n        }\n    }\n}\n\n// Usage Example:\npublic void TestDynamicQuery(SqlConnection conn)\n{\n    var builder = new QueryBuilder(conn);\n    builder.SetSelectAndFrom("column1, column2", "BaseTable");\n    builder.AddJoinClause("INNER JOIN AnotherTable ON BaseTable.Id = AnotherTable.BaseId");\n    \n    // Adding conditions\n    builder.AddCondition("[AnotherTable].Status = @Status", new SqlParameter("@Status", 1));\n    // Add more conditions and joins as necessary\n\n    builder.ExecuteQuery();\n}