// Define an event handler delegate\npublic delegate void LoginCompletedEventHandler(object sender, EventArgs e);\n\n// In your UserControl class (e.g., MyUserControl.ascx.cs)\npublic partial class MyUserControl : System.Web.UI.UserControl\n{\n    // Declare the event\n    public event LoginCompletedEventHandler LoginCompleted;\n\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        // Example logic to raise the event when login is completed\n        if (IsPostBack && /* some condition that indicates successful login */ true)\n        {\n            OnLoginCompleted();\n        }\n    }\n\n    // Method to raise the event\n    protected virtual void OnLoginCompleted()\n    {\n        LoginCompleted?.Invoke(this, EventArgs.Empty);\n    }\n}\n\n// In your Page class where the user control is used (e.g., Default.aspx.cs)\npublic partial class _Default : System.Web.UI.Page\n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        MyUserControl1.LoginCompleted += MyUserControl1_LoginCompleted;\n    }\n\n    private void MyUserControl1_LoginCompleted(object sender, EventArgs e)\n    {\n        // Handle the event here\n        MyUserControl1.Visible = false; // Hide the user control after login\n        // Add other logic as needed\n    }\n}