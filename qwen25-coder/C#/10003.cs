// Assuming you have a ListView named listView1\n\nprivate void PopulateListView()\n{\n    // Clear existing items\n    listView1.Items.Clear();\n\n    // Example of populating the ListView with file information\n    foreach (var filePath in Directory.GetFiles(@"C:\Your\Directory"))\n    {\n        FileInfo fi = new FileInfo(filePath);\n        ListViewItem item = new ListViewItem(new[]\n        {\n            fi.Name,\n            fi.Extension,\n            getDynamicFileSize(filePath), // Human-readable size for display\n            fi.DirectoryName\n        });\n\n        // Set the Tag to the actual file size in bytes for sorting\n        item.Tag = fi.Length;\n\n        listView1.Items.Add(item);\n    }\n}\n\nprivate void listView1_ColumnClick(object sender, ColumnClickEventArgs e)\n{\n    if (e.Column == 2) // Assuming Size is at index 2\n    {\n        listView1.ListViewItemSorter = new ListViewItemComparer(e.Column);\n        listView1.Sort();\n    }\n}\n\npublic class ListViewItemComparer : IComparer\n{\n    private readonly int columnIndex;\n\n    public ListViewItemComparer(int column)\n    {\n        columnIndex = column;\n    }\n\n    public int Compare(object x, object y)\n    {\n        long sizeX = (long)((ListViewItem)x).Tag;\n        long sizeY = (long)((ListViewItem)y).Tag;\n\n        return sizeX.CompareTo(sizeY);\n    }\n}