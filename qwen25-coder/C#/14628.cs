using System;\nusing System.Diagnostics;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace ConsoleAppSelfTerminate\n{\n    class Program\n    {\n        private static int m_ParentPID;\n        private static int m_ExitWatcherFrequency = 2000; // milliseconds\n\n        static void Main(string[] args)\n        {\n            try\n            {\n                Process currentProcess = Process.GetCurrentProcess();\n                using (var mgmtObj = new System.Management.ManagementObject($"win32_process.handle='{currentProcess.Id.ToString()}'"))\n                {\n                    mgmtObj.Get();\n                    m_ParentPID = Convert.ToInt32(mgmtObj["ParentProcessId"]);\n                }\n\n                Task.Run(async () => await MonitorParentProcess());\n                \n                // Read data from stdin\n                while (true)\n                {\n                    char[] charray = new char[1024];\n                    int read = Console.In.Read(charray, 0, charray.Length);\n                    if (read > 0)\n                    {\n                        string input = new string(charray).TrimEnd('\0');\n                        // Process input...\n                        // Log it or handle accordingly\n                        Console.WriteLine("Received: " + input);\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                // Handle exceptions or log them as appropriate.\n                Console.WriteLine($"An error occurred: {ex.Message}");\n            }\n        }\n\n        private static async Task MonitorParentProcess()\n        {\n            while (true)\n            {\n                try\n                {\n                    Process.GetProcessById(m_ParentPID);\n                }\n                catch (ArgumentException)\n                {\n                    // Parent process not found, exit gracefully.\n                    Console.WriteLine("Parent process stopped/killed. Terminating self.");\n                    Environment.Exit(0);\n                }\n\n                await Task.Delay(m_ExitWatcherFrequency);\n            }\n        }\n    }\n}