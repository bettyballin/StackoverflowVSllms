using System;\nusing System.Collections.Generic;\n\npublic class Node\n{\n    public string Name { get; set; }\n    public List<Node> NextNodes { get; set; }\n\n    public Node(string name)\n    {\n        Name = name;\n        NextNodes = new List<Node>();\n    }\n}\n\npublic class Graph\n{\n    private Node head;\n    private Node foot;\n\n    public Graph(Node head, Node foot)\n    {\n        this.head = head;\n        this.foot = foot;\n    }\n\n    public void FindAllPaths(List<string> currentPath, Node currentNode, out List<List<string>> allPaths)\n    {\n        allPaths = new List<List<string>>();\n        \n        // Add the current node to the path\n        currentPath.Add(currentNode.Name);\n\n        // If we reached the foot node, add the path to results\n        if (currentNode == foot)\n        {\n            allPaths.Add(new List<string>(currentPath));\n        }\n        else\n        {\n            // Recurse for each adjacent vertex\n            foreach (var nextNode in currentNode.NextNodes)\n            {\n                FindAllPaths(currentPath, nextNode, out var subPaths);\n                allPaths.AddRange(subPaths);\n            }\n        }\n\n        // Backtrack: remove the current node from path\n        currentPath.RemoveAt(currentPath.Count - 1);\n    }\n}\n\n// Usage example:\npublic class Program\n{\n    public static void Main()\n    {\n        // Create nodes as per your diagram\n        Node n1 = new Node("n1");\n        Node n2 = new Node("n2");\n        Node n4 = new Node("n4");\n        Node n5 = new Node("n5");\n        Node n6 = new Node("n6");\n        Node n7 = new Node("n7");\n        Node n8 = new Node("n8");\n        Node n9 = new Node("n9");\n        Node n10 = new Node("n10");\n        Node n11 = new Node("n11");\n        Node n12 = new Node("n12");\n        Node n13 = new Node("n13");\n\n        // Define next nodes\n        n1.NextNodes.Add(n2);\n        n2.NextNodes.Add(n4);\n        n4.NextNodes.AddRange(new[] {n5, n6, n10});\n        n5.NextNodes.Add(n7);\n        n6.NextNodes.Add(n8);\n        n7.NextNodes.Add(n9);\n        n8.NextNodes.Add(n9);\n        n10.NextNodes.Add(n11);\n        n11.NextNodes.Add(n12);\n        n9.NextNodes.Add(n13);\n        n12.NextNodes.Add(n13);\n\n        // Create graph\n        Graph graph = new Graph(n1, n13);\n\n        // Find all paths from head to foot\n        List<string> currentPath = new List<string>();\n        graph.FindAllPaths(currentPath, graph.head, out var allPaths);\n\n        foreach (var path in allPaths)\n        {\n            Console.WriteLine(string.Join(",", path));\n        }\n    }\n}