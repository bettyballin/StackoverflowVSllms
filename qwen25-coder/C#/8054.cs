using Castle.MicroKernel.Registration;\nusing Castle.Windsor;\nusing NUnit.Framework;\n\n[TestFixture]\npublic class WindsorContainerTests\n{\n    [Test]\n    public void AllComponentsShouldBeResolvable()\n    {\n        var container = new WindsorContainer();\n\n        // Assuming you have a method to set up your container registrations\n        SetupContainer(container);\n\n        // Retrieve all service keys from the container\n        foreach (var key in container.Kernel.GetHandlerNames())\n        {\n            try\n            {\n                // Attempt to resolve each component by service key\n                var instance = container.Resolve(key);\n                Assert.IsNotNull(instance, $"Component with key {key} should be resolvable.");\n            }\n            catch (Exception ex)\n            {\n                Assert.Fail($"Failed to resolve component with key {key}: {ex.Message}");\n            }\n        }\n\n        // Clean up the container after use\n        container.Dispose();\n    }\n\n    private void SetupContainer(WindsorContainer container)\n    {\n        // Register your components here for testing purposes\n        container.Register(Component.For<IService>().ImplementedBy<Service>());\n        // Add other registrations as needed\n    }\n}\n\npublic class Service : IService { }\n\npublic interface IService { }