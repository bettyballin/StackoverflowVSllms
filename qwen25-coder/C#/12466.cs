using System;\nusing DocumentFormat.OpenXml.Packaging;\nusing DocumentFormat.OpenXml.Spreadsheet;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        string spreadsheetPath = @"C:\path\to\your\file.xlsx";\n        string sheetName = "Sheet1";\n        string cellAddress = "A1"; // Target cell address\n        string newValue = "Hello, World!";\n\n        // Open the existing Excel file.\n        using (SpreadsheetDocument document =\n            SpreadsheetDocument.Open(spreadsheetPath, true))\n        {\n            WorkbookPart workbookPart = document.WorkbookPart;\n            WorksheetPart worksheetPart = GetWorksheetPartByName(workbookPart, sheetName);\n\n            if (worksheetPart == null)\n            {\n                // The specified worksheet does not exist.\n                throw new ArgumentException(\n                    "Sheet name is invalid. Specify the name of an existing worksheet.");\n            }\n\n            InsertValueInCell(cellAddress, newValue, worksheetPart);\n\n        }\n    }\n\n    private static WorksheetPart GetWorksheetPartByName(WorkbookPart workbookPart, string sheetName)\n    {\n        foreach (Sheet sheet in workbookPart.Workbook.Descendants<Sheet>())\n        {\n            if (sheet.Name == sheetName)\n            {\n                return (WorksheetPart)(workbookPart.GetPartById(sheet.Id));\n            }\n        }\n\n        return null;\n    }\n\n    private static void InsertValueInCell(string cellAddress, string value,\n        WorksheetPart worksheetPart)\n    {\n        SheetData sheetData = worksheetPart.Worksheet.Elements<SheetData>().First();\n        Row row;\n        string columnName = GetColumnName(cellAddress);\n        uint rowIndex = GetRowIndex(cellAddress);\n\n        // Try to get the existing row.\n        row = InsertRowInWorksheet(sheetData, rowIndex);\n\n        if (row == null)\n        {\n            Console.WriteLine("Problem with sheet data");\n            return;\n        }\n\n        Cell cell = row.Elements<Cell>().Where(c => c.CellReference.Value == cellAddress).FirstOrDefault();\n\n        if (cell == null)\n        {\n            cell = new Cell { CellReference = cellAddress };\n            row.Append(cell);\n        }\n        else\n        {\n            // Clear the existing value in the cell.\n            cell.RemoveAllChildren();\n        }\n\n        // Insert text into the cell.\n        CellValue cellValue = new CellValue(value);\n        cell.Append(cellValue);\n\n    }\n\n    private static Row InsertRowInWorksheet(SheetData sheetData, uint rowIndex)\n    {\n        IEnumerable<Row> rows = sheetData.Elements<Row>();\n\n        // Find a row with the specified row index (rowIndex).\n        Row prevRow = null;\n        foreach (Row row in rows)\n            if (row.RowIndex.Value > rowIndex) break;\n\n        Row newRow = new Row { RowIndex = rowIndex };\n        if (prevRow == null)\n        {\n            sheetData.InsertAt(newRow, 0);\n        }\n        else\n        {\n            sheetData.InsertAfter(newRow, prevRow);\n        }\n\n        return newRow;\n    }\n\n    private static string GetColumnName(string cellName)\n    {\n        // Create an array of letters for column names.\n        char[] letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".ToCharArray();\n        string columnName = "";\n\n        int index = 0;\n\n        while (letters.Contains<char>(cellName[index]))\n        {\n            columnName += cellName[index++];\n        }\n\n        return columnName;\n    }\n\n    private static uint GetRowIndex(string cellName)\n    {\n\n        int result = 0;\n\n        foreach (char c in cellName.ToCharArray())\n        {\n            if (Char.IsDigit(c))\n                result = (result * 10) + Convert.ToInt32(c) - Convert.ToInt32('0');\n        }\n\n        return Convert.ToUInt32(result);\n    }\n}