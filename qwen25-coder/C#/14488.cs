// Define an interface for shapes\npublic interface IShape\n{\n    void Draw();\n}\n\n// Implement the shape interface, which can be discovered by MEF\n[Export(typeof(IShape))]\npublic class Rectangle : IShape\n{\n    public void Draw()\n    {\n        // Implementation to draw a rectangle\n    }\n}\n\n// In your Prism module, use MEF to compose parts and get all shapes\n[Module(ModuleName = "ShapesModule", OnDemand = true)]\npublic class ShapesModule : IModule\n{\n    [ImportMany]\n    private IEnumerable<Lazy<IShape>> _shapes;\n\n    public void OnInitialized(IContainerProvider containerProvider)\n    {\n        var catalog = new AggregateCatalog();\n        catalog.Catalogs.Add(new AssemblyCatalog(typeof(Square).Assembly));\n        CompositionContainer container = new CompositionContainer(catalog);\n        container.ComposeParts(this);\n\n        // Use the shapes from MEF\n        foreach (var shape in _shapes)\n        {\n            shape.Value.Draw();\n        }\n    }\n\n    public void RegisterTypes(IContainerRegistry containerRegistry) { /* Register any non-MEF services here */ }\n}