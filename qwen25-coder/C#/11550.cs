using System;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\n\npublic class AsyncTCPClient\n{\n    private Socket _clientSocket;\n\n    public void Connect(string server, int port)\n    {\n        _clientSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n        _clientSocket.Connect(new IPEndPoint(IPAddress.Parse(server), port));\n\n        // Begin receiving data asynchronously\n        ReceiveData(_clientSocket);\n    }\n\n    private async void ReceiveData(Socket socket)\n    {\n        try\n        {\n            var buffer = new byte[1024];\n            int receivedBytes = await Task<int>.Factory.FromAsync(socket.BeginReceive, socket.EndReceive, buffer, 0, buffer.Length, null);\n\n            if (receivedBytes > 0)\n            {\n                string dataReceived = Encoding.ASCII.GetString(buffer, 0, receivedBytes);\n                Console.WriteLine($"Data received: {dataReceived}");\n\n                // Continue receiving data\n                ReceiveData(socket);\n            }\n        }\n        catch (SocketException ex)\n        {\n            if (ex.SocketErrorCode == SocketError.ConnectionReset || ex.SocketErrorCode == SocketError.Disconnecting)\n            {\n                Console.WriteLine("Connection closed by server.");\n            }\n            else\n            {\n                Console.WriteLine($"Socket error: {ex.Message}");\n            }\n            socket.Close();\n        }\n    }\n\n    public void SendData(string data)\n    {\n        byte[] buffer = Encoding.ASCII.GetBytes(data);\n        _clientSocket.BeginSend(buffer, 0, buffer.Length, SocketFlags.None, null, _clientSocket);\n    }\n}