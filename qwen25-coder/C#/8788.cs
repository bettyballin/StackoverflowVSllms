using System;\nusing Oracle.DataAccess.Client;\n\npublic void DeriveParametersManually(string connectionString, string spName)\n{\n    using (var connection = new OracleConnection(connectionString))\n    {\n        connection.Open();\n        \n        // Create a command to retrieve the parameter details for the stored procedure.\n        var cmd = new OracleCommand();\n        cmd.Connection = connection;\n        cmd.CommandText = "SELECT ARGUMENT_NAME, DATA_TYPE, IN_OUT FROM USER_ARGUMENTS WHERE OBJECT_NAME = :spName ORDER BY POSITION";\n        cmd.Parameters.Add(new OracleParameter("spName", spName));\n        \n        try\n        {\n            using (OracleDataReader dr = cmd.ExecuteReader())\n            {\n                var paramCmd = new OracleCommand();\n                paramCmd.Connection = connection;\n                paramCmd.CommandType = System.Data.CommandType.StoredProcedure;\n                paramCmd.CommandText = spName;\n\n                while (dr.Read())\n                {\n                    string paramName = dr.GetString(0);\n                    OracleDbType paramType = GetOracleDbType(dr.GetString(1));\n                    ParameterDirection direction;\n                    \n                    switch (dr.GetString(2))\n                    {\n                        case "IN":\n                            direction = ParameterDirection.Input;\n                            break;\n                        case "OUT":\n                            direction = ParameterDirection.Output;\n                            break;\n                        case "IN/OUT":\n                            direction = ParameterDirection.InputOutput;\n                            break;\n                        default:\n                            throw new Exception("Unknown parameter direction: " + dr.GetString(2));\n                    }\n                    \n                    paramCmd.Parameters.Add(new OracleParameter(paramName, paramType) { Direction = direction });\n                }\n\n                // At this point, you have all the parameters added to 'paramCmd' in accordance with the procedure's signature.\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine("Error deriving parameters: " + ex.Message);\n        }\n    }\n}\n\nprivate OracleDbType GetOracleDbType(string oracleDataTypeName)\n{\n    switch (oracleDataTypeName.ToUpper())\n    {\n        case "NUMBER": return OracleDbType.Decimal;\n        case "VARCHAR2": return OracleDbType.Varchar2;\n        // Add more types as necessary\n        default: throw new ArgumentOutOfRangeException("oracleDataTypeName", $"Unknown or unsupported Oracle data type: {oracleDataTypeName}");\n    }\n}