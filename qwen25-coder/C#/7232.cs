using System;\nusing System.ComponentModel;\nusing System.Configuration.Install;\nusing System.ServiceProcess;\n\n[RunInstaller(true)]\npublic class MyServiceInstaller : Installer\n{\n    public override void Install(System.Collections.IDictionary stateSaver)\n    {\n        string serviceName = "YourServiceName";\n        string username = "domain\\username";\n        string password = "userpassword";\n\n        using (ServiceController sc = new ServiceController(serviceName))\n        {\n            // Do nothing if the service is already installed\n            try { sc.Stop(); sc.WaitForStatus(ServiceControllerStatus.Stopped); }\n            catch (Exception) { } // Handle or ignore exceptions as needed\n\n            base.Install(stateSaver);\n\n            ChangeServiceConfig(\n                serviceName,\n                username,\n                password\n            );\n        }\n    }\n\n    private void ChangeServiceConfig(string serviceName, string accountName, string password)\n    {\n        using (ServiceInstaller installer = new ServiceInstaller())\n        {\n            ServiceAccount serviceAccount;\n            if (!string.IsNullOrEmpty(accountName))\n            {\n                serviceAccount = ServiceAccount.User;\n            }\n            else\n            {\n                serviceAccount = ServiceAccount.LocalSystem;\n            }\n\n            installer.ServiceName = serviceName;\n\n            // Create an instance of the process installer.\n            System.Configuration.Install.AssemblyInstaller assemblyInstaller =\n                new System.Configuration.Install.AssemblyInstaller(\n                    typeof(MyService).Assembly, null);\n\n            serviceProcessInstaller accountInstaller = new ServiceProcessInstaller();\n            accountInstaller.Account = serviceAccount;\n\n            if (accountName.Length > 0)\n            {\n                accountInstaller.Username = accountName;\n                accountInstaller.Password = password;\n            }\n\n            // Add the installers to the collection.\n            InstallContext context = this.Context;\n            installer.Context = context;\n            accountInstaller.Context = context;\n\n            InstallerCollection col = new InstallerCollection();\n            col.Add(accountInstaller);\n            col.Add(installer);\n\n            base.Install(col);\n        }\n    }\n}