using System;\nusing System.Management;\n\nclass RemoteProcessLauncher {\n    public static void Main() {\n        string remoteComputerName = "RemoteMachine";\n        string applicationPath = @"C:\Path\To\Application.exe";\n        string workingDirectory = @"C:\Desired\WorkingDirectory";\n\n        ConnectionOptions connOptions = new ConnectionOptions();\n        ManagementScope scope = new ManagementScope($@"\\{remoteComputerName}\root\cimv2", connOptions);\n        ManagementClass processClass = new ManagementClass(scope, new ManagementPath("Win32_Process"), null);\n\n        // Prepare the startup configuration\n        ManagementObjectStartParameters startInfo = new ManagementObjectStartParameters();\n        startInfo.VerbosityLevel = ManagementOperationVerbosity.Inherit;\n        ManagementBaseObject inParams = processClass.GetMethodParameters("Create");\n        ManagementObject startProcessInfo = scope.GetObjects(new ObjectQuery("SELECT * FROM Win32_ProcessStartup")).Cast<ManagementObject>().FirstOrDefault();\n\n        if (startProcessInfo != null) {\n            startProcessInfo["CurrentDirectory"] = workingDirectory;\n            inParams["CurrentDirectory"] = workingDirectory;\n\n            inParams["CommandLine"] = applicationPath;\n            inParams["ProcessStartupInformation"] = startProcessInfo;\n\n            // Invoke the method to create process\n            ManagementBaseObject outParams = processClass.InvokeMethod("Create", inParams, null);\n\n            int returnCode = Convert.ToInt32(outParams.Properties["ReturnValue"].Value);\n            if (returnCode == 0) {\n                Console.WriteLine("Executable started successfully");\n            } else {\n                Console.WriteLine($"Failed to start executable. Return value: {returnCode}");\n            }\n        } else {\n            Console.WriteLine("Could not create a process startup info object.");\n        }\n    }\n}