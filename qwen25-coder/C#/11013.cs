using Microsoft.CSharp;\nusing System;\nusing System.Runtime.InteropServices;\n\nclass Program\n{\n    [DllImport("Advapi32.dll", SetLastError = true, CharSet = CharSet.Unicode)]\n    public static extern bool CredWrite([In] ref NativeMethods.CREDENTIAL UserCredential, [In] UInt32 Flags);\n\n    [DllImport("Advapi32.dll", SetLastError = true, CharSet = CharSet.Unicode)]\n    public static extern bool CredRead([MarshalAs(UnmanagedType.LPWStr), In] string TargetName, [In] CredentialType Type, [In] bool fAsSystem, out IntPtr CredentialPtr);\n\n    [DllImport("advapi32.dll", EntryPoint = "CredFree")]\n    private static extern void CredFree([In] IntPtr buffer);\n\n    public static void SaveTokenToLocker(string key, string token)\n    {\n        NativeMethods.CREDENTIAL credential = new NativeMethods.CREDENTIAL();\n        credential.Type = NativeMethods.CredentialType.Generic;\n        credential.TargetName = key + "_target";\n        credential.CredentialBlob = Encoding.Unicode.GetBytes(token);\n        credential.Persist = NativeMethods.CredPersist.Enterprise;\n\n        CredWrite(ref credential, 0);\n    }\n\n    public static string LoadTokenFromLocker(string key)\n    {\n        IntPtr ptr;\n        if (CredRead(key + "_target", NativeMethods.CredentialType.Generic, true, out ptr))\n        {\n            try\n            {\n                var credential = (NativeMethods.CREDENTIAL)Marshal.PtrToStructure(ptr, typeof(NativeMethods.CREDENTIAL));\n                return Marshal.PtrToStringUni(credential.CredentialBlob);\n            }\n            finally\n            {\n                CredFree(ptr);\n            }\n        }\n\n        throw new Exception("Credential not found");\n    }\n\n    private static class NativeMethods\n    {\n        public enum CredentialType : uint\n        {\n            Generic = 1,\n            DomainPassword = 2,\n            CertificateBasedPassword = 6,\n            Federated = 7,\n        }\n\n        public struct CREDENTIAL\n        {\n            internal UInt32 Flags;\n            internal CredentialType Type;\n            [MarshalAs(UnmanagedType.LPWStr)]\n            internal string TargetName;\n            [MarshalAs(UnmanagedType.LPWStr)]\n            internal string Comment;\n            internal FILETIME LastWritten;\n            internal UInt32 CredentialBlobSize;\n           [MarshalAs(UnmanagedType.LPArray, SubType = UnmanagedType.Byte)]\n            internal byte[] CredentialBlob;\n            internal UInt32 Persist;\n            internal UInt32 AttributeCount;\n            internal IntPtr Attributes;\n            [MarshalAs(UnmanagedType.LPWStr)]\n            internal string TargetAlias;\n            [MarshalAs(UnmanagedType.LPWStr)]\n            internal string UserName;\n        }\n\n        public enum CredPersist : uint\n        {\n            Session = 1,\n            LocalMachine = 2,\n            Enterprise = 3\n        }\n    }\n\n    static void Main()\n    {\n        //Example usage:\n        SaveTokenToLocker("my_app", "user_token_here");\n        string token = LoadTokenFromLocker("my_app");\n        Console.WriteLine(token);\n    }\n}