using System;\nusing System.Web;\nusing DinkToPdf;\nusing DinkToPdf.Contracts;\n\npublic class PdfGenerator\n{\n    private IConverter _converter;\n\n    public PdfGenerator(IConverter converter)\n    {\n        _converter = converter;\n    }\n\n    public byte[] GeneratePdfFromHtml(string htmlContent)\n    {\n        var doc = new HtmlToPdfDocument()\n        {\n            GlobalSettings = {\n                ColorMode = ColorMode.Color,\n                Orientation = Orientation.Portrait,\n                PaperSize = PaperKind.A4,\n            },\n            Objects = {\n                new ObjectSettings() {\n                    PagesCount = true,\n                    HtmlContent = htmlContent,\n                    WebSettings = { DefaultEncoding = "utf-8" }\n                }\n             }\n        };\n\n        return _converter.Convert(doc);\n    }\n\n    public void GeneratePdfFromAspxPage(string aspxPath)\n    {\n        var httpContext = new HttpContextWrapper(HttpContext.Current);\n        var responseCapture = new StringWriter();\n        httpContext.Server.Execute(aspxPath, responseCapture);\n\n        var htmlContent = responseCapture.ToString();\n        var pdfBytes = GeneratePdfFromHtml(htmlContent);\n\n        // Use pdfBytes\n        httpContext.Response.ContentType = "application/pdf";\n        httpContext.Response.OutputStream.Write(pdfBytes, 0, pdfBytes.Length);\n    }\n}\n\n// Usage in a controller or a method\npublic ActionResult ExportInvoice()\n{\n    using (var converter = new SynchronizedConverter(new PdfTools()))\n    {\n        var pdfGenerator = new PdfGenerator(converter);\n        pdfGenerator.GeneratePdfFromAspxPage("~/Invoices/Invoice.aspx");\n    }\n\n    return null; // Response is already written to OutputStream\n}