using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class ClassA\n{\n    public string FieldA { get; set; }\n    public string FieldB { get; set; }\n    public ClassB FieldC { get; set; }\n\n    // Constructor for default values\n    public ClassA()\n    {\n        FieldA = "DefaultValueA";\n        FieldB = "DefaultValueB";\n        FieldC = new ClassB(); // Assuming ClassB also has a constructor that initializes it properly\n    }\n}\n\npublic class ClassB\n{\n    // Example of fields in ClassB\n    public int SomeField { get; set; }\n\n    // Constructor with default values if needed\n    public ClassB()\n    {\n        SomeField = 0;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        List<ClassA> myObjects = new List<ClassA>();\n        myObjects.Add(new ClassA() { FieldA = "Value1", FieldB = "Value2" });\n        myObjects.Add(new ClassA() { FieldA = "Value3", FieldB = "Value4" });\n\n        // Using ElementAtOrDefault and providing custom default\n        int indexToRetrieve = 3; // Index out of range to demonstrate the default value\n        var newObject = myObjects.ElementAtOrDefault(indexToRetrieve) ?? new ClassA(); \n\n        Console.WriteLine($"FieldA: {newObject.FieldA}, FieldB: {newObject.FieldB}");\n    }\n}