public interface IEquatableObject\n{\n    // Define any necessary methods for equality comparison\n}\n\npublic delegate bool EqualityComparer<T>(T x, T y) where T : IEquatableObject;\n\npublic class Collection<T> where T : IEquatableObject\n{\n    private List<T> items = new List<T>();\n\n    public bool Equals<U>(Collection<U> other, EqualityComparer<U> eq) \n        where U : T, IEquatableObject\n    {\n        if (other == null || this.items.Count != other.items.Count)\n            return false;\n\n        for (int i = 0; i < items.Count; i++)\n        {\n            if (!eq(this.items[i], other.items[i]))\n                return false;\n        }\n\n        return true;\n    }\n}