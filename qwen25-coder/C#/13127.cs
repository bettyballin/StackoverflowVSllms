using System;\nusing System.Collections.Generic;\nusing System.Data.SqlClient; // Ensure to include appropriate db provider namespace\nusing System.Threading.Tasks;\n\npublic class QuoteGenerator\n{\n    private readonly string _connectionString = "YourConnectionString";\n\n    public async Task<List<Quote>> GenerateQuotesAsync(List<int> quoteIds)\n    {\n        var tasks = new List<Task<Quote>>();\n        \n        foreach (var id in quoteIds)\n        {\n            // Start a task to generate each quote asynchronously\n            tasks.Add(Task.Run(() => GenerateSingleQuoteAsync(id)));\n        }\n\n        // Wait for all tasks to complete and gather results\n        return await Task.WhenAll(tasks);\n    }\n\n    private async Task<Quote> GenerateSingleQuoteAsync(int quoteId)\n    {\n        var quote = new Quote { Id = quoteId, Details = "Fetching..." };\n\n        using (var connection = new SqlConnection(_connectionString))\n        {\n            await connection.OpenAsync();\n            using (var command = new SqlCommand("YourQuery", connection))\n            {\n                // Set parameters, etc.\n                using (var reader = await command.ExecuteReaderAsync())\n                {\n                    if (reader.Read())\n                    {\n                        quote.Details = reader["ColumnName"].ToString(); // Example field\n                    }\n                }\n            }\n        }\n\n        return quote;\n    }\n}\n\npublic class Quote\n{\n    public int Id { get; set; }\n    public string Details { get; set; }\n}