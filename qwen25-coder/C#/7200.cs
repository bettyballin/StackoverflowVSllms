using System;\nusing System.IO;\nusing System.Security.Cryptography;\n\npublic class EncryptionHelper\n{\n    private readonly byte[] _encryptionKey;\n\n    public EncryptionHelper()\n    {\n        // Assuming unique key is generated or loaded per instance\n        _encryptionKey = GetUniqueEncryptionKey();\n    }\n\n    // Load or generate a unique encryption key for each application instance\n    private static byte[] GetUniqueEncryptionKey()\n    {\n        // This method should securely retrieve or generate the key\n        // For demonstration: generating a random key. In practice, this could involve using DPAPI or another secure storage.\n        using (var rngCryptoServiceProvider = new RNGCryptoServiceProvider())\n        {\n            var key = new byte[32];\n            rngCryptoServiceProvider.GetBytes(key);\n            return key;\n        }\n    }\n\n    public string Encrypt(string plainText)\n    {\n        using (var aesAlg = Aes.Create())\n        {\n            aesAlg.Key = _encryptionKey;\n            // Initialize IV, use a different IV for each encryption operation if necessary\n            aesAlg.IV = new byte[aesAlg.BlockSize / 8];\n            \n            var encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n            using (var msEncrypt = new MemoryStream())\n            {\n                using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                {\n                    using (var swEncrypt = new StreamWriter(csEncrypt))\n                    {\n                        //Write all data to the stream.\n                        swEncrypt.Write(plainText);\n                    }\n                    return Convert.ToBase64String(msEncrypt.ToArray());\n                }\n            }\n        }\n    }\n\n    public string Decrypt(string cipherText)\n    {\n        using (var aesAlg = Aes.Create())\n        {\n            aesAlg.Key = _encryptionKey;\n            aesAlg.IV = new byte[aesAlg.BlockSize / 8];\n            \n            var decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);\n            \n            using (var msDecrypt = new MemoryStream(Convert.FromBase64String(cipherText)))\n            {\n                using (var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n                {\n                    using (var srDecrypt = new StreamReader(csDecrypt))\n                    {\n                        // Read the decrypted bytes from the decrypting stream and place them in a string.\n                        return srDecrypt.ReadToEnd();\n                    }\n                }\n            }\n        }\n    }\n}