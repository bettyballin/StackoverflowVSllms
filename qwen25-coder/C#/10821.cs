using System.Web.Security;\n\npublic class CustomMembershipProvider : MembershipProvider\n{\n    // ... other provider methods ...\n\n    public override bool ValidateUser(string username, string password)\n    {\n        if (IsValidUser(username, password)) // Assume IsValidUser checks your custom authentication logic\n        {\n            FormsAuthentication.SetAuthCookie(username, false); // Set the auth cookie\n\n            // Optionally create and add a ticket with additional user data\n            var ticket = new FormsAuthenticationTicket(\n                1,\n                username,\n                DateTime.Now,\n                DateTime.Now.AddMinutes(30), // Expiration\n                false, // Persistent login?\n                GenerateUserData(username) // Custom role list or other user-specific information here\n            );\n\n            string encryptedTicket = FormsAuthentication.Encrypt(ticket);\n            var authCookie = new HttpCookie(FormsAuthentication.FormsCookieName, encryptedTicket);\n\n            HttpContext.Current.Response.Cookies.Add(authCookie);\n\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    private bool IsValidUser(string username, string password)\n    {\n        // Your logic to validate the user goes here.\n        return true; // For demonstration purposes!\n    }\n\n    private string GenerateUserData(string username)\n    {\n        // Return any additional user related data\n        return "Role1,Role2"; // Placeholder for role names or custom claims\n    }\n}