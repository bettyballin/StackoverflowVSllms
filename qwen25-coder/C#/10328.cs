using System;\nusing System.Collections.Generic;\nusing System.Linq.Expressions;\nusing System.Reflection;\n\npublic class BindingCollection<T>\n{\n    private List<BindingInfo<T>> bindings = new List<BindingInfo<T>>();\n\n    public void BindControl<TControl, TValue>(TControl control, Expression<Func<T, TValue>> propertyExpression)\n        where TControl : System.Web.UI.Control\n    {\n        var bindingInfo = new BindingInfo<T>\n        {\n            Control = control,\n            PropertyGetter = CompileLambda(propertyExpression),\n            PropertySetter = CompileAction(propertyExpression)\n        };\n\n        bindings.Add(bindingInfo);\n    }\n\n    public void UpdateControls(T dataContext)\n    {\n        foreach (var binding in bindings)\n        {\n            var propertyValue = binding.PropertyGetter(dataContext);\n            SetControlValue(binding.Control, propertyValue);\n        }\n    }\n\n    public void UpdateDataContext(T dataContext)\n    {\n        foreach (var binding in bindings)\n        {\n            object controlValue = GetControlValue(binding.Control);\n            if (controlValue != null)\n                binding.PropertySetter(dataContext, Convert.ChangeType(controlValue, binding.PropertyGetter.ReturnType));\n        }\n    }\n\n    private Func<T, TValue> CompileLambda<TValue>(Expression<Func<T, TValue>> propertyExpression)\n    {\n        return propertyExpression.Compile();\n    }\n\n    private Action<T, TValue> CompileAction<TValue>(Expression<Func<T, TValue>> propertyExpression)\n    {\n        var parameter = Expression.Parameter(typeof(T));\n        var valueParameter = Expression.Parameter(propertyExpression.ReturnType);\n        var setterExpression = Expression.Lambda<Action<T, TValue>>(\n            Expression.Assign(propertyExpression.Body, valueParameter),\n            parameter,\n            valueParameter);\n\n        return setterExpression.Compile();\n    }\n\n    private void SetControlValue(System.Web.UI.Control control, object value)\n    {\n        // Implement based on the type of control\n        if (control is System.Web.UI.WebControls.TextBox textBox)\n        {\n            textBox.Text = value?.ToString() ?? string.Empty;\n        }\n        // Add cases for other controls as necessary\n    }\n\n    private object GetControlValue(System.Web.UI.Control control)\n    {\n        // Implement based on the type of control\n        if (control is System.Web.UI.WebControls.TextBox textBox)\n        {\n            return textBox.Text;\n        }\n        // Add cases for other controls as necessary\n        throw new NotSupportedException("Unsupported control type.");\n    }\n\n    private class BindingInfo<T>\n    {\n        public System.Web.UI.Control Control { get; set; }\n        public Func<T, object> PropertyGetter { get; set; }\n        public Action<T, object> PropertySetter { get; set; }\n    }\n}