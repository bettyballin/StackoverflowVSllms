public class MilesService : BackgroundService\n{\n    private readonly IMileRepository _mileRepository;\n    private readonly IHubContext<MilesHub> _hub;\n\n    public MilesService(IMileRepository mileRepository, IHubContext<MilesHub> hub)\n    {\n        _mileRepository = mileRepository;\n        _hub = hub;\n    }\n\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n        while (!stoppingToken.IsCancellationRequested)\n        {\n            var globalMiles = await _mileRepository.GetGlobalMiles();\n            await _hub.Clients.All.SendAsync("ReceiveMiles", globalMiles);\n            await Task.Delay(10000, stoppingToken); // Delay between updates\n        }\n    }\n}