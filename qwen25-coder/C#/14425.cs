using System;\nusing System.Linq;\nusing System.Reflection;\n\npublic interface IMyCustomInterface {}\n\npublic class MyCustomObjectClass {}\n\npublic class MyCustomGenericCollection<T> : IMyCustomInterface\n{\n    public void Add(T item) { /* implementation */ }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        string className = "MyCustomGenericCollection`1";\n        string genericArgumentName = "MyCustomObjectClass";\n\n        // Get all types from loaded assemblies that implement IMyCustomInterface\n        var typeMap = AppDomain.CurrentDomain.GetAssemblies()\n            .SelectMany(a => a.GetTypes())\n            .Where(t => typeof(IMyCustomInterface).IsAssignableFrom(t))\n            .ToDictionary(t => t.FullName);\n\n        if (!typeMap.TryGetValue(className, out Type genericTypeDefinition))\n        {\n            throw new ArgumentException("Generic type not found.");\n        }\n\n        // Get the generic argument type\n        var genericArgumentType = AppDomain.CurrentDomain.GetAssemblies()\n            .SelectMany(a => a.GetTypes())\n            .FirstOrDefault(t => t.FullName == genericArgumentName);\n\n        if (genericArgumentType == null)\n        {\n            throw new ArgumentException("Generic argument type not found.");\n        }\n\n        // Make the generic type with the specified generic argument\n        var specificGenericType = genericTypeDefinition.MakeGenericType(genericArgumentType);\n\n        // Create an instance of the specific generic type\n        object instance = Activator.CreateInstance(specificGenericType);\n\n        Console.WriteLine($"Created Instance: {instance.GetType()}");\n    }\n}