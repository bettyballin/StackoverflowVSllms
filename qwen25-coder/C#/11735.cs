private void TargetIP_KeyDown(object sender, KeyEventArgs e)\n{\n    // Initialize the flag to false.\n    bool nonNumberEntered = false;\n\n    // Check for numbers from the top of the keyboard.\n    if ((e.KeyCode < Keys.D0 || e.KeyCode > Keys.D9) \n        && (e.KeyCode < Keys.NumPad0 || e.KeyCode > Keys.NumPad9))\n    {\n        // Allow periods as they are essential for IP addresses.\n        if (e.KeyCode != Keys.OemPeriod && e.KeyCode != Keys.Decimal)\n        {\n            // Check for backspace, which is also allowed.\n            if (e.KeyCode != Keys.Back)\n            {\n                nonNumberEntered = true;\n                errorProvider1.SetError(TargetIP, "Field validation: Only numbers and periods are allowed.");\n                // Set the flag to true and evaluate in KeyPress event.\n            }\n        }\n    }\n\n    // If shift key was pressed and the key is not a period, it's likely a non-numerical character.\n    if (Control.ModifierKeys == Keys.Shift && e.KeyCode != Keys.OemPeriod && e.KeyCode != Keys.Decimal)\n    {\n        nonNumberEntered = true;\n    }\n\n    // Set the flag for KeyPress event handling.\n    TargetIP.Tag = nonNumberEntered;\n}\n\nprivate void TargetIP_KeyPress(object sender, KeyPressEventArgs e)\n{\n    // Retrieve the flag set in the KeyDown event.\n    bool nonNumberEntered = (bool)TargetIP.Tag;\n\n    // Check for the flag being set in the KeyDown event.\n    if (nonNumberEntered == true)\n    {\n        // Stop the character from being entered into the control since it is non-numerical or inappropriate for an IP address.\n        e.Handled = true;\n    }\n    else\n    {\n        errorProvider1.Clear();\n    }\n}