public override void SubmitChanges(ConflictMode failureMode)\n{\n    // Capture the current changeset before making additional changes.\n    ChangeSet delta = GetChangeSet();\n\n    base.SubmitChanges(failureMode); // First, submit all existing changes.\n\n    // Iterate through each reservation that has been deleted.\n    foreach (var res in delta.Deletes.OfType<Reservation>())\n    {\n        // Create a new Roster instance to check for newly seated individuals.\n        var roster = new Roster(this, res.CourseID);\n        \n        // Get the current seated IDs from the roster.\n        var seated = from r in roster.All\n                     where r.WaitingList == false\n                     select r.ID;\n\n        // Determine the newly seated individuals by comparing with originally seated IDs.\n        var newlySeated = from r in roster.All\n                          where r.WaitingList == false && !seated.Contains(r.ID)\n                          select r.ID;\n\n        // Fetch reservations of those who have been newly seated.\n        var reservations = this.Reservations.Where(r => newlySeated.Contains(r.ID)).ToList();\n\n        // Mark these reservations as not confirmed.\n        foreach (var r in reservations)\n        {\n            r.Confirmed = false;\n        }\n    }\n\n    base.SubmitChanges(failureMode); // Submit changes again to apply the updates.\n}