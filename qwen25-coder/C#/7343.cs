using System;\nusing NHibernate.SqlTypes;\nusing NHibernate.UserTypes;\n\n[Serializable]\npublic class GuidAsBinaryType : IUserType\n{\n    public new bool Equals(object x, object y)\n    {\n        if (ReferenceEquals(x, y))\n            return true;\n\n        if (x == null || y == null)\n            return false;\n\n        return x.Equals(y);\n    }\n\n    public int GetHashCode(object x) => x.GetHashCode();\n\n    public object NullSafeGet(IDataReader rs, string[] names, object owner) =>\n        SqlTypes.SqlBinary.NullSafeGet(rs, names[0]) as byte[];\n\n    public void NullSafeSet(IDbCommand cmd, object value, int index)\n    {\n        var ps = (NHibernate.Driver.NHibernateDriverCommandAdapter)cmd;\n        if (value == null)\n            SqlTypes.SqlBinary.NullSafeSet(ps, null, index);\n        else\n            SqlTypes.SqlBinary.NullSafeSet(ps, ((Guid)value).ToByteArray(), index);\n    }\n\n    public object DeepCopy(object value)\n    {\n        if (value == null)\n            return null;\n        byte[] bytes = (byte[])value;\n        var tempArray = new byte[bytes.Length];\n        Array.Copy(bytes, tempArray, bytes.Length);\n        return tempArray;\n    }\n\n    public object Replace(object original, object target, object owner) => original;\n\n    public object Assemble(object cached, object owner) =>\n        new Guid((byte[])cached);\n\n    public object Disassemble(object value) => DeepCopy(value);\n\n    public SqlType[] SqlTypes => new[]\n    {\n        SqlTypes.SqlBinary(16)\n    };\n\n    public Type ReturnedType => typeof(Guid);\n\n    public bool IsMutable => true;\n}