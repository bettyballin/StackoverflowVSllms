public partial class resp\n{\n    public IEnumerable<RuleViolation> GetRuleViolations()\n    {\n        return GetRuleViolations(ChangeAction.None);\n    }\n\n    public IEnumerable<RuleViolation> GetRuleViolations(ChangeAction action)\n    {\n        if (String.IsNullOrEmpty(respName))\n            yield return new RuleViolation("Responsibility name required", "respName");\n\n        // Check additional rules only on delete\n        if (action == ChangeAction.Delete)\n        {\n            if (respApprovers.Any())\n                yield return new RuleViolation("Cannot delete because this responsibility is used in respApprovers", "respApprovers");\n            \n            if (approvals.Any())\n                yield return new RuleViolation("Cannot delete because this responsibility has approvals", "approvals");\n        }\n\n        yield break;\n    }\n\n    public bool IsValid(ChangeAction action)\n    {\n        return !GetRuleViolations(action).Any();\n    }\n\n    partial void OnValidate(ChangeAction action)\n    {\n        if (!IsValid(action))\n            throw new ApplicationException("Rule violations prevent saving or deleting");\n    }\n}