using System;\nusing System.IO;\nusing System.Net;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\n\nclass SimpleProxy\n{\n    private readonly HttpListener _listener = new HttpListener();\n    private readonly HttpClient _httpClient = new HttpClient();\n\n    public async Task Start(string proxyPrefix)\n    {\n        _listener.Prefixes.Add(proxyPrefix);\n        _listener.Start();\n        Console.WriteLine("Listening for requests...");\n\n        while (true)\n        {\n            var context = await _listener.GetContextAsync();\n            _ = HandleRequest(context).ConfigureAwait(false);\n        }\n    }\n\n    private async Task HandleRequest(HttpListenerContext context)\n    {\n        try\n        {\n            string requestUrl = context.Request.Url.AbsoluteUri;\n\n            // Forward the request to the target URL.\n            using (var message = new HttpRequestMessage())\n            {\n                var request = context.Request;\n                CopyContent(message, context);\n                message.Method = new HttpMethod(request.HttpMethod);\n\n                using (HttpResponseMessage response = await _httpClient.SendAsync(message))\n                {\n                    string proxyResponseText;\n                    if (response.Content != null)\n                    {\n                        proxyResponseText = await response.Content.ReadAsStringAsync();\n                    }\n                    else\n                    {\n                        proxyResponseText = string.Empty;\n                    }\n\n                    // Return the response to the client.\n                    var outgoingResponse = context.Response;\n                    WriteProxyResponse(outgoingResponse, proxyResponseText, response.Headers);\n                }\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($"Error: {ex.Message}");\n        }\n    }\n\n    private void CopyContent(HttpRequestMessage message, HttpListenerContext context)\n    {\n        // Read the content of the original request.\n        var body = new StreamReader(context.Request.InputStream, Encoding.UTF8).ReadToEnd();\n        if (!string.IsNullOrEmpty(body))\n            message.Content = new StringContent(body, Encoding.UTF8);\n    }\n\n    private void WriteProxyResponse(HttpListenerResponse response, string proxyResponseBody, HttpHeaders headers)\n    {\n        using (var writer = new StreamWriter(response.OutputStream, Encoding.UTF8) { AutoFlush = true })\n        {\n            foreach (var header in headers)\n            {\n                try\n                {\n                    if (!response.Headers.TryAddWithoutValidation(header.Key, header.Value.ToArray()))\n                        response.AppendHeader(header.Key, string.Join(", ", header.Value));\n                }\n                catch { } // suppress exception if we can't add (for example TransferEncoding or Connection)\n            }\n\n            writer.Write(proxyResponseBody);\n        }\n    }\n\n    public static void Main(string[] args)\n    {\n        var proxy = new SimpleProxy();\n        proxy.Start("http://localhost:8080/").Wait();\n    }\n}