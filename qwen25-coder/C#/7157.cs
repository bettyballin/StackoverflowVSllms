public abstract class HtmlElement\n{\n    public string InnerHtml { get; set; }\n    public CssStyleCollection Style { get; set; }\n\n    protected HtmlElement(string innerHtml)\n    {\n        InnerHtml = innerHtml;\n        Style = new CssStyleCollection();\n    }\n\n    public abstract string Render();\n\n    public void AddStyle(string propertyName, string value)\n    {\n        Style.Add(propertyName, value);\n    }\n}\n\npublic class HtmlDocument : HtmlElement\n{\n    private List<HtmlElement> children = new List<HtmlElement>();\n\n    public HtmlDocument() : base("")\n    {\n    }\n\n    public void AddChild(HtmlElement element)\n    {\n        children.Add(element);\n    }\n\n    public override string Render()\n    {\n        var sb = new StringBuilder("<html><head></head><body>");\n        foreach (var child in children)\n        {\n            sb.Append(child.Render());\n        }\n        sb.Append("</body></html>");\n        return sb.ToString();\n    }\n}\n\npublic class HtmlParagraph : HtmlElement\n{\n    public HtmlParagraph(string text) : base(text)\n    {}\n\n    public override string Render()\n    {\n        var styleString = GetStyleAttribute();\n        return $"<p{styleString}>{InnerHtml}</p>";\n    }\n\n    private string GetStyleAttribute()\n    {\n        if (Style.Count == 0)\n            return "";\n\n        var styles = new StringBuilder(" style='");\n        foreach (var item in Style.Keys)\n        {\n            styles.Append($"{item}:{Style[(string)item]}; ");\n        }\n        styles.Length--; // Remove the last space\n        styles.Append("'");\n\n        return styles.ToString();\n    }\n}\n\npublic class HtmlOrderedList : List<HtmlElement>\n{\n    public string Render()\n    {\n        var sb = new StringBuilder("<ol>");\n        foreach (var element in this)\n        {\n            sb.Append($"<li>{element.Render()}</li>");\n        }\n        sb.Append("</ol>");\n        return sb.ToString();\n    }\n}