using System;\nusing System.Linq;\nusing System.Reflection;\n\npublic static class ApplicationTypeDetector\n{\n    public enum AppType\n    {\n        Unknown,\n        ConsoleApp,\n        WinFormsApp,\n        AspNetApp,\n        WindowsService\n    }\n\n    public static AppType DetectApplicationType()\n    {\n        var entryAssembly = Assembly.GetEntryAssembly();\n        if (entryAssembly == null)\n            return AppType.Unknown;\n\n        // Check for WinForms application\n        if (entryAssembly.GetTypes().Any(t => t.BaseType == typeof(System.Windows.Forms.Form)))\n            return AppType.WinFormsApp;\n\n        // Check for ASP.NET (could be more nuanced, check for specific types or attributes)\n        if (entryAssembly.GetReferencedAssemblies().Any(a => a.FullName.Contains("System.Web")))\n            return AppType.AspNetApp;\n\n        // Check the entry point name as a heuristic\n        var entryPoint = entryAssembly.EntryPoint;\n        if (entryPoint != null && entryPoint.Name.Equals("Main", StringComparison.OrdinalIgnoreCase))\n        {\n            foreach (var param in entryPoint.GetParameters())\n            {\n                // Console application usually have string[] args parameter\n                if (param.ParameterType.IsArray && param.ParameterType.GetElementType() == typeof(string))\n                    return AppType.ConsoleApp;\n            }\n            return AppType.WindowsService; // Windows service might not have a typical Main signature, might require more checks.\n        }\n\n        return AppType.Unknown;\n    }\n}