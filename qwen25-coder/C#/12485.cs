// Method to save a file securely\npublic void SaveFile(HttpPostedFileBase file, string userId)\n{\n    // Generate unique file name\n    var fileName = Guid.NewGuid().ToString() + Path.GetExtension(file.FileName);\n    // Define path outside web root\n    var filePath = Server.MapPath("~/App_Data/Uploads/" + userId + "/" + fileName);\n\n    // Ensure the upload directory exists\n    Directory.CreateDirectory(Path.GetDirectoryName(filePath));\n\n    // Save the file\n    file.SaveAs(filePath);\n\n    // Store metadata in database (example with LINQ to SQL)\n    using (var db = new DocumentsDataContext())\n    {\n        var document = new Document\n        {\n            FileName = fileName,\n            FilePath = filePath,\n            UserId = userId,\n            UploadDate = DateTime.Now\n        };\n\n        db.Documents.InsertOnSubmit(document);\n        db.SubmitChanges();\n    }\n}\n\n// Method to stream a file securely\npublic void StreamFile(int fileId, string requestingUserId)\n{\n    using (var db = new DocumentsDataContext())\n    {\n        var document = db.Documents.FirstOrDefault(d => d.Id == fileId);\n\n        if (document == null || (!string.Equals(document.UserId, requestingUserId) && !IsAdmin(requestingUserId)))\n            throw new UnauthorizedAccessException();\n\n        // Stream the file to client\n        Response.ContentType = "application/octet-stream";\n        Response.AddHeader("Content-Disposition", $"attachment; filename={Path.GetFileName(document.FileName)}");\n        Response.WriteFile(document.FilePath);\n    }\n}\n\n// Helper method to check if a user is an admin (pseudo-code)\nprivate bool IsAdmin(string userId)\n{\n    // Logic to determine if the user is an administrator\n    return false;\n}