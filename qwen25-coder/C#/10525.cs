using System;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\nusing System.Windows.Forms;\n\npublic class MessageBoxSuppressor : IDisposable\n{\n    private const int WH_CALLWNDPROC = 4;\n    private const int WM_INITDIALOG = 0x110;\n    private static IntPtr hookHandle;\n\n    [DllImport("user32.dll", SetLastError = true)]\n    private static extern IntPtr SetWindowsHookEx(int idHook, Delegate lpfn, IntPtr hmod, uint dwThreadId);\n\n    [DllImport("user32.dll", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    private static extern bool UnhookWindowsHookEx(IntPtr hhk);\n\n    [DllImport("kernel32.dll")]\n    public static extern IntPtr LoadLibrary(string lpFileName);\n\n    private delegate IntPtr HookProc(int nCode, IntPtr wParam, IntPtr lParam);\n\n    private static HookProc hookProcDelegate;\n\n    public MessageBoxSuppressor()\n    {\n        hookProcDelegate = HookCallback;\n        using (Process curProcess = Process.GetCurrentProcess())\n        using (ProcessModule curModule = curProcess.MainModule)\n        {\n            hookHandle = SetWindowsHookEx(WH_CALLWNDPROC, hookProcDelegate,\n                LoadLibrary("user32.dll"), 0);\n        }\n    }\n\n    private static IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)\n    {\n        if (nCode >= 0 && (int)wParam == WM_INITDIALOG)\n        {\n            // If dialog is created, stop it immediately\n            return new IntPtr(1); // Returning 1 blocks the message box/form from showing\n        }\n        return CallNextHookEx(IntPtr.Zero, nCode, wParam, lParam);\n    }\n\n    [DllImport("user32.dll", SetLastError = true)]\n    private static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);\n\n    public void Dispose()\n    {\n        if (hookHandle != IntPtr.Zero)\n        {\n            UnhookWindowsHookEx(hookHandle);\n        }\n    }\n}