using System.ComponentModel.Composition;\nusing System.ComponentModel.Composition.Hosting;\n\nclass Program : IDisposable\n{\n    private CompositionContainer _container;\n\n    [Import(typeof(IService))]\n    public IService MyService { get; set; }\n\n    static void Main()\n    {\n        var program = new Program();\n        try\n        {\n            program.Compose();\n            // Use the composed parts\n            program.MyService.DoWork();\n        }\n        finally\n        {\n            program.Dispose();\n        }\n    }\n\n    private void Compose()\n    {\n        var catalog = new AggregateCatalog();\n        catalog.Catalogs.Add(new AssemblyCatalog(typeof(Program).Assembly));\n\n        _container = new CompositionContainer(catalog);\n\n        try\n        {\n            this._container.ComposeParts(this);\n        }\n        catch (CompositionException compositionException)\n        {\n            Console.WriteLine(compositionException.ToString());\n        }\n    }\n\n    public void Dispose()\n    {\n        if (_container != null) _container.Dispose();\n    }\n}