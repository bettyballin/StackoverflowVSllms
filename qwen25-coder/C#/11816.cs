using System;\nusing System.Collections.Generic;\nusing System.Threading;\n\npublic class CollectionModifierExample {\n    private readonly List<int> _numbers = new List<int>();\n    private readonly object _lock = new object();\n\n    public void AddNumber(int num) {\n        lock (_lock) {\n            _numbers.Add(num);\n        }\n    }\n\n    public void ProcessNumbers() {\n        try {\n            // Lock the collection while enumerating it to avoid modification\n            lock (_lock) {\n                foreach (var number in _numbers) {\n                    Console.WriteLine(number);\n                    // Simulate work\n                    Thread.Sleep(100);\n                }\n            }\n        } catch (Exception ex) {\n            Console.WriteLine($"Exception: {ex.Message}");\n        }\n    }\n\n    public void ModifyCollectionConcurrently() {\n        for (int i = 0; i < 10; i++) {\n            ThreadPool.QueueUserWorkItem(\n                _ => AddNumber(i)\n            );\n        }\n    }\n\n    public static void Main(string[] args) {\n        var example = new CollectionModifierExample();\n        example.ModifyCollectionConcurrently();\n        example.ProcessNumbers();\n\n        // Wait for threads to complete\n        Thread.Sleep(1500);\n    }\n}