using System;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\nusing System.Threading.Tasks;\n\npublic class TcpClientExample\n{\n    private const int BufferSize = 4096; // or any size that works for you\n\n    public async Task ReceiveDataAsync(Socket clientSocket)\n    {\n        var buffer = new byte[BufferSize];\n        using (var ms = new System.IO.MemoryStream())\n        {\n            do\n            {\n                int bytesRead = await clientSocket.ReceiveAsync(new ArraySegment<byte>(buffer), SocketFlags.None);\n                if (bytesRead <= 0) break; // End of data or connection closed\n\n                ms.Write(buffer, 0, bytesRead);\n\n                // Check if the complete message has been received here.\n                // You might need an agreement between client and server on how to determine this,\n                // such as prefixing the message with its length.\n            } while (true); // Continue until end of data is reached\n\n            byte[] fullData = ms.ToArray();\n            // Process the received data\n        }\n    }\n\n    public static async Task Main(string[] args)\n    {\n        var clientSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n        await clientSocket.ConnectAsync(IPAddress.Loopback, 8080);\n\n        var example = new TcpClientExample();\n        await example.ReceiveDataAsync(clientSocket);\n\n        Console.WriteLine("Data received.");\n    }\n}