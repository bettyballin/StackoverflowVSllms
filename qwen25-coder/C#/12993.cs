using (var db = new YourDataContext())\n{\n    // Create maps to hold old IDs to new IDs mappings\n    var defaultRegionToNewRegionsMap = new Dictionary<int, int>();\n    var defaultSubRegionToNewSubRegionsMap = new Dictionary<int, int>();\n\n    // Copy DefaultRegions to Regions and map their IDs\n    foreach (var defaultRegion in db.DefaultRegions)\n    {\n        var newRegion = new Region { Name = defaultRegion.Name, GameId = newGame.Id };\n        db.Regions.InsertOnSubmit(newRegion);\n        db.SubmitChanges();\n\n        defaultRegionToNewRegionsMap[defaultRegion.Id] = newRegion.Id;\n    }\n\n    // Copy DefaultSubRegions to SubRegions updating their ParentRegionId\n    foreach (var defaultSubRegion in db.DefaultSubRegions)\n    {\n        var newSubRegion = new SubRegion \n        { \n            Name = defaultSubRegion.Name, \n            RegionId = defaultRegionToNewRegionsMap[defaultSubRegion.RegionId],\n            GameId = newGame.Id \n        };\n        db.SubRegions.InsertOnSubmit(newSubRegion);\n        db.SubmitChanges();\n\n        defaultSubRegionToNewSubRegionsMap[defaultSubRegion.Id] = newSubRegion.Id;\n    }\n\n    // Copy DefaultCountries to Countries updating their ParentSubRegionId\n    foreach (var defaultCountry in db.DefaultCountries)\n    {\n        var newCountry = new Country \n        { \n            Name = defaultCountry.Name, \n            SubRegionId = defaultSubRegionToNewSubRegionsMap[defaultCountry.SubRegionId],\n            GameId = newGame.Id \n        };\n        db.Countries.InsertOnSubmit(newCountry);\n        db.SubmitChanges();\n    }\n}