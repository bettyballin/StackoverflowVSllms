// DrawingModule.xaml.cs\npublic class DrawingModule : IModule {\n    public void OnInitialized(IContainerProvider containerProvider) {\n        var regionManager = containerProvider.Resolve<IRegionManager>();\n        regionManager.RegisterViewWithRegion("ToolboxRegion", typeof(ToolboxView));\n        regionManager.RegisterViewWithRegion("CanvasRegion", typeof(CanvasView));\n    }\n\n    public void RegisterTypes(IContainerRegistry containerRegistry) {\n        // Registration of types and services\n        containerRegistry.RegisterForNavigation<ToolboxView>();\n        containerRegistry.RegisterForNavigation<CanvasView>();\n    }\n}\n\n// ToolboxViewModel.cs (example)\npublic class ToolboxViewModel : BindableBase, IActiveAware {\n    private readonly IEventAggregator _eventAggregator;\n\n    public ToolboxViewModel(IEventAggregator eventAggregator) {\n        _eventAggregator = eventAggregator;\n    }\n\n    // Method to publish an event\n    public void SelectTool(string toolName) {\n        _eventAggregator.GetEvent<ToolSelectedEvent>().Publish(toolName);\n    }\n}\n\n// CanvasViewModel.cs (example)\npublic class CanvasViewModel : BindableBase, IHandle<string> {\n    private string _currentTool;\n\n    public CanvasViewModel(IEventAggregator eventAggregator) {\n        eventAggregator.Subscribe(this);\n    }\n\n    // Handle method to receive events\n    public void Handle(string toolName) {\n        CurrentTool = toolName;\n    }\n\n    public string CurrentTool {\n        get { return _currentTool; }\n        set { SetProperty(ref _currentTool, value); }\n    }\n}