[Table(Name="dbo.Histories")]\n    public partial class History : INotifyPropertyChanging, INotifyPropertyChanged\n    {\n        // Properties here...\n        \n        private static Func<DataContext, History, int> _insertDelegate;\n        [Function(IsComposable=false)]\n        public static int InsertHistory(DataContext db, History h)\n        {\n            if (_insertDelegate == null) {\n                ParameterExpression p0 = Expression.Parameter(typeof(DataContext), "p0");\n                ParameterExpression p1 = Expression.Parameter(typeof(History), "p1");\n                MethodCallExpression mce = Expression.Call(p0,\n                    ((MethodInfo)(MethodInfo.GetCurrentMethod())), \n                    new Expression[]{p0, p1})\n                _insertDelegate = Expression.Lambda<Func<DataContext, History, int>>(mce, new ParameterExpression[]{p0, p1}).Compile();\n            }\n            return _insertDelegate(db, h);\n        }\n        \n        [Associate(ThisKey="HistoryID", Storage="_ChangeRequest", OtherKey="ChangeRequestID")]\n        public ChangeRequest ChangeRequest\n        {\n            get { return this._ChangeRequest.Entity; }\n            set { this.ChangeRequest = value == null ? nullReference : new EntityRef<ChangeRequest>(value); }\n        }\n        \n        // Call your stored procedure directly if the generated code doesn't map correctly.\n        partial void InsertHistory()\n        {\n            db.usp_HistoryInsert(\n                ref this.HistoryID,\n                this.ChangeRequestID,\n                this.StatusID,\n                this.UserID,\n                this.EmailSent,\n                this.HistoryDate,\n                this.Remarks,\n                this.StatusChanged\n            );\n        }\n    }