using System;\nusing System.Collections.Generic;\n\npublic class RopeNode {\n    public int Length { get; private set; }\n    public string Value { get; private set; }\n    public RopeNode LeftChild { get; set; }\n    public RopeNode RightChild { get; set; }\n\n    public bool IsLeaf => LeftChild == null && RightChild == null;\n\n    public RopeNode(string value) {\n        Value = value;\n        Length = value.Length;\n    }\n\n    public RopeNode(RopeNode left, RopeNode right) {\n        LeftChild = left;\n        RightChild = right;\n        Length = left.Length + right.Length;\n    }\n}\n\npublic class Rope {\n    private RopeNode root;\n\n    public Rope(string initialContent) => root = new RopeNode(initialContent);\n\n    public void Insert(int offset, string toInsert) {\n        (RopeNode left, RopeNode right) = Split(offset);\n        var insertNode = new RopeNode(toInsert);\n        root = new RopeNode(new RopeNode(left), new RopeNode(insertNode, right));\n    }\n\n    public void Delete(int startOffset, int endOffset) {\n        (RopeNode left1, RopeNode middle) = Split(startOffset);\n        (RopeNode toRemove, RopeNode right) = Split(endOffset - startOffset, middle);\n        root = new RopeNode(left1, right);\n    }\n\n    public char CharAt(int offset) => GetChar(root, offset);\n\n    private (RopeNode, RopeNode) Split(int position) {\n        if (position == 0 && root.LeftChild == null)\n            return (null, root);\n\n        int leftLength = root.LeftChild != null ? root.LeftChild.Length : 0;\n\n        if (leftLength >= position)\n            return (Split(position, root.LeftChild), root.RightChild);\n        else\n            return (root.LeftChild, Split(position - leftLength, root.RightChild));\n    }\n\n    private char GetChar(RopeNode node, int idx) {\n        while (!node.IsLeaf) {\n            if (idx < node.LeftChild.Length)\n                node = node.LeftChild;\n            else {\n                idx -= node.LeftChild.Length;\n                node = node.RightChild;\n            }\n        }\n\n        return node.Value[idx];\n    }\n\n    public string ToStringInRange(int start, int end) {\n        var result = new char[end - start];\n        for (var i = 0; i < result.Length; i++)\n            result[i] = CharAt(start + i);\n\n        return new string(result);\n    }\n}\n\nclass Program {\n    static void Main() {\n        var rope = new Rope("Hello World");\n        rope.Insert(5, " Beautiful");\n        Console.WriteLine(rope.ToStringInRange(0, 16)); // Outputs: Hello Beautiful World\n    }\n}