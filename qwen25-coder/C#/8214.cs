using System;\nusing System.IO;\nusing System.IO.IsolatedStorage;\nusing System.Security.Cryptography;\n\npublic class SecureStorageManager\n{\n    private const string CurrentKey = "yourStrongKey2023"; // This should be rotated and not hardcoded\n\n    public void SaveEncryptedData(string data, IsolatedStorageFile store)\n    {\n        byte[] encryptedBytes = Encrypt(data, CurrentKey);\n        using (IsolatedStorageFileStream stream = new IsolatedStorageFileStream("data.txt", FileMode.Create, store))\n        {\n            stream.Write(encryptedBytes, 0, encryptedBytes.Length);\n        }\n    }\n\n    public string LoadDecryptedData(IsolatedStorageFile store)\n    {\n        if (!store.FileExists("data.txt"))\n            return null;\n\n        byte[] decryptedBytes;\n        using (IsolatedStorageFileStream stream = new IsolatedStorageFileStream("data.txt", FileMode.Open, store))\n        {\n            byte[] buffer = new byte[stream.Length];\n            stream.Read(buffer, 0, buffer.Length);\n            decryptedBytes = Decrypt(buffer, CurrentKey);\n        }\n\n        return System.Text.Encoding.UTF8.GetString(decryptedBytes);\n    }\n\n    private static byte[] Encrypt(string plainText, string key)\n    {\n        using (Aes aesAlg = Aes.Create())\n        {\n            aesAlg.Key = GenerateKey(key); // Hash the key to a fixed length\n            aesAlg.IV = new byte[16]; // Initialize IV properly\n\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n            using (MemoryStream msEncrypt = new MemoryStream())\n            {\n                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                {\n                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))\n                    {\n                        swEncrypt.Write(plainText);\n                    }\n                    return msEncrypt.ToArray();\n                }\n            }\n        }\n    }\n\n    private static byte[] Decrypt(byte[] cipherText, string key)\n    {\n        using (Aes aesAlg = Aes.Create())\n        {\n            aesAlg.Key = GenerateKey(key); // Hash the key to a fixed length\n            aesAlg.IV = new byte[16]; // Initialize IV properly\n\n            ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);\n            using (MemoryStream msDecrypt = new MemoryStream(cipherText))\n            {\n                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n                {\n                    using (StreamReader srDecrypt = new StreamReader(csDecrypt))\n                    {\n                        return System.Text.Encoding.UTF8.GetBytes(srDecrypt.ReadToEnd());\n                    }\n                }\n            }\n        }\n    }\n\n    private static byte[] GenerateKey(string key)\n    {\n        // Use a hash function to convert the string into a byte array of appropriate size\n        using (SHA256 sha256Hash = SHA256.Create())\n        {\n            return sha256Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(key));\n        }\n    }\n}