using System;\nusing System.Collections.Generic;\n\npublic class WorkFlowStep\n{\n    public int WorkFlowStepID { get; set; }\n    public int? ParentWorkFlowStepID { get; set; }\n\n    public WorkFlowStep(int workFlowStepID, int? parentWorkFlowStepID)\n    {\n        WorkFlowStepID = workFlowStepID;\n        ParentWorkFlowStepID = parentWorkFlowStepID;\n    }\n}\n\npublic class LinkedList<T>\n{\n    private Node<T> head;\n\n    private class Node<T>\n    {\n        public T Data { get; set; }\n        public Node<T> Next { get; set; }\n\n        public Node(T data)\n        {\n            Data = data;\n            Next = null;\n        }\n    }\n\n    public void AddFirst(T data)\n    {\n        var newNode = new Node<T>(data);\n        newNode.Next = head;\n        head = newNode;\n    }\n\n    public bool InsertAfter(T newData, Func<Node<T>, bool> condition)\n    {\n        var current = head;\n        while (current != null && !condition(current))\n        {\n            current = current.Next;\n        }\n\n        if (current == null) return false; // No node matched the condition\n\n        var newNode = new Node<T>(newData);\n        newNode.Next = current.Next;\n        current.Next = newNode;\n\n        return true;\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var linkedList = new LinkedList<WorkFlowStep>();\n        List<WorkFlowStep> steps = GetFromDatabase(); // Assume this method fetches data from your database\n\n        foreach (var step in steps)\n        {\n            if (step.ParentWorkFlowStepID == null)\n            {\n                linkedList.AddFirst(step);\n            }\n            else\n            {\n                linkedList.InsertAfter(step, node =>\n                    ((WorkFlowStep)node.Data).WorkFlowStepID == step.ParentWorkFlowStepID);\n            }\n        }\n\n        // Print the linked list to verify\n        var currentNode = linkedList.head;\n        while (currentNode != null)\n        {\n            var workflowStep = currentNode.Data as WorkFlowStep;\n            Console.WriteLine($"Workflow Step ID: {workflowStep.WorkFlowStepID}, Parent Workflow Step ID: {workflowStep.ParentWorkFlowStepID}");\n            currentNode = currentNode.Next;\n        }\n    }\n\n    private static List<WorkFlowStep> GetFromDatabase()\n    {\n        // Implement your database fetching logic here\n        return new List<WorkFlowStep>\n        {\n            new WorkFlowStep(1, null),\n            new WorkFlowStep(2, 1),\n            new WorkFlowStep(3, 2)\n        };\n    }\n}