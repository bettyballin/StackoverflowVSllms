using System;\nusing System.Collections.Generic;\nusing System.Threading;\n\npublic class DatabaseInserter\n{\n    private readonly Queue<string> _queue = new Queue<string>();\n    private readonly SemaphoreSlim _semaphoreSlim = new SemaphoreSlim(1, 1); // Initial and max count of 1\n\n    public void InsertBasicVaraibles(object param)\n    {\n        string dataToInsert = (string)param;\n\n        lock (_queue)\n        {\n            _queue.Enqueue(dataToInsert);\n        }\n\n        _semaphoreSlim.Wait();\n\n        try\n        {\n            string item;\n            lock (_queue)\n            {\n                if (_queue.Count > 0)\n                    item = _queue.Dequeue();\n                else\n                    return; // or handle the case where the queue is empty\n            }\n\n            // Simulate database insertion\n            Console.WriteLine("Inserting into DB: " + item);\n            Thread.Sleep(1500); // Simulating a delay in insertion\n        }\n        catch (Exception ex)\n        {\n            // Handle exception\n            Console.WriteLine("Error inserting data: " + ex.Message);\n        }\n        finally\n        {\n            _semaphoreSlim.Release();\n        }\n    }\n\n    public void Start()\n    {\n        System.Timers.Timer timer = new System.Timers.Timer(1000); // Fire every second\n        timer.Elapsed += (source, e) => InsertBasicVaraibles("Data at " + DateTime.Now);\n        timer.Start();\n\n        Console.WriteLine("Timer started. Press Enter to exit.");\n        Console.ReadLine();\n    }\n}