using System;\nusing System.Collections.Generic;\n\npublic class TreeNode\n{\n    public string Content { get; set; }\n    public List<TreeNode> Children { get; set; } = new List<TreeNode>();\n\n    public override string ToString() => $"{Content}";\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var root = BuildTree();\n        \n        // Example: Remove item with content "2.1 Gifts"\n        TreeNode nodeToRemove = FindNode(root.Children, "2.1 Gifts");\n        if (nodeToRemove != null)\n            nodeToRemove.Children.Clear(); // Simulate removal by clearing children and resetting content\n        \n        // Re-number the tree\n        RenumberTree(root.Children, 2); // Start renumbering from "Whats New" which is at level 2\n        \n        PrintTree(root);\n    }\n\n    private static void RenumberTree(List<TreeNode> nodes, int currentNumber)\n    {\n        for (int i = 0; i < nodes.Count; i++)\n        {\n            string newNumber;\n            if (currentNumber.ToString() == "1")\n                newNumber = "1";\n            else\n                newNumber = currentNumber + "." + (i + 1);\n\n            nodes[i].Content = GenerateNewContent(nodes[i], newNumber);\n            RenumberTree(nodes[i].Children, Convert.ToInt32(newNumber.Split('.')[0]));\n        }\n    }\n\n    private static string GenerateNewContent(TreeNode node, string newNumber)\n    {\n        var oldDescription = node.Content.Contains(" ") \n                                ? node.Content.Substring(node.Content.IndexOf(' ') + 1) \n                                : "";\n        return $"{newNumber} {oldDescription}";\n    }\n\n    private static TreeNode BuildTree()\n    {\n        // Building the initial tree structure\n        var root = new TreeNode();\n        root.Children.Add(new TreeNode { Content = "1 Welcome" });\n        \n        var whatsNewNode = new TreeNode { Content = "2 Whats New" };\n        whatsNewNode.Children.AddRange(new List<TreeNode>\n        {\n            new TreeNode { Content = "2.1 Gifts" },\n            new TreeNode { Content = "2.2 Ideas" },\n            new TreeNode { Content = "2.3 Others" },\n                new TreeNode { Content = "2.3.1 Novelty" },\n                new TreeNode { Content = "2.3.2 Boats" },\n            new TreeNode { Content = "2.4 Vehicals" },\n            new TreeNode { Content = "2.5 Fruits" }\n        });\n        \n        root.Children.Add(whatsNewNode);\n        \n        return root;\n    }\n\n    private static TreeNode FindNode(List<TreeNode> nodes, string targetContent)\n    {\n        foreach (var node in nodes)\n        {\n            if (node.Content == targetContent) \n                return node;\n\n            var found = FindNode(node.Children, targetContent);\n            if (found != null) \n                return found;\n        }\n        \n        return null;\n    }\n\n    private static void PrintTree(TreeNode node, string prefix = "")\n    {\n        Console.WriteLine($"{prefix}{node}");\n        foreach (var child in node.Children)\n        {\n            PrintTree(child, prefix + "  ");\n        }\n    }\n}