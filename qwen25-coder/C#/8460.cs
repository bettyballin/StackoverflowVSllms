using System;\nusing System.IO;\nusing System.Reflection;\nusing Microsoft.Win32.SafeHandles;\nusing System.Runtime.InteropServices;\n\nclass Program\n{\n    [DllImport("version.dll", CharSet = CharSet.Auto, SetLastError = true)]\n    private static extern IntPtr GetFileVersionInfo(string fileName, int handle, int size, out int result);\n\n    [DllImport("version.dll", CharSet = CharSet.Unicode)]\n    private static extern bool VerQueryValue(IntPtr block, string subBlock, out IntPtr lpBuffer, out uint puLen);\n\n    [StructLayout(LayoutKind.Sequential)]\n    struct VS_FIXEDFILEINFO\n    {\n        public uint dwSignature;\n        public uint dwStrucVersion;\n        public uint dwFileVersionMS;\n        public uint dwFileVersionLS;\n        public uint dwProductVersionMS;\n        public uint dwProductVersionLS;\n        public ushort dwFileFlagsMask;\n        public ushort dwFileFlags;\n        public ushort dwFileOS;\n        public ushort dwFileType;\n        public ushort dwFileSubtype;\n        public ushort dwFileDateMS;\n        public ushort dwFileDateLS;\n    }\n\n    static void Main(string[] args)\n    {\n        string dllPath = @"C:\path\to\your\dll.dll";\n\n        int dummyHandle;\n        int infoSize = GetFileVersionInfo(dllPath, 0, 0, out dummyHandle);\n\n        if (infoSize == 0) throw new InvalidOperationException("Failed to get version info size.");\n\n        IntPtr versionInfo = Marshal.AllocHGlobal(infoSize);\n        try\n        {\n            bool res = GetFileVersionInfo(dllPath, 0, infoSize, out dummyHandle);\n            if (!res)\n                throw new InvalidOperationException("Failed to get version info.");\n\n            IntPtr lpBuffer;\n            uint puLen;\n\n            res = VerQueryValue(versionInfo, @"\StringFileInfo\040904B0\FileVersion", out lpBuffer, out puLen);\n            if (res && (uint)Marshal.SizeOf(typeof(IntPtr)) == 4)\n            {\n                string fileVersion = Marshal.PtrToStringUni(lpBuffer, (int)(puLen / 2));\n                Console.WriteLine("File Version: " + fileVersion);\n            }\n\n            res = VerQueryValue(versionInfo, @"\VarFileInfo\Translation", out lpBuffer, out puLen);\n            if (res)\n            {\n                IntPtr langPoint = IntPtr.Add(lpBuffer, Marshal.SizeOf(typeof(uint)) * 4); // Assume we're interested in the first language\n                string languageId = string.Format("{0:X8}", Marshal.ReadInt32(langPoint));\n                Console.WriteLine("Language ID: " + languageId);\n            }\n        }\n        finally\n        {\n            if (versionInfo != IntPtr.Zero) Marshal.FreeHGlobal(versionInfo);\n        }\n    }\n}