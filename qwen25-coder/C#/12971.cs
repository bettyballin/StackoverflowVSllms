using System.Collections.ObjectModel;\nusing System.ComponentModel;\nusing System.Windows.Data;\n\npublic class MyViewModel : INotifyPropertyChanged\n{\n    private object _selectedTreeViewItem;\n\n    public ObservableCollection<MyDataClass> Items { get; }\n    public ICollectionView ItemsView { get; }\n\n    public object SelectedTreeViewItem\n    {\n        get => _selectedTreeViewItem;\n        set\n        {\n            if (_selectedTreeViewItem != value)\n            {\n                _selectedTreeViewItem = value;\n                OnPropertyChanged(nameof(SelectedTreeViewItem));\n                ItemsView.MoveCurrentTo(value);\n            }\n        }\n    }\n\n    public MyViewModel()\n    {\n        Items = new ObservableCollection<MyDataClass>();\n        for (int i = 0; i < 10; i++)\n        {\n            Items.Add(new MyDataClass { Name = $"item {i}" });\n        }\n        ItemsView = CollectionViewSource.GetDefaultView(Items);\n    }\n\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    protected virtual void OnPropertyChanged(string propertyName)\n    {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n    }\n}\n\npublic class MyDataClass : INotifyPropertyChanged\n{\n    private string _name;\n\n    public string Name\n    {\n        get => _name;\n        set\n        {\n            if (_name != value)\n            {\n                _name = value;\n                OnPropertyChanged(nameof(Name));\n            }\n        }\n    }\n\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    protected virtual void OnPropertyChanged(string propertyName)\n    {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n    }\n}