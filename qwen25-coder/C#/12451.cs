using System;\nusing NHibernate;\nusing NHibernate.SqlTypes;\nusing NHibernate.UserTypes;\nusing System.Data;\n\npublic class YesNoBooleanType : IUserType\n{\n    public new bool Equals(object x, object y)\n    {\n        if (x == null && y == null) return true;\n        if (x == null || y == null) return false;\n        return x.Equals(y);\n    }\n\n    public int GetHashCode(object x)\n    {\n        return x.GetHashCode();\n    }\n\n    public object NullSafeGet(IDataReader rs, string[] names, object owner)\n    {\n        var obj = NHibernateUtil.String.NullSafeGet(rs, names[0]);\n        if (obj == null) return null;\n        return ((string)obj).Equals("Y");\n    }\n\n    public void NullSafeSet(IDbCommand cmd, object value, int index)\n    {\n        var parameter = (IDataParameter)cmd.Parameters[index];\n        if (value == null)\n            parameter.Value = DBNull.Value;\n        else\n            parameter.Value = (bool)value ? "Y" : "N";\n    }\n\n    public object DeepCopy(object value)\n    {\n        return value;\n    }\n\n    public object Replace(object original, object target, object owner)\n    {\n        return original;\n    }\n\n    public object Assemble(object cached, object owner)\n    {\n        return cached;\n    }\n\n    public object Disassemble(object value)\n    {\n        return value;\n    }\n\n    public SqlType[] SqlTypes\n    {\n        get { return new SqlType[] { NHibernateUtil.String.SqlType }; }\n    }\n\n    public Type ReturnedType\n    {\n        get { return typeof(bool); }\n    }\n\n    public bool IsMutable\n    {\n        get { return false; }\n    }\n}