using System;\nusing System.IO;\n\nclass BitFileWriter : IDisposable {\n    private FileStream fs;\n    private byte currentByte = 0;\n    private int bitPosition = 7; // We start from the highest bit.\n\n    public BitFileWriter(string path) {\n        fs = new FileStream(path, FileMode.Create);\n    }\n\n    public void WriteBit(bool value) {\n        if (value)\n            currentByte |= (byte)(1 << bitPosition);\n\n        bitPosition--;\n\n        if (bitPosition < 0) { // We've filled the byte\n            fs.WriteByte(currentByte);\n            currentByte = 0;\n            bitPosition = 7;\n        }\n    }\n\n    public void Flush() {\n        // Write remaining bits as a full byte (even if not all are used)\n        if (bitPosition != 7) {\n            fs.WriteByte(currentByte);\n        }\n    }\n\n    protected virtual void Dispose(bool disposing) {\n        if (disposing && fs != null) {\n            try {\n                Flush();\n            } finally {\n                fs.Dispose();\n                fs = null;\n            }\n        }\n    }\n\n    public void Dispose() => Dispose(true);\n\n    ~BitFileWriter() => Dispose(false);\n}\n\nclass Program {\n    static void Main(string[] args) {\n        using (var writer = new BitFileWriter("bits.bin")) {\n            writer.WriteBit(true); // 1\n            writer.WriteBit(false); // 0\n            writer.WriteBit(true); // 1\n            // Add your bits here...\n            writer.WriteBit(true); // Example to make it a whole byte: 101...000 (56 in decimal)\n        }\n    }\n}