using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class MyObject\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public Nullable<int> ParentId { get; set; }\n\n    public override string ToString()\n    {\n        return $"id: {Id}, name: {Name}, parent_id: {(ParentId.HasValue ? ParentId.ToString() : "NULL")}";\n    }\n}\n\npublic class Program\n{\n    static void Main(string[] args)\n    {\n        List<MyObject> myObjects = new List<MyObject>\n        {\n            new MyObject { Id = 1, Name = "TOP CHILD", ParentId = null },\n            new MyObject { Id = 2, Name = "Child C", ParentId = 3 },\n            new MyObject { Id = 3, Name = "Child B", ParentId = 4 },\n            new MyObject { Id = 4, Name = "Child A", ParentId = 1 }\n        };\n\n        var sortedList = TopologicalSort(myObjects);\n        \n        foreach (var obj in sortedList)\n        {\n            Console.WriteLine(obj);\n        }\n    }\n\n    static List<MyObject> TopologicalSort(List<MyObject> items)\n    {\n        var itemIdMapping = items.ToDictionary(item => item.Id);\n\n        // Create graph\n        Dictionary<int, List<int>> adjacencyList = new Dictionary<int, List<int>>();\n        foreach (var item in items)\n        {\n            if (!adjacencyList.ContainsKey(item.Id))\n            {\n                adjacencyList[item.Id] = new List<int>();\n            }\n            if (item.ParentId.HasValue && !adjacencyList.ContainsKey(item.ParentId.Value))\n            {\n                adjacencyList[item.ParentId.Value] = new List<int>();\n            }\n        }\n\n        foreach (var item in items)\n        {\n            if (itemIdMapping.TryGetValue(item.ParentId ?? 0, out _)) // Ensure parent exists\n            {\n                adjacencyList[item.ParentId.Value].Add(item.Id);\n            }\n        }\n\n        Stack<MyObject> sortedStack = new Stack<MyObject>();\n        HashSet<int> visitedNodes = new HashSet<int>();\n\n        foreach (var item in items)\n        {\n            if (!visitedNodes.Contains(item.Id))\n            {\n                TopologicalVisit(adjacencyList, itemIdMapping, item.Id, visitedNodes, sortedStack);\n            }\n        }\n\n        return sortedStack.ToList();\n    }\n\n    static void TopologicalVisit(Dictionary<int, List<int>> adjacencyList,\n                                 Dictionary<int, MyObject> itemIdMapping,\n                                 int currentNodeId,\n                                 HashSet<int> visitedNodes,\n                                 Stack<MyObject> sortedStack)\n    {\n        visitedNodes.Add(currentNodeId);\n        \n        var children = adjacencyList[currentNodeId];\n        foreach (int childNode in children)\n        {\n            if (!visitedNodes.Contains(childNode))\n            {\n                TopologicalVisit(adjacencyList, itemIdMapping, childNode, visitedNodes, sortedStack);\n            }\n        }\n\n        sortedStack.Push(itemIdMapping[currentNodeId]);\n    }\n}