protected void Page_Load(object sender, EventArgs e)\n{\n    if (!IsPostBack)\n    {\n        // Example of reading from web.config\n        string requiredFields = ConfigurationManager.AppSettings["ControlsToValidateRequiredFields"];\n\n        if (string.IsNullOrEmpty(requiredFields)) return;\n\n        string[] fields = requiredFields.Split(',');\n\n        foreach (var field in fields)\n        {\n            var control = FindControlRecursive(Page, field.Trim());\n            if (control != null)\n            {\n                // Create a new RequiredFieldValidator\n                RequiredFieldValidator validator = new RequiredFieldValidator();\n                validator.ControlToValidate = control.ID;\n                validator.ErrorMessage = $"{control.ID} is required.";\n                validator.CssClass = "error"; // Optional: for styling\n                validator.EnableClientScript = true;\n\n                // Add the ValidatorCalloutExtender if you're using that\n                var calloutExtender = new AjaxControlToolkit.ValidatorCalloutExtender();\n                calloutExtender.TargetValidatorID = validator.ID;\n                calloutExtender.HighlightCssClass = "validatorHighlight";\n\n                control.Parent.Controls.Add(validator);\n                control.Parent.Controls.Add(calloutExtender);\n            }\n        }\n    }\n}\n\n// Helper method to find controls recursively\nprivate static Control FindControlRecursive(Control root, string id)\n{\n    if (root.ID == id) return root;\n\n    foreach (Control c in root.Controls)\n    {\n        Control t = FindControlRecursive(c, id);\n        if (t != null) return t;\n    }\n\n    return null;\n}