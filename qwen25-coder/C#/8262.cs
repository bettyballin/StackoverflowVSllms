using System;\nusing System.Collections.Generic;\n\nclass FactorGenerator\n{\n    public static IEnumerable<int> GetFactors(Dictionary<int, int> primeFactors)\n    {\n        var factors = new List<int>();\n        GenerateFactors(1, 0, primeFactors.Keys.ToArray(), primeFactors, factors);\n        return factors;\n    }\n\n    private static void GenerateFactors(int currentFactor, int index, int[] primes, Dictionary<int, int> powers, List<int> factors)\n    {\n        if (index == primes.Length)\n        {\n            factors.Add(currentFactor);\n            return;\n        }\n\n        var prime = primes[index];\n        for (int i = 0; i <= powers[prime]; i++)\n        {\n            GenerateFactors(currentFactor * (int)Math.Pow(prime, i), index + 1, primes, powers, factors);\n        }\n    }\n\n    static void Main()\n    {\n        var primeFactors = new Dictionary<int, int>\n        {\n            { 2, 3 },\n            { 3, 1 }\n        };\n\n        foreach (var factor in GetFactors(primeFactors))\n        {\n            Console.WriteLine(factor);\n        }\n    }\n}