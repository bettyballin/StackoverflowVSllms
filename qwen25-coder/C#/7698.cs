using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\npublic class ColorForm : Form\n{\n    private TrackBar trackBarHue;\n    private TrackBar trackBarSaturation;\n\n    public ColorForm()\n    {\n        // Initialize Hue TrackBar\n        trackBarHue = new TrackBar();\n        trackBarHue.Minimum = 1;\n        trackBarHue.Maximum = 360;\n        trackBarHue.TickFrequency = 5;\n        trackBarHue.ValueChanged += OnTrackBarChange;\n        trackBarHue.Location = new Point(20, 20);\n        trackBarHue.Size = new Size(300, 40);\n\n        // Initialize Saturation TrackBar\n        trackBarSaturation = new TrackBar();\n        trackBarSaturation.Minimum = 1;\n        trackBarSaturation.Maximum = 50; // Adjusting saturation to a more practical range\n        trackBarSaturation.TickFrequency = 3;\n        trackBarSaturation.ValueChanged += OnTrackBarChange;\n        trackBarSaturation.Location = new Point(20, 70);\n        trackBarSaturation.Size = new Size(300, 40);\n\n        // Add controls to form\n        Controls.Add(trackBarHue);\n        Controls.Add(trackBarSaturation);\n\n        // Initial background color based on default values of the sliders\n        BackColor = HslToRgb(trackBarHue.Value / 360.0, trackBarSaturation.Value / 50.0, 0.7); // Lightness as a constant for demonstration\n\n    }\n\n    private void OnTrackBarChange(object sender, EventArgs e)\n    {\n        double hue = trackBarHue.Value / 360.0;\n        double saturation = trackBarSaturation.Value / 50.0;\n\n        BackColor = HslToRgb(hue, saturation, 0.7); // Lightness as a constant for demonstration\n    }\n\n    private Color HslToRgb(double hue, double saturation, double lightness)\n    {\n        if (saturation == 0)\n            return Color.FromArgb((int)(lightness * 255), (int)(lightness * 255), (int)(lightness * 255));\n\n        int i = (int)Math.Floor(hue * 6);\n        double f = hue * 6 - i;\n        double p = lightness * (1 - saturation);\n        double q = lightness * (1 - f * saturation);\n        double t = lightness * (1 - (1 - f) * saturation);\n\n        switch (i % 6)\n        {\n            case 0: return Color.FromArgb((int)(255 * lightness), (int)(255 * t), (int)(255 * p));\n            case 1: return Color.FromArgb((int)(255 * q), (int)(255 * lightness), (int)(255 * p));\n            case 2: return Color.FromArgb((int)(255 * p), (int)(255 * lightness), (int)(255 * t));\n            case 3: return Color.FromArgb((int)(255 * p), (int)(255 * q), (int)(255 * lightness));\n            case 4: return Color.FromArgb((int)(255 * t), (int)(255 * p), (int)(255 * lightness));\n            default: return Color.FromArgb((int)(255 * lightness), (int)(255 * p), (int)(255 * q));\n        }\n    }\n\n    [STAThread]\n    static void Main()\n    {\n        Application.EnableVisualStyles();\n        Application.SetCompatibleTextRenderingDefault(false);\n        Application.Run(new ColorForm());\n    }\n}