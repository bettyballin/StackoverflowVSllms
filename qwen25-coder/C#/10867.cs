using System;\nusing System.Collections.Generic;\n\nclass TextOwnershipCalculator\n{\n    public static Dictionary<int, int> CalculateUserContributions(List<Revision> revisions)\n    {\n        var userScores = new Dictionary<int, int>();\n        if (revisions.Count == 0) return userScores;\n\n        // Primary authorship bonus for the first revision author\n        userScores[revisions[0].UserId] = revisions[0].Text.Length * 2;\n\n        for (int i = 1; i < revisions.Count; i++)\n        {\n            var previousText = revisions[i - 1].Text;\n            var currentText = revisions[i].Text;\n\n            // Simple character-based diff logic for demonstration\n            int additions = 0, deletions = 0;\n            foreach (var c in Diff(previousText, currentText))\n            {\n                if (c == '-') deletions++;\n                else if (c == '+') additions++;\n            }\n\n            if (!userScores.ContainsKey(revisions[i].UserId))\n            {\n                userScores[revisions[i].UserId] = 0;\n            }\n            userScores[revisions[i].UserId] += additions + deletions;\n        }\n\n        return userScores;\n    }\n\n    public static string Diff(string oldString, string newString)\n    {\n        // A very simple diff implementation that only checks for added/removed characters\n        var result = "";\n\n        int maxLen = Math.Max(oldString.Length, newString.Length);\n        for (int i = 0; i < maxLen; i++)\n        {\n            if (i < oldString.Length && i >= newString.Length)\n            {\n                result += '-';\n            }\n            else if (i < newString.Length && i >= oldString.Length || oldString[i] != newString[i])\n            {\n                result += '+';\n            }\n        }\n\n        return result;\n    }\n\n    public static void Main()\n    {\n        var revisions = new List<Revision>\n        {\n            new Revision { UserId = 12, Text = "The quick brown fox jumps over the lazy dog." },\n            new Revision { UserId = 27, Text = "The quick brown fox jumps, sometimes." },\n            new Revision { UserId = 30, Text = "I always see the speedy brown fox jumping over the lazy dog." }\n        };\n\n        var contributions = CalculateUserContributions(revisions);\n\n        double totalScore = contributions.Values.Sum();\n        foreach (var kvp in contributions)\n        {\n            Console.WriteLine($"User {kvp.Key}: {Math.Round(kvp.Value / totalScore * 100, 2)}%");\n        }\n    }\n\n    public class Revision\n    {\n        public int UserId { get; set; }\n        public string Text { get; set; }\n    }\n}