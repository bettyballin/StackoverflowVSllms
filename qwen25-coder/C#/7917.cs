using System;\nusing System.Linq;\n\npublic class GuidToShortIdConverter\n{\n    private const string Base62Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";\n\n    public static string EncodeGuid(Guid guid)\n    {\n        var bytes = guid.ToByteArray();\n        return ConvertBytesToBase62(bytes, 8); // Adjust length as necessary (up to 13 for full GUID encoding in Base-62)\n    }\n\n    private static string ConvertBytesToBase62(byte[] bytes, int outputLength)\n    {\n        long num = BitConverter.ToInt64(bytes, 0);\n        if (num < 0) num += long.MaxValue; // Handle negative numbers\n\n        var idBuilder = new char[outputLength];\n\n        for (var i = idBuilder.Length - 1; i >= 0; i--)\n        {\n            idBuilder[i] = Base62Chars[(int)(num % Base62Chars.Length)];\n            num /= Base62Chars.Length;\n        }\n\n        return new string(idBuilder);\n    }\n}\n\n// Usage\nGuid guid = Guid.NewGuid();\nstring shortId = GuidToShortIdConverter.EncodeGuid(guid);\nConsole.WriteLine(shortId); // Output: 8-character alphanumeric ID