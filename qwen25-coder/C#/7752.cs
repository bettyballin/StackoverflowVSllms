using System;\nusing System.Net;\nusing System.Text;\nusing System.Threading.Tasks;\n\npublic class HttpService\n{\n    private readonly HttpListener _listener = new HttpListener();\n\n    public void Start(int port)\n    {\n        _listener.Prefixes.Add($"http://localhost:{port}/");\n        _listener.Start();\n        \n        // Start accepting requests\n        Task.Run(() => AcceptRequestsAsync());\n    }\n\n    public async Task AcceptRequestsAsync()\n    {\n        try\n        {\n            while (_listener.IsListening)\n            {\n                HttpListenerContext context = await _listener.GetContextAsync(); // Wait for a client request\n                \n                // Handle the request asynchronously\n                _ = Task.Run(() => ProcessRequest(context));\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($"Error: {ex.Message}");\n        }\n    }\n\n    private async Task ProcessRequest(HttpListenerContext context)\n    {\n        HttpListenerRequest request = context.Request;\n        \n        // Your processing logic here\n        string responseString = "Hello, Client!";\n        \n        byte[] buffer = Encoding.UTF8.GetBytes(responseString);\n        HttpListenerResponse response = context.Response;\n\n        try\n        {\n            response.ContentLength64 = buffer.Length; \n            System.IO.Stream output = response.OutputStream;\n            await output.WriteAsync(buffer, 0, buffer.Length); // Send response to client\n            \n            output.Close();\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($"Error processing request: {ex.Message}");\n        }\n    }\n\n    public void Stop()\n    {\n        _listener.Stop();\n        _listener.Close();\n    }\n}