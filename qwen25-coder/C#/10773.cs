using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Reflection;\n\npublic static class ModuleLoader {\n    public static List<IModule> LoadModules(string path) {\n        var modules = new List<IModule>();\n        \n        foreach (string dllPath in Directory.GetFiles(path, "*.dll")) {\n            try {\n                Assembly assembly = Assembly.LoadFrom(dllPath);\n                foreach (Type type in assembly.GetTypes()) {\n                    if (typeof(IModule).IsAssignableFrom(type) && !type.IsInterface && !type.IsAbstract) {\n                        IModule moduleInstance = Activator.CreateInstance(type) as IModule;\n                        modules.Add(moduleInstance);\n                    }\n                }\n            } catch (Exception ex) {\n                Console.WriteLine($"Error loading {dllPath}: {ex.Message}");\n            }\n        }\n        \n        return modules;\n    }\n}