using System;\nusing System.IO;\n\npublic partial class UploadChunk : System.Web.UI.Page\n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        string uploadDir = Server.MapPath("~/Uploads/");\n        if (!Directory.Exists(uploadDir))\n            Directory.CreateDirectory(uploadDir);\n\n        HttpPostedFile file = Request.Files["file"];\n        string fileName = Request.QueryString["fileName"] ?? Path.GetFileName(file.FileName);\n        int chunkIndex = Convert.ToInt32(Request.QueryString["chunk"]);\n        int totalChunks = Convert.ToInt32(Request.QueryString["totalChunks"]);\n\n        using (FileStream fs = new FileStream(Path.Combine(uploadDir, $"{fileName}_part_{chunkIndex}"), FileMode.Create))\n        {\n            file.InputStream.CopyTo(fs);\n        }\n\n        // Check if all chunks have been uploaded\n        if (IsUploadComplete(fileName, uploadDir, totalChunks))\n        {\n            MergeFiles(uploadDir, fileName, totalChunks);\n        }\n    }\n\n    private static bool IsUploadComplete(string fileName, string uploadDir, int totalChunks)\n    {\n        for (int i = 0; i < totalChunks; i++)\n        {\n            if (!File.Exists(Path.Combine(uploadDir, $"{fileName}_part_{i}")))\n                return false;\n        }\n        return true;\n    }\n\n    private static void MergeFiles(string uploadDir, string fileName, int totalChunks)\n    {\n        using (FileStream stream = new FileStream(Path.Combine(uploadDir, fileName), FileMode.Create, FileAccess.Write))\n        {\n            for (int i = 0; i < totalChunks; i++)\n            {\n                using (FileStream partStream = File.OpenRead(Path.Combine(uploadDir, $"{fileName}_part_{i}")))\n                {\n                    partStream.CopyTo(stream);\n                }\n            }\n        }\n\n        // Cleanup: Delete temporary chunk files\n        for (int i = 0; i < totalChunks; i++)\n        {\n            File.Delete(Path.Combine(uploadDir, $"{fileName}_part_{i}"));\n        }\n    }\n}