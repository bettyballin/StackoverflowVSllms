using System;\nusing System.Diagnostics;\nusing System.Threading;\n\nclass Program\n{\n    private static PerformanceCounter cpuCounter = new PerformanceCounter("Process", "% Processor Time", Process.GetCurrentProcess().ProcessName);\n\n    static void Main()\n    {\n        Thread loggingThread = new Thread(LogStatistics);\n        loggingThread.Start();\n\n        // Simulate work\n        while (true)\n        {\n            DoWork();\n        }\n    }\n\n    private static void LogStatistics()\n    {\n        while (true)\n        {\n            float cpuUsage = cpuCounter.NextValue();\n            \n            // Log the CPU usage using your logging mechanism, e.g., SmartInspect\n            Console.WriteLine($"CPU Usage: {cpuUsage}%");\n\n            // Check if CPU usage is above a threshold and log a warning\n            const float maxCpuUsage = 80f;\n            if (cpuUsage > maxCpuUsage)\n            {\n                Console.WriteLine("Warning: High CPU Usage!");\n            }\n\n            Thread.Sleep(1000); // Adjust the interval as needed to balance between logging detail and performance impact.\n        }\n    }\n\n    private static void DoWork()\n    {\n        // Simulate some work\n        Thread.Sleep(new Random().Next(5, 20));\n    }\n}