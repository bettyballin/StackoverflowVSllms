using System;\nusing System.Net.Sockets;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class SecureKeyGenerator\n{\n    private static DateTime GetNetworkTime()\n    {\n        const string ntpServer = "time.windows.com";\n        var ntpData = new byte[48];\n        // Setting the Leap Indicator, Version Number and Mode values\n        ntpData[0] = 0x1B;\n\n        var addresses = Dns.GetHostEntry(ntpServer).AddressList;\n        IPAddress address = addresses[0];\n\n        using (var socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp))\n        {\n            socket.Connect(address, 123);\n            socket.ReceiveTimeout = 3000;\n\n            socket.Send(ntpData);\n            socket.Receive(ntpData);\n            socket.Close();\n        }\n\n        const byte serverReplyTime = 40;\n        ulong intPart = BitConverter.ToUInt32(ntpData, serverReplyTime);\n\n        // offset to convert from big-endian to little-endian\n        intPart = SwapEndianness(intPart);\n\n        var milliseconds = (intPart - UnixEpoch) / TimeSpan.TicksPerSecond;\n        return new DateTime(1900, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddTicks(milliseconds * TimeSpan.TicksPerMinute);\n    }\n\n    private static uint SwapEndianness(ulong x)\n    {\n        return (uint)(((x & 0x000000ff) << 24) +\n                       ((x & 0x0000ff00) << 8) +\n                       ((x & 0x00ff0000) >> 8) +\n                       ((x & 0xff000000) >> 24));\n    }\n\n    private const ulong UnixEpoch = 2208988800UL;\n\n    private static byte[] GenerateSalt()\n    {\n        using (var rngProvider = new RNGCryptoServiceProvider())\n        {\n            var salt = new byte[16];\n            rngProvider.GetBytes(salt);\n            return salt;\n        }\n    }\n\n    public static Aes GetAes(string password, out byte[] salt)\n    {\n        DateTime synchronizedTime = GetNetworkTime();\n        string result = Convert.ToInt32(synchronizedTime.TotalHours).ToString();\n        result += password;\n        result += Convert.ToInt32(synchronizedTime.TotalDays).ToString();\n        \n        var hash = Convert.ToBase64String(SHA256.Create().ComputeHash(Encoding.ASCII.GetBytes(result)));\n\n        salt = GenerateSalt();\n\n        using (var rdb = new Rfc2898DeriveBytes(hash, salt))\n        {\n            rdb.IterationCount = 1000;\n\n            var aes = Aes.Create();\n            aes.KeySize = 256;\n            aes.BlockSize = 128;\n            aes.Mode = CipherMode.CBC;\n            aes.Padding = PaddingMode.PKCS7;\n            aes.Key = rdb.GetBytes(aes.KeySize / 8);\n            aes.IV = rdb.GetBytes(aes.BlockSize / 8);\n\n            return aes;\n        }\n    }\n}