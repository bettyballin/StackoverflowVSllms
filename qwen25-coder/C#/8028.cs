using System;\nusing System.Collections.Generic;\nusing System.Web;\nusing System.Web.UI.WebControls;\n\npublic class DynamicArticleSiteMapProvider : StaticSiteMapProvider\n{\n    protected override void BuildSiteMap()\n    {\n        base.Clear();\n\n        if (base.IsRootNodeNeeded)\n        {\n            SiteMapNode rootNode = new SiteMapNode(this, "Home", "~/Default.aspx", "Home");\n            base.AddNode(rootNode);\n            this.CurrentNode = rootNode;\n            \n            // Fetch articles from database or storage\n            List<Article> articles = GetArticlesFromDataSource();\n\n            foreach (Article article in articles)\n            {\n                string url = $"~/articles/{article.Id}/{UrlEncode(article.Title)}";\n                SiteMapNode node = new SiteMapNode(this, \n                    article.Id.ToString(), url, article.Title);\n                rootNode.ChildNodes.Add(node);\n                \n                // Optionally mark the current node\n                if (HttpContext.Current.Request.Url.PathAndQuery.StartsWith(url))\n                {\n                    this.CurrentNode = node;\n                }\n            }\n        }\n    }\n\n    private List<Article> GetArticlesFromDataSource()\n    {\n        // Implement logic to retrieve articles from database or any data source\n        // For demonstration purposes, returning a dummy list\n        return new List<Article>\n        {\n            new Article { Id = 1, Title = "article-title" },\n            new Article { Id = 2, Title = "another-article-title" }\n        };\n    }\n\n    private string UrlEncode(string url)\n    {\n        return HttpUtility.UrlPathEncode(url);\n    }\n}\n\npublic class Article\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n}