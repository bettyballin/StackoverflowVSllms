using System;\nusing System.Runtime.InteropServices;\n\npublic class ProxyConfigurator\n{\n    // Importing the necessary function from wininet.dll\n    [DllImport("wininet.dll", SetLastError = true)]\n    private static extern bool InternetSetOption(IntPtr hInternet, int dwOption, IntPtr lpBuffer, int dwBufferLength);\n\n    public const int INTERNET_OPTION_SETTINGS_CHANGED = 39;\n    public const int INTERNET_OPTION_REFRESH = 37;\n    \n    // Structure to specify the internet settings\n    [StructLayout(LayoutKind.Sequential)]\n    private struct InternetPerConnOptionListW\n    {\n        [MarshalAs(UnmanagedType.LPWStr)] public string pszConnection;\n        public IntPtr pOptions;\n        public uint dwOptionCount;\n        public uint dwOptionError;\n    }\n\n    // Enum specifying the type of option to configure.\n    [StructLayout(LayoutKind.Sequential)]\n    private struct InternetPerConnOptionW\n    {\n        public int dwOption;\n\n        public static readonly int INTERNET_PER_CONN_FLAGS = 1;\n        public static readonly int INTERNET_PER_CONN_PROXY_SERVER = 2;\n        public static readonly int INTERNET_PER_CONN_AUTOCONFIG_URL = 4;\n        public static readonly int INTERNET_OPTION_REFRESH = 37;\n\n        [StructLayout(LayoutKind.Explicit)]\n        public struct OptionSettings\n        {\n            [FieldOffset(0)]\n            public uint dwValue;\n            [FieldOffset(0)]\n            public IntPtr pszValue;\n            [FieldOffset(0)]\n            public System.Runtime.InteropServices.ComTypes.FILETIME ftValue;\n        }\n\n        public OptionSettings Value;\n\n        private InternetPerConnOptionW(int option)\n        {\n            this.dwOption = option;\n            this.Value = new OptionSettings();\n        }\n        \n        public static explicit operator InternetPerConnOptionW(InternetOptions options)\n        {\n            var ret = new InternetPerConnOptionW(INTERNET_PER_CONN_FLAGS)\n                { Value = { dwValue = (uint)options } };\n\n            return ret;\n        }\n\n        public static explicit operator InternetPerConnOptionW(string value)\n        {\n            var str = System.Runtime.InteropServices.Marshal.StringToBSTR(value);\n            var ret = new InternetPerConnOptionW(INTERNET_PER_CONN_PROXY_SERVER)\n                { Value = { pszValue = str } };\n\n            return ret;\n        }\n    }\n\n    [Flags]\n    private enum InternetOptions\n    {\n        PROXY_TYPE_DIRECT = 0x1,\n        PROXY_TYPE_PROXY = 0x2,\n        PROXY_TYPE_AUTO_PROXY_URL = 0x4,\n        PROXY_TYPE_AUTO_DETECT = 0x8,\n    }\n\n    public static void SetInternetExplorerProxy(string proxyServer, int flags)\n    {\n        InternetPerConnOptionW[] Options = new InternetPerConnOptionW[]\n            {\n                (InternetPerConnOptionW)flags,\n                (InternetPerConnOptionW)proxyServer\n            };\n\n        var OptionList = new InternetPerConnOptionListW()\n        {\n            dwOptionCount = 2,\n            pszConnection = null, // NULL means LAN settings.\n            pOptions = Marshal.AllocCoTaskMem(Marshal.SizeOf<InternetPerConnOptionW>(Options[0]) * Options.Length),\n            dwOptionError = 0\n        };\n\n        IntPtr OptionIntPtr = OptionList.pOptions;\n            \n        foreach (var opt in Options)\n        {\n            // Copy the options struct to unmanaged memory.\n            Marshal.StructureToPtr(opt, OptionIntPtr, false);\n            \n            // Increment pointer by the size of an InternetPerConnOptionW.\n            OptionIntPtr += Marshal.SizeOf<InternetPerConnOptionW>(opt);\n        }\n\n        IntPtr intptrStruct = Marshal.AllocCoTaskMem(Marshal.SizeOf(OptionList));\n        Marshal.StructureToPtr(OptionList, intptrStruct, true);\n\n        bool bReturn = InternetSetOption(IntPtr.Zero, 9, intptrStruct, Marshal.SizeOf(OptionList));\n\n        // Free the allocated memory.\n        GlobalFree(OptionList.pOptions);\n        GlobalFree(intptrStruct);\n\n        if (!bReturn)\n            throw new Exception("InternetSetOption failed!");\n    }\n\n    [DllImport("kernel32.dll", CharSet = CharSet.Auto)]\n    private static extern IntPtr GlobalFree(IntPtr hMem);\n\n\n    public static void RefreshIESettings()\n    {\n        InternetSetOption(IntPtr.Zero, INTERNET_OPTION_REFRESH, IntPtr.Zero, 0);\n        InternetSetOption(IntPtr.Zero, INTERNET_OPTION_SETTINGS_CHANGED, IntPtr.Zero, 0);\n    }\n\n}\n\n// Usage\npublic static void ConfigureProxyAndOpenBrowser(string proxyAddress)\n{\n    ProxyConfigurator.SetInternetExplorerProxy(proxyAddress, \n        ProxyConfigurator.InternetOptions.PROXY_TYPE_PROXY);\n\n    ProxyConfigurator.RefreshIESettings();\n\n    // Open new browser window here\n    System.Diagnostics.Process.Start("iexplore.exe", "http://www.example.com");\n}