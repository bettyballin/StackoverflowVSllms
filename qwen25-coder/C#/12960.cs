using System;\nusing System.Collections.Generic;\nusing System.IO;\n\npublic class WordReader\n{\n    private TextReader reader;\n    private char[] buffer = new char[1024];\n    private int bufferIndex = 0;\n    private int bufferCount = 0;\n\n    public WordReader(string text)\n    {\n        this.reader = new StringReader(text);\n    }\n\n    public string ReadWord()\n    {\n        List<char> wordBuffer = new List<char>();\n        char c;\n        while (true)\n        {\n            if (bufferIndex >= bufferCount)\n            {\n                bufferCount = reader.Read(buffer, 0, buffer.Length);\n                bufferIndex = 0;\n\n                // If no more characters are read, return the current word or null\n                if (bufferCount == 0)\n                {\n                    return wordBuffer.Count > 0 ? new string(wordBuffer.ToArray()) : null;\n                }\n            }\n\n            c = buffer[bufferIndex++];\n\n            if (char.IsWhiteSpace(c))\n            {\n                // Return the collected word if any characters were added\n                if (wordBuffer.Count > 0)\n                {\n                    return new string(wordBuffer.ToArray());\n                }\n            }\n            else\n            {\n                wordBuffer.Add(c);\n            }\n        }\n    }\n\n    public void Close()\n    {\n        reader.Close();\n    }\n}\n\n// Example usage:\nclass Program\n{\n    static void Main()\n    {\n        string data = "Four score and seven years ago";\n        List<string> words = new List<string>();\n        using (WordReader reader = new WordReader(data))\n        {\n            while (true)\n            {\n                string word = reader.ReadWord();\n                if (string.IsNullOrEmpty(word)) break;\n                // Additional parsing logic goes here\n                words.Add(word);\n            }\n        }\n\n        Console.WriteLine(string.Join(", ", words));\n    }\n}