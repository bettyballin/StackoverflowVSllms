using System;\nusing System.Diagnostics;\n\nclass Program\n{\n    private static Process _process;\n    \n    static void Main()\n    {\n        StartUnmanagedApp();\n        \n        // Keep the main thread alive to listen for process exit.\n        Console.ReadLine();\n    }\n\n    static void StartUnmanagedApp()\n    {\n        try\n        {\n            if (_process != null && !_process.HasExited)\n            {\n                _process.Kill(); // Ensure any previous instance is terminated.\n            }\n            \n            _process = new Process();\n            _process.StartInfo.FileName = "PathToYourCppApp.exe"; // Replace with the actual path to your unmanaged app\n            _process.EnableRaisingEvents = true;\n            _process.Exited += OnProcessExited;\n            _process.Start();\n\n            Console.WriteLine("Unmanaged application started.");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($"Failed to start process: {ex.Message}");\n        }\n    }\n\n    static void OnProcessExited(object sender, EventArgs e)\n    {\n        if (_process.ExitCode != 0) // Assuming zero exit code means successful completion.\n        {\n            Console.WriteLine("Unmanaged application exited unexpectedly. Restarting...");\n            \n            // Optionally add a delay before restarting\n            System.Threading.Thread.Sleep(500); // Wait for half second\n            \n            StartUnmanagedApp();\n        }\n    }\n}