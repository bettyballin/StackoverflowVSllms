using System;\nusing System.Diagnostics;\nusing System.Threading;\n\npublic class CPULimiter\n{\n    private int _targetCpuPercentage = 20; // Target CPU usage percentage\n\n    public void RunWithCPULimit(Action action, CancellationToken cancellationToken)\n    {\n        var stopwatch = new Stopwatch();\n        while (!cancellationToken.IsCancellationRequested)\n        {\n            stopwatch.Restart();\n            action(); // Execute the task\n\n            long elapsedMicroseconds = stopwatch.ElapsedTicks / (Stopwatch.Frequency / 1000000);\n            long workTime = (long)(elapsedMicroseconds * _targetCpuPercentage / 100);\n\n            if (workTime < elapsedMicroseconds)\n                workTime = 0;\n            else\n                workTime -= elapsedMicroseconds;\n\n            // Sleep for the remaining time to limit CPU usage\n            Thread.Sleep(TimeSpan.FromTicks(workTime * Stopwatch.Frequency / 1000000));\n        }\n    }\n\n    public void SetCpuLimit(int percentage)\n    {\n        _targetCpuPercentage = Math.Clamp(percentage, 1, 95); // Limit between 1% and 95%\n    }\n}\n\n// Usage example:\npublic class Program\n{\n    public static void Main()\n    {\n        var cts = new CancellationTokenSource();\n        var limiter = new CPULimiter();\n        \n        limiter.SetCpuLimit(20);\n\n        limiter.RunWithCPULimit(() =>\n        {\n            // Simulate work here\n            for (int i = 0; i < 10000; i++)\n                Math.Sqrt(i);\n            \n        }, cts.Token);\n\n        // To stop the loop, you can call:\n        // cts.Cancel();\n    }\n}