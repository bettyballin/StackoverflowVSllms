using System;\nusing System.Data.Linq;\nusing System.Linq;\nusing System.Linq.Expressions;\n\npublic class UniqueValueAttribute : ValidationAttribute\n{\n    private readonly string _propertyName;\n    private readonly Type _entityType;\n\n    public UniqueValueAttribute(string propertyName, Type entityType)\n    {\n        _propertyName = propertyName;\n        _entityType = entityType;\n    }\n\n    protected override ValidationResult IsValid(object value, ValidationContext validationContext)\n    {\n        using (var context = new SomeDataContext())\n        {\n            var tableProperty = typeof(SomeDataContext).GetProperty(_entityType.Name + "s");\n            if (tableProperty == null)\n                throw new ArgumentException($"No table property found for {_entityType.Name} in the data context.");\n\n            var table = (System.Data.Linq.ITable)tableProperty.GetValue(context);\n            \n            // Create expression: x => x._propertyName == value\n            ParameterExpression param = Expression.Parameter(_entityType, "x");\n            MemberExpression memberExp = Expression.Property(param, _propertyName);\n            Expression body = Expression.Equal(memberExp, Expression.Constant(value));\n            Type lambdaType = typeof(Func<,>).MakeGenericType(_entityType, typeof(bool));\n            var predicate = Expression.Lambda(lambdaType, body, param);\n\n            // Use reflection to call FirstOrDefault on the table\n            var firstOrDefaultMethod = typeof(Enumerable).GetMethods()\n                .First(m => m.Name == "FirstOrDefault" && \n                              m.GetParameters().Length == 2)\n                .MakeGenericMethod(_entityType);\n            \n            object result = firstOrDefaultMethod.Invoke(null, new object[] { table, predicate.Compile() });\n\n            if (result != null)\n            {\n                return new ValidationResult($"The {_propertyName} must be unique.");\n            }\n        }\n\n        return ValidationResult.Success;\n    }\n}