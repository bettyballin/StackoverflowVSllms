// Define your security rule class\npublic class FieldSecurityRule\n{\n    public string Role { get; set; }\n    public string OrderStatus { get; set; }\n    public List<string> FieldsToDisable { get; set; }\n}\n\nprotected void Page_Load(object sender, EventArgs e)\n{\n    if (!IsPostBack)\n    {\n        // Define your security rules\n        List<FieldSecurityRule> securityRules = new List<FieldSecurityRule>\n        {\n            new FieldSecurityRule { Role = "Admin", OrderStatus = "Pending", FieldsToDisable = new List<string>() }, // Admin can see all fields for pending orders\n            new FieldSecurityRule { Role = "User", OrderStatus = "Pending", FieldsToDisable = new List<string> { "Field1", "Field2" } },\n            // Add more rules as necessary...\n        };\n\n        // Determine the current user's role and order status\n        string currentUserRole = GetCurrentUserRole();\n        string currentOrderStatus = GetOrderStatus(); // Implement this method\n\n        // Find the applicable security rule\n        FieldSecurityRule applicableRule = securityRules.Find(\n            r => r.Role == currentUserRole && r.OrderStatus == currentOrderStatus);\n\n        // Apply the rules to the form fields\n        if (applicableRule != null)\n        {\n            foreach (string fieldName in applicableRule.FieldsToDisable)\n            {\n                Control control = FindControl(fieldName);\n                if (control != null && control is WebControl)\n                {\n                    ((WebControl)control).Enabled = false;\n                }\n            }\n        }\n    }\n}\n\n// Placeholder methods to be implemented\nprivate string GetCurrentUserRole()\n{\n    // Implement user role determination logic\n    return "User"; // Example return\n}\n\nprivate string GetOrderStatus()\n{\n    // Implement order status retrieval logic\n    return "Pending"; // Example return\n}