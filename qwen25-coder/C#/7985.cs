public class GridViewModel : INotifyPropertyChanged\n{\n    public ObservableCollection<Cell> Cells { get; set; }\n    public int Columns { get; set; }\n\n    public GridViewModel()\n    {\n        var grid = new Cell[3, 4]; // Sample data\n        for (int x = 0; x < 3; x++)\n        {\n            for (int y = 0; y < 4; y++)\n            {\n                grid[x, y] = new Cell { X = x, Y = y, On = true /* or false as needed */ };\n            }\n        }\n\n        Cells = new ObservableCollection<Cell>(grid.Cast<Cell>());\n        Columns = 4;\n    }\n\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    protected void OnPropertyChanged(string propertyName)\n    {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n    }\n}\n\npublic class Cell : INotifyPropertyChanged\n{\n    private bool _on;\n\n    public int X { get; set; }\n    public int Y { get; set; }\n    public bool On \n    {\n        get => _on;\n        set \n        { \n            _on = value;\n            OnPropertyChanged(nameof(On));\n        }\n    }\n\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    protected void OnPropertyChanged(string propertyName)\n    {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n    }\n}