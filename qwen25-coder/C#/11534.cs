public interface IMyProvider\n{\n    void DoWork();\n}\n\npublic class DefaultProvider : IMyProvider\n{\n    public void DoWork()\n    {\n        // Implementation for stand-alone environment\n    }\n}\n\npublic class WebConfigBasedProvider : IMyProvider\n{\n    public void DoWork()\n    {\n        // Implementation that uses web.config or other web-specific settings\n    }\n}\n\npublic static class ProviderFactory\n{\n    public static IMyProvider GetProvider()\n    {\n        if (IsRunningUnderWebServer())\n        {\n            var providerName = ProvidersHelper.GetDefaultProviderFromConfig();\n            return CreateProvider(providerName);\n        }\n        else\n        {\n            // Return a default or pre-configured provider for stand-alone use\n            return new DefaultProvider();\n        }\n    }\n\n    private static IMyProvider CreateProvider(string name)\n    {\n        // Create the appropriate provider based on the name\n        return new WebConfigBasedProvider(); // Simplified example\n    }\n}