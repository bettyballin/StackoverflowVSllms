[Authorize]\n   public class AccountController : Controller\n   {\n       [HttpPost]\n       [AllowAnonymous]\n       public ActionResult ExternalLogin(string provider, string returnUrl)\n       {\n           // Request a redirect to the external login provider\n           return new ChallengeResult(provider, Url.Action("ExternalLoginCallback", "Account", new { ReturnUrl = returnUrl }));\n       }\n\n       public async Task<ActionResult> ExternalLoginCallback(string returnUrl)\n       {\n           var info = await AuthenticationManager.GetExternalLoginInfoAsync();\n           if (info == null)\n           {\n               ViewBag.ReturnUrl = returnUrl;\n               return View("ExternalLoginFailure");\n           }\n           // Sign in the user with this external login provider if the user already has a login\n           var result = await SignInManager.ExternalSignInAsync(info, isPersistent: false);\n           switch (result)\n           {\n               case SignInStatus.Success:\n                   return RedirectToLocal(returnUrl);\n               default:\n                   // User does not have an account so will need to register first.\n                   ViewBag.ReturnUrl = returnUrl;\n                   ViewBag.LoginProvider = info.Login.LoginProvider;\n                   return View("ExternalLoginConfirmation", new ExternalLoginConfirmationViewModel { Email = info.Email });\n           }\n       }\n\n       private IAuthenticationManager AuthenticationManager => HttpContext.GetOwinContext().Authentication;\n\n       internal class ChallengeResult : HttpUnauthorizedResult\n       {\n           public ChallengeResult(string provider, string redirectUri)\n               : this(provider, redirectUri, null)\n           {\n           }\n\n           public ChallengeResult(string provider, string redirectUri, string userId)\n           {\n               LoginProvider = provider;\n               RedirectUri = redirectUri;\n               UserId = userId;\n           }\n\n           public string LoginProvider { get; set; }\n           public string RedirectUri { get; set; }\n           public string UserId { get; set; }\n\n           public override void ExecuteResult(ControllerContext context)\n           {\n               var properties = new AuthenticationProperties { RedirectUri = RedirectUri };\n               if (UserId != null)\n               {\n                   properties.Dictionary[XsrfKey] = UserId;\n               }\n               context.HttpContext.GetOwinContext().Authentication.Challenge(properties, LoginProvider);\n           }\n       }\n   }