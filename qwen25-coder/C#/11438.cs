using System.ComponentModel;\nusing System.Runtime.CompilerServices;\nusing System.Windows.Input;\n\npublic class CustomerViewModel : INotifyPropertyChanged\n{\n    private Customer _customer = new Customer();\n\n    public Customer Customer\n    {\n        get => _customer;\n        set\n        {\n            if (_customer != value)\n            {\n                _customer = value;\n                OnPropertyChanged();\n            }\n        }\n    }\n\n    public ICommand SubmitCommand { get; }\n\n    public CustomerViewModel()\n    {\n        SubmitCommand = new RelayCommand(Submit);\n    }\n\n    private void Submit(object parameter)\n    {\n        bool isValid = true;\n\n        if (Customer.Error != null) isValid = false;\n        foreach (var property in typeof(Customer).GetProperties())\n        {\n            string error = Customer[property.Name];\n            if (!string.IsNullOrEmpty(error)) isValid = false;\n        }\n\n        if (isValid)\n        {\n            // Proceed with form submission logic\n        }\n        else\n        {\n            // Handle validation error, e.g., show messages\n        }\n    }\n\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)\n    {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n    }\n}