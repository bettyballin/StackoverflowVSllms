using System;\nusing System.Drawing;\nusing System.Drawing.Imaging;\n\npublic static void RotateImage(string inputPath, string outputPath, RotateFlipType rotateFlipType)\n{\n    using (var image = Image.FromFile(inputPath))\n    {\n        // Create a new bitmap of the rotated image size\n        int width = image.Width;\n        int height = image.Height;\n\n        if (rotateFlipType == RotateFlipType.Rotate90FlipNone ||\n            rotateFlipType == RotateFlipType.Rotate270FlipNone)\n        {\n            width = image.Height;\n            height = image.Width;\n        }\n\n        using (var rotatedImage = new Bitmap(width, height))\n        using (var graphics = Graphics.FromImage(rotatedImage))\n        {\n            // Set background color if needed\n            graphics.Clear(Color.White);\n\n            // Draw the original image onto the new bitmap at the correct rotation\n            graphics.DrawImage(image, new Rectangle(0, 0, width, height), new Rectangle(0, 0, image.Width, image.Height), GraphicsUnit.Pixel);\n\n            // Apply rotation and flipping to the image\n            rotatedImage.RotateFlip(rotateFlipType);\n            \n            // Save the result with no (or minimal) compression loss\n            EncoderParameters encoderParams = new EncoderParameters(1);\n            encoderParams.Param[0] = new EncoderParameter(Encoder.Quality, 100L);\n\n            ImageCodecInfo jpegCodec = GetEncoder(ImageFormat.Jpeg);\n            rotatedImage.Save(outputPath, jpegCodec, encoderParams);\n        }\n    }\n}\n\nprivate static ImageCodecInfo GetEncoder(ImageFormat format)\n{\n    foreach (var info in ImageCodecInfo.GetImageEncoders())\n        if (info.FormatID == format.Guid)\n            return info;\n    return null;\n}