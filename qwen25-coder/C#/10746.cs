int batchSize = 100; // Adjust based on your performance tests and system capabilities\nList<Employee> currentBatch = new List<Employee>();\n\nforeach (Employee item in employees)\n{\n    currentBatch.Add(item);\n    if (currentBatch.Count >= batchSize)\n    {\n        InsertBatch(currentBatch, connectionString); // Method to insert batch\n        currentBatch.Clear();\n    }\n}\n\nif (currentBatch.Any())\n{\n    InsertBatch(currentBatch, connectionString);\n}\n\nvoid InsertBatch(List<Employee> batch, string connStr)\n{\n    using (SqlConnection conn = new SqlConnection(connStr))\n    {\n        conn.Open();\n        using (SqlCommand cmd = new SqlCommand())\n        {\n            cmd.Connection = conn;\n            \n            // Construct command with parameters\n            for (int i = 0; i < batchSize; i++)\n            {\n                string prefix = $"@row{i}_";\n                if (i == 0)\n                    cmd.CommandText = "INSERT INTO MyTable (id, name, salary) VALUES ";\n                else\n                    cmd.CommandText += ",";\n                \n                cmd.CommandText += $"({prefix}id, {prefix}name, {prefix}salary)";\n                \n                cmd.Parameters.AddWithValue($"{prefix}id", i < batch.Count ? batch[i].ID : 0);\n                cmd.Parameters.AddWithValue($"{prefix}name", i < batch.Count ? batch[i].Name : "");\n                cmd.Parameters.AddWithValue($"{prefix}salary", i < batch.Count ? batch[i].Salary : 0.0m);\n            }\n            \n            cmd.ExecuteNonQuery();\n        }\n    }\n}