using System;\nusing System.Data.SQLite;\n\npublic class DataHandler {\n    private SQLiteConnection _inMemoryDb;\n    private string _filePath;\n\n    public DataHandler(string filePath) {\n        _filePath = filePath;\n        InitializeInMemoryDatabase();\n        LoadDataFromFileToMemory();\n    }\n\n    private void InitializeInMemoryDatabase() {\n        // Create and open an in-memory SQLite database\n        _inMemoryDb = new SQLiteConnection("Data Source=:memory:");\n        _inMemoryDb.Open();\n\n        // Assume you have a SQL statement to create tables\n        var setupCommand = new SQLiteCommand("CREATE TABLE IF NOT EXISTS MyTable (Id INTEGER PRIMARY KEY, Name TEXT);", _inMemoryDb);\n        setupCommand.ExecuteNonQuery();\n    }\n\n    private void LoadDataFromFileToMemory() {\n        using (var fileDb = new SQLiteConnection($"Data Source={_filePath};Version=3;")) {\n            fileDb.Open();\n\n            // Copy all tables from the file-based database to in-memory\n            var command = new SQLiteCommand("SELECT * FROM MyTable;", fileDb);\n            using (var reader = command.ExecuteReader()) {\n                using (var inMemoryCmd = new SQLiteCommand(_inMemoryDb)) {\n                    inMemoryCmd.CommandType = System.Data.CommandType.TableDirect;\n                    inMemoryCmd.CommandText = "MyTable";\n\n                    var bulkCopy = new SQLiteBulkCopy(_inMemoryDb) { DestinationTableName = "MyTable" };\n                    bulkCopy.WriteToServer(reader);\n                }\n            }\n        }\n    }\n\n    public void SaveDataToFile() {\n        // Copy all data from the in-memory database to file-based\n        using (var fileDb = new SQLiteConnection($"Data Source={_filePath};Version=3;")) {\n            fileDb.Open();\n            fileDb.Execute("DELETE FROM MyTable;");  // Clear existing data before copying\n\n            using (var inMemoryCmd = _inMemoryDb.CreateCommand()) {\n                inMemoryCmd.CommandText = "SELECT * FROM MyTable;";\n                using (var reader = inMemoryCmd.ExecuteReader()) {\n                    var bulkCopy = new SQLiteBulkCopy(fileDb) { DestinationTableName = "MyTable" };\n                    bulkCopy.WriteToServer(reader);\n                }\n            }\n        }\n    }\n\n    public void ExecuteInMemoryCommand(string query, params SQLiteParameter[] parameters) {\n        using (var cmd = _inMemoryDb.CreateCommand()) {\n            cmd.CommandText = query;\n            cmd.Parameters.AddRange(parameters);\n\n            cmd.ExecuteNonQuery();\n        }\n    }\n\n    protected virtual void Dispose(bool disposing) {\n        if (disposing && _inMemoryDb != null) {\n            _inMemoryDb.Close();\n            _inMemoryDb.Dispose();\n            _inMemoryDb = null;\n        }\n    }\n\n    public void Dispose() => Dispose(true);\n}\n\n// Usage example:\npublic class MainForm : Form {\n    private DataHandler _dataHandler;\n\n    public MainForm(string filePath) {\n        _dataHandler = new DataHandler(filePath);\n\n        // Assume you have a button named saveButton\n        saveButton.Click += (sender, args) => { \n            _dataHandler.SaveDataToFile();\n            MessageBox.Show("Data saved successfully!");\n        };\n    }\n\n    protected override void OnFormClosing(FormClosingEventArgs e) {\n        _dataHandler.Dispose();\n        base.OnFormClosing(e);\n    }\n}