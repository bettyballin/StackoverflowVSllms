public class MyObj : IEquatable<MyObj>\n{\n    public string Symbol { get; set; }\n\n    #region IComparable Members\n\n    public int CompareTo(object obj)\n    {\n        if (obj == null || GetType() != obj.GetType())\n            throw new ArgumentException("Object is not a MyObj");\n        \n        MyObj other = (MyObj)obj;\n        return String.Compare(this.Symbol, other.Symbol, StringComparison.OrdinalIgnoreCase);\n    }\n\n    #endregion\n\n    #region IEquatable<MyObj> Members\n\n    public bool Equals(MyObj other)\n    {\n        if (other == null) return false;\n        return this.Symbol.Equals(other.Symbol, StringComparison.OrdinalIgnoreCase);\n    }\n\n    #endregion\n\n    public override bool Equals(object obj)\n    {\n        if (obj == null || GetType() != obj.GetType())\n            return false;\n        \n        return Equals((MyObj)obj);\n    }\n\n    public override int GetHashCode()\n    {\n        // Implement.GetHashCode for MyObj\n        return Symbol?.GetHashCode(StringComparison.OrdinalIgnoreCase) ?? 0;\n    }\n}