// In your SignInManager or AccountController\npublic async Task<SignInStatus> PasswordSignInAsync(string userName, string password, bool isPersistent, bool shouldLockout)\n{\n    var user = await UserManager.FindAsync(userName, password);\n    if (user != null && !await UserManager.IsLockedOutAsync(user.Id))\n    {\n        var currentUserSessionId = Session.SessionID;\n\n        // Retrieve the last session ID associated with this user\n        string lastUserSessionId = await Database.GetUserSessionByIdAsync(user.Id);\n\n        // If there is an active session and it's not the same as the current one, log off the old session.\n        if (!string.IsNullOrEmpty(lastUserSessionId) && currentUserSessionId != lastUserSessionId)\n        {\n            UserManager.SignOut();\n            throw new InvalidOperationException("Another session is already using this account.");\n        }\n\n        // Update user with new session ID\n        await Database.UpdateUserSessionIdAsync(user.Id, currentUserSessionId);\n\n        authenticationManager.SignIn(\n            new AuthenticationProperties { IsPersistent = isPersistent },\n            GetUserClaimsIdentity(user));\n\n        return SignInStatus.Success;\n    }\n    else if (user != null && shouldLockout)\n    {\n        // code to handle lockout\n    }\n\n    return SignInStatus.Failure;\n}