public static class ConfigEncryptor\n{\n    // Use a fixed initialization vector (IV) for simplicity in this example.\n    private static readonly byte[] IV = Encoding.UTF8.GetBytes("a1X9Z8OxHqPe3G6R");\n\n    public static string Encrypt(string plainText, byte[] key)\n    {\n        using (Aes aesAlg = Aes.Create())\n        {\n            aesAlg.Key = key;\n            aesAlg.IV = IV;\n\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n            using (MemoryStream msEncrypt = new MemoryStream())\n            {\n                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                {\n                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))\n                    {\n                        swEncrypt.Write(plainText);\n                    }\n                    return Convert.ToBase64String(msEncrypt.ToArray());\n                }\n            }\n        }\n    }\n\n    public static string Decrypt(string cipherText, byte[] key)\n    {\n        using (Aes aesAlg = Aes.Create())\n        {\n            aesAlg.Key = key;\n            aesAlg.IV = IV;\n\n            ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);\n\n            using (MemoryStream msDecrypt = new MemoryStream(Convert.FromBase64String(cipherText)))\n            {\n                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n                {\n                    using (StreamReader srDecrypt = new StreamReader(csDecrypt))\n                    {\n                        return srDecrypt.ReadToEnd();\n                    }\n                }\n            }\n        }\n    }\n\n    // Example method to securely get key\n    public static byte[] GetSecureKey()\n    {\n        // This could be replaced with a call to get the key from a secure vault or environment variable.\n        return Encoding.UTF8.GetBytes("16bytekey16byte");\n    }\n}