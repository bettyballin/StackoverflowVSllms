using System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Net.Security;\nusing System.IO;\n\nnamespace Node\n{\n    public static class SSLCommunicator\n    {\n        private static TcpClient client = null;\n        private static SslStream stream = null;\n        private static List<byte> networkStreamInput = new List<byte>();\n\n        public static void Connect(string server, int port)\n        {\n            try\n            {\n                client = new TcpClient(server, port);\n                stream = new SslStream(client.GetStream(), false);\n                // Begin the SSL handshake.\n                stream.AuthenticateAsClient(server);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine("Exception: {0}", e.Message);\n                if (stream != null) stream.Close();\n                if (client != null) client.Close();\n            }\n        }\n\n        public static List<byte[]> GetServerInput()\n        {\n            List<byte[]> ret = new List<byte[]>();\n            try\n            {\n                if (stream.CanRead)\n                {\n                    byte[] readBuffer = new byte[1024];\n                    int numberOfBytesRead;\n\n                    while ((numberOfBytesRead = stream.Read(readBuffer, 0, readBuffer.Length)) > 0)\n                    {\n                        byte[] tmp = new byte[numberOfBytesRead];\n                        Array.Copy(readBuffer, tmp, numberOfBytesRead);\n                        ret.Add(tmp);\n                    }\n                }\n            }\n            catch (IOException e)\n            {\n                Console.WriteLine("Exception: {0}", e.Message);\n                stream?.Close();\n                client?.Close();\n            }\n\n            return ret;\n        }\n    }\n}