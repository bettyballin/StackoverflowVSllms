using System;\nusing System.IO;\nusing System.Reflection;\nusing System.Runtime.Loader;\n\npublic class PluginLoadContext : AssemblyLoadContext\n{\n    private readonly string _pluginPath;\n\n    public PluginLoadContext(string pluginPath) \n        => _pluginPath = Path.GetFullPath(pluginPath);\n\n    protected override Assembly Load(AssemblyName assemblyName)\n    {\n        string path = Path.Combine(_pluginPath, $"{assemblyName.Name}.dll");\n\n        if (File.Exists(path))\n        {\n            return LoadFromAssemblyPath(path);\n        }\n\n        return null;\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var pluginPath = @"./Plugins";\n\n        using (var loadContext = new PluginLoadContext(pluginPath))\n        {\n            foreach (var dll in Directory.GetFiles(pluginPath, "*.dll"))\n            {\n                try\n                {\n                    Assembly assembly = loadContext.LoadFromAssemblyPath(dll);\n                    \n                    // Load and use the plugin types as needed...\n                    var type = assembly.GetType("ExampleNamespace.ExampleType");\n                    var instance = Activator.CreateInstance(type);\n\n                    Console.WriteLine($"Successfully loaded '{type.FullName}' from {dll}");\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine($"Failed to load '{dll}': {ex.Message}");\n                }\n            }\n        }\n\n        // At this point, the assemblies loaded within 'loadContext' are unloaded.\n    }\n}