using System;\nusing System.Collections.Generic;\n\nclass Person {\n    public int Id { get; }\n    // other properties...\n\n    public Person(int id) {\n        Id = id;\n    }\n}\n\nclass Compatibility {\n    private List<Person> peopleInvolved;\n    public double Score { get; }\n\n    public Compatibility(IEnumerable<Person> people, double score) {\n        peopleInvolved = new List<Person>(people);\n        Score = score;\n    }\n}\n\nclass Program {\n    static void Main() {\n        var person1 = new Person(1);\n        var person2 = new Person(2);\n        var person3 = new Person(3);\n\n        Dictionary<string, Compatibility> compatibilityMap = new Dictionary<string, Compatibility>();\n\n        Compatibility AddOrGetCompatibility(Person p1, Person p2, Person p3) {\n            int[] ids = { p1.Id, p2.Id, p3.Id };\n            Array.Sort(ids);\n            string key = $"{ids[0]}_{ids[1]}_{ids[2]}";\n\n            if (compatibilityMap.TryGetValue(key, out var compat)) {\n                return compat;\n            }\n\n            // Create new score object here\n            var newCompatibility = new Compatibility(new[] { p1, p2, p3 }, CalculateScore(p1, p2, p3));\n            compatibilityMap.Add(key, newCompatibility);\n            return newCompatibility;\n        }\n\n        double CalculateScore(Person p1, Person p2, Person p3) {\n            // Your scoring logic here\n            return 0.0; // placeholder value\n        }\n    }\n}