using System;\nusing System.Collections.Generic;\nusing System.IO;\n\npublic static class Program\n{\n    public static void Main(string[] args)\n    {\n        foreach (string argString in args)\n        {\n            ExpandWildcards(argString);\n        }\n    }\n\n    private static void ExpandWildcards(string pattern)\n    {\n        // Split the path and pattern\n        string directory = Path.GetDirectoryName(pattern) ?? ".";\n        string wildcard = Path.GetFileName(pattern);\n\n        // Recursively find files matching the pattern\n        foreach (string file in FindFiles(directory, wildcard))\n        {\n            Console.WriteLine(file);\n            // Do something with each matched file\n        }\n    }\n\n    private static IEnumerable<string> FindFiles(string directory, string searchPattern)\n    {\n        try\n        {\n            if ((searchPattern.Contains(@"\") || searchPattern.Contains("/")) && Directory.Exists(searchPattern))\n            {\n                throw new ArgumentException("Search pattern should not contain path separators. Use directory parameter for paths.");\n            }\n\n            foreach (string file in Directory.GetFiles(directory, searchPattern))\n            {\n                yield return file;\n            }\n\n            // Recurse into subdirectories\n            foreach (string subdir in Directory.GetDirectories(directory))\n            {\n                foreach (string file in FindFiles(subdir, searchPattern))\n                {\n                    yield return file;\n                }\n            }\n        }\n        catch (DirectoryNotFoundException)\n        {\n            Console.WriteLine($"Directory not found: {directory}");\n        }\n    }\n}