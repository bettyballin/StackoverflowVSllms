public class BasicAuthenticationAttribute : AuthorizationFilterAttribute\n{\n    private const string Realm = "MyServer";\n\n    public override void OnAuthorization(HttpActionContext actionContext)\n    {\n        var authHeader = actionContext.Request.Headers.Authorization;\n\n        if (authHeader != null && authHeader.Scheme == "Basic")\n        {\n            var credentials = Encoding.UTF8.GetString(Convert.FromBase64String(authHeader.Parameter))\n                .Split(':');\n\n            if (credentials.Length == 2 &&\n                IsValidUser(credentials[0], credentials[1]) &&\n                IsAllowedIP(actionContext.Request.GetOwinContext().Request.RemoteIpAddress))\n            {\n                Thread.CurrentPrincipal =\n                    new GenericPrincipal(new GenericIdentity(credentials[0]), null);\n                return;\n            }\n        }\n\n        actionContext.Response = actionContext.Request.CreateResponse(HttpStatusCode.Unauthorized);\n        actionContext.Response.Headers.Add("WWW-Authenticate", "Basic realm=\"" + Realm + "\"");\n    }\n\n    private bool IsValidUser(string username, string password)\n    {\n        // Implement proper validation logic\n        return (username == "user" && password == "pass");\n    }\n\n    private bool IsAllowedIP(string ipAddress)\n    {\n        // Example: List of allowed IPs\n        var allowedIps = new[] { "192.168.1.1", "10.0.0.1" };\n        return Array.Exists(allowedIps, ip => ip == ipAddress);\n    }\n}