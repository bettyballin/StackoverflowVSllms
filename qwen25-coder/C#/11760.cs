using System.Web.Security;\nusing System.Linq;\n\npublic bool ValidateSecretAnswer(string username, string providedAnswer)\n{\n    // Get user info from membership provider or database\n    var user = Membership.GetUser(username);\n    if (user == null) return false; // User not found\n\n    // Assuming secretQuestionAndAnswerTable is a method where you get the stored hash\n    var storedHashedAnswer = SecretQuestionAndAnswerTable.GetStoredHashedAnswer(username);\n\n    // Hash the provided answer in the same way as your system (use the same salt if used)\n    // This example assumes a simple SHA256 hashing for demonstration purposes\n    using (var sha256 = System.Security.Cryptography.SHA256.Create())\n    {\n        var hashedProvidedAnswer = Convert.ToBase64String(sha256.ComputeHash(System.Text.Encoding.UTF8.GetBytes(providedAnswer + user.ProviderUserKey /*salt if applicable*/)));\n\n        // Compare the hashes securely\n        return SecureStringEquality(storedHashedAnswer, hashedProvidedAnswer);\n    }\n}\n\nprivate bool SecureStringEquality(string str1, string str2)\n{\n    // Ensure we are using a constant-time comparison\n    if (str1.Length != str2.Length) return false;\n    int result = 0;\n    for (int i = 0; i < str1.Length; i++)\n    {\n        result |= str1[i] ^ str2[i];\n    }\n    return result == 0;\n}