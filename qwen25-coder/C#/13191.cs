using System;\nusing System.Collections;\nusing System.ComponentModel;\n\npublic class DynamicProperties : ICustomTypeDescriptor\n{\n    private readonly Hashtable _properties = new Hashtable();\n\n    public void AddProperty(string name, object value)\n    {\n        if (!_properties.ContainsKey(name))\n        {\n            _properties.Add(name, value);\n        }\n    }\n\n    public AttributeCollection GetAttributes() => TypeDescriptor.GetAttributes(GetType());\n    public string GetClassName() => TypeDescriptor.GetClassName(this, true);\n    public string GetComponentName() => TypeDescriptor.GetComponentName(this, true);\n    public TypeConverter GetConverter() => TypeDescriptor.GetConverter(this, true);\n    public EventDescriptor GetDefaultEvent() => TypeDescriptor.GetDefaultEvent(this, true);\n    public PropertyDescriptor GetDefaultProperty() => null;\n    public object GetEditor(Type editorBaseType) => TypeDescriptor.GetEditor(this, editorBaseType, true);\n    public EventDescriptorCollection GetEvents(Attribute[] attributes) { return GetEvents(); }\n    public EventDescriptorCollection GetEvents() => TypeDescriptor.GetEvents(this, true);\n\n    public PropertyDescriptorCollection GetProperties(Attribute[] attributes)\n    {\n        var descriptors = new ArrayList();\n\n        foreach (var key in _properties.Keys)\n        {\n            var descriptor = new DynamicPropertyDescriptor(key.ToString(), _properties[key].GetType());\n            descriptors.Add(descriptor);\n        }\n\n        return new PropertyDescriptorCollection((PropertyDescriptor[])descriptors.ToArray(typeof(PropertyDescriptor)));\n    }\n\n    public PropertyDescriptorCollection GetProperties() => GetProperties(null);\n\n    public object GetPropertyOwner(PropertyDescriptor pd) => this;\n\n    private class DynamicPropertyDescriptor : PropertyDescriptor\n    {\n        private readonly string _name;\n        private readonly Type _type;\n\n        public DynamicPropertyDescriptor(string name, Type type)\n            : base(name, null)\n        {\n            _name = name;\n            _type = type;\n        }\n\n        public override bool CanResetValue(object component) => false;\n        public override object GetValue(object component) => ((DynamicProperties)component)._properties[_name];\n        public override void ResetValue(object component) { }\n        public override void SetValue(object component, object value)\n        {\n            var dynamicProperties = (DynamicProperties)component;\n            if (_type.IsAssignableFrom(value.GetType()))\n                dynamicProperties._properties[_name] = value;\n        }\n\n        public override bool ShouldSerializeValue(object component) => true;\n\n        public override Type ComponentType => typeof(DynamicProperties);\n        public override bool IsReadOnly => false;\n        public override Type PropertyType => _type;\n    }\n}