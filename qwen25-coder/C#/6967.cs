using System;\nusing System.IO;\nusing System.Security.AccessControl;\nusing Microsoft.Deployment.WindowsInstaller;\n\npublic class CustomActions\n{\n    [CustomAction]\n    public static ActionResult SetPermissionsOnCertPrivKey(Session session)\n    {\n        string thumbprint = session["CERT_THUMBPRINT"]; // Pass this property from WiX\n\n        try\n        {\n            string privateKeyFilePath = FindPrivateKey(thumbprint);\n            if (!string.IsNullOrEmpty(privateKeyFilePath))\n            {\n                GrantAccess(privateKeyFilePath, "NETWORK SERVICE");\n                return ActionResult.Success;\n            }\n            else\n            {\n                session.Log("Failed to find private key file for certificate.");\n                return ActionResult.Failure;\n            }\n        }\n        catch (Exception ex)\n        {\n            session.Log($"Action SetPermissionsOnCertPrivKey threw an exception: {ex}");\n            return ActionResult.Failure;\n        }\n    }\n\n    private static string FindPrivateKey(string thumbprint)\n    {\n        X509Store store = new X509Store(StoreName.My, StoreLocation.LocalMachine);\n        store.Open(OpenFlags.ReadOnly);\n\n        foreach (var cert in store.Certificates)\n        {\n            if (cert.Thumbprint.Equals(thumbprint, StringComparison.OrdinalIgnoreCase))\n            {\n                string appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData, Environment.SpecialFolderOption.DoNotVerify);\n                string machineKeysPath = Path.Combine(appDataPath.Replace("Roaming", "Local"), @"Microsoft\Crypto\RSA\MachineKeys");\n\n                using (var csp = cert.PrivateKey as RSACryptoServiceProvider)\n                {\n                    if (csp != null && !string.IsNullOrEmpty(csp.CspKeyContainerInfo.UniqueKeyContainerName))\n                    {\n                        string privateKeyPath = Path.Combine(machineKeysPath, csp.CspKeyContainerInfo.UniqueKeyContainerName);\n\n                        // Sometimes the key container name is just a number,\n                        // and sometimes it's prefixed with "inc"\n                        if (!File.Exists(privateKeyPath) && Directory.Exists(Path.Combine(machineKeysPath, $"inc{csp.CspKeyContainerInfo.UniqueKeyContainerName}")))\n                            privateKeyPath = Path.Combine(machineKeysPath, $"inc{csp.CspKeyContainerInfo.UniqueKeyContainerName}");\n\n                        return File.Exists(privateKeyPath) ? privateKeyPath : null;\n                    }\n                }\n            }\n        }\n\n        store.Close();\n        return null;\n    }\n\n    private static void GrantAccess(string filePath, string account)\n    {\n        FileInfo fileInfo = new FileInfo(filePath);\n        DirectorySecurity fileSecurity = fileInfo.GetAccessControl();\n\n        FileSystemAccessRule accessRule = new FileSystemAccessRule(\n            account,\n            FileSystemRights.ReadKey | FileSystemRights.ReadAttributes,\n            AccessControlType.Allow);\n\n        fileSecurity.AddAccessRule(accessRule);\n        fileInfo.SetAccessControl(fileSecurity);\n    }\n}