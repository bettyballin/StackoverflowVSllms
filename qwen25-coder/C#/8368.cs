using System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.EntityFrameworkCore;\nusing Moq;\n\npublic class MyEntity\n{\n    public int Id { get; set; }\n    // other properties\n}\n\npublic class MyDbContext : DbContext\n{\n    public DbSet<MyEntity> Entities { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        // default configuration here, not needed for in-memory testing\n    }\n}\n\npublic class TestMyDbContext\n{\n    private readonly Mock<DbSet<MyEntity>> mockSet;\n    private readonly Mock<MyDbContext> mockContext;\n\n    public TestMyDbContext()\n    {\n        var data = new List<MyEntity>\n        {\n            new MyEntity { Id = 1 },\n            // more entities\n        }.AsQueryable();\n\n        mockSet = new Mock<DbSet<MyEntity>>();\n        mockSet.As<IQueryable<MyEntity>>().Setup(m => m.Provider).Returns(data.Provider);\n        mockSet.As<IQueryable<MyEntity>>().Setup(m => m.Expression).Returns(data.Expression);\n        mockSet.As<IQueryable<MyEntity>>().Setup(m => m.ElementType).Returns(data.ElementType);\n        mockSet.As<IQueryable<MyEntity>>().Setup(m => m.GetEnumerator()).Returns(() => data.GetEnumerator());\n\n        mockContext = new Mock<MyDbContext>();\n        mockContext.Setup(c => c.Entities).Returns(mockSet.Object);\n    }\n\n    [Fact]\n    public void TestMethod()\n    {\n        var service = new MyService(mockContext.Object);\n        // perform tests\n    }\n}