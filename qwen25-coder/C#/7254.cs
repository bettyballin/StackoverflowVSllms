using System.Collections.Immutable;\nusing Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.CSharp;\nusing Microsoft.CodeAnalysis.Diagnostics;\n\n[DiagnosticAnalyzer(LanguageNames.CSharp)]\npublic class AvoidDoEventsAnalyzer : DiagnosticAnalyzer\n{\n    public const string DiagnosticId = "AvoidDoEvents";\n    \n    private static readonly LocalizableString Title = new LocalizableResourceString(nameof(Resources.AvoidDoEvents_Title), Resources.ResourceManager, typeof(Resources));\n    private static readonly LocalizableString MessageFormat = new LocalizableResourceString(nameof(Resources.AvoidDoEvents_MessageFormat), Resources.ResourceManager, typeof(Resources));\n    private static readonly LocalizableString Description = new LocalizableResourceString(nameof(Resources.AvoidDoEvents_Description), Resources.ResourceManager, typeof(Resources));\n\n    private const string Category = "Usage";\n\n    private static DiagnosticDescriptor Rule = new DiagnosticDescriptor(DiagnosticId, Title, MessageFormat, Category, DiagnosticSeverity.Error, isEnabledByDefault: true, description: Description);\n\n    public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics => ImmutableArray.Create(Rule);\n\n    public override void Initialize(AnalysisContext context)\n    {\n        context.ConfigureGeneratedCodeAnalysis(GeneratedCodeAnalysisFlags.None);\n        context.EnableConcurrentExecution();\n\n        // Register action to analyze only method invocations\n        context.RegisterSyntaxNodeAction(AnalyzeMethodInvocation, SyntaxKind.InvocationExpression);\n    }\n\n    private static void AnalyzeMethodInvocation(SyntaxNodeAnalysisContext context)\n    {\n        var invocation = (InvocationExpressionSyntax)context.Node;\n        \n        if (invocation.Expression is MemberAccessExpressionSyntax memberAccess &&\n            memberAccess.Name.Identifier.ValueText == "DoEvents" &&\n            memberAccess.Expression.ToString().EndsWith("Application.DoEvents"))\n        {\n            context.ReportDiagnostic(Diagnostic.Create(Rule, invocation.GetLocation()));\n        }\n    }\n}