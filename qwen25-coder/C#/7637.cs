using System;\n\npublic class StringFittingEstimator\n{\n    private int estimatedCharsPerLine;\n    private int estimatedLinesPerPage;\n\n    public StringFittingEstimator(int estimatedLineWidthInPixels, float fontSize)\n    {\n        // Assuming average character width is 0.6 * font size (this can vary by font and style)\n        float avgCharWidth = 0.6f * fontSize;\n        this.estimatedCharsPerLine = (int)(estimatedLineWidthInPixels / avgCharWidth);\n\n        // Assuming line height is 1.2 times the font size (this can also vary by font and style)\n        int lineHeight = (int)(fontSize * 1.2);\n        int pageHeightInPixels = 794; // A4 size in pixels at 300 DPI\n        this.estimatedLinesPerPage = (int)(pageHeightInPixels / lineHeight);\n    }\n\n    public int GetEstimatedMaxChars(string text)\n    {\n        return estimatedCharsPerLine * estimatedLinesPerPage;\n    }\n\n    public string TruncateToFitArea(string text)\n    {\n        int maxChars = GetEstimatedMaxChars(text);\n        if (text.Length > maxChars)\n        {\n            return text.Substring(0, maxChars) + "..."; // Optionally add an ellipsis\n        }\n        return text;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        const float fontSize = 12f; // Example font size\n        const int estimatedLineWidthInPixels = 488; // Example width (6.07 inches at 300 DPI)\n        \n        StringFittingEstimator estimator = new StringFittingEstimator(estimatedLineWidthInPixels, fontSize);\n        string originalText = "Your very long text goes here and continues...";\n        string truncatedText = estimator.TruncateToFitArea(originalText);\n        \n        Console.WriteLine("Truncated Text: " + truncatedText);\n    }\n}