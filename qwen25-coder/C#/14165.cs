public partial class YourControl : WebControl, ICallbackEventHandler\n{\n    private string callbackResult;\n\n    protected override void OnLoad(EventArgs e)\n    {\n        base.OnLoad(e);\n\n        // Registering the callback on the client-side\n        ClientScriptManager scriptManager = Page.ClientScript;\n        string callbackReference = scriptManager.GetCallbackEventReference(this, "arg", "ReceiveServerData", null);\n        string cbFunction = $"function CallServer(arg) {{ {callbackReference}; }}";\n        if (!scriptManager.IsClientScriptBlockRegistered("CallServer"))\n        {\n            scriptManager.RegisterClientScriptBlock(this.GetType(), "CallServer", $"<{ClientScriptTag>}>{cbFunction}</{ClientScriptTag}>", true);\n        }\n    }\n\n    // This is called from client-side JavaScript\n    public void RaiseCallbackEvent(string eventArgument)\n    {\n        // Process the callback, update ViewState or whatever necessary\n        try\n        {\n            // Example: Update your data source object in the ViewState based on the argument\n            var dataSource = (DataTable)ViewState["DataSource"];\n            // Perform operations on dataSource based on eventArgument\n            ViewState["DataSource"] = dataSource;\n\n            // Prepare result to send back to client-side\n            callbackResult = JsonConvert.SerializeObject(dataSource);\n        }\n        catch (Exception ex)\n        {\n            callbackResult = $"Error: {ex.Message}";\n        }\n    }\n\n    public string GetCallbackResult()\n    {\n        return callbackResult;\n    }\n}