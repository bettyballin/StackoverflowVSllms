using System.Collections.Concurrent;\nusing System.Linq;\n\npublic class TypeService\n{\n    private static readonly ConcurrentDictionary<int, string> typeCache = new ConcurrentDictionary<int, string>();\n    private static readonly ConcurrentDictionary<string, int> nameToIdCache = new ConcurrentDictionary<string, int>();\n\n    static TypeService()\n    {\n        // Assuming you have an instance of your data context available globally or via dependency injection\n        using (var db = new MyDataContext())\n        {\n            var types = db.TypeTables.ToList();\n            foreach (var type in types)\n            {\n                typeCache.TryAdd(type.TypeId, type.TypeName);\n                nameToIdCache.TryAdd(type.TypeName, type.TypeId);\n            }\n        }\n    }\n\n    public static bool TryGetTypeId(string typeName, out int typeId)\n    {\n        return nameToIdCache.TryGetValue(typeName, out typeId);\n    }\n\n    public static bool TryGetTypeName(int typeId, out string typeName)\n    {\n        return typeCache.TryGetValue(typeId, out typeName);\n    }\n}