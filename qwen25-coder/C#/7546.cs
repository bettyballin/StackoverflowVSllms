using System;\nusing System.IO;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        // Define the dynamic method\n        DynamicMethod dm = new DynamicMethod("WriteObjectInfo", null, \n            new Type[] { typeof(object), typeof(TextWriter) }, true);\n\n        ILGenerator il = dm.GetILGenerator();\n\n        il.Emit(OpCodes.Ldarg_1);  // Load the writer argument\n        il.Emit(OpCodes.Ldarg_0);  // Load the object argument\n        il.Emit(OpCodes.Dup);      // Duplicate the object reference for subsequent use\n        il.Emit(OpCodes.Ldfld, typeof(Person).GetField("FirstName"));\n        il.EmitCall(OpCodes.Callvirt, typeof(TextWriter)\n            .GetMethod("Write", new Type[] { typeof(string) }), null);\n        \n        il.Emit(OpCodes.Ldarg_1);  // Load the writer argument again\n        il.Emit(OpCodes.Dup);      // Duplicate the object reference for subsequent use\n        il.Emit(OpCodes.Ldfld, typeof(Person).GetField("LastName"));\n        il.EmitCall(OpCodes.Callvirt, typeof(TextWriter)\n            .GetMethod("Write", new Type[] { typeof(string) }), null);\n        \n        il.Emit(OpCodes.Ldarg_1);  // Load the writer argument again\n        il.Emit(OpCodes.Pop);      // Pop the extra object reference to clean up the stack\n        il.Emit(OpCodes.Ldfld, typeof(Person).GetField("Age")); // Note: Ldfld expects a FieldInfo, not Type and name as string\n        il.EmitCall(OpCodes.Callvirt, typeof(TextWriter)\n            .GetMethod("Write", new Type[] { typeof(int) }), null);\n        \n        il.Emit(OpCodes.Ret);      // Return from the method\n\n        var writer = new StreamWriter("DynamicMethodIL.dll");\n        dm.Module.PEStreamDef.CopyTo(writer.BaseStream);\n        writer.Close();\n\n        Console.WriteLine("Dynamic method IL emitted to DynamicMethodIL.dll");\n    }\n}\n\nclass Person\n{\n    public string FirstName;\n    public string LastName;\n    public int Age;\n}