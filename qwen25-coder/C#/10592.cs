private void BindTreeView(DataTable dt)\n{\n    TreeView1.Nodes.Clear();\n\n    // Create a dictionary to hold references to tree nodes for easy access\n    Dictionary<int, TreeNode> nodeLookup = new Dictionary<int, TreeNode>();\n\n    foreach (DataRow row in dt.Rows)\n    {\n        int categoryID = Convert.ToInt32(row["CategoryID"]);\n        string categoryName = row["CategoryName"].ToString();\n        Nullable<int> parentID = row.IsNull("ParentID") ? (int?)null : Convert.ToInt32(row["ParentID"]);\n\n        TreeNode node = new TreeNode(categoryName, categoryID.ToString());\n\n        nodeLookup[categoryID] = node;\n\n        if (parentID.HasValue && nodeLookup.ContainsKey(parentID.Value))\n        {\n            // This is a child node\n            nodeLookup[parentID.Value].ChildNodes.Add(node);\n        }\n        else\n        {\n            // This is a root node\n            TreeView1.Nodes.Add(node);\n        }\n    }\n\n    // Optionally, populate the treeview with edit/delete options for each node if required\n}\n\n// Example usage in Page_Load or similar event handler:\nprotected void Page_Load(object sender, EventArgs e)\n{\n    if (!IsPostBack)\n    {\n        DataTable dt = GetDataFromDatabase(); // This method should retrieve your data from the database\n        BindTreeView(dt);\n    }\n}