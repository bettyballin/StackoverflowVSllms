using NMock;\nusing System;\n\npublic interface IApi\n{\n    void DoSomething(ref int value);\n}\n\npublic class ApiConsumer\n{\n    private readonly IApi _api;\n\n    public ApiConsumer(IApi api)\n    {\n        _api = api;\n    }\n\n    public void Execute()\n    {\n        int value = 10;\n        _api.DoSomething(ref value);\n        Console.WriteLine($"Value after call: {value}");\n    }\n}\n\npublic class MockHelper\n{\n    public static Action refModifier;\n\n    public static void ModifyRefParameter(int value, out int modifiedValue)\n    {\n        refModifier?.Invoke();\n        modifiedValue = value; // Adjust as necessary based on what needs to be set.\n    }\n\n    public static IApi CreateMockWithRefParameter()\n    {\n        var mockFactory = new MockFactory();\n        var apiMock = mockFactory.Mock<IApi>();\n        Action<int> action = x => ModifyRefParameter(x, out _);\n        \n        refModifier = () =>\n        {\n            Console.WriteLine("Modifying by-ref parameter");\n            // Logic to modify the actual reference\n            action(42);  // Example modification\n        };\n\n        apiMock.Expects.One.Method(m => m.DoSomething(NMock.Is.OutRef<int>())).Will(action);\n\n        return apiMock.MockObject;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        var mockApi = MockHelper.CreateMockWithRefParameter();\n        var consumer = new ApiConsumer(mockApi);\n        consumer.Execute();  // This will print: "Value after call: 42" or your desired modified value.\n    }\n}