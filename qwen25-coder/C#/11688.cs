public class HierarchicalPage\n{\n    public int PageID { get; set; }\n    public int? ParentId { get; set; }\n    public string Title { get; set; }\n    public int Level { get; set; }\n}\n\n// Method to build HTML nested list\nprivate string BuildHtmlNestedList(List<HierarchicalPage> pages)\n{\n    var sb = new StringBuilder();\n    var stack = new Stack<int>();\n\n    foreach (var page in pages)\n    {\n        if (!stack.Any() || page.ParentId == stack.Peek())\n        {\n            // Start a new sublist\n            sb.AppendLine("<ul>");\n        }\n        else if (page.ParentId != null && page.Level > 0 && stack.Peek() == pages.FirstOrDefault(p => p.PageID == page.ParentId)?.ParentId)\n        {\n            // Close previous list and start a new one\n            sb.AppendLine("</ul></li><ul>");\n        }\n        else\n        {\n            // Close all parent lists that are deeper in the hierarchy\n            while (stack.Any() && stack.Peek() != page.ParentId)\n            {\n                sb.AppendLine("</li></ul>");\n                stack.Pop();\n            }\n\n            if (stack.Peek() == page.ParentId)\n            {\n                sb.AppendLine("</li>");\n            }\n        }\n        // Add current item to list\n        sb.Append($"<li><a href=\"/page/{page.PageID}\">{page.Title}</a>");\n\n        stack.Push(page.PageID);\n    }\n\n    while (stack.Any())\n    {\n        sb.AppendLine("</li></ul>");\n        stack.Pop();\n    }\n\n    return sb.ToString();\n}