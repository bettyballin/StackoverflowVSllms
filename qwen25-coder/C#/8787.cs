using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing System.Data.Entity;\n\npublic class Customer\n{\n    public Guid CustomerId { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n\n    [InverseProperty("Customers")]\n    public virtual ICollection<Store> Stores { get; set; } = new List<Store>();\n}\n\npublic class Store\n{\n    public Guid StoreId { get; set; }\n    public string StoreName { get; set; }\n\n    // TopCustomer reference\n    public Guid? TopCustomerId { get; set; }\n    [ForeignKey("TopCustomerId")]\n    public virtual Customer TopCustomer { get; set; }\n\n    [InverseProperty("Stores")]\n    public virtual ICollection<Customer> Customers { get; set; } = new List<Customer>();\n}\n\npublic class TestDbContext : DbContext\n{\n    public DbSet<Customer> Customers { get; set; }\n    public DbSet<Store> Stores { get; set; }\n\n    protected override void OnModelCreating(DbModelBuilder modelBuilder)\n    {\n        // Configure the many-to-many relationship between Customer and Store\n        modelBuilder.Entity<Customer>()\n            .HasMany(c => c.Stores)\n            .WithMany(s => s.Customers)\n            .Map(cs =>\n            {\n                cs.ToTable("CustomerStore");\n                cs.MapLeftKey("CustomerId");\n                cs.MapRightKey("StoreId");\n            });\n\n        // Configure the TopCustomer relationship\n        modelBuilder.Entity<Store>()\n            .HasOptional(s => s.TopCustomer) // Store has zero or one TopCustomer\n            .WithMany()  // No navigation back to Store from Customer\n            .HasForeignKey(s => s.TopCustomerId);\n    }\n}