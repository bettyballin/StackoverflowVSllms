using System;\nusing System.Runtime.InteropServices;\n\n[StructLayout(LayoutKind.Sequential, Pack = 1)]\npublic struct CARDIDTYPE {\n    public uint JobId;      // Use uint for DWORD\n    public uint CardNum;    // Use uint for DWORD\n    public IntPtr hPrinter;\n}\n\n[StructLayout(LayoutKind.Sequential)]\npublic struct CARD_INFO_1 {\n    public bool bActive;    // BOOL in C is equivalent to int, not bool. This may cause issues.\n    public bool bSuccess;   // Check this assumption.\n}\n\n[StructLayout(LayoutKind.Sequential)]\npublic struct CARD_INFO_2 {\n    public uint dwCopiesPrinted;\n    public uint dwRemakeAttempts;\n    public SYSTEMTIME TimeCompleted;\n}\n\n[StructLayout(LayoutKind.Sequential)]\npublic struct SYSTEMTIME {\n    public ushort Year;\n    public ushort Month;\n    public ushort DayOfWeek;\n    public ushort Day;\n    public ushort Hour;\n    public ushort Minute;\n    public ushort Second;\n    public ushort Milliseconds;\n}\n\n[DllImport("ICE_API.dll", CallingConvention = CallingConvention.StdCall, SetLastError = true)]\npublic static extern bool GetCardId(IntPtr hdc, out CARDIDTYPE pCardId);\n\n[DllImport("ICE_API.dll", EntryPoint = "GetCardStatus", CallingConvention = CallingConvention.StdCall, SetLastError = true)]\npublic static extern bool GetCardStatus(in CARDIDTYPE CardId, uint level, IntPtr pData, uint cbBuf, out uint pcbNeeded);\n\n// Usage\npublic void CallNativeMethods() {\n    CARDIDTYPE cardId;\n    if (!GetCardId(IntPtr.Zero, out cardId)) { // Replace IntPtr.Zero with actual HDC if needed\n        Console.WriteLine("Failed to get card ID");\n        return;\n    }\n\n    int memSize = Marshal.SizeOf<CARD_INFO_1>();\n    IntPtr memPtr = Marshal.AllocHGlobal(memSize);\n    uint needed;\n\n    try {\n        bool success = GetCardStatus(cardId, 1, memPtr, (uint)memSize, out needed);\n        if (!success) {\n            int lastError = Marshal.GetLastWin32Error();\n            Console.WriteLine($"Failed to get card status. Error: {lastError}");\n            return;\n        }\n\n        CARD_INFO_1 info = Marshal.PtrToStructure<CARD_INFO_1>(memPtr);\n        // Use the info struct as needed\n    }\n    finally {\n        Marshal.FreeHGlobal(memPtr);\n    }\n}