// Store added ImageButtons in ViewState to recreate them during each postback\nprotected void Page_Load(object sender, EventArgs e)\n{\n    if (!IsPostBack) {\n        // Initialize your collection (e.g., ViewState) for the first time\n        ViewState["ImageButtonIDs"] = new List<string>();\n    }\n    else {\n        // Recreate dynamic ImageButtons from ViewState data\n        RecreateDynamicImageButtons();\n    }\n}\n\nprotected void Page_Init(object sender, EventArgs e)\n{\n    if (!IsPostBack) return;\n\n    // Ensure controls are recreated here as well for event handling to work correctly\n    RecreateDynamicImageButtons();\n}\n\nprivate void RecreateDynamicImageButtons()\n{\n    var imageButtonIDs = (List<string>)ViewState["ImageButtonIDs"];\n    \n    foreach (var id in imageButtonIDs)\n    {\n        var imgbtnRemove = new ImageButton();\n        // Recreate with the same ID and other properties\n        imgbtnRemove.ID = id;\n        imgbtnRemove.CommandName = id;  // Assuming you're storing the name here too\n        imgbtnRemove.ImageUrl = GetImageUrlById(id);  // You need a method to get this URL\n        imgbtnRemove.Click += new ImageClickEventHandler(Button_Click);\n        \n        // Add it back to your panel or table cell\n        tRow.Cells[3].Controls.Add(imgbtnRemove);\n    }\n}\n\nprotected void Button_Click(object sender, ImageClickEventArgs e)\n{\n    var clickedButton = (ImageButton)sender;\n    string commandName = clickedButton.CommandName;\n\n    switch (commandName) {\n        case "uxStandardLetterDeleteImage_SomeLetter":\n            // Handle your command here\n            break;\n        default:\n            break;\n    }\n}\n\n// Method to add a new ImageButton dynamically and store its ID\nprivate void AddImageButton(string letterName, string imageUrl)\n{\n    var imgbtnRemove = new ImageButton();\n    imgbtnRemove.ID = "uxStandardLetterDeleteImage_" + letterName;\n    imgbtnRemove.CommandName = "uxStandardLetterDeleteImage_" + letterName;\n    imgbtnRemove.ImageUrl = imageUrl;\n    imgbtnRemove.Click += new ImageClickEventHandler(Button_Click);\n    \n    // Add the button to your table cell\n    tRow.Cells[3].Controls.Add(imgbtnRemove);\n\n    // Store ID in ViewState for later recreation\n    var imageButtonIDs = (List<string>)ViewState["ImageButtonIDs"];\n    if (!imageButtonIDs.Contains(imgbtnRemove.ID)) {\n        imageButtonIDs.Add(imgbtnRemove.ID);\n    }\n}\n\n// Example method to fill ImageUrl based on the ID\nprivate string GetImageUrlById(string id)\n{\n    // Logic to determine the URL by ID, this is just a placeholder\n    return "remove.png";  // Return actual URL accordingly\n}