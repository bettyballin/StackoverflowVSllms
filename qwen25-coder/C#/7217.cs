using System;\nusing System.IO;\nusing System.Reflection;\nusing System.Windows;\nusing System.Windows.Controls;\n\nnamespace ModularApp\n{\n    public partial class MainWindow : Window\n    {\n        private const string ModulesPath = @"..\..\Modules";\n\n        public MainWindow()\n        {\n            InitializeComponent();\n            LoadModules();\n        }\n\n        private void LoadModules()\n        {\n            foreach (string file in Directory.GetFiles(ModulesPath, "*.dll"))\n            {\n                var assembly = Assembly.LoadFrom(file);\n                foreach (Type type in assembly.GetTypes())\n                {\n                    if (typeof(ModuleBase).IsAssignableFrom(type) && !type.IsInterface)\n                    {\n                        var instance = (ModuleBase)Activator.CreateInstance(type);\n                        TabItem tabItem = new TabItem { Header = instance.Name, Content = instance.UIContent };\n                        ModuleTabCtrl.Items.Add(tabItem);\n                    }\n                }\n            }\n        }\n\n        private void OnInstallModule(object sender, RoutedEventArgs e)\n        {\n            // Logic to install module\n        }\n\n        private void OnUpdateModule(object sender, RoutedEventArgs e)\n        {\n            // Logic to update module\n        }\n\n        private void OnDeleteModule(object sender, RoutedEventArgs e)\n        {\n            // Logic to delete module\n        }\n    }\n}