using System;\n\npublic class Caption\n{\n    public event EventHandler PropertyChanged; // Define an event\n\n    private string _text;\n    public string Text\n    {\n        get { return _text; }\n        set\n        {\n            if (_text != value)\n            {\n                _text = value;\n                OnPropertyChanged(); // Trigger the event when property changes\n            }\n        }\n    }\n\n    protected virtual void OnPropertyChanged()\n    {\n        PropertyChanged?.Invoke(this, EventArgs.Empty); // Raise the event\n    }\n}\n\npublic class Gauge\n{\n    private Caption _caption;\n\n    public Caption Caption\n    {\n        get => _caption;\n        set\n        {\n            if (_caption != null)\n                _caption.PropertyChanged -= HandleCaptionPropertyChanged; // Unsubscribe from old Caption\n\n            _caption = value;\n            \n            if (_caption != null)\n                _caption.PropertyChanged += HandleCaptionPropertyChanged; // Subscribe to new Caption\n        }\n    }\n\n    private void HandleCaptionPropertyChanged(object sender, EventArgs e)\n    {\n        // Execute your subroutine here when Caption's property changes\n        Console.WriteLine("Caption text changed in Gauge class.");\n    }\n}\n\n// Example usage:\npublic class Program\n{\n    public static void Main()\n    {\n        var caption = new Caption();\n        var gauge = new Gauge { Caption = caption };\n\n        caption.Text = "New Text"; // This will trigger HandleCaptionPropertyChanged\n    }\n}