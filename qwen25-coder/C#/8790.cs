using System;\nusing System.Data;\nusing System.Collections.Generic;\nusing Dapper;\nusing System.Data.SqlClient;\n\n// Define your data model and table-valued parameter class\npublic class YourEntity\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n\npublic class YourTableValuedParameter : List<YourEntity>, SqlMapper.IDynamicParameters\n{\n    public void AddParameters(IDbCommand command, SqlMapper.Identity identity)\n    {\n        var dataTable = new DataTable();\n        dataTable.Columns.Add("Id", typeof(int));\n        dataTable.Columns.Add("Name", typeof(string));\n\n        foreach (var entity in this)\n        {\n            dataTable.Rows.Add(entity.Id, entity.Name);\n        }\n\n        var param = new SqlParameter("@YourParam", SqlDbType.Structured) { TypeName = "dbo.YourTableType", Value = dataTable };\n        command.Parameters.Add(param);\n    }\n}\n\n// Usage\npublic class YourRepository\n{\n    private readonly string _connectionString;\n\n    public YourRepository(string connectionString)\n    {\n        _connectionString = connectionString;\n    }\n\n    public void InsertEntities(IEnumerable<YourEntity> entities)\n    {\n        using (var connection = new SqlConnection(_connectionString))\n        {\n            connection.Open();\n            var tvp = new YourTableValuedParameter(entities);\n            connection.Execute("YourStoredProcedureName", tvp, commandType: CommandType.StoredProcedure);\n        }\n    }\n}