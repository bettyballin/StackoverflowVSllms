using System;\nusing System.Collections.Generic;\n\npublic static class ListComparer\n{\n    public static void CompareTwoLists<T1, T2>(List<T1> listOrig, List<T2> listDest)\n        where T1 : class\n        where T2 : class\n    {\n        if (listOrig == null || listDest == null)\n            throw new ArgumentNullException("Both lists must be provided.");\n\n        if (listOrig.Count != listDest.Count)\n            throw new ArgumentException("Both lists must have the same number of items.");\n\n        for (int i = 0; i < listOrig.Count; i++)\n        {\n            string differences = CompareTwoClass_ReturnDifferences(listOrig[i], listDest[i]);\n            if (!string.IsNullOrEmpty(differences))\n            {\n                Console.WriteLine("Differences at index " + i + ":");\n                Console.WriteLine(differences);\n            }\n        }\n    }\n\n    public static string CompareTwoClass_ReturnDifferences<T1, T2>(T1 Orig, T2 Dest)\n        where T1 : class\n        where T2 : class\n    {\n        if (Dest == null) throw new ArgumentNullException("Dest", "Destination class must first be instantiated.");\n\n        var Differences = "";\n\n        // Loop through each property in the destination  \n        foreach (var DestProp in Dest.GetType().GetProperties())\n        {\n            // Find the matching property in the Orig class and compare\n            foreach (var OrigProp in Orig.GetType().GetProperties())\n            {\n                if (OrigProp.Name != DestProp.Name || OrigProp.PropertyType != DestProp.PropertyType) continue;\n                if (OrigProp.GetValue(Orig, null) == null && DestProp.GetValue(Dest, null) == null)\n                    continue; // Both are null, consider equal\n\n                string origValueStr = OrigProp.GetValue(Orig, null)?.ToString() ?? "NULL";\n                string destValueStr = DestProp.GetValue(Dest, null)?.ToString() ?? "NULL";\n\n                if (origValueStr != destValueStr)\n                {\n                    Differences += string.IsNullOrEmpty(Differences) \n                        ? string.Format("{0}: {1} -> {2}", OrigProp.Name, origValueStr, destValueStr) \n                        : string.Format("{0}{1}{2}: {3} -> {4}", Differences,\n                                            Environment.NewLine,\n                                            OrigProp.Name,\n                                            origValueStr,\n                                            destValueStr);\n                }\n            }\n        }\n\n        return Differences;\n    }\n}