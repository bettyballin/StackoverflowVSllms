// Form1.cs\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel.Composition;\nusing System.Windows.Forms;\n\nnamespace Winforms_Mef\n{\n    public interface IForm\n    {\n        TabControl tab { get; }\n    }\n\n    [InheritedExport]\n    public interface ITab\n    {\n        TabPage GetTabPage();\n    }\n\n    public partial class Form1 : Form, IForm\n    {\n        privateCompositionContainer _container;\n\n        [ImportMany(typeof(ITab))]\n        public IEnumerable<Lazy<ITab>> Tabs { get; set; }\n\n        public TabControl tab\n        {\n            get { return tabControl1; }\n        }\n\n        public Form1()\n        {\n            Compose();\n            InitializeComponent();\n\n            foreach (var tab in Tabs)\n            {\n                tabControl1.TabPages.Add(tab.Value.GetTabPage());\n            }\n        }\n\n        private void Compose()\n        {\n            var catalog = new AggregateCatalog();\n            catalog.Catalogs.Add(new AssemblyCatalog(typeof(Form1).Assembly));\n\n            // If you have external modules, add them here\n            // catalog.Catalogs.Add(new DirectoryCatalog(@"path_to_plugins"));\n\n            _container = new CompositionContainer(catalog);\n            _container.ComposeParts(this);\n        }\n    }\n\n    // Form2.cs\n    using System.ComponentModel.Composition;\n    using System.Windows.Forms;\n\n    namespace Winforms_Mef\n    {\n        [Export(typeof(ITab))]\n        public partial class Form2 : UserControl, ITab\n        {\n            public Form2()\n            {\n                InitializeComponent(); // Assuming the designer initializes this as a TabPage\n            }\n\n            public TabPage GetTabPage()\n            {\n                return this; // Cast the UserControl to a TabPage (or create a new one if needed)\n            }\n        }\n    }\n}