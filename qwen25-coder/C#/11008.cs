using System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Documents;\nusing System.Windows.Media;\n\nnamespace WpfAppSearchHighlight\n{\n    public partial class MainWindow : Window\n    {\n        public MainWindow()\n        {\n            InitializeComponent();\n        }\n\n        private void SearchText_TextChanged(object sender, TextChangedEventArgs e)\n        {\n            var searchText = (sender as TextBox)?.Text ?? string.Empty;\n            ClearHighlights(this);\n            if (!string.IsNullOrEmpty(searchText))\n            {\n                RecursiveFindAndHighlight(searchText, this);\n            }\n        }\n\n        private void RecursiveFindAndHighlight(string text, DependencyObject rootElement)\n        {\n            for (int i = 0; i < VisualTreeHelper.GetChildrenCount(rootElement); i++)\n            {\n                var child = VisualTreeHelper.GetChild(rootElement, i);\n\n                if (child is TextBlock textBlock && !string.IsNullOrEmpty(textBlock.Text))\n                {\n                    HighlightTextInTextBlock(textBlock, text);\n                }\n                else if (child is ListBox listBox)\n                {\n                    foreach (var item in listBox.Items)\n                    {\n                        var container = listBox.ItemContainerGenerator.ContainerFromItem(item) as ListBoxItem;\n                        if (container != null)\n                            RecursiveFindAndHighlight(text, container.ContentTemplateRoot ?? container);\n                    }\n                }\n                else if (child is TreeView treeView)\n                {\n                    foreach (var item in treeView.Items)\n                    {\n                        var container = treeView.ItemContainerGenerator.ContainerFromItem(item) as TreeViewItem;\n                        if (container != null)\n                        {\n                            HighlightTextInTreeViewItem(container, text);\n                            RecursiveFindAndHighlight(text, container);\n                        }\n                    }\n                }\n\n                RecursiveFindAndHighlight(text, child);\n            }\n        }\n\n        private void ClearHighlights(DependencyObject rootElement)\n        {\n            for (int i = 0; i < VisualTreeHelper.GetChildrenCount(rootElement); i++)\n            {\n                var child = VisualTreeHelper.GetChild(rootElement, i);\n\n                if (child is TextBlock textBlock && textBlock.Inlines.Count > 1)\n                {\n                    textBlock.Text = new TextRange(textBlock.ContentStart, textBlock.ContentEnd).Text;\n                }\n                else if (child is ListBox listBox)\n                {\n                    foreach (var item in listBox.Items)\n                    {\n                        var container = listBox.ItemContainerGenerator.ContainerFromItem(item) as ListBoxItem;\n                        if (container != null)\n                            ClearHighlights(container.ContentTemplateRoot ?? container);\n                    }\n                }\n                else if (child is TreeView treeView)\n                {\n                    foreach (var item in treeView.Items)\n                    {\n                        var container = treeView.ItemContainerGenerator.ContainerFromItem(item) as TreeViewItem;\n                        if (container != null)\n                        {\n                            ClearHighlightsInTreeViewItem(container);\n                            ClearHighlights(container);\n                        }\n                    }\n                }\n\n                ClearHighlights(child);\n            }\n        }\n\n        private void HighlightTextInTextBlock(TextBlock textBlock, string searchText)\n        {\n            var range = new TextRange(textBlock.ContentStart, textBlock.ContentEnd).Find(searchText, CompareOptions.IgnoreCase);\n            while (range != null && !range.IsEmpty)\n            {\n                var highlightBrush = Brushes.Yellow;\n                RangeHighlight(range.Start, range.End, highlightBrush);\n\n                range = range.GetNextContextPosition(LogicalDirection.Forward)?.GetTextRangeToPosition(textBlock.ContentEnd)?.Find(searchText, CompareOptions.IgnoreCase);\n            }\n        }\n\n        private void HighlightTextInTreeViewItem(TreeViewItem treeViewItem, string searchText)\n        {\n            var headerContentPresenter = FindVisualChild<ContentPresenter>(treeViewItem);\n            if (headerContentPresenter == null) return;\n\n            var templateRoot = VisualTreeHelper.GetDescendantNodes(headerContentPresenter).FirstOrDefault();\n            if (templateRoot is TextBlock textBlock && !string.IsNullOrEmpty(textBlock.Text))\n            {\n                HighlightTextInTextBlock(textBlock, searchText);\n            }\n        }\n\n        private void ClearHighlightsInTreeViewItem(TreeViewItem treeViewItem)\n        {\n            var headerContentPresenter = FindVisualChild<ContentPresenter>(treeViewItem);\n            if (headerContentPresenter == null) return;\n\n            var templateRoot = VisualTreeHelper.GetDescendantNodes(headerContentPresenter).FirstOrDefault();\n            if (templateRoot is TextBlock textBlock && textBlock.Inlines.Count > 1)\n            {\n                textBlock.Text = new TextRange(textBlock.ContentStart, textBlock.ContentEnd).Text;\n            }\n        }\n\n        private void RangeHighlight(TextPointer start, TextPointer end, Brush brush)\n        {\n            var range = new TextRange(start, end);\n            var highlight = new Run(range.Text) { Background = brush };\n            range.InsertNode(highlight);\n        }\n\n        private T FindVisualChild<T>(DependencyObject obj) where T : DependencyObject\n        {\n            for (int i = 0; i < VisualTreeHelper.GetChildrenCount(obj); i++)\n            {\n                var child = VisualTreeHelper.GetChild(obj, i);\n                if (child is T)\n                {\n                    return (T)child;\n                }\n                else\n                {\n                    var childOfChild = FindVisualChild<T>(child);\n                    if (childOfChild != null)\n                        return childOfChild;\n                }\n            }\n\n            return default(T);\n        }\n    }\n}