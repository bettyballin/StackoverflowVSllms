using System;\nusing Lucene.Net.Analysis.Standard;\nusing Lucene.Net.Documents;\nusing Lucene.Net.Index;\nusing Lucene.Net.QueryParsers.Classic;\nusing Lucene.Net.Search;\nusing Lucene.Net.Store;\nusing LuceneVersion = Lucene.Net.Util.LuceneVersion;\n\nclass Program {\n    static void Main(string[] args) {\n        // Create an analyzer to process the text\n        var analyzer = new StandardAnalyzer(LuceneVersion.LUCENE_48);\n\n        // Specify the directory where the index will be stored (memory in this case)\n        using var directory = FSDirectory.Open(new DirectoryInfo("path/to/index"));\n\n        using var writerConfig = new IndexWriterConfig(LuceneVersion.LUCENE_48, analyzer);\n        using var writer = new IndexWriter(directory, writerConfig);\n\n        // Create a document and add fields with data\n        Document doc = new Document();\n        doc.Add(new TextField("name", "John Doe", Field.Store.YES));\n        writer.AddDocument(doc);\n\n        // Don't forget to commit the changes\n        writer.Commit();\n\n        // Now search for the indexed documents\n        using var reader = DirectoryReader.Open(directory);\n        var searcher = new IndexSearcher(reader);\n\n        QueryParser parser = new QueryParser(LuceneVersion.LUCENE_48, "name", analyzer);\n        Query query = parser.Parse("John");\n\n        TopDocs topDocs = searcher.Search(query, 10);\n        Console.WriteLine($"Found {topDocs.TotalHits} hits.");\n\n        // Iterate through the results\n        foreach (var scoreDoc in topDocs.ScoreDocs) {\n            Document hitDoc = searcher.Doc(scoreDoc.Doc);\n            Console.WriteLine($"Matched: {hitDoc.Get("name")}");\n        }\n    }\n}