using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.Composition;\nusing System.Linq;\n\n// Define Metadata interface to contain information about which implementation is used\npublic interface IRNGMetadata {\n    string Type { get; }\n}\n\n// Export RNG implementations with metadata\n[Export(typeof(IRandomNumberGenerator))]\n[ExportMetadata("Type", "ConcreteRNG")]\npublic class ConcreteRNG : IRandomNumberGenerator {\n    private readonly double seed;\n\n    public ConcreteRNG(double seed) {\n        this.seed = seed;\n    }\n\n    // Implementation of IRandomNumberGenerator\n    public int GetNext() {\n        return new Random((int)(seed * 100)).Next();\n    }\n}\n\n// Consumer class to use MEF for discovery and instantiation with specific seeds\npublic class Consumer {\n    [ImportMany]\n    private IEnumerable<Lazy<IRandomNumberGenerator, IRNGMetadata>> lazyRngs;\n\n    public Consumer() {\n        var catalog = new AggregateCatalog(new DirectoryCatalog("."));\n        var container = new CompositionContainer(catalog);\n        container.ComposeParts(this);\n\n        var seeds = new List<double>(new[] { 1.0, 2.0, 3.0 });\n        generators = new List<IRandomNumberGenerator>();\n\n        // Manually instantiate with required seeds\n        foreach (var seed in seeds) {\n            var rng = lazyRngs.First(l => l.Metadata.Type == "ConcreteRNG").Value;\n            // This is a simplification for demonstration purposes.\n            // You might need to reflect or use some factory pattern\n            // to inject the seed into the constructor.\n            generators.Add((IRandomNumberGenerator)Activator.CreateInstance(rng.GetType(), seed));\n        }\n    }\n\n    private List<IRandomNumberGenerator> generators;\n\n    // Other methods, properties...\n}