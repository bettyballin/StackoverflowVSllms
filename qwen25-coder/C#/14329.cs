using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Dynamic.Core; // Import the dynamic Linq library\n\npublic class CustomerQueryExecutor\n{\n    public static IEnumerable<dynamic> ExecuteDynamicQuery(\n        IQueryable<CustomerEntity> customers, \n        string[] propertiesToSelect)\n    {\n        if (propertiesToSelect == null || propertiesToSelect.Length == 0)\n            throw new ArgumentException("At least one property must be specified to select.");\n\n        // Create a string for the select part of the query\n        var selectClause = string.Join(", ", propertiesToSelect.Select(CreatePropertySelector));\n\n        // Example usage: var result = queryable.ExecuteDynamicQuery(new[] { "Number", "City", "CountryEntity.Name" });\n        var dynamicQuery = customers.Select($"new({selectClause})");\n\n        return dynamicQuery;\n    }\n\n    private static string CreatePropertySelector(string propertyName)\n    {\n        // Handle complex types by using the correct notation\n        if (propertyName.Contains('.'))\n        {\n            var parts = propertyName.Split('.');\n            var expression = $"it.{parts[0]}";\n            for (int i = 1; i < parts.Length; i++)\n            {\n                expression += $".{parts[i]}";\n            }\n            return expression;\n        }\n\n        return $"it.{propertyName}";\n    }\n}\n\n// Example usage\npublic class Program\n{\n    public static void Main()\n    {\n        // Assume you have your context and data repository setup\n        var metaData = new MetaData();\n        using (var context = new DataAccessAdapter())\n        {\n            // Create a typed data source\n            var customerRepository = new CustomerEntityCollection(new QueryParameters(null, 0));\n            customerRepository.GetMulti(context);\n\n            // Define the properties you want to select dynamically\n            string[] fieldsToSelect = { "Number", "City", "CountryEntity.Name" };\n\n            // Execute the dynamic query\n            var result = CustomerQueryExecutor.ExecuteDynamicQuery(\n                customerRepository.AsQueryable(), \n                fieldsToSelect);\n\n            foreach (var item in result)\n            {\n                Console.WriteLine($"Number: {item.Number}, City: {item.City}, CountryName: {(string.IsNullOrEmpty(item.Name) ? "N/A" : item.Name)}");\n            }\n        }\n    }\n}