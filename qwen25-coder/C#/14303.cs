using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Irony.Parsing;\n\nclass SQLGrammar : Grammar {\n    public static readonly NonTerminal selectStmt = new NonTerminal("select_stmt");\n    public static readonly NonTerminal columnList = new NonTerminal("column_list");\n    public static readonly Rule columnDefinition = "columns", tableRef = "table_ref";\n\n    public SQLGrammar() {\n        MarkPunctuation(",",".", "AS");\n\n        var columnName = TerminalFactory.CreateCSharpIdentifier("columnName");\n        var tableName = TerminalFactory.CreateCSharpIdentifier("tableName");\n        var aliasName = TerminalFactory.CreateCSharpIdentifier("aliasName");\n\n        columnDefinition = MakeStarRule(columnDefinition, ToTerm(","), columnName + Optional(SPACE + "AS" + SPACE + aliasName));\n        tableRef = tableName + Optional(SPACE + "AS" + SPACE + aliasName);\n\n        selectStmt =\n            FromTerm("SELECT") + SPACING + columnList\n            + SPACING + FromTerm("FROM") + SPACING + tableRef;\n\n        this.Root = selectStmt;\n    }\n}\n\nclass SQLParseContext {\n    public IDictionary<string, string> ColumnToTableMap { get; } = new Dictionary<string, string>();\n\n    public void OnColumn(ParseTreeNode node) {\n        var columnName = node.Token.Text;\n        var tableName = "Unknown"; // Placeholder\n\n        // Logic to determine table name for the column\n        // This is a simplified example and would need enhancement.\n\n        ColumnToTableMap[columnName] = tableName;\n    }\n}\n\nclass Program {\n    static void Main() {\n        string sql = "SELECT b.FirstName AS Name, c.Address FROM BusinessOwner b LEFT JOIN ContactLocation c ON b.ID = c.OwnerID";\n        var grammar = new SQLGrammar();\n        var parser = new Parser(grammar);\n        ParseTree tree = parser.Parse(sql);\n\n        if (tree.HasErrors()) {\n            foreach(var message in tree.ParserMessages)\n                Console.WriteLine(message.Text);\n            return;\n        }\n\n        // This is a basic example and would require full logic to trace columns back to tables.\n        var context = new SQLParseContext();\n        \n        // Traverse the parse tree\n        Traverse(tree.Root, context);\n\n        foreach (var columnTablePair in context.ColumnToTableMap) {\n            Console.WriteLine($"Column: {columnTablePair.Key} -> Table: {columnTablePair.Value}");\n        }\n    }\n\n    static void Traverse(ParseTreeNode node, SQLParseContext context) {\n        if (node.Term.Name == "columnName") {\n            context.OnColumn(node);\n        }\n\n        foreach(var childNode in node.ChildNodes)\n            Traverse(childNode, context);\n    }\n}