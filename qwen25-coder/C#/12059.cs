using System;\nusing System.IO;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        int numberOfThreads = 10; // Adjust based on how many concurrent operations you want to test.\n        var tasks = new Task[numberOfThreads];\n\n        for (int i = 0; i < numberOfThreads; i++)\n        {\n            tasks[i] = TestFileAccessAsync(i);\n        }\n\n        try\n        {\n            await Task.WhenAll(tasks); // Wait for all tasks to complete.\n            Console.WriteLine("All threads completed successfully.");\n        }\n        catch (AggregateException ex)\n        {\n            // Handle exceptions from any of the tasks.\n            foreach (var innerEx in ex.InnerExceptions)\n            {\n                Console.WriteLine($"Thread failed: {innerEx.Message}");\n            }\n        }\n    }\n\n    static async Task TestFileAccessAsync(int threadId)\n    {\n        string filePath = "testfile.txt";\n\n        await Task.Run(() =>\n        {\n            // Simulate file access\n            try\n            {\n                using (var stream = new FileStream(filePath, FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite))\n                using (var writer = new StreamWriter(stream))\n                {\n                    writer.WriteLine($"Data from thread {threadId}");\n                }\n\n                Console.WriteLine($"Thread {threadId} completed successfully.");\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"Thread {threadId} failed: {ex.Message}");\n                throw; // Propagate the exception to be handled in Main\n            }\n        });\n    }\n}