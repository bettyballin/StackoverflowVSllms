using System;\nusing System.IO;\nusing System.IO.MemoryMappedFiles;\n\npublic class PatternFinder\n{\n    public static bool SearchForPattern(string filePath, byte[] pattern)\n    {\n        using (var mmf = MemoryMappedFile.CreateFromFile(filePath, FileMode.Open))\n        using (var accessor = mmf.CreateViewAccessor())\n        {\n            byte[] buffer = new byte[pattern.Length];\n            long fileSize = accessor.Capacity;\n            int bufferSize = buffer.Length;\n\n            for (long offset = 0; offset <= fileSize - bufferSize; offset++)\n            {\n                accessor.ReadArray(offset, buffer, 0, bufferSize);\n                if (buffer.SequenceEqual(pattern))\n                {\n                    Console.WriteLine($"Pattern found at position: {offset}");\n                    return true;\n                }\n            }\n        }\n\n        Console.WriteLine("Pattern not found.");\n        return false;\n    }\n\n    public static void Main()\n    {\n        string filePath = "path/to/your/binaryfile";\n        byte[] pattern = System.Text.Encoding.ASCII.GetBytes(".debug_info");\n\n        SearchForPattern(filePath, pattern);\n    }\n}