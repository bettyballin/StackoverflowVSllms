using System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing Microsoft.EntityFrameworkCore;\n\n// Define your model class\npublic class MyEntity\n{\n    [Key]\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n\n// Define a DbContext that works with in-memory data source\npublic class MyDbContext : DbContext\n{\n    public DbSet<MyEntity> MyEntities { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        // Use in-memory database for demonstration purposes\n        optionsBuilder.UseInMemoryDatabase("MyDisconnectedDataset");\n    }\n}\n\n// Usage example\nclass Program\n{\n    static void Main()\n    {\n        using (var context = new MyDbContext())\n        {\n            var dataFromDisconnectedSource = new List<MyEntity>\n            {\n                new MyEntity { Id = 1, Name = "Item 1" },\n                new MyEntity { Id = 2, Name = "Item 2" }\n            };\n\n            // Manually add entities to context\n            foreach (var entity in dataFromDisconnectedSource)\n            {\n                context.MyEntities.Add(entity);\n            }\n\n            context.SaveChanges();\n\n            // Retrieve and display entries\n            var entities = context.MyEntities.AsNoTracking().ToList();\n            foreach (var entity in entities)\n            {\n                System.Console.WriteLine($"Id: {entity.Id}, Name: {entity.Name}");\n            }\n        }\n    }\n}