using System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Reflection;\n\npublic static class IEnumerableExtensions\n{\n    public static DataTable ToDataTable<T>(this IEnumerable<T> items)\n    {\n        var dataTable = new DataTable(typeof(T).Name);\n\n        // Get all the properties\n        PropertyInfo[] props = typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance);\n        foreach (PropertyInfo prop in props)\n        {\n            // Setting column names and types\n            var type = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;\n            dataTable.Columns.Add(prop.Name, type);\n        }\n\n        foreach (T item in items)\n        {\n            var values = new object[props.Length];\n            for (int i = 0; i < props.Length; i++)\n            {\n                // Inserting property values to datatable rows\n                values[i] = props[i].GetValue(item, null) ?? DBNull.Value;\n            }\n            dataTable.Rows.Add(values);\n        }\n\n        return dataTable;\n    }\n}