// Server side (runs on .NET 1.1)\nusing System;\nusing System.IO.Pipes;\n\npublic class PipeServer {\n    public static void Main(string[] args) {\n        using(PipeServerStream pipe = new AnonymousPipeServerStream(PipeDirection.Out)) {\n            Console.WriteLine("Waiting for client to connect...");\n            Console.WriteLine($"Send Handle To Client: {pipe.GetClientHandleAsString()}");\n            using(PipeClientStream pipeClient = PipeStream.CreateFromHandle(new SafeFileHandle(pipe.GetClientHandleAsIntPtr(), true), System.IO.Pipes.PipeDirection.In, 0)) {\n                pipe.DisposeLocalCopyOfClientHandle();\n                Console.WriteLine("Client connected.");\n                byte[] transmissionString;\n                using(StreamWriter sw = new StreamWriter(pipe)) {\n                    sw.WriteLine("Hello from server!");\n                    sw.Flush(); //flush stream so client can read\n                }\n            }\n        }\n    }\n}\n\n// Client side (runs on .NET 3.5)\nusing System;\nusing System.IO.Pipes;\n\npublic class PipeClient {\n    public static void Main(string[] args) {\n        string pipeHandleString = Console.ReadLine();\n        IntPtr pipeHandle = new IntPtr(int.Parse(pipeHandleString));\n        using(PipeStream pipe = PipeStream.CreateFromHandle(pipeHandle, System.IO.Pipes.PipeDirection.Out)) {\n            using(StreamReader sr = new StreamReader(pipe)) {\n                string message;\n                while((message = sr.ReadLine()) != null) {\n                    Console.WriteLine("Received from Server: " + message);\n                }\n            }\n        }\n    }\n}