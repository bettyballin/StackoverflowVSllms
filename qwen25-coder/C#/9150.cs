using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class ItemService\n{\n    private readonly MyDbContext _context;\n\n    public ItemService(MyDbContext context)\n    {\n        _context = context;\n    }\n\n    public List<Item> GetTwoRandomItems(int userId)\n    {\n        var allItems = _context.Items.ToList();\n        \n        // Create all possible combinations (ignoring order)\n        var allCombinations = \n            from i1 in allItems\n            join i2 in allItems on true equals true\n            where i1.Id < i2.Id\n            select new Tuple<int, int>(i1.Id, i2.Id);\n\n        // Get viewed combinations for the user\n        var viewedCombinations =\n            _context.Ratings.Where(r => r.UserId == userId)\n                            .Select(r => new Tuple<int, int>(r.BetterObjectId, r.WorseObjectId))\n                            .ToList();\n\n        // Exclude viewed combinations\n        var availableCombinations = \n            allCombinations.Except(viewedCombinations);\n\n        if (!availableCombinations.Any())\n        {\n            throw new Exception("No more unique pairs left to display.");\n        }\n\n        // Pick a random combination from remaining ones\n        Random rand = new Random();\n        var selectedCombination = availableCombinations.ElementAt(rand.Next(availableCombinations.Count));\n\n        // Retrieve the items based on the selected combination\n        return _context.Items.Where(i => i.Id == selectedCombination.Item1 || i.Id == selectedCombination.Item2).ToList();\n    }\n}