using System;\nusing System.Drawing;\nusing System.Runtime.InteropServices;\nusing System.Windows.Forms;\n\npublic class CustomDateTimePicker : DateTimePicker\n{\n    private const int WM_ERASEBKGND = 0x14;\n    private const int WM_CTLCOLOREDIT = 0x133;\n\n    [DllImport("user32.dll")]\n    private static extern IntPtr SendMessage(IntPtr hWnd, uint Msg, IntPtr wParam, IntPtr lParam);\n\n    protected override void WndProc(ref Message m)\n    {\n        base.WndProc(ref m);\n        \n        // Handle background color erasing\n        if (m.Msg == WM_ERASEBKGND)\n            using (Graphics g = Graphics.FromHdc(m.WParam))\n                g.FillRectangle(new SolidBrush(this.BackColor), this.ClientRectangle);\n\n        // Change edit control background color\n        else if (m.Msg == WM_CTLCOLOREDIT)\n        {\n            IntPtr hdc = m.WParam;\n            using (SolidBrush brush = new SolidBrush(BackColor))\n                SendMessage(ChildEditHandle, 0x0014, hdc, IntPtr.Zero); // WM_ERASEBKGND\n\n            // Set the text color\n            if ((m.LParam.ToInt32() & 0xFFFF) == ChildEditHandle.ToInt32())\n                using (Pen pen = new Pen(ForeColor))\n                    SendDrawControlMsg(ref m, hdc, pen.Color);\n\n            // Set the background color for edit control\n            IntPtr result = SendMessage(m.LParam, 0x138, (IntPtr)3, (IntPtr)BackColor.ToArgb());\n            if (result != IntPtr.Zero)\n                m.Result = result;\n        }\n    }\n\n    [DllImport("user32.dll")]\n    static extern bool GetWindowRect(IntPtr hWnd, out Rect lpRect);\n        \n    [DllImport("user32.dll")]\n    static extern IntPtr FindWindowEx(IntPtr parentHandle, IntPtr childAfter, string className, IntPtr windowTitle);\n\n    private struct Rect\n    {\n        public int Left;\n        public int Top;\n        public int Right;\n        public int Bottom;\n\n        public Rectangle ToRectangle()\n        {\n            return new Rectangle(Left, Top, Right - Left, Bottom - Top);\n        }\n    }\n\n    private void SendDrawControlMsg(ref Message m, IntPtr hdc, Color color)\n    {\n        using (Bitmap bmp = new Bitmap(this.Width, this.Height))\n        {\n            using (Graphics g = Graphics.FromImage(bmp))\n                SendMessage(m.LParam, WM_CTLCOLOREDIT, hdc, IntPtr.Zero);\n\n            IntPtr hOldBrush = GetStockObject(5); // WHITE_BRUSH\n            IntPtr brushHandle = CreateSolidBrush(color.ToArgb());\n            SelectObject(hdc, brushHandle);\n            \n            m.Result = (IntPtr)brushHandle;\n\n            if (hOldBrush != IntPtr.Zero)\n                DeleteObject(hOldBrush);\n\n            // Redraw child controls with the new color\n            DrawChildControls(m.LParam, hdc);\n        }\n    }\n\n    [DllImport("gdi32.dll")]\n    private static extern IntPtr GetStockObject(int fnObject);\n\n    [DllImport("gdi32.dll", ExactSpelling = true)]\n    public static extern IntPtr CreateSolidBrush(uint crColor);\n\n    [DllImport("gdi32.dll", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    public static extern bool DeleteObject(IntPtr hObject);\n\n    [DllImport("gdi32.dll")]\n    private static extern IntPtr SelectObject(IntPtr hdc, IntPtr hgdiobj);\n\n    \n    // Redraws all child controls on the main control's device context\n    private void DrawChildControls(IntPtr hWnd, IntPtr hdc)\n    {\n        bool redrawRequired = true;\n        IntPtr child = IntPtr.Zero;\n\n        while (redrawRequired)\n        {\n            child = FindWindowEx(hWnd, child, null, IntPtr.Zero);\n            if (child == IntPtr.Zero)\n                redrawRequired = false;\n            else\n                SendMessage(child, WM_ERASEBKGND, hdc, IntPtr.Zero);\n        }\n    }\n\n    private IntPtr ChildEditHandle\n    {\n        get { return this.Handle; }\n    }\n}