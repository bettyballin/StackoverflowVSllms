using System;\nusing System.ComponentModel;\nusing System.Reflection;\n\npublic class GuidToByteArrayConverter : TypeConverter\n{\n    public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)\n    {\n        if (sourceType == typeof(Guid))\n        {\n            return true;\n        }\n        return base.CanConvertFrom(context, sourceType);\n    }\n\n    public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)\n    {\n        if (value is Guid guid)\n        {\n            return guid.ToByteArray();\n        }\n        return base.ConvertFrom(context, culture, value);\n    }\n\n    public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)\n    {\n        if (destinationType == typeof(byte[]))\n        {\n            return true;\n        }\n        return base.CanConvertTo(context, destinationType);\n    }\n\n    public override object ConvertTo(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType)\n    {\n        if (value is Guid guid && destinationType == typeof(byte[]))\n        {\n            return guid.ToByteArray();\n        }\n        return base.ConvertTo(context, culture, value, destinationType);\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Register the custom type converter for Guid\n        TypeDescriptor.AddAttributes(typeof(Guid), new TypeConverterAttribute(typeof(GuidToByteArrayConverter)));\n\n        Guid g = Guid.NewGuid();\n        object o1 = g;\n        \n        // Convert using ChangeType now should work with our custom conversion\n        byte[] b = (byte[])Convert.ChangeType(o1, typeof(byte[]));\n        Console.WriteLine(BitConverter.ToString(b));  // Output the converted byte array in a readable format.\n    }\n}