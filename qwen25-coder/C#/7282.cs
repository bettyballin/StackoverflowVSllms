using System;\nusing System.Configuration;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class ConfigEncryption\n{\n    private static readonly string EncryptionKey = "YourSecretKey12345"; // Must be 16 bytes for AES-128\n\n    public static void EncryptSection(string section)\n    {\n        var config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);\n        if (config.HasFile)\n        {\n            var element = config.GetSection(section) as ConfigurationElement;\n            if (element != null && !element.SectionInformation.IsProtected)\n            {\n                element.SectionInformation.ProtectSection("DataProtectionConfigurationProvider");\n                element.SectionInformation.ForceSave = true;\n                config.Save(ConfigurationSaveMode.Modified);\n                ConfigurationManager.RefreshSection(section);\n                Console.WriteLine($"Encrypted section: {section}");\n            }\n            else\n            {\n                Console.WriteLine($"Section '{section}' does not exist or is already encrypted.");\n            }\n        }\n    }\n\n    public static void DecryptSection(string section)\n    {\n        var config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);\n        if (config.HasFile)\n        {\n            var element = config.GetSection(section) as ConfigurationElement;\n            if (element != null && element.SectionInformation.IsProtected)\n            {\n                element.SectionInformation.UnprotectSection();\n                element.SectionInformation.ForceSave = true;\n                config.Save(ConfigurationSaveMode.Modified);\n                ConfigurationManager.RefreshSection(section);\n                Console.WriteLine($"Decrypted section: {section}");\n            }\n            else\n            {\n                Console.WriteLine($"Section '{section}' does not exist or is already decrypted.");\n            }\n        }\n    }\n\n    private static string EncryptString(string plainText)\n    {\n        using (Aes aesAlg = Aes.Create())\n        {\n            aesAlg.Key = Encoding.UTF8.GetBytes(EncryptionKey);\n            aesAlg.IV = new byte[16]; // Initialization vector\n\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n            using (MemoryStream msEncrypt = new MemoryStream())\n            {\n                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                {\n                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))\n                    {\n                        swEncrypt.Write(plainText);\n                    }\n                    return Convert.ToBase64String(msEncrypt.ToArray());\n                }\n            }\n        }\n    }\n\n    private static string DecryptString(string cipherText)\n    {\n        using (Aes aesAlg = Aes.Create())\n        {\n            aesAlg.Key = Encoding.UTF8.GetBytes(EncryptionKey);\n            aesAlg.IV = new byte[16]; // Initialization vector\n\n            ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);\n\n            using (MemoryStream msDecrypt = new MemoryStream(Convert.FromBase64String(cipherText)))\n            {\n                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n                {\n                    using (StreamReader srDecrypt = new StreamReader(csDecrypt))\n                    {\n                        return srDecrypt.ReadToEnd();\n                    }\n                }\n            }\n        }\n    }\n\n    public static void Main(string[] args)\n    {\n        // Example usage\n        EncryptSection("connectionStrings");\n        DecryptSection("connectionStrings");\n    }\n}