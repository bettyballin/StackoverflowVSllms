using System;\nusing System.Data;\nusing System.Data.SqlClient;\n\n// Entity class\npublic class Product\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n\n// Repository interface\npublic interface IProductRepository\n{\n    void Insert(Product product, Category category);\n}\n\n// Concrete repository implementation\npublic class ProductRepository : IProductRepository\n{\n    private readonly IDbConnection _dbConnection;\n\n    public ProductRepository(IDbConnection dbConnection)\n    {\n        _dbConnection = dbConnection ?? throw new ArgumentNullException(nameof(dbConnection));\n    }\n\n    public void Insert(Product product, Category category)\n    {\n        using (var transaction = _dbConnection.BeginTransaction())\n        {\n            try\n            {\n                // Logic to insert into Product table\n                var productCommand = new SqlCommand("INSERT INTO Products(Name) VALUES(@Name); SELECT SCOPE_IDENTITY();", _dbConnection, transaction);\n                productCommand.Parameters.AddWithValue("@Name", product.Name);\n\n                product.Id = Convert.ToInt32(productCommand.ExecuteScalar());\n\n                // Inserting related data into Category_Products table\n                var categoryProductCommand = new SqlCommand("INSERT INTO Category_Products(ProductId, CategoryId) VALUES(@ProductId, @CategoryId);", _dbConnection, transaction);\n                categoryProductCommand.Parameters.AddWithValue("@ProductId", product.Id);\n                categoryProductCommand.Parameters.AddWithValue("@CategoryId", category.Id);\n\n                categoryProductCommand.ExecuteNonQuery();\n\n                // Commit transaction\n                transaction.Commit();\n            }\n            catch\n            {\n                // Rollback in case of exception\n                transaction.Rollback();\n                throw;\n            }\n        }\n    }\n}\n\n// Domain logic class using the repository\npublic class ProductService\n{\n    private readonly IProductRepository _productRepository;\n\n    public ProductService(IProductRepository productRepository)\n    {\n        _productRepository = productRepository ?? throw new ArgumentNullException(nameof(productRepository));\n    }\n\n    public void CreateProduct(Product product, Category category)\n    {\n        // Business logic can go here before the actual database operation\n        _productRepository.Insert(product, category);\n    }\n}