using System;\nusing System.Threading;\nusing System.Windows.Forms;\n\nnamespace EngineerTool\n{\n    public partial class MainForm : Form\n    {\n        private Discover discovery;\n\n        public MainForm()\n        {\n            InitializeComponent();\n            discovery = new Discover();\n            discovery.SearchFinished += OnSearchFinished; // Subscribe to the event\n            discovery.Start();\n        }\n\n        private void OnSearchFinished(object sender, EventArgs e)\n        {\n            if (InvokeRequired) // Check if you need to invoke for thread-safe access\n                Invoke(new MethodInvoker(OnSearchFinished), new object[] { sender, e });\n            else\n                FinishedSearch(); // Search has finished here!\n        }\n\n        private void FinishedSearch()\n        {\n            // Handle the search completion logic here\n        }\n    }\n}\n\nnamespace DiscoveryTool\n{\n    public delegate void SearchFinishedEventHandler(object sender, EventArgs e);\n\n    public class Discover\n    {\n        public event SearchFinishedEventHandler SearchFinished; // Define an event\n\n        public void Start()\n        {\n            Thread workerThread = new Thread(ThreadWorker);\n            workerThread.Start();\n        }\n\n        private void ThreadWorker()\n        {\n            // Simulate some work\n            Thread.Sleep(1000); \n\n            OnSearchFinished(); // Raise the event when done\n        }\n\n        protected virtual void OnSearchFinished()\n        {\n            SearchFinished?.Invoke(this, EventArgs.Empty);\n        }\n    }\n}