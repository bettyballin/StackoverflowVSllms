using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Linq.Expressions;\n\npublic class SimpleDbSet<T> : IQueryable<T>\n{\n    private readonly Expression _expression;\n\n    public Type ElementType => typeof(T);\n    public Expression Expression => _expression ??= Expression.Constant(this);\n    public IQueryProvider Provider { get; }\n\n    public SimpleDbSet()\n    {\n        Provider = new SimpleLinqProvider();\n    }\n\n    public IEnumerator<T> GetEnumerator() => throw new NotImplementedException("Enumeration is not implemented.");\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();\n}\n\npublic class SimpleLinqProvider : IQueryProvider\n{\n    private readonly ExpressionVisitor _translator = new ExpressionTranslator();\n\n    public IQueryable CreateQuery(Expression expression) => new SimpleDbSet<object> { Provider = this };\n\n    public IQueryable<TElement> CreateQuery<TElement>(Expression expression)\n        => (IQueryable<TElement>)Activator.CreateInstance(typeof(SimpleDbSet<>).MakeGenericType(typeof(TElement)), BindingFlags.NonPublic | BindingFlags.Instance, null, new object[] { }, null);\n\n    public object Execute(Expression expression) => throw new NotImplementedException("Execute is not implemented.");\n\n    public TResult Execute<TResult>(Expression expression)\n    {\n        // Translate the LINQ expression to SQL\n        var sql = _translator.Translate(expression);\n        Debug.WriteLine(sql);  // Output or log the generated SQL\n\n        return default(TResult);\n    }\n}\n\npublic class ExpressionTranslator : ExpressionVisitor\n{\n    private string _sql;\n\n    protected override Expression VisitMethodCall(MethodCallExpression m)\n    {\n        if (m.Method.Name == "Where")\n        {\n            _sql = "SELECT ";\n            var tableType = ((ConstantExpression)m.Arguments[0]).Type.GetGenericArguments()[0];\n            _sql += string.Join(", ", tableType.GetProperties().Select(p => p.Name));\n            _sql += $" FROM {tableType.Name} WHERE ";\n            _sql += Visit(m.Arguments[1]);\n        }\n        return m;\n    }\n\n    protected override Expression VisitLambda<T>(Expression<T> node)\n    {\n        return Visit(node.Body);\n    }\n\n    protected override Expression VisitBinary(BinaryExpression b)\n    {\n        _sql += "(" + this.Visit(b.Left) + " ";\n        switch (b.NodeType)\n        {\n            case ExpressionType.Equal:\n                _sql += "=";\n                break;\n            case ExpressionType.AndAlso:\n                _sql += "AND";\n                break;\n            // Add more operators as needed\n        }\n        _sql += " " + this.Visit(b.Right) + ")";\n        return b;\n    }\n\n    protected override Expression VisitMember(MemberExpression m)\n    {\n        _sql += m.Member.Name;\n        return m;\n    }\n\n    public string Translate(Expression expression)\n    {\n        Visit(expression);\n        return _sql ?? throw new Exception("Unable to translate the given LINQ query.");\n    }\n}\n\n// Usage\npublic class User  // Assume the table name is also User\n{\n    public int Id { get; set; }  // Column names match property names\n    public string Name { get; set; }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        var users = new SimpleDbSet<User>();\n        users.Where(u => u.Name == "John").ToList();\n    }\n}