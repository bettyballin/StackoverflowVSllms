using System;\nusing System.IO;\nusing Org.BouncyCastle.Crypto;\nusing Org.BouncyCastle.Crypto.Engines;\nusing Org.BouncyCastle.Crypto.Encodings;\nusing Org.BouncyCastle.Crypto.Generators;\nusing Org.BouncyCastle.Crypto.Parameters;\nusing Org.BouncyCastle.OpenSsl;\n\npublic class PKIExample\n{\n    public static void Main()\n    {\n        // Generate RSA keys or load them from files\n        var keyPair = GenerateRSAKeyPair();\n        \n        // Save the private and public keys to files (optional)\n        SavePemEncodedFile("private_key.pfx", keyPair.Private);\n        SavePemEncodedFile("public_key.cer", keyPair.Public);\n\n        // Load the keys from files (unsecure just for demonstration)\n        var privateKey = (RsaPrivateCrtKeyParameters)LoadPemFromFile<RsaPrivateCrtKeyParameters>("private_key.pfx");\n        var publicKey = (RsaKeyParameters)LoadPemFromFile<RsaKeyParameters>("public_key.cer");\n\n        // Encrypt and decrypt a message\n        string originalMessage = "Hello, Bouncy Castle!";\n        byte[] encryptedData = RsaEncrypt(publicKey, originalMessage);\n        string decryptedMessage = RsaDecrypt(privateKey, encryptedData);\n\n        Console.WriteLine("Original: {0}", originalMessage);\n        Console.WriteLine("Decrypted: {0}", decryptedMessage);\n    }\n\n    private static AsymmetricCipherKeyPair GenerateRSAKeyPair()\n    {\n        var keyGenerationParameters = new KeyGenerationParameters(new SecureRandom(), 2048);\n        var keyPairGenerator = new RsaKeyPairGenerator();\n        keyPairGenerator.Init(keyGenerationParameters);\n        return keyPairGenerator.GenerateKeyPair();\n    }\n\n    private static byte[] RsaEncrypt(AsymmetricKeyParameter publicKey, string textToEncrypt)\n    {\n        var engine = new Pkcs1Encoding(new RsaEngine());\n        engine.Init(true, publicKey); // true for encryption\n        byte[] inputBytes = System.Text.Encoding.UTF8.GetBytes(textToEncrypt);\n        return engine.ProcessBlock(inputBytes, 0, inputBytes.Length);\n    }\n\n    private static string RsaDecrypt(AsymmetricKeyParameter privateKey, byte[] dataToDecrypt)\n    {\n        var engine = new Pkcs1Encoding(new RsaEngine());\n        engine.Init(false, privateKey); // false for decryption\n        return System.Text.Encoding.UTF8.GetString(engine.ProcessBlock(dataToDecrypt, 0, dataToDecrypt.Length));\n    }\n\n    private static void SavePemEncodedFile(string fileName, object key)\n    {\n        using (var sw = new StreamWriter(fileName))\n        using (var tw = new PemWriter(sw))\n            tw.WriteObject(key);\n    }\n\n    private static T LoadPemFromFile<T>(string filename)\n    {\n        T result;\n        using (var fileStream = File.OpenText(filename))\n        using (var reader = new PemReader(fileStream, null))\n        {\n            var obj = reader.ReadObject();\n            result = (T)obj;\n        }\n        return result;\n    }\n}