using System;\nusing System.IO;\n\nclass FileMonitor\n{\n    public static void Main()\n    {\n        string path = @"C:\Path\To\Your\DatabaseFolder"; // Replace with your database folder path\n        var watcher = new FileSystemWatcher();\n        watcher.Path = path;\n\n        watcher.NotifyFilter = NotifyFilters.LastAccess | NotifyFilters.FileName | NotifyFilters.CreationTime;\n        watcher.Filter = "*.accdb"; // Watch only Access databases\n\n        watcher.Created += OnChanged;\n        watcher.Changed += OnChanged;\n        watcher.Renamed += OnRenamed;\n        watcher.EnableRaisingEvents = true;\n\n        Console.WriteLine("Press 'q' to quit the sample.");\n        while (Console.Read() != 'q') ;\n    }\n\n    private static void OnChanged(object source, FileSystemEventArgs e)\n    {\n        // Specify what is done when a file is changed, created, or deleted.\n        Console.WriteLine($"File: {e.FullPath} {e.ChangeType}");\n        LogToFile(e);\n    }\n\n    private static void OnRenamed(object source, RenamedEventArgs e)\n    {\n        // Specify what is done when a file is renamed.\n        Console.WriteLine($"File: {e.OldFullPath} renamed to {e.FullPath}");\n        LogToFile(e);\n    }\n\n    private static void LogToFile(FileSystemEventArgs e)\n    {\n        using (StreamWriter writer = new StreamWriter("file_access_log.txt", true))\n        {\n            writer.WriteLine($"{DateTime.Now}: {e.ChangeType} - {e.FullPath}");\n        }\n    }\n}