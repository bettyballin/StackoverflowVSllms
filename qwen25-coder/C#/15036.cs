using System;\nusing System.Reflection;\n\nclass WordEventHandler\n{\n    private object wordApplication;\n    private readonly Type wordAppType;\n    private readonly EventInfo documentSaveAsEventInfo;\n    private readonly Delegate saveAsDelegate;\n\n    public WordEventHandler()\n    {\n        // Create an instance of MS Word application.\n        wordApplication = Activator.CreateInstance(Type.GetTypeFromProgID("Word.Application"));\n        wordAppType = wordApplication.GetType();\n\n        // Make sure the Word application is visible (optional).\n        wordAppType.InvokeMember("Visible", BindingFlags.SetProperty, null, wordApplication, new object[] { true });\n\n        // Get a new document.\n        object docs = wordAppType.InvokeMember("Documents", BindingFlags.GetProperty, null, wordApplication, null);\n        Type documentsType = docs.GetType();\n        documentsType.InvokeMember("Add", BindingFlags.InvokeMethod, null, docs, null);\n\n        // Subscribe to the DocumentBeforeSave event.\n        object activeDocument = wordAppType.InvokeMember("ActiveDocument", BindingFlags.GetProperty, null, wordApplication, null);\n        Type documentType = activeDocument.GetType();\n\n        documentSaveAsEventInfo = documentType.GetEvents().FirstOrDefault(e => e.Name == "DocumentBeforeSave");\n        if (documentSaveAsEventInfo != null)\n        {\n            saveAsDelegate = Delegate.CreateDelegate(documentSaveAsEventInfo.EventHandlerType, this, nameof(OnDocumentBeforeSave));\n            documentSaveAsEventInfo.AddEventHandler(activeDocument, saveAsDelegate);\n        }\n    }\n\n    public void OnDocumentBeforeSave(ref bool cancel)\n    {\n        // Event handler logic.\n        Console.WriteLine("Document is about to be saved.");\n        cancel = false; // Set to true if you want to cancel the save operation.\n    }\n\n    public void Dispose()\n    {\n        if (saveAsDelegate != null && documentSaveAsEventInfo != null)\n        {\n            object activeDocument = wordAppType.InvokeMember("ActiveDocument", BindingFlags.GetProperty, null, wordApplication, null);\n            Type documentType = activeDocument.GetType();\n            documentSaveAsEventInfo.RemoveEventHandler(activeDocument, saveAsDelegate);\n        }\n\n        // Quit the Word application.\n        wordAppType.InvokeMember("Quit", BindingFlags.InvokeMethod, null, wordApplication, null);\n    }\n}