using System;\nusing System.Collections.Generic;\nusing System.Linq.Expressions;\nusing System.Web.Mvc;\nusing System.Web.Routing;\n\nnamespace YourNamespace.Extensions\n{\n    public static class HtmlHelperExtensions\n    {\n        public static MvcHtmlString ValidationImageFor<TModel, TValue>(\n            this HtmlHelper<TModel> htmlHelper,\n            Expression<Func<TModel, TValue>> expression,\n            string imagePath = "Error.gif",\n            object htmlAttributes = null)\n        {\n            // Get the validation messages for the specified field\n            var modelState = ModelMetadata.FromLambdaExpression(expression, htmlHelper.ViewData).ModelState;\n            if (modelState == null || !modelState.Errors.Any())\n            {\n                return MvcHtmlString.Empty;\n            }\n\n            // Get the first error message as tooltip text\n            string errorMessage = modelState.Errors.Select(error => error.ErrorMessage).FirstOrDefault();\n\n            // Create a tag builder for the image element\n            var imgBuilder = new TagBuilder("img");\n            imgBuilder.MergeAttribute("src", imagePath);\n            imgBuilder.MergeAttribute("alt", "Error");\n\n            if (!string.IsNullOrEmpty(errorMessage))\n            {\n                imgBuilder.MergeAttribute("title", errorMessage);\n            }\n\n            // Merge any additional HTML attributes\n            if (htmlAttributes != null)\n            {\n                var attributes = htmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributes);\n                imgBuilder.MergeAttributes(attributes);\n            }\n\n            return MvcHtmlString.Create(imgBuilder.ToString());\n        }\n    }\n}