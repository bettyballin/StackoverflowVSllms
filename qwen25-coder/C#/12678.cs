using Org.BouncyCastle.Crypto;\nusing Org.BouncyCastle.Pkcs;\nusing Org.BouncyCastle.Security;\nusing System.IO;\n\npublic byte[] SignEmail(byte[] emailBytes, AsymmetricCipherKeyPair keyPair)\n{\n    // Create a content signer using the private key from the pair\n    var signerGenerator = new Pkcs1Signer(keyPair.Private);\n    var signerInfoGeneratorBuilder = new SignerInfoGeneratorBuilder();\n    CmsSignedDataGenerator signedGen = new CmsSignedDataGenerator();\n\n    var certList = BuildCertificateList(keyPair.Public); // You need to implement this method\n    var signerInfoGenerator = signerInfoGeneratorBuilder.Build(signerGenerator, certList[0]);\n\n    signedGen.AddSignerInfoGenerator(signerInfoGenerator);\n    foreach (var cert in certList)\n        signedGen.AddCertificates(new X509CertStoreCollection { cert });\n\n    // Sign the email bytes\n    CmsProcessableByteArray cms = new CmsProcessableByteArray(emailBytes);\n    CmsSignedData signedData = signedGen.Generate(cms, true);\n\n    using (var stream = new MemoryStream())\n    {\n        signedData.EncodeTo(stream, true); // Encode as CMS/PKCS#7 signed data\n        return stream.ToArray();\n    }\n}