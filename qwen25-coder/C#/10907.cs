using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\npublic class MainForm : Form\n{\n    private NotifyIcon trayIcon;\n    private ContextMenu trayContextMenu;\n\n    public MainForm()\n    {\n        // Initialize the context menu and add some items\n        trayContextMenu = new ContextMenu();\n        trayContextMenu.MenuItems.Add("Exit", Exit_Click);\n\n        // Create a new NotifyIcon\n        trayIcon = new NotifyIcon\n        {\n            Icon = new Icon(SystemIcons.Application), // You can use your own icon here\n            Text = "My Application Notification",\n            Visible = true,\n            ContextMenu = trayContextMenu\n        };\n\n        // Handle left-click and right-click on the tray icon\n        trayIcon.MouseClick += new MouseEventHandler(TrayIcon_MouseClick);\n\n        // Hide the form when it starts, so only the tray icon is visible\n        this.WindowState = FormWindowState.Minimized;\n        this.ShowInTaskbar = false;\n    }\n\n    private void TrayIcon_MouseClick(object sender, MouseEventArgs e)\n    {\n        if (e.Button == MouseButtons.Left)\n        {\n            // Handle left click, for example show a form or a message\n            MessageBox.Show("Left Clicked!");\n        }\n        else if (e.Button == MouseButtons.Right)\n        {\n            // Right click is handled by the context menu defined earlier\n        }\n    }\n\n    private void Exit_Click(object sender, EventArgs e)\n    {\n        trayIcon.Visible = false;\n        Application.Exit();\n    }\n\n    [STAThread]\n    static void Main()\n    {\n        Application.EnableVisualStyles();\n        Application.SetCompatibleTextRenderingDefault(false);\n        Application.Run(new MainForm());\n    }\n}