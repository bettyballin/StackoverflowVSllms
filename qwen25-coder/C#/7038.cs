using System.Data.Linq;\nusing System.Reflection;\n\npublic class AuthorizedDataContext : YourExistingDbContext\n{\n    private readonly ICurrentUser _currentUser; // Service to get current user\n\n    public AuthorizedDataContext(ICurrentUser currentUser)\n        : base()\n    {\n        _currentUser = currentUser;\n    }\n\n    protected override void OnCreated()\n    {\n        this.ExecuteDynamicMethod("OnContextCreated", new object[] { });\n    }\n\n    partial void Tables_Selecting(ref IQueryable<Table> result)\n    {\n        result = FilterTables(result);\n    }\n\n    private IQueryable<Table> FilterTables(IQueryable<Table> tables)\n    {\n        var userPermissions = GetUserPermissions(_currentUser);\n\n        return from table in tables\n               where IsUserPermitted(table.TableName, userPermissions)\n               select table;\n    }\n\n    private bool IsUserPermitted(string tableName, Dictionary<string, bool> permissions)\n    {\n        string permissionKey = "CanView" + tableName;\n        if (permissions.ContainsKey(permissionKey))\n        {\n            return permissions[permissionKey];\n        }\n        return false; // No explicit permission set means no access\n    }\n\n    private Dictionary<string, bool> GetUserPermissions(ICurrentUser currentUser)\n    {\n        var permissions = new Dictionary<string, bool>\n        {\n            { "CanViewX", currentUser.CanViewX },\n            { "CanViewY", currentUser.CanViewY },\n            { "CanViewZ", currentUser.CanViewZ }\n        };\n        return permissions;\n    }\n\n    // Override other methods like Inserting, Updating, Deleting as needed\n}