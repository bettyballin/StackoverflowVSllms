using System.ComponentModel;\nusing System.Windows.Input;\n\npublic class LoginViewModel : INotifyPropertyChanged\n{\n    private string _user;\n    private string _password;\n    private string _server;\n\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    protected virtual void OnPropertyChanged(string propertyName)\n    {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n        UpdateIsLoginEnabled();\n    }\n\n    private bool _isLoginEnabled;\n    public bool IsLoginEnabled\n    {\n        get { return _isLoginEnabled; }\n        set\n        {\n            if (_isLoginEnabled != value)\n            {\n                _isLoginEnabled = value;\n                OnPropertyChanged(nameof(IsLoginEnabled));\n            }\n        }\n    }\n\n    public string User\n    {\n        get { return _user; }\n        set\n        {\n            if (_user != value)\n            {\n                _user = value;\n                OnPropertyChanged(nameof(User));\n            }\n        }\n    }\n\n    public string Password\n    {\n        get { return _password; }\n        set\n        {\n            if (_password != value)\n            {\n                _password = value;\n                OnPropertyChanged(nameof(Password));\n            }\n        }\n    }\n\n    public string Server\n    {\n        get { return _server; }\n        set\n        {\n            if (_server != value)\n            {\n                _server = value;\n                OnPropertyChanged(nameof(Server));\n            }\n        }\n    }\n\n    private void UpdateIsLoginEnabled()\n    {\n        IsLoginEnabled = !string.IsNullOrWhiteSpace(User) &&\n                         !string.IsNullOrWhiteSpace(Password) &&\n                         !string.IsNullOrWhiteSpace(Server);\n    }\n\n    // Optionally, use ICommand for the login command\n    public ICommand LoginCommand { get; set; }\n    public LoginViewModel()\n    {\n        LoginCommand = new RelayCommand(Login, () => IsLoginEnabled);\n    }\n\n    private void Login()\n    {\n        // Your login logic here\n    }\n}\n\npublic class RelayCommand : ICommand\n{\n    private readonly Action _execute;\n    private readonly Func<bool> _canExecute;\n\n    public RelayCommand(Action execute, Func<bool> canExecute = null)\n    {\n        _execute = execute ?? throw new ArgumentNullException(nameof(execute));\n        _canExecute = canExecute;\n    }\n\n    public bool CanExecute(object parameter) => _canExecute == null || _canExecute();\n\n    public void Execute(object parameter) => _execute();\n\n    public event EventHandler CanExecuteChanged\n    {\n        add { CommandManager.RequerySuggested += value; }\n        remove { CommandManager.RequerySuggested -= value; }\n    }\n}