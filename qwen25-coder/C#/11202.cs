using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net;\n\npublic class SimpleCacheItem {\n    public string ETag { get; set; }\n    public byte[] Content { get; set; }\n    public DateTime Expires { get; set; }\n}\n\npublic class SimpleHttpCache {\n    private Dictionary<string, SimpleCacheItem> cache = new Dictionary<string, SimpleCacheItem>();\n\n    public byte[] GetResponse(string url) {\n        if (cache.TryGetValue(url, out var cachedItem)) {\n            // Check expiration\n            if (cachedItem.Expires > DateTime.UtcNow) {\n                using (var request = WebRequest.CreateHttp(url)) {\n                    request.Headers["If-None-Match"] = cachedItem.ETag;\n\n                    using (var response = (HttpWebResponse)request.GetResponse()) {\n                        if ((int)response.StatusCode == 304) { // Not Modified\n                            return cachedItem.Content;\n                        } else if (response.StatusCode == HttpStatusCode.OK) { // New content available\n                            var newContent = ReadResponseStream(response);\n                            UpdateCache(url, response, newContent);\n                            return newContent;\n                        }\n                    }\n                }\n            }\n        }\n\n        // Request is not cached or expired; request fresh data\n        using (var request = WebRequest.CreateHttp(url))\n        using (var response = (HttpWebResponse)request.GetResponse()) {\n            if (response.StatusCode == HttpStatusCode.OK) {\n                var content = ReadResponseStream(response);\n                UpdateCache(url, response, content);\n                return content;\n            }\n            throw new InvalidOperationException($"Bad status code: {response.StatusCode}");\n        }\n    }\n\n    private byte[] ReadResponseStream(HttpWebResponse response) {\n        using (var stream = response.GetResponseStream())\n        using (var reader = new System.IO.BinaryReader(stream))\n            return reader.ReadBytes((int)(response.ContentLength ?? 0));\n    }\n\n    private void UpdateCache(string url, HttpWebResponse response, byte[] content) {\n        if (DateTime.TryParse(response.Headers["Expires"], out var expires)) {\n            cache[url] = new SimpleCacheItem {\n                ETag = response.Headers["ETag"],\n                Content = content,\n                Expires = expires\n            };\n        }\n    }\n}