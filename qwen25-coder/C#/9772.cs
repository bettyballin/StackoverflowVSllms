using System;\nusing System.Runtime.InteropServices;\n\npublic class CredentialManagerExample\n{\n    [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Auto)]\n    private static extern bool CredWrite(ref Credential cred, uint flags);\n\n    [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Unicode)]\n    private static extern bool CredRead(string target, CredentialType type, IntPtr reservedFlag, out IntPtr credentialPtr);\n\n    [DllImport("advapi32.dll")]\n    private static extern void CredFree(IntPtr credPtr);\n\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]\n    private struct Credential\n    {\n        public uint Flags;\n        public uint Type;\n        public string TargetName;\n        public string Comment;\n        public FILETIME LastWritten;\n        public uint CredentialBlobSize;\n        public IntPtr CredentialBlob;\n        public uint Persist;\n        public uint AttributeCount;\n        public IntPtr Attributes;\n        public string TargetAlias;\n        public string UserName;\n    }\n\n    enum CredentialType\n    {\n        Generic = 1,\n        DomainPassword = 2,\n        CertificateBased = 3,\n        UsernameTargetCredentials = 4,\n        Blob = 5,\n        Federated = 6,\n        LegacyGeneric = 7,\n        RemoteInteractiveTlsSecret = 8,\n        RemoteInteractivePasswordSecret = 9,\n        GenericCertificate = 10,\n    }\n\n    private static void Main()\n    {\n        // Store a credential\n        var cred = new Credential();\n        cred.Type = (uint)CredentialType.Generic;\n        cred.TargetName = "MyApp:WebService";\n        cred.UserName = "username";\n        cred.CredentialBlobSize = System.Text.Encoding.Unicode.GetBytes("password").Length;\n        cred.CredentialBlob = Marshal.StringToCoTaskMemUnicode("password");\n        cred.Persist = 2; // LocalMachine\n\n        bool success = CredWrite(ref cred, 0);\n        if (success)\n            Console.WriteLine("Credential written successfully.");\n        else\n            Console.WriteLine("Failed to write credential.");\n\n        // Retrieve a credential\n        IntPtr credPtr;\n        success = CredRead(cred.TargetName, CredentialType.Generic, IntPtr.Zero, out credPtr);\n        if (success)\n        {\n            var credOut = Marshal.PtrToStructure<Credential>(credPtr);\n            string password = Marshal.PtrToStringUni(credOut.CredentialBlob, (int)credOut.CredentialBlobSize / 2);\n            Console.WriteLine($"Retrieved Username: {credOut.UserName}, Password: {password}");\n            CredFree(credPtr);\n        }\n        else\n        {\n            Console.WriteLine("Failed to read credential.");\n        }\n\n        Marshal.FreeCoTaskMem(cred.CredentialBlob);\n    }\n}