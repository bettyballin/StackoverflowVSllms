using System.Web;\nusing System.Web.Routing;\nusing System.Web.Mvc;\nusing Moq;\nusing NUnit.Framework;\n\n[TestFixture]\npublic class RememberUrlAttributeTests\n{\n    [Test]\n    public void OnActionExecuted_SavesCurrentUrlInSession()\n    {\n        // Arrange\n        var mockHttpContext = new Mock<HttpContextBase>();\n        var mockRequest = new Mock<HttpRequestBase>();\n        var mockResponse = new Mock<HttpResponseBase>();\n        var mockSession = new MockHttpSession();\n\n        // Setup fake URL and session\n        mockHttpContext.Setup(c => c.Request).Returns(mockRequest.Object);\n        mockHttpContext.Setup(c => c.Response).Returns(mockResponse.Object);\n        mockHttpContext.Setup(c => c.Session).Returns(mockSession);\n\n        mockRequest.Setup(r => r.Url).Returns(new System.Uri("http://example.com/test"));\n\n        // Create and configure controller context\n        var context = new ActionExecutedContext()\n        {\n            HttpContext = mockHttpContext.Object,\n            RequestContext = new RequestContext(mockHttpContext.Object, new RouteData())\n        };\n\n        var filter = new RememberUrlAttribute();\n\n        // Act\n        filter.OnActionExecuted(context);\n\n        // Assert\n        Assert.AreEqual("http://example.com/test", (string)mockSession["PreviousURL"]);\n    }\n\n    public class MockHttpSession : HttpSessionStateBase\n    {\n        private Dictionary<string, object> sessionDictionary = new Dictionary<string, object>();\n\n        public override object this[string name]\n        {\n            get { return sessionDictionary.ContainsKey(name) ? sessionDictionary[name] : null; }\n            set { sessionDictionary[name] = value; }\n        }\n    }\n}