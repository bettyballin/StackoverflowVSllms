using System;\n\nclass SpanThing\n{\n    int[][] Data;\n    int[] segmentTree;\n\n    public SpanThing(int[][] data)\n    {\n        Data = data;\n        int n = data[0].Length; // Assuming all rows are of the same length\n        segmentTree = new int[n * 2];\n\n        for (int[] row in data)\n            BuildSegmentTree(row);\n    }\n\n    void BuildSegmentTree(int[] arr)\n    {\n        int n = arr.Length;\n        Array.Copy(arr, 0, segmentTree, n, n);\n\n        for (int i = n - 1; i > 0; --i)\n            segmentTree[i] = Math.Min(segmentTree[i << 1], segmentTree[(i << 1) + 1]);\n    }\n\n    int RangeMinimumQuery(int from, int to)\n    {\n        int result = Int32.MaxValue;\n        for (from += Data[0].Length, to += Data[0].Length; from < to; from >>= 1, to >>= 1)\n        {\n            if ((from & 1) == 1) result = Math.Min(result, segmentTree[from++]);\n            if ((to & 1) == 1) result = Math.Min(result, segmentTree[--to]);\n        }\n        return result;\n    }\n\n    public int[] MinsSmart(int from, int to)\n    {\n        int[] result = new int[Data.Length];\n        for (int i = 0; i < Data.Length; i++)\n            result[i] = RangeMinimumQuery(from, to);\n        return result;\n    }\n}