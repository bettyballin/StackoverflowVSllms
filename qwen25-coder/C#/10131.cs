using System;\nusing System.Collections.Generic;\n\npublic class RobotControlQueueManager\n{\n    private static Queue<string> userQueue = new Queue<string>();\n    private static object queueLock = new object();\n\n    // Method to add user to the queue\n    public static void AddUserToQueue(string sessionId)\n    {\n        lock (queueLock)\n        {\n            userQueue.Enqueue(sessionId);\n        }\n    }\n\n    // Method to check if it's user's turn\n    public static bool IsUsersTurn(string sessionId)\n    {\n        lock (queueLock)\n        {\n            return userQueue.Count > 0 && queue.Peek() == sessionId;\n        }\n    }\n\n    // Method to remove current user from the queue when they're done\n    public static void RemoveCurrentUser()\n    {\n        lock (queueLock)\n        {\n            if (userQueue.Count > 0)\n                userQueue.Dequeue();\n        }\n    }\n\n    // Method to get position in the queue\n    public static int GetUserPosition(string sessionId)\n    {\n        lock (queueLock)\n        {\n            return new List<string>(userQueue).IndexOf(sessionId) + 1;\n        }\n    }\n\n    // Example method for handling user timeout or cancellation\n    public static void RemoveUserFromQueue(string sessionId)\n    {\n        lock (queueLock)\n        {\n            var tempQueue = new Queue<string>();\n            while (userQueue.Count > 0)\n            {\n                string currentSessionId = userQueue.Dequeue();\n                if (currentSessionId != sessionId)\n                    tempQueue.Enqueue(currentSessionId);\n            }\n            userQueue = tempQueue;\n        }\n    }\n}