using System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nnamespace WebServiceMonitor\n{\n    public class ServiceHealthChecker\n    {\n        private readonly HttpClient _httpClient = new HttpClient();\n        private readonly string[] _serviceUrls;\n\n        public ServiceHealthChecker(string[] serviceUrls)\n        {\n            _serviceUrls = serviceUrls;\n        }\n\n        public async Task CheckServices()\n        {\n            foreach (var url in _serviceUrls)\n            {\n                try\n                {\n                    var response = await _httpClient.GetAsync(url);\n                    if (!response.IsSuccessStatusCode)\n                    {\n                        await SendAlertAsync($"Service at {url} returned error: {response.StatusCode}");\n                    }\n                }\n                catch (Exception ex)\n                {\n                    await SendAlertAsync($"Error accessing service at {url}: {ex.Message}");\n                }\n            }\n        }\n\n        private async Task SendAlertAsync(string message)\n        {\n            // Implement your alerting logic here\n            Console.WriteLine(message);\n            // Example: send an email using SMTP, log to a database, etc.\n        }\n    }\n\n    class Program\n    {\n        static async Task Main(string[] args)\n        {\n            var serviceUrls = new string[]\n            {\n                "https://externalservice1.com/api", \n                "https://externalservice2.com/data"\n            };\n\n            var checker = new ServiceHealthChecker(serviceUrls);\n\n            // Run checks every minute\n            while (true)\n            {\n                await checker.CheckServices();\n                await Task.Delay(60000);\n            }\n        }\n    }\n}