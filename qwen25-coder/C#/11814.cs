using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web.Mvc;\nusing System.Web.Routing;\n\npublic class ControllerAndActionsRetriever\n{\n    public IEnumerable<string> GetControllers(RouteCollection routes)\n    {\n        var routeData = new RouteData();\n        var requestContext = new RequestContext(new HttpContextWrapper(System.Web.HttpContext.Current), routeData);\n        return from routeBase in routes.OfType<Route>()\n               from assembly in BuildManager.GetReferencedAssemblies()\n               from type in assembly.GetTypes()\n               where typeof(Controller).IsAssignableFrom(type)\n                     && !type.IsAbstract\n                     && !type.IsInterface\n                     && type.Name.EndsWith("Controller", StringComparison.OrdinalIgnoreCase)\n               select type.FullName;\n    }\n\n    public IEnumerable<string> GetActions(Type controllerType, RouteCollection routes)\n    {\n        var descriptor = new ReflectedControllerDescriptor(controllerType);\n        return descriptor.GetCanonicalActions(routes).Select(a => a.ActionName);\n    }\n}\n\n// Usage Example\nvar retriever = new ControllerAndActionsRetriever();\nvar controllers = retriever.GetControllers(RouteTable.Routes);\nforeach (var controller in controllers)\n{\n    Console.WriteLine("Controller: " + controller);\n    \n    var actions = retriever.GetActions(Type.GetType(controller), RouteTable.Routes);\n    foreach (var action in actions)\n    {\n        Console.WriteLine("\tAction: " + action);\n    }\n}