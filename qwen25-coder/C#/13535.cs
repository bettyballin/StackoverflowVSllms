using System;\nusing System.Reflection;\nusing System.Runtime.InteropServices;\n\npublic enum MyEnum \n{\n    Type1,\n    Type2,\n    // Add other types here\n}\n\npublic struct StructType1 { /* Define fields */ }\npublic struct StructType2 { /* Define fields */ }\n\npublic static class TypeMapper\n{\n    public static Type GetTypeFromEnum(MyEnum val)\n    {\n        switch (val)\n        {\n            case MyEnum.Type1:\n                return typeof(StructType1);\n            case MyEnum.Type2:\n                return typeof(StructType2);\n            // Add cases for other types\n            default:\n                throw new ArgumentException("Unknown enum value", nameof(val));\n        }\n    }\n}\n\npublic class Program\n{\n    [DllImport("yourNativeLibrary.dll")]\n    public static extern IntPtr someNativeFunction(/* params */);\n\n    public static object CastTest(MyEnum val)\n    {\n        // Call a native function that returns a pointer to a structure\n        IntPtr intPtr = someNativeFunction(/* params */);\n\n        // Determine the type of the structure based on the enum value\n        Type structType = TypeMapper.GetTypeFromEnum(val);\n\n        // Use MakeGenericType and Invoke to create an instance dynamically\n        object myStruct = Marshal.PtrToStructure(intPtr, structType);\n\n        return myStruct;\n    }\n\n    public static void Main()\n    {\n        MyEnum val = MyEnum.Type1; // Example value\n        var result = CastTest(val);\n        Console.WriteLine(result.GetType());\n    }\n}