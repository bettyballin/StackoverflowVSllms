public class AntiForgeryModule : IHttpModule\n{\n    public void Init(HttpApplication context)\n    {\n        context.BeginRequest += OnBeginRequest;\n        context.EndRequest += OnEndRequest;\n    }\n\n    private void OnBeginRequest(object sender, EventArgs e)\n    {\n        var context = ((HttpApplication)sender).Context;\n        if (context.Request.HttpMethod == "POST")\n        {\n            string tokenFromForm = context.Request.Form["__RequestVerificationToken"];\n            string tokenCookie = context.Request.Cookies["__RequestVerificationToken"]?.Value;\n\n            if (!AntiForgery.Validate(tokenCookie, tokenFromForm))\n            {\n                throw new InvalidOperationException("CSRF attack detected.");\n            }\n        }\n    }\n\n    private void OnEndRequest(object sender, EventArgs e)\n    {\n        var context = ((HttpApplication)sender).Context;\n        if (context.Request.HttpMethod == "GET")\n        {\n            string cookieToken, formToken;\n            AntiForgery.GetTokens(null, out cookieToken, out formToken);\n\n            HttpCookie tokenCookie = new HttpCookie("__RequestVerificationToken", cookieToken);\n            context.Response.Cookies.Add(tokenCookie);\n\n            var writer = context.Response.Output;\n            int loc = writer.ToString().IndexOf("</form>", StringComparison.Ordinal);\n            if (loc > -1)\n            {\n                writer.WriteAt($"<input type='hidden' name='__RequestVerificationToken' value='{HttpUtility.HtmlEncode(formToken)}'/>", loc);\n            }\n        }\n    }\n\n    public void Dispose() { }\n}