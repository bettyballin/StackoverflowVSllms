using System;\nusing System.Reflection;\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Assuming this is part of a class where EventName is defined.\n        Type type = typeof(YourClassName);\n        EventInfo eventInfo = type.GetEvent("EventName");\n\n        if (eventInfo != null)\n        {\n            MethodInfo addMethod = eventInfo.GetAddMethod();\n            if (addMethod != null)\n            {\n                ParameterInfo[] parameters = addMethod.GetParameters();\n\n                // The first parameter is the delegate, its structure is what you are interested in\n                Type delegateType = parameters[0].ParameterType;\n                \n                // Get the method that the delegate will invoke\n                MethodInfo delegateInvokeMethod = delegateType.GetMethod("Invoke");\n\n                if (delegateInvokeMethod != null)\n                {\n                    ParameterInfo[] eventParameters = delegateInvokeMethod.GetParameters();\n                    foreach (ParameterInfo param in eventParameters)\n                    {\n                        Console.WriteLine($"Event parameter: {param.ParameterType}");\n                    }\n                }\n            }\n        }\n    }\n    \n    public class YourClassName\n    {\n        public event EventHandler<bool> EventName;\n    }\n}