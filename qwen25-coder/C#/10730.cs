using System;\nusing Debug = System.Diagnostics.Debug;\n\npublic class MyObject\n{\n    public event EventHandler<MyEventArgs> MyEvent;\n\n    public void RaiseMyEvent(MyEventArgs args)\n    {\n        MyEvent?.Invoke(this, args);\n    }\n}\n\npublic class MyEventArgs : EventArgs\n{\n    // Custom event arguments if needed\n}\n\npublic class MyMonitor\n{\n    public int EventCount { get; private set; }\n\n    public MyMonitor(MyObject objToMonitor)\n    {\n        objToMonitor.MyEvent += OnMyEvent;\n    }\n\n    private void OnMyEvent(object sender, MyEventArgs e)\n    {\n        EventCount++;\n    }\n}\n\npublic class MyTests\n{\n    public void Test_EventShouldBeRaisedExpectedNumberOfTimes()\n    {\n        var mo = new MyObject();\n        var mon = new MyMonitor(mo);\n        const int expectedCount = 3;\n\n        // Simulate actions that should raise the event\n        for (int i = 0; i < expectedCount; i++)\n        {\n            mo.RaiseMyEvent(new MyEventArgs());\n        }\n\n        Debug.Assert(mon.EventCount == expectedCount, $"Expected {expectedCount} events to be raised, but actually raised {mon.EventCount}");\n    }\n}