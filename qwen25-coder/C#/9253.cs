public class DataProcessor\n{\n    private readonly int _windowSize;\n    private readonly Queue<double> _dataPoints;\n\n    public DataProcessor(int windowSize)\n    {\n        if (windowSize <= 0) throw new ArgumentException("Window size must be greater than zero.");\n        \n        _windowSize = windowSize;\n        _dataPoints = new Queue<double>();\n    }\n\n    // Adds a new data point and returns the smoothed value\n    public double Smooth(double newPoint)\n    {\n        _dataPoints.Enqueue(newPoint);\n        if (_dataPoints.Count > _windowSize) _dataPoints.Dequeue();\n\n        return _dataPoints.Average();\n    }\n}\n\npublic class KinematicsCalculator\n{\n    private DataProcessor _distanceSmoother;\n    private List<double> _distances;\n    private double _lastVelocity;\n\n    public KinematicsCalculator(int smoothingWindowSize)\n    {\n        _lastVelocity = 0;\n        _distances = new List<double>();\n        _distanceSmoother = new DataProcessor(smoothingWindowSize);\n    }\n\n    // Process a new distance reading\n    public (double velocity, double acceleration) Calculate(double distance, double deltaTime)\n    {\n        // Smooth the distance\n        double smoothedDistance = _distanceSmoother.Smooth(distance);\n        _distances.Add(smoothedDistance);\n\n        // If not enough data points yet to calculate velocity and acceleration\n        if (_distances.Count < 2 || deltaTime <= 0) return (0, 0);\n\n        // Calculate velocity using the last two smoothed distances\n        double currentVelocity = (smoothedDistance - _distances[_distances.Count - 2]) / deltaTime;\n        \n        // Calculate acceleration if we have more than two data points\n        double acceleration = 0;\n        if (_distances.Count > 2)\n            acceleration = (currentVelocity - _lastVelocity) / deltaTime;\n\n        _lastVelocity = currentVelocity; // Update last velocity for next acceleration calculation\n        return (currentVelocity, acceleration);\n    }\n}\n\n// Usage example:\nstatic void Main()\n{\n    var calculator = new KinematicsCalculator(3); // Smoothing window size of 3\n    double deltaTime = 0.1; // Example time difference between readings in seconds\n\n    Console.WriteLine(calculator.Calculate(10, deltaTime)); // Distance, deltaTime\n    Console.WriteLine(calculator.Calculate(10, deltaTime));\n    Console.WriteLine(calculator.Calculate(11, deltaTime));\n    Console.WriteLine(calculator.Calculate(12, deltaTime));\n    Console.WriteLine(calculator.Calculate(13, deltaTime));\n}