public sealed class AlphaImage : IDisposable {\n    IImage _image;\n    IntPtr _bufferPtr;\n\n    public static AlphaImage CreateFromBuffer(byte[] buffer, long size) {\n        var instance = new AlphaImage();\n        instance._bufferPtr = Marshal.AllocHGlobal((int)size);\n        Marshal.Copy(buffer, 0, instance._bufferPtr, (int)size);\n        GetIImagingFactory().CreateImageFromBuffer(instance._bufferPtr, (uint)size, BufferDisposalFlag.BufferDisposalFlagGlobalFree, out IImage img);\n        instance.SetImage(img);\n        return instance;\n    }\n\n    void SetImage(IImage image) {\n        _image = image;\n    }\n\n    public void Dispose() {\n        try {\n            Marshal.FinalReleaseComObject(_image);\n            if (_bufferPtr != IntPtr.Zero)\n                Marshal.FreeHGlobal(_bufferPtr);\n        }\n        finally {\n            GC.SuppressFinalize(this); // Suppress finalization\n        }\n    }\n}