using System;\nusing System.Net;\n\nclass ProxyServer {\n    private readonly HttpListener _listener = new HttpListener();\n\n    public void Start(string prefix) {\n        if (prefix == null || !Uri.IsWellFormedUriString(prefix, UriKind.Absolute))\n            throw new ArgumentException("Prefix must be a well-formed absolute URL");\n\n        _listener.Prefixes.Add(prefix);\n        _listener.Start();\n        Console.WriteLine($"Listening for requests on {prefix}");\n\n        while (_listener.IsListening) {\n            var context = _listener.GetContext(); // This blocks until a request is ready\n            try {\n                ProcessRequest(context);\n            } catch (Exception ex) {\n                Console.Error.WriteLine("Error processing request: " + ex.Message);\n                try {\n                    context.Response.StatusCode = 500;\n                    using (var writer = new System.IO.StreamWriter(context.Response.OutputStream))\n                        writer.Write("Server Error");\n                } catch { /* ignored */ }\n            } finally {\n                context.Response.Close();\n            }\n        }\n    }\n\n    private void ProcessRequest(HttpListenerContext context) {\n        Console.WriteLine($"Handling request: {context.Request.Url}");\n        // Here you would implement the logic to forward requests and handle responses\n    }\n\n    public void Stop() {\n        _listener.Stop();\n        _listener.Close();\n        Console.WriteLine("Stopped listening.");\n    }\n\n    static void Main(string[] args) {\n        var proxy = new ProxyServer();\n        proxy.Start("http://+:8080/");\n        // To stop the server, call proxy.Stop()\n    }\n}