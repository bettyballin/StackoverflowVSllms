public class CustomerViewModel : INotifyPropertyChanged\n{\n    private readonly IEventAggregator _eventAggregator;\n    private readonly INotificationService _notificationService;\n    private Customer _customer;\n\n    public CustomerViewModel(Customer customer, INotificationService notificationService)\n    {\n        _customer = customer;\n        _notificationService = notificationService;\n        _customer.PropertyChanged += Customer_PropertyChanged;\n        _notificationService.ErrorsChanged += HandleErrors;\n    }\n\n    private void HandleErrors(object sender, IReadOnlyDictionary<string, List<string>> e)\n    {\n        // Process errors...\n    }\n\n    private void Customer_PropertyChanged(object sender, PropertyChangedEventArgs e)\n    {\n        OnPropertyChanged(e.PropertyName);\n\n        if (_customer.HasErrors)\n        {\n            var errors = _customer.GetErrors(e.PropertyName);\n            if (errors != null && ((IEnumerable)errors).Cast<object>().Any())\n                _notificationService.NotifyErrors(e.PropertyName, ((IEnumerable)errors).Cast<string>());\n        }\n    }\n\n    public string FirstName\n    {\n        get { return _customer.FirstName; }\n        set { _customer.FirstName = value; }\n    }\n\n    public string LastName\n    {\n        get { return _customer.LastName; }\n        set { _customer.LastName = value; }\n    }\n\n    public string FullName\n    {\n        get { return _customer.FullName; }\n    }\n\n    public event PropertyChangedEventHandler PropertyChanged;\n}