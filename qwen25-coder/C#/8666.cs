using System;\nusing System.Runtime.InteropServices;\n\npublic class DependencyChecker\n{\n    [DllImport("kernel32.dll", SetLastError = true)]\n    private static extern IntPtr LoadLibrary(string lpFileName);\n\n    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]\n    private static extern bool GetModuleFileNameEx(IntPtr hProcess, IntPtr hModule,\n        [Out] char[] lpBaseName, int nSize);\n\n    public string GetDllPath(string dllName)\n    {\n        IntPtr ptr = LoadLibrary(dllName);\n        if (ptr == IntPtr.Zero)\n            throw new Exception("Could not load library");\n\n        var sb = new char[1024];\n        if (!GetModuleFileNameEx(IntPtr.Zero, ptr, sb, sb.Length))\n            throw new Exception("Failed to retrieve module file name");\n\n        return new string(sb).TrimEnd('\0');\n    }\n\n    public static void Main()\n    {\n        var checker = new DependencyChecker();\n        try\n        {\n            // Replace "example.dll" with the DLL you want to check\n            Console.WriteLine(checker.GetDllPath("example.dll"));\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n}