using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class EncryptionHelper\n{\n    public static (string encryptedData, string encryptedKey) EncryptRsaAes(string plainText)\n    {\n        var publicKey = new RSACryptoServiceProvider().ToXmlString(false); // This should be your actual public key.\n        \n        using (var aesAlg = Aes.Create())\n        {\n            aesAlg.GenerateKey();\n            aesAlg.GenerateIV();\n\n            using (var encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV))\n            {\n                using (var msEncrypt = new MemoryStream())\n                {\n                    using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                    {\n                        using (var swEncrypt = new StreamWriter(csEncrypt))\n                        {\n                            swEncrypt.Write(plainText);\n                        }\n                        var encrypted = msEncrypt.ToArray();\n\n                        // Encrypt the symmetric key and IV with RSA.\n                        var rsa = new RSACryptoServiceProvider();\n                        rsa.FromXmlString(publicKey); // Load your actual public key.\n                        var encryptedKey = rsa.Encrypt(aesAlg.Key, false);\n\n                        return (BytesToString(encrypted), BytesToString(encryptedKey));\n                    }\n                }\n            }\n        }\n    }\n\n    private static string BytesToString(byte[] bytes)\n    {\n        StringBuilder hexString = new StringBuilder(bytes.Length * 2);\n        foreach (byte b in bytes)\n            hexString.AppendFormat("{0:x2}", b);\n        return hexString.ToString();\n    }\n}