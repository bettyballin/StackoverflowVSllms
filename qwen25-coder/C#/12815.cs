using (var context = new YourDbContext())\n{\n    // Retrieve the entity from the database.\n    var entity = context.YourEntities.Find(id);\n    \n    if (entity != null)\n    {\n        // Detach the entity from the context so that it doesn't track changes.\n        context.Entry(entity).State = EntityState.Detached;\n\n        // Create a new instance of the entity and set only the ID\n        var updatedEntity = new YourEntity { Id = id };\n\n        // Set the property you want to update\n        updatedEntity.YourColumnToBeUpdated = newValue;\n\n        // Attach the new instance to the context and mark the specific field as modified.\n        context.Entry(updatedEntity).State = EntityState.Unchanged;\n        context.Entry(updatedEntity).Property(e => e.YourColumnToBeUpdated).IsModified = true;\n\n        try\n        {\n            // Save changes to the database.\n            context.SaveChanges();\n        }\n        catch (DbUpdateConcurrencyException ex)\n        {\n            // Handle the concurrency exception if needed.\n            Console.WriteLine("Concurrent modification occurred.");\n        }\n    }\n}