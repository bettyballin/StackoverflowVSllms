using System;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\n\npublic class SocketServerExample\n{\n    private byte[] buffer = new byte[4096];\n    private int expectedBytes = -1; // Number of bytes we expect to read for the current message.\n\n    public void StartListening()\n    {\n        TcpListener listener = new TcpListener(IPAddress.Any, 13000);\n        listener.Start();\n        Console.WriteLine("Waiting for a connection...");\n\n        TcpClient client = listener.AcceptTcpClient();\n        NetworkStream stream = client.GetStream();\n\n        // Begin reading data\n        ReceiveData(stream, buffer);\n\n        Console.ReadLine();\n    }\n\n    private void ReceiveData(NetworkStream stream, byte[] readBuffer)\n    {\n        stream.BeginRead(readBuffer, 0, readBuffer.Length,\n            new AsyncCallback(DataReceivedCallback), new object[] { stream, readBuffer });\n    }\n\n    private void DataReceivedCallback(IAsyncResult ar)\n    {\n        NetworkStream stream = (NetworkStream)ar.AsyncState;\n        byte[] buffer = readBuffer;\n\n        int bytesRead = stream.EndRead(ar);\n\n        if (bytesRead == 0)\n        {\n            Console.WriteLine("Client disconnected.");\n            return;\n        }\n\n        // Process received data\n        ProcessReceivedData(buffer, bytesRead, stream);\n    }\n\n    private void ProcessReceivedData(byte[] data, int bytesReceived, NetworkStream stream)\n    {\n        ArraySegment<byte> dataBuffer = new ArraySegment<byte>(data, 0, bytesReceived);\n        while (dataBuffer.Count > 0)\n        {\n            if (expectedBytes == -1 && dataBuffer.Count >= sizeof(int))\n            {\n                // Read the message length\n                int length = BitConverter.ToInt32(dataBuffer.Array, dataBuffer.Offset);\n                expectedBytes = length;\n\n                // Remove the length prefix from the buffer\n                dataBuffer = new ArraySegment<byte>(dataBuffer.Array, dataBuffer.Offset + sizeof(int), dataBuffer.Count - sizeof(int));\n            }\n\n            if (expectedBytes > 0)\n            {\n                int availableBytes = Math.Min(expectedBytes, dataBuffer.Count);\n                byte[] messageData = dataBuffer.Take(availableBytes).ToArray();\n                expectedBytes -= availableBytes;\n\n                // Remove the processed part of the message from the buffer\n                dataBuffer = new ArraySegment<byte>(dataBuffer.Array, dataBuffer.Offset + availableBytes, dataBuffer.Count - availableBytes);\n\n                if (expectedBytes == 0)\n                {\n                    // We received a complete message\n                    ProcessMessage(messageData);\n                }\n            }\n\n            if (expectedBytes < 0 || dataBuffer.Count == 0) break;\n        }\n\n        if (dataBuffer.Count > 0 && expectedBytes != 0)\n        {\n            // Copy the remaining data to the start of buffer for next read\n            Array.Copy(dataBuffer.Array, dataBuffer.Offset, buffer, 0, dataBuffer.Count);\n            ReceiveData(stream, new byte[4096]);\n        }\n        else if (expectedBytes == 0)\n        {\n            expectedBytes = -1;\n            ReceiveData(stream, buffer);\n        }\n    }\n\n    private void ProcessMessage(byte[] messageData)\n    {\n        string receivedMessage = Encoding.UTF8.GetString(messageData);\n        Console.WriteLine("Received: " + receivedMessage);\n    }\n\n    public static void Main()\n    {\n        new SocketServerExample().StartListening();\n    }\n}