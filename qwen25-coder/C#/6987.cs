using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing iTextSharp.text.pdf;\nusing PdfSharp.Pdf;\nusing PdfSharp.Pdf.IO;\n\nnamespace PdfIndexGenerator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Path to the input PDF\n            string inputPath = "input.pdf";\n            // Path where the output will be saved\n            string outputPath = "output_with_index.pdf";\n\n            using (PdfReader pdfReader = new PdfReader(inputPath))\n            {\n                var wordIndex = ExtractWordIndex(pdfReader);\n\n                // Optionally, filter out common words here\n\n                string indexContent = GenerateIndexContent(wordIndex);\n                \n                AppendPageIndexToList(outputPath, inputPath, indexContent);\n            }\n        }\n\n        static Dictionary<string, HashSet<int>> ExtractWordIndex(PdfReader pdfReader)\n        {\n            var wordIndex = new Dictionary<string, HashSet<int>>();\n            for (int i = 1; i <= pdfReader.NumberOfPages; i++)\n            {\n                string text = PdfTextExtractor.GetTextFromPage(pdfReader, i);\n                foreach (var word in text.Split(' '))\n                {\n                    if (!wordIndex.ContainsKey(word))\n                        wordIndex[word] = new HashSet<int>();\n                    wordIndex[word].Add(i);\n                }\n            }\n            return wordIndex;\n        }\n\n        static string GenerateIndexContent(Dictionary<string, HashSet<int>> wordIndex)\n        {\n            var sortedWords = wordIndex.OrderBy(kvp => kvp.Key).ToList();\n            var indexContent = "Index:\n";\n            foreach (var word in sortedWords)\n            {\n                indexContent += $"{word.Key}: {string.Join(", ", word.Value)}\n";\n            }\n            return indexContent;\n        }\n\n        static void AppendPageIndexToList(string outputPath, string inputPath, string indexContent)\n        {\n            using (PdfDocument outputDoc = new PdfDocument())\n            using (PdfDocument inputDoc = PdfReader.Open(inputPath, PdfDocumentOpenMode.Import))\n            {\n                // Import all pages from the original PDF\n                for (int i = 0; i < inputDoc.PageCount; ++i)\n                    outputDoc.AddPage(inputDoc.Pages[i + 1]);\n\n                // Create a new page and add the index content\n                PdfPage AddNewPage(PdfDocument document, string content)\n                {\n                    PdfPage page = document.AddPage();\n                    XGraphics gfx = XGraphics.FromPdfPage(page);\n                    XFont font = new XFont("Verdana", 9);\n                    gfx.DrawString(content, font, XBrushes.Black, 0, 30);\n                    return page;\n                }\n\n                AddNewPage(outputDoc, indexContent);\n\n                outputDoc.Save(outputPath);\n            }\n        }\n    }\n}