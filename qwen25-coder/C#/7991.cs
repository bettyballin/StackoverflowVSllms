using System;\n    using System.Management;\n\n    public static class FileLockChecker\n    {\n        [DllImport("kernel32.dll", SetLastError = true)]\n        private static extern SafeFileHandle CreateFile(\n            string lpFileName,\n            uint dwDesiredAccess,\n            uint dwShareMode,\n            IntPtr SecurityAttributes,\n            uint dwCreationDisposition,\n            uint dwFlagsAndAttributes,\n            IntPtr hTemplate);\n\n        public enum FileAccessMode : uint\n        {\n            GENERIC_READ = 0x80000000,\n            GENERIC_WRITE = 0x40000000\n        }\n\n        private const short FILE_SHARE_DELETE = (short)0x4;\n\n        public static string GetProcessLockingFile(string filePath)\n        {\n            try\n            {\n                CreateFile(filePath, (uint)FileAccessMode.GENERIC_READ, 1u + FILE_SHARE_DELETE,\n                    IntPtr.Zero, (uint) FileMode.Open, 0, IntPtr.Zero).Close();\n                return null; // if no exception, then file is not locked\n            }\n            catch { /* ignored */ }\n\n            ManagementObjectSearcher searcher = new ManagementObjectSearcher(\n                "SELECT * FROM Win32_Process WHERE HandleCount > 0");\n\n            foreach (ManagementObject process in searcher.Get())\n            {\n                try\n                {\n                    var searcherPath = $"AssociationClass=Win32_ProcessHandle,Dependent={process[@"Name"]},Role=Dependent";\n                    ManagementObjectSearcher objectWithFile = new ManagementObjectSearcher(searcherPath);\n                    string fileHandles = string.Empty;\n\n                    foreach (ManagementObject handle in objectWithFile.Get())\n                    {\n                        if (!string.IsNullOrEmpty(fileHandles))\n                            fileHandles += ", ";\n                        fileHandles += handle[@"Name"];\n                    }\n\n                    if (!string.IsNullOrEmpty(fileHandles) && fileHandles.Contains(filePath))\n                    {\n                        return process[@"ProcessId"] + " (" + process[@"Name"] + ")";\n                    }\n                }\n                catch { /* ignored */ }\n            }\n\n            return "File is locked but no process could be identified";\n        }\n    }