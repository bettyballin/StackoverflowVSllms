using System;\nusing System.Collections.Generic;\nusing System.Data.Linq;\n\npublic class DataContextValidator<TDataContext>\n    where TDataContext : DataContext, new()\n{\n    private readonly TDataContext _context;\n\n    public DataContextValidator(TDataContext context)\n    {\n        _context = context ?? throw new ArgumentNullException(nameof(context));\n    }\n\n    public void ValidateChanges()\n    {\n        ChangeSet changeSet = _context.GetChangeSet();\n        \n        // Validate inserted items\n        foreach (object entity in changeSet.Inserts)\n        {\n            ValidateEntity(entity);\n        }\n        \n        // Validate updated items\n        foreach (object entity in changeSet.Updates)\n        {\n            ValidateEntity(entity);\n        }\n\n        // If needed, validate deletions as well\n        foreach (object entity in changeSet.Deletes)\n        {\n            ValidateDeletion(entity);\n        }\n    }\n\n    private void ValidateEntity(object entity)\n    {\n        switch (entity)\n        {\n            case YourEntityType1 specificEntity:\n                if (!IsValid(specificEntity))\n                    throw new InvalidOperationException($"Invalid {nameof(YourEntityType1)}: {specificEntity}");\n                break;\n            // Add more cases for additional entity types as needed\n            default:\n                throw new ArgumentException("Unknown entity type", nameof(entity));\n        }\n    }\n\n    private void ValidateDeletion(object entity)\n    {\n        // Add deletion-specific validation here if necessary\n    }\n\n    private bool IsValid(YourEntityType1 entity)\n    {\n        // Replace with actual validation logic for YourEntityType1\n        return !string.IsNullOrEmpty(entity.SomeRequiredField);\n    }\n}\n\n// Usage example:\npublic class YourDataContext : DataContext\n{\n    public Table<YourEntityType1> YourEntities;\n}\n\nclass Program\n{\n    static void Main()\n    {\n        var context = new YourDataContext();\n        \n        // Perform data operations here...\n        \n        var validator = new DataContextValidator<YourDataContext>(context);\n        try\n        {\n            validator.ValidateChanges();  // Validate changes before submitting\n            context.SubmitChanges();       // Submit changes if validation is successful\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($"Validation failed: {ex.Message}");\n        }\n    }\n}