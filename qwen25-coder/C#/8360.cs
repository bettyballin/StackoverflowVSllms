using System;\nusing System.Diagnostics;\nusing Microsoft.Win32.SafeHandles;\nusing System.Runtime.InteropServices;\n\nclass Program {\n    static void Main() {\n        var job = CreateJobObject(IntPtr.Zero, null);\n        SetInformationJobObject(job, JobObjectLimitFlags.JOB_OBJECT_LIMIT_PROCESS_MEMORY, new JOBOBJECT_MEMORY_LIMIT_INFORMATION { PeakProcessMemoryUsed = 104857600 }, Marshal.SizeOf(typeof(JOBOBJECT_MEMORY_LIMIT_INFORMATION)));\n\n        var si = new STARTUPINFO();\n        var pi = new PROCESS_INFORMATION();\n\n        if (!CreateProcessAsUser(IntPtr.Zero, "notepad.exe", null, IntPtr.Zero, IntPtr.Zero, false, 0, IntPtr.Zero, null, ref si, out pi)) {\n            throw new Exception("Failed to create process");\n        }\n\n        AssignProcessToJobObject(job, pi.hProcess);\n\n        CloseHandle(pi.hThread);\n        CloseHandle(pi.hProcess);\n    }\n\n    // Job Object structures and methods declarations...\n    [DllImport("kernel32.dll", SetLastError = true)]\n    static extern SafeFileHandle CreateJobObject(IntPtr lpJobAttributes, string lpName);\n\n    [DllImport("kernel32.dll", SetLastError = true)]\n    static extern bool SetInformationJobObject(SafeFileHandle hJob, JOBOBJECTINFOCLASS JobObjectInfoClass, object pJobObjectInfo, int cbJobObjectInfoLength);\n\n    [DllImport("advapi32.dll")]\n    static extern bool CreateProcessAsUser(IntPtr hToken, string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);\n\n    [DllImport("kernel32.dll", SetLastError = true)]\n    static extern bool AssignProcessToJobObject(SafeFileHandle hJob, SafeProcessHandle hProcess);\n\n    [DllImport("kernel32.dll")]\n    public static extern bool CloseHandle(IntPtr hObject);\n\n    // Define necessary structures here...\n}