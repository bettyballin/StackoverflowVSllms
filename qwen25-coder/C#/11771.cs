// Interface to abstract over time\npublic interface ITimeService\n{\n    void Schedule(Action action, TimeSpan dueTime);\n}\n\n// Implementation of the time service that uses System Timers\npublic class TimerBasedTimeService : ITimeService\n{\n    public void Schedule(Action action, TimeSpan dueTime)\n    {\n        var timer = new System.Timers.Timer(dueTime.TotalMilliseconds);\n        timer.Elapsed += (sender, args) => { action(); ((System.Timers.Timer)sender).Stop(); };\n        timer.Start();\n    }\n}\n\n// Refactored class that takes a time service\npublic class SystemAvailabilityMonitor\n{\n    private ITimeService _timeService;\n    public readonly TimeSpan BufferBeforeRaisingEvent;\n\n    public event Action SystemBecameUnavailable = delegate { };\n    public event Action SystemBecameAvailable = delegate { };\n\n    public bool IsSystemAvailable { get; private set; } // Added for simplicity of example\n\n    public SystemAvailabilityMonitor(ITimeService timeService, TimeSpan bufferBeforeRaisingEvent)\n    {\n        _timeService = timeService;\n        BufferBeforeRaisingEvent = bufferBeforeRaisingEvent;\n        IsSystemAvailable = true;\n    }\n\n    public void SystemUnavailable()\n    {\n        if (IsSystemAvailable)\n        {\n            _timeService.Schedule(() =>\n            {\n                if (!IsSystemAvailable) // Double-check the state in case of multiple calls\n                    SystemBecameUnavailable();\n            }, BufferBeforeRaisingEvent);\n            IsSystemAvailable = false;\n        }\n    }\n\n    public void SystemAvailable()\n    {\n        IsSystemAvailable = true;\n        SystemBecameAvailable();\n    }\n}\n\n// Unit test example using Moq\n[Test]\npublic async Task Test_SystemUnavailabilityTriggersAfterTimedOut_NotImmediately()\n{\n    var mockTimeService = new Mock<ITimeService>();\n    var bufferTime = TimeSpan.FromSeconds(5);\n    var monitor = new SystemAvailabilityMonitor(mockTimeService.Object, bufferTime);\n\n    bool wasUnreachableCalled = false;\n    monitor.SystemBecameUnavailable += () => { wasUnreachableCalled = true; };\n\n    monitor.SystemUnavailable();\n    // Act as if the timer has expired\n    mockTimeService.Verify(m => m.Schedule(It.IsAny<Action>(), It.IsIn(bufferTime)));\n\n    Assert.IsFalse(wasUnreachableCalled); // Event not called immediately\n\n    // Simulate time passing and callback being triggered by timer.\n    (mockTimeService.Invocations[0].Arguments[0] as Action)?.Invoke();\n\n    Assert.IsTrue(wasUnreachableCalled); // Event should now be called\n}