// WCF Service Interface\npublic interface IDataService\n{\n    DataSet GetData();\n    ICommunicationObject SubscribeForChanges(DataChangedDelegate callback);\n}\n\n// Delegate for notifying clients of changes\npublic delegate void DataChangedDelegate();\n\n// Basic implementation in WCF service\n[ServiceBehavior(InstanceContextMode = InstanceContextMode.Single, ConcurrencyMode = ConcurrencyMode.Multiple)]\nclass DataService : IDataService, IDisposable\n{\n    private DataSet _dataSet;\n    private List<DataChangedDelegate> _callbacks;\n\n    public DataService()\n    {\n        _dataSet = new DataSet();\n        _callbacks = new List<DataChangedDelegate>();\n    }\n\n    public void UpdateData(DataSet newData)\n    {\n        _dataSet = newData;\n        NotifyClients();\n    }\n\n    public DataSet GetData() => _dataSet;\n\n    public ICommunicationObject SubscribeForChanges(DataChangedDelegate callback)\n    {\n        _callbacks.Add(callback);\n        return OperationContext.Current.InstanceContext.Channel;\n    }\n\n    private void NotifyClients()\n    {\n        List<DataChangedDelegate> dead = new List<DataChangedDelegate>();\n        foreach (var cb in _callbacks)\n        {\n            try\n            {\n                cb();  // Call the client callback to notify them of changes.\n            }\n            catch (Exception)\n            {\n                dead.Add(cb);  // Mark callbacks that have dead clients for removal.\n            }\n        }\n\n        foreach (var d in dead) _callbacks.Remove(d);\n    }\n\n    public void Dispose()\n    {\n        /* Cleanup code here */\n    }\n}