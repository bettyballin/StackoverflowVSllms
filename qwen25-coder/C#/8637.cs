// Assume you have an HTML string for the table\nstring originalTable = @"\n<table id='originalTable'>\n    <tr><th>Col1</th><th>Col2</th><th>Col3</th><th>Col4</th></tr>\n    <tr><td>Data1</td><td>Data2</td><td>Data3</td><td>Data4</td></tr>\n    <!-- Add more rows as needed -->\n</table>";\n\n// Parse the HTML and split into two tables\nSystem.Xml.XmlDocument doc = new System.Xml.XmlDocument();\ndoc.LoadHtml(originalTable);\n\n// Create fragments for each part of the table\nSystem.Xml.XmlNode header = doc.DocumentElement.FirstChild;\nstring firstPartHeader = "<tr>" + string.Concat(header.ChildNodes[0].OuterXml, header.ChildNodes[1].OuterXml) + "</tr>";\nstring secondPartHeader = "<tr>" + string.Concat(header.ChildNodes[2].OuterXml, header.ChildNodes[3].OuterXml) + "</tr>";\n\nStringBuilder firstPartTable = new StringBuilder("<table><thead>").Append(firstPartHeader).Append("</thead><tbody>");\nStringBuilder secondPartTable = new StringBuilder("<table><thead>").Append(secondPartHeader).Append("</thead><tbody>");\n\n// Split the rows\nforeach (System.Xml.XmlNode row in doc.SelectNodes("//tr"))\n{\n    if (row.FirstChild.Name == "th") continue; // Skip header row as processed separately\n\n    firstPartTable.AppendFormat(\n        "<tr>{0}{1}</tr>",\n        row.ChildNodes[0].OuterXml,\n        row.ChildNodes[1].OuterXml);\n    secondPartTable.AppendFormat(\n        "<tr>{0}{1}</tr>",\n        row.ChildNodes[2].OuterXml,\n        row.ChildNodes[3].OuterXml);\n}\n\nfirstPartTable.Append("</tbody></table>");\nsecondPartTable.Append("</tbody></table>");\n\n// Output the tables to your ASP.NET page\nstring firstHalf = firstPartTable.ToString();\nstring secondHalf = secondPartTable.ToString();\n\n// Now you can render firstHalf and secondHalf on your ASP.NET page\nResponse.Write(firstHalf);\nResponse.Write(secondHalf);