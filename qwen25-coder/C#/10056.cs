public ActionResult Open(string sort = "TimeLogged", string technician = null, string customer = null, string category = null, string priority = null, string status = null)\n{\n    var issuesQuery = db.Issues.Where(i => i.Status == "Open");\n\n    if (!string.IsNullOrEmpty(technician))\n        issuesQuery = issuesQuery.Where(i => i.Technician.Contains(technician));\n\n    if (!string.IsNullOrEmpty(customer))\n        issuesQuery = issuesQuery.Where(i => i.Customer.Contains(customer));\n\n    if (!string.IsNullOrEmpty(category))\n        issuesQuery = issuesQuery.Where(i => i.Category.Contains(category));\n\n    if (!string.IsNullOrEmpty(priority))\n        issuesQuery = issuesQuery.Where(i => i.Priority == priority);\n\n    // Note: Status is already filtered to "Open", so additional filtering might not be needed.\n    // If you still want to allow status filter, handle it accordingly.\n\n    switch (sort)\n    {\n        case "ID":\n            issuesQuery = issuesQuery.OrderBy(i => i.ID);\n            break;\n        case "Technician":\n            issuesQuery = issuesQuery.OrderBy(i => i.Technician);\n            break;\n        case "Customer":\n            issuesQuery = issuesQuery.OrderBy(i => i.Customer);\n            break;\n        case "Category":\n            issuesQuery = issuesQuery.OrderBy(i => i.Category);\n            break;\n        case "Priority":\n            issuesQuery = issuesQuery.OrderBy(i => i.Priority);\n            break;\n        default:\n            issuesQuery = issuesQuery.OrderBy(i => i.TimeLogged);\n            break;\n    }\n\n    ViewData["Title"] = "Open Issues";\n    ViewData["SortID"] = sort.ToString();\n\n    return View(issuesQuery.ToList());\n}