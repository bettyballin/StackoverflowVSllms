using System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Reflection;\n\npublic class DataReaderToObjectMapper<T>\n{\n    public List<T> Convert(IDataReader reader)\n    {\n        var list = new List<T>();\n        var properties = typeof(T).GetProperties();\n\n        while (reader.Read())\n        {\n            var item = Activator.CreateInstance<T>();\n\n            foreach (var property in properties)\n            {\n                if (!IsShouldIgnore(property) && !Equals(reader[property.Name], DBNull.Value))\n                {\n                    var value = Convert.ChangeType(reader[property.Name], property.PropertyType);\n                    property.SetValue(item, value, null);\n                }\n            }\n\n            list.Add(item);\n        }\n\n        return list;\n    }\n\n    private bool IsShouldIgnore(PropertyInfo property)\n    {\n        // Optionally exclude properties with certain attributes or conditions\n        return false;\n    }\n}\n\n// Example usage:\npublic class Employee\n{\n    public int EmployeeId { get; set; }\n    public string Name { get; set; }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        using (var connection = new System.Data.SqlClient.SqlConnection("YourConnectionString"))\n        {\n            var command = new System.Data.SqlClient.SqlCommand("SELECT * FROM Employees", connection);\n            connection.Open();\n            using (IDataReader reader = command.ExecuteReader())\n            {\n                var mapper = new DataReaderToObjectMapper<Employee>();\n                List<Employee> employees = mapper.Convert(reader);\n\n                foreach (var employee in employees)\n                {\n                    Console.WriteLine($"Employee ID: {employee.EmployeeId}, Name: {employee.Name}");\n                }\n            }\n        }\n    }\n}