using Moq;\nusing NUnit.Framework;\n\n[TestFixture]\npublic class TestBaseTests\n{\n    [Test]\n    public void BaseMethod_should_call_correct_child_method_when_runMethod1_is_true()\n    {\n        // Arrange\n        var mock = new Mock<ChildTest> { CallBase = true };\n        \n        // Setup the behavior for ChildMethod1 and ChildMethod2\n        mock.Setup(x => x.ChildMethod1()).Verifiable();\n        mock.Setup(x => x.ChildMethod2()); // Optionally, you can also setup this one if you want to verify it's not called\n\n        var testBase = mock.Object;\n        testBase.runMethod1 = true;\n\n        // Act\n        testBase.BaseMethod();\n\n        // Assert\n        mock.Verify(x => x.ChildMethod1(), Times.Once());\n    }\n\n    [Test]\n    public void BaseMethod_should_call_correct_child_method_when_runMethod1_is_false()\n    {\n        // Arrange\n        var mock = new Mock<ChildTest> { CallBase = true };\n        \n        // Setup the behavior for ChildMethod1 and ChildMethod2\n        mock.Setup(x => x.ChildMethod1());\n        mock.Setup(x => x.ChildMethod2()).Verifiable();\n\n        var testBase = mock.Object;\n        testBase.runMethod1 = false;\n\n        // Act\n        testBase.BaseMethod();\n\n        // Assert\n        mock.Verify(x => x.ChildMethod2(), Times.Once());\n    }\n}\n\npublic class ChildTest : TestBase\n{\n    protected override void ChildMethod1()\n    {\n        base.ChildMethod1();\n        // do something\n    }\n\n    protected override void ChildMethod2()\n    {\n        base.ChildMethod2();\n        // do something completely different\n    }\n}