using System;\nusing System.Collections.Generic;\n\npublic class CombinationSum\n{\n    public decimal[][] Solve(decimal goal, decimal[] elements)\n    {\n        List<decimal[]> result = new List<decimal[]>();\n        Array.Sort(elements); // Optional: sort to optimize and allow early exit\n        FindCombinations(0, new List<decimal>(), goal, elements, result);\n        return result.ToArray();\n    }\n\n    private void FindCombinations(int start, List<decimal> currentCombination, decimal remainingGoal, decimal[] elements, List<decimal[]> result)\n    {\n        if (remainingGoal == 0)\n        {\n            // Add a copy of the current combination to the result\n            result.Add(currentCombination.ToArray());\n            return;\n        }\n\n        for (int i = start; i < elements.Length; i++)\n        {\n            if (elements[i] > remainingGoal) break; // No need to check further if over goal\n\n            currentCombination.Add(elements[i]);\n            FindCombinations(i, currentCombination, remainingGoal - elements[i], elements, result);\n            currentCombination.RemoveAt(currentCombination.Count - 1); // Backtrack\n        }\n    }\n\n    public static void Main(string[] args)\n    {\n        CombinationSum cs = new CombinationSum();\n        decimal goal = 8;\n        decimal[] elements = { 2, 3, 6 };\n        \n        decimal[][] solutions = cs.Solve(goal, elements);\n        foreach (decimal[] solution in solutions)\n        {\n            Console.Write("(");\n            for (int i = 0; i < solution.Length; i++)\n            {\n                Console.Write(solution[i]);\n                if (i < solution.Length - 1) Console.Write(", ");\n            }\n            Console.WriteLine(")");\n        }\n    }\n}