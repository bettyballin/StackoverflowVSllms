using System;\nusing System.Linq;\n\nvar query = SomeDataContext.TableName\n    .Select(p => p.Field1) // Select the potentially date field\n    .Where(dateStr => {\n        DateTime result;\n        return DateTime.TryParse(dateStr, out result); // Try to parse and filter accordingly\n    })\n    .ToList(); // Execute the query\n\n// After retrieving data from database you can cast it as needed\nvar castedDates = query.Select(dateString => (DateTime?)DateTime.Parse(dateString))\n                       .Where(parsedDate => parsedDate.HasValue)\n                       .Select(parsedDate => DateTime.SpecifyKind(parsedDate.Value, DateTimeKind.Unspecified)); // Convert to any specific date kind if necessary\n\n// For casting directly in the SELECT projection (but remember it runs locally after retrieval from db):\nvar queryWithCast = SomeDataContext.TableName\n    .Select(p => new {\n        Field1 = p.Field1,\n        CastedField = SqlFunctions.Cast<DateTime>(p.Field1) // This is not available directly, you will cast post-query or use a stored procedure\n    })\n    .ToList();