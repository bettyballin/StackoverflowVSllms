public class Floor : INotifyPropertyChanged\n{\n    private int height;\n    public int Height\n    {\n        get => height;\n        set\n        {\n            if (height != value)\n            {\n                height = value;\n                OnPropertyChanged(nameof(Height));\n                OnPropertyChanged(nameof(Elevation)); // Notify Elevation change as well\n            }\n        }\n    }\n\n    private readonly int elevation; // Read-only but recalculated when necessary.\n    public int Elevation => elevation;\n\n    internal void SetElevation(int newElevation)\n    {\n        if (elevation != newElevation)\n        {\n            (this.elevation) = newElevation;\n            OnPropertyChanged(nameof(Elevation));\n        }\n    }\n\n    public event PropertyChangedEventHandler PropertyChanged;\n    protected virtual void OnPropertyChanged(string propertyName)\n    {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n    }\n}