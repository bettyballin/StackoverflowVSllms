using System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Linq;\nusing System.ServiceModel;\nusing System.ServiceModel.Channels;\nusing System.ServiceModel.Description;\nusing System.ServiceModel.Dispatcher;\n\npublic class IpFilterBehavior : IEndpointBehavior\n{\n    private readonly List<string> allowedIps = new List<string>();\n\n    public IpFilterBehavior(List<string> ips)\n    {\n        allowedIps.AddRange(ips);\n    }\n\n    public void AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters) { }\n\n    public void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher)\n    {\n        endpointDispatcher.DispatchRuntime.MessageInspectors.Add(new IpFilterInspector(allowedIps));\n    }\n\n    public void Validate(ServiceEndpoint endpoint) { }\n}\n\npublic class IpFilterInspector : IDispatchMessageInspector\n{\n    private readonly List<string> allowedIps;\n\n    public IpFilterInspector(List<string> ips)\n    {\n        allowedIps = ips;\n    }\n\n    public object AfterReceiveRequest(ref Message request, IClientChannel channel, InstanceContext instanceContext)\n    {\n        var clientIp = ((RemoteEndpointMessageProperty)request.Properties[RemoteEndpointMessageProperty.Name]).Address;\n\n        if (!allowedIps.Contains(clientIp))\n            throw new FaultException("Access denied. Your IP is not allowed.");\n\n        return null;\n    }\n\n    public void BeforeSendReply(ref Message reply, object correlationState) { }\n}