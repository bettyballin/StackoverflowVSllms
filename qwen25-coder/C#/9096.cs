using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic static class FormatStringValidator\n{\n    public static bool IsValidFormat(string compositeFormat, params Type[] argTypes)\n    {\n        if (string.IsNullOrEmpty(compositeFormat) || argTypes == null) return false;\n        \n        // Extract placeholders and their details from the format string\n        var placeholders = Regex.Matches(compositeFormat, @"\{(\d+)(?::([^}]+))?\}")\n            .Cast<Match>()\n            .Select(m => new { Index = int.Parse(m.Groups[1].Value), FormatString = m.Groups[2].Success ? m.Groups[2].Value : null });\n\n        foreach (var placeholder in placeholders)\n        {\n            // Check if the index is within bounds\n            if (placeholder.Index >= argTypes.Length) return false;\n\n            var argType = argTypes[placeholder.Index];\n\n            // If there's a format string provided, check it against the type.\n            if (!string.IsNullOrEmpty(placeholder.FormatString))\n            {\n                try\n                {\n                    // Attempt to create a formatted string using String.Format for validation.\n                    // This will throw an exception if the format is incorrect for the given type.\n                    var result = String.Format(new CustomFormatter(), $"{{{placeholder.Index}:{placeholder.FormatString}}}", GetDefault(argType));\n                }\n                catch (FormatException)\n                {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    private static object GetDefault(Type t)\n    {\n        // Provide a default value for the given type.\n        if (t.IsValueType && Nullable.GetUnderlyingType(t) == null) \n            return Activator.CreateInstance(t);\n        return null;\n    }\n}\n\n// A simple implementation of ICustomFormatter to use in String.Format for validation purposes\npublic class CustomFormatter : IFormatProvider, ICustomFormatter\n{\n    public object GetFormat(Type formatType)\n    {\n        if (formatType == typeof(ICustomFormatter))\n            return this;\n        else\n            return null;\n    }\n\n    public string Format(string format, object arg, IFormatProvider formatProvider)\n    {\n        // If a null reference was passed by mistake, ignore it.\n        if (arg == null) return string.Empty;\n\n        // Use the default formatting mechanism for all types not specially handled here.\n        if (!formatProvider.Equals(this)) \n            return HandleOtherFormats(format, arg);\n\n        // Handle IFormattable types\n        if (arg is IFormattable formattable)\n            return formattable.ToString(format, CultureInfo.CurrentCulture);\n        \n        // Fallback: If the type isn't explicitly handled and it's not IFormattable use the standard ToString()\n        return arg.ToString();\n    }\n\n    private string HandleOtherFormats(string format, object arg)\n    {\n        if (arg is IFormattable formattable)\n            return formattable.ToString(format, CultureInfo.CurrentCulture);\n        \n        // Default to the standard formatting\n        return arg.ToString();\n    }\n}