using System;\nusing Microsoft.CSharp;\nusing System.CodeDom.Compiler;\nusing System.IO;\n\npublic class DynamicDllGenerator\n{\n    public static void GenerateDll(string sourceCode, string outputPath)\n    {\n        CSharpCodeProvider provider = new CSharpCodeProvider();\n        CompilerParameters cp = new CompilerParameters();\n\n        cp.ReferencedAssemblies.Add("System.dll");\n        // Add other referenced assemblies as needed\n\n        cp.GenerateInMemory = false;\n        cp.GenerateExecutable = false; // Generate DLL, not an executable\n        cp.OutputAssembly = outputPath;\n\n        CompilerResults results = provider.CompileAssemblyFromSource(cp, sourceCode);\n\n        if (results.Errors.HasErrors)\n        {\n            StringBuilder sb = new StringBuilder();\n            foreach (CompilerError error in results.Errors)\n            {\n                sb.AppendLine($"Error ({error.ErrorNumber}): {error.ErrorText}");\n            }\n            throw new Exception("Compilation failed:\n" + sb.ToString());\n        }\n    }\n\n    public static void Main(string[] args)\n    {\n        string code = @"\n            using System;\n\n            namespace DynamicCode\n            {\n                public class MyClass\n                {\n                    public int Add(int a, int b)\n                    {\n                        return a + b;\n                    }\n                }\n            }";\n\n        try\n        {\n            GenerateDll(code, "MyDynamicAssembly.dll");\n            Console.WriteLine("DLL Generated successfully.");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n        }\n    }\n}