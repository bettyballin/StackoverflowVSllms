using System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Reflection;\n\npublic class Record\n{\n    public int ID { get; set; }\n    public bool Status { get; set; }\n    public string Message { get; set; }\n}\n\npublic DataSet ConvertListToDataSet<T>(List<T> items)\n{\n    var dataSet = new DataSet();\n    var dataTable = new DataTable(typeof(T).Name);\n\n    // Get all the properties\n    PropertyInfo[] Props = typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance);\n    foreach (PropertyInfo prop in Props)\n    {\n        // Defining type of data column gives proper framework to bind data table and advance functions\n        var dataType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;\n        dataTable.Columns.Add(prop.Name, dataType);\n    }\n\n    dataSet.Tables.Add(dataTable);\n\n    foreach (T item in items)\n    {\n        var values = new object[Props.Length];\n        for (int i = 0; i < Props.Length; i++)\n        {\n            // Inserting property values to datatable rows\n            values[i] = Props[i].GetValue(item, null) ?? DBNull.Value;\n        }\n        dataTable.Rows.Add(values);\n    }\n\n    return dataSet;\n}\n\n// Usage example:\nvar records = new List<Record>\n{\n    new Record { ID = 1, Status = true, Message = "message" },\n    new Record { ID = 2, Status = false, Message = "message2" },\n    // Add more records as needed\n};\n\nDataSet ds = ConvertListToDataSet(records);