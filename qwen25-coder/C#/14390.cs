class MyClass\n{\n    private int someValue1;\n    private int someValue2;\n\n    public MyClass(int someValue1, int someValue2)\n    {\n        this.someValue1 = someValue1;\n        this.someValue2 = someValue2;\n    }\n\n    // Ignoring GetHashCode for simplicity.\n\n    public override bool Equals(object obj)\n    {\n        return Equals(obj as MyClass);\n    }\n\n    public virtual bool Equals(MyClass obj)\n    {\n        if (obj == null) return false;\n\n        return someValue1 == obj.someValue1 &&\n               someValue2 == obj.someValue2;\n    }\n}\n\nclass MyDerivedClass : MyClass\n{\n    private int yetAnotherValue;\n\n    public MyDerivedClass(int someValue1, int someValue2, int yetAnotherValue)\n        : base(someValue1, someValue2)\n    {\n        this.yetAnotherValue = yetAnotherValue;\n    }\n\n    public override bool Equals(object obj)\n    {\n        return Equals(obj as MyDerivedClass);\n    }\n\n    public new virtual bool Equals(MyDerivedClass obj)\n    {\n        if (!base.Equals(obj)) return false;\n\n        return yetAnotherValue == obj.yetAnotherValue;\n    }\n}