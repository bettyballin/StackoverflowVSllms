using System;\nusing System.Collections.Generic;\nusing System.Reflection;\nusing LinFu.DynamicProxy;\n\npublic interface IMyInterface\n{\n    int Property1 { get; }\n    string Property2 { get; }\n}\n\npublic class DictionaryInterceptor : IInvocationInterceptor\n{\n    private readonly Dictionary<string, object> _propertyValues;\n\n    public DictionaryInterceptor(Dictionary<string, object> propertyValues)\n    {\n        _propertyValues = propertyValues;\n    }\n\n    public void Intercept(IInvocationInfo info)\n    {\n        if (info.Method.IsSpecialName && info.Method.Name.StartsWith("get_"))\n        {\n            var propertyName = info.Method.Name.Substring(4);\n            if (_propertyValues.TryGetValue(propertyName, out var value))\n            {\n                info.ReturnValue = value;\n                return;\n            }\n        }\n        \n        // If no property match is found or it's not a getter, you might want to throw an exception\n        throw new InvalidOperationException($"Property {info.Method.Name} not supported.");\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var propertyValues = new Dictionary<string, object>\n        {\n            {"Property1", 42},\n            {"Property2", "Hello World"}\n        };\n\n        var proxyFactory = new ProxyFactory();\n        IMyInterface myProxy = (IMyInterface)proxyFactory.CreateProxy(\n            typeof(IMyInterface),\n            new DictionaryInterceptor(propertyValues)\n        );\n\n        Console.WriteLine(myProxy.Property1); // Outputs: 42\n        Console.WriteLine(myProxy.Property2); // Outputs: Hello World\n    }\n}