using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Windows;\nusing System.ComponentModel.Composition;\n\nnamespace WpfModularApp\n{\n    [Export]\n    public class ModuleLocator : IPartImportsSatisfiedNotification\n    {\n        [ImportMany]\n        private IEnumerable<Lazy<IModule>> Modules { get; set; }\n\n        [Import(AllowDefault = false)]\n        public IShell Shell { get; set; }\n\n        // Called when all imports are satisfied.\n        void IPartImportsSatisfiedNotification.OnImportsSatisfied()\n        {\n            foreach (var module in Modules)\n            {\n                module.Value.OnInitialize();\n                var menuItems = module.Value.GetMenuItems();\n                foreach (var item in menuItems)\n                {\n                    Shell.AddMenuItem(item);\n                }\n            }\n        }\n    }\n\n    // Example module interface\n    public interface IModule\n    {\n        void OnInitialize();\n        IEnumerable<UIElement> GetMenuItems();\n    }\n\n    [Export(typeof(IModule))]\n    public class SampleModule : IModule\n    {\n        public void OnInitialize() { /* Initialization code */ }\n\n        public IEnumerable<UIElement> GetMenuItems()\n        {\n            return new List<UIElement>\n            {\n                new Button { Content = "Sample Module" }\n            };\n        }\n    }\n\n    // Shell interface\n    public interface IShell\n    {\n        void AddMenuItem(UIElement menuItem);\n    }\n\n    public partial class MainWindow : Window, IShell\n    {\n        public MainWindow()\n        {\n            InitializeComponent();\n        }\n\n        public void AddMenuItem(UIElement menuItem)\n        {\n            menu.Items.Add(menuItem);\n        }\n    }\n}