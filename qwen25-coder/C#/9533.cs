using System;\nusing System.Security;\nusing System.Security.Permissions;\n\n[UIPermission(SecurityAction.InheritanceDemand, Window = UIPermissionWindow.AllWindows)]\npublic class PrintData\n{\n    protected string Data = "secret value";\n\n    public virtual void PrintString()\n    {\n        Console.WriteLine(Data);\n    }\n}\n\npublic class DerivedPrinter : PrintData\n{\n    // Overriding the method without additional permissions specified.\n    public override void PrintString()\n    {\n        base.PrintString();\n        Console.WriteLine("Derived Printer is printing.");\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        try\n        {\n            // This should throw a SecurityException if run in an environment enforcing InheritanceDemand\n            DerivedPrinter printer = new DerivedPrinter();\n            printer.PrintString();\n        }\n        catch (SecurityException ex)\n        {\n            Console.WriteLine("Caught an exception: " + ex.Message);\n        }\n    }\n}