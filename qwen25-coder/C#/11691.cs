using System;\nusing System.Runtime.InteropServices;\n\npublic interface IMyClass {\n    void MemAlloc(ref double[] test, int membercount);\n    void MemFree();\n}\n\npublic class MyClassWrapper : IDisposable {\n    private IMyClass _comObject;\n\n    public MyClassWrapper(IMyClass comObject) {\n        _comObject = comObject;\n    }\n\n    public double[] Allocate(int count) {\n        double[] data = new double[count];\n        GCHandle handle = GCHandle.Alloc(data, GCHandleType.Pinned);\n        try {\n            IntPtr ptr = handle.AddrOfPinnedObject();\n            _comObject.MemAlloc(ref data, count);\n            return data;\n        } finally {\n            handle.Free();\n        }\n    }\n\n    public void Free() {\n        if (_comObject != null) {\n            _comObject.MemFree();\n            Marshal.ReleaseComObject(_comObject);\n            _comObject = null;\n        }\n    }\n\n    public void Dispose() {\n        Free();\n        GC.SuppressFinalize(this);\n    }\n}\n\n// Usage\nclass Program {\n    static void Main(string[] args) {\n        IMyClass comObject = new MyClass(); // Assume this is the COM object instantiation\n        using (var wrapper = new MyClassWrapper(comObject)) {\n            double[] data = wrapper.Allocate(100);\n            // Use the data array\n            // No need to explicitly free here, Dispose will take care of it.\n        }\n    }\n}