using Microsoft.CodeAnalysis;\n   using Microsoft.CodeAnalysis.CSharp;\n   using Microsoft.CodeAnalysis.CSharp.Syntax;\n   using Microsoft.CodeAnalysis.Diagnostics;\n\n   [DiagnosticAnalyzer(LanguageNames.CSharp)]\n   public class MyCustomAttributeAnalyzer : DiagnosticAnalyzer\n   {\n       public const string DiagnosticId = "MyCustomWarning";\n\n       private static readonly LocalizableString Title = "Code Marked by MyAttribute";\n       private static readonly LocalizableString MessageFormat = "{0}";\n       private static readonly LocalizableString Description = "This code has a custom warning message.";\n       private const string Category = "Usage";\n\n       private static DiagnosticDescriptor Rule = new DiagnosticDescriptor(DiagnosticId, Title, MessageFormat, Category,\n           DiagnosticSeverity.Warning, isEnabledByDefault: true, description: Description);\n\n       public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics => ImmutableArray.Create(Rule);\n\n       public override void Initialize(AnalysisContext context)\n       {\n           context.ConfigureGeneratedCodeAnalysis(GeneratedCodeAnalysisFlags.None);\n           context.EnableConcurrentExecution();\n           context.RegisterSyntaxNodeAction(AnalyzeNode, SyntaxKind.Attribute);\n       }\n\n       private static void AnalyzeNode(SyntaxNodeAnalysisContext context)\n       {\n           if (context.Node is AttributeSyntax attributeSyntax)\n           {\n               if (attributeSyntax.Name.ToString().Equals("MyAttribute", StringComparison.InvariantCultureIgnoreCase))\n               {\n                   // Extract the argument from the attribute.\n                   var messageArgument = attributeSyntax.ArgumentList?.Arguments.FirstOrDefault()?.Expression as LiteralExpressionSyntax;\n                   if (messageArgument != null && !string.IsNullOrEmpty(messageArgument.Token.ValueText))\n                   {\n                       var diagnostic = Diagnostic.Create(Rule, attributeSyntax.GetLocation(), messageArgument.Token.ValueText);\n                       context.ReportDiagnostic(diagnostic);\n                   }\n               }\n           }\n       }\n   }