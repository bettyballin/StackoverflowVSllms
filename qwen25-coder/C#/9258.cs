using System;\nusing System.IO;\nusing System.Web.UI;\n\npublic class ResponseFilterPage : Page\n{\n    protected override void OnInit(EventArgs e)\n    {\n        base.OnInit(e);\n        // Register a filter to modify the response stream\n        Response.Filter = new HtmlResponseModifier(Response.Filter);\n    }\n}\n\n// A custom stream that intercepts and modifies the HTML output\npublic class HtmlResponseModifier : Stream\n{\n    private readonly Stream _responseStream;\n    private readonly MemoryStream _memoryStream;\n\n    public HtmlResponseModifier(Stream inner)\n    {\n        _responseStream = inner;\n        _memoryStream = new MemoryStream();\n    }\n\n    public override void Write(byte[] buffer, int offset, int count)\n    {\n        // Capture the response to a Memory Stream \n        _memoryStream.Write(buffer, offset, count);\n    }\n\n    public override async Task WriteAsync(byte[] buffer, int offset, int count,\n                                         CancellationToken cancellationToken)\n    {\n        // Asynchronously capture the response to a Memory Stream\n        await _memoryStream.WriteAsync(buffer, offset, count, cancellationToken);\n    }\n\n    public override void Close()\n    {\n        var writer = new StreamWriter(_memoryStream);\n        writer.Flush();\n        string output = System.Text.Encoding.UTF8.GetString(_memoryStream.ToArray());\n\n        // Modify your HTML here\n        // For example, replace a placeholder with actual content\n        output = output.Replace("{{PLACEHOLDER}}", "Modified by filter");\n\n        var bytesToWrite = System.Text.Encoding.UTF8.GetBytes(output);\n\n        _responseStream.Write(bytesToWrite, 0, bytesToWrite.Length);\n        _memoryStream.Close();\n        _responseStream.Close();\n    }\n\n    // Stream method implementations (only Write and Close are needed for this example)\n    public override bool CanRead => false;\n    public override bool CanSeek => false;\n    public override bool CanWrite => true;\n    public override long Length => throw new NotSupportedException();\n    public override long Position { get => throw new NotSupportedException(); set => throw new NotSupportedException(); }\n    public override void Flush() { _responseStream.Flush(); }\n    public override int Read(byte[] buffer, int offset, int count) { throw new NotSupportedException(); }\n    public override long Seek(long offset, SeekOrigin origin) { throw new NotSupportedException(); }\n    public override void SetLength(long value) { throw new NotSupportedException(); }\n}