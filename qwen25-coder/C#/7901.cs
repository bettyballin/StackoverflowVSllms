private ManualResetEvent _AllDone = new ManualResetEvent(false);\n\ninternal void Initialize(int port, string IP)\n{\n    IPEndPoint _Point = new IPEndPoint(IPAddress.Parse(IP), port);\n    Socket _Accpt = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n    _Accpt.Bind(_Point);\n    _Accpt.Listen(2);\n\n    while (true)\n    {\n        _AllDone.Reset();\n        try\n        {\n            _Accpt.BeginAccept(new AsyncCallback(Accept), _Accpt);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine("Error in BeginAccept: " + ex.Message);\n            continue;\n        }\n\n        // Use a timeout to avoid indefinite blocking\n        if (!_AllDone.WaitOne(1000))  // Timeout after 1 second\n        {\n            Console.WriteLine("Timeout occurred while waiting for connection.");\n        }\n    }\n}\n\nprivate void Accept(IAsyncResult async)\n{\n    Socket _Accpt = (Socket)async.AsyncState;\n    \n    try\n    {\n        Socket _Handler = _Accpt.EndAccept(async);\n        \n        // Set the event to signal that a client has been accepted.\n        _AllDone.Set();\n\n        StateObject _State = new StateObject();\n        _State.workSocket = _Handler;\n\n        _Handler.BeginReceive(_State.buffer, 0, StateObject.BufferSize, SocketFlags.None, new AsyncCallback(ReadCallback), _State);\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine("Error in Accept: " + ex.Message);\n        // Optionally close the socket and handle the error\n    }\n}