using System;\nusing System.ServiceModel;\nusing System.Threading.Tasks;\n\n[ServiceContract]\npublic interface IMeasurementService\n{\n    [OperationContract]\n    void SubmitMeasurement(Measurement data);\n\n    [OperationContract]\n    Task<CalculationResult> GetAverage(int numberOfMeasurements);\n}\n\npublic class MeasurementService : IMeasurementService\n{\n    private readonly IQueue _queue;\n    private readonly IDataStore _dataStore;\n\n    public MeasurementService(IQueue queue, IDataStore dataStore)\n    {\n        _queue = queue;\n        _dataStore = dataStore;\n    }\n\n    public void SubmitMeasurement(Measurement data)\n    {\n        // Store measurement in database\n        _dataStore.Save(data);\n        \n        // Enqueue it for later processing (e.g., analytics)\n        _queue.Enqueue(data);\n    }\n\n    public async Task<CalculationResult> GetAverage(int numberOfMeasurements)\n    {\n        var measurements = await _dataStore.GetLastMeasurementsAsync(numberOfMeasurements);\n        return new CalculationResult { Value = CalculateAverage(measurements) };\n    }\n\n    private double CalculateAverage(Measurement[] measurements)\n    {\n        // Implementation of average calculation\n        double sum = 0;\n        foreach (var measurement in measurements)\n        {\n            sum += measurement.Value;\n        }\n        return sum / measurements.Length;\n    }\n}\n\n// Placeholder interfaces and classes for demonstration purpose\npublic interface IQueue\n{\n    void Enqueue(Measurement data);\n}\n\npublic interface IDataStore\n{\n    void Save(Measurement data);\n    Task<Measurement[]> GetLastMeasurementsAsync(int count);\n}\n\npublic class Measurement\n{\n    public double Value { get; set; }\n}\n\npublic class CalculationResult\n{\n    public double Value { get; set; }\n}