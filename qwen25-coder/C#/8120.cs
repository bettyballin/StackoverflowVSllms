// Step 1: Define an interface\npublic interface IWmiService\n{\n    object GetWin32LogicalDisk(string server, string disk);\n}\n\n// Step 2: Implement the interface\npublic class WmiService : IWmiService\n{\n    public object GetWin32LogicalDisk(string server, string disk)\n    {\n        // Actual implementation to fetch data using WMI\n        ManagementObjectSearcher searcher = new ManagementObjectSearcher(\n            $"\\\\{server}\\root\\CIMV2", \n            $"SELECT * FROM Win32_LogicalDisk WHERE DeviceID=\"{disk}\"");\n        return searcher.Get().Cast<ManagementBaseObject>().FirstOrDefault();\n    }\n}\n\n// Step 3: Mock in unit tests\npublic class SomeClassTests\n{\n    [Test]\n    public void TestSomeMethodThatUsesWmi()\n    {\n        // Arrange\n        var mockWmiService = new Mock<IWmiService>();\n        mockWmiService.Setup(w => w.GetWin32LogicalDisk("testServer", "C:"))\n                        .Returns(new { DeviceID = "C:", FreeSpace = 1073741824 });\n\n        var classToTest = new SomeClass(mockWmiService.Object);\n\n        // Act\n        var result = classToTest.SomeMethodThatUsesWmi("testServer", "C:");\n\n        // Assert\n        Assert.AreEqual(1073741824, result.FreeSpace);\n    }\n}\n\n// Example class that uses IWmiService\npublic class SomeClass\n{\n    private readonly IWmiService _wmiService;\n\n    public SomeClass(IWmiService wmiService)\n    {\n        _wmiService = wmiService;\n    }\n\n    public dynamic SomeMethodThatUsesWmi(string server, string disk)\n    {\n        return _wmiService.GetWin32LogicalDisk(server, disk);\n    }\n}