using System;\nusing System.Security.Cryptography;\nusing Microsoft.AspNetCore.Http;\n\npublic class CookieHelper\n{\n    public static void SetSecureCookie(HttpContext context, string name, string value)\n    {\n        // Encrypt the cookie data before setting it.\n        var encryptedValue = Encrypt(value);\n\n        var cookieOptions = new CookieOptions\n        {\n            Secure = true,     // Ensures cookie is sent over HTTPS only.\n            HttpOnly = true,   // Prevents JavaScript access to the cookie.\n            SameSite = SameSiteMode.Strict  // Controls cross-site request use of cookies.\n        };\n\n        context.Response.Cookies.Append(name, encryptedValue, cookieOptions);\n    }\n\n    private static string Encrypt(string plainText)\n    {\n        using (Aes aesAlg = Aes.Create())\n        {\n            aesAlg.Key = Convert.FromHexString("1234567890abcdef1234567890abcdef"); // Example key, use a secure way to manage keys\n            aesAlg.IV = Convert.FromHexString("abcdef1234567890"); // Example IV, use a secure way to manage initialization vectors\n\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n            using (var msEncrypt = new System.IO.MemoryStream())\n            {\n                using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                {\n                    using (var swEncrypt = new System.IO.StreamWriter(csEncrypt))\n                    {\n                        swEncrypt.Write(plainText);\n                    }\n                    return Convert.ToHexString(msEncrypt.ToArray());\n                }\n            }\n        }\n    }\n}