public interface IRepository<T> where T : class\n    {\n        IEnumerable<T> GetAll();\n        T GetById(int id);\n        void Insert(T entity);\n        void Update(T entity);\n        void Delete(T entity);\n    }\n\n    public class Repository<T> : IRepository<T> where T : class\n    {\n        private readonly DbContext _context;\n        private DbSet<T> entities;\n\n        public Repository(DbContext context)\n        {\n            this._context = context;\n            entities = context.Set<T>();\n        }\n\n        public IEnumerable<T> GetAll()\n        {\n            return entities.AsEnumerable();\n        }\n\n        public T GetById(int id)\n        {\n            return entities.Find(id);\n        }\n\n        public void Insert(T entity)\n        {\n            if (entity == null)\n            {\n                throw new ArgumentNullException("entity");\n            }\n            entities.Add(entity);\n            _context.SaveChanges();\n        }\n\n        public void Delete(T entity)\n        {\n            if (entity == null)\n            {\n                throw new ArgumentNullException("entity");\n            }\n            entities.Remove(entity);\n            _context.SaveChanges();\n        }\n\n        public void Update(T entity)\n        {\n            if (entity == null)\n            {\n                throw new ArgumentNullException("entity");\n            }\n            entities.Update(entity);\n            _context.SaveChanges();\n        }\n    }