using System;\nusing System.Data.SqlClient;\nusing System.Web;\n\npublic static class WebSecurityHelper\n{\n    // Method to prevent SQL Injection using parameterized queries\n    public static void ExecuteSafeSql(string connectionString, string query, object[] parameters)\n    {\n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            SqlCommand cmd = new SqlCommand(query, connection);\n            for (int i = 0; i < parameters.Length; i++)\n            {\n                cmd.Parameters.AddWithValue($"@param{i}", parameters[i]);\n            }\n            connection.Open();\n            cmd.ExecuteNonQuery();\n        }\n    }\n\n    // Method to sanitize input against XSS attacks\n    public static string SanitizeInput(string input)\n    {\n        if (string.IsNullOrEmpty(input))\n            return string.Empty;\n\n        // Basic HTML entity encoding for output sanitization\n        return HttpUtility.HtmlEncode(input);\n    }\n\n    // Method to generate and validate anti-CSRF tokens\n    public static void SetAntiForgeryCookie(HttpContext context)\n    {\n        // Generate a secure random number token\n        byte[] token = new byte[32];\n        RandomNumberGenerator.Create().GetBytes(token); \n        string encodedToken = Convert.ToBase64String(token);\n\n        // Store the CSRF Token in session and cookie\n        context.Session["__AntiXsrfToken"] = encodedToken;\n        HttpCookie httpCookie = new HttpCookie("__RequestVerificationToken", encodedToken)\n        {\n            Secure = true,\n            HttpOnly = true,\n            SameSite = SameSiteMode.Strict\n        };\n        context.Response.Cookies.Add(httpCookie);\n    }\n\n    public static bool ValidateAntiForgery(HttpContext context, string expectedToken)\n    {\n        if (context == null || context.Session == null)\n            throw new InvalidOperationException("HttpContext and Session should not be null.");\n\n        // Check if the token in session matches the expected token\n        return context.Session["__AntiXsrfToken"] != null && \n               ((string)context.Session["__AntiXsrfToken"]).Equals(expectedToken);\n    }\n}