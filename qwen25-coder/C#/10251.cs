using System;\nusing System.Configuration;\n\npublic class EncryptionHelper\n{\n    private static string GetEncryptedKey(string key)\n    {\n        // Fetch the encrypted value from configuration or environment variable\n        string encryptedValue = Environment.GetEnvironmentVariable(key);\n        if (string.IsNullOrEmpty(encryptedValue))\n        {\n            throw new InvalidOperationException($"Missing encryption key for {key}");\n        }\n        \n        // Decrypt here if necessary after fetching. For demonstration, we assume it's already decrypted.\n        return encryptedValue;\n    }\n\n    public static string EncryptData(string data)\n    {\n        string passphrase = GetEncryptedKey("PASSPHRASE");\n        string salt = GetEncryptedKey("SALT");\n        string iv = GetEncryptedKey("IV");\n\n        // Use passphrase, salt, and IV for encryption\n        // ... (encryption logic here)\n\n        return "encryptedData"; // Replace with actual encryption result\n    }\n\n    public static string DecryptData(string data)\n    {\n        string passphrase = GetEncryptedKey("PASSPHRASE");\n        string salt = GetEncryptedKey("SALT");\n        string iv = GetEncryptedKey("IV");\n\n        // Use passphrase, salt, and IV for decryption\n        // ... (decryption logic here)\n\n        return "decryptedData"; // Replace with actual decryption result\n    }\n}