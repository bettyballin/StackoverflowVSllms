[CustomAuthorize(Roles = "Admin")]\npublic class AdminController : Controller\n{\n    public ActionResult Index()\n    {\n        return View();\n    }\n}\n\n// Custom Authorize attribute to handle multi-tenancy\npublic class CustomAuthorizeAttribute : AuthorizeAttribute\n{\n    protected override bool AuthorizeCore(HttpContextBase httpContext)\n    {\n        if (!base.AuthorizeCore(httpContext))\n            return false;\n\n        var userId = User.Identity.GetUserId();\n\n        using (var context = new ApplicationDbContext())\n        {\n            var roles = context.Roles.ToList();\n            var userRoles = context.TenantUserRoles.Include(tur => tur.Role).Where(tur => tur.UserId == userId).Select(ur => ur.Role.Name);\n\n            return roles.Any(role => Roles.Contains(role.Name));\n        }\n    }\n\n    protected override void HandleUnauthorizedRequest(AuthorizationContext filterContext)\n    {\n        filterContext.Result = new RedirectResult("~/NoAccess");\n    }\n}