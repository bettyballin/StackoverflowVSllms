public partial class SomeWCFServiceClient : IDisposable\n{\n    private bool _disposed = false;\n\n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        if (!_disposed && disposing)\n        {\n            try\n            {\n                // Check the State of the channel before calling Close() or Abort().\n                if (State == CommunicationState.Faulted) \n                {\n                    this.Abort();\n                }\n                else\n                {\n                    this.Close();\n                }\n            }\n            catch (CommunicationException e)\n            {\n                // Log exception and abort to prevent hanging.\n                Trace.WriteLine(e);\n                this.Abort();\n            }\n            catch (TimeoutException e)\n            {\n                // Handle the timeout case.\n                Trace.WriteLine(e);\n                this.Abort();\n            }\n            catch (Exception e)\n            {\n                // For any other exception, abort to ensure cleanup.\n                Trace.WriteLine(e);\n                this.Abort();\n                throw;\n            }\n\n            _disposed = true;\n        }\n    }\n}