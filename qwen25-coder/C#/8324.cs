public static string EncryptStringToAes(string plainText, byte[] Key, byte[] IV)\n{\n    // Check arguments.\n    if (plainText == null || plainText.Length <= 0)\n        throw new ArgumentNullException("plainText");\n    if (Key == null || Key.Length <= 0)\n        throw new ArgumentNullException("Key");\n    if (IV == null || IV.Length <= 0)\n        throw new ArgumentNullException("Key");\n\n    // Declare the string used to hold\n    // the encrypted text.\n    string encrypted;\n\n    // Create an Aes object with the specified key and IV.\n    using (Aes aesAlg = Aes.Create())\n    {\n        aesAlg.Key = Key;\n        aesAlg.IV = IV;\n\n        // Create an encryptor to perform the stream transform.\n        ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n        // Create the streams used for encryption.\n        using (MemoryStream msEncrypt = new MemoryStream())\n        {\n            using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n            {\n                using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))\n                {\n                    //Write all data to the stream.\n                    swEncrypt.Write(plainText);\n                }\n                encrypted = Convert.ToBase64String(msEncrypt.ToArray());\n            }\n        }\n    }\n\n    // Return the encrypted bytes from the memory stream.\n    return encrypted;\n}