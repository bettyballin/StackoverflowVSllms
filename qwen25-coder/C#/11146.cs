// Step 1: Define the Interface\npublic interface ISelectable\n{\n    bool IsSelected { get; set; }\n}\n\n// Step 2: Implement Generic User Control\n<UserControl x:Class="YourNamespace.SelectorTool"\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">\n    <Grid>\n        <StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">\n            <ListBox x:Name="LeftList" ItemsSource="{Binding LeftItems}" SelectionMode="Single"/>\n            <Button Content=">" Click="MoveToRightList_Click" Margin="10,0"/>\n            <ListBox x:Name="RightList" ItemsSource="{Binding RightItems}" SelectionMode="Single"/>\n        </StackPanel>\n    </Grid>\n</UserControl>\n\n// Code-behind of the UserControl\npublic partial class SelectorTool : UserControl\n{\n    public ObservableCollection<ISelectable> LeftItems { get; set; } = new ObservableCollection<ISelectable>();\n    public ObservableCollection<ISelectable> RightItems { get; set; } = new ObservableCollection<ISelectable>();\n\n    public SelectorTool()\n    {\n        InitializeComponent();\n        DataContext = this;\n    }\n\n    private void MoveToRightList_Click(object sender, RoutedEventArgs e)\n    {\n        if (LeftList.SelectedItem is ISelectable item)\n        {\n            LeftItems.Remove(item);\n            RightItems.Add(item);\n            OnItemMoved?.Invoke(this, EventArgs.Empty);\n        }\n    }\n    \n    public event EventHandler OnItemMoved;\n}\n\n// Step 3: Implementing Your Classes\npublic class Car : ISelectable\n{\n    public string Model { get; set; }\n    public bool IsFast { get; set; }\n    public bool IsSelected { get; set; }\n}\n\npublic class Fruit : ISelectable\n{\n    public string Name { get; set; }\n    public bool ILikeIt { get; set; }\n    public bool IsSelected { get; set; }\n}