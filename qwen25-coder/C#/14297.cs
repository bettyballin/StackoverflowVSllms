using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main()\n    {\n        // Example data points in format [SSID1_SignalStrength, SSID2_SignalStrength, Location]\n        List<double[]> knownLocations = new List<double[]>\n        {\n            new double[] { -60.0, -70.0, 0 }, // Location A\n            new double[] { -55.0, -68.0, 1 }, // Location B\n            new double[] { -62.0, -72.0, 0 }  // Location A again\n        };\n\n        double[] testLocation = new double[] { -58.0, -69.0 }; // Test data\n\n        int k = 1; // Number of nearest neighbors to consider\n        Console.WriteLine($"Predicted location: {GetKNearestNeighbor(knownLocations, testLocation, k)}");\n    }\n\n    static int GetKNearestNeighbor(List<double[]> knownLocations, double[] testLocation, int k)\n    {\n        List<KeyValuePair<double[], double>> distances = new List<KeyValuePair<double[], double>>();\n\n        foreach (var dataPoint in knownLocations)\n        {\n            // Euclidean distance calculation\n            double d = Math.Sqrt(Math.Pow(dataPoint[0] - testLocation[0], 2) + Math.Pow(dataPoint[1] - testLocation[1], 2));\n            distances.Add(new KeyValuePair<double[], double>(dataPoint, d));\n        }\n\n        // Sort by distance\n        distances.Sort((pair1, pair2) => pair1.Value.CompareTo(pair2.Value));\n\n        // Count the nearest neighbors for each location\n        Dictionary<int, int> locationCounts = new Dictionary<int, int>();\n        for (int i = 0; i < k && i < distances.Count; i++)\n        {\n            int locationIndex = (int)distances[i].Key[2];\n            if (!locationCounts.ContainsKey(locationIndex))\n                locationCounts[locationIndex] = 1;\n            else\n                locationCounts[locationIndex]++;\n        }\n\n        // Determine the most common location among the neighbors\n        return FindMax(locationCounts);\n    }\n\n    static int FindMax(Dictionary<int, int> counts)\n    {\n        int maxKey = -1;\n        int maxValue = -1;\n\n        foreach (var pair in counts)\n        {\n            if (pair.Value > maxValue)\n            {\n                maxValue = pair.Value;\n                maxKey = pair.Key;\n            }\n        }\n\n        return maxKey;\n    }\n}