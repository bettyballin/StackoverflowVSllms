using System;\nusing System.Linq;\n\npublic class DecimalMultiplierCalculator\n{\n    public static int FindCommonMultiplier(decimal[] numbers)\n    {\n        // Determine the maximum scale (decimal places)\n        int maxScale = numbers.Max(num => num.Scale());\n\n        // Calculate product of all base multipliers to convert to whole numbers\n        long commonMultiple = (long)Math.Pow(10, maxScale);\n\n        // Convert each number to an integer by multiplying with the appropriate power of ten\n        var integerNumbers = numbers.Select(n => n * (decimal)commonMultiple).ToArray();\n\n        // Calculate the GCD of all these integers\n        int gcdAll = integerNumbers.Aggregate((currentGcd, num) => GCD(currentGcd, (int)num));\n\n        // The multiplier is the ratio of commonMultiple to the GCD calculated above\n        return (int)(commonMultiple / gcdAll);\n    }\n\n    private static int GCD(int a, int b)\n    {\n        while (b != 0)\n        {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return Math.Abs(a);\n    }\n\n    public static void Main()\n    {\n        var numbers = new decimal[] { 3.14159265m, 2.71828182m };\n        int multiplier = FindCommonMultiplier(numbers);\n        Console.WriteLine($"Common Multiplier: {multiplier}");\n    }\n}