using System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Linq;\n\npublic class TimeSeriesData\n{\n    public int Time { get; set; }\n    public double? Value { get; set; } // Use nullable to accommodate missing values\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // Sample data representing multiple time-series with overlapping and missing timestamps.\n        var ts1 = new List<TimeSeriesData> { \n            new TimeSeriesData { Time = 1, Value = 10 }, \n            new TimeSeriesData { Time = 3, Value = 20 },\n            new TimeSeriesData { Time = 4, Value = 30 } \n        };\n\n        var ts2 = new List<TimeSeriesData> { \n            new TimeSeriesData { Time = 2, Value = 15 }, \n            new TimeSeriesData { Time = 3, Value = 25 },\n            new TimeSeriesData { Time = 5, Value = 40 }\n        };\n\n        var ts3 = new List<TimeSeriesData> {\n            new TimeSeriesData { Time = 2, Value = 18 },\n            new TimeSeriesData { Time = 4, Value = 33 },\n            new TimeSeriesData { Time = 5, Value = 45 }\n        };\n\n        var timeSeriesList = new List<List<TimeSeriesData>> { ts1, ts2, ts3 };\n        \n        // Determine the complete set of unique timestamps from all series.\n        var allTimes = timeSeriesList.SelectMany(series => series.Select(data => data.Time)).Distinct().OrderBy(t => t).ToList();\n\n        DataTable dataTable = new DataTable();\n        dataTable.Columns.Add("Time", typeof(int));\n        foreach (var series in Enumerable.Range(1, timeSeriesList.Count))\n            dataTable.Columns.Add($"TS{series}", typeof(double?));\n\n        foreach (var time in allTimes)\n        {\n            var row = dataTable.NewRow();\n            row["Time"] = time;\n            \n            for (int i = 0; i < timeSeriesList.Count; i++)\n            {\n                var valueForTime = timeSeriesList[i].FirstOrDefault(data => data.Time == time)?.Value ?? (double?)null;\n                row[$"TS{i + 1}"] = valueForTime;\n            }\n\n            dataTable.Rows.Add(row);\n        }\n        \n        // Save the DataTable to CSV.\n        SaveDataTableToCsv(dataTable, "output.csv");\n    }\n\n    static void SaveDataTableToCsv(DataTable dataTable, string filename)\n    {\n        using (var writer = new System.IO.StreamWriter(filename))\n        {\n            var columns = dataTable.Columns.Cast<DataColumn>().Select(c => c.ColumnName);\n            writer.WriteLine(string.Join(",", columns));\n\n            foreach (DataRow row in dataTable.Rows)\n            {\n                var fields = row.ItemArray.Select(field =>\n                    field is null ? "" : field.ToString().Contains(",") ? $"\"{field}\"" : field.ToString());\n                writer.WriteLine(string.Join(",", fields));\n            }\n        }\n    }\n}