using System;\nusing System.Data.Common;\nusing System.Linq;\nusing SubSonic;\nusing SubSonic.Query;\n\npublic static class SqlQueryExtensions\n{\n    public static string BuildSqlWithValues(this SqlQuery query, DbConnection connection)\n    {\n        var sql = new StringBuilder();\n        var parameters = query.QueryCommand.Parameters.ToArray();\n\n        sql.Append(query.BuildSqlStatement());\n\n        // Replace each parameter placeholder with its actual value.\n        for (int i = 0; i < parameters.Length; i++)\n        {\n            var paramValue = parameters[i].Value;\n            var formattedParamValue = FormatParameterValue(paramValue);\n            sql.Replace("?" + parameters[i].ParameterName, formattedParamValue);\n        }\n\n        return sql.ToString();\n    }\n\n    private static string FormatParameterValue(object value)\n    {\n        switch (value)\n        {\n            case null:\n                return "NULL";\n            case DateTime dateTimeValue:\n                return $"'{dateTimeValue:yyyy-MM-dd HH:mm:ss}'"; // Adjust format as needed\n            case bool boolValue:\n                return boolValue ? "1" : "0"; // Assuming boolean is mapped to bit in SQL\n            default:\n                return $"'{value.ToString().Replace("'", "''")}'";\n        }\n    }\n}\n\n// Usage example:\nSqlQuery qry = DB.Select().From<Product>()\n                 .Where(Products.Columns.Name).IsEqualTo("Productname");\n\nusing (var dbConnection = new System.Data.SqlClient.SqlConnection(connectionString))\n{\n    Console.WriteLine(qry.BuildSqlWithValues(dbConnection));\n}