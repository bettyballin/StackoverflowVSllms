using System;\nusing System.Runtime.InteropServices;\nusing System.Security.Principal;\nusing System.ServiceProcess;\n\npublic class ServiceControllerWithImpersonation\n{\n    private static void StopStartReminderService()\n    {\n        string domain = "YOUR_DOMAIN"; // Domain of the user, or "" for local machine\n        string username = "YOUR_USERNAME"; // Local user with PowerUsers rights\n        string password = "YOUR_PASSWORD"; // Password of the local user\n\n        WindowsImpersonationContext impersonatedUser = null;\n\n        try\n        {\n            // Perform the impersonation\n            if (LogonUser(username, domain, password, 2, 0, out IntPtr tokenHandle))\n            {\n                WindowsIdentity newId = new WindowsIdentity(tokenHandle);\n                impersonatedUser = newId.Impersonate();\n\n                // Now perform service operations under the impersonated context\n                ServiceController svcController = new ServiceController("eTimeSheetReminderService");\n\n                if (svcController != null)\n                {\n                    try\n                    {\n                        svcController.Stop();\n                        svcController.WaitForStatus(ServiceControllerStatus.Stopped, TimeSpan.FromSeconds(10));\n                        svcController.Start();\n                    }\n                    catch (Exception ex)\n                    {\n                        General.ErrorHandling.LogError(ex);\n                    }\n                }\n            }\n        }\n        finally\n        {\n            // Revert back to original context and clean up token handle\n            if (impersonatedUser != null) impersonatedUser.Undo();\n\n            if (tokenHandle != IntPtr.Zero)\n            {\n                CloseHandle(tokenHandle);\n            }\n        }\n    }\n\n    [DllImport("advapi32.dll", SetLastError = true)]\n    private static extern bool LogonUser(string lpszUsername, string lpszDomain, string lpszPassword,\n                                         int dwLogonType, int dwLogonProvider, out IntPtr phToken);\n\n    [DllImport("kernel32.dll", CharSet = CharSet.Auto)]\n    private static extern bool CloseHandle(IntPtr handle);\n}