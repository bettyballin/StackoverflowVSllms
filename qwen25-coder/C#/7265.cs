// Repository Interface\npublic interface IPurchaseOrderRepository {\n    PurchaseOrder GetById(int id);\n    void Update(PurchaseOrder order);\n}\n\n// Concrete Repository\npublic class PurchaseOrderRepository : IPurchaseOrderRepository {\n    // Implement methods to CRUD Purchase Orders from the database.\n}\n\n// Service Layer\npublic class PurchaseOrderService {\n    private readonly IPurchaseOrderRepository _repository;\n\n    public PurchaseOrderService(IPurchaseOrderRepository repository) {\n        _repository = repository;\n    }\n\n    public void UpdateFactory(int purchaseOrderId, Factory newFactory) {\n        var order = _repository.GetById(purchaseOrderId);\n        if (IsFactoryValid(order, newFactory)) {\n            order.Factory = newFactory;\n            _repository.Update(order);\n        } else {\n            throw new InvalidOperationException("Invalid factory for this order.");\n        }\n    }\n\n    private bool IsFactoryValid(PurchaseOrder order, Factory factory) {\n        // Perform validation logic here.\n        return true; // Example always returns true.\n    }\n}\n\n// Entity (Domain Model)\npublic class PurchaseOrder {\n    public int Id { get; set; }\n    public Factory Factory { get; set; }\n\n    public void SetFactory(Factory newFactory, Func<Factory, bool> validate) {\n        if (!validate(newFactory)) {\n            throw new InvalidOperationException("Invalid factory.");\n        }\n        this.Factory = newFactory;\n    }\n}\n\n// Domain Object\npublic class Factory {\n    // Factory properties and methods.\n}