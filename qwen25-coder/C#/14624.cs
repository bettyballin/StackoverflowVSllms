// Define an interface for Service A\npublic interface IServiceA\n{\n    void DoWork();\n}\n\n// Concrete implementation of IServiceA hosted by WCF\n[ServiceContract]\npublic class ServiceA : IServiceA\n{\n    [OperationContract]\n    public void DoWork()\n    {\n        // Implementation here\n    }\n}\n\n// Service B definition with dependency on IServiceA via constructor injection\npublic class ServiceB\n{\n    private readonly IServiceA _serviceA;\n\n    public ServiceB(IServiceA serviceA)\n    {\n        _serviceA = serviceA;\n    }\n\n    public void WorkWithServiceA()\n    {\n        _serviceA.DoWork();\n    }\n}\n\n// Unit Test for Service B (using Moq as an example mocking library)\n[TestClass]\npublic class ServiceBTests\n{\n    [TestMethod]\n    public void Test_WorkWithServiceA()\n    {\n        var mockServiceA = new Mock<IServiceA>();\n        var serviceB = new ServiceB(mockServiceA.Object);\n\n        serviceB.WorkWithServiceA();\n\n        mockServiceA.Verify(m => m.DoWork(), Times.Once);\n    }\n}