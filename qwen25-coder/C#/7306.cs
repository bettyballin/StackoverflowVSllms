using System;\nusing System.Threading;\nusing System.Windows.Forms;\n\npublic class MyForm : Form\n{\n    private static Mutex _mutex = null;\n\n    public MyForm(string uniqueIdentifier)\n    {\n        bool isNewInstance;\n        string mutexName = $"SingleInstanceMutex-{uniqueIdentifier}";\n        _mutex = new Mutex(true, mutexName, out isNewInstance);\n\n        if (!isNewInstance)\n        {\n            // Another instance of the form already exists in this application.\n            throw new InvalidOperationException("An instance of MyForm is already running.");\n        }\n\n        // Form initialization code\n    }\n\n    protected override void OnClosed(EventArgs e)\n    {\n        _mutex.ReleaseMutex();\n        base.OnClosed(e);\n    }\n}\n\npublic class Program\n{\n    [STAThread]\n    public static void Main()\n    {\n        Application.EnableVisualStyles();\n        Application.SetCompatibleTextRenderingDefault(false);\n\n        try\n        {\n            // Use a unique identifier for each application instance, e.g., Process ID\n            string appId = System.Diagnostics.Process.GetCurrentProcess().Id.ToString();\n\n            MyForm form = new MyForm(appId);\n            Application.Run(form);\n        }\n        catch (InvalidOperationException ex)\n        {\n            MessageBox.Show(ex.Message);\n        }\n    }\n}