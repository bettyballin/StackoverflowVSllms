using Org.BouncyCastle.OpenPGP;\nusing System.IO;\n\npublic class PgpExample\n{\n    public static void Encrypt(string clearData, Stream publicKeyStream, Stream outputStream)\n    {\n        var pgpPublicKey = ReadPublicKey(publicKeyStream);\n        var literalDataPacketGenerator = new PGPLiteralDataGenerator();\n        var compressedDataGenerator = new PGPCompressedDataGenerator(PGPCompressedData.UNCOMPRESSED);\n\n        using (var compressedOutputStream = compressedDataGenerator.Open(outputStream, true))\n        {\n            var encryptedDataGenerator = new PGPEncryptedDataGenerator(SymmetricKeyAlgorithmTag.Cast5);\n            encryptedDataGenerator.AddMethod(pgpPublicKey);\n            using (var encryptedOutputStream = encryptedDataGenerator.Open(compressedOutputStream, clearData.Length + 1))\n            {\n                literalDataPacketGenerator.WriteObject(encryptedOutputStream, PGPUtil.GetUtf8Bytes(clearData), clearData.Length);\n            }\n        }\n    }\n\n    private static PGPPublicKey ReadPublicKey(Stream inputStream)\n    {\n        inputStream = PgpUtilities.GetDecoderStream(inputStream);\n\n        var pgpPub = new PgpPublicKeyRingBundle(inputStream).GetKeyRings().Cast<PgpPublicKeyRing>()\n            .SelectMany(kr => kr.GetPublicKeys()).Where(pk => pk.IsEncryptionKey).First();\n\n        return pgpPub;\n    }\n}