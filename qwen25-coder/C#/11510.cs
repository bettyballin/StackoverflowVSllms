using System;\nusing System.Collections.Generic;\n\npublic class TreeNode\n{\n    public string Name { get; set; }\n    public TreeNode Parent { get; set; }\n    public List<TreeNode> Children { get; } = new List<TreeNode>();\n\n    public static TreeNode BuildTree(List<string> urls)\n    {\n        var root = new TreeNode { Name = "Root" };\n        \n        foreach (var url in urls)\n        {\n            var parts = url.Trim('/').Split('/');\n            var currentNode = root;\n\n            foreach (var part in parts)\n            {\n                var childNode = currentNode.Children.Find(x => x.Name == part);\n                if (childNode == null)\n                {\n                    childNode = new TreeNode { Name = part, Parent = currentNode };\n                    currentNode.Children.Add(childNode);\n                }\n                currentNode = childNode;\n            }\n        }\n\n        return root;\n    }\n\n    public void PrintTree(int level = 0)\n    {\n        Console.WriteLine(new string(' ', level * 2) + this.Name);\n\n        foreach (var child in Children.OrderBy(c => c.Name))\n        {\n            child.PrintTree(level + 1);\n        }\n    }\n}\n\n// Usage\nclass Program\n{\n    static void Main()\n    {\n        var urls = new List<string>\n        {\n            "/file1.aspx",\n            "/file2.aspx",\n            "/aFolder/file.aspx",\n            "/aFolder/file2.aspx",\n            "/bFolder/file.aspx",\n            "/bFolder/cFolder/file.aspx"\n        };\n\n        var treeRoot = TreeNode.BuildTree(urls);\n        treeRoot.PrintTree();\n    }\n}