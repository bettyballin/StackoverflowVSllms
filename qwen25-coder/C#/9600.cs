using System;\nusing System.Threading;\n\npublic class MutexSample\n{\n    static Mutex gM1;\n    static Mutex gM2;\n    const int ITERS = 100;\n    static AutoResetEvent Event1 = new AutoResetEvent(false);\n    static AutoResetEvent Event2 = new AutoResetEvent(false);\n    static AutoResetEvent Event3 = new AutoResetEvent(false);\n    static AutoResetEvent Event4 = new AutoResetEvent(false);\n\n    public static void Main(String[] args)\n    {\n        Console.WriteLine("Mutex Sample ...");\n        // Create Mutex initialOwned, with name of "MyMutex".\n        gM1 = new Mutex(true, "MyMutex");\n        // Create Mutex initialOwned, with no name.\n        gM2 = new Mutex(true);\n        Console.WriteLine(" - Main Owns gM1 and gM2");\n\n        AutoResetEvent[] evs = new AutoResetEvent[4];\n        evs[0] = Event1;    // Event for t1\n        evs[1] = Event2;    // Event for t2\n        evs[2] = Event3;    // Event for t3\n        evs[3] = Event4;    // Event for t4\n\n        MutexSample tm = new MutexSample();\n        Thread thread1 = new Thread(new ThreadStart(tm.t1Start));\n        Thread thread2 = new Thread(new ThreadStart(tm.t2Start));\n        Thread thread3 = new Thread(new ThreadStart(tm.t3Start));\n        Thread thread4 = new Thread(new ThreadStart(tm.t4Start));\n\n        // Release ownership of gM1 and gM2 before starting threads to avoid deadlock\n        gM1.ReleaseMutex();\n        gM2.ReleaseMutex();\n\n        thread1.Start();   // Does Mutex.WaitAll(Mutex[] of gM1 and gM2)\n        thread2.Start();   // Does Mutex.WaitOne(Mutex gM1)\n        thread3.Start();   // Does Mutex.WaitAny(Mutex[] of gM1 and gM2)\n        thread4.Start();   // Does Mutex.WaitOne(Mutex gM2)\n\n        Thread.Sleep(2000);\n        Console.WriteLine(" - Main reclaims gM1");\n        gM1.WaitOne();\n\n        Thread.Sleep(1000);\n        Console.WriteLine(" - Main reclaims gM2");\n        gM2.WaitOne();\n\n        // Waiting until all four threads signal that they are done.\n        WaitHandle.WaitAll(evs);\n        gM1.ReleaseMutex();\n        gM2.ReleaseMutex();\n        Console.WriteLine("... Mutex Sample");\n    }\n\n    public void t1Start()\n    {\n        Console.WriteLine("t1Start started,  Mutex.WaitAll(Mutex[])");\n        Mutex[] gMs = new Mutex[2];\n        gMs[0] = gM1;  // Create and load an array of Mutex for WaitAll call\n        gMs[1] = gM2;\n        Mutex.WaitAll(gMs);  // Waits until both gM1 and gM2 are released\n        Thread.Sleep(2000);\n        Console.WriteLine("t1Start finished, Mutex.WaitAll(Mutex[])");\n        gM1.ReleaseMutex();\n        gM2.ReleaseMutex();\n        Event1.Set();       // AutoResetEvent.Set() flagging method is done\n    }\n\n    public void t2Start()\n    {\n        Console.WriteLine("t2Start started,  gM1.WaitOne( )");\n        gM1.WaitOne();   // Waits until Mutex g1 is released\n        Thread.Sleep(2000);\n        Console.WriteLine("t2Start finished, gM1.WaitOne( )");\n        gM1.ReleaseMutex();\n        Event2.Set();    // AutoResetEvent.Set() flagging method is done\n    }\n\n    public void t3Start()\n    {\n        Console.WriteLine("t3Start started, Mutex.WaitAny(Mutex[])");\n        Mutex[] gMs = new Mutex[2];\n        gMs[0] = gM1;  // Create and load an array of Mutex for WaitAny call\n        gMs[1] = gM2;\n        int index = Mutex.WaitAny(gMs);  // Waits until either Mutex is released\n        Thread.Sleep(2000);\n        Console.WriteLine($"t3Start finished, Mutex:{index} released");\n        if (index == 0) gM1.ReleaseMutex();\n        else gM2.ReleaseMutex();\n        Event3.Set();       // AutoResetEvent.Set() flagging method is done\n    }\n\n    public void t4Start()\n    {\n        Console.WriteLine("t4Start started,  gM2.WaitOne( )");\n        gM2.WaitOne();   // Waits until Mutex g2 is released\n        Thread.Sleep(2000);\n        Console.WriteLine("t4Start finished, gM2.WaitOne( )");\n        gM2.ReleaseMutex();\n        Event4.Set();    // AutoResetEvent.Set() flagging method is done\n    }\n}