using System;\nusing System.Reflection;\n\npublic class ReflectionInvoker {\n    public static object InvokeMember(string[] path, string memberName, object[] parameters) {\n        object target = CoreInstance.Instance; // Assuming there is an Instance property for singleton\n\n        foreach (var propertyName in path) {\n            PropertyInfo propInfo = target.GetType().GetProperty(propertyName);\n            if (propInfo == null) {\n                throw new Exception($"Property {propertyName} not found on type {target.GetType()}");\n            }\n            target = propInfo.GetValue(target, null);\n        }\n\n        MethodInfo methodInfo = target.GetType().GetMethod(memberName);\n        PropertyInfo propertyInfo = null;\n\n        if (methodInfo != null) {\n            return methodInfo.Invoke(target, parameters);\n        } else {\n            propertyInfo = target.GetType().GetProperty(memberName);\n            if (propertyInfo != null) {\n                if (parameters.Length != 0) {\n                    throw new Exception("Parameters provided for a property get operation.");\n                }\n                return propertyInfo.GetValue(target, null);\n            }\n        }\n\n        throw new Exception($"Member {memberName} not found on type {target.GetType()}");\n    }\n}