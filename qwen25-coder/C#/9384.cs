using System;\nusing System.Runtime.InteropServices;\n\npublic class ComInteropHelper : IDisposable\n{\n    private object _wordApp;\n    private bool _disposed = false;\n\n    public ComInteropHelper()\n    {\n        // Initialize COM Objects like Word or Excel here.\n        _wordApp = Activator.CreateInstance(Type.GetTypeFromProgID("Word.Application"));\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        if (!_disposed)\n        {\n            if (disposing)\n            {\n                // Free any managed resources here.\n            }\n\n            if (_wordApp != null)\n            {\n                Marshal.ReleaseComObject(_wordApp);\n                _wordApp = null;\n            }\n\n            _disposed = true;\n        }\n    }\n\n    ~ComInteropHelper()\n    {\n        // Finalizer calls Dispose with false.\n        Dispose(false);\n    }\n\n    public void Dispose()\n    {\n        // This object will be cleaned up by the Dispose method.\n        Dispose(true);\n\n        // Inform the GC that this object doesn't require finalization.\n        GC.SuppressFinalize(this);\n    }\n}\n\npublic class MyWorkflow\n{\n    public void Execute()\n    {\n        ComInteropHelper helper = null;\n        try\n        {\n            helper = new ComInteropHelper();\n            // Perform operations...\n        }\n        finally\n        {\n            // Ensure the COM objects are released.\n            if (helper != null)\n            {\n                helper.Dispose();\n            }\n        }\n    }\n}