using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main()\n    {\n        int[] prices = { /* Prices of 100 products */ };\n        int[] energies = { /* Energies of 100 products */ };\n\n        int maxPrice = 1000; // $10 in cents to avoid floating-point issues\n        int requiredCount = 15;\n        int n = prices.Length;\n\n        int[,] dp = new int[maxPrice + 1, requiredCount + 1];\n        bool[,,] keep = new bool[maxPrice + 1, requiredCount + 1, n];\n\n        for (int p = 0; p <= maxPrice; p++)\n            dp[p, 0] = 0;\n\n        for (int c = 0; c <= requiredCount; c++)\n            dp[0, c] = 0;\n\n        for (int i = 1; i < n; i++)\n        {\n            for (int p = 1; p <= maxPrice; p++)\n                for (int c = 1; c <= requiredCount; c++)\n                {\n                    if (prices[i] > p || c == 0)\n                        dp[p, c] = dp[p, c];\n                    else\n                    {\n                        int includingThisItem = prices[i] + dp[p - prices[i], c - 1] + energies[i];\n                        int excludingThisItem = dp[p, c];\n\n                        if (includingThisItem > excludingThisItem)\n                        {\n                            dp[p, c] = includingThisItem;\n                            keep[p, c, i] = true;\n                        }\n                    }\n                }\n        }\n\n        // Backtrack to find which items were included\n        List<int> selectedItems = new List<int>();\n        int r = maxPrice, s = requiredCount;\n        for (int i = n - 1; i >= 0 && s > 0; i--)\n            if (keep[r, s, i])\n            {\n                selectedItems.Add(i);\n                r -= prices[i];\n                s--;\n            }\n\n        Console.WriteLine("Selected products that maximize energy: ");\n        foreach (var item in selectedItems)\n        {\n            Console.WriteLine($"Product {item}, Price: ${prices[item] / 100.0}, Energy: {energies[item]} kJ");\n        }\n    }\n}