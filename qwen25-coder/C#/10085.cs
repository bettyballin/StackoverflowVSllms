// ServerImplementation.cs\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace MyComServer\n{\n    [Guid("5A0C6D6F-742E-4BA8-B3C9-D7EC01AB34E3"), ClassInterface(ClassInterfaceType.None)]\n    public class MyComImplementation : IMyComInterface\n    {\n        private string _data;\n\n        public string GetData() => _data;\n\n        public void SetData(string data) => _data = data;\n    }\n\n    [Guid("6F2B1B5C-B3A8-4C7D-AE94-D079BFB8C9C9")]\n    [ComVisible(true)]\n    [ComSourceInterfaces(typeof(IMyComInterface))]\n    public class Program\n    {\n        private static void Main(string[] args)\n        {\n            // This is a simple example. In practice, you would want to handle unhandled exceptions here.\n            System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime = TimeSpan.Zero;\n            var channel = new System.Runtime.Remoting.Channels.Ipc.IpcChannel("comserver");\n            System.Runtime.Remoting.Channels.ChannelServices.RegisterChannel(channel, true);\n            System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(typeof(MyComImplementation), "MyComImplementation", WellKnownObjectMode.SingleCall);\n\n            Console.WriteLine("COM Server started. Press Enter to exit...");\n            Console.ReadLine();\n        }\n    }\n}