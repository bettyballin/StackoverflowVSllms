using System;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\nusing System.Threading;\nusing System.Windows.Forms;\n\nnamespace TestMessageBox\n{\n    static class Program\n    {\n        [DllImport("user32.dll", SetLastError = true)]\n        private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);\n\n        [STAThread]\n        static void Main()\n        {\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);\n            \n            Process[] procs = Process.GetProcessesByName("notepad");\n            if (procs.Length > 0)\n            {\n                Console.WriteLine("Notepad detected...");\n                                \n                Thread messageThread = new Thread(() =>\n                {\n                    NotifyIcon notifyIcon = new NotifyIcon();\n                    notifyIcon.Icon = SystemIcons.Application;\n                    notifyIcon.Visible = true;\n\n                    // Show notification balloon\n                    notifyIcon.ShowBalloonTip(5000, "Important Message", "This is your message without locking up notepad!", ToolTipIcon.Info);\n\n                    // Keep the thread alive until the notification times out or the application ends gracefully\n                    Thread.Sleep(6000);\n\n                    notifyIcon.Visible = false;\n                });\n                \n                messageThread.IsBackground = true;\n                messageThread.Start();\n                \n                Console.WriteLine("Press any key to exit...");\n                Console.ReadKey();\n\n                // Optionally, cleanly terminate the thread (not needed here since it's background)\n                messageThread.Join(2000);\n            }\n        }\n    }\n}