// In your separate Test Project, add references to the necessary libraries (e.g., System.Web).\n\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing System.Web;\nusing Moq;\n\nnamespace YourTestProject\n{\n    [TestClass]\n    public class ExampleTests\n    {\n        // Create a mock or fake HttpContext when needed\n        private static Mock<HttpContextBase> GetMockContext()\n        {\n            var context = new Mock<HttpContextBase>();\n            var request = new Mock<HttpRequestBase>();\n            var response = new Mock<HttpResponseBase>();\n\n            context.Setup(m => m.Request).Returns(request.Object);\n            context.Setup(m => m.Response).Returns(response.Object);\n\n            return context;\n        }\n\n        [TestMethod]\n        public void TestBusinessLogic()\n        {\n            // Arrange\n            var mockContext = GetMockContext();\n            var yourClass = new YourLogicClass(mockContext.Object);\n\n            // Act\n            var result = yourClass.YourMethod();\n\n            // Assert\n            Assert.AreEqual(expectedValue, result);\n        }\n    }\n\n    // This is a hypothetical class based in App_Code that you are testing.\n    public class YourLogicClass\n    {\n        private readonly HttpContextBase _context;\n\n        public YourLogicClass(HttpContextBase context)\n        {\n            _context = context;\n        }\n\n        public string YourMethod()\n        {\n            // Example logic\n            return "Example Result";\n        }\n    }\n}