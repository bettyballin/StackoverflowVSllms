using System;\nusing System.Collections.Generic;\n\npublic class OrderedDictionary<T>\n{\n    private List<T> _list = new List<T>();\n    private Dictionary<T, int> _dictionary = new Dictionary<T, int>();\n\n    public void Add(T item)\n    {\n        if (!_dictionary.ContainsKey(item))\n        {\n            _dictionary.Add(item, _list.Count);\n            _list.Add(item);\n        }\n    }\n\n    public bool Remove(T item)\n    {\n        if (_dictionary.TryGetValue(item, out int index))\n        {\n            _dictionary.Remove(item);\n\n            if (index < _list.Count - 1)\n            {\n                T lastItem = _list[_list.Count - 1];\n                _list[index] = lastItem;\n                _dictionary[lastItem] = index;\n            }\n\n            _list.RemoveAt(_list.Count - 1);\n            return true;\n        }\n        return false;\n    }\n\n    public int IndexOf(T item)\n    {\n        if (_dictionary.TryGetValue(item, out int index))\n        {\n            return index;\n        }\n        return -1;\n    }\n\n    public T this[int index] => _list[index];\n}\n\n// Usage example\nclass Program\n{\n    static void Main()\n    {\n        OrderedDictionary<string> orderedDict = new OrderedDictionary<string>();\n        \n        orderedDict.Add("apple");\n        orderedDict.Add("banana");\n\n        Console.WriteLine(orderedDict.IndexOf("banana")); // Output: 1\n\n        orderedDict.Remove("apple");\n        Console.WriteLine(orderedDict.IndexOf("banana")); // Output: 0\n    }\n}