// Define an interface for all your delegates to implement\npublic interface IEvent {}\n\n// Have each specific delegate inherit from the interface\npublic delegate void EventDelegate1(string message);\npublic delegate void EventDelegate2(int id);\n\n// Implementing a generic collection constrained by the interface\npublic class EventQueue<T> where T : IEvent {\n    private Queue<T> eventQueue;\n\n    public EventQueue() {\n        eventQueue = new Queue<T>();\n    }\n\n    public void Enqueue(T del) {\n        eventQueue.Enqueue(del);\n    }\n\n    public T Dequeue() {\n        return eventQueue.Dequeue();\n    }\n}\n\n// Usage\npublic class Program {\n    public static void Main() {\n        // Example usage with EventDelegate1\n        EventQueue<EventDelegate1> queue = new EventQueue<EventDelegate1>();\n        queue.Enqueue(Console.WriteLine);\n        var dequeuedDelegate = queue.Dequeue();\n        dequeuedDelegate("Hello!");\n\n        // Example usage with EventDelegate2\n        EventQueue<EventDelegate2> queue2 = new EventQueue<EventDelegate2>();\n        queue2.Enqueue(x => Console.WriteLine($"ID: {x}"));\n        var dequeuedDelegate2 = queue2.Dequeue();\n        dequeuedDelegate2(42);\n    }\n}