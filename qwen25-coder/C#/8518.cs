using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class AesEncryption\n{\n    public static string Encrypt(string plainText, byte[] key)\n    {\n        // Replace your vector with a proper random IV if needed. Here we are initializing it to all zeros for brevity.\n        byte[] iv = new byte[16]; // For AES-128 the IV length is 16 bytes\n        using (Aes aesAlg = Aes.Create())\n        {\n            aesAlg.Key = key;\n            aesAlg.IV = iv;\n\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n            using (MemoryStream msEncrypt = new MemoryStream())\n            {\n                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                {\n                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))\n                    {\n                        swEncrypt.Write(plainText);\n                    }\n                    return BitConverter.ToString(msEncrypt.ToArray()).Replace("-", "").ToLower();\n                }\n            }\n        }\n    }\n\n    public static void Main()\n    {\n        string originalString = "your_string_to_encrypt";\n        byte[] key = Encoding.UTF8.GetBytes("your_session_key_16_bytes"); // Ensure the key is 16 bytes for AES-128\n\n        if (key.Length != 16)\n        {\n            throw new ArgumentException("Key must be 16 bytes long.", nameof(key));\n        }\n\n        string encryptedString = Encrypt(originalString, key);\n        Console.WriteLine($"Encrypted: {encryptedString}");\n    }\n}