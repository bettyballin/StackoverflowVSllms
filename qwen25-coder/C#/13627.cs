using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Configuration.Install;\nusing Microsoft.Win32;\n\n[RunInstaller(true)]\npublic class CustomInstaller : Installer\n{\n    public override void Install(IDictionary stateSaver)\n    {\n        base.Install(stateSaver);\n        string applicationPath = Context.Parameters["TargetDir"];\n        CreateShellContextMenu(applicationPath);\n        stateSaver.Add("ApplicationPath", applicationPath);\n    }\n\n    public override void Uninstall(IDictionary savedState)\n    {\n        if (savedState.Contains("ApplicationPath"))\n        {\n            DeleteShellContextMenu((string)savedState["ApplicationPath"]);\n        }\n        base.Uninstall(savedState);\n    }\n\n    private void CreateShellContextMenu(string path)\n    {\n        RegistryKey shell = Registry.ClassesRoot.OpenSubKey("*\\shell", true).CreateSubKey("YourContextMenuName");\n        shell.SetValue("", "Run YourApp");  // This is the name of the menu entry\n\n        RegistryKey command = shell.CreateSubKey("command");\n        command.SetValue("", $"\"{path}YourAppExecutable.exe\"");\n    }\n\n    private void DeleteShellContextMenu(string path)\n    {\n        try\n        {\n            Registry.ClassesRoot.DeleteSubKeyTree("*\\shell\\YourContextMenuName", false);\n        }\n        catch (Exception ex)\n        {\n            // Handle exception if necessary\n        }\n    }\n}