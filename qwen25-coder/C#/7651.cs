using System;\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Security.Claims;\nusing Microsoft.IdentityModel.Tokens;\nusing System.Text;\n\npublic class AuthService\n{\n    private readonly string _secretKey = "your_secret_key"; // This should be stored securely, not hardcoded\n\n    public string GenerateToken(string username)\n    {\n        var tokenHandler = new JwtSecurityTokenHandler();\n        var key = Encoding.ASCII.GetBytes(_secretKey);\n        var tokenDescriptor = new SecurityTokenDescriptor\n        {\n            Subject = new ClaimsIdentity(new Claim[]\n            {\n                new Claim(ClaimTypes.Name, username)\n            }),\n            Expires = DateTime.UtcNow.AddDays(1), // Set the expiration time\n            SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)\n        };\n        var token = tokenHandler.CreateToken(tokenDescriptor);\n        return tokenHandler.WriteToken(token);\n    }\n\n    public bool ValidateToken(string authToken)\n    {\n        try\n        {\n            var tokenHandler = new JwtSecurityTokenHandler();\n            var key = Encoding.ASCII.GetBytes(_secretKey);\n            tokenHandler.ValidateToken(authToken, new TokenValidationParameters\n            {\n                ValidateIssuerSigningKey = true,\n                IssuerSigningKey = new SymmetricSecurityKey(key),\n                ValidateIssuer = false, // Set according to your requirements\n                ValidateAudience = false // Set according to your requirements\n            }, out SecurityToken validatedToken);\n\n            return true;\n        }\n        catch (Exception)\n        {\n            return false;\n        }\n    }\n}