using System;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Runtime.InteropServices;\n\nclass Program\n{\n    [DllImport("kernel32.dll", SetLastError = true)]\n    static extern bool AttachConsole(uint dwProcessId);\n\n    private const uint ATTACH_PARENT_PROCESS = 0xFFFFFFFF;\n\n    static void Main(string[] args)\n    {\n        if (args.Length == 0)\n        {\n            // Run as Windows Application\n            RunAsWindowsApp();\n        }\n        else\n        {\n            // Check if already attached to a console or attach parent's console\n            bool hasConsole = AttachConsole(ATTACH_PARENT_PROCESS);\n\n            if (!hasConsole && Marshal.GetLastWin32Error() == 5) // ERROR_ACCESS_DENIED\n            {\n                // No parent process console, create a new one.\n                if (!AllocConsole())\n                {\n                    throw new Exception("Failed to allocate console");\n                }\n            }\n\n            // Set up output redirection\n            IntPtr ptrNew = GetStdHandle(-11);\n            ptrNew = CreateFile("CONOUT$", 0x40000000, 2, IntPtr.Zero, 3, 0, IntPtr.Zero);\n            if (!SetStdHandle(-11, ptrNew))\n            {\n                throw new ExternalCallException("SetStdHandle");\n            }\n\n            StreamWriter newOut = new StreamWriter(Console.OpenStandardOutput());\n            newOut.AutoFlush = true;\n            Console.SetOut(newOut);\n            Console.SetError(newOut);\n\n            // Run as console application\n            RunAsConsoleApp();\n        }\n    }\n\n    private static void RunAsWindowsApp()\n    {\n        // Implementation for running as a Windows Application\n        Console.WriteLine("Running as Windows App");\n    }\n\n    private static void RunAsConsoleApp()\n    {\n        // Implementation for running as a Console Application\n        Console.WriteLine("Running as Console App");\n    }\n\n    [DllImport("kernel32.dll", SetLastError = true)]\n    private static extern bool AllocConsole();\n\n    [DllImport("kernel32.dll")]\n    static extern IntPtr GetStdHandle(int nStdHandle);\n\n    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]\n    static extern IntPtr CreateFile(string lpFileName, uint dwDesiredAccess, uint dwShareMode, IntPtr lpSecurityAttributes, uint dwCreationDisposition, uint dwFlagsAndAttributes, IntPtr hTemplateFile);\n\n    [DllImport("kernel32.dll")]\n    static extern bool SetStdHandle(int nStdHandle, IntPtr hHandle);\n}