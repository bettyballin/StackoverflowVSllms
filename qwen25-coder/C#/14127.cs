using System;\nusing PacketDotNet;\nusing SharpPcap;\n\nclass Program\n{\n    static void Main()\n    {\n        // Get a device list to choose from. You may have several devices\n        // depending on your setup\n        var devices = CaptureDeviceList.Instance;\n\n        if (devices.Count < 1)\n        {\n            Console.WriteLine("No devices were found on this machine");\n            return;\n        }\n\n        Console.WriteLine("Listing devices:");\n        for (int i = 0; i < devices.Count; i++)\n        {\n            // Print out some info about each device\n            IDevice dev = devices[i];\n            Console.Write("{0} {1} {2}\n", i,.dev.Description ?? "(No description available)", dev.Name);\n        }\n\n        int id;\n        do\n        {\n            Console.WriteLine("Enter the number (0-{0}) of the device you want to receive packets from: ", devices.Count - 1);\n        } while (!int.TryParse(Console.ReadLine(), out id) || id < 0 || id >= devices.Count);\n\n        // Take id'th device\n        IDevice dev = devices[id];\n\n        Console.WriteLine();\n        Console.WriteLine("Opening {0}...", dev.Name);\n        // Open the device for capturing\n        int readTimeoutMilliseconds = 1000;\n        dev.Open(DeviceMode.Promiscuous, readTimeoutMilliseconds);\n\n        Console.WriteLine("Now receiving. Hit any key to stop...");\n        // Run the capture loop until a key is hit.\n        using (var waiter = new EventWaitHandle(false, EventResetMode.AutoReset))\n        {\n            // handle events such as receive packets and error\n            dev.OnPacketArrival += new PacketArrivalEventHandler(device_OnPacketArrival);\n            dev.OnCaptureStopped += new CaptureStopHandler(Device_OnCaptureStopped);\n\n            // Start the capture process\n            dev.StartCapture();\n\n            Console.ReadKey();\n        }\n\n        // Stop the capture process, if still running\n        dev.StopCaptureTimeout(1000); // wait a max of 1 seconds to stop\n\n        Console.WriteLine("Shutting down...");\n        dev.Close();\n    }\n\n    private static void device_OnPacketArrival(object sender, PacketCapture e)\n    {\n        var time           = e.Header.Timeval.Date.ToLongTimeString();\n        var length         = e.Length;\n        var rawPacket      = new RawCapture(e.Header, e.Data);\n\n        // Decode the packet\n        var ethernetPacket = Packet.ParsePacket(LinkLayers.Ethernet, e.Data);\n\n        Console.WriteLine("{0} length={1}", time, length);\n        Console.WriteLine("----------------------------------");\n\n        if (ethernetPacket.PayloadPacket == null)\n            return;\n\n        if(ethernetPacket.PayloadPacket is TcpPacket tcpPacket)\n        {\n            Console.WriteLine(tcpPacket.ToString());\n            // Use tcpPacket.SourceAddress and tcpPacket.DestinationAddress to implement filtering logic.\n            \n            // Example: Block packets to a specific IP address\n            /*\n            if (tcpPacket.DestinationAddress == "192.168.1.5")\n            {\n                // Drop the packet here, this is a simplified example.\n            }\n            */\n        }\n\n        Console.WriteLine("----------------------------------");\n    }\n\n    private static void Device_OnCaptureStopped(object sender, CaptureStopEventArgs args)\n    {\n        Console.WriteLine("Device stopped!");\n    }\n}