using System.ServiceProcess;\nusing System.Timers;\n\npublic class MyService : ServiceBase\n{\n    private Timer timer1;\n\n    public MyService()\n    {\n        // Constructor Code Here\n    }\n\n    protected override void OnStart(string[] args)\n    {\n        // Initialization Code here\n        timer1 = new Timer();\n        this.timer1.Interval = 30000; // every 30 sec\n        this.timer1.Elapsed += new ElapsedEventHandler(this.OnTimer);\n        timer1.Start();\n\n        base.OnStart(args);\n    }\n\n    private void OnTimer(object sender, ElapsedEventArgs args)\n    {\n        // Do whatever you need to do in your service code.\n    }\n\n    protected override void OnStop()\n    {\n        try\n        {\n            timer1.Stop();\n            timer1.Dispose();\n        }\n        catch (Exception ex)\n        {\n            // Handle error here\n        }\n\n        base.OnStop(); // Call the ServiceBase.Stop method.\n    }\n\n    protected override void Dispose(bool disposing)\n    {\n        if (disposing)\n        {\n            if (timer1 != null)\n            {\n                timer1.Stop();\n                timer1.Dispose();\n                timer1 = null;\n            }\n        }\n        base.Dispose(disposing);\n    }\n}