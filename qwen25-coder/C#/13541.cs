using System;\nusing System.IO;\nusing System.Text;\n\npublic class CsvWatcher\n{\n    private string _filePath;\n    private long _previousLength; // To keep track of the last read position\n\n    public CsvWatcher(string filePath)\n    {\n        _filePath = filePath;\n        _previousLength = 0;\n\n        var watcher = new FileSystemWatcher(Path.GetDirectoryName(filePath), Path.GetFileName(filePath));\n        watcher.NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.Size;\n        watcher.Changed += OnChanged;\n        watcher.EnableRaisingEvents = true;\n    }\n\n    private void OnChanged(object source, FileSystemEventArgs e)\n    {\n        // Ensure the file is not being written to for too long\n        while (IsFileInUse(new FileInfo(e.FullPath))) ;\n\n        using var streamReader = new StreamReader(e.FullPath, Encoding.UTF8, true, 1024, true);\n        streamReader.BaseStream.Seek(_previousLength, SeekOrigin.Begin);\n\n        string line;\n        while ((line = streamReader.ReadLine()) != null)\n        {\n            // Insert the line into your database\n            InsertLineIntoDatabase(line);\n        }\n\n        _previousLength = streamReader.BaseStream.Position;\n    }\n\n    private void InsertLineIntoDatabase(string line)\n    {\n        // Implement your database insertion logic here\n        Console.WriteLine("Inserted into DB: " + line);\n    }\n\n    private static bool IsFileInUse(FileInfo file) =>\n        file != null && file.Exists &&\n        file.IsInUse();\n\n    public static class FileExtensions\n    {\n        public static bool IsInUse(this FileInfo fileInfo)\n        {\n            try\n            {\n                using var stream = fileInfo.Open(FileMode.Open, FileAccess.Read, FileShare.None);\n            }\n            catch (IOException)\n            {\n                // The file is unavailable because it is:\n                // still being written to\n                // or being processed by another thread\n                // or does not exist (has already been processed)\n                return true;\n            }\n\n            // File is not in use\n            return false;\n        }\n    }\n}\n\n// Usage example:\nclass Program\n{\n    static void Main()\n    {\n        var csvWatcher = new CsvWatcher("path/to/your/file.csv");\n        Console.WriteLine("Press q to quit.");\n        while (Console.Read() != 'q') ;\n    }\n}