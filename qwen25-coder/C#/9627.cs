using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Channels;\nusing System.Threading.Tasks;\n\npublic class SimpleMessageBus\n{\n    private readonly Channel<string> _channel = Channel.CreateUnbounded<string>();\n\n    public async Task Publish(string message)\n    {\n        await _channel.Writer.WriteAsync(message);\n    }\n\n    public async ValueTask Subscribe(Action<string> handler, CancellationToken cancellationToken = default)\n    {\n        while (await _channel.Reader.WaitToReadAsync(cancellationToken))\n        {\n            var msg = await _channel.Reader.ReadAsync(cancellationToken);\n            handler(msg);\n        }\n    }\n}\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        var messageBus = new SimpleMessageBus();\n\n        // Start subscriber tasks\n        _ = messageBus.Subscribe(Console.WriteLine);\n\n        // Publish messages\n        await messageBus.Publish("Hello");\n        await messageBus.Publish("World");\n\n        Console.ReadKey();\n    }\n}