using System.Web;\nusing System.Web.Mvc;\nusing System.Web.SessionState;\nusing Moq;\nusing NUnit.Framework;\n\n// Assume this is your Controller\npublic class SampleController : Controller\n{\n    public ActionResult Index()\n    {\n        // Setting something in Session\n        HttpContext.Session["Key"] = "Value";\n        \n        var valueFromSession = HttpContext.Session["Key"];\n        \n        ViewBag.Message = valueFromSession.ToString();\n        return View();\n    }\n}\n\n[TestFixture]\npublic class SampleControllerTests\n{\n    [Test]\n    public void Index_ShouldSetAndRetrieveCorrectValueFromSession()\n    {\n        // Arrange\n        Mock<HttpContextBase> mockHttpContext = new Mock<HttpContextBase>();\n        Mock<HttpSessionStateBase> mockSession = new Mock<HttpSessionStateBase>();\n\n        string expected = "ExpectedValue";\n        \n        // Set up the session to return a value when a key is accessed\n        mockSession.Setup(x => x["Key"]).Returns(expected);\n        // Set the session on the HttpContext\n        mockHttpContext.Setup(x => x.Session).Returns(mockSession.Object);\n\n        var controller = new SampleController();\n        controller.ControllerContext = new ControllerContext(mockHttpContext.Object, new RouteData(), controller);\n\n        // Act\n        ActionResult result = controller.Index();\n\n        // Assert\n        ViewResult viewResult = result as ViewResult;\n        Assert.IsNotNull(viewResult);\n        \n        var actual = viewResult.ViewBag.Message;\n\n        Assert.AreEqual(expected, actual);\n    }\n}