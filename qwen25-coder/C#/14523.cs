// Example implementation in C#\n   public static int LevenshteinDistance(string s, string t)\n   {\n       if (string.IsNullOrEmpty(s))\n           return string.IsNullOrEmpty(t) ? 0 : t.Length;\n       \n       if (string.IsNullOrEmpty(t))\n           return s.Length;\n\n       int[,] d = new int[s.Length + 1, t.Length + 1];\n\n       for (int i = 0; i <= s.Length; i++) { d[i, 0] = i; }\n       for (int j = 0; j <= t.Length; j++) { d[0, j] = j; }\n\n       for (int i = 1; i <= s.Length; i++)\n           for (int j = 1; j <= t.Length; j++)\n               d[i, j] = Math.Min\n               (\n                   Math.Min(d[i - 1, j] + 1,    // Deletion\n                            d[i, j - 1] + 1),   // Insertion\n                   d[i - 1, j - 1] + (s[i - 1] == t[j - 1] ? 0 : 1) // Substitution\n               );\n\n       return d[s.Length, t.Length];\n   }