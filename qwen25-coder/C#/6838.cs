public class AdsOperations\n{\n    public static string ReadAds(string filePath, string streamName)\n    {\n        var securityAttributes = new AdsHelper.SECURITY_ATTRIBUTES();\n        securityAttributes.nLength = Marshal.SizeOf(securityAttributes);\n\n        // Construct the full path to the alternate data stream\n        string adsPath = $"{filePath}:{streamName}";\n\n        IntPtr hFile = AdsHelper.CreateFile(\n            adsPath,\n            AdsHelper.GENERIC_READ,\n            0, // do not share\n            ref securityAttributes,\n            AdsHelper.OPEN_EXISTING,\n            0, // default attributes\n            IntPtr.Zero);\n\n        if (hFile == IntPtr.Zero)\n        {\n            throw new IOException("Could not open file.", Marshal.GetLastWin32Error());\n        }\n\n        try\n        {\n            const int bufferSize = 1024;\n            byte[] buffer = new byte[bufferSize];\n            uint bytesRead;\n\n            if (!AdsHelper.ReadFile(hFile, buffer, bufferSize, out bytesRead, IntPtr.Zero))\n            {\n                throw new IOException("Failed to read ADS.", Marshal.GetLastWin32Error());\n            }\n\n            return Encoding.Default.GetString(buffer, 0, (int)bytesRead);\n        }\n        finally\n        {\n            AdsHelper.CloseHandle(hFile);\n        }\n    }\n\n    public static void WriteAds(string filePath, string streamName, byte[] data)\n    {\n        var securityAttributes = new AdsHelper.SECURITY_ATTRIBUTES();\n        securityAttributes.nLength = Marshal.SizeOf(securityAttributes);\n\n        // Construct the full path to the alternate data stream\n        string adsPath = $"{filePath}:{streamName}";\n\n        IntPtr hFile = AdsHelper.CreateFile(\n            adsPath,\n            AdsHelper.GENERIC_WRITE,\n            0, // do not share\n            ref securityAttributes,\n            AdsHelper.OPEN_EXISTING,\n            0, // default attributes\n            IntPtr.Zero);\n\n        if (hFile == IntPtr.Zero)\n        {\n            throw new IOException("Could not open file.", Marshal.GetLastWin32Error());\n        }\n\n        try\n        {\n            uint bytesWritten;\n\n            if (!AdsHelper.WriteFile(hFile, data, (uint)data.Length, out bytesWritten, IntPtr.Zero))\n            {\n                throw new IOException("Failed to write ADS.", Marshal.GetLastWin32Error());\n            }\n\n            if (bytesWritten != data.Length)\n            {\n                throw new IOException("ADS write incomplete.");\n            }\n        }\n        finally\n        {\n            AdsHelper.CloseHandle(hFile);\n        }\n    }\n}