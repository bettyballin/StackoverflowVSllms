using System;\nusing System.Collections.Generic;\nusing QuickGraph;\nusing QuickGraph.Algorithms.ShortestPath;\n\nclass Program\n{\n    static void Main()\n    {\n        // Create a new directed graph, where T is the type of edge\n        var g = new AdjacencyGraph<string, Edge<string>>();\n\n        // Add vertices and edges\n        g.AddVertexRange(new List<string> { "A", "B", "C", "D" });\n        g.AddEdge(new Edge<string>("A", "B"));\n        g.AddEdge(new Edge<string>("B", "C"));\n        g.AddEdge(new Edge<string>("A", "C"));\n        g.AddEdge(new Edge<string>("C", "D"));\n\n        // Define edge costs\n        double[,] weights = new double[,]\n        {\n            { 0, 1, 4, float.PositiveInfinity }, // A to B, C, D\n            { float.PositiveInfinity, 0, 2, float.PositiveInfinity }, // B to A, C, D\n            { float.PositiveInfinity, float.PositiveInfinity, 0, 1 }, // C to A, B, D\n            { float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity, 0 } // D to A, B, C\n        };\n\n        // Define the source vertex\n        string source = "A";\n\n        // Create a function to get edge weights\n        Func<Edge<string>, double> edgeWeights = e =>\n        {\n            int srcIndex = Array.FindIndex(new[] { "A", "B", "C", "D" }, v => v == e.Source);\n            int destIndex = Array.FindIndex(new[] { "A", "B", "C", "D" }, v => v == e.Target);\n            return weights[srcIndex, destIndex];\n        };\n\n        // Dictionary to store distances from source to each vertex\n        var distances = new Dictionary<string, double>();\n\n        // Run Dijkstra's algorithm\n        g.ShortestPathsDijkstra(edgeWeights, source, (v, distance) =>\n        {\n            if (!distances.ContainsKey(v))\n                distances[v] = distance;\n        });\n\n        // Print out the shortest paths from source to all other vertices\n        foreach (var kvp in distances)\n        {\n            Console.WriteLine($"Shortest path from {source} to {kvp.Key}: {kvp.Value}");\n        }\n    }\n}