// Startup.cs - Configure services\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddDbContext<ApplicationDbContext>(options =>\n        options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));\n\n    services.AddControllersWithViews();\n}\n\n// ApplicationDbContext.cs\nusing Microsoft.EntityFrameworkCore;\n\npublic class ApplicationDbContext : DbContext\n{\n    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)\n    {\n    }\n\n    public DbSet<Product> Products { get; set; }\n}\n\n// Product model\npublic class Product\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}\n\n// Example of a simple Scaffolded Controller for CRUD operations on the Product entity\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\n\n[Route("products")]\npublic class ProductsController : Controller\n{\n    private readonly ApplicationDbContext _context;\n\n    public ProductsController(ApplicationDbContext context)\n    {\n        _context = context;\n    }\n\n    // GET: products\n    public async Task<IActionResult> Index()\n    {\n        return View(await _context.Products.ToListAsync());\n    }\n\n    // GET: products/Details/5\n    public async Task<IActionResult> Details(int? id)\n    {\n        if (id == null) return NotFound();\n\n        var product = await _context.Products.FirstOrDefaultAsync(m => m.Id == id);\n        if (product == null) return NotFound();\n\n        return View(product);\n    }\n\n    // GET: products/Create\n    public IActionResult Create()\n    {\n        return View();\n    }\n\n    // POST: products/Create\n    [HttpPost]\n    [ValidateAntiForgeryToken]\n    public async Task<IActionResult> Create([Bind("Id,Name,Price")] Product product)\n    {\n        if (ModelState.IsValid)\n        {\n            _context.Add(product);\n            await _context.SaveChangesAsync();\n            return RedirectToAction(nameof(Index));\n        }\n        return View(product);\n    }\n\n    // GET: products/Edit/5\n    public async Task<IActionResult> Edit(int? id)\n    {\n        if (id == null) return NotFound();\n\n        var product = await _context.Products.FindAsync(id);\n        if (product == null) return NotFound();\n        \n        return View(product);\n    }\n\n    [HttpPost]\n    [ValidateAntiForgeryToken]\n    public async Task<IActionResult> Edit(int id, [Bind("Id,Name,Price")] Product product)\n    {\n        if (id != product.Id) return NotFound();\n\n        if (ModelState.IsValid)\n        {\n            try\n            {\n                _context.Update(product);\n                await _context.SaveChangesAsync();\n            }\n            catch (DbUpdateConcurrencyException)\n            {\n                if (!ProductExists(product.Id))\n                    return NotFound();\n                else throw;\n            }\n            return RedirectToAction(nameof(Index));\n        }\n\n        return View(product);\n    }\n\n    // GET: products/Delete/5\n    public async Task<IActionResult> Delete(int? id)\n    {\n        if (id == null) return NotFound();\n\n        var product = await _context.Products.FirstOrDefaultAsync(m => m.Id == id);\n        if (product == null) return NotFound();\n        \n        return View(product);\n    }\n\n    [HttpPost, ActionName("Delete")]\n    [ValidateAntiForgeryToken]\n    public async Task<IActionResult> DeleteConfirmed(int id)\n    {\n        var product = await _context.Products.FindAsync(id);\n\n        if (product != null)\n            _context.Products.Remove(product);\n\n        await _context.SaveChangesAsync();\n        \n        return RedirectToAction(nameof(Index));\n    }\n\n    private bool ProductExists(int id)\n    {\n        return _context.Products.Any(e => e.Id == id);\n    }\n}