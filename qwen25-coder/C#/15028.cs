using System;\nusing System.Collections.Generic;\nusing System.Web.UI;\nusing System.Web.UI.WebControls;\n\npublic partial class DynamicForm : Page\n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        if (!IsPostBack)\n        {\n            string template = @"\n                <table style='width: 100%;'>\n                    <tr>\n                        <td colspan='2'><fieldset title='Customers Template' >\n                            <table style='width:100%;'>\n                                <tr>\n                                    <td width='140'>Policy Number:</td>\n                                    <td width='150'>$$PolicyNumber$$</td>\n                                    <td colspan='2' rowspan='3' valign='top'>Type 1:<br />$$Type1$$</td>\n                                    <td rowspan='3' valign='top'>Info:<br />$$Info$$</td>\n                                    <td rowspan='3' valign='top'>Problems:<br />$$Problems$$</td>\n                                </tr>";\n\n            // Map placeholders to control types and properties\n            var controlsMap = new Dictionary<string, Tuple<Type, object[]>>()\n            {\n                { "PolicyNumber", new Tuple<Type, object[]>(typeof(TextBox), new object[]{})},\n                { "Type1", new Tuple<Type, object[]>(typeof(DropDownList), new object[{ /* add items or properties */ }]) },\n                { "Info", new Tuple<Type, object[]>(typeof(Label), new object[]{}) },\n                { "Problems", new Tuple<Type, object[]>(typeof(TextBox), new object[]{ new { TextMode = TextBoxMode.MultiLine }}) }\n            };\n\n            Panel1.Controls.Add(new LiteralControl(ParseAndReplace(template, controlsMap)));\n        }\n    }\n\n    private Control ParseAndReplace(string template, Dictionary<string, Tuple<Type, object[]>> map)\n    {\n        PlaceHolder placeHolder = new PlaceHolder();\n        \n        string[] parts = template.Split(new string[]{"$$"}, StringSplitOptions.RemoveEmptyEntries);\n        \n        foreach (var part in parts)\n        {\n            if (map.ContainsKey(part.Trim()))\n            {\n                var controlInfo = map[part.Trim()];\n                Control control = (Control)Activator.CreateInstance(controlInfo.Item1, controlInfo.Item2);\n                placeHolder.Controls.Add(control);\n            }\n            else\n            {\n                placeHolder.Controls.Add(new LiteralControl(part));\n            }\n        }\n        \n        return placeHolder;\n    }\n}