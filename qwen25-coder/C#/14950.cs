using System;\n   using Ghostscript.NET.Rasterizer;\n   using System.Drawing.Printing;\n\n   namespace PDFPrinterService\n   {\n       public class PDFPrintingHelper\n       {\n           public static void PrintPdf(string pdfPath, string printerName)\n           {\n               // Initialize a new ghostscript rasterizer instance.\n               using (var rasterizer = new GhostscriptRasterizer())\n               {\n                   // Open and read the PDF file.\n                   rasterizer.Open(pdfPath);\n\n                   // Get the number of pages in the PDF file.\n                   int pageCount = rasterizer.PageCount;\n\n                   // Create a print document and manage its print process.\n                   PrintDocument printDoc = new PrintDocument();\n                   printDoc.PrinterSettings.PrinterName = printerName;\n                   printDoc.PrintPage += (sender, e) =>\n                   {\n                       int pageToPrint = e.PageSettings.Margins.Top; // Assuming you set margins to map pages\n                       if (pageToPrint > pageCount)\n                           e.Cancel = true; // Cancel the print job if we're out of pages.\n                       else\n                           using (var image = rasterizer.GetPage(100, 100, pageToPrint)) // Render the specific page.\n                               e.Graphics.DrawImage(image, e.MarginBounds); // Draw on printer surface.\n                   };\n                   printDoc.Print();\n               }\n           }\n       }\n   }