using System;\nusing System.IO;\nusing System.Net;\n\npublic void DownloadFile(string fileUrl, string username, string password)\n{\n    try\n    {\n        // Create the request\n        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(fileUrl);\n        request.Credentials = new NetworkCredential(username, password);\n\n        // Get the response\n        using (WebResponse response = request.GetResponse())\n        {\n            // Set the content type and length in the response header to ensure it's sent correctly.\n            Response.ContentType = response.ContentType;\n            Response.ContentEncoding = null; // No need to specify encoding if sending binary data.\n\n            long fileLength = response.ContentLength;\n            if (fileLength > 0)\n                Response.AddHeader("Content-Length", fileLength.ToString());\n\n            byte[] buffer = new byte[4096];\n            using (Stream input = response.GetResponseStream())\n            {\n                using (var output = Response.OutputStream)\n                {\n                    int bytesRead;\n                    while ((bytesRead = input.Read(buffer, 0, buffer.Length)) > 0)\n                    {\n                        output.Write(buffer, 0, bytesRead);\n                    }\n                }\n            }\n\n            // Ensure the response is flushed and completed.\n            Response.Flush();\n            Context.ApplicationInstance.CompleteRequest();\n        }\n    }\n    catch (WebException ex)\n    {\n        // Handle web exception cases\n        if (ex.Response != null)\n        {\n            using (var reader = new StreamReader(ex.Response.GetResponseStream()))\n            {\n                var errorText = reader.ReadToEnd();\n                // Log or display the error text as needed.\n            }\n        }\n\n        // Return an appropriate message to the client.\n        Response.StatusCode = 500;\n        Response.Write("An error occurred while downloading the file.");\n    }\n}