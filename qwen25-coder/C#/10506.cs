using System.IO;\nusing Markdig;\nusing Markdig.Syntax.Inlines;\n\npublic static class MarkdownUtility\n{\n    public static string ConvertToHtml(string markdown)\n    {\n        var pipeline = new MarkdownPipelineBuilder()\n            .UseAdvancedExtensions() // Includes support for tables, footnotes etc.\n            .Build();\n\n        var document = Markdown.Parse(markdown, pipeline);\n        \n        using (var writer = new StringWriter())\n        {\n            var renderer = new SafeHtmlRenderer(writer);\n            renderer.Render(document);\n            return writer.ToString();\n        }\n    }\n\n    private class SafeHtmlRenderer : HtmlRenderer\n    {\n        public SafeHtmlRenderer(TextWriter textWriter) \n            : base(textWriter)\n        {\n        }\n\n        protected override void WriteLeafInline(LeafInline leafInline, bool inCodeSection)\n        {\n            switch (leafInline)\n            {\n                case AutolinkInline autolink:\n                    if (!Uri.IsWellFormedUriString(autolink.Url, UriKind.Absolute))\n                        break;\n                    \n                    base.WriteLeafInline(new LinkInline\n                    {\n                        Title = autolink.Url,\n                        Url = autolink.Url,\n                        FirstChild = new LiteralInline(autolink.FirstChild.ToString())\n                    }, inCodeSection);\n                    return;\n            }\n\n            base.WriteLeafInline(leafInline, inCodeSection);\n        }\n    }\n}