using System;\nusing System.ComponentModel;\nusing System.Data;\n\npublic class OrdinalStringSorter : StringComparer\n{\n    public static readonly OrdinalStringSorter Default = new OrdinalStringSorter();\n\n    public override int Compare(string x, string y)\n    {\n        return String.Compare(x, y, StringComparison.Ordinal);\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        DataTable table = new DataTable();\n        table.Columns.Add("Name", typeof(string));\n        table.Rows.Add("apple");\n        table.Rows.Add("Banana");\n        table.Rows.Add("cherry");\n\n        DataView view = new DataView(table);\n\n        // Apply the custom ordinal string comparer\n        PropertyDescriptor descriptor = TypeDescriptor.GetProperties(typeof(DataRowView))["Name"];\n        view.Sort = "Name";\n\n        var sortedRows = view.ToTable().Select();\n\n        foreach (DataRow row in sortedRows)\n        {\n            Console.WriteLine(row["Name"]);\n        }\n    }\n\n    static void CustomSort(DataTable table, string columnName)\n    {\n        DataRow[] rows = table.Select();\n        Array.Sort(rows, (a, b) => OrdinalStringSorter.Default.Compare(a[columnName] as string, b[columnName] as string));\n        \n        // Clear the DataTable and re-add sorted rows\n        table.Clear();\n        foreach (DataRow row in rows)\n            table.ImportRow(row);\n    }\n}