using System;\nusing System.Collections.Generic;\n\npublic class WeakEventHandler<TEventArgs> where TEventArgs : EventArgs\n{\n    private readonly List<WeakReference<Action<object, TEventArgs>>> _handlers = new List<WeakReference<Action<object, TEventArgs>>>();\n\n    public void Add(Action<object, TEventArgs> handler)\n    {\n        _handlers.Add(new WeakReference<Action<object, TEventArgs>>(handler));\n    }\n\n    public void Invoke(object sender, TEventArgs e)\n    {\n        for (int i = _handlers.Count - 1; i >= 0; i--)\n        {\n            if (_handlers[i].TryGetTarget(out var handler))\n            {\n                handler.Invoke(sender, e);\n            }\n            else\n            {\n                // Remove dead handlers\n                _handlers.RemoveAt(i);\n            }\n        }\n    }\n}\n\n// Usage example:\npublic class ComEventPublisher : IComEventInterface\n{\n    private readonly WeakEventHandler<EventArgs> _myEvent = new WeakEventHandler<EventArgs>();\n\n    public void MyEvent(Action<object, EventArgs> handler)\n    {\n        _myEvent.Add(handler);\n    }\n\n    protected virtual void OnMyEvent()\n    {\n        _myEvent.Invoke(this, EventArgs.Empty);\n    }\n}