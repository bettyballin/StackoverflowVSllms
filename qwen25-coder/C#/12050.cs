using System;\nusing System.IO;\nusing System.Security.Cryptography;\n\npublic class DataEncryptor {\n    private static readonly byte[] key = { /* insert 32 byte encryption key */ };\n    private static readonly byte[] iv = { /* insert 16 byte initialization vector */ };\n\n    public static string EncryptStringToBytes_Aes(string plainText) {\n        if (string.IsNullOrEmpty(plainText)) throw new ArgumentNullException("plainText");\n\n        using (Aes aesAlg = Aes.Create()) {\n            aesAlg.Key = key;\n            aesAlg.IV = iv;\n\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n            using (MemoryStream ms Encrypt = new MemoryStream()) {\n                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)) {\n                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt)) {\n                        swEncrypt.Write(plainText);\n                    }\n                    return Convert.ToBase64String(msEncrypt.ToArray());\n                }\n            }\n        }\n    }\n\n    public static string DecryptStringFromBytes_Aes(string cipherText) {\n        if (string.IsNullOrEmpty(cipherText)) throw new ArgumentNullException("cipherText");\n\n        using (Aes aesAlg = Aes.Create()) {\n            aesAlg.Key = key;\n            aesAlg.IV = iv;\n\n            ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);\n\n            using (MemoryStream msDecrypt = new MemoryStream(Convert.FromBase64String(cipherText))) {\n                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read)) {\n                    using (StreamReader srDecrypt = new StreamReader(csDecrypt)) {\n                        return srDecrypt.ReadToEnd();\n                    }\n                }\n            }\n        }\n    }\n}