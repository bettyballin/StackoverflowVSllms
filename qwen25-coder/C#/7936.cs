using System;\nusing System.Runtime.InteropServices;\n\nclass Program\n{\n    // These constants correspond to the options you can set in Internet Explorer.\n    const int INTERNET_OPTION_SETTINGS_CHANGED = 39;\n    const int INTERNET_OPTION_REFRESH = 37;\n\n    [DllImport("wininet.dll")]\n    public static extern bool InternetSetOption(\n        IntPtr hInternet,\n        int dwOption,\n        IntPtr lpBuffer,\n        int dwBufferLength);\n\n    static void Main(string[] args)\n    {\n        // Replace "yourproxyserver:port" with your actual proxy address and port.\n        string proxy = "yourproxyserver:port";\n\n        struct Struct_INTERNET_PER_CONN_OPTION\n        {\n            public uint dwOption;\n            public string pszValue;\n            public int dwValue;\n            public System.Runtime.InteropServices.ComTypes.FILETIME ftValue;\n        }\n\n        struct INTERNET_PER_CONN_OPTON_LIST \n        {\n            public uint dwSize;\n            public IntPtr pszConnection;\n            public uint dwOptionCount;\n            public uint dwOptionError;\n            public IntPtr pOptions;\n        };\n\n        // Define the proxy options for your connection.\n        Struct_INTERNET_PER_CONN_OPTION[] options = new Struct_INTERNET_PER_CONN_OPTION[1];\n        options[0].dwOption = 2; // INTERNET_PER_CONN_PROXY_SERVER\n        options[0].pszValue = proxy;\n\n        // Create an array of INTERNET_PER_CONN_OPTION.\n        IntPtr pOptions = Marshal.AllocCoTaskMem(Marshal.SizeOf(typeof(Struct_INTERNET_PER_CONN_OPTION)) * options.Length);\n        for (int i = 0; i < options.Length; i++)\n            Marshal.StructureToPtr(options[i], (IntPtr)((UInt32)pOptions + Marshal.SizeOf(typeof(Struct_INTERNET_PER_CONN_OPTION)) * (i)), true);\n\n        // Set up the option list.\n        INTERNET_PER_CONN_OPTON_LIST optionList = new INTERNET_PER_CONN_OPTON_LIST();\n        optionList.dwSize = (uint)Marshal.SizeOf(optionList);\n        optionList.pszConnection = IntPtr.Zero; // All connections. NULL == LAN, makes it apply to LAN.\n        optionList.dwOptionCount = 1;\n        optionList.dwOptionError = 0;\n        optionList.pOptions = pOptions;\n\n        // Set up the options pointer.\n        IntPtr pOptionList = Marshal.AllocCoTaskMem(Marshal.SizeOf(optionList));\n        Marshal.StructureToPtr(optionList, pOptionList, true);\n\n        // Make the system call to set the proxy.\n        bool bReturn = InternetSetOption(IntPtr.Zero, 9, pOptionList, Marshal.SizeOf(optionList));\n\n        if (bReturn == false)\n            throw new Exception("InternetSetOption failed.");\n\n        // Free up all of our allocated memory for the options.\n        Marshal.FreeCoTaskMem(pOptions);\n        Marshal.FreeCoTaskMem(pOptionList);\n\n        // Tell IE we're done...\n        InternetSetOption(IntPtr.Zero, INTERNET_OPTION_SETTINGS_CHANGED, IntPtr.Zero, 0);\n        InternetSetOption(IntPtr.Zero, INTERNET_OPTION_REFRESH, IntPtr.Zero, 0);\n    }\n}