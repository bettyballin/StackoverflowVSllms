public void LoginUser(int userId)\n{\n    string currentSessionId = Session.SessionID;\n\n    // Check for existing active session for the user\n    var activeSession = GetUserActiveSession(userId);\n\n    if (activeSession != null && activeSession.SessionID != currentSessionId)\n    {\n        // Invalidate old session if exists\n        MarkSessionInactive(activeSession.SessionID);\n    }\n\n    // Mark current session as active\n    InsertOrUpdateUserSession(userId, currentSessionId);\n}\n\nprivate UserSession GetUserActiveSession(int userId)\n{\n    using (var context = new YourDbContext())\n    {\n        return context.UserSessions.FirstOrDefault(s => s.UserID == userId && s.ActiveFlag == true);\n    }\n}\n\nprivate void MarkSessionInactive(string sessionId)\n{\n    using (var context = new YourDbContext())\n    {\n        var session = context.UserSessions.Find(sessionId);\n        if (session != null)\n        {\n            session.ActiveFlag = false;\n            session.LastActivityTime = DateTime.UtcNow;\n            context.SaveChanges();\n        }\n    }\n}\n\nprivate void InsertOrUpdateUserSession(int userId, string sessionId)\n{\n    using (var context = new YourDbContext())\n    {\n        var session = context.UserSessions.Find(sessionId);\n        if (session == null)\n        {\n            session = new UserSession\n            {\n                SessionID = sessionId,\n                UserID = userId,\n                ActiveFlag = true,\n                LastActivityTime = DateTime.UtcNow\n            };\n            context.UserSessions.Add(session);\n        }\n        else\n        {\n            session.UserID = userId;\n            session.ActiveFlag = true;\n            session.LastActivityTime = DateTime.UtcNow;\n        }\n        context.SaveChanges();\n    }\n}