using System;\nusing System.Security.Cryptography;\nusing System.Linq;\n\npublic static class XmlNodeNameCleaner\n{\n    private static readonly char[] InvalidXmlChars = new char[]\n    {\n        '<', '>', '&', '\'', '"',\n        '\0', '\u0001', '\u0002', '\u0003', '\u0004', '\u0005', \n        '\u0006', '\a', '\b', '\t', '\n', '\v', '\f', '\r', \n        '\u000E', '\u000F', '\u0010', '\u0011', '\u0012', '\u0013',\n        '\u0014', '\u0015', '\u0016', '\u0017', '\u0018', '\u0019', \n        '\u001A', '\u001B', '\u001C', '\u001D', '\u001E', '\u001F',\n    };\n\n    public static string CleanXmlNodeName(string originalValue)\n    {\n        if (string.IsNullOrEmpty(originalValue))\n            return "empty_node";\n\n        // Replace invalid characters with '_'\n        var cleanedString = new string(\n            originalValue\n                .Where(c => !InvalidXmlChars.Contains(c) && char.IsLetterOrDigit(c) || c == '_' || c == '-')\n                .ToArray()\n        );\n\n        // Ensure it doesn't start with a digit or hyphen, as per XML spec\n        if (!string.IsNullOrEmpty(cleanedString))\n            cleanedString = char.IsDigit(cleanedString[0]) ? "n" + cleanedString : cleanedString;\n\n        return string.IsNullOrWhiteSpace(cleanedString) ? "invalid_name" : cleanedString;\n    }\n\n    // Example usage: encode original value into an XML comment or attribute for later decoding\n    public static (string SafeName, string OriginalValueEncoded) EncodeOriginal(string value)\n    {\n        var safeName = CleanXmlNodeName(value);\n        var encodedValue = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(value));\n        return (safeName, encodedValue);\n    }\n\n    // Example usage: decode the original value\n    public static string DecodeOriginal(string encodedValue)\n    {\n        var bytes = Convert.FromBase64String(encodedValue);\n        return System.Text.Encoding.UTF8.GetString(bytes);\n    }\n}