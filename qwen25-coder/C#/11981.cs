using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class SimpleEncryptor {\n    private static string key = "your_key"; // Use strong, random keys in practice\n\n    public static string Encrypt(string data) {\n        using (Aes aesAlg = Aes.Create()) {\n            aesAlg.Key = Encoding.UTF8.GetBytes(key);\n            aesAlg.IV = new byte[16]; // IV should be unique per encryption\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n            using (MemoryStream msEncrypt = new MemoryStream()) {\n                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)) {\n                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt)) {\n                        swEncrypt.Write(data);\n                    }\n                    return Convert.ToBase64String(msEncrypt.ToArray());\n                }\n            }\n        }\n    }\n\n    public static string Decrypt(string cipherText) {\n        using (Aes aesAlg = Aes.Create()) {\n            aesAlg.Key = Encoding.UTF8.GetBytes(key);\n            aesAlg.IV = new byte[16]; // IV must be the same as used for encryption\n            ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);\n\n            using (MemoryStream msDecrypt = new MemoryStream(Convert.FromBase64String(cipherText))) {\n                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read)) {\n                    using (StreamReader srDecrypt = new StreamReader(csDecrypt)) {\n                        return srDecrypt.ReadToEnd();\n                    }\n                }\n            }\n        }\n    }\n}