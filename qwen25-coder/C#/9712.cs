// Define separate interfaces for each set of related functionalities\npublic interface ILoggingProvider\n{\n    void LogInfo(string message);\n    void LogError(string error);\n}\n\npublic interface ICachingProvider\n{\n    void AddToCache(string key, object value);\n    object GetFromCache(string key);\n}\n\npublic interface IDataAccessProvider\n{\n    DataTable GetData(string query);\n    int ExecuteCommand(string command);\n}\n\n// Implement these interfaces in your classes\npublic class ConsoleLoggingProvider : ILoggingProvider\n{\n    public void LogInfo(string message)\n    {\n        Console.WriteLine($"INFO: {message}");\n    }\n\n    public void LogError(string error)\n    {\n        Console.WriteLine($"ERROR: {error}");\n    }\n}\n\npublic class InMemoryCachingProvider : ICachingProvider\n{\n    private readonly Dictionary<string, object> cache = new Dictionary<string, object>();\n\n    public void AddToCache(string key, object value)\n    {\n        cache[key] = value;\n    }\n\n    public object GetFromCache(string key)\n    {\n        return cache.TryGetValue(key, out var value) ? value : null;\n    }\n}\n\npublic class SqlDataAccessProvider : IDataAccessProvider\n{\n    public DataTable GetData(string query)\n    {\n        // Implementation for retrieving data from SQL Server\n        throw new NotImplementedException();\n    }\n\n    public int ExecuteCommand(string command)\n    {\n        // Implementation for executing a SQL command on SQL Server\n        throw new NotImplementedException();\n    }\n}\n\n// Use dependency injection to resolve the required providers\npublic class MyService\n{\n    private readonly ILoggingProvider _logger;\n    private readonly ICachingProvider _cache;\n\n    public MyService(ILoggingProvider logger, ICachingProvider cache)\n    {\n        _logger = logger;\n        _cache = cache;\n    }\n\n    public void DoWork()\n    {\n        _logger.LogInfo("Doing work...");\n        var cachedData = _cache.GetFromCache("Key");\n        // Continue with the rest of the logic\n    }\n}