// Define a generic repository interface\npublic interface IRepository<TEntity> where TEntity : class\n{\n    IQueryable<TEntity> GetAll();\n    TEntity GetById(int id);\n    void Add(TEntity entity);\n    void Remove(TEntity entity);\n}\n\n// Concrete EF implementation of the repository\npublic class EfRepository<TEntity> : IRepository<TEntity> where TEntity : class\n{\n    private readonly DbContext _context;\n\n    public EfRepository(DbContext context)\n    {\n        _context = context;\n    }\n\n    public IQueryable<TEntity> GetAll()\n    {\n        return _context.Set<TEntity>();\n    }\n\n    public TEntity GetById(int id)\n    {\n        return _context.Set<TEntity>().Find(id);\n    }\n\n    public void Add(TEntity entity)\n    {\n        _context.Set<TEntity>().Add(entity);\n    }\n\n    public void Remove(TEntity entity)\n    {\n        _context.Set<TEntity>().Remove(entity);\n    }\n}\n\n// In-memory implementation for testing\npublic class InMemoryRepository<TEntity> : IRepository<TEntity> where TEntity : class, new()\n{\n    private List<TEntity> _data = new List<TEntity>();\n\n    public IQueryable<TEntity> GetAll() => _data.AsQueryable();\n\n    public TEntity GetById(int id)\n    {\n        return _data.FirstOrDefault();\n    }\n\n    public void Add(TEntity entity) => _data.Add(entity);\n\n    public void Remove(TEntity entity) => _data.Remove(entity);\n}