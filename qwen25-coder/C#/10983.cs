using System;\nusing System.Security;\nusing System.Security.Principal;\n\nclass Program\n{\n    static void Main()\n    {\n        // Assume token is obtained from somewhere\n        IntPtr token = GetTokenForImpersonation(); // Replace with actual method to get token\n\n        using (WindowsImpersonationContext context = WindowsIdentity.Impersonate(token))\n        {\n            Console.WriteLine("Calling LocalTestGroupOnly() as {0}",\n                WindowsIdentity.GetCurrent().Name);\n            LocalTestGroupOnly();\n            \n            context.Undo();\n            Console.WriteLine("Reverted user is displayed properly");\n\n            try\n            {\n                // This method should now fail correctly\n                Console.WriteLine("Calling LocalTestGroupOnly() as {0}",\n                    WindowsIdentity.GetCurrent().Name);\n                LocalTestGroupOnly();\n            }\n            catch (SecurityException ex)\n            {\n                Console.WriteLine("Your account lacks permission to that function.");\n            }\n        }\n    }\n\n    [PrincipalPermission(SecurityAction.Demand, Name = @"DJPITER-PC\Test", Role = "LocalTestGroup")]\n    static void LocalTestGroupOnly()\n    {\n        // Ensure method is not optimized away\n        GC.KeepAlive(WindowsIdentity.GetCurrent());\n        Console.WriteLine("Inside LocalTestGroupOnly() - {0}",\n            WindowsIdentity.GetCurrent().Name);\n    }\n\n    static IntPtr GetTokenForImpersonation()\n    {\n        // Stub implementation; replace with actual token obtaining logic\n        return IntPtr.Zero;\n    }\n}