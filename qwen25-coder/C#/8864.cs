public struct BoundedInt\n{\n    private int _value;\n\n    public BoundedInt(int value)\n    {\n        if (value < 1 || value > 10)\n            throw new ArgumentOutOfRangeException(nameof(value), "Value must be between 1 and 10.");\n\n        _value = value;\n    }\n\n    public static implicit operator int(BoundedInt boundedInt) => boundedInt._value;\n\n    public static explicit operator BoundedInt(int value) => new BoundedInt(value);\n\n    public override string ToString() => _value.ToString();\n}\n\n// Usage example:\ntry\n{\n    BoundedInt myValue = (BoundedInt)5; // valid\n    Console.WriteLine(myValue);\n    \n    BoundedInt invalidValue = (BoundedInt)12; // throws ArgumentOutOfRangeException\n}\ncatch (ArgumentOutOfRangeException ex)\n{\n    Console.WriteLine(ex.Message);\n}