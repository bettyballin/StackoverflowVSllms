public abstract class ExpressionNode\n{\n    public abstract double Evaluate(Dictionary<string, double> variables);\n}\n\npublic class NumberNode : ExpressionNode\n{\n    private readonly double _value;\n\n    public NumberNode(double value)\n    {\n        _value = value;\n    }\n\n    public override double Evaluate(Dictionary<string, double> variables) => _value;\n}\n\npublic class VariableNode : ExpressionNode\n{\n    private readonly string _name;\n\n    public VariableNode(string name)\n    {\n        _name = name;\n    }\n\n    public override double Evaluate(Dictionary<string, double> variables)\n    {\n        if (variables.TryGetValue(_name, out var value))\n            return value;\n        throw new ArgumentException($"Variable '{_name}' not found");\n    }\n}\n\npublic class BinaryOperationNode : ExpressionNode\n{\n    private readonly char _operator;\n    private readonly ExpressionNode _left;\n    private readonly ExpressionNode _right;\n\n    public BinaryOperationNode(char op, ExpressionNode left, ExpressionNode right)\n    {\n        _operator = op;\n        _left = left;\n        _right = right;\n    }\n\n    public override double Evaluate(Dictionary<string, double> variables)\n    {\n        var leftValue = _left.Evaluate(variables);\n        var rightValue = _right.Evaluate(variables);\n\n        return _operator switch\n        {\n            '+' => leftValue + rightValue,\n            '-' => leftValue - rightValue,\n            '*' => leftValue * rightValue,\n            '/' => leftValue / rightValue,\n            _ => throw new InvalidOperationException("Unknown operator")\n        };\n    }\n}