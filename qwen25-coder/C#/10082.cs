using System;\nusing System.Data;\nusing System.Data.SqlClient;\n\npublic void ApplyConditions(DataTable dataTable)\n{\n    string connectionString = "YourConnectionStringHere";\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        \n        string query = @"\n            SELECT c.ConditionID, c.ColumnName, c.Operator, c.Value1, c.Value2, \n                   a.ActionID, a.Operation, a.TargetColumn, a.Multiplier\n            FROM Conditions c\n            JOIN Actions a ON c.ConditionID = a.ConditionID";\n\n        using (SqlCommand command = new SqlCommand(query, connection))\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                int conditionId = reader.GetInt32(0);\n                string columnName = reader.GetString(1);\n                string op = reader.GetString(2);\n                float value1 = reader.GetFloat(3);\n                float? value2 = reader.IsDBNull(4) ? null : (float?)reader.GetFloat(4);\n                string operation = reader.GetString(7);\n                string targetColumn = reader.GetString(8);\n                float multiplier = reader.GetFloat(9);\n\n                foreach (DataRow row in dataTable.Rows)\n                {\n                    if (EvaluateCondition(row, columnName, op, value1, value2))\n                    {\n                        ApplyAction(row, targetColumn, operation, multiplier);\n                    }\n                }\n            }\n        }\n    }\n}\n\nprivate bool EvaluateCondition(DataRow row, string columnName, string op, float value1, float? value2)\n{\n    float columnValue = Convert.ToSingle(row[columnName]);\n    switch (op.ToLower())\n    {\n        case "between":\n            return columnValue >= value1 && columnValue <= value2;\n        // Add more operators as needed\n        default: throw new InvalidOperationException($"Unsupported operator {op}");\n    }\n}\n\nprivate void ApplyAction(DataRow row, string targetColumn, string operation, float multiplier)\n{\n    switch (operation.ToLower())\n    {\n        case "multiply":\n            row[targetColumn] = Convert.ToSingle(row[targetColumn]) * multiplier;\n            break;\n        // Add more operations as needed\n        default: throw new InvalidOperationException($"Unsupported operation {operation}");\n    }\n}