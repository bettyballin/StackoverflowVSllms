using System;\nusing System.Linq.Expressions;\n\npublic class ExpressionComparer : IEqualityComparer<Expression>\n{\n    public bool Equals(Expression x, Expression y)\n    {\n        if (ReferenceEquals(x, y)) return true;\n        if (x == null || y == null) return false;\n        if (x.NodeType != y.NodeType || !x.Type.Equals(y.Type)) return false;\n\n        switch (x.NodeType)\n        {\n            case ExpressionType.Parameter:\n                var p1 = x as ParameterExpression;\n                var p2 = y as ParameterExpression;\n                return (p1.Name == p2.Name);\n            case ExpressionType.Constant:\n                var c1 = x as ConstantExpression;\n                var c2 = y as ConstantExpression;\n                return (c1.Value == null && c2.Value == null) || (c1.Value != null && c1.Value.Equals(c2.Value));\n            case ExpressionType.MemberAccess:\n                var m1 = x as MemberExpression;\n                var m2 = y as MemberExpression;\n                return Equals(m1.Expression, m2.Expression) && m1.Member.Name == m2.Member.Name;\n            case ExpressionType.Call:\n                var call1 = (MethodCallExpression)x;\n                var call2 = (MethodCallExpression)y;\n\n                if (!Equals(call1.Object, call2.Object))\n                    return false;\n\n                if (!call1.Method.Equals(call2.Method) ||\n                    !call1.Arguments.Count.Equals(call2.Arguments.Count))\n                    return false;\n\n                for (int i = 0; i < call1.Arguments.Count; i++)\n                {\n                    if (!this.Equals(call1.Arguments[i], call2.Arguments[i]))\n                        return false;\n                }\n                return true;\n            case ExpressionType.Convert:\n                var convert1 = x as UnaryExpression;\n                var convert2 = y as UnaryExpression;\n\n                if (convert1.Type != convert2.Type ||\n                    !Equals(convert1.Operand, convert2.Operand))\n                    return false;\n\n                return true;\n            default:\n                throw new NotImplementedException($"Node type not handled: {x.NodeType}");\n        }\n    }\n\n    public int GetHashCode(Expression obj)\n    {\n        throw new NotImplementedException();\n    }\n}\n\n// Usage in your test method\nvar comparer = new ExpressionComparer();\nAssert.IsTrue(comparer.Equals(expected, actual));