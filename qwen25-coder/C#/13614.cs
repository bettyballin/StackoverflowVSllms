public class AuthorizationService : IAuthorizationService\n{\n    private readonly ApplicationDbContext _context;\n\n    public AuthorizationService(ApplicationDbContext context)\n    {\n        _context = context;\n    }\n\n    public async Task<bool> HasPermissionAsync(string userId, string actionName, string objectType)\n    {\n        var user = await _context.Users.Include(u => u.Role).ThenInclude(r => r.Permissions).FirstOrDefaultAsync(u => u.Id == userId);\n        if (user == null) return false;\n\n        // Check permissions directly assigned to the role\n        bool hasPermission = user.Role.Permissions.Any(p => p.ActionName == actionName && p.ObjectType == objectType);\n\n        // Check inherited permissions from parent roles\n        var parentRolePermissions = GetParentRolePermissions(user.Role);\n        if (parentRolePermissions != null)\n            hasPermission |= parentRolePermissions.Any(p => p.ActionName == actionName && p.ObjectType == objectType);\n\n        return hasPermission;\n    }\n\n    private List<Permission> GetParentRolePermissions(Role role, List<Permission> inheritedPermissions = null)\n    {\n        inheritedPermissions ??= new List<Permission>();\n\n        if (role.ParentRoleId != null)\n        {\n            var parentRole = _context.Roles.Include(r => r.Permissions).FirstOrDefault(r => r.Id == role.ParentRoleId.Value);\n            if (parentRole != null)\n            {\n                inheritedPermissions.AddRange(parentRole.Permissions);\n                GetParentRolePermissions(parentRole, inheritedPermissions); // Recursion for deeper inheritance\n            }\n        }\n\n        return inheritedPermissions;\n    }\n}