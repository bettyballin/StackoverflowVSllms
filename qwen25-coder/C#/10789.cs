public partial class MainStudioWindowControl : RibbonWindow\n{\n    private bool _isRestoring;\n\n    public MainStudioWindowControl()\n    {\n        App.MainWindowOwner = this;\n        Loaded += OnMainWindowLoaded;\n        StateChanged += OnMainWindowStateChanged;\n        LocationChanged += OnMainWindowLocationChanged;\n        SizeChanged += OnMainWindowSizeChanged;\n    }\n\n    private void OnMainWindowLoaded(object sender, RoutedEventArgs e)\n    {\n        RestoreSettings();\n        _isRestoring = false; // Allow the window to save new settings after loading\n    }\n\n    private void OnMainWindowStateChanged(object sender, EventArgs e)\n    {\n        if (WindowState == WindowState.Normal && !_isRestoring)\n            SaveSettings();\n    }\n\n    private void OnMainWindowLocationChanged(object sender, EventArgs e)\n    {\n        if (!_isRestoring)\n            SaveSettings();\n    }\n\n    private void OnMainWindowSizeChanged(object sender, SizeChangedEventArgs e)\n    {\n        if (!_isRestoring)\n            SaveSettings();\n    }\n\n    protected override void OnClosing(System.ComponentModel.CancelEventArgs e)\n    {\n        base.OnClosing(e);\n        SaveSettings();\n    }\n\n    private void RestoreSettings()\n    {\n        _isRestoring = true; // Set a flag to prevent saving while restoring\n\n        if (Studio.Properties.Settings.Default.WindowPlacement != null &&\n            Studio.Properties.Settings.Default.WindowPlacement.Length > 0)\n        {\n            var pF = new System.Windows.Interop.WindowPlacement();\n            try\n            {\n                Type type = typeof(System.Windows.Interop.WindowPlacement);\n                using (System.IO.MemoryStream ms = new System.IO.MemoryStream(Studio.Properties.Settings.Default.WindowPlacement))\n                {\n                    System.Runtime.Serialization.Formatters.Binary.BinaryFormatter bf = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();\n                    pF = (System.Windows.Interop.WindowPlacement)bf.Deserialize(ms);\n                }\n            }\n            catch { }\n\n            if (pF != null)\n            {\n                this.Left = pF.rcNormalPosition.left;\n                this.Top = pF.rcNormalPosition.top;\n                this.Width = pF.rcNormalPosition.right - pF.rcNormalPosition.left;\n                this.Height = pF.rcNormalPosition.bottom - pF.rcNormalPosition.top;\n                this.WindowState = pF.showCmd == 2 ? WindowState.Minimized : (pF.showCmd == 1 ? WindowState.Maximized : WindowState.Normal);\n\n                // Adjust position for potential taskbar or other UI elements\n                if (this.Top < SystemParameters.WorkArea.Top)\n                    this.Top = SystemParameters.WorkArea.Top;\n\n                Debug.WriteLine("Loading: Top = " + this.Top);\n            }\n        }\n    }\n\n    private void SaveSettings()\n    {\n        try\n        {\n            System.Runtime.Serialization.Formatters.Binary.BinaryFormatter bf = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();\n            using (var ms = new System.IO.MemoryStream())\n            {\n                var pF = new System.Windows.Interop.WindowPlacement();\n                pF.flags = 0;\n                pF.showCmd = this.WindowState == WindowState.Maximized ? 2 : (this.WindowState == WindowState.Minimized ? 1 : 0);\n                if (pF.showCmd == 2 || pF.showCmd == 0) // Maximized or normal state\n                {\n                    int leftAdjusted = (int)Math.Round(this.Left), topAdjusted = (int)Math.Round(this.Top), widthAdjusted = (int)Math.Round(this.Width),\n                        heightAdjusted = (int)Math.Round(this.Height);\n                    pF.rcNormalPosition.left = Math.Max(SystemParameters.VirtualScreenLeft, leftAdjusted);\n                    pF.rcNormalPosition.top = Math.Max(SystemParameters.VirtualScreenTop, topAdjusted);\n                    pF.rcNormalPosition.right = (int)(pF.rcNormalPosition.left + widthAdjusted);\n                    pF.rcNormalPosition.bottom = (int)(pF.rcNormalPosition.top + heightAdjusted);\n                }\n                bf.Serialize(ms, pF);\n                Studio.Properties.Settings.Default.WindowPlacement = ms.ToArray();\n            }\n\n            Studio.Properties.Settings.Default.Save();\n        }\n        catch { }\n    }\n}