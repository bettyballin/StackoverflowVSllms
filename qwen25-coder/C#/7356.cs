using System;\nusing System.Diagnostics;\nusing System.Linq;\n\npublic class MachineFingerprintGenerator\n{\n    public static string GenerateFingerprint()\n    {\n        var os = Environment.OSVersion.VersionString;\n        var cpuInfo = GetCpuId();\n        var drivesInfo = string.Join(",", DriveInfo.GetDrives().Select(drive => drive.TotalSize.ToString()));\n        var installedApps = string.Join(",", InstalledSoftware());\n\n        // Combine all information to create a unique fingerprint\n        var fingerprint = $"{os}_{cpuInfo}_{drivesInfo}_{installedApps}";\n\n        // Optionally hash the fingerprint for security reasons\n        using (var sha1 = System.Security.Cryptography.SHA256.Create())\n        {\n            byte[] bytes = System.Text.Encoding.UTF8.GetBytes(fingerprint);\n            byte[] hashBytes = sha1.ComputeHash(bytes);\n\n            return Convert.ToBase64String(hashBytes);\n        }\n    }\n\n    private static string GetCpuId()\n    {\n        try\n        {\n            var cpuInfo = new System.Management.ManagementClass("win32_processor").GetInstances().Cast<System.Management.ManagementObject>().First();\n            return cpuInfo.Properties["processorid"].Value.ToString();\n        }\n        catch (Exception)\n        {\n            return "unknown";\n        }\n    }\n\n    private static string[] InstalledSoftware()\n    {\n        try\n        {\n            var software = new System.Management.ManagementClass("Win32_Product").GetInstances().Cast<System.Management.ManagementObject>();\n            return software.Select(sw => sw.Properties["Name"].Value.ToString()).ToArray();\n        }\n        catch (Exception)\n        {\n            return new string[0];\n        }\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine($"Machine Fingerprint: {GenerateFingerprint()}");\n    }\n}