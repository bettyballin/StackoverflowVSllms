using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic static class PasswordManager\n{\n    public static byte[] Encrypt(string plainText)\n    {\n        // Convert the data string into a byte array.\n        var data = Encoding.UTF8.GetBytes(plainText);\n\n        // Create an instance of the DPAPI class using the specified parameters.\n        var dpApiDataProtector = new DataProtectionConfiguration(false, null);\n        \n        // Encrypt the data.\n        return Protect(data, false, null); // Use LocalMachine scope for persistence across sessions\n    }\n\n    public static string Decrypt(byte[] encryptedData)\n    {\n        if (encryptedData == null || encryptedData.Length <= 0)\n            throw new ArgumentNullException(nameof(encryptedData));\n\n        // Decrypt the data using DPAPI.\n        var decryptedBytes = Unprotect(encryptedData, false, null); // Use LocalMachine scope for persistence across sessions\n        \n        return Encoding.UTF8.GetString(decryptedBytes);\n    }\n\n    /// <summary>\n    /// Uses Windows Data Protection API to encrypt/decrypt byte arrays\n    /// </summary>\n    [System.Runtime.InteropServices.DllImport("advapi32.dll", SetLastError = true, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]\n    private static extern bool CryptProtectData(ref DATA_BLOB dataIn,\n        string szDataDescr, ref SECURITY_DESCRIPTOR pOptionalEntropy,\n        IntPtr pvReservedOptionalEntropy, ref CRYPTPROTECT_PROMPTSTRUCT pPromptStruct, int dwFlags, out DATA_BLOB pDataOut);\n\n    [System.Runtime.InteropServices.DllImport("advapi32.dll", SetLastError = true, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]\n    private static extern bool CryptUnprotectData(ref DATA_BLOB dataIn,\n        out string szDataDescr, ref SECURITY_DESCRIPTOR pOptionalEntropy,\n        IntPtr pvReservedOptionalEntropy, ref CRYPTPROTECT_PROMPTSTRUCT pPromptStruct, int dwFlags, out DATA_BLOB pDataOut);\n\n    private static byte[]Protect(byte[] plainText, bool useLocalMachineStore, byte[] optionalEntropy)\n    {\n        var dataIn = new DATA_BLOB();\n        var dataBlobout = new DATA_BLOB();\n        DATA_BLOB entropyBlob;\n\n        // Check and setup the plaintext blob.\n        if (plainText == null || plainText.Length <= 0)\n            throw new ArgumentException("Data is empty or null", nameof(plainText));\n        else\n        {\n            dataIn.cbData = plainText.Length;\n            dataIn.pbData = Marshal.AllocHGlobal(dataIn.cbData);\n            Marshal.Copy(plainText, 0, dataIn.pbData, dataIn.cbData);\n        }\n\n        // Setup entropy blob.\n        if (optionalEntropy != null && optionalEntropy.Length > 0)\n        {\n            entropyBlob.pbData = Marshal.AllocHGlobal(optionalEntropy.Length);\n            entropyBlob.cbData = optionalEntropy.Length;\n            Marshal.Copy(optionalEntropy, 0, entropyBlob.pbData, entropyBlob.cbData);\n        }\n        else\n            entropyBlob = new DATA_BLOB();\n\n        SECURITY_DESCRIPTOR zeroSD = default(SECURITY_DESCRIPTOR);\n        int flags = useLocalMachineStore ? CRYPTPROTECT_LOCAL_MACHINE : 0;\n\n        // Call the DPAPI.\n        bool success = CryptProtectData(ref dataIn, null, ref entropyBlob,\n            IntPtr.Zero, ref DefaultPromptStruct,(flags | CRYPTPROTECT_UI_FORBIDDEN), out dataBlobout);\n        Marshal.FreeHGlobal(dataIn.pbData);\n        Marshal.FreeHGlobal(entropyBlob.pbData);\n\n        byte[] cipherText = new byte[dataBlobout.cbData];\n        if (success)\n        {\n            // Copy the encrypted bytes to managed code.\n            Marshal.Copy(dataBlobout.pbData, cipherText, 0, dataBlobout.cbData);\n            Marshal.ZeroFreeCoTaskMemUnicode(dataBlobout.pbData); // Clean DPAPI allocations\n        }\n        else throw new CryptographicException("DPAPI Encrypt operation failed. Error: " + Marshal.GetLastWin32Error());\n\n        return cipherText;\n    }\n\n    private static byte[] Unprotect(byte[] encryptedBytes, bool useLocalMachineStore, byte[] optionalEntropy)\n    {\n        var dataIn = new DATA_BLOB();\n        DATA_BLOB entropyBlob;\n        SECURITY_DESCRIPTOR zeroSD = default(SECURITY_DESCRIPTOR);\n        int flags = useLocalMachineStore ? CRYPTPROTECT_LOCAL_MACHINE : 0;\n\n        // Check and setup the encrypted bytes blob.\n        if (encryptedBytes == null || encryptedBytes.Length <= 0)\n            throw new ArgumentException("Encrypted data is empty or null", nameof(encryptedBytes));\n        else\n        {\n            dataIn.pbData = Marshal.AllocHGlobal(encryptedBytes.Length);\n            dataIn.cbData = encryptedBytes.Length;\n            Marshal.Copy(encryptedBytes, 0, dataIn.pbData, encryptedBytes.Length);\n        }\n\n        // Setup entropy blob.\n        if (optionalEntropy != null && optionalEntropy.Length > 0)\n        {\n            entropyBlob = new DATA_BLOB();\n            entropyBlob.pbData = Marshal.AllocHGlobal(optionalEntropy.Length);\n            entropyBlob.cbData = optionalEntropy.Length;\n            Marshal.Copy(optionalEntropy, 0, entropyBlob.pbData, optionalEntropy.Length);\n        }\n        else\n            entropyBlob.pbData = IntPtr.Zero;\n\n        string dataDescription = null; // not used but required by DPAPI\n\n        DATA_BLOB dataOutBlob = new DATA_BLOB();\n        \n        // Call the DPAPI.\n        bool success = CryptUnprotectData(ref dataIn, out dataDescription, ref entropyBlob,\n            IntPtr.Zero, ref DefaultPromptStruct,(flags | CRYPTPROTECT_UI_FORBIDDEN), out dataOutBlob);\n\n        Marshal.FreeHGlobal(dataIn.pbData);\n        if (!success) throw new CryptographicException("DPAPI Decrypt operation failed: " + Marshal.GetLastWin32Error());\n\n        // Copy the decrypted bytes to managed code.\n        byte[] result = new byte[dataOutBlob.cbData];\n        Marshal.Copy(dataOutBlob.pbData, result, 0, dataOutBlob.cbData);\n        Marshal.ZeroFreeCoTaskMemUnicode(dataOutBlob.pbData); // Clean DPAPI allocations\n        return result;\n    }\n\n    private struct DATA_BLOB\n    {\n        public int cbData;\n        public IntPtr pbData;\n    };\n\n    private static CRYPTPROTECT_PROMPTSTRUCT DefaultPromptStruct = new CRYPTPROTECT_PROMPTSTRUCT()\n    {\n        cbSize = Marshal.SizeOf(typeof(CRYPTPROTECT_PROMPTSTRUCT))\n    }\n\n    [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]\n    internal struct CRYPTPROTECT_PROMPTSTRUCT\n    {\n        public int cbSize;\n        public int dwPromptFlags;\n        public IntPtr hwndApp;\n        public string szPrompt;\n    };\n\n    private const int CRYPTPROTECT_LOCAL_MACHINE = 0x4; // Flag for protecting data local to the machine\n    private const int CRYPTPROTECT_UI_FORBIDDEN = 0x1; // No user interface on unprotect (Windows only works with this flag)\n}\n\n// Usage example:\nvar encryptedPassword = PasswordManager.Encrypt("yourPasswordHere");\nstring decryptedPassword = PasswordManager.Decrypt(encryptedPassword);