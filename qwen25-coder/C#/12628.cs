public void RegisterHandlers(object handlerObject)\n{\n    Type type = handlerObject.GetType();\n    var methods = type.GetMethods(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);\n\n    foreach (var method in methods)\n    {\n        var attribute = method.GetCustomAttribute<MessageHandlerAttribute>();\n        if (attribute != null)\n        {\n            Delegate del = Delegate.CreateDelegate(typeof(HANDLER_FUNC), handlerObject, method);\n            handlers[attribute.HandlerName] = Tuple.Create(del, handlerObject);\n        }\n    }\n}