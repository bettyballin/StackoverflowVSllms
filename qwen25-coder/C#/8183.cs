using System;\nusing System.Runtime.InteropServices;\n\npublic class WirelessNetworkManager\n{\n    [DllImport("wlanapi.dll", SetLastError = true)]\n    private static extern int WlanOpenHandle(\n        UInt32 dwClientVersion,\n        IntPtr pReservedPtr,\n        out UInt32 pdwNegotiatedVersion,\n        out IntPtr phClientHandle);\n\n    [DllImport("wlanapi.dll")]\n    private static extern int WlanEnumInterfaces(\n        IntPtr hClientHandle,\n        IntPtr pReservedPtr,\n        ref IntPtr ppInterfaceList);\n\n    [DllImport("wlanapi.dll", CharSet = CharSet.Unicode, SetLastError = true)]\n    private static extern int WlanFreeMemory(IntPtr pMemory);\n\n    public void EnumerateWirelessInterfaces()\n    {\n        IntPtr clientHandle;\n        uint negotiatedVersion;\n\n        if (WlanOpenHandle(2, IntPtr.Zero, out negotiatedVersion, out clientHandle) == 0)\n        {\n            IntPtr ppInterfaceList = IntPtr.Zero;\n            try\n            {\n                if (WlanEnumInterfaces(clientHandle, IntPtr.Zero, ref ppInterfaceList) == 0)\n                {\n                    // Parse the interface list structure and iterate through it\n                    WLAN_INTERFACE_INFO_LIST infoList = (WLAN_INTERFACE_INFO_LIST)Marshal.PtrToStructure(ppInterfaceList, typeof(WLAN_INTERFACE_INFO_LIST));\n                    for (int i = 0; i < infoList.dwNumberOfItems; i++)\n                    {\n                        IntPtr pifInfo = new IntPtr(ppInterfaceList.ToInt64() + Marshal.SizeOf(negotiatedVersion) + (i * Marshal.SizeOf(typeof(WLAN_INTERFACE_INFO))));\n                        WLAN_INTERFACE_INFO interfaceInfo = (WLAN_INTERFACE_INFO)Marshal.PtrToStructure(pifInfo, typeof(WLAN_INTERFACE_INFO));\n                        Console.WriteLine("Interface Name: " + new string(interfaceInfo.strInterfaceDescription));\n                    }\n                }\n            }\n            finally\n            {\n                if (ppInterfaceList != IntPtr.Zero)\n                {\n                    WlanFreeMemory(ppInterfaceList);\n                }\n            }\n\n            // Close the handle to clean up resources\n            WlanCloseHandle(clientHandle, IntPtr.Zero);\n        }\n    }\n\n    [DllImport("wlanapi.dll")]\n    private static extern int WlanCloseHandle(\n        IntPtr hClientHandle,\n        IntPtr pReservedPtr);\n\n    // Define necessary structures and constants if not already defined\n}\n\n// Example structure definitions\n[StructLayout(LayoutKind.Sequential)]\npublic struct WLAN_INTERFACE_INFO_LIST\n{\n    public UInt32 dwNumberOfItems;\n    public UInt32 dwIndex;\n    [MarshalAs(UnmanagedType.ByValArray, ArraySubType = UnmanagedType.Struct, SizeConst = 1)]\n    public WLAN_INTERFACE_INFO[] InterfaceInfo;\n}\n\n[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]\npublic struct WLAN_INTERFACE_INFO\n{\n    public Guid InterfaceGuid;\n    [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]\n    public string strInterfaceDescription;\n}