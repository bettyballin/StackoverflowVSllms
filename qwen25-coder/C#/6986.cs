using System;\nusing System.Net.Http.Headers;\nusing System.Threading.Tasks;\nusing Microsoft.Graph.Auth;\nusing Microsoft.Identity.Client;\n\npublic class GraphService\n{\n    private IAuthenticationProvider authProvider;\n\n    public async Task InitializeAsync(string clientId, string clientSecret, string[] scopes)\n    {\n        // Configure the MSAL Client Application to use a confidential client workflow\n        var confidentialClientApplication = ConfidentialClientApplicationBuilder\n            .Create(clientId)                 // <-- Insert your Client ID here\n            .WithTenantId("<your-tenant-id>")  // <-- Insert your Tenant ID here\n            .WithClientSecret(clientSecret)\n            .Build();\n\n        authProvider = new MsalAuthenticationProvider(confidentialClientApplication, scopes);\n    }\n\n    public async Task<string> GetUserEmailAsync()\n    {\n        var graphServiceClient = new GraphServiceClient(authProvider);\n\n        try\n        {\n            // Get the user's information using Microsoft Graph API\n            var me = await graphServiceClient.Me.Request().GetAsync();\n            return me.Mail;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n            throw;\n        }\n    }\n}\n\n// Usage example:\npublic async Task MainAsync()\n{\n    string clientId, clientSecret, tenantId;\n    clientId = "YOUR_CLIENT_ID";       // Replace with your Client ID\n    clientSecret = "YOUR_CLIENT_SECRET"; // Securely get your Client Secret\n    tenantId = "<your-tenant-id>";       \n    \n    var graphService = new GraphService();\n    await graphService.InitializeAsync(clientId, clientSecret, new[] { "User.Read", "Mail.Read" });\n\n    string userEmail = await graphService.GetUserEmailAsync();\n    Console.WriteLine($"User's email: {userEmail}");\n}