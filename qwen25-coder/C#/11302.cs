using System;\nusing System.Collections.Concurrent;\nusing System.ServiceModel;\nusing System.Threading;\n\npublic class MessageQueueProcessor<T>\n{\n    private readonly ServiceClient _client;\n    private readonly ConcurrentQueue<T> _messageQueue;\n    private readonly Timer _timer;\n    \n    public MessageQueueProcessor()\n    {\n        _client = new ServiceClient(); // Replace with your service client initialization\n        _messageQueue = new ConcurrentQueue<T>();\n        \n        // Setup a timer to check and send messages every 10 seconds\n        _timer = new Timer(SendMessages, null, TimeSpan.Zero, TimeSpan.FromSeconds(10));\n    }\n    \n    public void EnqueueMessage(T message)\n    {\n        _messageQueue.Enqueue(message);\n    }\n\n    private void SendMessages(object state)\n    {\n        while (_messageQueue.TryDequeue(out var message))\n        {\n            try\n            {\n                // Attempt to send the message using a new channel each time\n                if (_client.State == CommunicationState.Faulted)\n                    ((ICommunicationObject)_client).Abort();\n                \n                _client = new ServiceClient(); // Replace with your service client initialization\n                \n                // Call your service method here, assuming Send is the operation contract name\n                _client.Send(message);\n            }\n            catch (CommunicationException ex)\n            {\n                // Log or handle exception appropriately\n                Console.WriteLine("Failed to send message: " + ex.Message);\n                // Re-enqueue the message for retry later\n                _messageQueue.Enqueue(message);\n                continue;\n            }\n        }\n    }\n\n    public void Close()\n    {\n        ((ICommunicationObject)_client).Close();\n        _timer.Dispose();\n    }\n}