public class ContrivedExampleInterceptor : IInterceptor\n{\n    public void Intercept(IInvocation invocation)\n    {\n        // Get the field name from the property name being accessed\n        string fieldName = invocation.Method.Name.Substring(4); // Assuming the naming convention is 'get_FieldName'\n\n        // Retrieve the target object, which is your DataContainer\n        var container = (DataContainer)invocation.Target;\n\n        // Set the return value to the value in the dictionary\n        if (container.Data.ContainsKey(fieldName))\n        {\n            invocation.ReturnValue = container.Data[fieldName];\n        }\n        else\n        {\n            throw new KeyNotFoundException($"The key '{fieldName}' was not found in the Data dictionary.");\n        }\n    }\n}\n\n// Usage example\nvar c = new DataContainer();\nc.Fields.Add("Name", "Jordan");\n\nvar pg = new ProxyGenerator();\nIContrivedExample ice = (IContrivedExample)pg.CreateInterfaceProxyWithTarget(typeof(IContrivedExample), c, new ContrivedExampleInterceptor());\nDebug.Assert(ice.Name == "Jordan");