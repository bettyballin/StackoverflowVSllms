using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    static void Main()\n    {\n        List<string> LIST1 = new List<string> { "MAIZE_SLIP_QUANTITY_3_9.1.aif" };\n        List<string> LIST2 = new List<string>\n        {\n            "TUTORIAL_FAILURE_CLINCH_4.1.aif",\n            "MAIZE_SLIP_QUANTITY_3_5.1.aif",\n            "MAIZE_SLIP_QUANTITY_3_9.2.aif",\n            // ... other entries\n        };\n\n        foreach (var target in LIST1)\n        {\n            var tokensTarget = Tokenize(target);\n            var bestMatch = LIST2.OrderBy(candidate => StringDistance(tokensTarget, Tokenize(candidate))).First();\n            Console.WriteLine($"Best match for '{target}': {bestMatch}");\n        }\n    }\n\n    static List<string> Tokenize(string s) => s.Split(new[] {'_', '.', ' '}, StringSplitOptions.RemoveEmptyEntries);\n\n    static int StringDistance(List<string> tokens1, List<string> tokens2)\n    {\n        // Simple example of weighted scoring\n        int score = 0;\n        for (int i = 0; i < Math.Min(tokens1.Count, tokens2.Count); i++)\n        {\n            if (tokens1[i] == tokens2[i])\n            {\n                // Higher weight for matching prefixes\n                score += 3 - i;\n            }\n        }\n        return Math.Abs(tokens1.Count - tokens2.Count) + score;\n    }\n}