public class QueryHelper<T>\n{\n    private string _query = "";\n\n    public QueryHelper<T> Command(string command)\n    {\n        _query = command;\n        return this;\n    }\n\n    public QueryHelper<T> Where(string field, object value)\n    {\n        if (!string.IsNullOrEmpty(_query))\n            _query += " WHERE ";\n\n        _query += $"{field} = @{field}";\n        AddParameter(field, value);\n        return this;\n    }\n\n    public QueryHelper<T> AND()\n    {\n        _query += " AND ";\n        return this;\n    }\n\n    public QueryHelper<T> Append(string append)\n    {\n        _query += " " + append;\n        return this;\n    }\n\n    private readonly List<(string, object)> parameters = new List<(string, object)>();\n\n    public void AddParameter(string name, object value)\n    {\n        parameters.Add((name, value));\n    }\n\n    public void ParamVal(object value)\n    {\n        var paramCount = _query.Split('@').Length - 1;\n        if (paramCount > parameters.Count)\n            throw new ArgumentException("Parameter values do not match the number of placeholders.");\n\n        AddParameter($"p{paramCount}", value);\n    }\n\n    public List<T> ReturnList()\n    {\n        using (var connection = new SqlConnection("your_connection_string"))\n        {\n            var command = new SqlCommand(_query, connection);\n            foreach (var param in parameters)\n                command.Parameters.AddWithValue(param.Item1, param.Item2);\n\n            connection.Open();\n            using (var reader = command.ExecuteReader())\n            {\n                var list = new List<T>();\n                while (reader.Read())\n                {\n                    // Map data to an instance of T here\n                    var item = Activator.CreateInstance<T>();\n\n                    for (int i = 0; i < reader.FieldCount; i++)\n                    {\n                        PropertyInfo prop = typeof(T).GetProperty(reader.GetName(i));\n                        if (prop != null && !prop.PropertyType.IsInterface && prop.CanWrite)\n                            prop.SetValue(item, reader[i] == DBNull.Value ? null : reader[i], null);\n                    }\n                    list.Add(item);\n                }\n\n                return list;\n            }\n        }\n    }\n}