using System;\nusing System.Collections.Generic;\nusing Microsoft.Practices.EnterpriseLibrary.Security.Authorization;\n\npublic class AzManOperationsFetcher\n{\n    private IAuthorizationStore authorizationStore;\n    private const string ApplicationName = "/MyApp";\n\n    public AzManOperationsFetcher()\n    {\n        // Initialize the AzMan store\n        AuthorizationFactory.GetAuthorizationStore(AuthorizationProviderType.Ldap, null);\n    }\n\n    public List<string> GetUserOperations(string userName)\n    {\n        var userOperations = new HashSet<string>();\n\n        using (authorizationStore.ContextType = Microsoft.Practices.EnterpriseLibrary.Security.Authorization.AuthorizerContext.FullAccess)\n        {\n            Application application = authorizationStore.GetApplication(ApplicationName);\n\n            // Iterate over roles and check operations\n            foreach (Role role in application.StoreRoles)\n            {\n                if (role.IsMember(userName))\n                {\n                    foreach (Operation operation in application.Operations)\n                    {\n                        AuthorizationRuleCollection rules = application.GetAuthorizationRules(new string[] { role.Name });\n                        foreach (AuthorizationRule rule in rules)\n                        {\n                            if (rule.AuthorizationResult == Microsoft.Practices.EnterpriseLibrary.Security.Authorization.AuthorizationResult.Allow &&\n                                rule.OperationName == operation.Name)\n                            {\n                                userOperations.Add(operation.Name);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return new List<string>(userOperations);\n    }\n}