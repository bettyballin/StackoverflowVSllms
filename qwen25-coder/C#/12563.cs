using System;\nusing NHibernate;\nusing NHibernate.SqlTypes;\nusing NHibernate.UserTypes;\nusing System.Data;\nusing System.Globalization;\n\npublic class DateTimeRangeUserType : IUserType\n{\n    public new bool Equals(object x, object y)\n    {\n        return (x == null) ? (y == null) : x.Equals(y);\n    }\n\n    public int GetHashCode(object x)\n    {\n        return x.GetHashCode();\n    }\n\n    public object NullSafeGet(IDataReader rs, string[] names, object owner)\n    {\n        var range = NHibernateUtil.String.NullSafeGet(rs, names[0]) as string;\n        if (range == null) return null;\n\n        var parts = range.Split(new[] {'-'}, StringSplitOptions.RemoveEmptyEntries);\n        if (parts.Length < 2) throw new FormatException("Invalid date range format");\n\n        return new DateTimeRange(\n            DateTime.ParseExact(parts[0].Trim(), "yyyy/MM/dd", CultureInfo.InvariantCulture),\n            DateTime.ParseExact(parts[1].Trim(), "yyyy/MM/dd", CultureInfo.InvariantCulture));\n    }\n\n    public void NullSafeSet(IDbCommand cmd, object value, int index)\n    {\n        var parameter = (IDbDataParameter)cmd.Parameters[index];\n        if (value == null)\n        {\n            parameter.Value = DBNull.Value;\n        }\n        else\n        {\n            var range = (DateTimeRange)value;\n            parameter.Value = $"{range.FromTime.ToString("yyyy/MM/dd")} - {range.ToTime.ToString("yyyy/MM/dd")}";\n        }\n    }\n\n    public object DeepCopy(object value)\n    {\n        return value == null ? null : new DateTimeRange(((DateTimeRange)value).FromTime, ((DateTimeRange)value).ToTime);\n    }\n\n    public object Replace(object original, object target, object owner)\n    {\n        return original;\n    }\n\n    public object Assemble(object cached, object owner)\n    {\n        return DeepCopy(cached);\n    }\n\n    public object Disassemble(object value)\n    {\n        return DeepCopy(value);\n    }\n\n    public SqlType[] SqlTypes => new[] { NHibernateUtil.String.SqlType };\n    public Type ReturnedType => typeof(DateTimeRange);\n    public bool IsMutable => false;\n}