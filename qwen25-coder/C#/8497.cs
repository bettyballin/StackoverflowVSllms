using Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.CSharp;\nusing Microsoft.CodeAnalysis.Diagnostics;\nusing System.Collections.Immutable;\n\n[DiagnosticAnalyzer(LanguageNames.CSharp)]\npublic class NullableComparisonAnalyzer : DiagnosticAnalyzer\n{\n    public const string DiagnosticId = "NullableComparisonRule";\n\n    private static readonly LocalizableString Title = "Compare nullable types with Is Nothing or == null";\n    private static readonly LocalizableString MessageFormat = "Use 'Is Nothing' or '== null' for comparing nullable type '{0}' to Nothing/null.";\n    private static readonly LocalizableString Description = "It's more reliable to use 'Is Nothing' in VB or '== null' in C# when checking if a nullable type is null.";\n    private const string Category = "Usage";\n\n    private static DiagnosticDescriptor Rule = new DiagnosticDescriptor(DiagnosticId, Title, MessageFormat, Category, DiagnosticSeverity.Warning, isEnabledByDefault: true, description: Description);\n\n    public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics => ImmutableArray.Create(Rule);\n\n    public override void Initialize(AnalysisContext context)\n    {\n        // Only need to register for C# syntax trees since the target is VB\n        if (context == null) throw new System.ArgumentNullException(nameof(context));\n        context.ConfigureGeneratedCodeAnalysis(GeneratedCodeAnalysisFlags.None);\n        context.EnableConcurrentExecution();\n\n        context.RegisterSyntaxNodeAction(AnalyzeBinaryExpression, SyntaxKind.EqualsExpression);\n    }\n\n    private static void AnalyzeBinaryExpression(SyntaxNodeAnalysisContext context)\n    {\n        var binaryExpression = (BinaryExpressionSyntax)context.Node;\n\n        if (binaryExpression.IsKind(SyntaxKind.EqualsExpression))\n        {\n            var leftType = ModelExtensions.GetTypeInfo(context.SemanticModel, binaryExpression.Left).ConvertedType;\n            var rightExpression = binaryExpression.Right;\n\n            if (leftType.IsNullableType() && SymbolEqualityComparer.Default.Equals(rightExpression, SyntaxFactory.LiteralExpression(SyntaxKind.NullLiteralExpression)))\n            {\n                var diagnostic = Diagnostic.Create(Rule, binaryExpression.GetLocation(), leftType.Name);\n                context.ReportDiagnostic(diagnostic);\n            }\n        }\n    }\n}