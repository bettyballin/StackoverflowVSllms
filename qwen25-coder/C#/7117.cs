using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\n\nclass Program\n{\n    static void Main()\n    {\n        Process sqlExpressSetup = new Process();\n        sqlExpressSetup.StartInfo.FileName = "sqlexpr32.exe";\n        sqlExpressSetup.StartInfo.Arguments = "your command line args here"; // Replace with actual arguments\n        sqlExpressSetup.StartInfo.UseShellExecute = false;\n        sqlExpressSetup.Start();\n\n        bool WasCancelled = false; // Assume this is set elsewhere in your application\n\n        Process setupProcess = null;\n\n        while (!sqlExpressSetup.WaitForExit(2000))\n        {\n            if (WasCancelled)\n            {\n                // Try to find the child process\n                setupProcess = FindChildProcess(sqlExpressSetup.Id);\n                if (setupProcess != null)\n                {\n                    setupProcess.CloseMainWindow();\n                    setupProcess.WaitForExit();\n                }\n                sqlExpressSetup.Kill(); // fallback in case CloseMainWindow does not work\n                break;\n            }\n        }\n\n        if (setupProcess == null || !setupProcess.HasExited) // Handle cleanup or report failure\n        {\n            Console.WriteLine("Installation could not be cancelled gracefully.");\n        }\n    }\n\n    static Process FindChildProcess(int parentId)\n    {\n        List<Process> children = new List<Process>();\n        foreach (var p in Process.GetProcesses())\n        {\n            try\n            {\n                if (p.Parent().Id == parentId) // using parent() extension method from ManagedWinapi or similar library\n                    return p;\n            }\n            catch { /* ignored */ }\n        }\n        return null;\n    }\n}