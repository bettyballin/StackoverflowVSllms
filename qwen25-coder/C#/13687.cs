using System;\nusing System.Collections.Generic;\n\n// Common interface for validation strategy\npublic interface IValidationStrategy {\n    bool Validate(object data);\n}\n\n// Abstract class that applies common validation logic\npublic abstract class ValidationBase : IValidationStrategy {\n    protected List<string> Errors = new List<string>();\n\n    public virtual bool Validate(object data) {\n        // Common validation logic can be placed here\n        return Errors.Count == 0;\n    }\n\n    protected void AddError(string error) {\n        Errors.Add(error);\n    }\n}\n\n// Concrete implementation for Table1-specific rules\npublic class Table1ValidationStrategy : ValidationBase {\n    public override bool Validate(object data) {\n        base.Validate(data);\n        // Add table1 specific validation logic here\n        if (/* some condition fails */) {\n            AddError("Table1 Specific Error");\n        }\n        return Errors.Count == 0;\n    }\n}\n\n// Concrete implementation for Table2-specific rules\npublic class Table2ValidationStrategy : ValidationBase {\n    public override bool Validate(object data) {\n        base.Validate(data);\n        // Add table2 specific validation logic here\n        if (/* some condition fails */) {\n            AddError("Table2 Specific Error");\n        }\n        return Errors.Count == 0;\n    }\n}\n\n// Composite pattern to manage multiple validators\npublic class ValidationComposite : IValidationStrategy {\n    private readonly List<IValidationStrategy> _validators = new List<IValidationStrategy>();\n\n    public void Add(IValidationStrategy validator) => _validators.Add(validator);\n    public bool Validate(object data) {\n        foreach (var strategy in _validators) {\n            var success = strategy.Validate(data);\n            // Log errors using log4net here or collect in a list\n        }\n        return false; // Adjust based on error collection logic\n    }\n}\n\n// Usage in Main method\npublic class Program {\n    public static void Main() {\n        var validationComposite = new ValidationComposite();\n        validationComposite.Add(new Table1ValidationStrategy());\n        validationComposite.Add(new Table2ValidationStrategy());\n\n        // Simulate table data\n        object tableData1 = new object(); \n        object tableData2 = new object();\n\n        validationComposite.Validate(tableData1);\n        validationComposite.Validate(tableData2);\n    }\n}