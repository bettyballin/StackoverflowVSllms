public void SaveChanges()\n{\n    var errors = ValidatePendingChanges();\n\n    if (errors.Any())\n    {\n        throw new ValidationException(errors);\n    }\n\n    // Proceed with saving changes to the database\n}\n\nprivate ICollection<string> ValidatePendingChanges()\n{\n    var errors = new List<string>();\n\n    foreach (var entry in _context.ChangeTracker.Entries())\n    {\n        switch (entry.State)\n        {\n            case EntityState.Added:\n                ValidateEntityOnCreate(entry.Entity, errors);\n                break;\n            case EntityState.Modified:\n                ValidateEntityOnUpdate(entry.Entity, errors);\n                break;\n            case EntityState.Deleted:\n                ValidateEntityOnDelete(entry.Entity, errors);\n                break;\n        }\n    }\n\n    return errors;\n}\n\nprivate void ValidateEntityOnCreate(object entity, ICollection<string> errors)\n{\n    // Example: Ensure unique usernames\n    if (entity is User user && _context.Users.Any(u => u.Username == user.Username))\n    {\n        errors.Add($"Username '{user.Username}' is already taken.");\n    }\n}\n\n// Similarly implement ValidateEntityOnUpdate and ValidateEntityOnDelete for other states