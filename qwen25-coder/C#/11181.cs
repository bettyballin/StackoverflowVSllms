/// <summary>\n/// Represents a strictly defined XML document wrapper.\n/// </summary>\npublic class StrictXmlDocument\n{\n    private const string ValuePattern = @"^[A-Za-z0-9]+$"; // Example regex pattern\n    private string _elementValue;\n\n    /// <summary>\n    /// Gets or sets the value of the element, which must match a specific regular expression:\n    /// ^[A-Za-z0-9]+$\n    /// </summary>\n    public string ElementValue\n    {\n        get => _elementValue;\n        set\n        {\n            ValidateElementValue(value);\n            _elementValue = value;\n        }\n    }\n\n    private void ValidateElementValue(string value)\n    {\n        if (!System.Text.RegularExpressions.Regex.IsMatch(value, ValuePattern))\n        {\n            throw new ArgumentException($"The provided value '{value}' does not match the required pattern: {ValuePattern}", nameof(ElementValue));\n        }\n    }\n\n    /// <summary>\n    /// Validates whether a given string matches the required pattern for ElementValue.\n    /// </summary>\n    /// <param name="value">The value to validate.</param>\n    /// <returns>True if the value is valid, false otherwise.</returns>\n    public bool IsValidElementValue(string value)\n    {\n        return System.Text.RegularExpressions.Regex.IsMatch(value, ValuePattern);\n    }\n}