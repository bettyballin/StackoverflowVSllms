using System;\nusing System.Runtime.InteropServices;\nusing System.Windows.Forms;\n\npublic class IdleTimerForm : Form\n{\n    private Timer _idleTimer;\n    private const int EventUserDefined = -0x1F;\n\n    [DllImport("user32.dll")]\n    private static extern IntPtr SetWindowsHookEx(int idHook, LowLevelProc lpfn, IntPtr hInstance, int threadId);\n\n    [DllImport("user32.dll")]\n    private static extern bool UnhookWindowsHookEx(IntPtr hHook);\n\n    [DllImport("user32.dll")]\n    private static extern IntPtr CallNextHookEx(IntPtr hHook, int nCode, IntPtr wParam, IntPtr lParam);\n\n    [DllImport("kernel32.dll")]\n    private static extern IntPtr GetModuleHandle(string lpModuleName);\n\n    private delegate IntPtr LowLevelProc(int nCode, IntPtr wParam, IntPtr lParam);\n    \n    private const int WhMouseLl = 14;\n    private const int WhKeyboardLl = 13;\n\n    private LowLevelProc _proc = HookCallback;\n    private IntPtr _hookID = IntPtr.Zero;\n\n    public IdleTimerForm()\n    {\n        InitializeComponent();\n\n        // Set up the idle timer.\n        _idleTimer = new Timer {Interval = 5 * 60 * 1000}; // 5 minutes timeout for demonstration.\n        _idleTimer.Tick += (s, e) => ShowLockScreen();\n        _hookID = SetHook(_proc);\n    }\n\n    private IntPtr SetHook(LowLevelProc proc)\n    {\n        using Process curProcess = Process.GetCurrentProcess();\n        using ProcessModule curModule = curProcess.MainModule;\n        \n        return SetWindowsHookEx(WhMouseLl | WhKeyboardLl, proc, GetModuleHandle(curModule.ModuleName), 0);\n    }\n\n    private static IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)\n    {\n        if (nCode >= 0 && (wParam == (IntPtr)EventUserDefined || (nCode != -1)))\n            _idleTimer.Stop(); // Reset timer on user activity.\n            \n        return CallNextHookEx(_hookID, nCode, wParam, lParam);\n    }\n\n    private void ShowLockScreen()\n    {\n        var lockForm = new LockScreenForm();\n        lockForm.Show(this); // Ensure it is shown modally over this form.\n        _idleTimer.Start(); // Restart after the lockscreen is dismissed.\n    }\n\n    protected override void OnFormClosing(FormClosingEventArgs e)\n    {\n        UnhookWindowsHookEx(_hookID);\n        base.OnFormClosing(e);\n    }\n}