using System;\nusing System.Collections.Generic;\nusing System.Data.SqlClient;\n\npublic class SimpleAuthenticationProvider\n{\n    private string connectionString = "YourConnectionString";\n\n    public bool AuthenticateUser(string username, string password)\n    {\n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            connection.Open();\n            string query = "SELECT Password, Role FROM Users WHERE Username=@Username";\n            using (SqlCommand command = new SqlCommand(query, connection))\n            {\n                command.Parameters.AddWithValue("@Username", username);\n                using (SqlDataReader reader = command.ExecuteReader())\n                {\n                    if (reader.Read() && reader["Password"].Equals(password))\n                    {\n                        // Store the role in session or somewhere accessible\n                        CurrentUserRole = reader["Role"].ToString();\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    public string CurrentUserRole { get; private set; }\n\n    public bool UserInRole(string requiredRole)\n    {\n        return CurrentUserRole != null && CurrentUserRole.Equals(requiredRole);\n    }\n\n    // Example usage\n    public void ApplicationStart()\n    {\n        var authProvider = new SimpleAuthenticationProvider();\n        string username = "exampleUser";\n        string password = "password123";  // Never hardcode passwords in real applications\n\n        if (authProvider.AuthenticateUser(username, password))\n        {\n            if (authProvider.UserInRole("Admin"))\n            {\n                // Show admin UI\n            }\n            else\n            {\n                // Show regular user UI\n            }\n        }\n    }\n}