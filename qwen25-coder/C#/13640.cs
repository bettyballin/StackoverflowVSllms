public partial class MainWindow : Window\n{\n    public MainWindow()\n    {\n        InitializeComponent();\n        var s = new StringRedir(ref ProgressTextBlock);\n        this.DataContext = s;\n    }\n\n    private async void Button_Click(object sender, RoutedEventArgs e)\n    {\n        var s = (StringRedir)this.DataContext;\n\n        // Offload the task to another thread using Task\n        await Task.Run(() =>\n        {\n            ThirdPartyDllFunction();\n        });\n    }\n\n    private void ThirdPartyDllFunction()\n    {\n        // Simulate a long-running process that writes to console\n        for (int i = 0; i < 10; i++)\n        {\n            Console.WriteLine($"Progress {i * 10}%");\n            Task.Delay(500).GetAwaiter().GetResult(); // Simulate work\n        }\n\n        // Construct tree object here and bind it to TreeView\n    }\n}\n\npublic class StringRedir : StringWriter, INotifyPropertyChanged\n{\n    private string text;\n\n    public string Text\n    {\n        get { return text; }\n        set\n        {\n            text += value;\n            OnPropertyChanged(nameof(Text));\n        }\n    }\n\n    public event PropertyChangedEventHandler PropertyChanged;\n    protected void OnPropertyChanged(string name)\n    {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));\n    }\n\n    public StringRedir(ref TextBlock t) : base()\n    { }\n\n    public override void WriteLine(string x)\n    {\n        // Use Dispatcher to update UI thread\n        Application.Current.Dispatcher.Invoke(() =>\n        {\n            Text = x + "\n";\n        });\n    }\n}