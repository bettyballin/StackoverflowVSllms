using System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\n\npublic partial class MainWindow : Window\n{\n    private Point startPoint;\n    private Rectangle visualRectangle = null;\n    private Canvas canvas; // Make sure to reference your Canvas\n\n    public MainWindow()\n    {\n        InitializeComponent();\n        canvas = new Canvas(); // or set it from XAML with FindName\n        this.Content = canvas;\n\n        canvas.MouseDown += Canvas_MouseDown;\n        canvas.MouseMove += Canvas_MouseMove;\n        canvas.MouseUp += Canvas_MouseUp;\n    }\n\n    private void Canvas_MouseDown(object sender, MouseButtonEventArgs e)\n    {\n        startPoint = e.GetPosition(canvas);\n\n        visualRectangle = new Rectangle\n        {\n            Stroke = Brushes.Black,\n            StrokeThickness = 1,\n            Fill = new SolidColorBrush(Colors.Gray) { Opacity = 0.5 }\n        };\n\n        Canvas.SetLeft(visualRectangle, startPoint.X);\n        Canvas.SetTop(visualRectangle, startPoint.Y);\n\n        canvas.Children.Add(visualRectangle);\n    }\n\n    private void Canvas_MouseMove(object sender, MouseEventArgs e)\n    {\n        if (e.LeftButton == MouseButtonState.Pressed && visualRectangle != null)\n        {\n            var currentPoint = e.GetPosition(canvas);\n            double width = Math.Abs(currentPoint.X - startPoint.X);\n            double height = Math.Abs(currentPoint.Y - startPoint.Y);\n\n            Canvas.SetLeft(visualRectangle, Math.Min(startPoint.X, currentPoint.X));\n            Canvas.SetTop(visualRectangle, Math.Min(startPoint.Y, currentPoint.Y));\n\n            visualRectangle.Width = width;\n            visualRectangle.Height = height;\n        }\n    }\n\n    private void Canvas_MouseUp(object sender, MouseButtonEventArgs e)\n    {\n        if (visualRectangle != null)\n        {\n            CaptureAndSave();\n            canvas.Children.Remove(visualRectangle);\n            visualRectangle = null;\n        }\n    }\n\n    private void CaptureAndSave()\n    {\n        double topLeftX = Math.Min(startPoint.X, startPoint.X + visualRectangle.Width);\n        double topLeftY = Math.Min(startPoint.Y, startPoint.Y + visualRectangle.Height);\n        int width = (int)visualRectangle.Width;\n        int height = (int)visualRectangle.Height;\n\n        RenderTargetBitmap bmp = new RenderTargetBitmap(width, height, 96, 96, PixelFormats.Pbgra32);\n        VisualBrush brush = new VisualBrush(canvas)\n        {\n            Viewbox = new Rect(topLeftX, topLeftY, width, height),\n            ViewboxUnits = BrushMappingMode.Absolute\n        };\n\n        DrawingVisual drawingVisual = new DrawingVisual();\n        using (DrawingContext drawingContext = drawingVisual.RenderOpen())\n        {\n            drawingContext.DrawRectangle(brush, null, new Rect(new Point(), new Size(width, height)));\n        }\n\n        bmp.Render(drawingVisual);\n\n        // Save as BMP\n        BitmapEncoder encoderBmp = new BmpBitmapEncoder();\n        encoderBmp.Frames.Add(BitmapFrame.Create(bmp));\n        using (var streamBmp = System.IO.File.OpenWrite("captured.bmp"))\n            encoderBmp.Save(streamBmp);\n\n        // Save as GIF\n        // Note: Since GifBitmapEncoder does not support arbitrary Alpha transparency, we need to convert it first.\n        BitmapSource bsrcNoAlpha = ConvertToPbgra32Format(bmp);\n        BitmapEncoder encoderGif = new GifBitmapEncoder();\n        encoderGif.Frames.Add(BitmapFrame.Create(bsrcNoAlpha));\n        using (var streamGif = System.IO.File.OpenWrite("captured.gif"))\n            encoderGif.Save(streamGif);\n\n        MessageBox.Show("Saved as BMP and GIF.");\n    }\n\n    private BitmapSource ConvertToPbgra32Format(BitmapSource bitmap)\n    {\n        var wbmp = new WriteableBitmap(bitmap);\n        Image.FormatConvertedBitmap converted = new Image.FormatConvertedBitmap(wbmp, PixelFormats.Pbgra32, null, 0);\n        return converted;\n    }\n}