public class Rule\n{\n    public string Field { get; set; }\n    public string Operator { get; set; }\n    public dynamic Value { get; set; }\n}\n\npublic Func<T, bool> CreatePredicate<T>(Rule rule)\n{\n    var param = Expression.Parameter(typeof(T), "item");\n    var field = Expression.Property(param, rule.Field);\n    var value = Expression.Constant(rule.Value);\n\n    BinaryExpression binaryExpression;\n\n    switch (rule.Operator)\n    {\n        case "==":\n            binaryExpression = Expression.Equal(field, value);\n            break;\n        // Add more operators as necessary...\n        default:\n            throw new ApplicationException($"Unknown operator {rule.Operator}");\n    }\n\n    return Expression.Lambda<Func<T, bool>>(binaryExpression, param).Compile();\n}\n\n// Usage\nvar rules = new List<Rule>\n{\n    new Rule { Field = "PropertyName", Operator = "==", Value = "SomeValue" }\n};\n\nvar items = // your list of dynamic or strongly-typed objects\n\nforeach (var rule in rules)\n{\n    var predicate = CreatePredicate<dynamic>(rule);\n    \n    foreach (dynamic item in items)\n    {\n        if (predicate(item))\n        {\n            // do work\n        }\n    }\n}