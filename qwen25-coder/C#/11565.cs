using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class SecureDataHandler\n{\n    // Assume getEncryptionKey() securely retrieves your stored encryption key.\n    private static byte[] getEncryptionKey()\n    {\n        // This should be implemented to fetch the key from a secure location.\n        return Encoding.UTF8.GetBytes("YourSecureRandomKeyHere"); // Ensure this is random and kept secure!\n    }\n\n    public static string EncryptData(string data)\n    {\n        using (Aes aesAlg = Aes.Create())\n        {\n            aesAlg.Key = getEncryptionKey();\n            aesAlg.GenerateIV();\n\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n            byte[] dataBytes = Encoding.UTF8.GetBytes(data);\n            byte[] bytesEncrypted = encryptor.TransformFinalBlock(dataBytes, 0, dataBytes.Length);\n\n            byte[] cipherText = new byte[aesAlg.IV.Length + bytesEncrypted.Length];\n            Array.Copy(aesAlg.IV, cipherText, aesAlg.IV.Length);\n            Array.Copy(bytesEncrypted, 0, cipherText, aesAlg.IV.Length, bytesEncrypted.Length);\n\n            return Convert.ToBase64String(cipherText);\n        }\n    }\n\n    public static string DecryptData(string cipherText)\n    {\n        byte[] cipherBytes = Convert.FromBase64String(cipherText);\n\n        using (Aes aesAlg = Aes.Create())\n        {\n            aesAlg.Key = getEncryptionKey();\n            aesAlg.IV = new byte[aesAlg.BlockSize / 8];\n            Array.Copy(cipherBytes, 0, aesAlg.IV, 0, aesAlg.IV.Length);\n            \n            ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);\n\n            byte[] dataBytes = new byte[cipherBytes.Length - aesAlg.IV.Length];\n            Array.Copy(cipherBytes, aesAlg.IV.Length, dataBytes, 0, dataBytes.Length);\n\n            return Encoding.UTF8.GetString(decryptor.TransformFinalBlock(dataBytes, 0, dataBytes.Length));\n        }\n    }\n}