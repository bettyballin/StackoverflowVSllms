using Microsoft.Win32;\nusing System.Security.AccessControl;\nusing System.Security.Principal;\n\npublic bool HasRegistryKeyPermission(string keyPath, RegistryRights rights)\n{\n    try\n    {\n        // Open the registry key with read access to check permissions.\n        using (RegistryKey key = Registry.LocalMachine.OpenSubKey(keyPath, false))\n        {\n            if (key == null)\n                return false; // Key does not exist or cannot be accessed.\n\n            // Get the security descriptor for the key\n            RegistrySecurity security = key.GetAccessControl();\n\n            // Get the current Windows identity.\n            WindowsIdentity identity = WindowsIdentity.GetCurrent();\n            AuthorizationRuleCollection rules = security.GetAuthorizationRules(true, true, identity);\n\n            // Calculate effective rights of current user\n            AuthorizationResult result;\n            security.AccessCheck(identity.User, rights, AccessControlType.Allow, out result);\n            \n            return result == AuthorizationResult.Granted;\n        }\n    }\n    catch (System.Security.SecurityException)\n    {\n        // Exception thrown if the key cannot be accessed due to permission.\n        return false;\n    }\n}\n\n// Usage\nstring registryPath = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run";\nbool canWrite = HasRegistryKeyPermission(registryPath, RegistryRights.SetValue);\nbool canRead = HasRegistryKeyPermission(registryPath, RegistryRights.QueryValues);\n\nConsole.WriteLine($"Can Read: {canRead}, Can Write: {canWrite}");