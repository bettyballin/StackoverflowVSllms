public abstract class SecurePage : System.Web.UI.Page\n{\n    protected override void OnLoad(EventArgs e)\n    {\n        // Check if the user has permission to view this zone before calling the base OnLoad\n        if (!UserHasAccessToZone(GetCurrentSecurityZone()))\n        {\n            Response.StatusCode = 403; // Forbidden\n            Response.End();\n        }\n\n        base.OnLoad(e);\n    }\n\n    protected abstract string GetCurrentSecurityZone();\n\n    private bool UserHasAccessToZone(string zone)\n    {\n        // Replace this with actual database or in-memory check for user's access rights to a security zone.\n        var userId = GetCurrentUser(); // Implement this method to get current UserId\n        return CheckUserZoneAccess(userId, zone); // Implement this method\n    }\n\n    private string GetCurrentUser()\n    {\n        // Logic to retrieve the current UserID. For example:\n        return HttpContext.Current.User.Identity.Name;\n    }\n\n    private bool CheckUserZoneAccess(string userId, string zone)\n    {\n        // Dummy logic for demonstration purposes; replace with real security-checking logic here.\n        switch (userId)\n        {\n            case "admin":\n                return true;\n            case "user1":\n                return zone == "Financials"; // Assuming user1 has access to Financials\n            default:\n                return false;\n        }\n    }\n}