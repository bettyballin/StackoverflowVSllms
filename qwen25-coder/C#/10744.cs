using System;\nusing System.Runtime.InteropServices;\nusing System.Text;\n\nclass Program\n{\n    [DllImport("mpr.dll", CharSet = CharSet.Unicode, SetLastError = true)]\n    private static extern int WNetUseEnum(IntPtr hEnum,\n                                        NETRESOURCE.ResourceScope dwScope,\n                                        IntPtr lpnr,\n                                        ref uint lpcCount,\n                                        ref uint lpBufferSize,\n                                        string lpProvider);\n\n    [StructLayout(LayoutKind.Sequential)]\n    public class NETRESOURCE\n    {\n        public ResourceScope Scope;\n        public ResourceType ResourceType;\n        public ResourceDisplayType DisplayType;\n        public int Usage;\n        public string LocalName;\n        public string RemoteName;\n        public string Comment;\n        public string Provider;\n\n        public enum ResourceScope : int\n        {\n            Connected = 1,\n            GlobalNetwork,\n            Remembered,\n            Recent,\n            Context\n        };\n\n        public enum ResourceType : int\n        {\n            Any = 0,\n            Disk = 1,\n            Print = 2,\n            Reserved = 8,\n        }\n\n        public enum ResourceDisplayType : int\n        {\n            Generic = 0x0,\n            Domain = 0x01,\n            Server = 0x02,\n            Share = 0x03,\n            File = 0x04,\n            Group = 0x05,\n            Network = 0x06,\n            Root = 0x07,\n            Shareadmin = 0x08,\n            Directory = 0x09,\n            Tree = 0x0a,\n            Ndscontainer = 0x0b\n        }\n    }\n\n    static string ConvertDriveLetterToUNC(string driveLetterPath)\n    {\n        if (string.IsNullOrEmpty(driveLetterPath))\n            throw new ArgumentException("driveLetterPath is null or empty");\n\n        var buffer = IntPtr.Zero;\n        uint bufferSize = 16384; // start with 16k buffer\n        uint count = 0;\n\n        try\n        {\n            int result = WNetUseEnum(IntPtr.Zero, NETRESOURCE.ResourceScope.Connected, IntPtr.Zero, ref count, ref bufferSize, null);\n\n            if (result == 234) // ERROR_MORE_DATA\n                buffer = Marshal.AllocHGlobal((int)bufferSize);\n            else if (result != 0)\n                throw new System.ComponentModel.Win32Exception(result);\n\n            result = WNetUseEnum(IntPtr.Zero, NETRESOURCE.ResourceScope.Connected, buffer, ref count, ref bufferSize, null);\n\n            if (result == 234) // ERROR_MORE_DATA\n                throw new Exception("The provided buffer size is too small and could not be reallocated.");\n\n            if (result != 0)\n                throw new System.ComponentModel.Win32Exception(result);\n\n            var ptr = buffer;\n            for (int i = 0; i < count; i++)\n            {\n                NETRESOURCE nr = Marshal.PtrToStructure<NETRESOURCE>(ptr);\n                if (nr.LocalName != null && nr.RemoteName != null &&\n                    driveLetterPath.StartsWith(nr.LocalName, StringComparison.OrdinalIgnoreCase))\n                {\n                    return driveLetterPath.Replace(nr.LocalName, nr.RemoteName, StringComparison.OrdinalIgnoreCase);\n                }\n                ptr += Marshal.SizeOf(nr);\n            }\n\n            throw new Exception("No matching network resource found.");\n        }\n        finally\n        {\n            if (buffer != IntPtr.Zero)\n                Marshal.FreeHGlobal(buffer);\n        }\n    }\n\n    static void Main(string[] args)\n    {\n        try\n        {\n            string drivePath = @"W:\Path\Share";\n            string uncPath = ConvertDriveLetterToUNC(drivePath);\n            Console.WriteLine($"UNC Path: {uncPath}");\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n}