using System;\n\npublic static class GuidGenerator\n{\n    public static Guid GenerateSequentialGuid()\n    {\n        byte[] guidArray = Guid.NewGuid().ToByteArray();\n        DateTime baseDate = new DateTime(1900, 1, 1);\n        DateTime now = DateTime.Now;\n        \n        // Get the days and milliseconds which will be used to build the byte string \n        TimeSpan daysSinceBaseDate = new TimeSpan(now.Ticks - baseDate.Ticks);\n        long days = daysSinceBaseDate.Days;\n        long millisecondOfDay = now.TimeOfDay.TotalMilliseconds;\n\n        // Convert to a byte array\n        // Note that SQL Server is expecting these values in little-endian format\n        byte[] daysArray = BitConverter.GetBytes(days);\n        byte[] millisecondsArray = BitConverter.GetBytes(millisecondOfDay);\n\n        // Reverse the bytes to make them comply with little-endian formatting.\n        if (BitConverter.IsLittleEndian)\n        {\n            Array.Reverse(daysArray);\n            Array.Reverse(millisecondsArray);\n        }\n\n        // Copy the bytes into the GUID\n        Array.Copy(daysArray, daysArray.Length - 2, guidArray, guidArray.Length - 6, 2);\n        Array.Copy(millisecondsArray, millisecondsArray.Length - 4, guidArray, guidArray.Length - 4, 4);\n\n        return new Guid(guidArray);\n    }\n}