using System;\nusing System.Linq;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class GuidHasher\n{\n    public static byte[] FastXorGuidHash(IEnumerable<Guid> guids)\n    {\n        return guids.Aggregate(new byte[16], (current, guid) =>\n        {\n            var bytes = guid.ToByteArray();\n            for (int i = 0; i < 16; i++)\n                current[i] ^= bytes[i];\n            return current;\n        });\n    }\n\n    public static Guid HashGuidsWithSha256(IEnumerable<Guid> guids)\n    {\n        using SHA256 sha256 = SHA256.Create();\n        var bytes = Encoding.UTF8.GetBytes(string.Concat(guids.Select(g => g.ToString("N"))));\n        return new Guid(sha256.ComputeHash(bytes).Take(16).ToArray());\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        List<Guid> guids = GetGuidList(); // Assume you get your GUID list here\n\n        // Fast XOR method, produces a 128-bit hash as a Guid\n        var fastXorHash = new Guid(GuidHasher.FastXorGuidHash(guids));\n\n        // SHA256 method for better uniqueness, also reduced to 128 bits\n        var sha256Hash = GuidHasher.HashGuidsWithSha256(guids);\n\n        Console.WriteLine("Fast XOR Hash: " + fastXorHash);\n        Console.WriteLine("SHA256 Hash: " + sha256Hash);\n    }\n\n    private static List<Guid> GetGuidList()\n    {\n        return new List<Guid>\n        {\n            Guid.NewGuid(),\n            Guid.NewGuid(),\n            Guid.NewGuid()\n        };\n    }\n}