public interface IRepositoryStrategy<T> where T : Info\n{\n    void Save(T info);\n}\n\npublic class EmployeeRepositoryStrategy : IRepositoryStrategy<EmployeeInfo>\n{\n    public void Save(EmployeeInfo employeeInfo)\n    {\n        // Implementation for saving EmployeeInfo to the DB.\n    }\n}\n\npublic class CustomerRepositoryStrategy : IRepositoryStrategy<CustomerInfo>\n{\n    public void Save(CustomerInfo customerInfo)\n    {\n        // Implementation for saving CustomerInfo to the DB.\n    }\n}\n\npublic class InformationRepository<T> where T : Info\n{\n    private readonly IRepositoryStrategy<T> _strategy;\n\n    public InformationRepository(IRepositoryStrategy<T> strategy)\n    {\n        _strategy = strategy;\n    }\n\n    public void Store(T info)\n    {\n        // Common logic before storing\n        _strategy.Save(info);\n        // Common logic after storing\n    }\n}\n\n// Usage:\nvar employeeRepo = new InformationRepository<EmployeeInfo>(new EmployeeRepositoryStrategy());\nvar customerRepo = new InformationRepository<CustomerInfo>(new CustomerRepositoryStrategy());