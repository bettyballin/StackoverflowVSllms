using System;\nusing System.Collections.Concurrent;\nusing System.ComponentModel;\nusing System.Windows.Forms;\n\npublic class TaskManager\n{\n    private ConcurrentDictionary<string, BackgroundWorker> _runningTasks = new ConcurrentDictionary<string, BackgroundWorker>();\n\n    public void StartTask(string taskId, DoWorkEventHandler workHandler)\n    {\n        if (_runningTasks.TryAdd(taskId, new BackgroundWorker()))\n        {\n            var worker = _runningTasks[taskId];\n            worker.DoWork += workHandler;\n            worker.RunWorkerCompleted += (sender, args) =>\n            {\n                // Clean up once task is done\n                _runningTasks.TryRemove(taskId, out _);\n            };\n            worker.RunWorkerAsync();\n        }\n        else\n        {\n            MessageBox.Show("Task is already running");\n        }\n    }\n\n    public void StopTask(string taskId)\n    {\n        if (_runningTasks.TryGetValue(taskId, out BackgroundWorker worker))\n        {\n            // Request cancellation (assuming your DoWork handler checksCancellationRequested)\n            worker.CancelAsync();\n            \n            // Optionally wait for the task to finish cleaning up or handle accordingly\n        }\n    }\n\n    public bool IsTaskRunning(string taskId)\n    {\n        return _runningTasks.ContainsKey(taskId);\n    }\n}\n\npublic partial class MainForm : Form\n{\n    private TaskManager _taskManager = new TaskManager();\n\n    public void RunSpecificTask()\n    {\n        if (!_taskManager.IsTaskRunning("MyUniqueTaskId"))\n        {\n            _taskManager.StartTask("MyUniqueTaskId", (sender, args) =>\n            {\n                // Simulate task work\n                for (int i = 0; i < 10 && !args.Cancel; i++)\n                {\n                    // Perform task step\n                    System.Threading.Thread.Sleep(500);\n                }\n            });\n        }\n    }\n\n    public void StopSpecificTask()\n    {\n        _taskManager.StopTask("MyUniqueTaskId");\n    }\n}