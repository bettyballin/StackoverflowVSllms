using System;\nusing System.Collections.Generic;\nusing System.Xml;\n\npublic class XmlNodeEqualityComparer : IXmlComparer<XmlNode>\n{\n    public bool AreEqual(XmlNode node1, XmlNode node2)\n    {\n        if (node1 == null && node2 == null) return true;\n        if (node1 == null || node2 == null) return false;\n\n        // Compare node names\n        if (node1.Name != node2.Name) return false;\n\n        // Compare node values\n        if (node1.Value != node2.Value) return false;\n\n        // Compare attributes\n        if (!AreAttributesEqual(node1.Attributes, node2.Attributes))\n            return false;\n\n        // Recursively compare child nodes\n        if (node1.HasChildNodes != node2.HasChildNodes)\n            return false;\n\n        if (node1.HasChildNodes)\n        {\n            var enumerator1 = node1.ChildNodes.GetEnumerator();\n            var enumerator2 = node2.ChildNodes.GetEnumerator();\n\n            while (enumerator1.MoveNext() && enumerator2.MoveNext())\n            {\n                XmlNode childNode1 = (XmlNode)enumerator1.Current;\n                XmlNode childNode2 = (XmlNode)enumerator2.Current;\n\n                if (!AreEqual(childNode1, childNode2))\n                    return false;\n            }\n\n            // One node has more children than the other\n            if (enumerator1.MoveNext() || enumerator2.MoveNext())\n                return false;\n        }\n\n        return true;\n    }\n\n    private bool AreAttributesEqual(XmlAttributeCollection attrs1, XmlAttributeCollection attrs2)\n    {\n        if (attrs1 == null && attrs2 == null) return true;\n        if (attrs1 == null || attrs2 == null || attrs1.Count != attrs2.Count)\n            return false;\n\n        var attrDict = new Dictionary<string, string>();\n\n        foreach (XmlAttribute attr in attrs1)\n        {\n            attrDict[attr.Name] = attr.Value;\n        }\n\n        foreach (XmlAttribute attr in attrs2)\n        {\n            if (!attrDict.ContainsKey(attr.Name) || attrDict[attr.Name] != attr.Value)\n                return false;\n        }\n\n        return true;\n    }\n}\n\npublic interface IXmlComparer<T>\n{\n    bool AreEqual(T node1, T node2);\n}