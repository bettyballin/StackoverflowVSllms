public abstract class RepositoryBase<T> where T : IIdentifiableEntity, class\n{\n    protected Table<T> _table;\n    protected Action<T, T> mapAction;\n    protected Func<T, IEnumerable<string>> ruleViolationsFunc;\n\n    public RepositoryBase(Table<T> t, Action<T, T> mapA, Func<T, IEnumerable<string>> ruleV)\n    {\n        _table = t;\n        mapAction = mapA ?? throw new ArgumentNullException(nameof(mapA));\n        ruleViolationsFunc = ruleV ?? throw new ArgumentNullException(nameof(ruleV));\n    }\n\n    public virtual void Update(T item)\n    {\n        var errors = ruleViolationsFunc(item);\n        if (errors.Any())\n            throw new RuleException(errors);\n\n        T dbItem = _table.SingleOrDefault(n => n.Id == item.Id);\n        mapAction(dbItem, item);\n\n        _table.Context.SubmitChanges();\n    }\n\n    public virtual T Get(int id)\n    {\n        return _table.SingleOrDefault(n => n.Id == id);\n    }\n}