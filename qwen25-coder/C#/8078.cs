using System;\nusing System.Management;\n\nclass DiskStatusChecker\n{\n    public static void Main()\n    {\n        var drives = GetPhysicalDiskDrives();\n\n        foreach (var drive in drives)\n        {\n            Console.WriteLine($"Drive {drive.DeviceID} - Status: ");\n            \n            try\n            {\n                var smartData = GetSmartAttributes(drive.DeviceInstanceID);\n                \n                // Display or process the SMART data here.\n                // You might need to parse specific attributes for power state information.\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"Failed to retrieve SMART data: {ex.Message}");\n            }\n        }\n    }\n\n    private static ManagementObjectCollection GetPhysicalDiskDrives()\n    {\n        var searcher = new ManagementObjectSearcher("SELECT * FROM Win32_DiskDrive");\n        return searcher.Get();\n    }\n\n    private static ManagementBaseObject GetSmartAttributes(string deviceInstanceId)\n    {\n        var wmiDevicePath = $"Win32_PnPEntity.DeviceID=\"{deviceInstanceId}\"";\n        using (var drive = new ManagementObject(wmiDevicePath))\n        {\n            // MSStorageDriver_ATAPISmartData is not directly accessible via WMI in this manner.\n            // Instead, you would typically use a third-party library or call out to a utility\n            // like smartctl from the command line if you need full SMART access.\n\n            // This part of the code does not retrieve SMART data directly due to limitations in WMI access.\n            return null; // Placeholder for actual logic to fetch SMART attributes.\n        }\n    }\n}