using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\npublic class CustomColorDialogForm : Form\n{\n    private ColorDialog colorDialog1 = new ColorDialog();\n\n    public CustomColorDialogForm()\n    {\n        InitializeComponents();\n        \n        // Set up the Color Dialog to show custom colors\n        colorDialog1.AllowFullOpen = true;\n        colorDialog1.AnyColor = true;\n        colorDialog1.SolidColorOnly = false;\n\n        // Subscribe to the ColorChanged event\n        colorDialog1.ColorChanged += new EventHandler(ColorDialog_ColorChanged);\n    }\n\n    private void InitializeComponents()\n    {\n        Button button = new Button();\n        button.Text = "Select Color";\n        button.Click += new EventHandler(button_Click);\n        this.Controls.Add(button);\n    }\n\n    private void button_Click(object sender, EventArgs e)\n    {\n        colorDialog1.ShowDialog(this);\n    }\n\n    private void ColorDialog_ColorChanged(object sender, EventArgs e)\n    {\n        // Check if the selected color is a custom color\n        if (IsCustomColor(colorDialog1.Color))\n        {\n            MessageBox.Show("Custom color changed to: " + colorDialog1.Color.ToArgb());\n        }\n    }\n\n    private bool IsCustomColor(Color color)\n    {\n        // Implement logic to check if the color is in the list of custom colors\n        // For simplicity, this example assumes any non-standard color could be a custom one.\n        return !color.IsSystemColor;\n    }\n\n    [STAThread]\n    static void Main()\n    {\n        Application.EnableVisualStyles();\n        Application.SetCompatibleTextRenderingDefault(false);\n        Application.Run(new CustomColorDialogForm());\n    }\n}