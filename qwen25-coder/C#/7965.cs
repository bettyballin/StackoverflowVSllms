using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing System.ComponentModel.Composition.Hosting;\n\nclass Program\n{\n    static void Main()\n    {\n        // Create a catalog and add directory of assemblies\n        var catalog = new AggregateCatalog();\n        catalog.Catalogs.Add(new DirectoryCatalog(@"C:\Path\To\Your\Folder"));\n\n        // Create a composition container with the catalog\n        using (var container = new CompositionContainer(catalog))\n        {\n            // Get all export definitions from the parts in the catalog\n            var exportDefinitions = container.GetExportDefinitions().ToList();\n\n            HashSet<Assembly> loadedAssemblies = new HashSet<Assembly>();\n            \n            foreach (var ed in exportDefinitions)\n            {\n                var partDef = ((ExportDefinition)ed).Metadata["ExportingMember"].GetCustomAttributesData()[0].ConstructorArguments[0]\n                    .Value as System.ComponentModel.Composition.Primitives.ComposablePartDefinition;\n\n                if (partDef != null && partDef.DeclaringType is Type t)\n                {\n                    loadedAssemblies.Add(t.Assembly);\n                }\n            }\n\n            foreach (var assembly in loadedAssemblies)\n            {\n                Console.WriteLine($"Assembly: {assembly.GetName().Name}, Version: {assembly.GetName().Version}");\n                var fileVersion = FileVersionInfo.GetVersionInfo(assembly.Location).FileVersion;\n                Console.WriteLine($"File Version: {fileVersion}");\n                var copyright = assembly.GetCustomAttribute<AssemblyCopyrightAttribute>()?.Copyright;\n                Console.WriteLine($"Copyright: {copyright}");\n            }\n        }\n    }\n}