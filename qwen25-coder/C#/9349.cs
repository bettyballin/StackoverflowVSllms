using System;\nusing System.ComponentModel.Composition;\nusing System.ComponentModel.Composition.Hosting;\nusing System.Reflection;\nusing Rhino.Mocks;\n\n// Define your imports and exports\npublic interface IMyImport1 { }\npublic interface IMyImport2 { }\npublic interface IMyImport3 { }\n\n[Export]\npublic class MyComponent\n{\n    [Import("MyImport1")]\n    private IMyImport1 _import1;\n    \n    [Import("MyImport2")]\n    private IMyImport2 _import2;\n    \n    [Import("MyImport3")]\n    private IMyImport3 _import3;\n\n    // Public method for demonstration purposes\n    public void DoWork()\n    {\n        Console.WriteLine("Doing work...");\n    }\n}\n\npublic class MyComponentTests\n{\n    [Test]\n    public void TestDoWork()\n    {\n        // Arrange: Create mock objects\n        var mockImport1 = MockRepository.GenerateMock<IMyImport1>();\n        var mockImport2 = MockRepository.GenerateMock<IMyImport2>();\n        var mockImport3 = MockRepository.GenerateMock<IMyImport3>();\n\n        // Arrange: Create and configure container for a composition test\n        var catalog = new AggregateCatalog();\n        catalog.Catalogs.Add(new TypeCatalog(typeof(MyComponent)));\n        \n        // Register mocks as exports in the catalog\n        catalog.Catalogs.Add(new TypeCatalog(\n            typeof(MockExportProvider<IMyImport1>),\n            typeof(MockExportProvider<IMyImport2>),\n            typeof(MockExportProvider<IMyImport3>)));\n\n        var container = new CompositionContainer(catalog);\n        var provider = new ExportProvider();\n        container.ComposeParts(provider);\n\n        // Arrange: Provide mock instances to the export providers\n        ((MockExportProvider<IMyImport1>)provider).SetInstance(mockImport1, "MyImport1");\n        ((MockExportProvider<IMyImport2>)provider).SetInstance(mockImport2, "MyImport2");\n        ((MockExportProvider<IMyImport3>)provider).SetInstance(mockImport3, "MyImport3");\n\n        // Act: Create and compose the component to be tested\n        var myComponent = new MyComponent();\n        container.ComposeParts(myComponent);\n\n        // Assert: Perform your assertions here\n        myComponent.DoWork();  // Example call to test functionality\n    }\n}\n\n// A simple export provider that can be used to provide mock instances\npublic class MockExportProvider<T> : ExportProvider\n{\n    private Lazy<T> _exportedInstance;\n    private string _metadata;\n\n    public void SetInstance(T instance, string metadata)\n    {\n        _exportedInstance = new Lazy<T>(() => instance);\n        _metadata = metadata;\n    }\n\n    protected override IEnumerable<Export> GetExportsCore(ImportDefinition definition, AtomicComposition atomicComposition)\n    {\n        if (_exportedInstance != null && definition.MetadataConstraints.First().Constraint(new KeyValuePair<string, object>("ContractName", typeof(T).FullName)).Equals(true))\n        {\n            yield return new Export(\n                () => _exportedInstance.Value,\n                new Dictionary<string, object>() { { "ExportTypeIdentity", AttributedModelServices.GetTypeIdentity(typeof(T)) }, { "ContractName", typeof(T).FullName }, { "Metadata", _metadata } }\n            );\n        }\n    }\n}