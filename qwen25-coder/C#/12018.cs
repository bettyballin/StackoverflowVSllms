using System;\nusing System.IO;\nusing System.Net;\nusing System.Web;\n\npublic partial class Proxy : System.Web.UI.Page\n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        string targetUrl = "http://remote-server/your-resource"; // Point to the resource on the remote server\n\n        WebRequest request = HttpWebRequest.Create(targetUrl);\n        request.Credentials = new NetworkCredential("username", "password"); // Your credentials\n        request.Method = Request.HttpMethod;\n\n        CopyProxyHeaders(Request, ref request);\n\n        if (request.Method == "POST")\n            WritePostData(request);\n\n        using (WebResponse response = request.GetResponse())\n        {\n            CopyProxyHeaders(response, Response);\n            Response.StatusCode = (int)((HttpWebResponse)response).StatusCode;\n            Stream streamResponse = response.GetResponseStream();\n            streamResponse.CopyTo(Response.OutputStream);\n        }\n    }\n\n    private void WritePostData(WebRequest request)\n    {\n        if (!string.IsNullOrEmpty(Request.ContentType))\n            request.ContentType = Request.ContentType;\n\n        byte[] buffer = new byte[Request.InputStream.Length];\n        Request.InputStream.Read(buffer, 0, buffer.Length);\n\n        ((HttpWebRequest)request).ContentLength = buffer.Length;\n        using (Stream streamResource = request.GetRequestStream())\n        {\n            streamResource.Write(buffer, 0, buffer.Length);\n        }\n    }\n\n    private void CopyProxyHeaders(HttpRequest source, ref WebRequest dest)\n    {\n        foreach (string header in source.Headers.Keys)\n        {\n            if (!dest.Headers.AllKeys.Contains(header.ToLower()) // prevent duplicate headers\n                && !hopByHopHeaders.Contains(header))\n            {\n                dest.Headers[header] = source.Headers[header];\n            }\n        }\n    }\n\n    private void CopyProxyHeaders(WebResponse response, HttpResponse destination)\n    {\n        foreach (string header in response.Headers.Keys)\n        {\n            if (!hopByHopHeaders.Contains(header))\n            {\n                destination.Headers[header] = response.Headers[header];\n            }\n        }\n    }\n\n    // Common headers from HTTP/1.1 spec with a few others added\n    static HashSet<string> hopByHopHeaders = new HashSet<string>()\n    {\n        "Connection", "Keep-Alive", "Proxy-Authenticate",\n        "Proxy-Authorization", "TE", "Trailers", "Transfer-Encoding",\n        "Upgrade"\n    };\n}