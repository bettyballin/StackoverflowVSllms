public partial class MyUserControl : UserControl\n{\n    private MyBizObject myBizObject;\n\n    public MyUserControl()\n    {\n        InitializeComponent();\n        \n        // Initialize the biz object\n        myBizObject = new MyBizObject();\n\n        // Do not bind the ErrorProvider automatically\n    }\n\n    private void btnSave_Click(object sender, EventArgs e)\n    {   \n        // Clear previous errors\n        errorProvider1.Clear();\n\n        // Perform validation manually\n        bool isValid = ValidateMyBizObject(myBizObject);\n        \n        if (isValid)\n        {\n            myBizObject.Save();\n            MessageBox.Show("Data saved successfully!");\n        }\n        else\n        {\n            MessageBox.Show("Please correct the errors before saving.");\n        }\n    }\n\n    private bool ValidateMyBizObject(MyBizObject bizObject)\n    {\n        // Implement your validation logic here\n        // Set error messages using ErrorProvider if validation fails\n        bool isValid = true;\n\n        if (string.IsNullOrEmpty(bizObject.SomeProperty))\n        {\n            errorProvider1.SetError(txtSomeField, "This field is required.");\n            isValid = false;\n        }\n\n        return isValid;\n    }\n}\n\npublic class MyBizObject : IDataErrorInfo\n{\n    public string SomeProperty { get; set; }\n\n    public string Error => null;\n\n    public string this[string columnName]\n    {\n        get\n        {\n            // This method is only called when bound to the ErrorProvider automatically.\n            // Since we are not using it, you can leave it empty or implement as needed.\n            return null;\n        }\n    }\n\n    public void Save()\n    {\n        // Save logic here\n    }\n}