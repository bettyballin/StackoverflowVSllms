using System;\nusing System.Reflection;\nusing System.Security;\nusing System.Security.Permissions;\n\nclass Program\n{\n    public static void Main()\n    {\n        // Create a new AppDomain setup\n        AppDomainSetup domainSetup = new AppDomainSetup();\n        domainSetup.ApplicationBase = AppDomain.CurrentDomain.BaseDirectory;\n\n        // Create a new AppDomain with no permissions (untrusted)\n        PermissionSet restrictedPermissions = new PermissionSet(PermissionState.None);\n        restrictedPermissions.AddPermission(new SecurityPermission(SecurityPermissionFlag.Execution));\n        restrictedPermissions.AddPermission(new FileIOPermission(FileIOPermissionAccess.NoAccess, @"C:\"));\n\n        // Create the AppDomain\n        AppDomain untrustedAppDomain = AppDomain.CreateDomain("Untrusted", null, domainSetup);\n        untrustedAppDomain.SetData("APP_CONFIG_FILE", AppDomain.CurrentDomain.GetData("APP_CONFIG_FILE"));\n\n        try\n        {\n            // Execute your third-party code in the new AppDomain\n            string assemblyPath = "path_to_your_third_party_assembly.dll";\n            string typeName = "YourNamespace.YourType";\n            untrustedAppDomain.DoCallBack(() =>\n            {\n                Assembly assembly = Assembly.LoadFrom(assemblyPath);\n                Type type = assembly.GetType(typeName);\n                object instance = Activator.CreateInstance(type);\n                MethodInfo method = type.GetMethod("Run");\n                method.Invoke(instance, null);\n            });\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine("An error occurred: " + ex.Message);\n        }\n        finally\n        {\n            // Unload the untrusted AppDomain when done\n            AppDomain.Unload(untrustedAppDomain);\n        }\n    }\n}