using System;\nusing Microsoft.SqlServer.TransactSql.ScriptDom;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        string sqlQuery = "SELECT * FROM Users WHERE Age > 30";\n\n        // Create a parser and set options.\n        usingvar tsParser = new TSql150Parser(false);\n        \n        ScriptTokenSource tokenStream;\n        var parseErrors = new List<ParseError>();\n\n        // Parse the provided statement\n        tsqlAst = (TSqlScript)tsParser.Parse(new StringReader(sqlQuery), out tokenStream, ref parseErrors);\n\n        if (parseErrors.Count == 0)\n        {\n            PrintTree(tsqlAst);\n        }\n        else\n        {\n            Console.WriteLine("There were errors during parsing:");\n            foreach(var err in parseErrors)\n                Console.WriteLine($"Error: {err.Message}");\n        }\n    }\n\n    private static void PrintTree(TSqlFragment fragment, int level = 0)\n    {\n        // Simple recursive print of all nodes and their types\n        string indent = new string(' ', level * 2);\n        Console.WriteLine($"{indent}Node Type: {fragment.GetType().Name}");\n\n        if (fragment is TSqlScript script)\n        {\n            foreach(var batch in script.Batches)\n            {\n                PrintTree(batch, level + 1);\n            }\n        } else if (fragment is TSqlBatch batch)\n        {\n            foreach(var statement in batch.Statements)\n            {\n                PrintTree(statement, level + 1);\n            }\n        }\n        // You can extend this to handle specific node types and their properties\n    }\n}