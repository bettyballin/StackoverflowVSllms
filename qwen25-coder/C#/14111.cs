using System;\nusing System.Configuration;\n\nclass Program\n{\n    static void Main()\n    {\n        string xmlConfig = @"\n            <?xml version='1.0' encoding='utf-8' ?>\n            <configuration>\n                <configSections>\n                    <section name='mycustomconfigsection' type='YourNamespace.MyCustomConfigSection, YourAssembly'/>\n                </configSections>\n                <mycustomconfigsection propertyOne='value1' propertyTwo='value2'/>\n            </configuration>";\n\n        var tempFile = System.IO.Path.GetTempFileName() + ".config";\n        System.IO.File.WriteAllText(tempFile, xmlConfig);\n\n        ExeConfigurationFileMap fileMap = new ExeConfigurationFileMap { ExeConfigFilename = tempFile };\n        Configuration config = ConfigurationManager.OpenMappedExeConfiguration(fileMap, ConfigurationUserLevel.None);\n        \n        MyCustomConfigSection section = (MyCustomConfigSection)config.GetSection("mycustomconfigsection");\n        \n        Console.WriteLine(section.PropertyOne); // Output: value1\n        Console.WriteLine(section.PropertyTwo); // Output: value2\n\n        System.IO.File.Delete(tempFile);\n    }\n}\n\n// Example of a custom configuration section class\npublic class MyCustomConfigSection : ConfigurationSection\n{\n    [ConfigurationProperty("propertyOne", DefaultValue = "defaultOne", IsRequired = true)]\n    public string PropertyOne\n    {\n        get => (string)this["propertyOne"];\n        set => this["propertyOne"] = value;\n    }\n\n    [ConfigurationProperty("propertyTwo", DefaultValue = "defaultTwo", IsRequired = true)]\n    public string PropertyTwo\n    {\n        get => (string)this["propertyTwo"];\n        set => this["propertyTwo"] = value;\n    }\n}