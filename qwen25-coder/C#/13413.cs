public class RepositoryBase<T> where T : class\n{\n    private readonly DataContext db;\n\n    public RepositoryBase(DataContext context)\n    {\n        db = context;\n    }\n\n    public IQueryable<T> SelectAll()\n    {\n        return db.GetTable<T>().AsQueryable<T>();\n    }\n\n    // Method to access views, assuming the view structure matches an entity type\n    public IQueryable<TView> GetView<TView>()\n    {\n        var tableAttribute = typeof(TView).GetCustomAttribute<TableAttribute>();\n        if (tableAttribute == null)\n            throw new InvalidOperationException("The specified view must have a Table attribute with the correct name.");\n\n        return db.GetTable<TView>().AsQueryable<TView>();\n    }\n}\n\n// Example usage\npublic class UserRepository : RepositoryBase<User>\n{\n    public IRepositoryBase<User> UserRepo { get; set; }\n\n    public UserProfile GetActiveUsers()\n    {\n        using (var context = new YourDataContext())\n        {\n            var repo = new RepositoryBase<User>(context);\n            var activeUsersView = repo.GetView<UserActive>();\n            // Process and return as needed\n        }\n    }\n}\n\n// User entity class\n[Table("User")] // Table mapping to a regular table\npublic class User\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n\n// UserActive entity class mapped to the view\n[Table("UsersActive")] // View mapping\npublic class UserActive\n{\n    public int Id { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n}