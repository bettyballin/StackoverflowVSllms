public partial class AsyncHandler : System.Web.UI.Page\n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        if (IsPostBack)\n            return;\n\n        // Start asynchronous operation to wait for new data\n        Page.AspCompatMode = true;\n        IAsyncResult result = BeginLongPoll(Request.QueryString["userId"], null, null);\n        AsyncManager.Parameters["result"] = result;\n        AsyncManager.OnEndRequest += new EventHandler(AsyncManager_OnEndRequest);\n    }\n\n    private IAsyncResult BeginLongPoll(string userId, AsyncCallback callback, object state)\n    {\n        // Create an asynchronous operation to poll for messages\n        return new PollingOperation(userId, callback, state).Start();\n    }\n\n    void AsyncManager_OnEndRequest(object sender, EventArgs e)\n    {\n        var result = (IAsyncResult)AsyncManager.Parameters["result"];\n        string response = EndLongPoll(result);\n\n        // Send the response back to the client\n        Response.ContentType = "application/json";\n        Response.Write(response);\n        Response.End();\n    }\n\n    private string EndLongPoll(IAsyncResult asyncResult)\n    {\n        var pollingOperation = (PollingOperation)asyncResult.AsyncState;\n        return pollingOperation.End();\n    }\n}\n\nclass PollingOperation : IAsyncResult\n{\n    private readonly string _userId;\n    private readonly AsyncCallback _callback;\n    private ManualResetEvent _waitHandle;\n    private bool _isCompleted;\n    private string _result;\n\n    public PollingOperation(string userId, AsyncCallback callback, object state)\n    {\n        _userId = userId;\n        _callback = callback;\n        AsyncState = state;\n    }\n\n    public void Start()\n    {\n        IAsyncResult result = new Action<object>(Poll).BeginInvoke(null, OnComplete, this);\n        return this;\n    }\n\n    private void Poll(object o)\n    {\n        // Simulate waiting for a message\n        ThreadPool.QueueUserWorkItem(delegate\n        {\n            _result = GetMessageForUser(_userId); // Method to get messages\n\n            lock (this)\n                _isCompleted = true;\n\n            _waitHandle.Set(); // Signal that the operation is complete\n            if (_callback != null)\n                _callback(this);\n        });\n    }\n\n    private void OnComplete(IAsyncResult ar)\n    {\n        var state = (PollingOperation)ar.AsyncState;\n        lock (state)\n            state._isCompleted = true;\n\n        state._waitHandle.Set();\n        if (state._callback != null)\n            state._callback(state);\n    }\n\n    public string GetMessageForUser(string userId)\n    {\n        // Simulated method to get message\n        return "{\"message\": \"Hello, user! You have a new notification.\"}";\n    }\n\n    public WaitHandle AsyncWaitHandle => _waitHandle ?? (_waitHandle = new ManualResetEvent(false));\n    public object AsyncState { get; }\n    public bool CompletedSynchronously => false;\n    public bool IsCompleted => _isCompleted;\n\n    public string End()\n    {\n        AsyncWaitHandle.WaitOne();\n        return _result;\n    }\n}