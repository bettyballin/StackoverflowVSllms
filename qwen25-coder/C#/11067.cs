using System;\nusing System.Runtime.InteropServices;\n\npublic static class MouseController\n{\n    // Import SendInput from User32.dll\n    [DllImport("user32.dll")] \n    private static extern uint SendInput(uint nInputs, INPUT[] pInputs, int cbSize);\n\n    [StructLayout(LayoutKind.Explicit)]\n    struct INPUT\n    {\n        [FieldOffset(0)]\n        public InputType type;\n        \n        [FieldOffset(4)]\n        public MOUSEINPUT mi;\n\n        // You would need to define KEYBDINPUT and HARDWAREINPUT similarly if needed.\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    struct MOUSEINPUT\n    {\n        public int dx;\n        public int dy;\n        public uint mouseData;\n        public MouseEventFlags dwFlags;\n        public uint time;\n        public IntPtr dwExtraInfo;\n    }\n\n    // Enumerations for mouse event types and flags\n    enum InputType : uint \n    { \n        Mouse, \n        Keyboard,\n        Hardware\n    }\n    \n    [Flags()]\n    enum MouseEventFlags : uint \n    {\n        Move = 0x1,\n        LeftDown = 0x2,\n        LeftUp = 0x4,\n        RightDown = 0x8,\n        RightUp = 0x10,\n        MiddleDown = 0x20,\n        MiddleUp = 0x40,\n        XDown = 0x80,\n        XUp = 0x100\n    }\n\n    public static void SendRightClick(int x, int y)\n    {\n        INPUT mouseInput = new INPUT();\n        mouseInput.type = InputType.Mouse;\n        mouseInput.mi.dx = x * (65535 / SystemInformation.PrimaryMonitorSize.Width);\n        mouseInput.mi.dy = y * (65535 / SystemInformation.PrimaryMonitorSize.Height);\n        mouseInput.mi.dwFlags = MouseEventFlags.RightDown;\n        \n        SendInput(1, new INPUT[] { mouseInput }, Marshal.SizeOf(mouseInput));\n        \n        mouseInput.mi.dwFlags = MouseEventFlags.RightUp; // release the button\n        \n        SendInput(1, new INPUT[] { mouseInput }, Marshal.SizeOf(mouseInput));\n    }\n}