using System;\nusing NCalc;\n\npublic class CustomExpressionEvaluator\n{\n    public bool Evaluate(string expression)\n    {\n        var e = new Expression(expression);\n\n        // Register custom functions (e.g., function1, function7, function90)\n        e.EvaluateFunction += delegate(string name, FunctionArgs args)\n        {\n            switch (name.ToLower())\n            {\n                case "function1":\n                    args.Result = EvaluateFunction1();\n                    break;\n                case "function7":\n                    args.Result = EvaluateFunction7();\n                    break;\n                // Add more cases for other functions\n                default:\n                    throw new ArgumentException("Unknown function: " + name);\n            }\n        };\n\n        // Evaluate expression and return result as boolean\n        var result = e.Evaluate();\n        return (bool)result;\n    }\n\n    private bool EvaluateFunction1()\n    {\n        // Implement your function logic here\n        return true; // Example return value\n    }\n\n    private bool EvaluateFunction7()\n    {\n        // Implement your function logic here\n        return false; // Example return value\n    }\n}\n\n// Usage\nclass Program\n{\n    static void Main()\n    {\n        var evaluator = new CustomExpressionEvaluator();\n        string expression = "([PART3]function1() AND [PART4]function7()) OR [PART2]function90()";\n        \n        bool result = evaluator.Evaluate(expression);\n        Console.WriteLine(result); // Output the evaluation result\n    }\n}