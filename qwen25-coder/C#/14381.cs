private static readonly object _sessionLock = new object();\n\npublic static IManSession GetSession(string serverName)\n{\n    lock (_sessionLock)\n    {\n        IManage.IManDMS dms = GetDMS();\n        // Check if a session already exists for the server name to avoid adding it again.\n        if (dms.Sessions[serverName] == null)\n        {\n            var s = dms.Sessions.Add(serverName);\n            s.TrustedLogin();\n            return s;\n        }\n        else\n        {\n            // If a session already exists, return that instead of creating a new one.\n            // Ensure the session is still valid and re-login if necessary.\n            var s = (IManage.IManSession)dms.Sessions[serverName];\n            return s;\n        }\n    }\n}\n\npublic static void ReleaseSession(IManage.IManDMS dms, IManage.IManSession session)\n{\n    lock (_sessionLock)\n    {\n        // Logout session safely within the lock.\n        if (session != null && !string.IsNullOrEmpty(session.SessionId))\n        {\n            session.Logout();\n            dms.Sessions.RemoveByObject(session);\n        }\n    }\n}\n\n// Usage\nIManage.IManSession session = GetSession("myServer");\ntry\n{\n    // Do something with the session object, like retrieve documents.\n}\nfinally\n{\n    ReleaseSession(GetDMS(), session);\n}