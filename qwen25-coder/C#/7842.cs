using System;\nusing System.Diagnostics;\n\npublic class SymbolLoaderCheck\n{\n    public static void Main()\n    {\n        Debugger.Launch(); // This will start the debugger if not already attached\n\n        foreach (ProcessModule module in Process.GetCurrentProcess().Modules)\n        {\n            Console.WriteLine($"Module: {module.FileName}");\n            // Check for symbols loaded by inspecting the symbol filename\n            if (!string.IsNullOrEmpty(module.ModuleName) && Path.HasExtension(module.FileName))\n                Console.WriteLine($"Symbols Loaded: {DiagHelper.AreSymbolsLoaded(module)}");\n        }\n    }\n}\n\n// Helper class to check if symbols are loaded for a module\npublic static class DiagHelper\n{\n    public static bool AreSymbolsLoaded(ProcessModule module)\n    {\n        // In practice, this would involve checking the symbol file (.PDB) against the module\n        // This is a simple placeholder function as actual implementation requires PDB inspection tools/api\n        return module.FileName.Contains(".dll");\n    }\n}