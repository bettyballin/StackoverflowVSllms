public bool AuthenticateUser(string username, string password)\n   {\n       if (IsInternalNetworkRequest())\n       {\n           // Use Windows Integrated Auth as set up in IIS\n           return true;\n       }\n       \n       if (username.Contains("\\"))\n       {\n           // Attempt AD Authentication\n           if (AuthenticateAgainstAD(username, password))\n           {\n               FormsAuthentication.SetAuthCookie(username, false);\n               return true;\n           } \n           else \n           {\n               // Optionally log the failure\n           }\n       }\n\n       // Fallback to SQL Membership Provider\n       var membershipProvider = Membership.Providers["AspNetSqlMembershipProvider"];\n       if (membershipProvider.ValidateUser(username, password))\n       {\n           FormsAuthentication.SetAuthCookie(username, false);\n           return true;\n       }\n\n       return false; // Authentication failed\n   }\n\n   private bool IsInternalNetworkRequest()\n   {\n       // Check for internal IP address or some other mechanism to identify internal requests\n       return HttpContext.Current.Request.IsLocal;\n   }\n\n   private bool AuthenticateAgainstAD(string username, string password)\n   {\n       using (var context = new PrincipalContext(ContextType.Domain))\n       {\n           return context.ValidateCredentials(username, password);\n       }\n   }