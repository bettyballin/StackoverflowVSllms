using DocumentFormat.OpenXml.Packaging;\nusing DocumentFormat.OpenXml.Spreadsheet;\n\npublic static void UpdateCellInSpreadsheet(string docName, string text, uint rowIndex, string columnName)\n{\n    using (SpreadsheetDocument spreadsheet = SpreadsheetDocument.Open(docName, true))\n    {\n        WorkbookPart workbookPart = spreadsheet.WorkbookPart;\n        Sheets sheets = workbookPart.Workbook.GetFirstChild<Sheets>();\n\n        // Assume you want to update the first sheet. You can modify this logic if needed.\n        Sheet sheet = sheets.Elements<Sheet>().First();\n\n        WorksheetPart worksheetPart = (WorksheetPart)workbookPart.GetPartById(sheet.Id);\n        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();\n\n        // Get the specific row by index\n        Row row;\n        if (!sheetData.Elements<Row>().Any(r => r.RowIndex == rowIndex))\n        {\n            row = new Row() { RowIndex = rowIndex };\n            sheetData.Append(row);\n        }\n        else\n        {\n            row = sheetData.Elements<Row>().First(r => r.RowIndex == rowIndex);\n        }\n\n        // Determine the column index based on the cell reference\n        uint columnIndex = GetColumnUIntFromName(columnName);\n\n        Cell cell;\n        if (!row.Elements<Cell>().Any(c => string.Compare(c.CellReference.Value, columnName + rowIndex, StringComparison.OrdinalIgnoreCase) == 0))\n        {\n            cell = new Cell() { CellReference = columnName + rowIndex };\n            row.Append(cell);\n        }\n        else\n        {\n            cell = row.Elements<Cell>().First(c => string.Compare(c.CellReference.Value, columnName + rowIndex, StringComparison.OrdinalIgnoreCase) == 0);\n        }\n\n        // Set the cell value\n        if (cell.HasChildren)\n        {\n            cell.RemoveAllChildren<Text>();\n        }\n        cell.AppendChild(new Text(text));\n        cell.DataType = new EnumValue<CellValues>(CellValues.String);\n\n        worksheetPart.Worksheet.Save();\n    }\n}\n\nstatic uint GetColumnUIntFromName(string name)\n{\n    uint result = 0;\n    for (int i = 0; i < name.Length; i++)\n    {\n        char letter = name[i];\n        uint cNumber = (uint)char.ToUpper(letter) - 'A' + 1;\n        result = result * 26 + cNumber;\n    }\n    return result;\n}