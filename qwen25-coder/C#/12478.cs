private TitleMatchResult doFuzzyMatch(String targetTitle)\n{\n    if (string.IsNullOrEmpty(targetTitle)) return null;\n\n    // Normalize the target title by converting to lower case\n    var normalizedTarget = NormalizeString(targetTitle);\n\n    // Remove unwanted characters and split into words\n    List<string> targetKeywords = SplitAndClean(normalizedTarget);\n\n    Dictionary<Title, float> scores = new Dictionary<Title, float>();\n\n    foreach (var sourceTitle in titles)\n    {\n        // Normalize and tokenize the source title\n        var normalizedSource = NormalizeString(sourceTitle.Name);\n        List<string> sourceKeywords = SplitAndClean(normalizedSource);\n\n        float totalScore = 0f;\n        int commonWordsCount = 0;\n\n        foreach (string keyw1 in targetKeywords)\n        {\n            float bestMatchScore = 0f;\n            bool foundExactMatch = false;\n\n            foreach (string keyw2 in sourceKeywords)\n            {\n                var score = CalculateSimilarity(keyw1, keyw2);\n\n                // Check for exact match\n                if (keyw1 == keyw2) foundExactMatch = true;\n\n                // Update best match score\n                bestMatchScore = Math.Max(bestMatchScore, score);\n            }\n\n            totalScore += bestMatchScore;\n            if (foundExactMatch) commonWordsCount++;\n        }\n\n        // Calculate weighted score\n        float exactWordBonus = commonWordsCount * 0.2f; // Example bonus for exact matches\n        float normalizedScore = totalScore / Math.Max(targetKeywords.Count, sourceKeywords.Count);\n        float finalScore = normalizedScore + exactWordBonus;\n\n        if (finalScore >= minimalScore && !sourceTitle.doIgnore(normalizedTarget))\n            scores[sourceTitle] = finalScore;\n    }\n\n    return FindBestMatch(scores);\n}\n\nprivate string NormalizeString(string input)\n{\n    // Convert to lower case\n    input = input.ToLowerInvariant();\n\n    // Remove punctuation and normalize whitespace\n    input = new string(input.Where(c => !Char.IsPunctuation(c)).ToArray());\n    input = Regex.Replace(input, @"\s+", " ").Trim(); // Replace multiple spaces with a single space\n\n    return input;\n}\n\nprivate List<string> SplitAndClean(string input)\n{\n    // Split on spaces and remove any empty entries\n    var words = input.Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);\n    words = Array.FindAll(words, w => !doIgnore(w)); // Remove ignored words\n\n    return new List<string>(words);\n}\n\nprivate float CalculateSimilarity(string s1, string s2)\n{\n    return StringMatching.StringMatching.CalculateSimilarity(s1, s2);\n}\n\nprivate TitleMatchResult FindBestMatch(Dictionary<Title, float> scores)\n{\n    if (scores.Count == 0) return null;\n\n    var bestScore = scores.Values.Max();\n    var bestTitle = scores.FirstOrDefault(x => x.Value == bestScore).Key;\n\n    return new TitleMatchResult(bestScore, bestTitle, MatchTechnique.FuzzyLogic);\n}