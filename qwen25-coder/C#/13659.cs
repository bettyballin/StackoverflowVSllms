using System;\nusing System.Data;\nusing System.IO;\nusing System.Text;\nusing CsvHelper;\nusing CsvHelper.Configuration;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var filePath = "data.csv";\n        using (var streamReader = new StreamReader(filePath))\n        using (var csvReader = new CsvReader(streamReader, CultureInfo.InvariantCulture))\n        {\n            // Read headers\n            using (var data = new DataTable())\n            {\n                foreach (string header in csvReader.GetFieldHeaders())\n                {\n                    data.Columns.Add(header);\n                }\n\n                // Infer data types - for simplicity, assume string type here.\n                StringBuilder createTableQuery = new StringBuilder("CREATE TABLE TableName (\n");\n                int i = 0;\n                foreach (DataColumn col in data.Columns)\n                {\n                    string sqlDataType = DetermineSqlTypeFromCSharpType(typeof(string)); // Change as needed\n                    createTableQuery.Append($"{col.ColumnName} {sqlDataType}");\n                    if (i < data.Columns.Count - 1) createTableQuery.Append(",\n");\n                    i++;\n                }\n                createTableQuery.Append(");\n");\n\n                Console.WriteLine("SQL Create Table Statement:");\n                Console.WriteLine(createTableQuery.ToString());\n\n                // Read rows into a DataTable\n                csvReader.Read();\n                csvReader.ReadHeader();\n                while (csvReader.Read())\n                {\n                    var row = new CsvDynamicRecord(csvReader.Context.Record, data.Columns);\n                    using (var dataRow = data.NewRow())\n                    {\n                        foreach (var field in data.Columns)\n                            dataRow[field] = csvReader.GetField(field.ColumnName);\n\n                        data.Rows.Add(dataRow);\n                    }\n                }\n\n                // Generate inserts\n                StringBuilder insertQueries = new StringBuilder();\n                foreach (DataRow row in data.Rows)\n                {\n                    var insertQuery = new StringBuilder("INSERT INTO TableName (");\n                    for (i = 0; i < data.Columns.Count; i++)\n                    {\n                        insertQuery.Append(data.Columns[i].ColumnName);\n                        if (i < data.Columns.Count - 1) insertQuery.Append(", ");\n                    }\n                    insertQuery.Append(") VALUES (");\n\n                    for (i = 0; i < row.ItemArray.Length; i++)\n                    {\n                        var value = row.ItemArray[i];\n                        if (value is string)\n                            insertQuery.AppendFormat("'{0}'", ((string)value).Replace("'", "''")); // Escape single quotes\n                        else\n                            insertQuery.Append(value.ToString());\n\n                        if (i < row.ItemArray.Length - 1) insertQuery.Append(", ");\n                    }\n                    insertQuery.Append(");\n");\n                    insertQueries.Append(insertQuery);\n                }\n\n                Console.WriteLine("\nSQL Insert Statements:");\n                Console.WriteLine(insertQueries.ToString());\n            }\n        }\n    }\n\n    private static string DetermineSqlTypeFromCSharpType(Type type)\n    {\n        if (type == typeof(string))\n        {\n            return "NVARCHAR(MAX)";\n        }\n        // Map other types as needed\n        throw new NotSupportedException($"SQL data type deduction for C# type '{type.Name}' not supported.");\n    }\n\n    private class CsvDynamicRecord\n    {\n        public CsvDynamicRecord(object[] values, DataColumnCollection columns)\n        {\n            Values = new Dictionary<string, object>();\n            for (int i = 0; i < columns.Count; i++)\n                Values[columns[i].ColumnName] = values[i];\n        }\n\n        public Dictionary<string, object> Values { get; }\n\n\n        public T GetField<T>(string csvHeaderName)\n        {\n            if (!Values.ContainsKey(csvHeaderName)) throw new NotSupportedException($"Column '{csvHeaderName}' not in data.");\n            \n            return (T)Convert.ChangeType(Values[csvHeaderName], typeof(T));\n        }\n    }\n}