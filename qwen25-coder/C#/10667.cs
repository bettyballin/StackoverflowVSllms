using System;\nusing System.Collections.Generic;\nusing SubSonic.Repositories;\n\n// Define the Posting class with a primary key attribute\npublic class Posting {\n    [SubSonicPrimaryKey]\n    public Guid InternalId { get; set; }\n    public string Title { get; set; }\n    public string Body { get; set; }\n    public DateTime? PostingDate { get; set; }\n\n    // Define the relationship with comments\n    private List<Comment> _comments;\n    [SubSonicRelationship(RelationAttribute.RelationType.ManyToOne, "PostingId", "InternalId")]\n    public List<Comment> Comments {\n        get {\n            if (_comments == null) {\n                // Lazy loading implementation\n                // Fetch comments for this posting only when needed\n                var repo = new ActiveRecordRepository<Comment>();\n                _comments = repo.GetList(x => x.PostingId == InternalId).ToList();\n            }\n            return _comments;\n        }\n        set { _comments = value; }\n    }\n}\n\n// Define the Comment class with a foreign key attribute\npublic class Comment {\n    [SubSonicPrimaryKey]\n    public Guid InternalId { get; set; }\n    public string Body { get; set; }\n\n    // Foreign key to Posting\n    [SubSonicForeignKey(typeof(Posting), "InternalId")]\n    public Guid PostingId { get; set; }\n\n    // Navigation property\n    private Posting _posting;\n    public virtual Posting Posting {\n        get {\n            if (_posting == null && !PostingId.Equals(Guid.Empty)) {\n                var repo = new ActiveRecordRepository<Posting>();\n                _posting = repo.Single(x => x.InternalId == PostingId);\n            }\n            return _posting;\n        }\n        set { \n            _posting = value; \n            PostingId = value?.InternalId ?? Guid.Empty; \n        }\n    }\n}