using System;\nusing System.Security;\nusing System.Security.Cryptography;\nusing System.Security.AccessControl;\nusing System.Security.Cryptography.X509Certificates;\nusing System.IO;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        string certPath = @"C:\path\to\your\certificate.pfx";\n        string password = "YourPfxPassword";\n\n        using (X509Store store = new X509Store(StoreName.My, StoreLocation.LocalMachine))\n        {\n            // Open the store with ReadWrite access\n            store.Open(OpenFlags.ReadWrite);\n\n            try\n            {\n                // Load the certificate into an X509Certificate2 object\n                using (X509Certificate2 certificate = new X509Certificate2(certPath, password,\n                    X509KeyStorageFlags.Exportable | X509KeyStorageFlags.MachineKeySet))\n                {\n                    // Add the certificate to the store\n                    store.Add(certificate);\n\n                    // Set permissions for the private key file\n                    string thumbprint = certificate.Thumbprint;\n                    string keyFilePath = FindPrivateKey("my", "localmachine", $"thumbprint={thumbprint}");\n                    if (!string.IsNullOrEmpty(keyFilePath))\n                    {\n                        AddAccessToCertificateKeyFile(keyFilePath);\n                    }\n                }\n\n                // Refresh and verify the store contents\n                store.Refresh();\n                foreach (X509Certificate2 cert in store.Certificates)\n                {\n                    Console.WriteLine(cert.Subject);\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine("An error occurred: " + ex.Message);\n            }\n            finally\n            {\n                // Close the store\n                store.Close();\n            }\n        }\n\n        Console.ReadLine();\n    }\n\n    private static string FindPrivateKey(string storeName, string storeLocation, string thumbprint)\n    {\n        ProcessStartInfo processInfo = new ProcessStartInfo("findstr", $"/R /C:\"{thumbprint}\" \"{Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles)}/Windows NT/Accessories/findstr.exe\"")\n        {\n            RedirectStandardOutput = true,\n            UseShellExecute = false\n        };\n\n        string findCommand = $"certutil -store {storeLocation}\\\\{storeName} \"{thumbprint}\"";\n        ProcessStartInfo searchProcessInfo = new ProcessStartInfo("cmd", $"/c {findCommand}")\n        {\n            RedirectStandardOutput = true,\n            UseShellExecute = false\n        };\n\n        using (Process searchProcess = new Process { StartInfo = searchProcessInfo })\n        using (StreamReader reader = searchProcess.StandardOutput)\n        {\n            searchProcess.Start();\n            while (!searchProcess.HasExited) { }\n            string output = reader.ReadToEnd();\n\n            // Extract the private key file path from the certutil output\n            int index = output.IndexOf("Private Key:");\n            if (index == -1) return null;\n            string privateKeyLine = output.Substring(index);\n            string[] parts = privateKeyLine.Split('|');\n            foreach (string part in parts)\n            {\n                if (part.Trim().Contains("\\"))\n                    return part.Trim();\n            }\n        }\n\n        return null;\n    }\n\n    private static void AddAccessToCertificateKeyFile(string keyFilePath)\n    {\n        FileInfo fiCertPrivateKey = new FileInfo(keyFilePath);\n\n        // Get the current security settings\n        FileSecurity fsCertPrivateKey = fiCertPrivateKey.GetAccessControl(AccessControlSections.Access);\n\n        // Create a new rule granting the current user read access.\n        FileSystemAccessRule accRule = new FileSystemAccessRule(\n            WindowsIdentity.GetCurrent().Name,\n            FileSystemRights.ReadKey,\n            InheritanceFlags.None,\n            PropagationFlags.NoPropagateInherit,\n            AccessControlType.Allow);\n\n        // Add the access control entry to the security settings.\n        fsCertPrivateKey.AddAccessRule(accRule);\n        \n        // Set the new access settings.\n        fiCertPrivateKey.SetAccessControl(fsCertPrivateKey);\n    }\n}