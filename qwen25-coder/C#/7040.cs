using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.EntityFrameworkCore;\n\npublic class AppDbContext : DbContext\n{\n    public DbSet<UserSetting> UserSettings { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        optionsBuilder.UseSqlServer("YourConnectionStringHere");\n    }\n}\n\npublic class UserSetting\n{\n    public int Id { get; set; }\n    public string Key { get; set; }\n    public string Value { get; set; }\n    public int UserId { get; set; }\n}\n\npublic class SettingsManager\n{\n    private readonly AppDbContext _dbContext;\n    private static readonly Dictionary<string, string> SystemSettings = new Dictionary<string, string>\n    {\n        // Load system settings from a config file or similar source\n        {"Theme", "Dark"},\n        {"Language", "English"}\n    };\n\n    public SettingsManager(AppDbContext dbContext)\n    {\n        _dbContext = dbContext;\n    }\n\n    public Dictionary<string, string> GetUserSettings(int userId)\n    {\n        var userSettingsDict = _dbContext.UserSettings\n            .Where(setting => setting.UserId == userId)\n            .ToDictionary(s => s.Key, s => s.Value);\n\n        // Merge system settings with user-specific settings\n        return SystemSettings.Concat(userSettingsDict)\n            .GroupBy(d => d.Key)\n            .ToDictionary(kvp => kvp.Key, kvp => kvp.Last().Value); // User settings override system settings\n    }\n}