public interface IRepository<T>\n{\n    T GetById(long id);\n    void Add(T entity);\n    void Delete(T entity);\n}\n\npublic class CustomerRepository : IRepository<Customer>\n{\n    private readonly ApplicationDbContext _context;\n\n    public CustomerRepository(ApplicationDbContext context)\n    {\n        _context = context;\n    }\n\n    public Customer GetById(long id) => _context.Customers.Find(id);\n\n    public void Add(Customer entity) => _context.Customers.Add(entity);\n\n    public void Delete(Customer entity) => _context.Customers.Remove(entity);\n}\n\npublic interface IUnitOfWork : IDisposable\n{\n    IRepository<Customer> Customers { get; }\n    void Save();\n}\n\npublic class UnitOfWork : IUnitOfWork\n{\n    private readonly ApplicationDbContext _context;\n    private IRepository<Customer> _customerRepository;\n\n    public UnitOfWork(ApplicationDbContext context)\n    {\n        _context = context;\n    }\n\n    public IRepository<Customer> Customers => _customerRepository ??= new CustomerRepository(_context);\n\n    public void Save()\n    {\n        _context.SaveChanges();\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        if (disposing)\n            _context.Dispose();\n\n        disposedValue = true;\n    }\n\n    private bool disposedValue;\n\n    public void Dispose()\n    {\n        Dispose(disposing: true);\n        GC.SuppressFinalize(this);\n    }\n}