using System;\nusing System.Collections.Generic;\n\npublic class CustomClass : IDictionary<string, object>\n{\n    private Dictionary<string, string> _data = new Dictionary<string, string>();\n\n    public string Item\n    {\n        get => _data["Item"];\n        set => _data["Item"] = value;\n    }\n\n    // Implementing the IDictionary interface\n\n    public void Add(string key, object value)\n    {\n        if (key != "Item")\n            throw new ArgumentException("Only 'Item' is a valid key.");\n\n        _data[key] = (string)value;\n    }\n\n    public bool ContainsKey(string key) => _data.ContainsKey(key);\n\n    public ICollection<string> Keys => _data.Keys;\n\n    public bool Remove(string key)\n    {\n        if (key != "Item")\n            return false;\n\n        return _data.Remove(key);\n    }\n\n    public bool TryGetValue(string key, out object value)\n    {\n        if (_data.TryGetValue(key, out string result))\n        {\n            value = result;\n            return true;\n        }\n\n        value = null;\n        return false;\n    }\n\n    public ICollection<object> Values => Array.AsReadOnly(_data.Values.ToArray()).Cast<object>().ToArray();\n\n    public object this[string key]\n    {\n        get => _data[key];\n        set\n        {\n            if (key != "Item")\n                throw new ArgumentException("Only 'Item' is a valid key.");\n\n            _data[key] = (string)value;\n        }\n    }\n\n    public void Add(KeyValuePair<string, object> item)\n    {\n        if (item.Key != "Item")\n            throw new ArgumentException("Only 'Item' is a valid key.");\n\n        _data[item.Key] = (string)item.Value;\n    }\n\n    public void Clear() => _data.Clear();\n\n    public bool Contains(KeyValuePair<string, object> item) =>\n        item.Key == "Item" && _data.ContainsKey(item.Key) && _data[item.Key] == (string)item.Value;\n\n    public void CopyTo(KeyValuePair<string, object>[] array, int arrayIndex)\n    {\n        if (array == null || (arrayIndex < 0 || arrayIndex >= array.Length))\n            throw new ArgumentException("Invalid array or index.");\n\n        foreach (var kvp in _data)\n            array[arrayIndex++] = new KeyValuePair<string, object>(kvp.Key, kvp.Value);\n    }\n\n    public int Count => _data.Count;\n\n    public bool IsReadOnly => false;\n\n    public IEnumerator<KeyValuePair<string, object>> GetEnumerator()\n    {\n        return ((IEnumerable<KeyValuePair<string, string>>)_data).GetEnumerator();\n    }\n\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()\n    {\n        return GetEnumerator();\n    }\n\n    public bool Remove(KeyValuePair<string, object> item)\n    {\n        if (item.Key != "Item" || !_data.ContainsKey(item.Key) || _data[item.Key] != (string)item.Value)\n            return false;\n\n        return _data.Remove(item.Key);\n    }\n}