public class Global : HttpApplication\n{\n    protected void Application_AcquireRequestState(object sender, EventArgs e)\n    {\n        if (HttpContext.Current != null && HttpContext.Current.Request.IsAuthenticated)\n        {\n            string host = HttpContext.Current.Request.Host.ToLower();\n            \n            // Define your connection strings based on the domain\n            var connectionStringMap = new Dictionary<string, string>\n            {\n                { "www.domain1.com", "YourConnectionStringForDb1" },\n                { "www.domain2.com", "YourConnectionStringForDb2" }\n                // Add more domains and connections as necessary\n            };\n\n            if (connectionStringMap.TryGetValue(host, out string connectionString))\n            {\n                // Set the connection string for SQL Server session state\n                var sqlStateSection = ConfigurationManager.GetSection("system.web/sessionState") as SessionStateSection;\n                \n                if (sqlStateSection != null)\n                {\n                    FieldInfo sqlConnectionStringField = typeof(SessionStateModule).GetField("_sqlConnectionString", BindingFlags.NonPublic | BindingFlags.Instance);\n                    string originalConnectionString = (string)sqlConnectionStringField.GetValue(Microsoft.Web.Infrastructure.DynamicModuleHelper.DynamicModuleUtility.RegisterModule(typeof(SessionStateModule)));\n\n                    SessionStateSection newSqlStateSection = (SessionStateSection)sqlStateSection.Clone();\n                    sqlConnectionStringField.SetValue(Microsoft.Web.Infrastructure.DynamicModuleHelper.DynamicModuleUtility.RegisterModule(typeof(SessionStateModule)), connectionString);\n                }\n            }\n        }\n    }\n}