using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class SecureEncryption\n{\n    public static (byte[] encryptedData, byte[] mac) EncryptData(string password, string data)\n    {\n        using var rfc2898DeriveBytes = new Rfc2898DeriveBytes(password, new byte[16], 10000);\n        using var aesAlg = Aes.Create();\n        aesAlg.Key = rfc2898DeriveBytes.GetBytes(aesAlg.KeySize / 8);\n        aesAlg.IV = rfc2898DeriveBytes.GetBytes(aesAlg.BlockSize / 8);\n\n        using var encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n        using var msEncrypt = new MemoryStream();\n        using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n        {\n            using var swEncrypt = new StreamWriter(csEncrypt);\n            swEncrypt.Write(data);\n        }\n        \n        byte[] encryptedData = msEncrypt.ToArray();\n\n        // Create HMAC\n        using var hmacSha256 = new HMACSHA256(aesAlg.Key);\n        byte[] mac = hmacSha256.ComputeHash(encryptedData);\n\n        return (encryptedData, mac);\n    }\n\n    public static string DecryptData(string password, byte[] encryptedData, byte[] storedMac)\n    {\n        using var rfc2898DeriveBytes = new Rfc2898DeriveBytes(password, new byte[16], 10000);\n        using var aesAlg = Aes.Create();\n        aesAlg.Key = rfc2898DeriveBytes.GetBytes(aesAlg.KeySize / 8);\n        aesAlg.IV = rfc2898DeriveBytes.GetBytes(aesAlg.BlockSize / 8);\n\n        // Verify HMAC\n        using var hmacSha256 = new HMACSHA256(aesAlg.Key);\n        byte[] computedMac = hmacSha256.ComputeHash(encryptedData);\n        if (!computedMac.SequenceEqual(storedMac))\n        {\n            throw new CryptographicException("Invalid password");\n        }\n\n        // Decrypt\n        using var decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);\n        using var msDecrypt = new MemoryStream(encryptedData);\n        using (var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n        {\n            using var srDecrypt = new StreamReader(csDecrypt);\n            return srDecrypt.ReadToEnd();\n        }\n    }\n}