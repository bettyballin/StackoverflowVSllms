using System;\nusing System.Runtime.InteropServices;\n\npublic class WindowHelper\n{\n    private const int SWP_NOMOVE = 0x0002; // Retains current position (ignores X and Y parameters)\n    private const int SWP_NOSIZE = 0x0001; // Retains current size (ignores cx and cy parameters)\n    private const uint HWND_TOPMOST = 0xFFFFFFFF;\n    private const uint HWND_NOTOPMOST= 0X1;\n\n    [DllImport("user32.dll", SetLastError = true)]\n    static extern bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int X, int Y, int cx, int cy, uint uFlags);\n\n    public static void MakeTopmost(IntPtr handleToMakeTopmost)\n    {\n        // Makes the window the topmost one\n        SetWindowPos(handleToMakeTopmost, (IntPtr)HWND_TOPMOST, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE);\n    }\n\n    public static void RemoveTopmost(IntPtr handleToRemoveTopmost)\n    {\n        // Removes the window from topmost state\n        SetWindowPos(handleToRemoveTopmost, (IntPtr)HWND_NOTOPMOST, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE);\n    }\n}\n\n// Usage:\n// Assuming you have IntPtr hwndForm for your .NET form and IntPtr hwndTargetApp for the target Win32 app.\nWindowHelper.MakeTopmost(hwndForm); // Make your form topmost\n// Optionally, handle events or timers to toggle this based on application focus or other logic.