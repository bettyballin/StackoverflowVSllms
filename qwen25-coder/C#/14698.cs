// Define an interface for your repository\npublic interface IUserRepository\n{\n    User GetUserById(int id);\n    void AddUser(User user);\n}\n\n// Implement the repository\npublic class UserRepository : IUserRepository\n{\n    private readonly string _connectionString;\n\n    public UserRepository(string connectionString)\n    {\n        _connectionString = connectionString;\n    }\n\n    // Encapsulate database access logic within this method\n    public User GetUserById(int id)\n    {\n        using (var connection = new SqlConnection(_connectionString))\n        {\n            var query = "SELECT * FROM Users WHERE Id = @Id";\n            return connection.QueryFirstOrDefault<User>(query, new { Id = id });\n        }\n    }\n\n    // Encapsulate database access logic within this method\n    public void AddUser(User user)\n    {\n        using (var connection = new SqlConnection(_connectionString))\n        {\n            var query = "INSERT INTO Users (Name, Email) VALUES (@Name, @Email)";\n            connection.Execute(query, user);\n        }\n    }\n}\n\n// Usage example in a service or controller\npublic class UserService\n{\n    private readonly IUserRepository _userRepository;\n\n    public UserService(IUserRepository userRepository)\n    {\n        _userRepository = userRepository;\n    }\n\n    public User GetUser(int id)\n    {\n        return _userRepository.GetUserById(id);\n    }\n\n    public void AddNewUser(User user)\n    {\n        _userRepository.AddUser(user);\n    }\n}\n\n// Dependency injection setup (e.g., in ASP.NET Core Startup.cs)\npublic void ConfigureServices(IServiceCollection services)\n{\n    var connectionString = Configuration.GetConnectionString("MyDatabase");\n    services.AddScoped<IUserRepository>(provider => new UserRepository(connectionString));\n    services.AddTransient<UserService>();\n}