public interface IFileSaver {\n    void SaveToFile(string data);\n}\n\n// Concrete implementations could be a text file saver, JSON file saver, etc.\npublic class TextFileSaver : IFileSaver {\n    public void SaveToFile(string data) {\n        // Logic to save as text file...\n    }\n}\n\npublic abstract class CADProcessorBase {\n    private readonly IFileSaver _fileSaver;\n\n    protected CADProcessorBase(IFileSaver fileSaver) {\n        _fileSaver = fileSaver;\n    }\n\n    public void ProcessAndSave(string cadData) {\n        var processedData = this.Process(cadData);\n        _fileSaver.SaveToFile(processedData);\n    }\n\n    protected abstract string Process(string data);\n}\n\n// Clients can extend CADProcessorBase with their custom processing logic\npublic class CustomCADProcessor : CADProcessorBase {\n    public CustomCADProcessor(IFileSaver fileSaver) \n        : base(fileSaver) {}\n\n    protected override string Process(string data) {\n        // Custom processing...\n        return "Processed:" + data;\n    }\n}