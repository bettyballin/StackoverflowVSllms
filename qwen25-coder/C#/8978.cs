// Define a DTO for Product\n[DataContract]\npublic class ProductDto\n{\n    [DataMember]\n    public int Id { get; set; }\n\n    [DataMember]\n    public string Name { get; set; }\n    \n    [DataMember]\n    public decimal Price { get; set; }\n}\n\n// Define a Criteria contract for filtering products\n[DataContract]\npublic class ProductCriteria\n{\n    [DataMember]\n    public string Name { get; set; }\n\n    [DataMember]\n    public decimal? MinPrice { get; set; }\n\n    [DataMember]\n    public decimal? MaxPrice { get; set; }\n}\n\n// WCF service contract\n[ServiceContract]\npublic interface IProductService\n{\n    [OperationContract]\n    List<ProductDto> GetAllProducts();\n\n    [OperationContract]\n    List<ProductDto> GetProductsByCriteria(ProductCriteria criteria);\n}\n\n// WCF service implementation\npublic class ProductService : IProductService\n{\n    private readonly ISessionFactory _sessionFactory;\n\n    public ProductService(ISessionFactory sessionFactory)\n    {\n        _sessionFactory = sessionFactory;\n    }\n\n    public List<ProductDto> GetAllProducts()\n    {\n        using var session = _sessionFactory.OpenSession();\n        return session.Query<Product>()\n                     .Select(p => new ProductDto { Id = p.Id, Name = p.Name, Price = p.Price })\n                     .ToList();\n    }\n\n    public List<ProductDto> GetProductsByCriteria(ProductCriteria criteria)\n    {\n        using var session = _sessionFactory.OpenSession();\n        var query = session.Query<Product>().AsQueryable();\n\n        if (!string.IsNullOrEmpty(criteria.Name))\n            query = query.Where(p => p.Name.Contains(criteria.Name));\n\n        if (criteria.MinPrice.HasValue)\n            query = query.Where(p => p.Price >= criteria.MinPrice.Value);\n\n        if (criteria.MaxPrice.HasValue)\n            query = query.Where(p => p.Price <= criteria.MaxPrice.Value);\n\n        return query.Select(p => new ProductDto { Id = p.Id, Name = p.Name, Price = p.Price })\n                    .ToList();\n    }\n}