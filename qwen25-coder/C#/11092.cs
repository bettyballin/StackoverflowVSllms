using System;\nusing System.Collections.Generic;\n\npublic class Comment {\n    public int ID { get; set; }\n    public int? ParentID { get; set; }\n    public string Text { get; set; }\n    public List<Comment> Children { get; set; } = new List<Comment>();\n}\n\nclass Program\n{\n    static void Main()\n    {\n        var comments = new List<Comment>\n        {\n            new Comment { ID = 1, ParentID = null, Text = "Blah" },\n            new Comment { ID = 2, ParentID = 1, Text = "Blah Blah" },\n            new Comment { ID = 3, ParentID = 2, Text = "Blah Blah" },\n            new Comment { ID = 4, ParentID = 3, Text = "Blah Blah" },\n            new Comment { ID = 5, ParentID = 2, Text = "Blah Blah" },\n            new Comment { ID = 6, ParentID = 1, Text = "Blah Blah" }\n        };\n\n        var commentTreeRoots = BuildCommentTree(comments);\n        DisplayComments(commentTreeRoots);\n    }\n\n    static List<Comment> BuildCommentTree(List<Comment> comments)\n    {\n        // Map of IDs to Comments\n        Dictionary<int, Comment> map = new Dictionary<int, Comment>();\n        \n        foreach (var comment in comments) \n            map[comment.ID] = comment;\n        \n        List<Comment> roots = new List<Comment>();\n\n        foreach (var comment in comments)\n        {\n            if(comment.ParentID == null) \n                roots.Add(comment);\n            else\n            {\n                Comment parentComment = map[comment.ParentID.Value];\n                parentComment.Children.Add(comment);\n            }\n        }\n\n        return roots;\n    }\n\n    static void DisplayComments(List<Comment> comments, int level = 0)\n    {\n        foreach (var comment in comments)\n        {\n            Console.WriteLine(new string(' ', level * 4) + "> " + comment.Text);\n            DisplayComments(comment.Children, level + 1);\n        }\n    }\n}