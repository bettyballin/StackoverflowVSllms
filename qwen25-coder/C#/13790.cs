public class MyViewModel : INotifyPropertyChanged, INotifyDataErrorInfo\n{\n    private ObservableCollection<string> _chosenItems;\n    public ObservableCollection<string> ChosenItems\n    {\n        get { return _chosenItems; }\n        set \n        { \n            if (_chosenItems != value)\n            {\n                _chosenItems = value;\n                OnPropertyChanged();\n                ValidateChosenItems();\n            }\n        }\n    }\n\n    private Dictionary<string, List<string>> _errorsByPropertyName = new Dictionary<string, List<string>>();\n\n    public IEnumerable GetErrors(string propertyName)\n    {\n        if (propertyName == null)\n            throw new ArgumentNullException("propertyName");\n\n        return _errorsByPropertyName.ContainsKey(propertyName) \n                ? _errorsByPropertyName[propertyName] : null;\n    }\n\n    public bool HasErrors\n    {\n        get { return _errorsByPropertyName.Count > 0; }\n    }\n\n    public event EventHandler<DataErrorsChangedEventArgs> ErrorsChanged;\n\n    protected void RaiseErrorsChanged(string propertyName)\n    {\n        if (ErrorsChanged != null)\n            ErrorsChanged(this, new DataErrorsChangedEventArgs(propertyName));\n    }\n\n    private void ValidateChosenItems()\n    {\n        _errorsByPropertyName.Remove(nameof(ChosenItems));\n\n        if (ChosenItems == null || ChosenItems.Count == 0)\n        {\n            AddError(nameof(ChosenItems), "At least one item must be selected.");\n        }\n\n        RaiseErrorsChanged(nameof(ChosenItems));\n    }\n\n    private void AddError(string propertyName, string error)\n    {\n        if (!_errorsByPropertyName.ContainsKey(propertyName))\n        {\n            _errorsByPropertyName[propertyName] = new List<string>();\n        }\n        if (!_errorsByPropertyName[propertyName].Contains(error))\n        {\n            _errorsByPropertyName[propertyName].Add(error);\n        }\n    }\n\n    protected void OnPropertyChanged([CallerMemberName] string propertyName = null)\n    {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n    }\n\n    public event PropertyChangedEventHandler PropertyChanged;\n}