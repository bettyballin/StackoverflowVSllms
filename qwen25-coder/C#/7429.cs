using System;\nusing System.IO;\nusing System.Runtime.InteropServices;\n\nclass Program\n{\n    [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Auto)]\n    private static extern bool GetFileInformationByHandle(IntPtr hFile, out WIN32_FILE_ATTRIBUTE_DATA data);\n\n    [StructLayout(LayoutKind.Sequential)]\n    struct WIN32_FILE_ATTRIBUTE_DATA\n    {\n        public uint dwFileAttributes;\n        public System.Runtime.InteropServices.ComTypes.FILETIME ftCreationTime;\n        public System.Runtime.InteropServices.ComTypes.FILETIME ftLastAccessTime;\n        public System.Runtime.InteropServices.ComTypes.FILETIME ftLastWriteTime;\n        public uint nFileSizeHigh;\n        public uint nFileSizeLow;\n        public uint dwReserved0;\n        public uint dwReserved1;\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]\n        public string cFileName;\n    }\n\n    private static WIN32_FILE_ATTRIBUTE_DATA GetFileAttributeData(string filename)\n    {\n        WIN32_FILE_ATTRIBUTE_DATA fileData;\n        using (FileStream fs = new FileStream(filename, FileMode.Open))\n        {\n            if (!GetFileInformationByHandle(fs.Handle, out fileData))\n                throw new System.ComponentModel.Win32Exception(Marshal.GetLastWin32Error());\n        }\n        return fileData;\n    }\n\n    static bool AreFilesSame(string path1, string path2)\n    {\n        var fi1 = GetFileAttributeData(path1);\n        var fi2 = GetFileAttributeData(path2);\n\n        // Compare the relevant data to determine if they are the same file\n        return (fi1.dwVolumeSerialNumber == fi2.dwVolumeSerialNumber &&\n                fi1.nFileIndexHigh == fi2.nFileIndexHigh &&\n                fi1.nFileIndexLow == fi2.nFileIndexLow);\n    }\n\n    static void Main()\n    {\n        string path1 = @"C:\path\to\your\file.txt";\n        string path2 = @"\\?\C:\path\to\your\file.txt";\n\n        bool areSame = AreFilesSame(path1, path2);\n\n        Console.WriteLine($"The files are the same: {areSame}");\n    }\n}