using System;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\n\npublic class PeerToPeerNode\n{\n    private const int DiscoveryPort = 12345;\n    private const int DataTransferPort = 12346;\n    private UdpClient discoveryUdpClient;\n    private TcpListener dataTCPListener;\n\n    public void Start()\n    {\n        // Start UDP listener for peer discovery\n        discoveryUdpClient = new UdpClient(DiscoveryPort);\n        discoveryUdpClient.BeginReceive(new AsyncCallback(DataReceivedUDP), null);\n\n        // Start TCP listener for data transfer\n        dataTCPListener = new TcpListener(IPAddress.Any, DataTransferPort);\n        dataTCPListener.Start();\n        dataTCPListener.BeginAcceptTcpClient(new AsyncCallback(AcceptConnection), null);\n\n        Console.WriteLine("P2P Node started. Press Enter to exit...");\n        Console.ReadLine();\n\n        discoveryUdpClient.Close();\n        dataTCPListener.Stop();\n    }\n\n    private void AcceptConnection(IAsyncResult ar)\n    {\n        TcpClient client = dataTCPListener.EndAcceptTcpClient(ar);\n        byte[] buffer = new byte[1024];\n        int bytesRead;\n\n        NetworkStream stream = client.GetStream();\n\n        while ((bytesRead = stream.Read(buffer, 0, buffer.Length)) != 0)\n        {\n            string receivedMessage = Encoding.UTF8.GetString(buffer, 0, bytesRead);\n            Console.WriteLine("Received: " + receivedMessage);\n\n            // Echo the data to the remote device.\n            byte[] messageBuffer = Encoding.UTF8.GetBytes(receivedMessage);\n            stream.Write(messageBuffer, 0, messageBuffer.Length);\n        }\n\n        client.Close();\n    }\n\n    private void DataReceivedUDP(IAsyncResult ar)\n    {\n        IPEndPoint remoteEndPoint = new IPEndPoint(IPAddress.Any, 0);\n        byte[] receivedBytes = discoveryUdpClient.EndReceive(ar, ref remoteEndPoint);\n\n        string receivedMessage = Encoding.UTF8.GetString(receivedBytes);\n        Console.WriteLine("Discovered peer: " + remoteEndPoint.ToString());\n\n        // Optionally respond to the discovery request or store the IP for future communication\n\n        // Continue listening\n        discoveryUdpClient.BeginReceive(new AsyncCallback(DataReceivedUDP), null);\n    }\n\n    public static void Main()\n    {\n        PeerToPeerNode node = new PeerToPeerNode();\n        node.Start();\n    }\n}