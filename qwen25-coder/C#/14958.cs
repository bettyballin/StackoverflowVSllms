using System;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\n\npublic class ComDllVersionChecker\n{\n    [DllImport("ole32.dll")]\n    private static extern int CLSIDFromProgID([MarshalAs(UnmanagedType.LPWStr)] string progId, out Guid clsid);\n\n    [DllImport("psapi.dll", CharSet = CharSet.Auto)]\n    private static extern uint GetModuleFileNameEx(IntPtr hProcess, IntPtr hModule, [Out] StringBuilder lpBaseName, [In] [MarshalAs(UnmanagedType.U4)] int nSize);\n\n    public static string GetComDllFilePath(string progId)\n    {\n        Guid clsid;\n        if (CLSIDFromProgID(progId, out clsid) != 0)\n        {\n            throw new ArgumentException("Invalid ProgID");\n        }\n\n        // Query the type information to get the handle\n        var type = Type.GetTypeFromCLSID(clsid);\n        if (type == null)\n        {\n            throw new Exception("Failed to get type from CLSID");\n        }\n\n        Process currentProcess = Process.GetCurrentProcess();\n        IntPtr hModule = Marshal.GetHINSTANCE(type.TypeHandle);\n\n        StringBuilder sb = new StringBuilder(1024);\n        GetModuleFileNameEx(currentProcess.Handle, hModule, sb, sb.Capacity);\n\n        return sb.ToString();\n    }\n\n    public static string GetFileVersion(string filePath)\n    {\n        FileVersionInfo fileVersionInfo = FileVersionInfo.GetVersionInfo(filePath);\n        return fileVersionInfo.ProductVersion;\n    }\n}\n\n// Usage\nstring progId = "Your.Com.ProgID";\nstring dllPath = ComDllVersionChecker.GetComDllFilePath(progId);\nstring version = ComDllVersionChecker.GetFileVersion(dllPath);