public class ApplicationUser : IdentityUser\n{\n    public int RoleId { get; set; }\n}\n\npublic class Role\n{\n    [Key]\n    public int Id { get; set; }\n    public string Name { get; set; }\n\n    // Hierarchical relationship\n    public int? ParentRoleId { get; set; }\n    [ForeignKey("ParentRoleId")]\n    public virtual Role ParentRole { get; set; }\n    public virtual ICollection<Role> ChildRoles { get; set; }\n\n    public virtual ICollection<Permission> Permissions { get; set; }\n}\n\npublic class Permission\n{\n    [Key]\n    public int Id { get; set; }\n    public string ObjectType { get; set; } // e.g., "Products", "Orders"\n    public string AccessRight { get; set; } // e.g., "CREATE, READ, WRITE, DELETE"\n\n    [Index("Role_Permission_Index", 1, IsUnique = true)]\n    public int RoleId { get; set; }\n    [ForeignKey("RoleId")]\n    public virtual Role Role { get; set; }\n\n    [Index("Role_Permission_Index", 2, IsUnique = true)]\n    public string ActionName { get; set; } // Custom action name like "CreateProduct"\n}\n\npublic class ApplicationDbContext : IdentityDbContext<ApplicationUser>\n{\n    public DbSet<Role> Roles { get; set; }\n    public DbSet<Permission> Permissions { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        base.OnModelCreating(modelBuilder);\n\n        // Additional configurations if needed\n        modelBuilder.Entity<Role>()\n            .HasMany(r => r.ChildRoles)\n            .WithOptional(c => c.ParentRole)\n            .HasForeignKey(k => k.ParentRoleId);\n    }\n}