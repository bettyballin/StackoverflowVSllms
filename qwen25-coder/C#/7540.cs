public class SqlCeBufferedStream : Stream\n{\n    private readonly IDataReader _reader;\n    private readonly byte[] _buffer = new byte[8192]; // 8 KB buffer size\n    private int _currentBufferSize;\n    private int _currentBufferPosition;\n\n    public override bool CanRead => true;\n    public override bool CanSeek => false;\n    public override bool CanWrite => false;\n    public override long Length => throw new NotSupportedException();\n    public override long Position { get => throw new NotSupportedException(); set => throw new NotSupportedException(); }\n\n    public SqlCeBufferedStream(IDataReader reader)\n    {\n        _reader = reader ?? throw new ArgumentNullException(nameof(reader));\n    }\n\n    private int LoadNextBuffer()\n    {\n        _currentBufferSize = _reader.GetBytes(0, 0, _buffer, 0, _buffer.Length);\n        _currentBufferPosition = 0;\n        return _currentBufferSize;\n    }\n\n    public override int Read(byte[] buffer, int offset, int count)\n    {\n        if (_currentBufferPosition >= _currentBufferSize && LoadNextBuffer() == 0)\n            return 0;\n\n        int bytesRead = Math.Min(count, _currentBufferSize - _currentBufferPosition);\n        Array.Copy(_buffer, _currentBufferPosition, buffer, offset, bytesRead);\n\n        _currentBufferPosition += bytesRead;\n        return bytesRead;\n    }\n\n    public override void Flush()\n    {\n        throw new NotSupportedException();\n    }\n\n    public override long Seek(long offset, SeekOrigin origin)\n    {\n        throw new NotSupportedException();\n    }\n\n    public override void SetLength(long value)\n    {\n        throw new NotSupportedException();\n    }\n\n    public override void Write(byte[] buffer, int offset, int count)\n    {\n        throw new NotSupportedException();\n    }\n}