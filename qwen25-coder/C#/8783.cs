using System;\nusing System.IO;\nusing System.Runtime.InteropServices;\n\npublic class ComStreamWrapper : Stream\n{\n    private IStream _iStream;\n\n    public ComStreamWrapper(IStream iStream)\n    {\n        _iStream = iStream;\n    }\n\n    public override bool CanRead => true;\n    public override bool CanSeek => true;\n    public override bool CanWrite => false; // adjust based on your needs\n    public override long Length => get_StreamSize(_iStream);\n\n    private static long get_StreamSize(IStream o)\n    {\n        STATSTG statstg;\n        o.Stat(out statstg, 1);\n        return statstg.cbSize;\n    }\n\n    public override long Position { get; set; }\n    \n    [DllImport("ole32.dll")]\n    private static extern int CreateStreamOnHGlobal(IntPtr hGlobal, bool fDeleteOnRelease, out IStream stream);\n\n    public override void Flush()\n    {\n        _iStream.Commit(0);\n    }\n\n    public override int Read(byte[] buffer, int offset, int count)\n    {\n        IntPtr ptr = Marshal.AllocCoTaskMem(count);\n        uint bytesRead;\n        Marshal.Copy(buffer, offset, ptr, count);\n        _iStream.Read(ptr, (uint)count, out bytesRead);\n        Marshal.Copy(ptr, buffer, offset, (int)bytesRead);\n        Marshal.FreeCoTaskMem(ptr);\n\n        return (int)bytesRead;\n    }\n\n    public override long Seek(long offset, SeekOrigin origin)\n    {\n        long currentPos = 0;\n        _iStream.Seek(offset, (uint)origin, ref currentPos);\n        Position = currentPos;\n        return Position;\n    }\n\n    public override void SetLength(long value)\n    {\n        throw new NotImplementedException();\n    }\n\n    public override void Write(byte[] buffer, int offset, int count)\n    {\n        IntPtr ptr = Marshal.AllocCoTaskMem(count);\n        Marshal.Copy(buffer, offset, ptr, count);\n        _iStream.Write(ptr, (uint)count, out uint bytesWritten);\n        if (bytesWritten != count)\n            throw new IOException("Failed to write all the data");\n        Position += bytesWritten;\n        Marshal.FreeCoTaskMem(ptr);\n    }\n}