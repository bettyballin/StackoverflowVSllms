using Org.BouncyCastle.Bcpg.OpenPgp;\nusing System.IO;\n\npublic static void SignFile(PgpPrivateKey pgpPrivKey, PGPSignatureGenerator signatureGen, Stream literalData, Stream output)\n{\n    PGPLiteralData pkt;\n    try (Stream unc = new BufferedOutputStream(output))\n    {\n        signatureGen.InitSign(PgpSignature.BinaryDocument, pgpPrivKey);\n        BcpgDigestCalculator digestCalc = new BcpgDigestCalculatorProvider().Get(new Org.BouncyCastle.Bcpg.HashAlgorithmTag(SHA256));\n        literalData = PgpUtilities.GetDecoderStream(literalData);\n        \n        try (var lOut = new MemoryStream())\n        {\n            signatureGen.BeginSignatory(digestCalc);\n\n            pkt = new PGPLiteralData(PgpLiteralData.Binary, null, "filename.txt", DateTime.UtcNow, literalData);\n            \n            byte[] buff = new byte[1024];\n            int length;\n        \n            while ((length = literalData.Read(buff, 0, buff.Length)) > 0)\n            {\n                pkt.GetDataStream().Write(buff, 0, length);\n                signatureGen.Update(buff, 0, length);\n            }\n            \n            try (var sigOut = new MemoryStream())\n            {\n                signatureGen.Generate().Encode(sigOut);\n                \n                var onePassSigList = new PgpOnePassSignatureList(new PgpOnePassSignature[]{signatureGen.GenerateOnePassVersion(false)});\n                onePassSigList.Encode(unc);\n                \n                pkt.WriteTo(unc);\n                \n                sigOut.Seek(0, SeekOrigin.Begin);\n                StreamUtils.Copy(sigOut, unc);\n            }\n        }\n    }\n}