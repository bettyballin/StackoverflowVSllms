using System;\nusing System.Collections.Generic;\n\npublic static class IListExtensions\n{\n    public static int BinarySearch<T>(this IList<T> list, T item, IComparer<T> comparer = null)\n    {\n        if (comparer == null)\n            comparer = Comparer<T>.Default;\n\n        int low = 0;\n        int high = list.Count - 1;\n\n        while (low <= high)\n        {\n            int mid = low + ((high - low) >> 1);\n            int comparisonResult = comparer.Compare(list[mid], item);\n\n            if (comparisonResult == 0)\n                return mid;\n            else if (comparisonResult < 0)\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n\n        return ~low; // Return the bitwise complement of the index at which the item would be.\n    }\n}