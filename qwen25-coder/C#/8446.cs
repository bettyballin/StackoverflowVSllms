class ExpressionParser\n{\n    public static ExpressionNode Parse(string expr)\n    {\n        // Simplified parsing logic (not robust enough for production use)\n        var tokens = expr.Split(' ');\n        if (!tokens.Any()) throw new ArgumentException("Invalid expression");\n\n        Stack<ExpressionNode> stack = new();\n        foreach (var token in tokens)\n        {\n            if (double.TryParse(token, out double num))\n            {\n                stack.Push(new NumberNode(num));\n            }\n            else\n            {\n                var right = stack.Pop();\n                var left = stack.Pop();\n\n                stack.Push(new BinaryOperationNode(token[0], left, right));\n            }\n        }\n\n        return stack.Peek();\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        string expression = "3 4 + 2 *"; // Represents (3 + 4) * 2\n        var parsedExpression = ExpressionParser.Parse(expression);\n\n        var variables = new Dictionary<string, double>();\n        Console.WriteLine(parsedExpression.Evaluate(variables)); // Output: 14\n\n        // To use with variables:\n        string variableExpression = "x y +";\n        var parsedVarExpression = ExpressionParser.Parse(variableExpression);\n        variables["x"] = 5;\n        variables["y"] = 6;\n        Console.WriteLine(parsedVarExpression.Evaluate(variables)); // Output: 11\n    }\n}