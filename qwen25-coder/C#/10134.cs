using FluentNHibernate.Mapping;\n\npublic class PersonMap : ClassMap<Person>\n{\n    public PersonMap()\n    {\n        Id(x => x.Id).Column("PersonId");\n        HasMany(x => x.AcquiredCertificates).KeyColumn("PersonId").Inverse().Cascade.All();\n    }\n}\n\npublic class CertificateMap : ClassMap<Certificate>\n{\n    public CertificateMap()\n    {\n        Id(x => x.Id).Column("CertificateId");\n        HasMany(x => x.AcquiredCertificates).KeyColumn("CertificatedId").Inverse().Cascade.All();\n    }\n}\n\npublic class AcquiredCertificateMap : ClassMap<AcquiredCertificate>\n{\n    public AcquiredCertificateMap()\n    {\n        Table("CertificatesAcquiredByPeople");\n\n        CompositeId()\n            .KeyReference(x => x.Acquirer, "PersonId")\n            .KeyReference(x => x.Certificate, "CertificatedId");\n\n        Map(x => x.DateAcquired);\n    }\n}