using System;\nusing System.IO;\nusing System.Security.AccessControl;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.X509Certificates;\n\nclass Program\n{\n    static void Main()\n    {\n        X509Store store = new X509Store(StoreName.My, StoreLocation.LocalMachine);\n        store.Open(OpenFlags.ReadWrite);\n        \n        // Load your certificate with the private key exportable flag set.\n        X509Certificate2 cert = new X509Certificate2("test.pfx", "password", \n            X509KeyStorageFlags.Exportable | X509KeyStorageFlags.MachineKeySet);\n\n        store.Add(cert);\n        store.Close();\n\n        // Set permissions on the private key.\n        string thumbprint = cert.Thumbprint;\n        RSACryptoServiceProvider rsa = (RSACryptoServiceProvider)cert.PrivateKey;\n        FileIOPermission fioPerm = new FileIOPermission(FileIOPermissionAccess.Read, rsa.CspKeyContainerInfo.UniqueKeyContainerName);\n        fioPerm.Demand();\n\n        // Modify the ACL of the key file\n        string keyPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) +\n            @"\Microsoft\Crypto\RSA\MachineKeys\" + rsa.CspKeyContainerInfo.UniqueKeyContainerName;\n\n        byte[] keyBlob = File.ReadAllBytes(keyPath);\n\n        FileInfo fileInfo = new FileInfo(keyPath);\n        FileSecurity fileSecurity = fileInfo.GetAccessControl();\n\n        // Add NetworkService read permissions\n        fileSecurity.AddAccessRule(new FileSystemAccessRule("NetworkService", FileSystemRights.Read, AccessControlType.Allow));\n\n        // Save the modified ACL back to the key file\n        fileInfo.SetAccessControl(fileSecurity);\n\n        Console.WriteLine("Permissions set successfully.");\n    }\n}