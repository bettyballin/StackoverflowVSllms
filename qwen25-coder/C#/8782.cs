// Example of using AntiForgeryToken and encoding output\nusing System.Web.Mvc;\nusing System.Security.Cryptography;\n\npublic class AccountController : Controller\n{\n    // Login form with CSRF protection\n    [HttpGet]\n    public ActionResult Login()\n    {\n        return View();\n    }\n\n    [HttpPost]\n    [ValidateAntiForgeryToken] // Protects from CSRF\n    public ActionResult Login(LoginViewModel model)\n    {\n        if (ModelState.IsValid)\n        {\n            var passwordHash = ComputeSha256Hash(model.Password); // Hashing the password with SHA256\n            // Authenticate user here...\n        }\n        return View();\n    }\n\n    [NonAction]\n    private string ComputeSha256Hash(string rawData)\n    {\n        using (SHA256 sha256Hash = SHA256.Create())\n        {\n            byte[] bytes = sha256Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(rawData));\n            StringBuilder builder = new StringBuilder();\n            for (int i = 0; i < bytes.Length; i++)\n            {\n                builder.Append(bytes[i].ToString("x2"));\n            }\n            return builder.ToString();\n        }\n    }\n}\n\n// In your login view, add the AntiForgeryToken helper\n@using (Html.BeginForm("Login", "Account", FormMethod.Post))\n{\n    @Html.AntiForgeryToken() // Generates an anti-forgery token\n    // Your HTML form fields here\n}