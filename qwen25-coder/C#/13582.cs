string textToEncrypt = "TEST STRING";\n\nint keySize = 256;\nstring hashAlgorithm = "SHA1";\nstring passPhrase = "AH!PSB0%FGHR$";\nstring saltValue = "LRT%YUR#VBNL@1";\n// Corrected IV to be 16 bytes long\nstring initVector = "HR$2pIjHR$2pIj!!"; // Added two extra characters\n\nbyte[] initVectorBytes = Encoding.ASCII.GetBytes(initVector);\nbyte[] saltValueBytes = Encoding.ASCII.GetBytes(saltValue);\n\nbyte[] plainTextBytes = Encoding.UTF8.GetBytes(textToEncrypt);\n\nvar password = new PasswordDeriveBytes(passPhrase, saltValueBytes, hashAlgorithm, 2);\n\nbyte[] keyBytes = password.GetBytes(keySize / 8);\n\nRijndaelManaged symmetricKey = new RijndaelManaged();\n\nsymmetricKey.Mode = CipherMode.CBC;\n// Ensure the block size is set to 128 bits (16 bytes)\nsymmetricKey.BlockSize = 128;\n\nICryptoTransform encryptor = symmetricKey.CreateEncryptor(keyBytes, initVectorBytes);\n\nMemoryStream memoryStream = new MemoryStream();\n\nvar cryptoStream = new CryptoStream(memoryStream, encryptor, CryptoStreamMode.Write);\ncryptoStream.Write(plainTextBytes, 0, plainTextBytes.Length);\n\ncryptoStream.FlushFinalBlock();\n\nbyte[] cipherTextBytes = memoryStream.ToArray();\n\nmemoryStream.Close();\ncryptoStream.Close();\n\nstring cipherText = Convert.ToBase64String(cipherTextBytes);