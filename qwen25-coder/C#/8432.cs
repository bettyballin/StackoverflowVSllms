using System;\nusing System.Messaging;\nusing System.ServiceProcess;\n\npublic class EmergencyService : ServiceBase\n{\n    private MessageQueue _queue;\n\n    public EmergencyService()\n    {\n        this.CanStop = true;\n        this.ServiceName = "EmergencyNotificationService";\n    }\n\n    protected override void OnStart(string[] args)\n    {\n        string queuePath = @"FormatName:Direct=TCP:YourServerName\private$\emergency";\n\n        if (!MessageQueue.Exists(queuePath))\n            MessageQueue.Create(queuePath);\n\n        _queue = new MessageQueue(queuePath);\n        _queue.Formatter = new XmlMessageFormatter(new Type[] { typeof(string) });\n        \n        _queue.ReceiveCompleted += OnReceiveCompleted;\n        _queue.BeginReceive();\n    }\n\n    private void OnReceiveCompleted(object source, ReceiveCompletedEventArgs asyncResult)\n    {\n        try\n        {\n            using (var queue = (MessageQueue)asyncResult.AsyncState)\n            {\n                var msg = queue.EndReceive(asyncResult.AsyncCorrelationId);\n                string body = (string)msg.Body;\n\n                // Display the message to user or log it as needed.\n                Console.WriteLine(body);\n\n                if (!ServiceStopRequested)\n                    queue.BeginReceive();\n            }\n        }\n        catch (MessageQueueException e)\n        {\n            if (!ServiceStopRequested)\n                _queue.BeginReceive();\n        }\n    }\n\n    private bool ServiceStopRequested = false;\n    \n    protected override void OnStop()\n    {\n        ServiceStopRequested = true;\n        try\n        {\n            if (_queue != null) \n                _queue.ReceiveCompleted -= OnReceiveCompleted;\n            \n        }\n        catch { /* Log error */ }\n    }\n}