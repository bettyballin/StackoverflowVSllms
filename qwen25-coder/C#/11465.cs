using System;\nusing System.Drawing;\nusing System.Drawing.Imaging;\n\npublic class MaskAlphaExample\n{\n    public static void ApplyMaskToImage(string sourceImagePath, string outputImagePath)\n    {\n        // Load the source image.\n        using (Image source = Image.FromFile(sourceImagePath))\n        using (Bitmap result = new Bitmap(source.Width, source.Height))\n        using (Graphics g = Graphics.FromImage(result))\n        {\n            // Create a gradient brush to act as our mask\n            Rectangle rect = new Rectangle(0, 0, source.Width, source.Height);\n            using (LinearGradientBrush mask = new LinearGradientBrush(rect, Color.FromArgb(255, 255, 255, 255), Color.FromArgb(0, 255, 255, 255), LinearGradientMode.Horizontal))\n            {\n                // Create image attributes and set wrap mode\n                using (ImageAttributes attributes = new ImageAttributes())\n                {\n                    ColorMatrix colorMatrix = new ColorMatrix(\n                        new float[][]\n                                {\n                                    new float[] {1, 0, 0, 0, 0},        // Scale red.\n                                    new float[] {0, 1, 0, 0, 0},        // Scale green.\n                                    new float[] {0, 0, 1, 0, 0},        // Scale blue.\n                                    new float[] {0, 0, 0, mask.AlphaFactor(), 0},   // Scale alpha.\n                                    new float[] {0, 0, 0, 0, 1}         // Offset not used.\n                                });\n\n                    attributes.SetColorMatrix(colorMatrix, ColorMatrixFlag.Default, ColorAdjustType.Bitmap);\n\n                    // Draw masked image\n                    g.DrawImage(source, rect, 0, 0, source.Width, source.Height, GraphicsUnit.Pixel, attributes);\n                }\n            }\n\n            result.Save(outputImagePath, ImageFormat.Png); // Save result with transparency.\n        }\n    }\n}