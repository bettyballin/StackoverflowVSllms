using System;\nusing System.IO.Ports;\nusing System.Threading.Tasks;\n\npublic class SerialCommunicationHandler\n{\n    private readonly SerialPort _serialPort;\n    private bool _isConfiguring;\n\n    public SerialCommunicationHandler()\n    {\n        _serialPort = new SerialPort("COM1", 9600, Parity.None, 8, StopBits.One);\n        _serialPort.Open();\n        _serialPort.DataReceived += OnDataReceived;\n        _isConfiguring = false;\n    }\n\n    private async void SendConfigurationAsync(string configCommand)\n    {\n        _isConfiguring = true;\n        await Task.Run(() => \n        {\n            _serialPort.WriteLine(configCommand);\n        });\n    }\n\n    private void OnDataReceived(object sender, SerialDataReceivedEventArgs e)\n    {\n        string data = _serialPort.ReadLine();\n        if (data.Contains("READY")) // Assuming "READY" signals the hardware is ready\n        {\n            _isConfiguring = false;\n            UpdateUiOnReady(); // Invoke this on UI thread\n        }\n    }\n\n    private void UpdateUiOnReady()\n    {\n        // Code to update the UI to show that hardware is ready.\n    }\n\n    public bool IsHardwareReady => !_isConfiguring;\n\n    // Clean up resources here\n}\n\n// Example usage in UI code:\npublic class MyForm : Form\n{\n    private SerialCommunicationHandler _communicationHandler;\n\n    public MyForm()\n    {\n        _communicationHandler = new SerialCommunicationHandler();\n    }\n\n    private async void ConfigureButton_Click(object sender, EventArgs e)\n    {\n        string configCommand = GenerateConfigCommand(); // Some method to generate the command based on user input\n        await Task.Run(() => _communicationHandler.SendConfigurationAsync(configCommand));\n        \n        // Optionally show a status dialog while waiting\n        StatusDialog statusDialog = new StatusDialog(_communicationHandler.IsHardwareReady);\n        statusDialog.ShowDialog();\n    }\n}