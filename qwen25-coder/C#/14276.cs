public class Game1 : Microsoft.Xna.Framework.Game\n{\n    // Assume these properties are set elsewhere in your game setup\n    Vector3 ballPosition; \n    float ballRadius;\n    BoundingBox cubeBounds;\n\n    public void Update(GameTime gameTime)\n    {\n        // Example velocity vector, assume it's calculated elsewhere\n        Vector3 velocity = new Vector3(1f, 0.5f, -1f);\n\n        // Predict next position based on current velocity and delta time\n        ballPosition += velocity * (float)gameTime.ElapsedGameTime.TotalSeconds;\n\n        // Create a bounding sphere for the ball using its position and radius\n        BoundingSphere ballBounds = new BoundingSphere(ballPosition, ballRadius);\n\n        if (!cubeBounds.Contains(ballBounds))\n        {\n            HandleCollision(velocity);\n        }\n    }\n\n    private void HandleCollision(Vector3 velocity)\n    {\n        // Reset position to inside the box for simplicity in this example.\n        // In a real game, you would want to adjust the position to stop right against the wall.\n        ballPosition = new Vector3(\n            MathHelper.Clamp(ballPosition.X, cubeBounds.Min.X + ballRadius, cubeBounds.Max.X - ballRadius),\n            MathHelper.Clamp(ballPosition.Y, cubeBounds.Min.Y + ballRadius, cubeBounds.Max.Y - ballRadius),\n            MathHelper.Clamp(ballPosition.Z, cubeBounds.Min.Z + ballRadius, cubeBounds.Max.Z - ballRadius)\n        );\n\n        // Reflect velocity based on which side the collision occurred.\n        if (ballPosition.X <= cubeBounds.Min.X || ballPosition.X >= cubeBounds.Max.X)\n        {\n            velocity.X *= -1; // Reverse X direction\n        }\n        else if (ballPosition.Y <= cubeBounds.Min.Y || ballPosition.Y >= cubeBounds.Max.Y)\n        {\n            velocity.Y *= -1; // Reverse Y direction\n        }\n        else if (ballPosition.Z <= cubeBounds.Min.Z || ballPosition.Z >= cubeBounds.Max.Z)\n        {\n            velocity.Z *= -1; // Reverse Z direction\n        }\n\n        Console.WriteLine("Ball hit side. New Velocity: " + velocity);\n    }\n}