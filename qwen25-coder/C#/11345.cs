using System;\nusing System.Collections.Generic;\nusing System.ServiceModel;\n\npublic static class ChatServiceManager\n{\n    private static readonly object _lockObject = new object();\n    private static DuplexChannelFactory<IChatServiceCallback> _channelFactory;\n    private static IChatService _serviceProxy;\n    private static InstanceContext _callbackInstance;\n\n    public static void Initialize()\n    {\n        lock (_lockObject)\n        {\n            if (_serviceProxy == null || ((IClientChannel)_serviceProxy).State != CommunicationState.Opened)\n            {\n                var binding = new NetTcpBinding();\n                var address = "net.tcp://localhost:8000/ChatService";\n\n                _callbackInstance = new InstanceContext(new ChatCallback());\n                _channelFactory = new DuplexChannelFactory<IChatServiceCallback>(binding, _callbackInstance);\n                _serviceProxy = (IChatService)_channelFactory.CreateChannel(new EndpointAddress(address));\n\n                try\n                {\n                    ((IClientChannel)_serviceProxy).Open();\n                }\n                catch (Exception ex)\n                {\n                    // Handle exceptions and clean up resources if necessary\n                    Console.WriteLine($"Failed to initialize connection: {ex.Message}");\n                    ((IClientChannel)_serviceProxy).Abort();\n                    throw;\n                }\n            }\n        }\n    }\n\n    public static void SendMessage(string message)\n    {\n        lock (_lockObject)\n        {\n            try\n            {\n                _serviceProxy.SendMessage(message);\n            }\n            catch (Exception ex)\n            {\n                // Handle exceptions and potentially reset the connection if necessary\n                Console.WriteLine($"Failed to send message: {ex.Message}");\n            }\n        }\n    }\n\n    public static void Shutdown()\n    {\n        lock (_lockObject)\n        {\n            try\n            {\n                ((IClientChannel)_serviceProxy).Close();\n            }\n            catch (Exception ex)\n            {\n                // Handle exceptions and ensure the channel is aborted if necessary\n                Console.WriteLine($"Failed to close connection: {ex.Message}");\n                ((IClientChannel)_serviceProxy).Abort();\n            }\n        }\n    }\n}\n\n[ServiceContract(CallbackContract = typeof(IChatServiceCallback))]\npublic interface IChatService\n{\n    [OperationContract(IsOneWay = true)]\n    void SendMessage(string message);\n}\n\npublic interface IChatServiceCallback\n{\n    [OperationContract(IsOneWay = true)]\n    void ReceiveMessage(string message);\n}\n\npublic class ChatCallback : IChatServiceCallback\n{\n    public void ReceiveMessage(string message)\n    {\n        // Handle incoming messages, e.g., broadcast to connected web clients or store in a queue for processing.\n        Console.WriteLine("Received Message: " + message);\n    }\n}