using System;\n    using System.Drawing;\n    using Cudafy;\n    using Cudafy.Host;\n    using Cudafy.Translator;\n\n    class Program {\n        [Cudafy]\n        public static void aes_kernel_gpu(GThread thread, byte[] input, byte[] output) {\n            int i = thread.blockIdx.x * thread.blockDim.x + thread.threadIdx.x;\n            if (i < input.Length) {\n                output[i] = (byte)(input[i] ^ 0xFF); // Example operation\n            }\n        }\n\n        static void Main(string[] args) {\n            CudafyModule km = CudafyCompiler.Instance.Compile<Cuda>(typeof(Program));\n            GPGPU gpu = CudafyHost.GetDevice(eGPUType.Cuda);\n            gpu.LoadModule(km);\n\n            byte[] input = new byte[1024]; // Example input data\n            byte[] output = new byte[input.Length];\n            Random r = new Random();\n            r.NextBytes(input); // Fill with random values\n\n            GPUArray<byte> gpuInput = gpu.CopyToDevice(input);\n            GPUArray<byte> gpuOutput = gpu.Allocate<byte>(input.Length);\n\n            int blockSize = 256;\n            int blocksCount = input.Length / blockSize + (input.Length % blockSize != 0 ? 1 : 0);\n            gpu.Launch(blocksCount, blockSize).aes_kernel_gpu(gpuInput, gpuOutput);\n\n            gpu.CopyFromDevice(output, gpuOutput);\n\n            Console.WriteLine("First output byte: " + output[0]);\n        }\n    }