using System;\n   using System.Data.SqlClient;\n   using System.Web.Caching;\n\n   public class DataRowCacheDependencyExample\n   {\n       private static readonly string ConnectionString = "YourConnectionString";\n\n       public static void CacheRowData(int rowId)\n       {\n           string cacheKey = $"Row_{rowId}";\n           if (HttpRuntime.Cache[cacheKey] == null)\n           {\n               var connectionString = ConnectionString;\n               using (var connection = new SqlConnection(connectionString))\n               {\n                   var commandText = $"SELECT Data FROM YourTable WHERE Id = {rowId}";\n                   using (SqlCommand command = new SqlCommand(commandText, connection))\n                   {\n                       SqlDependency dependency = new SqlDependency(command);\n                       dependency.OnChange += OnRowChanged;\n\n                       if (connection.State == System.Data.ConnectionState.Closed)\n                           connection.Open();\n\n                       object result = command.ExecuteScalar();\n                       HttpRuntime.Cache.Insert(\n                           cacheKey,\n                           result,\n                           new SqlCacheDependency(dependency),\n                           DateTime.Now.AddMinutes(10), // Cache duration\n                           Cache.NoSlidingExpiration\n                       );\n                   }\n               }\n           }\n       }\n\n       private static void OnRowChanged(object sender, SqlNotificationEventArgs e)\n       {\n           if (e.Info == SqlNotificationInfo.Insert ||\n               e.Info == SqlNotificationInfo.Update ||\n               e.Info == SqlNotificationInfo.Delete)\n           {\n               string rowId = ((SqlDependency)sender).CommandText.Split('=')[1].Trim();\n               HttpRuntime.Cache.Remove($"Row_{rowId}");\n               Console.WriteLine($"Cache invalidated for Row {rowId}");\n           }\n       }\n   }