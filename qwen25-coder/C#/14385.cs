public class UniqueNamedEntityConvention : IClassConvention\n{\n    public void Apply(IClassInstance instance)\n    {\n        // Define common settings here, if necessary.\n    }\n}\n\n// For each subclass, or use a generic convention that applies to all subclasses of UniqueNamedEntity\npublic class SomeSubclassOfUniqueNamedEntityMap : SubclassMapping<SomeSubclassOfUniqueNamedEntity>\n{\n    public SomeSubclassOfUniqueNamedEntityMap()\n    {\n        DiscriminatorValue("SomeDiscriminatorValueForThisSubclass");\n        Map(x => x.SomeProperty).Column("SomePropertyColumn");\n    }\n}\n\n// In your Fluent NHibernate setup:\nvar autoPersistenceModel = AutoMap.AssemblyOf<SomeSubclassOfUniqueNamedEntity>()\n    .Conventions.Add(new UniqueNamedEntityConvention())\n    // Register subclass mappings if they are not picked up automatically\n    .Override<SomeSubclassOfUniqueNamedEntity>(map => new SomeSubclassOfUniqueNamedEntityMap());\n\nvar configuration = Fluently.Configure()\n    .Database(/* your database config*/)\n    .Mappings(m => m.AutoMappings.Add(autoPersistenceModel));