using System;\nusing System.IO;\nusing SharpSvn;\nusing Microsoft.TeamFoundation.VersionControl.Client;\nusing Microsoft.TeamFoundation.Client;\n\nclass SyncSvnToTfs\n{\n    private static void Main(string[] args)\n    {\n        string svnRepoUrl = "http://svnrepo.url/repo";\n        string tfsCollectionUrl = "http://tfsserver:8080/tfs/DefaultCollection";\n        string gitProjectName = "GitProjectName"; // If using Git in TFS\n        string gitRepositoryName = "GitRepositoryName"; // If using Git in TFS\n        string localPathForSVNCheckout = @"C:\Temp\SvnWorkingCopy";\n        string tfsBranchToUpload = "$/TfsProject/Main";\n\n        SvnClient svn = new SvnClient();\n        Uri svnUri = new Uri(svnRepoUrl);\n        Uri tfsCollectionUri = new Uri(tfsCollectionUrl);\n\n        try\n        {\n            // Checkout the latest from SVN\n            if (!Directory.Exists(localPathForSVNCheckout))\n                Directory.CreateDirectory(localPathForSVNCheckout);\n\n            svn.CheckOut(svnUri, localPathForSVNCheckout);\n\n            // Connect to TFS and get the workspace\n            TfsTeamProjectCollection tpc = new TfsTeamProjectCollection(tfsCollectionUri);\n            VersionControlServer svc = tpc.GetService<VersionControlServer>();\n            WorkspaceInfo[] workspaces = svc.QueryWorkspaces(null, null, Environment.MachineName);\n\n            // Assuming we have a workspace already mapped, otherwise create one\n            Workspace workspace;\n            if (workspaces.Length == 0)\n                workspace = svc.CreateWorkspace("SvnTfsSync", tpc.AuthenticatedUser.DisplayName);\n            else\n                workspace = workspaces[0].GetWorkspace(tpc);\n\n            try\n            {\n                // Map the local path to TFS branch and check out for edits\n                if (workspace.Folders.Length == 0)\n                    workspace.Map(tfsBranchToUpload, localPathForSVNCheckout);\n                \n                workspace.Get();\n\n                // Pend add or change operation on all files\n                foreach (var file in Directory.GetFiles(localPathForSVNCheckout, "*.*", SearchOption.AllDirectories))\n                {\n                    string relativePath = Path.GetRelativePath(localPathForSVNCheckout + "\\", file);\n\n                    if (!File.Exists(workspace.LocalItemForServerItem(Path.Combine(tfsBranchToUpload, relativePath))))\n                        workspace.PendAdd(file);\n                    else\n                        workspace.PendEdit(file);\n                }\n\n                // Check in changes to TFS\n                PendingChange[] pendingChanges = workspace.GetPendingChanges();\n                if (pendingChanges.Length > 0)\n                {\n                    workspace.CheckIn(pendingChanges, "Synced with latest from SVN repository");\n                }\n            }\n            finally\n            {\n                // Optionally unmap and delete the local working copy directory\n                workspace.DeleteMapping(workspace.Folders[0]);\n                Directory.Delete(localPathForSVNCheckout, true);\n                tpc.Dispose();\n            }\n\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($"Error: {ex.Message}");\n        }\n    }\n}