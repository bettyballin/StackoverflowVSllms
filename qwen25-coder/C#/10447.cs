using System;\nusing Ganss.XSS; // Importing HtmlSanitizer\n\npublic class HtmlContentHandler\n{\n    private readonly HtmlSanitizer _sanitizer;\n\n    public HtmlContentHandler()\n    {\n        // Initialize sanitizer and configure it if needed\n        _sanitizer = new HtmlSanitizer();\n        \n        // Optionally, allow specific attributes or tags that are safe:\n        // _sanitizer.AllowedTags.Add("b");\n        // _sanitizer.AllowedAttributes.Add("href"); // To allow <a href=""> but sanitize dangerous href values\n        \n        // Configure the sanitizer to remove all scripts and expressions\n        _sanitizer.AllowDataAttributes = false; // Disallow data protocols which can be exploited in some scenarios\n        _sanitizer.TagRemoved += (s, e) =>\n        {\n            Console.WriteLine($"Disallowed tag removed: {e.OriginalTag}");\n        };\n    }\n\n    public string SanitizeUserContent(string userHtml)\n    {\n        if (string.IsNullOrEmpty(userHtml))\n            return userHtml;\n\n        // Sanitize the provided HTML\n        string sanitized = _sanitizer.Sanitize(userHtml);\n        \n        return sanitized;\n    }\n}\n\n// Usage example:\nclass Program\n{\n    static void Main()\n    {\n        var handler = new HtmlContentHandler();\n        string userInput = "Hi, this <b style=\"width:expression(alert('bad!'))\">dog</b> is black.";\n        string safeHtml = handler.SanitizeUserContent(userInput);\n        Console.WriteLine(safeHtml); // Outputs: Hi, this <b>dog</b> is black.\n    }\n}