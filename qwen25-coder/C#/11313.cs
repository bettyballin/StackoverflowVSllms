using System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\nusing System.Threading;\n\npublic class TcpServer\n{\n    private readonly int _port;\n    private TcpListener _listener;\n    private Dictionary<Socket, StateObject> _clientSockets = new Dictionary<Socket, StateObject>();\n\n    public TcpServer(int port)\n    {\n        _port = port;\n    }\n\n    public void Start()\n    {\n        _listener = new TcpListener(IPAddress.Any, _port);\n        _listener.Start();\n        Console.WriteLine("Waiting for a connection...");\n        _listener.BeginAcceptTcpClient(AcceptCallback, null);\n    }\n\n    private void AcceptCallback(IAsyncResult ar)\n    {\n        try\n        {\n            Socket clientSocket = _listener.EndAcceptSocket(ar);\n\n            StateObject so = new StateObject\n            {\n                WorkSocket = clientSocket\n            };\n\n            lock (_clientSockets)\n            {\n                _clientSockets.Add(clientSocket, so);\n            }\n\n            clientSocket.BeginReceive(so.Buffer, 0, StateObject.BufferSize, 0,\n                new AsyncCallback(ReadCallback), so);\n\n            _listener.BeginAcceptTcpClient(AcceptCallback, null);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine("Accept error: " + ex.Message);\n        }\n    }\n\n    public void BroadcastMessage(string message)\n    {\n        lock (_clientSockets)\n        {\n            foreach (var client in _clientSockets.Keys)\n            {\n                Send(client, message);\n            }\n        }\n    }\n\n    private void ReadCallback(IAsyncResult ar)\n    {\n        StateObject so = (StateObject)ar.AsyncState;\n        Socket handler = so.WorkSocket;\n\n        try\n        {\n            int bytesRead = handler.EndReceive(ar);\n\n            if (bytesRead > 0)\n            {\n                so.BytesReceived += bytesRead;\n                so.Builder.Append(Encoding.ASCII.GetString(so.Buffer, 0, bytesRead));\n                string content = so.Builder.ToString();\n                \n                // Process the data sent by the client.\n                Console.WriteLine("Read {0} byte(s), content = \"{1}\"", content.Length, content);\n\n                handler.BeginReceive(so.Buffer, 0, StateObject.BufferSize, 0,\n                    new AsyncCallback(ReadCallback), so);\n            }\n        }\n        catch (Exception ex)\n        {\n            lock (_clientSockets)\n            {\n                _clientSockets.Remove(handler);\n            }\n\n            handler.Close();\n            Console.WriteLine("Connection closing: " + ex.Message);\n        }\n    }\n\n    private void Send(Socket handler, String data)\n    {\n        byte[] byteData = Encoding.ASCII.GetBytes(data);\n\n        handler.BeginSend(byteData, 0, byteData.Length, 0,\n            new AsyncCallback(SendCallback), handler);\n    }\n\n    private static void SendCallback(IAsyncResult ar)\n    {\n        try\n        {\n            Socket client = (Socket)ar.AsyncState;\n\n            int bytesSent = client.EndSend(ar);\n\n            Console.WriteLine("Sent {0} bytes to client.", bytesSent);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine("Send error: " + ex.Message);\n        }\n    }\n\n    public void Stop()\n    {\n        _listener.Stop();\n        lock (_clientSockets)\n        {\n            foreach (var socket in _clientSockets.Keys)\n            {\n                socket.Close();\n            }\n            _clientSockets.Clear();\n        }\n    }\n}\n\npublic class StateObject\n{\n    // Client  socket.\n    public Socket WorkSocket { get; set; }\n\n    // Size of receive buffer.\n    public const int BufferSize = 1024;\n\n    // Receive buffer.\n    public byte[] Buffer => new byte[BufferSize];\n\n    // Received data string.\n    public StringBuilder Builder { get; } = new StringBuilder();\n\n    // Amount received so far\n    public int BytesReceived { get; set; }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        TcpServer server = null;\n        \n        try\n        {\n            server = new TcpServer(13000);\n            server.Start();\n            \n            Console.WriteLine("Press enter to send a broadcast message or 'exit' to stop the server");\n            while (true)\n            {\n                var input = Console.ReadLine();\n\n                if (input?.Equals("exit", StringComparison.OrdinalIgnoreCase) == true)\n                    break;\n\n                server.BroadcastMessage(input + Environment.NewLine);\n            }\n        } \n        catch (Exception e)\n        {\n            Console.WriteLine("Server exception: " + e.Message);\n        }\n        finally\n        {\n            server?.Stop();\n        }\n\n        Console.WriteLine("Server is stopped, press a key to exit");\n        Console.ReadKey();\n    }\n}