using Microsoft.VisualStudio.TestTools.UnitTesting;\nusing Moq;\n\npublic interface IOrderRepository\n{\n    Order GetOrder(int id);\n    void Save(Order order);\n}\n\npublic class OrderService : IOrderService\n{\n    private readonly IOrderRepository _orderRepository;\n\n    public OrderService(IOrderRepository orderRepository)\n    {\n        _orderRepository = orderRepository;\n    }\n\n    public Order UpdateOrder(Order updatedOrder)\n    {\n        var existingOrder = _orderRepository.GetOrder(updatedOrder.Id);\n        if (existingOrder == null) throw new Exception("Order not found");\n\n        // Copy properties from updatedOrder to existingOrder\n        existingOrder.Quantity = updatedOrder.Quantity;\n\n        _orderRepository.Save(existingOrder);\n\n        return existingOrder;\n    }\n}\n\n[TestClass]\npublic class OrderServiceTests\n{\n    private Mock<IOrderRepository> _mockRepo;\n    private IOrderService _orderService;\n\n    [TestInitialize]\n    public void Setup()\n    {\n        _mockRepo = new Mock<IOrderRepository>();\n        _orderService = new OrderService(_mockRepo.Object);\n    }\n\n    [TestMethod]\n    public void UpdateOrder_ShouldUpdateQuantity()\n    {\n        // Arrange\n        var existingOrderInDb = new Order { Id = 1, Quantity = 2 };\n        var orderToUpdate = new Order { Id = 1, Quantity = 5 };\n\n        _mockRepo.Setup(repo => repo.GetOrder(1))\n                 .Returns(existingOrderInDb);\n\n        // Act\n        var result = _orderService.UpdateOrder(orderToUpdate);\n\n        // Assert\n        Assert.AreEqual(orderToUpdate.Quantity, result.Quantity);\n        _mockRepo.Verify(x => x.Save(It.Is<Order>(o => o.Quantity == 5)), Times.Once);\n    }\n}