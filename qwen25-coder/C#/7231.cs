using System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Xml;\n\npublic class SamlSigner\n{\n    public static void SignSamlAssertion(XmlElement assertion, X509Certificate2 certificate)\n    {\n        // Check if the private key is available.\n        var privateKey = (RSACryptoServiceProvider)certificate.PrivateKey;\n\n        if (privateKey == null)\n            throw new InvalidOperationException("Private key was not found in the provided certificate.");\n\n        using (SignedXml signedXml = new SignedXml(assertion))\n        {\n            // Assign the signing key to the signedxml document.\n            signedXml.SigningKey = privateKey;\n\n            // Add a reference to sign the specified assertion element.\n            Reference reference = new Reference { Uri = "" };\n\n            // Add an enveloped transformation to the reference.\n            XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n            reference.AddTransform(env);\n\n            // Add the reference to the SignedXml object.\n            signedXml.AddReference(reference);\n\n            // Create a key info and specify the public key from the certificate.\n            KeyInfo keyInfo = new KeyInfo();\n            keyInfo.AddClause(new RSAKeyValue((RSA)certificate.PublicKey.Key));\n            signedXml.KeyInfo = keyInfo;\n\n            // Compute the signature.\n            signedXml.ComputeSignature();\n\n            // Get the XML representation of the signature and save it to an XmlElement.\n            XmlElement xmlDigitalSignature = signedXml.GetXml();\n            \n            // Append the signature element to the original SAML assertion.\n            assertion.AppendChild(assertion.OwnerDocument.ImportNode(xmlDigitalSignature, true));\n        }\n    }\n\n    public static void Main()\n    {\n        XmlDocument samlAssertionDoc = new XmlDocument { PreserveWhitespace = true };\n        samlAssertionDoc.LoadXml(@"<saml:Assertion xmlns:saml='urn:oasis:names:tc:SAML:2.0:assertion' ID='_18d23e95-aca4-46ff-bf2a-adb3c9de9c2e'\n        IssueInstant='2023-10-01T21:57:19Z' Version='2.0'/><!--Your Assertion Here-->");\n\n        XmlDocument certDoc = new XmlDocument();\n        certDoc.Load("PathToYourCertificate.pfx"); // Load certificate with private key\n        var certificate = new X509Certificate2(certDoc.OuterXml, "YourCertificatePassword", X509KeyStorageFlags.Exportable | X509KeyStorageFlags.MachineKeySet);\n\n        SignSamlAssertion(samlAssertionDoc.DocumentElement, certificate);\n        \n        Console.WriteLine(samlAssertionDoc.OuterXml); // Output signed SAML assertion\n    }\n}