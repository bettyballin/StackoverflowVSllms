// Define an interface for your data access operations\npublic interface IDataAccess {\n    void Connect();\n    void Disconnect();\n    // Add other database operation methods here\n}\n\n// Concrete implementation for SQL Server\npublic class SqlServerDataAccess : IDataAccess {\n    public void Connect() {\n        // Implement SQL Server connection logic using ConnectionStrings["SqlServer"]\n    }\n    public void Disconnect() {\n        // Logic to close the connection\n    }\n}\n\n// Concrete implementation for Oracle Database\npublic class OracleDataAccess : IDataAccess {\n    public void Connect() {\n        // Implement Oracle connection logic using ConnectionStrings["Oracle"]\n    }\n    public void Disconnect() {\n        // Logic to close the connection\n    }\n}\n\n// Factory to get data access object depending on configuration\npublic static class DataAccessFactory {\n    public static IDataAccess GetDataAccess(string type) {\n        switch (type.ToLower()) {\n            case "sqlserver":\n                return new SqlServerDataAccess();\n            case "oracle":\n                return new OracleDataAccess();\n            default:\n                throw new ArgumentException("Unknown database type");\n        }\n    }\n}\n\n// Usage in application\npublic class MyAppSettings {\n    public static string DatabaseType { get; set; } // This can be read from config file or user input\n}\n\npublic class SomeComponentUsingDatabase {\n    private readonly IDataAccess _dataAccess;\n\n    public SomeComponentUsingDatabase() {\n        _dataAccess = DataAccessFactory.GetDataAccess(MyAppSettings.DatabaseType);\n        _dataAccess.Connect();\n    }\n\n    // Use _dataAccess to perform operations...\n}