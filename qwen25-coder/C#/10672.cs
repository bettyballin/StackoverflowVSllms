using System;\n   using System.Data;\n   using System.IO;\n   using System.Security.Cryptography;\n\n   public class DatasetEncryption\n   {\n       // Encrypts a dataset\n       public byte[] EncryptDataset(DataSet ds, string key)\n       {\n           ICryptoTransform encryptor = Aes.Create().CreateEncryptor(Encoding.UTF8.GetBytes(key), Encoding.UTF8.GetBytes(CreateSalt()));\n\n           using (MemoryStream ms = new MemoryStream())\n           {\n               using (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))\n               {\n                   using (XmlTextWriter xw = new XmlTextWriter(cs, Encoding.UTF8))\n                   {\n                       ds.WriteXml(xw);\n                   }\n               }\n               return ms.ToArray();\n           }\n       }\n\n       // Decrypts a dataset\n       public DataSet DecryptDataset(byte[] encryptedDs, string key)\n       {\n           ICryptoTransform decryptor = Aes.Create().CreateDecryptor(Encoding.UTF8.GetBytes(key), Encoding.UTF8.GetBytes(CreateSalt()));\n\n           using (MemoryStream ms = new MemoryStream(encryptedDs))\n           {\n               using (CryptoStream cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read))\n               {\n                   DataSet ds = new DataSet();\n                   ds.ReadXml(cs);\n                   return ds;\n               }\n           }\n       }\n\n       // Simple salt creation method for demonstration purposes\n       private static string CreateSalt()\n       {\n           byte[] bytes = new byte[16];\n           using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())\n           {\n               rng.GetBytes(bytes);\n           }\n           return Convert.ToBase64String(bytes);\n       }\n   }