using System.Collections;\nusing System.ComponentModel;\n\nnamespace TestMvvm444.Model\n{\n    class Customer : INotifyPropertyChanged, INotifyDataErrorInfo\n    {\n        private Dictionary<string, List<string>> _errorsByPropertyName = new Dictionary<string, List<string>>();\n        public event EventHandler<DataErrorsChangedEventArgs> ErrorsChanged;\n\n        public int ID { get; set; }\n        public int NumberOfContracts { get; set; }\n\n        private string firstName;\n        private string lastName;\n\n        public string FirstName\n        {\n            get { return firstName; }\n            set\n            {\n                if (firstName != value)\n                {\n                    SetPropertyValue(ref firstName, value, "FirstName");\n                    ValidateProperty("FirstName", firstName);\n                }\n            }\n        }\n\n        public string LastName\n        {\n            get { return lastName; }\n            set\n            {\n                if (lastName != value)\n                {\n                    SetPropertyValue(ref lastName, value, "LastName");\n                    ValidateProperty("LastName", lastName);\n                }\n            }\n        }\n\n        public string FullName\n        {\n            get { return firstName + " " + lastName; }\n        }\n\n        #region INotifyPropertyChanged Implementation\n\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        protected virtual void OnPropertyChanged(string propertyName)\n        {\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n        }\n\n        protected bool SetPropertyValue<T>(ref T location, T value, string propertyName = null)\n        {\n            if (Equals(location, value)) return false;\n            location = value;\n            OnPropertyChanged(propertyName);\n            return true;\n        }\n\n        #endregion\n\n        #region INotifyDataErrorInfo Implementation\n\n        public bool HasErrors\n        {\n            get { return _errorsByPropertyName.Any(); }\n        }\n\n        public IEnumerable GetErrors(string propertyName)\n        {\n            return _errorsByPropertyName.ContainsKey(propertyName) ?\n                _errorsByPropertyName[propertyName] :\n                null;\n        }\n\n        private void ValidateProperty(string propertyName, object value)\n        {\n            if (value == null || string.IsNullOrEmpty(value.ToString()))\n            {\n                AddError(propertyName, $"{propertyName} is required.");\n            }\n            else\n            {\n                RemoveErrors(propertyName);\n                switch (propertyName)\n                {\n                    case "LastName":\n                        var lastName = (string)value;\n                        if (lastName.Length > 50)\n                            AddError(propertyName, "Last name may only contain 50 characters.");\n                        break;\n                }\n            }\n\n            ErrorsChanged?.Invoke(this, new DataErrorsChangedEventArgs(propertyName));\n        }\n\n        private void AddError(string propertyName, string error)\n        {\n            List<string> errorsForProperty;\n\n            if (_errorsByPropertyName.TryGetValue(propertyName, out errorsForProperty))\n            {\n                errorsForProperty.Add(error);\n            }\n            else\n            {\n                _errorsByPropertyName[propertyName] = new List<string> { error };\n            }\n        }\n\n        private void RemoveErrors(string propertyName)\n        {\n            _errorsByPropertyName.Remove(propertyName);\n            ErrorsChanged?.Invoke(this, new DataErrorsChangedEventArgs(propertyName));\n        }\n\n        #endregion\n    }\n}