public class UpdateStats : IHttpHandler\n{\n    private HttpContext _context;\n\n    public const String UpdateInProgressCacheKey = "FAHLeagueWebUpdateInProgress";\n\n    public void ProcessRequest(HttpContext context)\n    {\n        // Use a Cache variable to ensure we don't call multiple updates\n        Object inProgress = context.Cache[UpdateInProgressCacheKey];\n        if (inProgress != null)\n        {\n            // Already updating\n            context.Response.Redirect("Default.aspx");\n            return;\n        }\n        \n        // Set the Cache variable so we know an Update is happening\n        context.Cache.Insert(UpdateInProgressCacheKey, true, null, DateTime.Now.AddMinutes(10), Cache.NoSlidingExpiration);\n\n        try\n        {\n            context.Response.Clear();\n            context.Response.ContentType = "text/html";\n            this._context = context;\n\n            context.Response.Write("<pre>Please wait while we update our statistics. You will be automatically redirected when this finishes...\n\n");\n            context.Response.Flush();\n\n            // Get the Stats and Update\n            Statistics stats = new Statistics(context.Server);\n            stats.UpdateProgress += HandleUpdateProgress;\n            \n            string force = context.Request.QueryString["force"];\n            stats.UpdateStats(force != null);\n\n        }\n        finally\n        {\n            // Ensure the cache variable is removed even if an exception occurs\n            context.Cache.Remove(UpdateInProgressCacheKey);\n            context.Response.Write("</pre>");\n            context.Response.Write("<meta http-equiv=\"refresh\" content=\"0;URL=Default.aspx\" />");\n            context.Response.Write("<p>If you are not automatically redirected please click <a href=\"Default.aspx\">here</a></p>");\n        }\n    }\n\n    private void HandleUpdateProgress(string message)\n    {\n        this._context.Response.Write(message + "\n");\n        this._context.Response.Flush();\n    }\n\n    public bool IsReusable\n    {\n        get { return false; } // Each request needs a new handler instance\n    }\n}