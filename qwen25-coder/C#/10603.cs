using System;\nusing System.Web;\n\npublic class AuthenticationHelper {\n    public static void CreatePersistentLoginCookie(int userId, HttpContext context) {\n        string token = Guid.NewGuid().ToString();\n        \n        // Store the token with an expiration date or timestamp in your database\n        SaveTokenToDatabase(userId, token, DateTime.UtcNow.AddYears(10));\n\n        HttpCookie authCookie = new HttpCookie("AuthCookie", token);\n        authCookie.HttpOnly = true;\n        authCookie.Secure = context.Request.IsSecureConnection; // Ensure cookie is sent over HTTPS\n        authCookie.Expires = DateTime.MaxValue;\n\n        context.Response.Cookies.Add(authCookie);\n    }\n\n    public static int? AuthenticateFromCookie(HttpContext context) {\n        if (context.Request.Cookies["AuthCookie"] == null) return null;\n        \n        string token = context.Request.Cookies["AuthCookie"].Value;\n        int userId;\n\n        // Retrieve the associated UserId from your database using the token\n        if (!GetUserIdFromDatabase(token, out userId)) return null;\n\n        return userId;\n    }\n\n    private static void SaveTokenToDatabase(int userId, string token, DateTime expires) {\n        // This is a placeholder for actual database logic.\n        throw new NotImplementedException();\n    }\n\n    private static bool GetUserIdFromDatabase(string token, out int userId) {\n        // This is a placeholder for actual database logic. \n        // It should check the token against stored tokens and retrieve\n        // the associated user ID.\n        throw new NotImplementedException(); \n    }\n}