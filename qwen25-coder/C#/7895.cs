using (var session = sessionFactory.OpenSession())\n{\n    using (ITransaction tx = session.BeginTransaction(IsolationLevel.Serializable))\n    {\n        // Lock existing bookings that overlap with the new booking to prevent concurrent modifications\n        string hql = "from Booking b where not (b.BookingEnd <= :start or b.BookingStart >= :end)";\n        var query = session.CreateQuery<Booking>(hql);\n        query.SetParameter("start", newBooking.BookingStart);\n        query.SetParameter("end", newBooking.BookingEnd);\n\n        // ForUpdate is not always directly available in NHibernate, so you might need to use native SQL\n        var existingBookings = session.CreateSQLQuery(query.QueryString + " FOR UPDATE").List<Booking>();\n\n        if (!existingBookings.Any())\n        {\n            // Add your new booking\n            session.Save(newBooking);\n            \n            tx.Commit();\n        }\n        else\n        {\n            throw new InvalidOperationException("Overlapping bookings exist.");\n        }\n    }\n}