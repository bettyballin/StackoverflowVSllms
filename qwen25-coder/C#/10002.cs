using System;\nusing System.Net;\nusing System.Runtime.InteropServices;\n\npublic class CredentialHelper\n{\n    // Importing the necessary Windows API functions\n    [DllImport("advapi32.dll", SetLastError = true)]\n    public static extern bool CredRead(\n        string target,\n        int type,\n        [Out] out IntPtr credential);\n\n    [DllImport("advapi32.dll", SetLastError = true)]\n    public static extern void CredFree(IntPtr bufferAsICredential);\n\n    public const int CRED_TYPE_GENERIC = 1;\n\n    private class NativeCredential\n    {\n        public uint flags;\n        public uint type;\n        public IntPtr TargetName;\n        public IntPtr Comment;\n        public FILETIME LastWritten;\n        public uint CredentialBlobSize;\n        public IntPtr CredentialBlob;\n        public uint Persist;\n        public uint AttributeCount;\n        public IntPtr Attributes;\n        public IntPtr TargetAlias;\n        public IntPtr UserName;\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    private struct FILETIME\n    {\n        public uint dwLowDateTime;\n        public uint dwHighDateTime;\n    }\n\n    // Helper method to convert native credential structure to managed NetworkCredential object\n    public static NetworkCredential GetNetworkCredentialFromCredential(NativeCredential cred)\n    {\n        IntPtr unmanagedUserName = Marshal.ReadIntPtr(cred.UserName);\n        string userName = Marshal.PtrToStringUni(unmanagedUserName);\n\n        var passwordBuffer = new System.Security.SecureString();\n\n        IntPtr p = cred.CredentialBlob;\n        uint charsInBlob = cred.CredentialBlobSize / 2;\n\n        for (uint n = 0; n < charsInBlob; ++n)\n        {\n            char c = (char)Marshal.ReadByte(p);\n            passwordBuffer.AppendChar(c);\n            p += sizeof(char);\n        }\n\n        // Return the NetworkCredential object\n        return new NetworkCredential(userName, passwordBuffer);\n    }\n\n    public static NetworkCredential GetStoredCredential(string targetName)\n    {\n        IntPtr ptrToNativeCred = IntPtr.Zero;\n\n        try\n        {\n            bool success = CredRead(targetName, CRED_TYPE_GENERIC, out ptrToNativeCred);\n\n            if (success == false)\n                throw new System.ComponentModel.Win32Exception(System.Runtime.InteropServices.Marshal.GetLastWin32Error());\n\n            NativeCredential nativeCredStructure = (NativeCredential)Marshal.PtrToStructure<NativeCredential>(ptrToNativeCred);\n            \n            return GetNetworkCredentialFromCredential(nativeCredStructure);\n        }\n        finally\n        {\n            if (ptrToNativeCred != IntPtr.Zero)\n                CredFree(ptrToNativeCred);\n        }\n    }\n\n    public static void Main(string[] args)\n    {\n        string targetName = @"Domain:Target"; // Replace with your domain and target\n\n        try\n        {\n            NetworkCredential credential = GetStoredCredential(targetName);\n\n            // Use the retrieved credentials to authenticate your web service call\n            WebService1.Credentials = credential;\n            // Call the web service...\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine("Error: " + ex.Message);\n        }\n    }\n}