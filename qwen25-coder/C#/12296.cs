using System;\nusing System.IO;\nusing System.Xml;\nusing System.Xml.Serialization;\n\npublic class OriginalClass\n{\n    public string Name { get; set; }\n    public int Number { get; set; }\n}\n\npublic class OriginalClassWrapper : IXmlSerializable\n{\n    private readonly OriginalClass _original;\n\n    public OriginalClassWrapper(OriginalClass original)\n    {\n        _original = original;\n    }\n\n    // This method is reserved and should not be used.\n    public System.Xml.Schema.XmlSchema GetSchema()\n    {\n        return null;\n    }\n\n    public void ReadXml(XmlReader reader)\n    {\n        reader.ReadStartElement();\n        _original.Name = reader.ReadElementContentAsString("Name", "");\n        _original.Number = reader.ReadElementContentAsInt("Number", "");\n        reader.ReadEndElement();\n    }\n\n    public void WriteXml(XmlWriter writer)\n    {\n        // Custom serialization logic\n        writer.WriteElementString("CustomName", _original.Name);\n        writer.WriteElementString("ModifiedNumber", _original.Number.ToString());\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        OriginalClass original = new OriginalClass { Name = "Example", Number = 123 };\n        OriginalClassWrapper wrapper = new OriginalClassWrapper(original);\n\n        XmlSerializer serializer = new XmlSerializer(typeof(OriginalClassWrapper));\n        using (StringWriter sw = new StringWriter())\n        {\n            using (XmlWriter xw = XmlWriter.Create(sw))\n            {\n                serializer.Serialize(xw, wrapper);\n                Console.WriteLine(sw.ToString());\n            }\n        }\n    }\n}