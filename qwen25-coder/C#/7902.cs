using System;\nusing System.IO;\n\npublic static class BinaryReaderBigEndianExtensions\n{\n    public static short ReadInt16BE(this BinaryReader reader)\n    {\n        var bytes = reader.ReadBytes(2);\n        if (bytes == null || bytes.Length != 2) throw new EndOfStreamException();\n        Array.Reverse(bytes); // Convert Little-Endian to Big-Endian\n        return BitConverter.ToInt16(bytes, 0);\n    }\n\n    public static int ReadInt32BE(this BinaryReader reader)\n    {\n        var bytes = reader.ReadBytes(4);\n        if (bytes == null || bytes.Length != 4) throw new EndOfStreamException();\n        Array.Reverse(bytes); // Convert Little-Endian to Big-Endian\n        return BitConverter.ToInt32(bytes, 0);\n    }\n\n    public static long ReadInt64BE(this BinaryReader reader)\n    {\n        var bytes = reader.ReadBytes(8);\n        if (bytes == null || bytes.Length != 8) throw new EndOfStreamException();\n        Array.Reverse(bytes); // Convert Little-Endian to Big-Endian\n        return BitConverter.ToInt64(bytes, 0);\n    }\n}\n\npublic static class BinaryWriterBigEndianExtensions\n{\n    public static void WriteInt16BE(this BinaryWriter writer, short value)\n    {\n        byte[] bytes = BitConverter.GetBytes(value);\n        Array.Reverse(bytes); // Convert Little-Endian to Big-Endian\n        writer.Write(bytes);\n    }\n\n    public static void WriteInt32BE(this BinaryWriter writer, int value)\n    {\n        byte[] bytes = BitConverter.GetBytes(value);\n        Array.Reverse(bytes); // Convert Little-Endian to Big-Endian\n        writer.Write(bytes);\n    }\n\n    public static void WriteInt64BE(this BinaryWriter writer, long value)\n    {\n        byte[] bytes = BitConverter.GetBytes(value);\n        Array.Reverse(bytes); // Convert Little-Endian to Big-Endian\n        writer.Write(bytes);\n    }\n}