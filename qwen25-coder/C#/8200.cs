using System;\nusing System.Reflection;\nusing System.Security;\nusing System.Security.Permissions;\nusing Microsoft.CSharp;\nusing System.CodeDom.Compiler;\n\nclass Program\n{\n    static void Main()\n    {\n        // Create a new AppDomain with restricted permissions\n        var domainSetup = new AppDomainSetup { ApplicationBase = AppDomain.CurrentDomain.BaseDirectory };\n        var permSet = new PermissionSet(PermissionState.None);\n        // You can add specific permissions as needed, for example:\n        // permSet.AddPermission(new SecurityPermission(SecurityPermissionFlag.SerializationFormatter));\n\n        Sandboxer.ExecuteInSandbox(() =>\n        {\n            // Your code to compile and execute C# dynamically goes here\n            var compiler = new CSharpCodeProvider();\n            var parameters = new CompilerParameters();\n            parameters.GenerateExecutable = false;\n            parameters.GenerateInMemory = true;\n\n            string code = @" \n                using System; \n                public class DynamicClass { \n                    public static void Run() { \n                        Console.WriteLine('Hello, world!');\n                    } \n                }";\n\n            var compilerResults = compiler.CompileAssemblyFromSource(parameters, code);\n            \n            if (!compilerResults.Errors.HasErrors)\n            {\n                var assembly = compilerResults.CompiledAssembly;\n                assembly.GetType("DynamicClass").GetMethod("Run").Invoke(null, null);\n            }\n        }, permSet, domainSetup);\n    }\n}\n\npublic static class Sandboxer\n{\n    public static void ExecuteInSandbox(Action action, PermissionSet permissionSet, AppDomainSetup domainSetup)\n    {\n        var domain = AppDomain.CreateDomain("Sandbox", null, domainSetup, permissionSet);\n\n        var isolatedCode = new IsolatedCode(action);\n        try\n        {\n            domain.DoCallBack(isolatedCode.Run);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($"An exception occurred: {ex.Message}");\n        }\n        finally\n        {\n            AppDomain.Unload(domain);\n        }\n    }\n}\n\n[Serializable]\npublic class IsolatedCode : MarshalByRefObject\n{\n    private readonly Action _codeToRun;\n\n    public IsolatedCode(Action codeToRun)\n    {\n        _codeToRun = codeToRun;\n    }\n\n    public void Run()\n    {\n        _codeToRun();\n    }\n}