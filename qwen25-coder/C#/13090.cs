using System;\nusing System.Runtime.InteropServices;\n\npublic class ComObjectManager : IDisposable\n{\n    private object _comObject;\n    \n    public ComObjectManager()\n    {\n        // Assume this creates a COM object\n        // Replace with actual COM object creation code\n        Type comObjectType = Type.GetTypeFromProgID("SomeProgId");\n        _comObject = Activator.CreateInstance(comObjectType);\n    }\n\n    ~ComObjectManager()\n    {\n        Dispose(false);\n    }\n    \n    public void ReleaseComObject()\n    {\n        if (_comObject != null)\n        {\n            Marshal.ReleaseComObject(_comObject);\n            _comObject = null;\n            // You might want to set GC.Collect() and GC.WaitForPendingFinalizers()\n            // for immediate release, but this is not recommended in production.\n        }\n    }\n\n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        if (disposing)\n        {\n            ReleaseComObject();\n        }\n    }\n}