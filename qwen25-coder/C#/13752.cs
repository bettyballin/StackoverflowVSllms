protected void Application_AuthenticateRequest(Object sender, EventArgs e)\n{\n    if (HttpContext.Current.User == null || !HttpContext.Current.User.Identity.IsAuthenticated) return;\n\n    var ticket = FormsAuthentication.Decrypt(HttpContext.Current.Request.Cookies[FormsAuthentication.FormsCookieName].Value);\n    var userData = ticket.UserData;\n    \n    // Split the userData to extract session ID or any other custom data\n    string[] parts = userData.Split(':');\n    string sessionIdFromTicket = parts[0]; // Assuming first part is the session ID\n\n    if (HttpContext.Current.Session != null && HttpContext.Current.Session.SessionID != sessionIdFromTicket)\n    {\n        FormsAuthentication.SignOut();\n        HttpContext.Current.Response.Redirect(FormsAuthentication.LoginUrl);\n    }\n}\n\nprotected void FormsAuthentication_OnAuthenticate(Object sender, FormsAuthenticationEventArgs e)\n{\n    // Optionally set up the session ID in FormsAuthenticationTicket\n    if (HttpContext.Current.Session?.SessionID != null && !string.IsNullOrEmpty(e.Ticket.UserData))\n    {\n        string userDataWithSessionId = HttpContext.Current.Session.SessionID + ":" + e.Ticket.UserData;\n        var ticket = new FormsAuthenticationTicket(\n            ticketVersion: 1,\n            name: e.Ticket.Name,\n            issuedUtc: DateTime.UtcNow,\n            expiresUtc: ticket.Expiration,\n            isPersistent: ticket.IsPersistent,\n            userData: userDataWithSessionId);\n\n        string encTicket = FormsAuthentication.Encrypt(ticket);\n        var authCookie = new HttpCookie(FormsAuthentication.FormsCookieName, encTicket)\n        {\n            SameSite = SameSiteMode.Strict, // Consider using Lax for forms that might be inside an iframe\n            Secure = true,\n            HttpOnly = true\n        };\n        \n        HttpContext.Current.Response.Cookies.Add(authCookie);\n    }\n}