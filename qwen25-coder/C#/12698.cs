[AttributeUsage(AttributeTargets.Method | AttributeTargets.Class)]\n   public class AuthorizeRoleAttribute : AuthorizationFilterAttribute\n   {\n       private readonly string[] _roles;\n\n       public AuthorizeRoleAttribute(params string[] roles)\n       {\n           _roles = roles;\n       }\n\n       public override void OnAuthorization(AuthorizationContext filterContext)\n       {\n           if (filterContext == null)\n               throw new ArgumentNullException("filterContext");\n\n           if (!IsUserInAnyRole(_roles))\n           {\n               filterContext.Result = new HttpUnauthorizedResult();\n               return;\n           }\n           base.OnAuthorization(filterContext);\n       }\n\n       private bool IsUserInAnyRole(string[] roles)\n       {\n           if (roles.Any())\n           {\n               var userRoles = Roles.GetRolesForUser();\n               return roles.Intersect(userRoles).Count() > 0;\n           }\n           return false;\n       }\n   }