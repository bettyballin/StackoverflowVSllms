using Microsoft.VisualStudio.TestTools.UnitTesting;\nusing System;\n\n[TestClass]\npublic class ProductTest\n{\n    private static IProductRepository _productRepository;\n    \n    [ClassInitialize()]\n    public static void Product_Init(TestContext context)\n    {\n        // Initialize your repository with a test connection string or mock data source here.\n        _productRepository = new ProductRepository("your_test_connection_string_here");\n    }\n\n    [TestCleanup()]\n    public void Product_Cleanup()\n    {\n        // Clean up any database state after each test\n        // Consider using transactions to roll back changes if your repository supports it.\n    }\n\n    [TestMethod]\n    public void TestCreateProduct()\n    {\n        var product = new Product { Name = "Test Product", Price = 10.99M };\n        \n        int productId = _productRepository.Create(product);\n        Assert.IsTrue(productId > 0, "Expected a valid identity to be returned.");\n    }\n\n    [TestMethod]\n    public void TestReadProduct()\n    {\n        var productToCreate = new Product { Name = "Test Product", Price = 10.99M };\n        int productId = _productRepository.Create(productToCreate);\n\n        var productFromRepo = _productRepository.Read(productId);\n        Assert.IsNotNull(productFromRepo, "Expected to retrieve a non-null product.");\n        Assert.AreEqual("Test Product", productFromRepo.Name, "Product name does not match expected value.");\n    }\n\n    [TestMethod]\n    public void TestUpdateProduct()\n    {\n        var productToCreate = new Product { Name = "Original Product", Price = 10.99M };\n        int productId = _productRepository.Create(productToCreate);\n\n        var productToUpdate = _productRepository.Read(productId);\n        productToUpdate.Name = "Updated Product";\n        _productRepository.Update(productToUpdate);\n\n        var updatedProductFromRepo = _productRepository.Read(productId);\n        Assert.AreEqual("Updated Product", updatedProductFromRepo.Name, "Product name was not updated correctly.");\n    }\n\n    [TestMethod]\n    public void TestDeleteProduct()\n    {\n        var productToCreate = new Product { Name = "Test Product", Price = 10.99M };\n        int productId = _productRepository.Create(productToCreate);\n\n        _productRepository.Delete(productId);\n        \n        var deletedProduct = _productRepository.Read(productId);\n        Assert.IsNull(deletedProduct, "Expected null for a product that was supposed to be deleted.");\n    }\n}