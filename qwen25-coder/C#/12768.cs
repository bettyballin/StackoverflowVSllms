using System;\nusing System.Collections.Generic;\nusing System.Reflection;\nusing FluentNHibernate.Cfg;\nusing FluentNHibernate.Cfg.Db;\nusing FluentNHibernate.MappingModel.ClassBased;\nusing FluentNHibernate.Mapping.Providers.Hbm;\nusing NHibernate;\nusing NHibernate.Cfg;\nusing NHibernate.Impl;\n\npublic class DynamicTableModel\n{\n    public string TableName { get; set; }\n    public List<ColumnModel> Columns { get; set; } = new List<ColumnModel>();\n}\n\npublic class ColumnModel\n{\n    public string Name { get; set; }\n    public Type DataType { get; set; }\n}\n\npublic class DynamicClassMapping : ClassMappingProvider, IClassMappingProvider\n{\n    private readonly DynamicTableModel _model;\n\n    public DynamicClassMapping(DynamicTableModel model)\n    {\n        _model = model;\n    }\n\n    public HbmClass GetHibernateMapping(ICustomComponentTypeMapper mapper)\n    {\n        var classMapping = new HbmClass\n        {\n            Name = $"DynamicEntities.{_model.TableName}",\n            Table = _model.TableName,\n            Id = CreateIdMapping(_model),\n            DynamicInsert = true,\n            DynamicUpdate = true,\n            IsMutable = true\n        };\n\n        foreach (var column in _model.Columns)\n        {\n            classMapping.Properties.Add(CreatePropertyMapping(column));\n        }\n\n        return classMapping;\n    }\n\n    private HbmId CreateIdMapping(DynamicTableModel model)\n    {\n        // Assuming the first column is the ID for simplicity\n        var column = model.Columns[0];\n        return new HbmId\n        {\n            Name = column.Name,\n            Columns = { new ColumnMapping { ColumnName = column.Name, SqlType = GetDatabaseTypeName(column.DataType) } },\n            Type = new TypeReference(NHibernateUtil.GetDerivative(column.DataType))\n        };\n    }\n\n    private Property CreatePropertyMapping(ColumnModel column)\n    {\n        return new Property\n        {\n            Name = column.Name,\n            Columns =\n                { new ColumnMapping { ColumnName = column.Name, SqlType = GetDatabaseTypeName(column.DataType) } },\n            Type = new TypeReference(NHibernateUtil.GetDerivative(column.DataType))\n        };\n    }\n\n    private string GetDatabaseTypeName(Type type)\n    {\n        // Implement the logic to map .NET types to database-specific SQL data types\n        if (type == typeof(int)) return "int";\n        if (type == typeof(string)) return "varchar(255)";\n        if (type == typeof(DateTime)) return "datetime";\n        // Add other mappings as necessary\n        throw new ArgumentException("Unknown type");\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var sessionFactory = Fluently.Configure(DataBaseConfiguration.Sybase)\n            .Mappings(m =>\n            {\n                m.FluentMappings.Add(new DynamicClassMapping(new DynamicTableModel\n                {\n                    TableName = "DynamicTable1",\n                    Columns =\n                    {\n                        new ColumnModel { Name = "Id", DataType = typeof(int) },\n                        new ColumnModel { Name = "ArbitraryData", DataType = typeof(string) }\n                    }\n                }));\n            })\n            .BuildSessionFactory();\n\n        using (var session = sessionFactory.OpenSession())\n        {\n            var query = session.CreateQuery("from DynamicEntities.DynamicTable1 where Id = :id");\n            query.SetParameter("id", 2);\n            var results = query.List<object>(); // Adjust the return type as necessary\n        }\n    }\n}