using System;\nusing System.Collections.Generic;\nusing System.Reflection;\n\npublic class Test\n{\n    public void TestMessage()\n    {\n        // Initialize test array\n        List<string> arrTest = new List<string> { "Hello", "World" };\n        \n        // Invoke hook and get extra values from all available plugins\n        List<object> arrExtras = CMS.InvokeHook("HelloTest");\n        \n        // Merge arrays\n        arrTest.AddRange(arrExtras);\n        foreach (var item in arrTest)\n        {\n            Console.WriteLine(item); // Just to display the merged array elements\n        }\n    }\n}\n\npublic static class CMS\n{\n    public static List<object> InvokeHook(string methodName)\n    {\n        // Assume this function returns a list of plugin instances\n        List<object> plugins = GetPlugins();\n        \n        List<object> values = new List<object>();\n        foreach (object plugin in plugins)\n        {\n            Type type = plugin.GetType();\n            MethodInfo methodInfo = type.GetMethod(methodName);\n            \n            if (methodInfo != null)\n            {\n                // Invoke the method and add result to list\n                values.Add(methodInfo.Invoke(plugin, null));\n            }\n        }\n        \n        return values;\n    }\n\n    private static List<object> GetPlugins()\n    {\n        // This is where you would dynamically load your plugin instances\n        return new List<object>\n        {\n            new FooTest(),\n            new BarTest()\n        };\n    }\n}\n\npublic class FooTest\n{\n    public string HelloTest()\n    {\n        return "Foo";\n    }\n}\n\npublic class BarTest\n{\n    public string HelloTest()\n    {\n        return "Bar";\n    }\n}