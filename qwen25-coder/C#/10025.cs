protected void Page_Load(object sender, EventArgs e)\n{\n    string targetUrl = Request.QueryString["url"];\n\n    // Validate input to prevent SSRF attacks\n    if (!IsValidTargetUri(targetUrl))\n    {\n        Response.StatusCode = 403;\n        return;\n    }\n\n    using (var client = new WebClient())\n    {\n        try\n        {\n            string content = client.DownloadString(targetUrl);\n\n            // Basic sanitization and rewriting of URLs. This is a simplified example.\n            content = SanitizeAndRewriteUrls(content, targetUrl);\n\n            Response.Write(content);\n        }\n        catch (WebException)\n        {\n            // Handle exceptions more gracefully in production code\n            Response.StatusCode = 502;\n        }\n    }\n}\n\nprivate bool IsValidTargetUri(string uriString)\n{\n    Uri uriResult;\n    bool isValid = Uri.TryCreate(uriString, UriKind.Absolute, out uriResult);\n    return isValid && (uriResult.Scheme == "http" || uriResult.Scheme == "https");\n}\n\nprivate string SanitizeAndRewriteUrls(string content, string baseUrl)\n{\n    // This is a very basic way to replace URLs in the content.\n    // In practice, you should use a proper HTML parser like HtmlAgilityPack for this task.\n    Uri baseUri = new Uri(baseUrl);\n\n    // Example of rewriting CSS paths\n    content = Regex.Replace(content, @"url\(['""]?(?<path>[^)'"]*)['""]?\)", match =>\n    {\n        string path = match.Groups["path"].Value;\n        Uri cssUri = new Uri(baseUri, path);\n        return $"url('{Request.Url.Scheme}://{Request.Url.Host}/GetContent.aspx?url={Server.UrlEncode(cssUri.ToString())}')";\n    });\n\n    // Additional sanitization steps here, e.g., removing scripts\n    content = Regex.Replace(content, @"<script.*?>.*?</script>", string.Empty, RegexOptions.IgnoreCase | RegexOptions.Singleline);\n\n    return content;\n}