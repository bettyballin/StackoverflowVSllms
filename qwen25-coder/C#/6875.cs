using System;\nusing Castle.DynamicProxy;\n\npublic interface IVehicle\n{\n    void Drive();\n}\n\npublic class Car : IVehicle\n{\n    public void Drive()\n    {\n        Console.WriteLine("Car is driving.");\n    }\n}\n\npublic class MethodInterceptor : IInterceptor\n{\n    private int _methodCallCount = 0;\n\n    public void Intercept(IInvocation invocation)\n    {\n        _methodCallCount++;\n        Console.WriteLine($"{invocation.Method.Name} method called {_methodCallCount} times.");\n        invocation.Proceed(); // Forward the call to the actual method\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var car = new Car();\n        var generator = new ProxyGenerator();\n        var interceptor = new MethodInterceptor();\n\n        // Create a dynamic proxy that intercepts calls\n        IVehicle proxyCar = generator.CreateInterfaceProxyWithTarget<IVehicle>(car, interceptor);\n\n        proxyCar.Drive(); // Output: Drive method called 1 times. Car is driving.\n    }\n}