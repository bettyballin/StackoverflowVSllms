using System;\nusing System.Collections.Generic;\nusing DokanNet;\n\npublic class MyVirtualDrive : DokanOperations\n{\n    private readonly Dictionary<string, byte[]> files = new Dictionary<string, byte[]>();\n\n    public override NtStatus CreateFile(\n        string fileName,\n        DesiredAccess access,\n        FileShare share,\n        FileMode mode,\n        FileOptions options,\n        FileAttributes attributes,\n        IDokanFileInfo info)\n    {\n        switch (mode)\n        {\n            case FileMode.Open:\n                if (!files.ContainsKey(fileName))\n                    return NtStatus.STATUS_OBJECT_NAME_NOT_FOUND;\n                break;\n\n            case FileMode.CreateNew:\n            case FileMode.Create:\n                files[fileName] = new byte[0];\n                break;\n\n            default:\n                throw new NotSupportedException(mode.ToString());\n        }\n\n        info.IsDirectory = false; // For simplicity, assume all are files\n        return NtStatus.Success;\n    }\n\n    public override NtStatus ReadFile(\n        string fileName,\n        byte[] buffer,\n        out int bytesRead,\n        long offset,\n        IDokanFileInfo info)\n    {\n        if (!files.ContainsKey(fileName))\n            return NtStatus.STATUS_OBJECT_NAME_NOT_FOUND;\n\n        var fileContent = files[fileName];\n        bytesRead = Math.Min((int)(fileContent.Length - offset), buffer.Length);\n        Array.Copy(fileContent, (int)offset, buffer, 0, bytesRead);\n\n        return NtStatus.Success;\n    }\n\n    public override NtStatus WriteFile(\n        string fileName,\n        byte[] buffer,\n        out int bytesWritten,\n        long offset,\n        IDokanFileInfo info)\n    {\n        if (!files.ContainsKey(fileName))\n            return NtStatus.STATUS_OBJECT_NAME_NOT_FOUND;\n\n        var fileContent = files[fileName];\n        Array.Resize(ref fileContent, (int)Math.Max(fileContent.Length, offset + buffer.Length));\n        Array.Copy(buffer, 0, fileContent, (int)offset, buffer.Length);\n        bytesWritten = buffer.Length;\n        return NtStatus.Success;\n    }\n\n    public override NtStatus GetFileInformation(\n        string fileName,\n        out ByHandleFileInformation fileInfo,\n        IDokanFileInfo info)\n    {\n        if (!files.ContainsKey(fileName))\n            return NtStatus.STATUS_OBJECT_NAME_NOT_FOUND;\n\n        fileInfo = new ByHandleFileInformation\n        {\n            FileType = DokanFileType.DokanTypeUnknown, // Adjust based on your implementation\n            FileAttributes = FileAttributes.Archive,\n            FileNameLength = fileName.Length * 2, // Size of filename in bytes (unicode)\n            AllocationSize = files[fileName].Length,\n            EndOfFile = files[fileName].Length,\n        };\n        return NtStatus.Success;\n    }\n\n    public override NtStatus Cleanup(string fileName, IDokanFileInfo info)\n    {\n        return NtStatus.Success;\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var driveLetter = "Z";\n        DokanOption options = DokanOptions.DebugMode; // Enable logging\n\n        int result = Dokan.Mount(new MyVirtualDrive(), driveLetter, options);\n\n        if (result != 0)\n        {\n            Console.WriteLine("Failed to mount filesystem");\n        }\n    }\n}