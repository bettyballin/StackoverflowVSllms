using System;\nusing System.IdentityModel.Tokens.Jwt;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.IdentityModel.Tokens;\n\npublic class JwtAuthenticationService\n{\n    private readonly IHttpContextAccessor _httpContextAccessor;\n    private const string SecretKey = "your_secret_key_here_which_should_be_really_long_and_strong"; // This should be in a secure location, not hardcoded\n\n    public JwtAuthenticationService(IHttpContextAccessor httpContextAccessor)\n    {\n        _httpContextAccessor = httpContextAccessor ?? throw new ArgumentNullException(nameof(httpContextAccessor));\n    }\n\n    public void Authenticate(string username)\n    {\n        var tokenHandler = new JwtSecurityTokenHandler();\n        var key = System.Text.Encoding.ASCII.GetBytes(SecretKey);\n        var tokenDescriptor = new SecurityTokenDescriptor\n        {\n            Subject = new System.Security.Claims.ClaimsIdentity(new[] { new System.Security.Claims.Claim(System.IdentityModel.Claims.ClaimTypes.Name, username) }),\n            Expires = DateTime.UtcNow.AddDays(7),\n            SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)\n        };\n        var token = tokenHandler.CreateToken(tokenDescriptor);\n        string jwtToken = tokenHandler.WriteToken(token);\n\n        _httpContextAccessor.HttpContext.Response.Cookies.Append("token", jwtToken, new CookieOptions\n        {\n            HttpOnly = true,\n            Secure = true, // Only send over HTTPS\n            SameSite = SameSiteMode.Strict\n        });\n    }\n\n    public bool IsAuthenticated()\n    {\n        var tokenHandler = new JwtSecurityTokenHandler();\n        var key = System.Text.Encoding.ASCII.GetBytes(SecretKey);\n        string authHeader = _httpContextAccessor.HttpContext.Request.Cookies["token"];\n        if (authHeader != null)\n        {\n            try\n            {\n                tokenHandler.ValidateToken(authHeader, new TokenValidationParameters\n                {\n                    ValidateIssuerSigningKey = true,\n                    IssuerSigningKey = new SymmetricSecurityKey(key),\n                    ValidateLifetime = true,\n                    ValidateAudience = false,\n                    ValidateIssuer = false\n                }, out _);\n\n                return true;\n            }\n            catch (Exception)\n            {\n                // Handle token validation failure, possibly log or throw an exception\n            }\n        }\n\n        return false;\n    }\n}