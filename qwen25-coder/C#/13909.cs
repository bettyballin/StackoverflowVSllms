public class DomainContext : IUnitOfWork\n{\n    private readonly Dictionary<Type, object> _trackedEntities = new();\n\n    public T Get<T>(int id) where T : Entity\n    {\n        if (_trackedEntities.TryGetValue(typeof(T), out var entities))\n        {\n            return ((List<T>)entities).FirstOrDefault(e => e.Id == id);\n        }\n        // Load from repository and add to tracked entities\n        var entity = Repository.Load<T>(id);\n        Add(entity);\n        return entity;\n    }\n\n    public void Add(Entity entity)\n    {\n        if (!_trackedEntities.ContainsKey(entity.GetType()))\n            _trackedEntities[entity.GetType()] = new List<Entity>();\n\n        ((List<Entity>)_trackedEntities[entity.GetType()]).Add(entity);\n    }\n\n    public void SaveChanges()\n    {\n        foreach (var entities in _trackedEntities.Values)\n        {\n            foreach (Entity entity in entities)\n            {\n                // Decide whether to insert, update or delete\n                Repository.Save(entity);\n            }\n        }\n    }\n}\n\npublic class Service\n{\n    private readonly DomainContext _domainContext;\n\n    public Service(DomainContext domainContext)\n    {\n        _domainContext = domainContext;\n    }\n\n    public void Move(string sourceLocationId, string destinationLocationId, string itemId)\n    {\n        var item = _domainContext.Get<Item>(itemId);\n        var sourceLocation = _domainContext.Get<Location>(sourceLocationId);\n        var destinationLocation = _domainContext.Get<Location>(destinationLocationId);\n\n        if (sourceLocation != destinationLocation)\n        {\n            sourceLocation.Items.Remove(item);\n            destinationLocation.Items.Add(item);\n        }\n\n        _domainContext.SaveChanges();\n    }\n}\n\npublic abstract class Entity\n{\n    public int Id { get; set; }\n}\n\npublic class Item : Entity { /* ... */ }\n\npublic class Location : Entity \n{ \n    public ICollection<Item> Items { get; } = new List<Item>();\n}