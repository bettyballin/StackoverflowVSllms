public class ManagedBitmapWrapper\n{\n    private IntPtr _unmanagedHBITMAP;\n    \n    public ManagedBitmapWrapper(IntPtr unmanagedHBITMAP)\n    {\n        _unmanagedHBITMAP = unmanagedHBITMAP;\n        // Notify the GC about the additional memory pressure caused by the unmanaged resource.\n        GC.AddMemoryPressure(2 * 1024 * 1024); // 2 MB\n    }\n\n    ~ManagedBitmapWrapper()\n    {\n        FreeUnmanagedResources();\n        // Inform the GC that the memory pressure has been released.\n        GC.RemoveMemoryPressure(2 * 1024 * 1024);\n    }\n\n    private void FreeUnmanagedResources()\n    {\n        // Code to free _unmanagedHBITMAP\n        if (_unmanagedHBITMAP != IntPtr.Zero)\n        {\n            DeleteObject(_unmanagedHBITMAP); // Assuming you have this method declared with DLLImport\n            _unmanagedHBITMAP = IntPtr.Zero;\n        }\n    }\n\n    [DllImport("gdi32.dll")]\n    private static extern bool DeleteObject(IntPtr hObject);\n}