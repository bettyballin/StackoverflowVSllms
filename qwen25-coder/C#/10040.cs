using System;\nusing System.Diagnostics;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Stopwatch stopwatch = new Stopwatch();\n        Process currentProcess = Process.GetCurrentProcess();\n\n        int maxIterations = 1000000; // Example: set this to the max desired iterations\n        int logInterval = 100000;     // Log peak memory usage every X iterations\n\n        for (int i = 0; i < maxIterations; i++)\n        {\n            // Simulate some work\n            DoWork();\n\n            if (i % logInterval == 0)\n            {\n                stopwatch.Start();\n                long currentPeakWorkingSet64 = currentProcess.PeakWorkingSet64;\n                stopwatch.Stop();\n\n                Console.WriteLine($"Iteration: {i}, Peak Working Set: {currentPeakWorkingSet64 / 1024} KB, Time taken to measure: {stopwatch.ElapsedTicks}");\n            }\n        }\n\n        // Final logging\n        long finalPeakWorkingSet64 = currentProcess.PeakWorkingSet64;\n        Console.WriteLine($"Final Iteration: {maxIterations}, Peak Working Set: {finalPeakWorkingSet64 / 1024} KB");\n    }\n\n    static void DoWork()\n    {\n        // Simulate some processing here\n        var data = new byte[1024]; // Allocates a small chunk of memory\n        GC.KeepAlive(data); // Prevents the JIT compiler from optimizing this away\n    }\n}