public class RateLimiterAttribute : ActionFilterAttribute\n{\n    private static readonly Dictionary<string, int> requestCounts = new Dictionary<string, int>();\n    private static Timer resetTimer;\n\n    public override void OnActionExecuting(ActionExecutingContext filterContext)\n    {\n        var ip = filterContext.HttpContext.Request.UserHostAddress;\n        if (requestCounts.ContainsKey(ip))\n        {\n            requestCounts[ip]++;\n            if (requestCounts[ip] > 10) // Allow max 10 requests\n            {\n                filterContext.Result = new HttpNotFoundResult();\n                return;\n            }\n        }\n        else\n        {\n            requestCounts[ip] = 1;\n        }\n\n        if (resetTimer == null)\n        {\n            resetTimer = new Timer(state => ResetCounters(), null, TimeSpan.FromMinutes(1), TimeSpan.FromHours(24)); // Resets every 24 hours\n        }\n    }\n\n    private static void ResetCounters()\n    {\n        requestCounts.Clear();\n    }\n}