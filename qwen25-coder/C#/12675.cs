using NUnit.Framework;\nusing Moq;\n\npublic interface IMapinfo\n{\n    void Do(string cmd);\n    string Eval(string cmd);\n}\n\npublic class Table\n{\n    private readonly IMapinfo _mi;\n\n    public Table(IMapinfo mi)\n    {\n        _mi = mi;\n    }\n\n    public string Name\n    {\n        get { return _mi.Eval("TableInfo(1,1)"); }\n    }\n}\n\n[TestFixture]\npublic class TableTests\n{\n    [Test]\n    public void TestTableName()\n    {\n        // Arrange: Setup the mock of IMapinfo\n        var mockMi = new Mock<IMapinfo>();\n        mockMi.Setup(x => x.Eval("TableInfo(1,1)")).Returns("Water_Mains");\n\n        // Initialize Table with the mocked IMapinfo\n        var table = new Table(mockMi.Object);\n\n        // Act: Get the Name property\n        var tableName = table.Name;\n\n        // Assert: Check that the correct result is returned and Eval was called with expected argument\n        Assert.AreEqual("Water_Mains", tableName);\n        mockMi.Verify(x => x.Eval("TableInfo(1,1)"), Times.Once());\n    }\n}