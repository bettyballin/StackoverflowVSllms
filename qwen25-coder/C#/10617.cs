using System;\n\npublic class Range\n{\n    public int Offset { get; set; }\n    public int Length { get; set; }\n\n    public Range(int offset, int length)\n    {\n        Offset = offset;\n        Length = length;\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        Range[] ranges = new Range[]\n        {\n            new Range(100, 10),\n            new Range(110, 2),\n            new Range(112, 5),\n            new Range(117, 3),\n            new Range(300, 5),\n            new Range(305, 5),\n            new Range(400, 5),\n            new Range(405, 10),\n            new Range(415, 2),\n            new Range(417, 4),\n            new Range(421, 7),\n            new Range(428, 1),\n            new Range(429, 6),\n            new Range(500, 4),\n            new Range(504, 9)\n        };\n\n        int[] longestIndices = FindLongestContiguousSubsequence(ranges);\n        Console.WriteLine("Longest contiguous subsequence indices: {0} - {1}", longestIndices[0], longestIndices[1]);\n    }\n\n    public static int[] FindLongestContiguousSubsequence(Range[] ranges)\n    {\n        if (ranges == null || ranges.Length == 0)\n            return new int[] { -1, -1 };\n\n        int currentStart = 0;\n        int currentEnd = 0;\n        int longestStart = 0;\n        int longestEnd = 0;\n\n        for (int i = 1; i < ranges.Length; i++)\n        {\n            if (ranges[i].Offset == ranges[currentEnd].Offset + ranges[currentEnd].Length)\n            {\n                currentEnd = i;\n            }\n            else\n            {\n                if (currentEnd - currentStart > longestEnd - longestStart)\n                {\n                    longestStart = currentStart;\n                    longestEnd = currentEnd;\n                }\n\n                currentStart = i;\n                currentEnd = i;\n            }\n        }\n\n        // Final check for the last sequence\n        if (currentEnd - currentStart >= longestEnd - longestStart)\n        {\n            longestStart = currentStart;\n            longestEnd = currentEnd;\n        }\n\n        return new int[] { longestStart, longestEnd };\n    }\n}