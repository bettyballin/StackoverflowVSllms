using System;\n\npublic class TimeZoneResolver\n{\n    public static string GuessTimeZone(int minutesOffset)\n    {\n        var targetUtcOffset = TimeSpan.FromMinutes(minutesOffset);\n        DateTime now = DateTime.UtcNow;\n        \n        // Loop through each time zone and check if the converted UTC to local matches the desired offset.\n        foreach (var timeZoneInfo in TimeZoneInfo.GetSystemTimeZones())\n        {\n            try\n            {\n                DateTimeOffset convertedTime = new DateTimeOffset(now, TimeSpan.Zero).ToOffset(timeZoneInfo.BaseUtcOffset);\n                DateTimeOffset adjustedTime = convertedTime + timeZoneInfo.GetAdjustmentRules().Where(r => r.DateStart <= now && (r.DateEnd > now || r.DateEnd == DateTime.MaxValue)).SelectMany(rule => rule.DaylightTransitionStart.TimeParts.Concat(rule.DaylightTransitionEnd.TimeParts)).DefaultIfEmpty(timeZoneInfo.BaseUtcOffset).Max();\n                if (adjustedTime.Offset.TotalMinutes == minutesOffset)\n                {\n                    return timeZoneInfo.Id;\n                }\n            }\n            catch\n            {\n                // Handle any exceptions that may occur due to invalid rules.\n                continue;\n            }\n        }\n\n        return "Unknown";  // Return a default value or handle the case where no match is found\n    }\n}