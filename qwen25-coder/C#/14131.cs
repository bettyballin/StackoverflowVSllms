protected void Page_Load(object sender, EventArgs e)\n{\n    if (!IsPostBack)\n    {\n        // Example data from database\n        var propertyDefinitions = new List<PropertyDefinition>\n        {\n            new PropertyDefinition { Name = "Category", Type = "DropDownList" },\n            new PropertyDefinition { Name = "Description", Type = "TextBox" }\n        };\n\n        foreach (var property in propertyDefinitions)\n        {\n            Control control;\n            IValidator validator;\n\n            switch (property.Type)\n            {\n                case "DropDownList":\n                    var dropDownList = new DropDownList { ID = property.Name + "_ddl" };\n                    dropDownList.Items.Add(new ListItem("Option1", "1"));\n                    dropDownList.Items.Add(new ListItem("Option2", "2"));\n                    control = dropDownList;\n\n                    // Assuming a RequiredFieldValidator\n                    validator = new RequiredFieldValidator\n                    {\n                        ID = property.Name + "_rfv",\n                        ControlToValidate = dropDownList.ID,\n                        ErrorMessage = property.Name + " is required."\n                    };\n                    break;\n                case "TextBox":\n                    var textBox = new TextBox { ID = property.Name + "_txt" };\n                    control = textBox;\n\n                    // Assuming a RegularExpressionValidator for alphanumeric\n                    validator = new RegularExpressionValidator\n                    {\n                        ID = property.Name + "_rev",\n                        ControlToValidate = textBox.ID,\n                        ErrorMessage = property.Name + " must be alphanumeric.",\n                        ValidationExpression = @"^[a-zA-Z0-9]*$"\n                    };\n                    break;\n                default:\n                    continue; // Skip unsupported types or add more cases\n            }\n\n            // Add the control to the page's form (or a containing panel)\n            this.form1.Controls.Add(new Label { AssociatedControlID = control.ID, Text = property.Name + ": " });\n            this.form1.Controls.Add(control);\n\n            // Add the validator to the page's form (or a containing panel)\n            this.form1.Controls.Add(validator);\n        }\n    }\n}\n\n// Example class representing a property definition from your database\npublic class PropertyDefinition\n{\n    public string Name { get; set; }\n    public string Type { get; set; } // 'DropDownList', 'TextBox', etc.\n}