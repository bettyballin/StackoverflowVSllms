using System;\nusing System.Runtime.InteropServices;\nusing System.Text;\n\nclass DbgView\n{\n    private const int DEBUG_STRING_EVENT = 0x1;\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct DEBUG_EVENT\n    {\n        public int dwDebugEventCode; // Type of debugging event\n        public int dwProcessId;       // Process ID of the thread causing this event\n        public int dwThreadId;        // Thread ID of the thread causing this event\n        public DebugStringInfo u;\n        [StructLayout(LayoutKind.Sequential)]\n        public struct DebugStringInfo\n        {\n            public IntPtr lpDebugStringData;\n            public int fUnicode;\n            public int nDebugStringLength;\n        }\n    }\n\n    [DllImport("kernel32.dll", SetLastError = true)]\n    private static extern bool WaitForDebugEvent(ref DEBUG_EVENT debugEvent, uint dwMilliseconds);\n\n    [DllImport("kernel32.dll")]\n    private static extern void ContinueDebugEvent(int dwProcessId, int dwThreadId, uint dwContinueStatus);\n\n    public static void ListenForOutputDebugStrings(uint timeout = 100)\n    {\n        while (true)\n        {\n            var debugEvent = new DEBUG_EVENT();\n            bool result = WaitForDebugEvent(ref debugEvent, timeout);\n            if (!result) continue; // Timeout or other error\n\n            try\n            {\n                if (debugEvent.dwDebugEventCode == DEBUG_STRING_EVENT)\n                {\n                    var debugStringInfo = debugEvent.u;\n                    string str = debugStringInfo.fUnicode != 0 ?\n                        Marshal.PtrToStringUni(debugStringInfo.lpDebugStringData, debugStringInfo.nDebugStringLength) :\n                        Marshal.PtrToStringAnsi(debugStringInfo.lpDebugStringData, debugStringInfo.nDebugStringLength);\n                    Console.WriteLine(str);\n                }\n            }\n            finally\n            {\n                ContinueDebugEvent(debugEvent.dwProcessId, debugEvent.dwThreadId, 0x10001); // DBG_CONTINUE\n            }\n        }\n    }\n\n    static void Main(string[] args)\n    {\n        // Attach to any running process you want to capture OutputDebugString calls from\n        // This example just listens indefinitely; in a real application, you would probably have some way to stop it.\n        ListenForOutputDebugStrings();\n    }\n}