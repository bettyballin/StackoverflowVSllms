using System;\nusing System.Collections.Generic;\n\npublic class Point\n{\n    public double X { get; set; }\n    public double Y { get; set; }\n\n    public Point(double x, double y)\n    {\n        X = x;\n        Y = y;\n    }\n}\n\npublic class Program\n{\n    public static List<Point> FindAllPointsInLine(Point start, Point end, int minDistanceApart)\n    {\n        var points = new List<Point>();\n        double dx = end.X - start.X;\n        double dy = end.Y - start.Y;\n        \n        double length = Math.Sqrt(dx * dx + dy * dy);\n        \n        // No points can be placed if the line segment is shorter than minDistanceApart\n        if (length < minDistanceApart)\n            return points;\n\n        // Unit direction vector components\n        double ux = dx / length;\n        double uy = dy / length;\n\n        Point currentPoint = new Point(start.X, start.Y);\n        points.Add(currentPoint);\n\n        while (true)\n        {\n            if (GetDistanceBetweenPoints(currentPoint, end) < minDistanceApart)\n                break;\n\n            // Move to next point\n            currentPoint = new Point(currentPoint.X + ux * minDistanceApart, currentPoint.Y + uy * minDistanceApart);\n            points.Add(currentPoint);\n        }\n\n        return points;\n    }\n\n    public static double GetDistanceBetweenPoints(Point a, Point b)\n    {\n        return Math.Sqrt((a.X - b.X) * (a.X - b.X) + (a.Y - b.Y) * (a.Y - b.Y));\n    }\n\n    public static void Main()\n    {\n        var start = new Point(0, 0);\n        var end = new Point(10, 10);\n        int minDistanceApart = 2;\n\n        var result = FindAllPointsInLine(start, end, minDistanceApart);\n\n        foreach (var point in result)\n        {\n            Console.WriteLine($"Point: ({point.X}, {point.Y})");\n        }\n    }\n}