using System;\nusing System.Reflection;\n\npublic interface IMyInterface\n{\n    void MyMethod();\n}\n\npublic class MyDispatchProxy : DispatchProxy\n{\n    private readonly InvocationHandler _handler;\n\n    protected override object Invoke(MethodInfo targetMethod, object[] args)\n    {\n        return _handler(targetMethod, args);\n    }\n\n    public static T Create<T>(InvocationHandler handler) where T : class\n    {\n        var proxy = Create<T, MyDispatchProxy>();\n        ((MyDispatchProxy)proxy).Attach(handler);\n        return proxy;\n    }\n\n    private void Attach(InvocationHandler handler)\n    {\n        _handler = handler;\n    }\n}\n\npublic delegate object InvocationHandler(MethodInfo method, object[] arguments);\n\nclass Program\n{\n    static void Main()\n    {\n        var proxy = MyDispatchProxy.Create<IMyInterface>((method, arguments) =>\n        {\n            Console.WriteLine($"Method {method.Name} called");\n            return null;\n        });\n\n        proxy.MyMethod(); // Output: Method MyMethod called\n    }\n}