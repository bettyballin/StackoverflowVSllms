using System;\nusing System.Collections.Generic;\n\npublic class TrieNode\n{\n    public Dictionary<char, TrieNode> Children { get; set; } = new Dictionary<char, TrieNode>();\n    public bool IsEndOfWord { get; set; }\n}\n\npublic class Trie\n{\n    private readonly TrieNode root = new TrieNode();\n\n    public void Insert(string word)\n    {\n        TrieNode node = root;\n        foreach (char c in word)\n        {\n            if (!node.Children.ContainsKey(c))\n            {\n                node.Children[c] = new TrieNode();\n            }\n            node = node.Children[c];\n        }\n        node.IsEndOfWord = true;\n    }\n\n    public List<string> SearchText(string text, IEnumerable<string> terms)\n    {\n        HashSet<string> matchedTerms = new HashSet<string>();\n        foreach (string term in terms)\n        {\n            Insert(term);\n        }\n\n        // Traverse each character in the text\n        for (int i = 0; i < text.Length; i++)\n        {\n            TrieNode current = root;\n            int index = i;\n\n            while (index < text.Length && current.Children.ContainsKey(text[index]))\n            {\n                current = current.Children[text[index]];\n                if (current.IsEndOfWord)\n                {\n                    matchedTerms.Add(text.Substring(i, index - i + 1));\n                    break; // No need to search further for the same match starting at 'i'\n                }\n                index++;\n            }\n        }\n\n        return new List<string>(matchedTerms);\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        string text = "Your large input text goes here..."; // Simulate large text\n        string[] terms = { "term1", "term2", ..., "term1000" }; // Your list of 1000 terms\n\n        Trie trie = new Trie();\n        List<string> matchedTerms = trie.SearchText(text, terms);\n\n        Console.WriteLine("Matched Terms:");\n        foreach (var term in matchedTerms)\n        {\n            Console.WriteLine(term);\n        }\n    }\n}