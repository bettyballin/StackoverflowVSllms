using System.Collections.Generic;\nusing System.Linq;\nusing NUnit.Framework;\n\n[TestFixture]\npublic class RandomReshuffleTests\n{\n    [Test, Repeat(10)]\n    public void TestRandomReshuffle()\n    {\n        // Arrange\n        List<int> originalSequence = new List<int> { 1, 2, 3, 4, 5 };\n        List<int> reshuffledSequence;\n\n        // Act\n        reshuffledSequence = Shuffle(originalSequence);\n\n        // Assert\n        // Check length\n        Assert.AreEqual(originalSequence.Count, reshuffledSequence.Count);\n        \n        // Check same values\n        Assert.IsTrue(Enumerable.SequenceEqual(originalSequence.OrderBy(x => x), reshuffledSequence.OrderBy(x => x)));\n        \n        // Assert that the sequences are not in the same order at least once during test repetition\n        if (originalSequence.SequenceEqual(reshuffledSequence))\n        {\n            Assert.Fail("Reshuffled sequence is in the same order as the original sequence.");\n        }\n    }\n\n    private List<int> Shuffle(List<int> list)\n    {\n        // Simple shuffle implementation using Fisher-Yates algorithm\n        Random rng = new Random();\n        int n = list.Count;\n        while (n > 1)\n        {\n            n--;\n            int k = rng.Next(n + 1);\n            int value = list[k];\n            list[k] = list[n];\n            list[n] = value;\n        }\n        return list;\n    }\n}