using System;\nusing System.Collections.Generic;\nusing System.IO;\n\npublic class DataCache\n{\n    private static readonly List<string> _cachedData = new List<string>();\n    private static DateTime? _lastModifiedTime;\n    private static object _lockObject = new object();\n\n    public static List<string> GetData(string filePath, TimeSpan cacheDuration)\n    {\n        lock (_lockObject)\n        {\n            var fileInfo = new FileInfo(filePath);\n\n            // Check if the file has been modified since last read\n            if (_lastModifiedTime == null || fileInfo.LastWriteTime != _lastModifiedTime ||\n                DateTime.Now - (DateTime)_lastModifiedTime > cacheDuration)\n            {\n                using (var reader = new StreamReader(fileInfo.FullName))\n                {\n                    _cachedData.Clear();\n                    string line;\n                    while ((line = reader.ReadLine()) != null)\n                    {\n                        _cachedData.Add(line);\n                    }\n                }\n\n                // Update the last modified time\n                _lastModifiedTime = fileInfo.LastWriteTime;\n            }\n\n            return new List<string>(_cachedData);  // Return a copy of the list to prevent modifications\n        }\n    }\n}