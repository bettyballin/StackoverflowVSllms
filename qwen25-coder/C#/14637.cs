using System;\nusing System.Net;\n\npublic class CIDR\n{\n    public IPAddress Address { get; }\n    public int PrefixLength { get; }\n\n    private CIDR(IPAddress address, int prefixLength)\n    {\n        Address = address;\n        PrefixLength = prefixLength;\n    }\n\n    public static CIDR Parse(string s)\n    {\n        var parts = s.Split('/');\n        if (parts.Length != 2) throw new ArgumentException("Invalid CIDR format.");\n\n        if (!IPAddress.TryParse(parts[0], out var address))\n            throw new FormatException("Invalid IP address in CIDR string.");\n\n        if (!int.TryParse(parts[1], out var prefixLength))\n            throw new FormatException("Invalid prefix length in CIDR string.");\n\n        int expectedPrefixLength = address.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork ? 32 : 128;\n\n        if (prefixLength < 0 || prefixLength > expectedPrefixLength)\n            throw new ArgumentOutOfRangeException(nameof(prefixLength), $"Prefix length must be between 0 and {expectedPrefixLength}.");\n\n        return new CIDR(address, prefixLength);\n    }\n\n    public override string ToString()\n    {\n        return $"{Address}/{PrefixLength}";\n    }\n}