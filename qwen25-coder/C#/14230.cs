using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing Microsoft.Practices.Unity;\nusing System.Linq;\n\npublic interface IOperation\n{\n    double Execute(double a, double b);\n}\n\npublic class Add : IOperation\n{\n    public double Execute(double a, double b) => a + b;\n}\n\npublic class Subtract : IOperation\n{\n    public double Execute(double a, double b) => a - b;\n}\n\npublic class Multiply : IOperation\n{\n    public double Execute(double a, double b) => a * b;\n}\n\nclass Program\n{\n    static IUnityContainer LoadOperationsFromXml(string pathToConfig)\n    {\n        var container = new UnityContainer();\n        var xmlConfig = File.ReadAllText(pathToConfig);\n\n        // Load the XML configuration into the container\n        UnityConfigurationSection configSection = Microsoft.Practices.Unity.Configuration.UnityConfigurationSection\n            .Deserialize(xmlConfig);\n        \n        configSection.Configure(container, "MyContainer");\n        return container;\n    }\n\n    static void Main(string[] args)\n    {\n        var pathToXmlConfig = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "config.xml");\n\n        var container = LoadOperationsFromXml(pathToXmlConfig);\n\n        // Resolve all registered operations\n        IEnumerable<IOperation> operations = container.ResolveAll<IOperation>();\n\n        double a = 10;\n        double b = 5;\n\n        foreach (var operation in operations)\n        {\n            Console.WriteLine($"Result: {operation.Execute(a, b)}");\n        }\n    }\n}