using System;\nusing System.IO;\nusing System.Security;\nusing System.Security.Permissions;\n\nclass Program {\n    static void Main(string[] args) {\n        var fileIo = new FileIOPermission(PermissionState.Unrestricted);\n        var secuPerm = new SecurityPermission(SecurityPermissionFlag.Assertion);\n        PermissionSet set = new PermissionSet(PermissionState.None); // Start with no permissions\n        set.AddPermission(fileIo);\n        set.Deny(); // Deny file I/O, but not assertion (since we want to test assertion denial)\n        secuPerm.Deny(); // Specifically deny the ability to assert\n\n        try {\n            ReadFileSystem();\n        } catch (SecurityException ex) {\n            Console.WriteLine("SecurityException caught: " + ex.Message);\n        }\n\n        Console.Read();\n    }\n\n    private static void ReadFileSystem() {\n        var fileIo = new FileIOPermission(FileIOPermissionAccess.Read, "C:/");\n        \n        try {\n            // Attempt to assert the read permission\n            fileIo.Assert(); // This should throw a SecurityException if assertion is denied\n            DirectoryInfo dir = new DirectoryInfo("C:/");\n            foreach (var d in dir.GetDirectories()) {\n                Console.WriteLine(d.Name);\n            }\n        } catch (SecurityException ex) {\n            Console.WriteLine("Assertion failed: " + ex.Message);\n        } finally {\n            // This will revert the deny action locally if necessary\n            CodeAccessPermission.RevertDeny();\n        }\n    }\n}