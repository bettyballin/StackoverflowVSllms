using System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Linq;\n\npublic class DataTableDuplicatorFinder\n{\n    public static HashSet<string> FindDuplicateImportIds(DataTable dataTable)\n    {\n        var seenRows = new HashSet<string>();\n        var duplicates = new HashSet<string>();\n\n        foreach (DataRow row in dataTable.Rows)\n        {\n            // Convert each row values to a string for unique comparison\n            var rowHash = string.Join("|", row.ItemArray.Select(item => item.ToString()));\n\n            if (!seenRows.Add(rowHash)) // If the hash is already added, it's a duplicate\n            {\n                duplicates.Add(row["import_id"].ToString());\n            }\n        }\n\n        return duplicates;\n    }\n\n    public static DataTable GetDistinctDataTable(DataTable originalTable)\n    {\n        HashSet<string> seen = new HashSet<string>();\n        DataTable distinctTable = originalTable.Clone();\n\n        foreach (DataRow row in originalTable.Rows)\n        {\n            var rowHash = string.Join("|", row.ItemArray.Select(item => item.ToString()));\n            \n            if (seen.Add(rowHash))\n            {\n                distinctTable.ImportRow(row);\n            }\n        }\n\n        return distinctTable;\n    }\n}\n\n// Usage\nDataTable importRows = new DataTable();\n// ... populate your DataTable here\n\nvar duplicateIds = DataTableDuplicatorFinder.FindDuplicateImportIds(importRows);\nConsole.WriteLine("Duplicate IDs: " + string.Join(", ", duplicateIds));\n\nDataTable uniqueRows = DataTableDuplicatorFinder.GetDistinctDataTable(importRows);