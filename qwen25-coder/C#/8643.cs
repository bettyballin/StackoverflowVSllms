class OneUseBackgroundOp\n{\n    // background args\n    private string _x;\n    private object _y;\n    private long _z;\n\n    // background results\n    private DateTime _a;  // No need for volatile if written before Set()\n    private double _b;\n    private object _c;\n\n    // thread control\n    private Thread _task;\n    private ManualResetEvent _completedSignal;\n    private volatile bool _completed;  // Volatile is needed for this single-writer flag\n\n    public bool DoSomething(string x, object y, long z, int initialWaitMs)\n    {\n        _x = x;\n        _y = y;\n        _z = z;\n\n        _completedSignal = new ManualResetEvent(false);\n\n        _task = new Thread(Task);\n        _task.IsBackground = true;\n        _task.Start();\n\n        bool doneWithinWait = _completedSignal.WaitOne(initialWaitMs);\n\n        return doneWithinWait;\n    }\n\n    public bool Completed\n    {\n        get\n        {\n            return _completed;\n        }\n    }\n\n    private void Task()\n    {\n        // perform possibly long-running work here\n\n        // assign the result fields _a, _b, _c here\n\n        _completed = true;  // This assignment is marked as volatile\n        _completedSignal.Set();\n    }\n}