using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Pkcs;\nusing System.Security.Cryptography.X509Certificates;\n\nclass Program\n{\n    static void Main()\n    {\n        string pdfPath = "document.pdf";\n        string outputPdfPath = "signed_document.pdf";\n        string certificatePath = "your_certificate.pfx";\n        string password = "your_cert_password";\n\n        byte[] data = File.ReadAllBytes(pdfPath);\n\n        // Load the X.509 certificate with private key.\n        var cert = new X509Certificate2(certificatePath, password, X509KeyStorageFlags.Exportable);\n\n        // Hash the PDF content\n        using (var sha256Alg = SHA256.Create())\n        {\n            byte[] hash = sha256Alg.ComputeHash(data);\n\n            // Sign the hash with the private key from the certificate.\n            var signedCms = new SignedCms(new ContentInfo(hash), true);\n            CmsSigner signer = new CmsSigner(SubjectIdentifierType.SubjectKeyIdentifier, cert);\n            signedCms.ComputeSignature(signer);\n\n            // Encode a CMS/PKCS #7 message\n            byte[] signatureValue = signedCms.Encode();\n\n            // Append the signature to the PDF (this part is highly simplified and won't work as-is)\n            using (FileStream fsOutput = new FileStream(outputPdfPath, FileMode.Create))\n            {\n                fsOutput.Write(data, 0, data.Length);\n                fsOutput.Write(signatureValue, 0, signatureValue.Length); // This line is incorrect for valid PDF signing\n            }\n\n            Console.WriteLine("PDF signed and written output to " + outputPdfPath);\n        }\n    }\n}