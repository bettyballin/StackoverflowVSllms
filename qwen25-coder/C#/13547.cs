using System;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Linq;\nusing System.Xml.Linq;\n\npublic void ImportXmlToSql(string xmlFilePath)\n{\n    // Load XML file\n    XDocument xmlDoc = XDocument.Load(xmlFilePath);\n\n    // Connection string to connect to SQL Server\n    string connectionString = "YourConnectionStringHere";\n    \n    using (SqlConnection sqlConnection = new SqlConnection(connectionString))\n    {\n        sqlConnection.Open();\n\n        foreach (var table in xmlDoc.Descendants("table"))\n        {\n            string tableName = (string)table.Attribute("name");\n\n            DataTable dataTable = new DataTable(tableName);\n            \n            // Define columns based on fields\n            foreach (var field in table.Element("fields").Descendants("field"))\n            {\n                string fieldName = (string)field.Attribute("name");\n                switch ((int)field.Attribute("type"))\n                {\n                    case 1:\n                        dataTable.Columns.Add(fieldName, typeof(string));\n                        break;\n                    case 9: // Assuming '9' maps to DateTime\n                        dataTable.Columns.Add(fieldName, typeof(DateTime));\n                        break;\n                    case 3:\n                        dataTable.Columns.Add(fieldName, typeof(int));\n                        break;\n                    case 8: // Assuming '8' maps to decimal or money\n                        dataTable.Columns.Add(fieldName, typeof(decimal));\n                        break;\n                }\n            }\n\n            // Parse rows and add to the DataTable\n            foreach (var row in table.Element("data").Descendants("row"))\n            {\n                DataRow dataRow = dataTable.NewRow();\n                int i = 0;\n                foreach (XText textNode in row.Nodes().OfType<XText>())\n                {\n                    try\n                    {\n                        switch (dataTable.Columns[i].DataType.Name)\n                        {\n                            case "Decimal":\n                                decimal parsedValue = decimal.Parse(textNode.Value, System.Globalization.NumberStyles.Float, new System.Globalization.CultureInfo("en-US"));\n                                dataRow[i] = parsedValue;\n                                break;\n                            case "DateTime":\n                                DateTime dateTimeParsed;\n                                if (DateTime.TryParseExact(textNode.Value, "dd.MM.yyyy HH:mm:ss", null, System.Globalization.DateTimeStyles.None, out dateTimeParsed) ||\n                                    DateTime.TryParseExact(textNode.Value, "dd.MM.yyyy", null, System.Globalization.DateTimeStyles.None, out dateTimeParsed))\n                                {\n                                    dataRow[i] = dateTimeParsed;\n                                }\n                                else\n                                {\n                                    throw new FormatException("Date format is incorrect");\n                                }\n                                break;\n                            default:\n                                dataRow[i] = textNode.Value.Trim();\n                                break;\n                        }\n                    }\n                    catch (FormatException fe)\n                    {\n                        Console.WriteLine($"Format error in row: {i}, column: {(string)table.Element("fields").Descendants("field").ElementAt(i).Attribute("name")}. Error: {fe.Message}");\n                        continue; // Skip this row and try the next\n                    }\n\n                    i++;\n                }\n                dataTable.Rows.Add(dataRow);\n            }\n\n            // Bulk insert into SQL\n            using (SqlBulkCopy bulkCopy = new SqlBulkCopy(sqlConnection))\n            {\n                bulkCopy.DestinationTableName = tableName;\n                try\n                {\n                    bulkCopy.WriteToServer(dataTable);\n                    Console.WriteLine($"Successfully imported {dataTable.Rows.Count} rows to table {tableName}");\n                }\n                catch (Exception e)\n                {\n                    Console.WriteLine($"Error importing data into table {tableName}: {e.Message}");\n                }\n            }\n        }\n    }\n}