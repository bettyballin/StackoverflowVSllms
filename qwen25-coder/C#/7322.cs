public class WebConfigFilter : IHttpModule\n{\n    public void Init(HttpApplication context)\n    {\n        context.BeginRequest += (sender, args) =>\n        {\n            HttpContext.Current.Response.Filter = new MyCustomResponseFilter(HttpContext.Current.Response.Filter);\n        };\n    }\n\n    public void Dispose() { }\n}\n\npublic class MyCustomResponseFilter : Stream\n{\n    private Stream ResponseStream;\n\n    public MyCustomResponseFilter(Stream responseStream)\n    {\n        ResponseStream = responseStream;\n    }\n\n    // Override other methods as needed to ensure they're not modifying the stream unexpectedly\n\n    public override void Write(byte[] buffer, int offset, int count)\n    {\n        var originalContent = new StreamReader(new MemoryStream(buffer, offset, count)).ReadToEnd();\n        \n        // Ensure no modifications that could affect comments\n        byte[] modifiedData = System.Text.Encoding.UTF8.GetBytes(originalContent);\n        ResponseStream.Write(modifiedData, 0, modifiedData.Length);\n    }\n\n    public override bool CanRead { get { return true; } }\n    public override bool CanSeek { get { return false; } }\n    public override bool CanWrite { get { return true; } }\n    public override void Flush() { ResponseStream.Flush(); }\n    public override long Length { get { throw new NotSupportedException("Length not supported."); } }\n    public override long Position\n    {\n        get { throw new NotSupportedException("Position not supported."); }\n        set { throw new NotSupportedException("Position not supported."); }\n    }\n\n    public override int Read(byte[] buffer, int offset, int count) { return -1; }\n    public override long Seek(long offset, SeekOrigin origin) { throw new NotSupportedException(); }\n    public override void SetLength(long value) { throw new NotSupportedException(); }\n}