using System;\nusing System.IO;\nusing System.Net;\n\npublic class RequestLogger\n{\n    public static void LogRequest(HttpWebRequest request)\n    {\n        Console.WriteLine($"Method: {request.Method}");\n        Console.WriteLine($"URL: {request.RequestUri}");\n        Console.WriteLine($"Content-Type: {request.ContentType}");\n\n        // Headers\n        Console.WriteLine("Headers:");\n        foreach (string header in request.Headers.AllKeys)\n        {\n            Console.WriteLine($"{header}: {request.Headers[header]}");\n        }\n\n        if (request.Method == "POST" || request.Method == "PUT")\n        {\n            using (Stream stream = request.GetRequestStream())\n            {\n                using (var reader = new StreamReader(stream))\n                {\n                    // To actually read the stream, you would need to clone or reset it after reading.\n                    // Here we can't directly read from a request stream that's being written to.\n                    Console.WriteLine("RequestBody: Cannot log here as the stream is not yet readable.");\n                }\n            }\n        }\n\n        Console.WriteLine(new string('-', 50));\n    }\n\n    public static void Main()\n    {\n        HttpWebRequest request = (HttpWebRequest)WebRequest.Create("https://example.com/api/data");\n        request.Method = "POST";\n        request.ContentType = "application/json";\n\n        // Adding a header for demonstration\n        request.Headers.Add(HttpRequestHeader.Authorization, "Bearer your_token_here");\n\n        LogRequest(request);\n\n        using (var streamWriter = new StreamWriter(request.GetRequestStream()))\n        {\n            string json = "{\"key\":\"value\"}";\n            streamWriter.Write(json);\n        }\n\n        try\n        {\n            var response = (HttpWebResponse)request.GetResponse();\n            var responseString = new StreamReader(response.GetResponseStream()).ReadToEnd();\n            Console.WriteLine($"Response: {responseString}");\n        }\n        catch (WebException ex)\n        {\n            var response = (HttpWebResponse)ex.Response;\n            if (response != null)\n            {\n                Console.WriteLine($"Status Code : {response.StatusCode}");\n                using (var reader = new StreamReader(response.GetResponseStream()))\n                {\n                    var message = reader.ReadToEnd();\n                    Console.WriteLine($"Error Response: {message}");\n                }\n            }\n        }\n    }\n}