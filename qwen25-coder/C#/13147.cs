using System;\nusing System.Text.RegularExpressions;\n\npublic static class StringExtensions\n{\n    public static string SplitIntoChunksIgnoringHtml(this string html, int chunkSize)\n    {\n        // Remove HTML tags but keep their positions to track content length accurately\n        string textContent = Regex.Replace(html, "<[^>]+>", m => new string(' ', m.Value.Length));\n        \n        // Now split the text into chunks of 'chunkSize'\n        int index = 0;\n        var result = html;\n        while (index < result.Length)\n        {\n            int nextIndex = index + chunkSize;\n\n            // Adjust nextIndex to avoid splitting inside HTML tags\n            if (nextIndex < result.Length && IsInsideTag(result, nextIndex))\n            {\n                nextIndex = result.IndexOf('>', nextIndex) + 1;\n            }\n\n            // Insert newline and number before every chunk of text content\n            int insertPoint = result.Take(nextIndex).Where(c => c != ' ').Count();\n            if (insertPoint >= index)\n            {\n                result = result.Insert(insertPoint, $")\n{((insertPoint / chunkSize) + 1)}");\n            }\n\n            // Move to the next chunk\n            index = nextIndex;\n        }\n        \n        return result.Replace(">\n", ">").Replace("1)", "1)\n"); // Clean-up extra chars\n    }\n\n    private static bool IsInsideTag(string html, int position)\n    {\n        var prefix = html.Substring(0, position);\n        int openTags = Regex.Matches(prefix, "<[^>]+").Count;\n        int closeTags = Regex.Matches(prefix, "</[^>]+").Count;\n        return openTags > closeTags;\n    }\n}\n\n// Usage:\nstring html = "Hellotoevryone<img height=\"115\" width=\"150\" alt=\"\" src=\"/Content/Edt/image/b4976875-8dfb-444c-8b32-cc b47b2d81e0.jpg\" />Iamsogladtoseeall.\n";\nstring result = html.SplitIntoChunksIgnoringHtml(10);\nConsole.WriteLine(result);