using System;\nusing System.Drawing;\nusing System.Data.SqlClient;\nusing System.IO;\n\npublic static byte[] RenderHtmlAsImage(string htmlContent)\n{\n    Bitmap bitmap = new Bitmap(1024, 768);\n    Graphics graphics = Graphics.FromImage(bitmap);\n    \n    using (bitmap)\n    {\n        IntPtr hdc = graphics.GetHdc();\n        \n        // Create a device context and render HTML to it\n        var handle = UnsafeNativeMethods.CreateCompatibleDC(hdc);\n        var dibHandle = UnsafeNativeMethods.CreateDIBSection(hdc, ref bmi, \n            0, IntPtr.Zero, IntPtr.Zero, 0);\n        UnsafeNativeMethods.SelectObject(handle, dibHandle);\n\n        using (var webBrowser = new System.Windows.Forms.WebBrowser())\n        {\n            webBrowser.DocumentText = htmlContent;\n            webBrowser.Width = bitmap.Width;\n            webBrowser.Height = bitmap.Height;\n            \n            // Wait for document to be fully loaded\n            while (webBrowser.ReadyState != System.Windows.Forms.WebBrowserReadyState.Complete)\n            {\n                System.Threading.Thread.Sleep(50);\n            }\n            \n            webBrowser.DrawToBitmap(bitmap, new Rectangle(0, 0, bitmap.Width, bitmap.Height));\n        }\n\n        UnsafeNativeMethods.SelectObject(handle, IntPtr.Zero);\n        UnsafeNativeMethods.DeleteDC(handle);\n\n        graphics.ReleaseHdc(hdc);\n    }\n\n    using (MemoryStream stream = new MemoryStream())\n    {\n        bitmap.Save(stream, System.Drawing.Imaging.ImageFormat.Png);\n        return stream.ToArray();\n    }\n}\n\nstatic class UnsafeNativeMethods\n{\n    public static extern IntPtr CreateCompatibleDC(IntPtr hdc);\n    public static extern IntPtr CreateDIBSection(IntPtr hdc, ref BITMAPINFOHEADER pbmi,\n        uint pila, IntPtr ppvBits, IntPtr hSection, uint dwOffset);\n    [return: MarshalAs(UnmanagedType.Bool)]\n    public static extern bool DeleteDC(IntPtr hdc);\n    public static extern IntPtr SelectObject(IntPtr hdc, IntPtr hObject);\n\n    //BITMAPINFOHEADER struct here\n}\n\n[StructLayout(LayoutKind.Sequential)]\npublic struct BITMAPINFOHEADER {\n    public int biSize;\n    public int biWidth;\n    public int biHeight;\n    public short biPlanes;\n    public short biBitCount;\n    public int biCompression;\n    public int biSizeImage;\n    public int biXPelsPerMeter;\n    public int biYPelsPerMeter;\n    public int biClrUsed;\n    public int biClrImportant;\n\n    // Constructor used by the code above\n    public BITMAPINFOHEADER(int width, int height)\n        : this() {\n            biSize = Marshal.SizeOf<BITMAPINFOHEADER>();\n            biWidth = width;\n            biHeight = -height; // Negative indicates a top-down bitmap\n            biPlanes = 1;\n            biBitCount = 32;\n    }\n}