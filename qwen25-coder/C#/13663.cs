public interface IProvider\n{\n    string GetData();\n    int GetPropertyData(string propertyName);\n    // Add other methods as necessary\n}\n\n[Export(typeof(IProvider))]\npublic class ProviderAdapterForTypeX : IProvider\n{\n    private readonly ThirdPartyTypeX _provider;\n\n    public ProviderAdapterForTypeX(ThirdPartyTypeX provider)\n    {\n        _provider = provider;\n    }\n\n    public string GetData()\n    {\n        return _provider.SomeMethodToGetData();\n    }\n\n    public int GetPropertyData(string propertyName)\n    {\n        // Use reflection if the property name is dynamic, otherwise direct access\n        var propInfo = typeof(ThirdPartyTypeX).GetProperty(propertyName);\n        return (int)propInfo.GetValue(_provider);\n    }\n}