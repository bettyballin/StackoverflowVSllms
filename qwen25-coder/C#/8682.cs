using Castle.Components.Validator;\n\n// Assume Subsonic generated class\npublic class GeneratedClass\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\n// Custom validator for the generated class\npublic class GeneratedClassValidator : AbstractValidator<GeneratedClass>\n{\n    public GeneratedClassValidator()\n    {\n        // Adding a rule to check if the Name property is not null or empty\n        AddRule(new NotNullValidator(), "Name");\n        AddRule(new LengthValidator(2, 50), "Name");\n\n        // Adding a rule to check that Age must be positive\n        AddRule("Age", new GreaterThanValidator(0));\n    }\n}\n\n// Usage example\nvar instance = new GeneratedClass { Name = "", Age = -1 };\nvar validator = new GeneratedClassValidator();\nvar results = ValidationRunner.Run(instance, validator);\n\nif (!results.IsValid)\n{\n    foreach (var error in results.ErrorMessages)\n    {\n        Console.WriteLine(error);\n    }\n}