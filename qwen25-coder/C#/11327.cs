using System;\nusing System.Drawing;\nusing System.Runtime.InteropServices;\n\npublic class FileIconExtractor\n{\n    private const uint SHGFI_ICON = 0x100;\n    private const uint SHGFI_LARGEICON = 0; // 'Large icon'\n    private const uint SHGFI_SMALLICON = 0x1; // 'Small icon'\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct SHFILEINFO\n    {\n        public IntPtr hIcon;\n        public int iIcon;\n        public uint dwAttributes;\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]\n        public string szDisplayName;\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 80)]\n        public string szTypeName;\n    };\n\n    [DllImport("shell32.dll")]\n    private static extern IntPtr SHGetFileInfo(string pszPath, uint dwFileAttributes, ref SHFILEINFO psfi, \n                                               uint cbSizeFileInfo, uint uFlags);\n\n    [DllImport("user32.dll", CharSet = CharSet.Auto)]\n    private extern static bool DestroyIcon(IntPtr handle);\n\n    public static Icon GetFileIcon(string filePath, bool small)\n    {\n        const uint flags = SHGFI_ICON | (small ? SHGFI_SMALLICON : SHGFI_LARGEICON);\n        try\n        {\n            SHFILEINFO shinfo = new SHFILEINFO();\n            SHGetFileInfo(filePath, 256, ref shinfo, (uint)Marshal.SizeOf(shinfo), flags);\n            return Icon.FromHandle(shinfo.hIcon).Clone() as Icon;\n        }\n        catch { }\n        finally\n        {\n            DestroyIcon(shinfo.hIcon);\n        }\n\n        return null;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        string filePath = @"C:\path\to\your\file.txt";\n        using (Icon icon = FileIconExtractor.GetFileIcon(filePath, false)) // false for large icon, true for small\n        {\n            if (icon != null)\n                icon.Save("icon.ico");\n        }\n    }\n}