using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Patient\n{\n    public int Id { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    // Add other properties as necessary\n}\n\npublic class TestResult\n{\n    public int Id { get; set; }\n    public int PatientId { get; set; } // Foreign key linking to Patient\n    public DateTime Date { get; set; }\n    public string Result { get; set; }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        List<Patient> patients = new List<Patient>\n        {\n            new Patient { Id = 1, FirstName = "John", LastName = "Doe" },\n            // Add more patients...\n        };\n\n        List<TestResult> testResults = new List<TestResult>\n        {\n            new TestResult { Id = 1, PatientId = 1, Date = DateTime.Now, Result = "Positive" },\n            // Add more test results...\n        };\n\n        // Example of searching for patients by last name\n        string searchLastName = "Doe";\n        var matchingPatients = patients.Where(p => p.LastName == searchLastName).ToList();\n\n        foreach (var patient in matchingPatients)\n        {\n            Console.WriteLine($"Patient ID: {patient.Id}, Name: {patient.FirstName} {patient.LastName}");\n            \n            // Fetch test results for each patient\n            var associatedTests = testResults.Where(tr => tr.PatientId == patient.Id).ToList();\n            foreach (var testResult in associatedTests)\n            {\n                Console.WriteLine($"\tTest ID: {testResult.Id}, Date: {testResult.Date}, Result: {testResult.Result}");\n            }\n        }\n    }\n}