using System;\nusing System.Collections.Generic;\n\npublic class Node\n{\n    public Node() {}\n    public Node(int id, int parentId, int position, string title)\n    {\n        Id = id;\n        ParentId = parentId;\n        Position = position;\n        Title = title;\n        Children = new List<Node>();\n    }\n\n    public int Id { get; }\n    public int ParentId { get; }\n    public int Position { get; }\n    public string Title { get; }\n    public List<Node> Children { get; }\n}\n\npublic class HierarchyBuilder\n{\n    private Dictionary<int, Node> nodeLookup = new Dictionary<int, Node>();\n\n    public Node BuildHierarchy(List<Node> flatNodes)\n    {\n        // Populate the dictionary for quick lookup by Id\n        foreach (var node in flatNodes)\n        {\n            nodeLookup[node.Id] = node;\n        }\n\n        Node root = null;\n\n        // Assign children to their parents and find the root\n        foreach (var node in flatNodes)\n        {\n            if (node.ParentId != 0)\n            {\n                if (!nodeLookup.ContainsKey(node.ParentId))\n                    throw new InvalidOperationException($"Cannot locate parent with Id {node.ParentId} for Node: {node.Id}");\n\n                nodeLookup[node.ParentId].Children.Add(node);\n            }\n            else\n            {\n                root = node;\n            }\n        }\n\n        return root; // The root of the hierarchy\n    }\n}\n\n// Example usage:\npublic class Program\n{\n    public static void Main()\n    {\n        var nodes = new List<Node>\n        {\n            new Node(1, 0, 0, "root"),\n            new Node(2, 1, 0, "child 1"),\n            new Node(3, 1, 1, "child 2"),\n            new Node(4, 1, 2, "child 3"),\n            new Node(5, 4, 0, "grandchild 1")\n        };\n\n        var builder = new HierarchyBuilder();\n        Node root = builder.BuildHierarchy(nodes);\n\n        // Display hierarchy (for demonstration)\n        DisplayNode(root);\n    }\n\n    private static void DisplayNode(Node node, string indent = "")\n    {\n        Console.WriteLine($"{indent}{node.Id}: {node.Title}");\n        foreach (var child in node.Children.OrderBy(cn => cn.Position))\n        {\n            DisplayNode(child, $"{indent}  ");\n        }\n    }\n}