using System;\nusing System.Runtime.InteropServices;\nusing System.Security.Principal;\nusing Microsoft.Win32.SafeHandles;\n\nclass Program\n{\n    // Constants and Structures used by native API calls\n    const int NORMAL_PRIORITY_CLASS = 0x0020;\n    const uint CREATE_NEW_CONSOLE = 0x00000010;\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct SECURITY_ATTRIBUTES\n    {\n        public int Length;\n        public IntPtr lpSecurityDescriptor;\n        public bool bInheritHandle;\n    }\n\n    // Native API imports\n    [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Unicode)]\n    public static extern bool CreateProcessAsUser(\n        SafeAccessTokenHandle hToken,\n        string lpApplicationName,\n        string lpCommandLine,\n        ref SECURITY_ATTRIBUTES lpProcessAttributes,\n        ref SECURITY_ATTRIBUTES lpThreadAttributes,\n        bool bInheritHandles,\n        uint dwCreationFlags,\n        IntPtr lpEnvironment,\n        string lpCurrentDirectory,\n        [In] ref STARTUPINFO lpStartupInfo,\n        out PROCESS_INFORMATION lpProcessInformation);\n\n    [DllImport("userenv.dll", SetLastError = true)]\n    public static extern bool CreateEnvironmentBlock(out IntPtr lpEnvironment, SafeAccessTokenHandle hToken, bool bInherit);\n\n    [DllImport("wtsapi32.dll", SetLastError = true)]\n    public static extern uint WTSGetActiveConsoleSessionId();\n\n    [DllImport("advapi32.dll", EntryPoint = "DuplicateTokenEx")]\n    public static extern bool DuplicateTokenEx(\n        SafeAccessTokenHandle hExistingToken,\n        int dwDesiredAccess,\n        ref SECURITY_ATTRIBUTES lpThreadAttributes,\n        int ImpersonationLevel,\n        int TokenType,\n        out SafeAccessTokenHandle phNewToken);\n\n    [DllImport("advapi32.dll", EntryPoint = "LogonUserW")]\n    public static extern bool LogonUser(\n        string lpszUsername,\n        string lpszDomain,\n        IntPtr lpszPassword, // use IntPtr.zero if the password is empty\n        int dwLogonType,\n        int dwLogonProvider,\n        out SafeAccessTokenHandle phToken);\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct STARTUPINFO\n    {\n        public Int32 cb;\n        private String lpReserved;\n        private String lpDesktop;\n        private String lpTitle;\n        public Int32 dwX;\n        public Int32 dwY;\n        public Int32 dwXSize;\n        public Int32 dwYSize;\n        public Int32 dwXCountChars;\n        public Int32 dwYCountChars;\n        public Int32 dwFillAttribute;\n        public Int32 dwFlags;\n        short wShowWindow;\n        private Short cbReserved2;\n        private IntPtr lpReserved2;\n        public IntPtr hStdInput;\n        public IntPtr hStdOutput;\n        public IntPtr hStdError;\n    };\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct PROCESS_INFORMATION\n    {\n        public IntPtr hProcess;\n        public IntPtr hThread;\n        public int dwProcessId;\n        public int dwThreadId;\n    }\n\n    // Function to run a process in the logon desktop\n    private static void RunInLogonScreen(string applicationName, string commandLine)\n    {\n        uint dwSessionId = WTSGetActiveConsoleSessionId();\n\n        bool bResult = false;\n\n        SafeAccessTokenHandle hUserTokenDup = null;\n        PROCESS_INFORMATION pi = new PROCESS_INFORMATION();\n        STARTUPINFO si = new STARTUPINFO();\n        si.cb = Marshal.SizeOf(si);\n        si.lpDesktop = @"winsta0\default"; // Change to Logon for logon screen specifically\n        IntPtr pEnv = IntPtr.Zero;\n\n        SECURITY_ATTRIBUTES sa = new SECURITY_ATTRIBUTES();\n        sa.Length = Marshal.SizeOf(sa);\n\n        SafeAccessTokenHandle hUserToken;\n        bResult = LogonUser("username", "domainname", IntPtr.Zero, 2, 0, out hUserToken);\n        if (bResult)\n        {\n            bool ret = DuplicateTokenEx(hUserToken, 0x20000 | 0x1000 | 0x8 | 0x4 | 0x2, ref sa, 2, 2, out hUserTokenDup);\n            if (ret)\n            {\n                bResult = CreateEnvironmentBlock(out pEnv, hUserTokenDup, false);\n\n                ret = CreateProcessAsUser(hUserTokenDup,\n                    applicationName ?? "",\n                    commandLine,\n                    ref sa,\n                    ref sa,\n                    false,\n                    CREATE_NEW_CONSOLE | NORMAL_PRIORITY_CLASS,\n                    pEnv,\n                    null,\n                    ref si,\n                    out pi);\n            }\n        }\n\n        if (pEnv != IntPtr.Zero)\n            DestroyEnvironmentBlock(pEnv);\n\n        hUserTokenDup?.Close();\n    }\n\n    [DllImport("userenv.dll", SetLastError = true)]\n    public static extern bool DestroyEnvironmentBlock(IntPtr lpEnvironment);\n\n    // Entry point to demonstrate the RunInLogonScreen function\n    static void Main(string[] args)\n    {\n        WindowsIdentity identity = WindowsIdentity.GetCurrent();\n\n        if (identity.IsSystem)\n        {\n            RunInLogonScreen("notepad.exe", null);\n        }\n        else\n        {\n            Console.WriteLine("Run this service with System privileges.");\n        }\n    }\n}