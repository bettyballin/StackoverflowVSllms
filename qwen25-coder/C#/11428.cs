using System;\nusing System.ServiceProcess;\nusing System.Configuration.Install;\nusing Microsoft.Win32;\n\nclass ServiceInstallerExample : Installer\n{\n    // Constructor for the installer\n    public ServiceInstallerExample()\n    {\n        int serviceExitCode = -1;\n\n        try\n        {\n            Console.WriteLine("Installing MyService...");\n\n            // Process installer is used to install the service account and parameters\n            var processInstaller = new ServiceProcessInstaller();\n            processInstaller.Account = ServiceAccount.LocalSystem; // Running under Local System Account\n\n            // Service Installer is used to install the service itself\n            ServiceInstaller serviceInstaller = new ServiceInstaller();\n            \n            // Service name, this must match a string in the project\n            serviceInstaller.ServiceName = "MyService"; \n            serviceInstaller.DisplayName = "My Display Name";\n            serviceInstaller.Description = "My description.";\n            serviceInstaller.StartType = ServiceStartMode.Automatic;\n\n            Installers.Add(processInstaller);\n            Installers.Add(serviceInstaller);\n\n            // Install the services and their respective process settings\n            base.Install(new System.Collections.Hashtable());\n\n            Console.WriteLine("Service installed");\n            \n            serviceExitCode = 0;\n        }\n        catch (Exception ex)\n        {\n            Console.Write($"Error during installation: {ex.Message}");\n            serviceExitCode = -1;\n        }\n\n        // Add return value to the context collection. \n        this.Context.Parameters.Add("exitCode", serviceExitCode.ToString());\n\n        // Write the exit code of the MSI installer\n        using (RegistryKey key = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Services\\MyService"))\n        {\n            if (key != null)\n            {\n                key.SetValue("Start", 2); // Set to automatic start. 3 = Manual, 4 = Disabled\n            }\n        }\n    }\n\n    static void Main()\n    {\n        Console.WriteLine("Attempting to install MyService...");\n        \n        System.Configuration.Install.TransactedInstaller transactedInstaller = new System.Configuration.Install.TransactedInstaller();\n\n        transactedInstaller.Context = new InstallContext("", null);\n\n        // Add the custom installer and other installers you want.\n        ServiceInstallerExample serviceInstallerExample = new ServiceInstallerExample();\n        transactedInstaller.Installers.Add(serviceInstallerExample);\n\n        // Installer will throw an exception if it fails\n        try\n        {\n            transactedInstaller.Install(null);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($"Error during installation: {ex.Message}");\n        }\n\n        // Return 0 when succeeded to tell the process installer that the install operation succeeded, so it can commit all changes\n        bool success = Boolean.Parse(transactedInstaller.Context.Parameters["exitCode"]);\n        Environment.Exit(success ? 0 : 1);\n    }\n}