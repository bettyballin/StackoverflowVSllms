using System;\nusing System.Net.Sockets;\nusing System.Text;\n\npublic class TcpConnectionHandler\n{\n    private TcpClient _tcpClient;\n    private NetworkStream _networkStream;\n    private readonly string _serverIp;\n    private readonly int _port;\n\n    public TcpConnectionHandler(string serverIp, int port)\n    {\n        _serverIp = serverIp;\n        _port = port;\n    }\n\n    public void Connect()\n    {\n        if (_tcpClient != null && _tcpClient.Connected) return;\n\n        try\n        {\n            _tcpClient = new TcpClient();\n            _tcpClient.Connect(_serverIp, _port);\n            _networkStream = _tcpClient.GetStream();\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine("Error connecting: " + e.Message);\n            // Handle exception accordingly\n        }\n    }\n\n    public void SendCommand(string command)\n    {\n        if (_networkStream == null || !_tcpClient.Connected)\n        {\n            Connect();\n        }\n\n        try\n        {\n            byte[] data = Encoding.ASCII.GetBytes(command);\n            _networkStream.Write(data, 0, data.Length);\n\n            // Optionally read the response here if needed\n            // byte[] buffer = new byte[_tcpClient.ReceiveBufferSize];\n            // int bytesRead = _networkStream.Read(buffer, 0, buffer.Length);\n            // string response = Encoding.ASCII.GetString(buffer, 0, bytesRead);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine("Error sending command: " + e.Message);\n            // Handle exception accordingly and possibly reconnect\n            Connect();\n        }\n    }\n\n    public void Close()\n    {\n        _networkStream?.Close();\n        _tcpClient?.Close();\n    }\n}