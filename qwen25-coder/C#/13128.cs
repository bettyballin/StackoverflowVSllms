using System;\nusing System.Collections.Specialized;\nusing System.IO;\nusing System.Runtime.Serialization.Formatters.Binary;\nusing System.ServiceModel.Channels;\nusing System.Xml;\n\npublic class CustomDataSetMessageEncoder : MessageEncoder\n{\n    private readonly MessageEncoder innerEncoder;\n    private readonly XmlWriterSettings xmlWriterSettings;\n\n    public CustomDataSetMessageEncoder(MessageEncoder innerEncoder)\n        : this(innerEncoder, new XmlWriterSettings())\n    {\n    }\n\n    protected CustomDataSetMessageEncoder(MessageEncoder innerEncoder, XmlWriterSettings xmlWriterSettings)\n    {\n        this.innerEncoder = innerEncoder;\n        this.xmlWriterSettings = xmlWriterSettings ?? throw new ArgumentNullException(nameof(xmlWriterSettings));\n    }\n\n    public override string ContentType => "application/msbin1+xml";\n    public override string MediaType   => "msbin1+xml";\n\n    private void WriteExtendedProperties(XmlDictionaryWriter writer, NameValueCollection extendedProperties)\n    {\n        // Implement your serialization logic here\n        if (extendedProperties != null && extendedProperties.Count > 0)\n        {\n            writer.WriteStartElement("ExtendedProperties");\n            foreach (string key in extendedProperties.AllKeys)\n            {\n                writer.WriteAttributeString(key, extendedProperties[key]);\n            }\n            writer.WriteEndElement();\n        }\n    }\n\n    private void WriteDataSet(XmlDictionaryWriter writer, DataSet dataSet)\n    {\n        // Serialize the dataset\n        using (var ms = new MemoryStream())\n        {\n            var bf = new BinaryFormatter();\n            bf.Serialize(ms, dataSet);\n            writer.WriteBase64(ms.ToArray(), 0, (int)ms.Length);\n\n            // Write ExtendedProperties as XML\n            WriteExtendedProperties(writer, dataSet.ExtendedProperties);\n        }\n    }\n\n    public override Message ReadMessage(ArraySegment<byte> buffer, BufferManager bufferManager, string contentType)\n    {\n        using (var ms = new MemoryStream(buffer.Array, buffer.Offset, buffer.Count))\n        {\n            var reader = XmlDictionaryReader.Create(ms);\n            return this.innerEncoder.ReadMessage(reader, int.MaxValue);\n        }\n    }\n\n    public override Message ReadMessage(Stream stream, int maxSizeOfHeaders, string contentType)\n    {\n        using (var reader = XmlDictionaryReader.Create(stream), ms = new MemoryStream())\n        {\n            WriteDataSet((XmlTextWriter) XmlWriter.Create(ms, xmlWriterSettings), ((DataSet) this.innerEncoder.ReadMessage(reader, maxSizeOfHeaders).GetBody<object>()));\n            return Message.CreateMessage(XmlReader.Create(ms), int.MaxValue, this.MessageVersion);\n        }\n    }\n\n    public override void WriteMessage(Message message, Stream stream)\n    {\n        var dataSet = (DataSet)message.GetBody<object>();\n        using (var tempStream = new MemoryStream())\n        {\n            var writer = XmlWriter.Create(tempStream, xmlWriterSettings);\n\n            // Serialize DataSet and ExtendedProperties\n            WriteDataSet((XmlTextWriter)writer, dataSet);\n            \n            writer.Flush();\n            tempStream.Position = 0;\n            \n            this.innerEncoder.WriteMessage(Message.CreateMessage(XmlReader.Create(tempStream), int.MaxValue, message.Version), stream);\n        }\n    }\n\n    public override ArraySegment<byte> WriteMessage(Message message, int maxMessageSize)\n    {\n        throw new NotImplementedException("Not implemented");\n    }\n\n    public override bool IsCompressionSupported => false;\n}\n\npublic class CustomCompositeDuplexBindingElement : BindingElement\n{\n    private readonly TextMessageEncodingBindingElement textEncoderBE;\n\n    public CustomCompositeDuplexBindingElement()\n    {\n        this.textEncoderBE = new TextMessageEncodingBindingElement();\n    }\n\n    public string Encoding { get; set; } = "utf-8";\n\n    public override IChannelFactory<TChannel> BuildChannelFactory<TChannel>(BindingContext context)\n    {\n        if (context == null) throw new ArgumentNullException(nameof(context), "Invalid binding context");\n\n        var innerEncoderFactory =\n            this.textEncoderBE.BuildChannelFactory<MessageEncodingChannelFactory<TChannel>>(context);\n\n        return new MyCustomCompositeDuplexClientChannelFactory<TChannel>(\n            innerEncoderFactory,\n            this.textEncoderBE.CreateMessageEncoderFactory()\n        );\n    }\n\n    public override IChannelListener<TChannel> BuildChannelListener<TChannel>(BindingContext context)\n    {\n        if (context == null) throw new ArgumentNullException(nameof(context), "Invalid binding context");\n\n        var innerEncoderFactory =\n            this.textEncoderBE.BuildChannelListener<MessageEncodingChannelListener<TChannel>>(context);\n\n        return new MyCustomCompositeDuplexServerChannelListener<TChannel>(\n            innerEncoderFactory,\n            this.textEncoderBE.CreateMessageEncoderFactory()\n        );\n    }\n\n    public override BindingElement Clone() => new CustomCompositeDuplexBindingElement();\n\n    public override T GetProperty<T>(BindingContext context)\n    {\n        if (typeof(T) == typeof(MessageVersion))\n        {\n            return (T)Convert.ChangeType(this.MessageVersion, typeof(T));\n        }\n\n        if (context != null)\n        {\n            return this.textEncoderBE.GetProperty<T>(context);\n        }\n\n        return base.GetProperty<T>(context);\n    }\n}\n\npublic abstract class EncoderReplacerChannelBase<T> : T where T : ChannelBase\n{\n    private readonly MessageEncoderFactory encoderFactory;\n\n    protected EncoderReplacerChannelBase(T innerChannel, MessageEncoderFactory encoderFactory) : base(null)\n    {\n        InnerChannel = innerChannel;\n        this.encoderFactory = encoderFactory ?? throw new ArgumentNullException(nameof(encoderFactory));\n    }\n\n    protected T InnerChannel { get; }\n}\n\npublic class MyCustomCompositeDuplexClientChannelFactory<TInnerChannel> : ChannelFactoryBase<IRequestChannel>\n{\n    private readonly IChannelFactory<IRequestChannel> innerChannelFactory;\n    private readonly MessageEncoderFactory encoderFactory;\n\n    public MyCustomCompositeDuplexClientChannelFactory(\n        IChannelFactory<IRequestChannel> innerChannelFactory,\n        MessageEncoderFactory encoderFactory)\n        : base(new BindingContext())\n    {\n        this.innerChannelFactory = innerChannelFactory ?? throw new ArgumentNullException(nameof(innerChannelFactory));\n        this.encoderFactory = encoderFactory;\n    }\n\n    protected override void OnOpened()\n    {\n        base.OnOpened();\n        this.innerChannelFactory.Open();\n    }\n\n    protected override IRequestChannel OnCreateChannel(EndpointAddress address, Uri via)\n    {\n        var innerChannel = this.innerChannelFactory.CreateChannel(address, via);\n        return new MyCustomCompositeDuplexClientChannel(innerChannel, encoderFactory);\n    }\n}\n\npublic class MyCustomCompositeDuplexServerChannelListener<TInnerChannel> : ChannelListenerBase<IReplyChannel>\n{\n    private readonly IChannelListener<IReplyChannel> innerChannelFactory;\n    private readonly MessageEncoderFactory encoderFactory;\n\n    public MyCustomCompositeDuplexServerChannelListener(\n        IChannelListener<IReplyChannel> innerChannelFactory,\n        MessageEncoderFactory encoderFactory)\n        : base(new BindingContext())\n    {\n        this.innerChannelFactory = innerChannelFactory ?? throw new ArgumentNullException(nameof(innerChannelFactory));\n        this.encoderFactory = encoderFactory;\n    }\n\n    protected override void OnOpened()\n    {\n        base.OnOpened();\n        this.innerChannelFactory.Open();\n    }\n\n    protected override IReplyChannel OnAcceptChannel(TimeSpan timeout)\n    {\n        var replyChannel = InnerDispatcherSyncContext.RunSynchronously(() => innerChannelFactory.AcceptChannel(timeout));\n\n        if (replyChannel == null) return null;\n\n        // Wrap the channel with our custom encoding\n        return new MyCustomCompositeDuplexServerChannel(replyChannel, this.encoderFactory);\n    }\n}\n\npublic class MyCustomCompositeDuplexClientChannel :\n    EncoderReplacerChannelBase<IRequestChannel>,\n    IRequestChannel\n{\n    private readonly RequestReplyCorrelator requestReplyCorrelator;\n\n    public MyCustomCompositeDuplexClientChannel(IRequestChannel innerChannel, MessageEncoderFactory encoderFactory)\n        : base(innerChannel, encoderFactory.CreateMessageEncoder())\n    {\n        this.requestReplyCorrelator = new RequestReplyCorrelator(innerChannel, encoderFactory.CreateMessageEncoder());\n    }\n\n    public EndpointAddress RemoteAddress => InnerChannel.RemoteAddress;\n\n    public Uri Via => InnerChannel.Via;\n\n    public IAsyncResult BeginRequest(Message message, TimeSpan timeout, AsyncCallback callback, object state)\n        => requestReplyCorrelator.BeginRequest(message, timeout, callback, state);\n\n    public IAsyncResult BeginRequest(Message message, AsyncCallback callback, object state) =>\n        BeginRequest(message, DefaultSendTimeout, callback, state);\n\n    public Message EndRequest(IAsyncResult result) => requestReplyCorrelator.EndRequest(result);\n}\n\npublic class MyCustomCompositeDuplexServerChannel :\n    EncoderReplacerChannelBase<IReplyChannel>,\n    IReplyChannel\n{\n    private readonly MessageEncoder messageEncoder;\n\n    public MyCustomCompositeDuplexServerChannel(IReplyChannel innerChannel, MessageEncoderFactory encoderFactory)\n        : base(innerChannel, encoderFactory.CreateMessageEncoder())\n    {\n        this.messageEncoder = CreateEncoder();\n    }\n\n    private MessageEncoder CreateEncoder() => new CustomCompositeDuplexBindingElement().CreateMessageEncoderFactory().CreateSessionEncoder();\n\n    public EndpointAddress LocalAddress => InnerChannel.LocalAddress;\n\n    public IAsyncResult BeginReceiveRequest(TimeSpan timeout, AsyncCallback callback, object state) => \n        this.InnerChannel.BeginReceiveRequest(timeout, callback, state);\n\n    public IAsyncResult BeginReceiveRequest(AsyncCallback callback, object state) =>\n        BeginReceiveRequest(DefaultReceiveTimeout, callback, state);\n\n    public IAsyncResult BeginTryReceiveRequest(TimeSpan timeout, AsyncCallback callback, object state) =>\n        ((IReplyChannel)this.InnerChannel).BeginTryReceiveRequest(timeout, callback, state);\n\n    public IAsyncResult BeginWaitForRequest(TimeSpan timeout, AsyncCallback callback, object state) => \n        this.InnerChannel.BeginWaitForRequest(timeout, callback, state);\n\n    public bool EndReceiveRequest(IAsyncResult result, out RequestContext context)\n    {\n        if (this.InnerChannel.EndReceiveRequest(result, out var innerContext))\n        {\n            context = new MyCustomCompositeDuplexServerMessageEncoder(innerContext, messageEncoder);\n            return true;\n        }\n\n        context = null;\n        return false;\n    }\n\n    public bool EndTryReceiveRequest(IAsyncResult result)\n     => ((IReplyChannel)this.InnerChannel).EndTryReceiveRequest(result);\n\n    public void EndWaitForRequest(IAsyncResult result) => \n        this.InnerChannel.EndWaitForRequest(result);\n\n    public Message ReceiveRequest(TimeSpan timeout) =>\n        ((IReplyChannel)this.InnerChannel).ReceiveRequest(timeout);\n\n    public bool TryReceiveRequest(TimeSpan timeout, out RequestContext context)\n    {\n        if (((IReplyChannel)this.InnerChannel).TryReceiveRequest(timeout, out var innerContext))\n        {\n            context = new MyCustomCompositeDuplexServerMessageEncoder(innerContext, messageEncoder);\n            return true;\n        }\n\n        context = null;\n        return false;\n    }\n\n    public bool WaitForRequest(TimeSpan timeout) => \n        this.InnerChannel.WaitForRequest(timeout);\n}\n\npublic class MyCustomCompositeDuplexServerMessageEncoder : RequestContextBase\n{\n    private readonly RequestContext innerContext;\n    private readonly MessageEncoder messageEncoder;\n\n    public MyCustomCompositeDuplexServerMessageEncoder(RequestContext innerContext, MessageEncoder messageEncoder)\n        : base(innerContext.RequestMessage)\n    {\n        this.innerContext = innerContext;\n        this.messageEncoder = messageEncoder ?? throw new ArgumentNullException(nameof(messageEncoder));\n        this.InnerResponseMessage = null;\n    }\n\n    private Message InnerResponseMessage { get; set; }\n    \n    public override void Abort() => innerContext.Abort();\n\n    protected override void OnClose(TimeSpan timeout) \n    => innerContext.Close(timeout);\n\n    protected override IAsyncResult OnEndClose(IAsyncResult result)\n    {\n        innerContext.EndClose(result);\n        return base.OnEndClose(result);\n    }\n\n    protected override IAsyncResult OnBeginClose(AsyncCallback callback, object state)\n    => innerContext.BeginClose(callback, state);\n\n    public override Message RequestMessage { get; }\n\n    public override void Reply(Message message) =>\n        this.innerContext.Reply(message);\n\n    protected override IAsyncResult OnEndReply(IAsyncResult result) => \n       innerContext.EndReply(result);\n    \n    protected override IAsyncResult OnBeginReply(Message message, AsyncCallback callback, object state)\n    {\n        if (message == null) throw new ArgumentNullException(nameof(message));\n        \n        return InnerResponseMessage != null\n            ? this.innerChannel.EndReply(this.InnerResponseMessage, result)\n            : this.innerChannel.BeginReply(message, callback, state);\n    }\n}