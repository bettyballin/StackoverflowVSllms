using System;\nusing System.Runtime.InteropServices;\nusing System.Threading;\n\npublic class HighResolutionTimerTest\n{\n    [DllImport("winmm.dll", SetLastError = true, CallingConvention = CallingConvention.Winapi)]\n    public static extern uint timeBeginPeriod(uint period);\n\n    [DllImport("winmm.dll", SetLastError = true, CallingConvention = CallingConvention.Winapi)]\n    public static extern uint timeEndPeriod(uint period);\n\n    public static void Main()\n    {\n        try\n        {\n            // Set the timer resolution to 1 ms (1000 Hz)\n            const uint desiredResolutionInMilliseconds = 1;\n            uint result = timeBeginPeriod(desiredResolutionInMilliseconds);\n            if (result != 0)\n                throw new Exception("Failed to increase timer resolution.");\n\n            int[] frequencies = { 5, 10, 15, 20, 30, 50, 75, 100, 200, 500 };\n\n            // Test System.Timers.Timer\n            foreach (int frequency in frequencies)\n            {\n                int count = 0;\n\n                // Initialize timer\n                var timer = new System.Timers.Timer(1000d / frequency);\n                timer.Elapsed += delegate { Interlocked.Increment(ref count); };\n\n                // Count for 10 seconds\n                DateTime start = DateTime.Now;\n                timer.Enabled = true;\n                while (DateTime.Now < start + TimeSpan.FromSeconds(10))\n                    Thread.Sleep(1);\n                timer.Enabled = false;\n\n                // Calculate actual frequency\n                Console.WriteLine(\n                    "Requested frequency: {0} Hz; Actual frequency: {1} Hz",\n                    frequency, count / 10d);\n            }\n        }\n        finally\n        {\n            timeEndPeriod(desiredResolutionInMilliseconds); // Restore original settings\n        }\n    }\n}