using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Reflection;\n\npublic static List<Type> LoadPlugins(string pluginDirectory)\n{\n    var types = new List<Type>();\n    if (!Directory.Exists(pluginDirectory))\n        throw new DirectoryNotFoundException($"Plugin directory not found: {pluginDirectory}");\n\n    foreach (string file in Directory.GetFiles(pluginDirectory, "*.dll"))\n    {\n        try\n        {\n            Assembly assembly = Assembly.LoadFrom(file);\n            foreach (Type type in assembly.GetTypes())\n            {\n                if (typeof(IReport).IsAssignableFrom(type) && !type.IsInterface)\n                    types.Add(type);\n            }\n        }\n        catch (BadImageFormatException ex)\n        {\n            Console.WriteLine($"Could not load {file} as a plugin: {ex.Message}");\n        }\n    }\n\n    return types;\n}