using System;\nusing System.Linq;\nusing HtmlAgilityPack;\n\npublic class HtmlTruncator\n{\n    public static string TruncateHtml(string html, int maxLength)\n    {\n        var doc = new HtmlDocument();\n        doc.LoadHtml(html);\n        var textNodes = doc.DocumentNode.DescendantsAndSelf()\n            .Where(n => n.NodeType == HtmlNodeType.Text);\n\n        string allText = string.Concat(textNodes.Select(t => t.InnerText));\n\n        if (allText.Length <= maxLength)\n        {\n            return html;\n        }\n\n        string truncatedText = allText.Substring(0, Math.Min(maxLength, allText.Length - 3));\n        int cutOffIndex = allText.IndexOf(truncatedText.TrimEnd()) + truncatedText.TrimEnd().Length;\n\n        var truncatedHtmlNodes = doc.CreateDocumentFragment();\n\n        bool isTruncated = false;\n        foreach (var node in doc.DocumentNode.Descendants())\n        {\n            if (!isTruncated && (node.OuterHtml.Length >= cutOffIndex || node.InnerText.Length + truncatedHtmlNodes.InnerText.Length > maxLength))\n            {\n                int remainingLength = maxLength - truncatedHtmlNodes.InnerText.Length;\n\n                // Find the exact text position within this node to truncate.\n                var currentText = node.InnerText;\n                if (currentText.Length > remainingLength)\n                {\n                    var textToAppend = new HtmlTextNode(currentText.Substring(0, remainingLength), doc);\n                    truncatedHtmlNodes.AppendChild(textToAppend);\n                    isTruncated = true; // stop after this point\n                }\n                else\n                {\n                    truncatedHtmlNodes.AppendChild(node.CloneNode(true));\n                }\n            }\n            else if (!isTruncated)\n            {\n                truncatedHtmlNodes.AppendChild(node.CloneNode(true));\n            }\n\n            if (node.Name == "table" || node.Name == "script") // Skip tables or complex elements\n            {\n                isTruncated = true; // Optionally skip certain tags\n                break;\n            }\n        }\n\n        return truncatedHtmlNodes.OuterHtml.Trim() + "...";\n    }\n\n    public static void Main()\n    {\n        string html = "Hello, my <strong>name</strong> is <em>Sam</em>. I&acute;m a web developer.";\n        Console.WriteLine(TruncateHtml(html, 26));\n    }\n}