using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class PreviewService\n{\n    private readonly TimeSpan _timeout = TimeSpan.FromMinutes(1);\n\n    public async Task GeneratePreviewAsync(Document document)\n    {\n        var cts = new CancellationTokenSource(_timeout);\n        \n        try\n        {\n            // Start the preview generation task with a timeout\n            await PreviewGenerationTask(document, cts.Token);\n            \n            // Mark the document as successfully processed if not cancelled\n            Console.WriteLine("Preview generated successfully for: " + document.FileName);\n        }\n        catch (OperationCanceledException)\n        {\n            // Handle the case where the task was cancelled due to timeout\n            Console.WriteLine("Preview generation timed out and was cancelled for: " + document.FileName);\n            \n            // Take any necessary action, e.g., logging, marking as failed in DB, etc.\n        }\n    }\n\n    private async Task PreviewGenerationTask(Document document, CancellationToken cancellationToken)\n    {\n        // Simulate the preview generation process\n        await Task.Run(() =>\n        {\n            // Here you would call your legacy code to generate the preview\n            // The following line is just a placeholder for the actual processing logic\n            GeneratePreviewLegacyCode(document);\n            \n            // Periodically check if cancellation is requested\n            cancellationToken.ThrowIfCancellationRequested();\n        });\n    }\n\n    private void GeneratePreviewLegacyCode(Document document)\n    {\n        // Placeholder for legacy code invocation\n        Console.WriteLine("Generating preview for: " + document.FileName);\n\n        // Simulate the time-consuming process, e.g., with Thread.Sleep\n        // Replace this with actual logic that might freeze\n        System.Threading.Thread.Sleep(60 * 1000); // sleep for 1 minute simulating a deadlock/freeze\n\n        Console.WriteLine("Legacy code finished processing.");\n    }\n}\n\npublic class Document\n{\n    public string FileName { get; set; }\n}