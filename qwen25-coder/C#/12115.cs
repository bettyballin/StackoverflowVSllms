using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class PasswordHasher\n{\n    public string EncodePassword(string password, byte[] salt)\n    {\n        if (salt.Length != 16) throw new ArgumentException("Salt must be 16 bytes long.");\n\n        var bytes = Encoding.Unicode.GetBytes(password);\n        var dst = new byte[salt.Length + bytes.Length];\n\n        Buffer.BlockCopy(salt, 0, dst, 0, salt.Length);\n        Buffer.BlockCopy(bytes, 0, dst, salt.Length, bytes.Length);\n\n        using (HashAlgorithm algorithm = HashAlgorithm.Create("SHA1"))\n        {\n            return Convert.ToBase64String(algorithm.ComputeHash(dst));\n        }\n    }\n\n    public byte[] GenerateSalt()\n    {\n        var rng = new RNGCryptoServiceProvider();\n        var saltBytes = new byte[16];\n        rng.GetBytes(saltBytes);\n        return saltBytes;\n    }\n}\n\n// Usage example:\npublic class Program\n{\n    public static void Main()\n    {\n        PasswordHasher hasher = new PasswordHasher();\n        string password = "examplePassword";\n        \n        // Generate a salt\n        byte[] salt = hasher.GenerateSalt();\n        string base64Salt = Convert.ToBase64String(salt);\n        Console.WriteLine("Generated Salt (Base64): " + base64Salt);\n\n        // Encode the password with the generated salt\n        string encodedPassword = hasher.EncodePassword(password, salt);\n        Console.WriteLine("Encoded Password: " + encodedPassword);\n    }\n}