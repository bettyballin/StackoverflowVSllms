public interface ISecurityService\n{\n    bool CanDeleteOrder(int userId, int orderId);\n    bool CanEditShoppingCart(int userId, int shoppingCartId);\n}\n\npublic class SecurityService : ISecurityService\n{\n    private readonly IRoleManager _roleManager;\n\n    public SecurityService(IRoleManager roleManager)\n    {\n        _roleManager = roleManager;\n    }\n\n    public bool CanDeleteOrder(int userId, int orderId)\n    {\n        var userRole = GetUserRole(userId);\n        return userRole == Role.Admin || IsUserOwnerOfOrder(userId, orderId);\n    }\n\n    public bool CanEditShoppingCart(int userId, int shoppingCartId)\n    {\n        var userRole = GetUserRole(userId);\n        return userRole == Role.Admin || IsUserOwnerOfShoppingCart(userId, shoppingCartId);\n    }\n\n    private Role GetUserRole(int userId) => _roleManager.GetRole(userId);\n\n    private bool IsUserOwnerOfOrder(int userId, int orderId)\n    {\n        // Logic to determine if the order belongs to the user\n        return true; // Simplified example\n    }\n\n    private bool IsUserOwnerOfShoppingCart(int userId, int shoppingCartId)\n    {\n        // Logic to determine if the cart belongs to the user\n        return true; // Simplified example\n    }\n}\n\npublic enum Role { Admin, User }