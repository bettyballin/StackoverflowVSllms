// Assume 'Permissions' is a dictionary loaded from database at login\n// Key = ActionName/ControlID, Value = List of Roles\n\nprotected void Page_Load(object sender, EventArgs e)\n{\n    if (!IsPostBack)\n    {\n        var userRoles = (List<string>)Session["UserRoles"]; // Cached roles\n        var permissions = GetUserPermissions(userRoles); // Method to fetch and cache actions based on roles from DB\n        \n        EnableDisableControls(permissions);\n    }\n}\n\nprivate Dictionary<string, bool> GetUserPermissions(List<string> roles)\n{\n    Dictionary<string, bool> actionPermissions = new Dictionary<string, bool>();\n    \n    using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["YourConnectionString"].ConnectionString))\n    {\n        using (SqlCommand cmd = new SqlCommand("SP_GetUserPermissions", conn))\n        {\n            cmd.CommandType = CommandType.StoredProcedure;\n            cmd.Parameters.AddWithValue("@Roles", String.Join(",", roles));\n\n            conn.Open();\n            using (SqlDataReader reader = cmd.ExecuteReader())\n            {\n                while (reader.Read())\n                {\n                    actionPermissions[reader["ActionName"].ToString()] = true;\n                }\n            }\n        }\n    }\n\n    return actionPermissions;\n}\n\nprivate void EnableDisableControls(Dictionary<string, bool> permissions)\n{\n    var controlsToCheck = new List<Control>()\n    {\n        btnSave,\n        btnEdit,\n        btnDelete\n    };\n\n    foreach (var control in controlsToCheck)\n    {\n        if (!permissions.ContainsKey(control.ID) || !permissions[control.ID])\n        {\n            // Disable or Hide the Control\n            control.Visible = false; \n        }\n    }\n}