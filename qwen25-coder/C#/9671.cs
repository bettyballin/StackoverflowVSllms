public class MultiTenantMembershipProvider : MembershipProvider\n{\n    public override bool ValidateUser(string username, string password)\n    {\n        // Get the current tenant's database connection string\n        string connectionString = GetCurrentTenantConnectionString();\n        using (SqlConnection conn = new SqlConnection(connectionString))\n        {\n            SqlCommand cmd = conn.CreateCommand();\n            cmd.CommandText = "SELECT Password FROM Users WHERE Username=@username";\n            cmd.Parameters.AddWithValue("@username", username);\n            conn.Open();\n            string dbPassword = (string)cmd.ExecuteScalar();\n\n            if (dbPassword != null && FormsAuthentication.HashPasswordForStoringInConfigFile(password, "SHA1") == dbPassword)\n                return true;\n        }\n        return false;\n    }\n\n    private string GetCurrentTenantConnectionString()\n    {\n        // Logic to determine the current tenant and fetch their connection string from a central config database\n        stringtenantId = HttpContext.Current.Request.Headers["X-Tenant-ID"] ?? "default";\n        using (SqlConnection conn = new SqlConnection("your_central_config_db_connection_string"))\n        {\n            SqlCommand cmd = conn.CreateCommand();\n            cmd.CommandText = "SELECT ConnectionString FROM Tenants WHERE TenantID=@tenantId";\n            cmd.Parameters.AddWithValue("@tenantId", tenantId);\n            conn.Open();\n            return (string)cmd.ExecuteScalar();\n        }\n    }\n\n    // Implement other required methods...\n}\n\npublic class MultiTenantRoleProvider : RoleProvider\n{\n    public override string[] GetRolesForUser(string username)\n    {\n        string connectionString = GetCurrentTenantConnectionString();\n        using (SqlConnection conn = new SqlConnection(connectionString))\n        {\n            SqlCommand cmd = conn.CreateCommand();\n            cmd.CommandText = "SELECT Role FROM UserRoles WHERE Username=@username";\n            cmd.Parameters.AddWithValue("@username", username);\n            var roles = new List<string>();\n            conn.Open();\n            SqlDataReader rdr = cmd.ExecuteReader();\n            while (rdr.Read())\n                roles.Add(rdr["Role"].ToString());\n            return roles.ToArray();\n        }\n    }\n\n    private string GetCurrentTenantConnectionString()\n    {\n        // Logic to determine the current tenant and fetch their connection string from a central config database\n        string tenantId = HttpContext.Current.Request.Headers["X-Tenant-ID"] ?? "default";\n        using (SqlConnection conn = new SqlConnection("your_central_config_db_connection_string"))\n        {\n            SqlCommand cmd = conn.CreateCommand();\n            cmd.CommandText = "SELECT ConnectionString FROM Tenants WHERE TenantID=@tenantId";\n            cmd.Parameters.AddWithValue("@tenantId", tenantId);\n            conn.Open();\n            return (string)cmd.ExecuteScalar();\n        }\n    }\n\n    // Implement other required methods...\n}