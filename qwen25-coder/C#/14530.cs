using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic static class EnumerableExtensions\n{\n    public static int SafeSum<T>(this IEnumerable<T> source, Func<T, int> selector)\n    {\n        if (source == null) throw new ArgumentNullException(nameof(source));\n        if (selector == null) throw new ArgumentNullException(nameof(selector));\n\n        return source.Select(selector).DefaultIfEmpty(0).Sum();\n    }\n\n    public static decimal SafeSum<T>(this IEnumerable<T> source, Func<T, decimal> selector)\n    {\n        if (source == null) throw new ArgumentNullException(nameof(source));\n        if (selector == null) throw new ArgumentNullException(nameof(selector));\n\n        return source.Select(selector).DefaultIfEmpty(0m).Sum();\n    }\n    \n    // You can add more overloads for other numeric types as needed\n}\n\n// Usage example:\nvar sum = e.CampaignCodes.SafeSum(f => f.Enquiries.Count());