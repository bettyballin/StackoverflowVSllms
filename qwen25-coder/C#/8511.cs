using (var sessionFactory = Fluently.Configure()\n    .Database(SQLiteConfiguration.Standard.InMemory().ShowSql())\n    .Mappings(m => m.FluentMappings.AddFromAssemblyOf<ProductCategory>())\n    .ExposeConfiguration(cfg => new SchemaExport(cfg).Create(false, true))\n    .BuildSessionFactory())\n{\n    using (var session = sessionFactory.OpenSession())\n    {\n        using (var transaction = session.BeginTransaction())\n        {\n            // Step 1 to 4: Instantiate and save categories\n            var beverages = new ProductCategory { Name = "Beverages" };\n            var beer = new ProductCategory { Name = "Beer", Parent = beverages };\n            beers.Add(new ProductCategory { Name = "Light Beer", Parent = beer });\n            beers.Add(new ProductCategory { Name = "Dark Beer", Parent = beer });\n\n            session.Save(beverages);\n            transaction.Commit();\n        }\n\n        // Step 5: Evict each of the ProductCategories from the session\n        foreach (var category in new[] { beverages, beer })\n        {\n            session.Evict(category);\n        }\n\n        // Clear the session to ensure no stale data is left\n        session.Clear();\n\n        // Load Beverages from the database\n        using (var transaction = session.BeginTransaction())\n        {\n            var fromDB = session.Get<ProductCategory>(beverages.Id);\n\n            // Step 6-9: Check assertions about fromDB\n            Assert.AreEqual(beverages, fromDB);\n            Assert.AreNotSame(beverages, fromDB);\n            Assert.AreEqual(1, fromDB.Children.Count); // Assuming only 'Beer' is directly under Beverages in this case for the test to make sense\n            var loadedBeer = fromDB.Children.First();\n            Assert.AreEqual(beer, loadedBeer);\n            Assert.AreNotSame(beer, loadedBeer);\n\n            transaction.Commit();\n        }\n    }\n}