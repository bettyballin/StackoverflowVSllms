using System;\nusing System.IO;\nusing System.Text;\n\npublic class CustomDelimiterParser\n{\n    private readonly char _fieldDelimiter;\n    private readonly char _quoteCharacter;\n\n    public CustomDelimiterParser(char fieldDelimiter, char quoteCharacter)\n    {\n        _fieldDelimiter = fieldDelimiter;\n        _quoteCharacter = quoteCharacter;\n    }\n\n    public void ParseFile(string filePath)\n    {\n        using var fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read);\n        using var reader = new StreamReader(fileStream, Encoding.UTF8);\n\n        string line;\n        while ((line = reader.ReadLine()) != null)\n        {\n            ParseLine(line);\n        }\n    }\n\n    private void ParseLine(ReadOnlySpan<char> line)\n    {\n        int i = 0;\n        bool inQuotes = false;\n\n        StringBuilder fieldBuilder = new StringBuilder();\n        while (i < line.Length)\n        {\n            if (!inQuotes && line[i] == _quoteCharacter)\n                inQuotes = true;\n            else if (inQuotes && line[i] == _quoteCharacter)\n            {\n                if (++i >= line.Length || line[i] != _quoteCharacter) // look ahead for double quotes\n                {\n                    inQuotes = false;\n                    continue;\n                }\n            }\n            else if (!inQuotes && i < line.Length - 1 && line.Slice(i, 2).SequenceEqual(new ReadOnlySpan<char>(new[] { _fieldDelimiter, _quoteCharacter })))\n            {\n                ProcessField(fieldBuilder.ToString());\n                fieldBuilder.Clear();\n                i += 1; // skip delimiter and quote\n                continue;\n            }\n\n            fieldBuilder.Append(line[i++]);\n        }\n\n        if (inQuotes || fieldBuilder.Length > 0)\n        {\n            ProcessField(fieldBuilder.ToString());\n        }\n    }\n\n    private void ProcessField(string field)\n    {\n        // Handle parsed fields here. For simplicity, just print them.\n        Console.WriteLine($"Parsed Field: {field}");\n    }\n}