using System;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Web.Mvc;\n\npublic ActionResult Index(string field, string query_value)\n{\n    var dataContext = new PurchaseOrderDataContext();\n\n    // Define the parameter expression for the type of the purchase_orders table\n    ParameterExpression paramExp = Expression.Parameter(typeof(purchase_order), "o");\n\n    // Get the property info of the specified field\n    var propInfo = typeof(purchase_order).GetProperty(field);\n    if (propInfo == null) throw new ArgumentException("Invalid field name", nameof(field));\n\n    // Create a property expression based on the parameter and property info\n    Expression propExp = Expression.Property(paramExp, propInfo);\n\n    // Get constant value for query_value - make sure it's not null\n    var constantValue = Expression.Constant(query_value ?? "", typeof(string));\n\n    // Create the method call to StartsWith for dynamic field comparison\n    MethodCallExpression startsWithMethodCall = Expression.Call(\n        propExp,\n        typeof(string).GetMethod("StartsWith", new[] { typeof(string) }),\n        constantValue);\n\n    // Create lambda expression from the parameter and body (the method call)\n    LambdaExpression lambda = Expression.Lambda<Func<purchase_order, bool>>(startsWithMethodCall, paramExp);\n\n    // Call Where with a compiled lambda to filter data\n    var ordersQueryable = dataContext.purchase_orders.AsQueryable().Where((Expression<Func<purchase_order, bool>>)lambda);\n\n    if (Request.IsAjaxRequest())\n    {\n        return PartialView("list", ordersQueryable.ToList());\n    }\n    else\n    {\n        return View(ordersQueryable.ToList());\n    }\n}