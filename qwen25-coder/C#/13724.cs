using System;\nusing System.Runtime.InteropServices;\n\npublic class ConsoleInputManipulator\n{\n    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]\n    public static extern IntPtr GetStdHandle(uint nStdHandle);\n\n    [DllImport("kernel32.dll", SetLastError = true)]\n    public static extern bool WriteConsoleInput(IntPtr hConsoleInput, INPUT_RECORD[] lpBuffer, int nLength, out int lpNumberOfEventsWritten);\n\n    private const uint STD_INPUT_HANDLE = 0xfffffff6;\n\n    [StructLayout(LayoutKind.Explicit)]\n    public struct KEY_EVENT_RECORD\n    {\n        [FieldOffset(0)] public bool bKeyDown;\n        [FieldOffset(4)] public short wRepeatCount;\n        [FieldOffset(6)] public short wVirtualKeyCode;\n        [FieldOffset(8)] public short wVirtualScanCode;\n        [FieldOffset(10)] public char UnicodeChar;\n        [FieldOffset(12)] public KeyEventControlKeyState dwControlKeyState;\n    }\n\n    public enum KeyEventControlKeyState : uint\n    {\n        RIGHT_ALT_PRESSED = 0x0001,\n        LEFT_ALT_PRESSED = 0x0002,\n        RIGHT_CTRL_PRESSED = 0x0004,\n        LEFT_CTRL_PRESSED = 0x0008,\n        SHIFT_PRESSED = 0x0010,\n        NUMLOCK_ON = 0x0020,\n        SCROLLLOCK_ON = 0x0040,\n        CAPSLOCK_ON = 0x0080,\n        ENHANCED_KEY = 0x0100\n    }\n\n    [StructLayout(LayoutKind.Explicit)]\n    public struct INPUT_RECORD\n    {\n        [FieldOffset(0)] public ushort EventType;\n        [FieldOffset(4)] public KEY_EVENT_RECORD Event;\n    }\n\n    private const ushort KEY_EVENT = 1;\n\n    public static void WriteConsoleInput()\n    {\n        IntPtr hConsoleInput = GetStdHandle(STD_INPUT_HANDLE);\n\n        INPUT_RECORD[] lpBuffer = new INPUT_RECORD[2];\n\n        lpBuffer[0].EventType = KEY_EVENT;\n        lpBuffer[0].Event.KeyEvent.bKeyDown = true;\n        lpBuffer[0].Event.KeyEvent.wVirtualKeyCode = 0x41; // A\n        lpBuffer[0].Event.KeyEvent.UnicodeChar = 'A';\n\n        lpBuffer[1] = lpBuffer[0];\n        lpBuffer[1].Event.KeyEvent.bKeyDown = false; // Release the key\n\n        int nLength = lpBuffer.Length;\n        int lpNumberOfEventsWritten;\n\n        if (!WriteConsoleInput(hConsoleInput, lpBuffer, nLength, out lpNumberOfEventsWritten))\n        {\n            Console.WriteLine("Error: {0}", GetLastError());\n        }\n    }\n\n    [DllImport("kernel32.dll")]\n    public static extern uint GetLastError();\n\n    public static void Main()\n    {\n        Console.Write("Input something: ");\n        WriteConsoleInput();\n        string input = Console.ReadLine();\n        Console.WriteLine("input = {0}", input);\n    }\n}