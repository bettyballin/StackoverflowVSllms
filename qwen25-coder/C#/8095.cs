using System;\nusing System.Runtime.InteropServices;\n\nclass Program\n{\n    // Define the external method using DllImport\n    [DllImport("YourLibrary.dll", CallingConvention = CallingConvention.Cdecl)]\n    public static extern void Func(IntPtr bytes);\n\n    static void Main()\n    {\n        // Create a C# byte array\n        byte[] managedArray = new byte[1000];\n        \n        // Use GCHandle to pin the managed memory so it won't be moved during garbage collection\n        GCHandle handle = GCHandle.Alloc(managedArray, GCHandleType.Pinned);\n        \n        try\n        {\n            // Get a pointer to the pinned array's first element\n            IntPtr ptr = Marshal.UnsafeAddrOfPinnedArrayElement(managedArray, 0);\n            \n            // Call the external function with the pointer\n            Func(ptr);\n        }\n        finally\n        {\n            // Free the GCHandle when done\n            handle.Free();\n        }\n    }\n}