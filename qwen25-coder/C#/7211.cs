using System;\nusing System.Globalization;\n\npublic class PaddedStringFormatInfo : IFormatProvider, ICustomFormatter\n{\n    public object GetFormat(Type formatType)\n    {\n        if (formatType == typeof(ICustomFormatter))\n            return this;\n        return null;\n    }\n\n    public string Format(string format, object arg, IFormatProvider formatProvider)\n    {\n        if (!this.Equals(formatProvider) || string.IsNullOrEmpty(format))\n        {\n            // Use default formatting\n            return HandleOtherFormats(format, arg);\n        }\n\n        int paddingSize = 0;\n        char padChar;\n\n        // Decode the format argument\n        bool leftAlign = false;\n        if (format[0] == '-')\n        {\n            leftAlign = true;\n            format = format.Substring(1);\n        }\n\n        if (int.TryParse(format, out paddingSize) && paddingSize > arg.ToString().Length)\n        {\n            char lastChar = format[format.Length - 1];\n            padChar = LastCharIsPaddingCharacter(lastChar, leftAlign) ? lastChar : ' ';\n            int actualPaddingSize = paddingSize - arg.ToString().Length;\n            string paddedString = new string(padChar, actualPaddingSize);\n\n            return leftAlign\n                ? arg + paddedString\n                : paddedString + arg;\n        }\n\n        return arg.ToString();\n    }\n\n    private bool LastCharIsPaddingCharacter(char lastChar, bool isLeftAlign)\n    {\n        // Check if the last character is not a digit, then it's a padding char.\n        return !char.IsDigit(lastChar);\n    }\n\n    private static string HandleOtherFormats(string format, object arg)\n    {\n        if (arg == null) return String.Empty;\n        if (!String.IsNullOrEmpty(format)) return String.Format("'{0}':{1}", format, arg);\n        return arg.ToString();\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        string result = string.Format(new PaddedStringFormatInfo(), "->{0:20:x} {1}<-", "Hello", "World");\n        Console.WriteLine(result); // ->xxxxxxxxxxxxxxxHello World<-\n\n        result = string.Format(new PaddedStringFormatInfo(), "->{0} {1:-20:x}<-", "Hello", "World");\n        Console.WriteLine(result); // ->Hello Worldxxxxxxxxxxxxxxx<-\n    }\n}