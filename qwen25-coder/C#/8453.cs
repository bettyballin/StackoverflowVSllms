using System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Configuration;\n\npublic class DatabaseQueryProvider : IDisposable\n{\n    private readonly string _providerName;\n    private IDbConnection _connection;\n\n    public DatabaseQueryProvider(string connectionKey)\n    {\n        var connectionStringSettings = ConfigurationManager.ConnectionStrings[connectionKey];\n        if (connectionStringSettings == null)\n            throw new ArgumentException($"No connection string found for key: {connectionKey}");\n\n        _providerName = connectionStringSettings.ProviderName;\n        _connection = CreateConnection(_providerName, connectionStringSettings.ConnectionString);\n        _connection.Open();\n    }\n\n    private IDbConnection CreateConnection(string providerName, string connectionString)\n    {\n        switch (providerName.ToLower())\n        {\n            case "system.data.oledb":\n                return new System.Data.OleDb.OleDbConnection(connectionString);\n            case "system.data.sqlclient":\n                return new System.Data.SqlClient.SqlConnection(connectionString);\n            default:\n                throw new NotSupportedException($"Provider '{providerName}' is not supported.");\n        }\n    }\n\n    public IDbCommand GetCommand(string queryKey)\n    {\n        var commandText = ConfigurationManager.AppSettings[queryKey];\n        if (string.IsNullOrEmpty(commandText))\n            throw new ArgumentException($"No SQL statement found for key: {queryKey}");\n\n        var command = _connection.CreateCommand();\n        command.CommandText = commandText;\n        return command;\n    }\n\n    public void Dispose()\n    {\n        _connection?.Dispose();\n    }\n}