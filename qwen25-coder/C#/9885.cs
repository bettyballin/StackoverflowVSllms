using System;\nusing System.Collections.Concurrent;\n\npublic interface IGameAction {}\n\npublic class SecureQueueWriter<T>\n{\n    private readonly ConcurrentQueue<T> _queue;\n\n    public SecureQueueWriter(ConcurrentQueue<T> queue)\n    {\n        _queue = queue ?? throw new ArgumentNullException(nameof(queue));\n    }\n\n    public void Enqueue(T item)\n    {\n        if (item == null) throw new ArgumentNullException(nameof(item));\n        _queue.Enqueue(item);\n    }\n}\n\npublic interface IGameClient\n{\n    void HandleStateChange(IGameState gameState, SecureQueueWriter<IGameAction> actionQueueWriter);\n}