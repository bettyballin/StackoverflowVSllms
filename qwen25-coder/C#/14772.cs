using System;\nusing System.IO;\nusing System.Net.Sockets;\nusing System.Net.Security;\nusing System.Text;\n\npublic class WebProxyServer\n{\n    public static void Main()\n    {\n        TcpListener pServer = new TcpListener(System.Net.IPAddress.Any, 8080);\n        pServer.Start(256);\n\n        while (true)\n        {\n            Socket client = pServer.AcceptSocket();\n            HandleClient(client);\n        }\n    }\n\n    private static void HandleClient(Socket client)\n    {\n        NetworkStream networkStream = new NetworkStream(client);\n        byte[] buffer = new byte[3];\n        \n        // Peek at the first 3 bytes\n        int bytesRead = networkStream.Read(buffer, 0, 3);\n        if (byteRead == 3 && buffer[0] == 22 && buffer[1] == 3 && buffer[2] >= 1 && buffer[2] <= 3)\n        {\n            // This looks like the start of an SSL/TLS handshake\n            SslStream sslStream = new SslStream(networkStream, false);\n            try\n            {\n                // Use your certificate or pass null if you don't have one\n                sslStream.AuthenticateAsServer(null, clientCertificateRequired: false, checkCertificateRevocationList: true);\n\n                // Now you can read/write using sslStream\n                string request = new StreamReader(sslStream).ReadToEnd();\n                Console.WriteLine("HTTPS Request received:\n" + request);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine("SSL/TLS error: " + ex.Message);\n                return;\n            }\n        }\n        else\n        {\n            // Otherwise, treat it as a normal HTTP connection\n            string request = new StreamReader(networkStream).ReadToEnd();\n            Console.WriteLine("HTTP Request received:\n" + request);\n\n            // Process the HTTP request normally...\n        }\n\n        client.Close();\n    }\n}