public class ThrottlingMiddleware {\n       private static readonly ConcurrentDictionary<string, int> _requestsPerIp = new ConcurrentDictionary<string, int>();\n\n       public async Task InvokeAsync(HttpContext context, RequestDelegate next) {\n           var ipAddress = context.Connection.RemoteIpAddress.ToString();\n           var requestCount = _requestsPerIp.AddOrUpdate(ipAddress, 1, (key, oldVal) => ++oldVal);\n\n           // Simple example: limit to 100 requests per minute\n           if (requestCount > 100) {\n               context.Response.StatusCode = StatusCodes.Status429TooManyRequests;\n               return;\n           }\n\n           try {\n               await next(context);\n           } finally {\n               _requestsPerIp.TryUpdate(ipAddress, requestCount - 1, requestCount);\n           }\n       }\n   }