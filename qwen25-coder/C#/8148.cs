public class YourClass : IYourInterface\n{\n    private int[] _Params;\n\n    public void get_Params(out IntPtr rVal, out int count)\n    {\n        if (_Params == null || _Params.Length == 0)\n        {\n            rVal = IntPtr.Zero;\n            count = 0;\n            return;\n        }\n\n        count = _Params.Length;\n\n        // Allocate unmanaged memory for the array\n        IntPtr ptr = Marshal.AllocCoTaskMem(_Params.Length * sizeof(int));\n\n        try\n        {\n            for (int i = 0; i < _Params.Length; ++i)\n            {\n                Marshal.WriteInt32(ptr, i * sizeof(int), _Params[i]);\n            }\n            rVal = ptr;\n        }\n        catch\n        {\n            // Make sure to free allocated memory in case of an error\n            if (ptr != IntPtr.Zero) Marshal.FreeCoTaskMem(ptr);\n            throw;\n        }\n    }\n\n    public void set_Params([In] ref int[] RnewVal, [In] int count)\n    {\n        if (_Params.Length != count || _Params == null)\n        {\n            _Params = new int[count];\n        }\n\n        for (int i = 0; i < count; ++i)\n        {\n            _Params[i] = RnewVal[i];\n        }\n    }\n}