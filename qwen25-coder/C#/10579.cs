public class BusinessLogic {\n    public User CreateUser(string username, string password, UserDetails details) {\n        ValidateUserDetails(details);\n        ValidateUsername(username);\n        ValidatePassword(password);\n\n        // Create and return user logic here...\n    }\n\n    private void ValidateUserDetails(UserDetails details) {\n        if (details == null) throw new ArgumentNullException(nameof(details));\n        // Add other validations...\n    }\n\n    private void ValidateUsername(string username) {\n        if (string.IsNullOrEmpty(username)) throw new ArgumentException("Invalid username", nameof(username));\n        // Add other validations...\n    }\n\n    private void ValidatePassword(string password) {\n        if (string.IsNullOrEmpty(password)) throw new ArgumentException("Invalid password", nameof(password));\n        // Add other validations...\n    }\n}\n\n// Unit test example for validation methods\n[TestClass]\npublic class BusinessLogicTests {\n    private BusinessLogic _businessLogic;\n\n    [TestInitialize]\n    public void Initialize() {\n        _businessLogic = new BusinessLogic();\n    }\n\n    [TestMethod]\n    public void ValidateUserDetails_WithNullDetails_ShouldThrowArgumentNullException() {\n        Assert.ThrowsException<ArgumentNullException>(() => _businessLogic.ValidateUserDetails(null));\n    }\n\n    [TestMethod]\n    public void ValidateUsername_WithEmptyUsername_ShouldThrowArgumentException() {\n        Assert.ThrowsException<ArgumentException>(() => _businessLogic.ValidateUsername(string.Empty));\n    }\n\n    [TestMethod]\n    public void ValidatePassword_WithNullPassword_ShouldThrowArgumentException() {\n        Assert.ThrowsException<ArgumentException>(() => _businessLogic.ValidatePassword(null));\n    }\n}