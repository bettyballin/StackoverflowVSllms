using System;\nusing System.Collections.Generic;\n\npublic static class DateExtensions\n{\n    public static int NetworkDays(DateTime startDate, DateTime endDate, List<DateTime> holidays = null)\n    {\n        if (startDate > endDate) throw new ArgumentException("Start date must be before end date.");\n        \n        int businessDays = 0;\n\n        for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))\n        {\n            if (date.DayOfWeek != DayOfWeek.Saturday && date.DayOfWeek != DayOfWeek.Sunday)\n            {\n                if (holidays == null || !holidays.Contains(date.Date))\n                {\n                    businessDays++;\n                }\n            }\n        }\n\n        return businessDays;\n    }\n}\n\n// Usage example:\nclass Program\n{\n    static void Main()\n    {\n        DateTime startDate = new DateTime(2023, 10, 1);\n        DateTime endDate = new DateTime(2023, 10, 15);\n        List<DateTime> holidays = new List<DateTime>\n        {\n            new DateTime(2023, 10, 9) // Example holiday\n        };\n\n        int businessDays = DateExtensions.NetworkDays(startDate, endDate, holidays);\n        Console.WriteLine($"Number of business days: {businessDays}");\n    }\n}