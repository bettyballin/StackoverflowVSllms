using System;\nusing System.Linq;\nusing System.Linq.Expressions;\n\npublic class QueryHelper\n{\n    public static IQueryable<T> GetQuery<T>(IQueryable<T> query, string[] searchTerms, Expression<Func<T, string>> fieldSelector)\n    {\n        if (searchTerms == null || searchTerms.Length == 0) return query;\n\n        var parameter = Expression.Parameter(typeof(T), "e");\n        Expression body = null;\n\n        foreach (var searchTerm in searchTerms)\n        {\n            if (!string.IsNullOrEmpty(searchTerm))\n            {\n                // Build the Contains expression\n                var containsMethod = typeof(string).GetMethod("Contains", new[] { typeof(string) });\n                var constantExpression = Expression.Constant(searchTerm, typeof(string));\n                var fieldBody = ReplacingExpressionVisitor.Replace(fieldSelector.Body, fieldSelector.Parameters[0], parameter);\n                var callExpression = Expression.Call(fieldBody, containsMethod, constantExpression);\n\n                if (body == null)\n                {\n                    body = callExpression;\n                }\n                else\n                {\n                    // Combine expressions with OR\n                    body = Expression.Or(body, callExpression);\n                }\n            }\n        }\n\n        if (body != null)\n        {\n            var lambda = Expression.Lambda<Func<T, bool>>(body, parameter);\n            query = query.Where(lambda);\n        }\n\n        return query;\n    }\n}\n\n// Helper class to replace parameters in expressions\npublic class ReplacingExpressionVisitor : ExpressionVisitor\n{\n    private readonly ParameterExpression _oldParameter;\n    private readonly ParameterExpression _newParameter;\n\n    public ReplacingExpressionVisitor(ParameterExpression oldParameter, ParameterExpression newParameter)\n    {\n        _oldParameter = oldParameter;\n        _newParameter = newParameter;\n    }\n\n    protected override Expression VisitParameter(ParameterExpression node)\n    {\n        return ReferenceEquals(node, _oldParameter) ? _newParameter : base.VisitParameter(node);\n    }\n\n    public static Expression Replace(Expression expression, ParameterExpression oldParameter, ParameterExpression newParameter)\n    {\n        var replacingVisitor = new ReplacingExpressionVisitor(oldParameter, newParameter);\n        return replacingVisitor.Visit(expression);\n    }\n}