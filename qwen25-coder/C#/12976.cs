using System;\nusing System.IO;\nusing System.Runtime.InteropServices;\nusing Microsoft.Win32.SafeHandles;\n\npublic class TransactionalFSHelper\n{\n    [DllImport("Kernel32.dll", CharSet = CharSet.Auto)]\n    private static extern SafeFileHandle CreateFileTransacted(\n        string lpFileName,\n        uint dwDesiredAccess,\n        uint dwShareMode,\n        IntPtr lpSecurityAttributes,\n        uint dwCreationDisposition,\n        uint dwFlagsAndAttributes,\n        IntPtr hTemplateFile,\n        Microsoft.Win32.SafeHandles.SafeTransactionHandle hTransaction,\n        IntPtr pusMiniVersion,\n        IntPtr lpExtendedParameter);\n\n    [DllImport("Ktmw32.dll")]\n    private static extern SafeTransactionHandle CreateTransaction(\n        IntPtr lpResourceManager,\n        IntPtr lpTransactionId,\n        IntPtr uow,\n        uint createOptions,\n        uint isolationLevel,\n        uint isolationFlags,\n        string description);\n\n    public void WriteFileTransactional(string filePath, string content)\n    {\n        using (SafeTransactionHandle transaction = CreateTransaction(IntPtr.Zero, IntPtr.Zero, IntPtr.Zero, 0, 0x00010000, 60000, "File Transaction"))\n        {\n            if (transaction.IsInvalid)\n                throw new Exception("Could not create a file system transaction");\n\n            uint GENERIC_WRITE = 0x40000000;\n            using (SafeFileHandle fileHandle = CreateFileTransacted(\n                filePath,\n                GENERIC_WRITE,\n                2, // FILE_SHARE_READ\n                IntPtr.Zero,\n                2, // CREATE_ALWAYS\n                0x10000000, // FILE_ATTRIBUTE_NORMAL | TRANSACTIONMANAGER_COMMIT_DEFAULT\n                IntPtr.Zero,\n                transaction,\n                IntPtr.Zero,\n                IntPtr.Zero))\n            {\n                if (fileHandle.IsInvalid)\n                    throw new Exception("Could not create a file handle");\n\n                using (var stream = new FileStream(fileHandle, FileAccess.Write))\n                {\n                    byte[] data = System.Text.Encoding.UTF8.GetBytes(content);\n                    stream.Write(data, 0, data.Length);\n                }\n\n                // Commit the transaction\n                if (!NativeMethods.CommitTransaction(transaction))\n                {\n                    throw new Exception("Failed to commit transaction.");\n                }\n            }\n        }\n    }\n}\n\npublic static class NativeMethods\n{\n    [DllImport("Ktmw32.dll", CharSet = CharSet.Auto)]\n    public static extern bool CommitTransaction(Microsoft.Win32.SafeHandles.SafeTransactionHandle hTransaction);\n}