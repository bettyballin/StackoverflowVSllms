using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Data.Linq;\n\npublic class X {\n    public int Id { get; set; }\n    public string Name { get; set; }\n    // Add other properties as necessary\n}\n\npublic class MyDataContext : DataContext {\n    public Table<X> Xs;\n}\n\npublic class QueryHelper {\n    private static readonly Func<MyDataContext, IOrderedQueryable<X>> orderedByIdAsc =\n        CompiledQuery.Compile((MyDataContext db) => from x in db.Xs orderby x.Id ascending select x);\n\n    private static readonly Func<MyDataContext, IOrderedQueryable<X>> orderedByIdDesc =\n        CompiledQuery.Compile((MyDataContext db) => from x in db.Xs orderby x.Id descending select x);\n\n    private static readonly Func<MyDataContext, IOrderedQueryable<X>> orderedByNameAsc =\n        CompiledQuery.Compile((MyDataContext db) => from x in db.Xs orderby x.Name ascending select x);\n\n    private static readonly Func<MyDataContext, IOrderedQueryable<X>> orderedByNameDesc =\n        CompiledQuery.Compile((MyDataContext db) => from x in db.Xs orderby x.Name descending select x);\n\n    public IEnumerable<X> GetXsSorted(MyDataContext context, string sortColumn, bool sortDesc) {\n        switch (sortColumn.ToLower()) {\n            case "id":\n                return sortDesc ? orderedByIdDesc(context) : orderedByIdAsc(context);\n            case "name":\n                return sortDesc ? orderedByNameDesc(context) : orderedByNameAsc(context);\n            // Add more cases as necessary\n            default:\n                throw new ArgumentException("Invalid sort column specified");\n        }\n    }\n}