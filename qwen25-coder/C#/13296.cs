using System.ComponentModel;\n\nnamespace TestMvvm444.ViewModel\n{\n    public class CustomerViewModel : INotifyPropertyChanged, IDataErrorInfo\n    {\n        private Customer _customer;\n\n        public CustomerViewModel(Customer customer)\n        {\n            _customer = customer;\n            _customer.PropertyChanged += (s, e) => OnPropertyChanged(e.PropertyName);\n        }\n\n        // Properties\n        public string FirstName\n        {\n            get { return _customer.FirstName; }\n            set { _customer.FirstName = value; }\n        }\n\n        public string LastName\n        {\n            get { return _customer.LastName; }\n            set { _customer.LastName = value; }\n        }\n\n        public string FullName\n        {\n            get { return _customer.FullName; }\n        }\n\n        // Errors\n        public bool HasErrors => _customer.HasErrors;\n\n        public event EventHandler<DataErrorsChangedEventArgs> ErrorsChanged;\n\n        protected virtual void OnPropertyChanged(string propertyName)\n        {\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n            ErrorsChanged?.Invoke(_customer, new DataErrorsChangedEventArgs(propertyName));\n        }\n\n        public string Error => null;\n        public string this[string columnName]\n        {\n            get\n            {\n                var value = _customer.GetErrors(columnName);\n                return (value != null && ((IEnumerable)value).Cast<object>().Any()) ?\n                    String.Join(Environment.NewLine, ((IEnumerable)value)\n                        .Cast<object>()\n                        .Select(o => o.ToString())) : null;\n            }\n        }\n\n        public event PropertyChangedEventHandler PropertyChanged;\n    }\n}