using System;\n\npublic class Utf8Reverser {\n    public static void ReverseUtf8String(byte[] utf8Bytes) {\n        int start = 0;\n        int end = utf8Bytes.Length - 1;\n\n        while (start < end) {\n            int startCharLength = GetUtf8CharLength(utf8Bytes[start]);\n            int endCharLength = GetUtf8CharLength(utf8Bytes[end]);\n\n            if (start + startCharLength > end || end - endCharLength < start)\n                throw new ArgumentException("Invalid UTF-8 sequence detected.");\n\n            SwapSubarrays(utf8Bytes, start, end, Math.Max(startCharLength, endCharLength));\n            start += startCharLength;\n            end -= endCharLength;\n        }\n    }\n\n    private static int GetUtf8CharLength(byte b) {\n        if (b < 0x80) return 1; // ASCII\n        if ((b & 0xE0) == 0xC0) return 2; // 2 bytes UTF-8 character\n        if ((b & 0xF0) == 0xE0) return 3; // 3 bytes UTF-8 character\n        if ((b & 0xF8) == 0xF0) return 4; // 4 bytes UTF-8 character\n        throw new ArgumentException("Invalid UTF-8 byte detected.");\n    }\n\n    private static void SwapSubarrays(byte[] array, int start1, int start2, int length) {\n        for (int i = 0; i < length; ++i) {\n            if (start1 + i >= start2) break; // To handle overlapping regions properly\n            byte temp = array[start1 + i];\n            array[start1 + i] = array[start2 - i];\n            array[start2 - i] = temp;\n        }\n    }\n}