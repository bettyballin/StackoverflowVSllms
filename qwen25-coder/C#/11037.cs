private class StateMachine : IEnumerator<string>\n{\n    private int state = 0;\n    private readonly IEnumerable<string> args;\n    private IEnumerator<string> enumerator2;\n    private IEnumerator<string> argsEnumerator;\n    private string arg;\n    public string current;\n\n    public StateMachine(IEnumerable<string> args)\n    {\n        this.args = args;\n    }\n\n    public bool MoveNext()\n    {\n        switch (state)\n        {\n            case 0:\n                this.state = -1;\n                enumerator2 = getAnotherEnumerator();\n                argsEnumerator = args.GetEnumerator();\n                state = 1;\n\n                while (argsEnumerator.MoveNext())\n                {\n                    arg = argsEnumerator.Current;\n                    enumerator2.MoveNext();\n\n                    current = arg + enumerator2.Current;\n                    state = 2;\n                    return true;\n\n                state1:\n                    state = 1;\n                }\n\n                DisposeEnumerators();\n                break;\n\n            case 2:\n                goto state1;\n        }\n        return false;\n    }\n\n    public void Reset() => throw new NotSupportedException();\n\n    object IEnumerator.Current => Current;\n\n    public string Current => current;\n\n    private void DisposeEnumerators()\n    {\n        argsEnumerator?.Dispose();\n        enumerator2?.Dispose();\n    }\n\n    public void Dispose()\n    {\n        DisposeEnumerators();\n        GC.SuppressFinalize(this);\n    }\n}\n\nIEnumerator<string> strings(IEnumerable<string> args) => new StateMachine(args);