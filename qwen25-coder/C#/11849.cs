using System;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\nusing System.Threading;\n\npublic class AsyncTcpServer\n{\n    // Signal event to indicate that a connection has been accepted.\n    private static ManualResetEvent allDone = new ManualResetEvent(false);\n\n    public static void Main()\n    {\n        // Establish the local endpoint for the socket.\n        IPHostEntry ipHostInfo = Dns.GetHostEntry(Dns.GetHostName());\n        IPAddress ipAddress = ipHostInfo.AddressList[0];\n        IPEndPoint localEndPoint = new IPEndPoint(ipAddress, 11000);\n\n        // Create a TCP/IP socket.\n        Socket listener = new Socket(AddressFamily.InterNetwork,\n            SocketType.Stream, ProtocolType.Tcp);\n\n        // Bind the socket to the local endpoint, and listen for incoming connections.\n        listener.Bind(localEndPoint);\n        listener.Listen(100);\n\n        while (true)\n        {\n            // Set the event to nonsignaled state.\n            allDone.Reset();\n\n            Console.WriteLine("Waiting for a connection...");\n\n            // Start an asynchronous socket to listen for connections\n            int receivedDataSize = 10;\n            listener.BeginAccept(null, receivedDataSize, new AsyncCallback(AcceptReceiveDataCallback), listener);\n\n            // Wait until a connection is made and processed before continuing.\n            allDone.WaitOne();\n        }\n    }\n\n    public static void AcceptReceiveDataCallback(IAsyncResult ar)\n    {\n        Socket listener = (Socket)ar.AsyncState;\n\n        byte[] Buffer;\n        int bytesTransferred;\n        Socket handler = listener.EndAccept(out Buffer, out bytesTransferred, ar);\n        string stringTransferred = Encoding.ASCII.GetString(Buffer, 0, bytesTransferred);\n\n        Console.WriteLine(stringTransferred);\n        Console.WriteLine("Size of data transferred is {0}", bytesTransferred);\n\n        // Create the state object for the asynchronous receive.\n        StateObject state = new StateObject();\n        state.workSocket = handler;\n        handler.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0,\n            new AsyncCallback(ReadCallback), state);\n\n        // Signal that a connection has been accepted and handled.\n        allDone.Set();\n    }\n\n    public static void ReadCallback(IAsyncResult ar)\n    {\n        String content = String.Empty;\n\n        // Retrieve the socket from the state object.\n        StateObject state = (StateObject)ar.AsyncState;\n        Socket handler = state.workSocket;\n\n        // Read data from the client socket \n        int bytesRead = handler.EndReceive(ar);\n\n        if (bytesRead > 0)\n        {\n            // There might be more data, copy the buffer to content.\n            state.sb.Append(Encoding.ASCII.GetString(\n                state.buffer, 0, bytesRead));\n\n            // Check for end-of-file tag. If it is not there, read \n            // more data.\n            content = state.sb.ToString();\n            if (content.IndexOf("<EOF>") > -1)\n            {\n                // All the data has been read from the client; display it on\n                // the console.\n                Console.WriteLine("Read {0} bytes from socket.\n Data : {1}",\n                    content.Length, content);\n                // Echo the data back to the client.\n                Send(handler, content);\n            }\n            else\n            {\n                // Not all data received. Get more.\n                handler.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0,\n                    new AsyncCallback(ReadCallback), state);\n            }\n        }\n    }\n\n    private static void Send(Socket handler, String data)\n    {\n        // Convert the string data to byte data using ASCII encoding.\n        byte[] byteData = Encoding.ASCII.GetBytes(data);\n\n        // Begin sending data to the remote device.\n        handler.BeginSend(byteData, 0, byteData.Length, 0,\n            new AsyncCallback(SendCallback), handler);\n    }\n\n    private static void SendCallback(IAsyncResult ar)\n    {\n        try\n        {\n            // Retrieve the socket from the state object.\n            Socket handler = (Socket)ar.AsyncState;\n\n            // Complete sending the data to the remote device.\n            int bytesSent = handler.EndSend(ar);\n            Console.WriteLine("Sent {0} bytes back to client.", bytesSent);\n\n            handler.Shutdown(SocketShutdown.Both);\n            handler.Close();\n\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.ToString());\n        }\n    }\n\n    // State object for reading client data asynchronously\n    public class StateObject\n    {\n        // Client socket.\n        public Socket workSocket = null;\n        // Size of receive buffer.\n        public const int BufferSize = 256;\n        // Receive buffer.\n        public byte[] buffer = new byte[BufferSize];\n        // Received data string.\n        public StringBuilder sb = new StringBuilder();\n    }\n}