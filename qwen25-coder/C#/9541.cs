using System;\nusing System.IO;\nusing System.Reflection;\nusing System.Xml;\n\npublic class ConfigurationMerger\n{\n    public static void MergeConfigurations(string[] configPaths)\n    {\n        // Load the main configuration\n        XmlDocument xmlDoc = new XmlDocument();\n        xmlDoc.Load(AppDomain.CurrentDomain.SetupInformation.ConfigurationFile);\n        XmlNode root = xmlDoc.DocumentElement;\n\n        foreach (string path in configPaths)\n        {\n            if (!File.Exists(path)) continue;\n            \n            XmlDocument otherDoc = new XmlDocument();\n            otherDoc.Load(path);\n\n            // Get the system.serviceModel node from the current document\n            XmlNamespaceManager nsmgr = new XmlNamespaceManager(xmlDoc.NameTable);\n            nsmgr.AddNamespace("sc", "http://schemas.microsoft.com/.NetConfiguration/v2.0");\n\n            XmlNode serviceConfigNode = root.SelectSingleNode("/configuration/system.serviceModel", nsmgr);\n\n            if (serviceConfigNode != null)\n            {\n                // Get the corresponding node from the other document\n                XmlNode otherServiceConfigNode = otherDoc.SelectSingleNode("/configuration/system.serviceModel", nsmgr);\n                \n                if (otherServiceConfigNode != null)\n                {\n                    foreach (XmlNode child in otherServiceConfigNode.ChildNodes)\n                    {\n                        XmlNode importedConfig = xmlDoc.ImportNode(child, true);\n                        serviceConfigNode.AppendChild(importedConfig);\n                    }\n                }\n            }\n        }\n\n        // Save the updated configuration\n        xmlDoc.Save(AppDomain.CurrentDomain.SetupInformation.ConfigurationFile);\n\n        // The following will refresh the in-memory representation of the config file\n        AppDomain currentAppDomain = AppDomain.CurrentDomain;\n        Type type = currentAppDomain.GetType();\n        FieldInfo field = type.GetField("_configCache", BindingFlags.Instance | BindingFlags.NonPublic);\n        object objConfigCache = field.GetValue(currentAppDomain);\n        MethodInfo mi = objConfigCache.GetType().GetMethod("EnsureInit", BindingFlags.Instance | BindingFlags.NonPublic);\n        mi.Invoke(objConfigCache, null);\n    }\n}\n\n// Usage\npublic static void Main()\n{\n    string[] adapterConfigs = { "AdapterAssembly1.dll.config", "AdapterAssembly2.dll.config" };\n    ConfigurationMerger.MergeConfigurations(adapterConfigs);\n\n    // Your application logic here\n}