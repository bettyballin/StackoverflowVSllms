using System;\nusing System.IO;\nusing System.Reflection;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        // Subscribe to the AssemblyResolve event\n        AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;\n\n        // Your application logic here\n    }\n\n    private static Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args)\n    {\n        // Define a path where your dependent DLLs are located\n        string folderPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "DependentDLLs");\n\n        // Extract the name of the assembly that needs to be resolved\n        var assemblyName = new AssemblyName(args.Name).Name + ".dll";\n        string dllPath = Path.Combine(folderPath, assemblyName);\n\n        // Check if the assembly file exists in the specified path\n        if (File.Exists(dllPath))\n        {\n            // Load and return the assembly from the specified path\n            return Assembly.LoadFrom(dllPath);\n        }\n\n        // Return null to let the runtime continue with its normal resolution process\n        return null;\n    }\n}