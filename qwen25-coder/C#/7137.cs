public string Sign(string SigReason, string SigContact, string SigLocation, bool visible)\n{\n    string bugLog = "";\n    try\n    {\n        PdfReader reader = new PdfReader(this.inputPDF);\n        \n        // Activate MultiSignatures\n        using (FileStream fs = new FileStream(this.outputPDF, FileMode.Create, FileAccess.Write))\n        using (PdfStamper st = PdfStamper.CreateSignature(reader, fs, '\0', null, true))\n        {\n            st.MoreInfo = this.metadata.getMetaData();\n            st.XmpMetadata = this.metadata.getStreamedMetaData();\n\n            PdfSignatureAppearance sap = st.SignatureAppearance;\n\n            // Ensure the certificate contains private key\n            if (!this.myCert.HasPrivateKey)\n                throw new InvalidOperationException("The provided certificate does not contain a private key.");\n\n            // Correctly set up the signature crypto information\n            sap.SetCrypto(this.myCert.PrivateKey, // Use the PrivateKey directly or extract Pkcs12Store\n                          new X509Certificate[] { this.myCert },  // Certificate chain including intermediate certificates if needed\n                          null,\n                          PdfSignatureAppearance.WINCER_SIGNED);\n\n            sap.Reason = SigReason;\n            sap.Contact = SigContact;\n            sap.Location = SigLocation;\n\n            if (visible)\n                sap.SetVisibleSignature(new iTextSharp.text.Rectangle(100, 100, 250, 150), 1, null);\n        }\n        \n    }\n    catch (Exception e)\n    {\n        bugLog += " ERROR Sign: " + e.Message;\n    }\n\n    return bugLog;\n}