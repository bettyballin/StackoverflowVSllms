using System;\nusing System.Threading;\n\npublic class SimpleLockFreeStack<T>\n{\n    private Node _top = null;\n\n    private class Node\n    {\n        public readonly T Value;\n        public volatile Node Next;\n\n        public Node(T value)\n        {\n            Value = value;\n        }\n    }\n\n    public void Push(T item)\n    {\n        var newNode = new Node(item);\n        do\n        {\n            newNode.Next = _top;\n        } while (Interlocked.CompareExchange(ref _top, newNode, newNode.Next) != newNode.Next);\n    }\n\n    public bool TryPop(out T result)\n    {\n        Node oldHead;\n        do\n        {\n            oldHead = _top;\n            if (oldHead == null)\n            {\n                result = default(T);\n                return false;\n            }\n        } while (Interlocked.CompareExchange(ref _top, oldHead.Next, oldHead) != oldHead);\n\n        result = oldHead.Value;\n        return true;\n    }\n}