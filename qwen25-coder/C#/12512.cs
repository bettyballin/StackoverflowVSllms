// Example using concrete type directly\nvoid ProcessList(List<int> list) {\n    int sum = 0;\n    for (int i = 0; i < list.Count; i++) {\n        sum += list[i];\n    }\n}\n\n// Usage\nList<int> myList = new List<int>();\nfor (int i = 0; i < 200; i++) myList.Add(i);\nProcessList(myList); // Direct call is more efficient\n\n// When necessary, cast internally within performance-critical methods\nvoid ProcessViaInterface(IList<int> list) {\n    int sum = 0;\n    List<int> concreteList = list as List<int>;\n    if (concreteList != null) { // Use direct access when possible\n        for (int i = 0; i < concreteList.Count; i++) {\n            sum += concreteList[i];\n        }\n    } else { // Fall back to interface if necessary\n        for (int i = 0; i < list.Count; i++) {\n            sum += list[i];\n        }\n    }\n}\n\n// Usage with interface\nIList<int> myInterfaceList = new List<int>();\nfor (int i = 0; i < 200; i++) myInterfaceList.Add(i);\nProcessViaInterface(myInterfaceList); // Less efficient but necessary for interface compatibility