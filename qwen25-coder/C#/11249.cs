public class EventPublisher\n{\n    public event EventHandler MyEvent;\n\n    public void PublishEvent()\n    {\n        MyEvent?.Invoke(this, EventArgs.Empty);\n    }\n}\n\npublic class EventSubscriber : IDisposable\n{\n    private EventPublisher _publisher;\n    private bool disposed = false;\n\n    public EventSubscriber(EventPublisher publisher)\n    {\n        if (publisher == null) throw new ArgumentNullException(nameof(publisher));\n        \n        _publisher = publisher;\n        // Dynamically attaching event handler\n        _publisher.MyEvent += OnMyEventHandler;\n    }\n\n    private void OnMyEventHandler(object sender, EventArgs e)\n    {\n        // Handle the event\n    }\n\n    public void Dispose()\n    {\n        if (!disposed)\n        {\n            disposed = true;\n\n            // Manually detaching event handler to prevent memory leak\n            _publisher.MyEvent -= OnMyEventHandler;\n            _publisher = null;\n\n            GC.SuppressFinalize(this);\n        }\n    }\n\n    ~EventSubscriber()\n    {\n        Dispose(false);\n    }\n}