using System.IO;\nusing iTextSharp.text.pdf;\n\npublic void ConvertPdfToBlackAndWhite(string inputPath, string outputPath)\n{\n    if (!File.Exists(inputPath))\n        throw new FileNotFoundException("The input PDF file was not found.", inputPath);\n\n    using (var reader = new PdfReader(inputPath))\n    {\n        using (var fs = new FileStream(outputPath, FileMode.Create, FileAccess.Write, FileShare.None))\n        {\n            using (var stamper = new PdfStamper(reader, fs))\n            {\n                for (int i = 1; i <= reader.NumberOfPages; i++)\n                {\n                    var contentBytes = stamper.GetOverContent(i);\n                    contentBytes.SetColorFill(BaseColor.BLACK); // Fill all colors to black\n                    contentBytes.BeginText();\n                    contentBytes.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "", 0, 0, 0);\n                    contentBytes.EndText();\n\n                    PdfDictionary pageDict = reader.GetPageN(i);\n                    PdfArray resources = (PdfArray)PdfReader.GetPdfObjectRelease(pageDict.Get(PdfName.RESOURCES));\n\n                    if (resources != null)\n                    {\n                        PdfDictionary xobjects = (PdfDictionary)PdfReader.GetPdfObjectRelease(resources.Get(PdfName.XOBJECT));\n                        if (xobjects != null)\n                        {\n                            foreach (var key in xobjects.Keys)\n                            {\n                                PdfStream stream = (PdfStream)xobjects.GetAsStream(key);\n                                if (stream != null && IsImage(stream))\n                                {\n                                    byte[] bytes = PdfReader.GetStreamBytes(stream);\n                                    // Here you would ideally convert the image to grayscale, but iTextSharp does not directly support this.\n                                    // You might need an image processing library like ImageSharp or System.Drawing to handle conversion.\n                                }\n                            }\n                        }\n                    }\n\n                    // Convert PDF content to Black and White by applying a color shift in PostScript\n                    contentBytes.SetColorStrokeGray(0);\n                    contentBytes.SetColorFillGray(0);\n                    contentBytes.Concatenate(new float[] { 1, 0, 0, 0, 0, 1, 0 });\n                }\n            }\n        }\n    }\n}\n\nprivate bool IsImage(PdfStream stream)\n{\n    PdfDictionary dic = (PdfDictionary)PdfReader.GetPdfObjectRelease(stream);\n    return PdfName.IMAGE.Equals(dic.Get(PdfName.SUBTYPE));\n}