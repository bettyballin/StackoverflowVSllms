using System;\nusing NHibernate;\nusing NHibernate.SqlTypes;\nusing System.Data;\n\npublic class CharStringType : NHibernate.UserTypes.IUserType\n{\n    public new bool Equals(object x, object y)\n    {\n        if (ReferenceEquals(x, y)) return true;\n        if (x == null || y == null) return false;\n        return x.Equals(y);\n    }\n\n    public int GetHashCode(object x)\n    {\n        return x.GetHashCode();\n    }\n\n    public object NullSafeGet(IDataReader rs, string[] names, object owner)\n    {\n        var obj = NHibernateUtil.String.NullSafeGet(rs, names[0]);\n        if (obj == null) return null;\n\n        // Trim whitespace characters as necessary\n        return ((string)obj).Trim();\n    }\n\n    public void NullSafeSet(IDbCommand cmd, object value, int index)\n    {\n        var strValue = value == null ? "" : (string)value;\n        // Ensure character padding to CHAR(6) if needed\n        NHibernateUtil.String.NullSafeSet(cmd, strValue.PadRight(6), index);\n    }\n\n    public object DeepCopy(object value)\n    {\n        return value;  // String is immutable in C#\n    }\n\n    public object Replace(object original, object target, object owner)\n    {\n        return original;\n    }\n\n    public object Assemble(object cached, object owner)\n    {\n        return cached;\n    }\n\n    public object Disassemble(object value)\n    {\n        return value;\n    }\n\n    public SqlType[] SqlTypes\n    {\n        get { return new[]{ NHibernateUtil.String.SqlType}; }\n    }\n\n    public Type ReturnedType\n    {\n        get { return typeof(string); }\n    }\n\n    public bool IsMutable\n    {\n        get { return false; }\n    }\n}