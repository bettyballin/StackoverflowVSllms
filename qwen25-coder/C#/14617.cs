void Method()\n{\n    ... persistence calls (ensure those are done before threading)\n    \n    List<Thread> threads = new List<Thread>();\n    foreach(Thing thing in things)\n    {\n        create a thingResolver object with some data\n        \n        // Pass the SessionFactory to each thread so it can open its own session\n        Thread thread = new Thread(() =>\n            {\n                using (ISession session = sessionFactory.OpenSession())\n                {\n                    using (ITransaction transaction = session.BeginTransaction())\n                    {\n                        try\n                        {\n                            thingResolver.Method(session, thing);\n                            transaction.Commit();\n                        }\n                        catch (Exception)\n                        {\n                            transaction.Rollback();\n                            throw;\n                        }\n                    }\n                }\n            });\n        threads.Add(thread);\n    }\n\n    foreach (Thread thread in threads)\n    {\n        thread.Start();\n    }\n\n    foreach (Thread thread in threads)\n    {\n        thread.Join(); // wait for all the threads to complete\n    }\n\n    ... continue with other operations after all threads are done\n}