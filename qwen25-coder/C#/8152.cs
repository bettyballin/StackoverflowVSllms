using System;\nusing System.Collections.Generic;\n\npublic class GraphNode\n{\n    public string TableName { get; set; }\n    public List<GraphNode> AdjacentNodes { get; set; }\n\n    public GraphNode(string tableName)\n    {\n        TableName = tableName;\n        AdjacentNodes = new List<GraphNode>();\n    }\n}\n\npublic class GraphNavigation\n{\n    // Implement a BFS to find the shortest path from startNode to targetNodeName\n    public static List<string> FindPath(GraphNode startNode, string targetNodeName)\n    {\n        var queue = new Queue<(GraphNode node, List<string> path)>();\n        var visited = new HashSet<GraphNode>();\n\n        queue.Enqueue((startNode, new List<string> { startNode.TableName }));\n        visited.Add(startNode);\n\n        while (queue.Count > 0)\n        {\n            var current = queue.Dequeue();\n\n            if (current.node.TableName == targetNodeName)\n                return current.path;\n\n            foreach (var neighbor in current.node.AdjacentNodes)\n            {\n                if (!visited.Contains(neighbor))\n                {\n                    visited.Add(neighbor);\n                    List<string> newPath = new List<string>(current.path) { neighbor.TableName };\n                    queue.Enqueue((neighbor, newPath));\n                }\n            }\n        }\n\n        return null; // Return null if no path is found\n    }\n}\n\n// Example usage:\nclass Program\n{\n    static void Main()\n    {\n        var table21 = new GraphNode("Table 21");\n        var table12 = new GraphNode("Table 12");\n        var table9 = new GraphNode("Table 9");\n        var table6 = new GraphNode("Table 6");\n        var table8 = new GraphNode("Table 8");\n\n        // Setting up the graph with directed edges\n        table21.AdjacentNodes.Add(table12);\n        table12.AdjacentNodes.Add(table9);\n        table9.AdjacentNodes.Add(table6);\n        table6.AdjacentNodes.Add(table8);\n\n        var path = GraphNavigation.FindPath(table21, "Table 8");\n        if (path != null)\n            Console.WriteLine(string.Join(" -> ", path));\n        else\n            Console.WriteLine("No path found.");\n    }\n}