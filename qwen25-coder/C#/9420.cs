using System;\nusing System.IO;\nusing Microsoft.Win32.SafeHandles;\nusing System.Runtime.InteropServices;\n\npublic class DeviceInfo\n{\n    [DllImport("kernel32.dll", CharSet = CharSet.Unicode)]\n    private static extern bool GetVolumeNameForVolumeMountPoint(\n        string lpszVolumeMountPoint, [Out] char[] lpszVolumeName,\n        uint cchBufferLength);\n\n    [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Auto)]\n    private static extern bool GetVolumeInformation(\n        [MarshalAs(UnmanagedType.LPTStr)] string rootPathName,\n        [MarshalAs(UnmanagedType.LPTStr)] StringBuilder volumeNameBuffer,\n        uint nVolNameSize,\n        out uint volSerialNumber,\n        out uint maxComponentLength,\n        out uint fileSystemFlags,\n        [MarshalAs(UnmanagedType.LPTStr)] StringBuilder fileSystemNameBuffer,\n        uint nFileSystemNameSize);\n\n    public static string GetUniqueDeviceIdentifier(string path)\n    {\n        // Find the root of the volume\n        var mountPoint = Path.GetPathRoot(Path.GetFullPath(path));\n\n        // Buffer for the volume name (GUID path)\n        char[] volumeGuidPath = new char[1024];\n        \n        if (!GetVolumeNameForVolumeMountPoint(mountPoint, volumeGuidPath, 1024))\n            throw new IOException("Failed to get volume Guid Path");\n\n        var guidString = new string(volumeGuidPath).TrimEnd('\0');\n\n        uint serialNumber;\n        string tmpFileSystemNameBuffer;\n        GetDriveInfo(guidString, out serialNumber, out tmpFileSystemNameBuffer);\n\n        return guidString; // Return the GUID path as a unique identifier\n    }\n\n    private static void GetDriveInfo(string root, out uint volumeSerial, out string fileSystem)\n    {\n        var sbVolumeName = new StringBuilder(256);\n        var sbFileSystemName = new StringBuilder(256);\n\n        if (GetVolumeInformation(root, sbVolumeName, (uint)sbVolumeName.Capacity,\n            out volumeSerial, out _, out _, sbFileSystemName, (uint)sbFileSystemName.Capacity))\n        {\n            fileSystem = sbFileSystemName.ToString();\n        }\n        else\n        {\n            throw new IOException("Failed to get drive information");\n        }\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        var path1 = @"\\myserver\users\brian\public\music";\n        var path2 = @"s:\users\brian\public\music";\n        var path3 = @"u:\public\users\music";\n\n        Console.WriteLine("Unique identifier for path1: " + DeviceInfo.GetUniqueDeviceIdentifier(path1));\n        Console.WriteLine("Unique identifier for path2: " + DeviceInfo.GetUniqueDeviceIdentifier(path2));\n        Console.WriteLine("Unique identifier for path3: " + DeviceInfo.GetUniqueDeviceIdentifier(path3));\n    }\n}