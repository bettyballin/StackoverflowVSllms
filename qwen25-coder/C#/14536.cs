using System;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\n\nclass DllAddressFinder\n{\n    [DllImport("kernel32.dll", SetLastError = true)]\n    private static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int processId);\n\n    [DllImport("psapi.dll")]\n    private static extern uint EnumProcessModules(IntPtr hProcess, [Out] IntPtr[] lphModule, uint cb, out uint lpcbNeeded);\n\n    [DllImport("psapi.dll", SetLastError = true)]\n    private static extern uint GetModuleFileNameEx(IntPtr hProcess, IntPtr hModule, [Out] char[] lpBaseName, [In] [MarshalAs(UnmanagedType.U4)] int nSize);\n\n    const uint PROCESS_QUERY_INFORMATION = 0x0400;\n    const uint PROCESS_VM_READ = 0x0010;\n\n    public static IntPtr GetDllAddress(Process process, string dllName)\n    {\n        IntPtr[] modules = new IntPtr[1024];\n        uint cbNeeded;\n        IntPtr hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, false, process.Id);\n        if (hProcess == IntPtr.Zero) throw new Exception("Cannot open target process");\n\n        EnumProcessModules(hProcess, modules, (uint)(IntPtr.Size * modules.Length), out cbNeeded);\n\n        for (int i = 0; i < cbNeeded / IntPtr.Size; i++)\n        {\n            char[] moduleName = new char[1024];\n            GetModuleFileNameEx(hProcess, modules[i], moduleName, moduleName.Length);\n            string name = new string(moduleName).Split('\\').LastOrDefault();\n            if (name?.Equals(dllName, StringComparison.OrdinalIgnoreCase) == true)\n            {\n                return modules[i];\n            }\n        }\n\n        throw new Exception($"Dll {dllName} not found in process {process.ProcessName}");\n    }\n\n    static void Main(string[] args)\n    {\n        try\n        {\n            Process targetProcess = Process.GetProcessesByName("notepad").FirstOrDefault();\n            if (targetProcess == null) throw new Exception("Target process not found");\n\n            IntPtr dllAddress = GetDllAddress(targetProcess, "kernel32.dll");\n            Console.WriteLine($"Base address of kernel32.dll: {dllAddress}");\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine($"Error: {e.Message}");\n        }\n    }\n}