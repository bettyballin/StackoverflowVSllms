public class UserImpersonation : IDisposable\n   {\n       private WindowsImpersonationContext _impersonationContext;\n\n       public UserImpersonation(string domainName, string userName, string password)\n       {\n           IntPtr userToken;\n           if (!LogonUser(userName, domainName, password, Logon32LogonInteractive, Logon32ProviderDefault, out userToken))\n               throw new Exception("Failed to impersonate windows account!");\n\n           using (WindowsIdentity identity = new WindowsIdentity(userToken))\n           {\n               _impersonationContext = identity.Impersonate();\n           }\n       }\n\n       public void Dispose()\n       {\n           _impersonationContext?.Undo();\n       }\n\n       [DllImport("advapi32.dll", SetLastError = true)]\n       private static extern bool LogonUser(string lpszUsername, string lpszDomain, string lpszPassword,\n                                           int dwLogonType, int dwLogonProvider, out IntPtr phToken);\n\n       const int Logon32LogonInteractive = 2;\n       const int Logon32ProviderDefault = 0;\n   }\n\n   // Usage\n   using (new UserImpersonation(@"", @"username", @"password"))\n   {\n       string[] files = Directory.GetFiles(@"S:\");\n       // Process files if needed\n   }