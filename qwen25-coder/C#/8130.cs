using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class SecureFormTokenGenerator\n{\n    private static readonly byte[] Key = Encoding.UTF8.GetBytes("your-256-bit-secret-key-here"); // Must be securely stored\n\n    public (string token, string nonce) GenerateToken(string username)\n    {\n        if (username == null) throw new ArgumentNullException(nameof(username));\n        \n        var timestamp = DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString();\n        var nonce = Guid.NewGuid().ToString("N");\n        var message = $"{nonce}{timestamp}{username}";\n        var signature = SignMessage(message);\n\n        return ($"{message}:{signature}", nonce);\n    }\n\n    public bool ValidateToken(string token, string username)\n    {\n        if (token == null) throw new ArgumentNullException(nameof(token));\n        if (username == null) throw new ArgumentNullException(nameof(username));\n\n        var parts = token.Split(':');\n        if (parts.Length != 2) return false;\n\n        var messageWithSignature = parts[0];\n        var receivedSignature = parts[1];\n\n        var expectedMessageLength = Guid.NewGuid().ToString("N").Length + \n                                    DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString().Length +\n                                    username.Length;\n        if (messageWithSignature.Length != expectedMessageLength)\n            return false; // Message length check to prevent attack\n\n        var messageParts = new string(messageWithSignature.Take(Guid.NewGuid().ToString("N").Length).ToArray());\n        var nonce = messageParts.Substring(0, Guid.NewGuid().ToString("N").Length);\n        \n        var timestamp = messageParts.Substring(Guid.NewGuid().ToString("N").Length,\n                                               DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString().Length);\n        \n        try\n        {\n            long unixTimestamp = Convert.ToInt64(timestamp);\n            if (Math.Abs(DateTimeOffset.UtcNow.ToUnixTimeSeconds() - unixTimestamp) > 300) // Check if timestamp is within 5 minutes\n                return false;\n        }\n        catch { return false; }\n\n        var expectedMessage = $"{nonce}{timestamp}{username}";\n        var expectedSignature = SignMessage(expectedMessage);\n\n        return SignatureEquals(receivedSignature, expectedSignature);\n    }\n\n    private string SignMessage(string message)\n    {\n        using (var hmac = new HMACSHA256(Key))\n        {\n            var hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(message));\n            return Convert.ToBase64String(hash);\n        }\n    }\n\n    private static bool SignatureEquals(string a, string b)\n    {\n        if (a.Length != b.Length) return false;\n        \n        int score = 0;\n        for (int i = 0; i < a.Length; i++)\n        {\n            score |= a[i] ^ b[i];\n        }\n        \n        return score == 0;\n    }\n}