using System;\nusing System.Collections.Generic;\n\npublic class ImageSelectorTests\n{\n    [Test]\n    public void TestNoImageSelectedMoreThanXTimes()\n    {\n        int poolSize = 10; // Y size\n        int maxRepeatsAllowed = 5; // X number of times\n        int testIterations = 100; // Total iterations to run for this test\n\n        var imageSelector = new ImageSelector(poolSize, () => GetDeterministicRandom());\n        Dictionary<int, int> frequencyMap = new Dictionary<int, int>();\n\n        // Run the selection process and track frequencies\n        for (int i = 0; i < testIterations; i++)\n        {\n            int selectedImage = imageSelector.SelectNext();\n            if (!frequencyMap.ContainsKey(selectedImage))\n                frequencyMap[selectedImage] = 1;\n            else\n                frequencyMap[selectedImage]++;\n        }\n\n        // Verify no more than `maxRepeatsAllowed` for any image\n        foreach (var entry in frequencyMap)\n        {\n            Assert.IsTrue(entry.Value <= maxRepeatsAllowed, $"Image {entry.Key} was selected more times than allowed: {entry.Value}");\n        }\n    }\n\n    private static Random random = new Random();\n    private static int GetDeterministicRandom()\n    {\n        // This can be replaced with any predictable sequence for test purposes\n        return random.Next(10); // Random number between 0 and 9\n    }\n}\n\npublic class ImageSelector\n{\n    private readonly int _poolSize;\n    private readonly Func<int> _randomGenerator;\n\n    public ImageSelector(int poolSize, Func<int> randomGenerator)\n    {\n        _poolSize = poolSize;\n        _randomGenerator = randomGenerator;\n    }\n\n    public int SelectNext()\n    {\n        // Example logic to select an image from the pool\n        return _randomGenerator() % _poolSize; // Ensure within bounds of pool size\n    }\n}