using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\n\npublic static class EnumerableExtensions\n{\n    public static IEnumerable<T> Sort<T>(this IEnumerable<T> source, string sortExpression, bool desc)\n    {\n        var param = Expression.Parameter(typeof(T), "x");\n        try\n        {\n            // Split the expression to support nested properties\n            Expression propertyExpr = param;\n            foreach (var propertyName in sortExpression.Split(new[] { '.' }, StringSplitOptions.RemoveEmptyEntries))\n            {\n                propertyExpr = Expression.Property(propertyExpr, propertyName);\n            }\n\n            var sortLambda = Expression.Lambda<Func<T, object>>(Expression.Convert(propertyExpr, typeof(object)), param);\n\n            if (desc)\n            {\n                return source.AsQueryable().OrderByDescending(sortLambda);\n            }\n            else\n            {\n                return source.AsQueryable().OrderBy(sortLambda);\n            }\n        }\n        catch (ArgumentException)\n        {\n            return source;\n        }\n    }\n}\n\npublic class Person\n{\n    public string name { get; set; }\n    public Email email { get; set; }\n}\n\npublic class Email\n{\n    public string desc { get; set; }\n}