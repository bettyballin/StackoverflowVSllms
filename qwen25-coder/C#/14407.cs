using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\npublic class RotatedLabel : Label\n{\n    public new string Text\n    {\n        get => base.Text;\n        set\n        {\n            base.Text = value;\n            Invalidate(); // Redraw the control when text changes\n        }\n    }\n\n    protected override void OnPaint(PaintEventArgs e)\n    {\n        if (string.IsNullOrEmpty(this.Text)) return;\n\n        using (Graphics g = this.CreateGraphics())\n        {\n            SizeF textSize = g.MeasureString(this.Text, this.Font);\n\n            int x = ClientSize.Width / 2 - textSize.Height / 2; // Adjust for rotation\n            int y = ClientSize.Height / 2 + textSize.Width / 2;\n\n            using (Brush brush = new SolidBrush(ForeColor))\n            {\n                e.Graphics.TranslateTransform(x, y);\n                e.Graphics.RotateTransform(-90); // Rotate 90 degrees counterclockwise\n\n                StringFormat format = new StringFormat\n                {\n                    Alignment = StringAlignment.Center,\n                    LineAlignment = StringAlignment.Center\n                };\n\n                e.Graphics.DrawString(this.Text, this.Font, brush, 0, 0, format);\n\n                // Reset transformations to avoid affecting other drawings\n                e.Graphics.ResetTransform();\n            }\n        }\n    }\n\n    protected override void OnSizeChanged(EventArgs e)\n    {\n        base.OnSizeChanged(e);\n        Invalidate(); // Redraw the control when size changes\n    }\n}