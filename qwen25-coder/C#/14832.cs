private void medianFilterSquare(int[] source, int[] dest, int rWidth, int rHeight, int radius) {\n    int neighbourCount = (radius * 2 + 1) * (radius * 2 + 1);\n    int[] rs = new int[neighbourCount];\n    int[] gs = new int[neighbourCount];\n    int[] bs = new int[neighbourCount];\n\n    int rFirst = radius + (rWidth * radius);\n\n    for(int x = 0; x < height; x++) {\n        for(int y = 0; y < width; y++) {\n            int destOffset = x * width + y;\n            int rOffset = destOffset + rFirst + y * (radius * 2);\n            int index = 0;\n\n            for(int xk = -radius; xk <= radius; xk++) {\n                for(int yk = -radius; yk <= radius; yk++) {\n                    int kOffset = rOffset + xk + yk * rWidth;\n                    int pixel = source[kOffset];\n                    rs[index] = (pixel >> 16) & 0xFF;\n                    gs[index] = (pixel >> 8) & 0xFF;\n                    bs[index] = pixel & 0xFF;\n                    index++;\n                }\n            }\n\n            dest[destOffset] = ((medianFilter(rs)) << 16) | \n                               ((medianFilter(gs)) << 8) |\n                               medianFilter(bs);\n        }\n    }\n}\n\n// Quickselect algorithm for finding the median\nprivate int medianFilter(int[] array) {\n    return quickSelect(array, 0, array.length - 1, array.length / 2);\n}\n\nprivate int quickSelect(int[] a, int lo, int hi, int k) {\n    if (lo == hi)\n        return a[lo];\n\n    int pivotIndex = partition(a, lo, hi);\n\n    if (k == pivotIndex)\n        return a[k];\n    else if (k < pivotIndex)\n        return quickSelect(a, lo, pivotIndex - 1, k);\n    else\n        return quickSelect(a, pivotIndex + 1, hi, k);\n}\n\nprivate int partition(int[] a, int lo, int hi) {\n    int pivot = a[hi];\n    int i = lo;\n    for (int j = lo; j < hi; j++) {\n        if (a[j] <= pivot) {\n            swap(a, i, j);\n            i++;\n        }\n    }\n    swap(a, i, hi);\n    return i;\n}\n\nprivate void swap(int[] array, int i, int j) {\n    int temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n}