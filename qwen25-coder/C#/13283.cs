using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.Composition;\nusing System.ComponentModel.Composition.Hosting;\n\npublic interface IFilter {\n    string Name { get; }\n}\n\n[Export(typeof(IFilter))]\npublic class DemoFilter1 : IFilter {\n    public string Name => "DemoFilter1";\n}\n\npublic class PluginManager {\n    private AggregateCatalog catalog;\n    private CompositionContainer container;\n    private Dictionary<string, IFilter> allPlugins;\n    private HashSet<IFilter> activeFilters;\n\n    [ImportMany]\n    public IEnumerable<Lazy<IFilter>> Filters { get; set; }\n\n    public PluginManager(string directoryPath) {\n        allPlugins = new Dictionary<string, IFilter>();\n        activeFilters = new HashSet<IFilter>();\n\n        catalog = new AggregateCatalog();\n        var dirCatalog = new DirectoryCatalog(directoryPath);\n        dirCatalog.Refresh(); // Manually refresh if necessary\n        catalog.Catalogs.Add(dirCatalog);\n\n        container = new CompositionContainer(catalog);\n        container.ComposeParts(this);\n\n        InitializeAllPlugins();\n\n        catalog.Changed += Catalog_Changed;\n    }\n\n    private void Catalog_Changed(object sender, ComposablePartCatalogChangeEventArgs e) {\n        // Handle changes to the catalog (new/removed assemblies)\n        InitializeAllPlugins();\n        UpdateActiveFilters(); // Re-update active filters when catalog changes\n    }\n\n    private void InitializeAllPlugins() {\n        allPlugins.Clear();\n        foreach (var filter in Filters) {\n            var instance = filter.Value;\n            allPlugins[instance.Name] = instance;\n        }\n    }\n\n    public void SelectPlugin(string name, bool select) {\n        if (allPlugins.TryGetValue(name, out var plugin)) {\n            if (select) {\n                activeFilters.Add(plugin);\n            } else {\n                activeFilters.Remove(plugin);\n            }\n        }\n    }\n\n    private void UpdateActiveFilters() {\n        // Re-update the set of active filters based on current state\n    }\n\n    public IEnumerable<IFilter> GetActiveFilters() => activeFilters;\n}\n\n// Usage Example:\nclass Program {\n    static void Main(string[] args) {\n        var pluginManager = new PluginManager(@"..\..\plugin");\n        \n        foreach (var filter in pluginManager.GetActiveFilters()) {\n            // Use the filters\n            Console.WriteLine(filter.Name);\n        }\n    }\n}