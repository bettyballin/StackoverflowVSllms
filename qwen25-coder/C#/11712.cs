bool CanDrop(DragEventArgs e)\n{\n    Point point = tree.PointToClient(new Point(e.X, e.Y));\n    var targetNode = tree.GetNodeAt(point);\n\n    if (targetNode == null || !CanWrite(targetNode))\n        return false;\n\n    // Check for internal data drop\n    var dataInfoObject = e.Data.GetData(typeof(DataInfoObject)) as DataInfoObject;\n    if (dataInfoObject != null)\n    {\n        var dataCollection = dataInfoObject.GetData(typeof(DragDataCollection)) as DragDataCollection;\n        if (dataCollection == null) return false;\n\n        // Further validation can be done here if needed\n        return true;\n    }\n\n    // Check for same-tree drag-drop operations\n    if (tree.SelectedNode?.Tag is TreeRow && tree.SelectedNode != targetNode)\n    {\n        if (TargetExistsInNode(tree.SelectedNode, targetNode)) return false;\n\n        switch (e.Effect)\n        {\n            case DragDropEffects.Copy:\n                return true;\n            case DragDropEffects.Move:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    return false;\n}\n\nbool TargetExistsInNode(TreeNode source, TreeNode potentialParent)\n{\n    if (source == null || potentialParent == null) return false;\n\n    while (potentialParent.Parent != null)\n    {\n        if (potentialParent.Parent == source)\n            return true;\n        potentialParent = potentialParent.Parent;\n    }\n\n    return false;\n}