using System;\nusing System.Security;\nusing System.Security.Permissions;\nusing System.Reflection;\nusing System.CodeDom.Compiler;\nusing Microsoft.CSharp;\nusing System.Threading;\nusing System.Security.Principal;\n\npublic class SandboxEvaluator\n{\n    public void Execute()\n    {\n        Thread tSandbox = new Thread(new ParameterizedThreadStart(this.DoSandboxedEvaluation));\n        \n        // Create a permission set with limited permissions\n        PermissionSet permissionSet = new PermissionSet(PermissionState.None);\n        permissionSet.AddPermission(new SecurityPermission(SecurityPermissionFlag.Execution));\n\n        // Grant only Execution permission to the dynamic assembly\n        AppDomainSetup setup = new AppDomainSetup();\n        setup.ApplicationBase = AppDomain.CurrentDomain.BaseDirectory;\n        \n        var sandboxDomain = AppDomain.CreateDomain("Sandbox", null, setup);\n        sandboxDomain.SetData("SecurityLevel", 2); // FullTrust is 1, Minimal is 4, everything else is partial trust\n        sandboxDomain.SetAppDomainPolicy(new DomainPolicy(permissionSet));\n\n        tSandbox.Start(sandboxDomain);\n\n        AppDomain.Unload(sandboxDomain);\n    }\n\n    private void DoSandboxedEvaluation(object domain)\n    {\n        var appDomain = (AppDomain)domain;\n        \n        // Compile the code in a new sandboxed app domain\n        CodeDomProvider provider = CSharpCodeProvider.CreateProvider("CSharp");\n        CompilerParameters parameters = new CompilerParameters();\n        parameters.GenerateInMemory = true;\n\n        CompilerResults results = provider.CompileAssemblyFromSource(parameters, GetDynamicCode());\n        if (results.Errors.Count > 0)\n            throw new Exception("Syntax Errors Encountered.");\n\n        // Load the assembly in the sandboxed domain\n        Assembly assembly = appDomain.Load(results.CompiledAssembly.FullName);\n        Type typeToLoad = assembly.GetType("Dynamics.Evaluator");\n        \n        var instance = Activator.CreateInstance(typeToLoad);\n        MethodInfo methodInfo = typeToLoad.GetMethod("Evaluate");\n\n        object result = methodInfo.Invoke(instance, new object[] { "example.value" });\n        Console.WriteLine(result);\n    }\n\n    private string GetDynamicCode()\n    {\n        return @"\nusing System;\nnamespace Dynamics\n{\n  public class Evaluator\n  {\n    public Object Evaluate(String value)\n    {\n      Int32 _index = value.LastIndexOf('.');\n      String _retVal = value.Substring(_index + 1);\n      return _retVal;\n    }\n  }\n}";\n    }\n\n    private class DomainPolicy : System.Security.Policy.EvidenceBasedPolicy \n    {\n        private PermissionSet permissionSet;\n\n        public DomainPolicy(PermissionSet grantPermission)\n        {\n            permissionSet = grantPermission;\n        }\n\n        public override PermissionSet ResolveExpr(Evidence expr, IMembershipCondition reqMem Cond, out bool relevant)\n        {            \n            return this.permissionSet;\n        }\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        var evaluator = new SandboxEvaluator();\n        evaluator.Execute();\n    }\n}