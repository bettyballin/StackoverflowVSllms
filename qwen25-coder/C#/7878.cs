using System;\nusing System.Drawing;\nusing System.IO;\nusing System.Net;\nusing System.Text;\n\npublic class MjpegStreamServer\n{\n    private HttpListener listener;\n\n    public void StartListening(string where)\n    {\n        listener = new HttpListener();\n        listener.Prefixes.Add(where);\n        listener.Start();\n        Console.WriteLine("Listening on " + where);\n\n        // Handle requests asynchronously\n        while (true)\n        {\n            var context = listener.GetContext();\n            ProcessRequest(context);\n        }\n    }\n\n    private void ProcessRequest(HttpListenerContext context)\n    {\n        HttpListenerResponse response = context.Response;\n        byte[] boundaryBytes = Encoding.ASCII.GetBytes("\r\n--testboundary\r\nContent-Type: image/jpeg\r\n");\n\n        try\n        {\n            while (true)\n            {\n                Bitmap bitmap = GenerateBitmap();\n                using (var memoryStream = new MemoryStream())\n                {\n                    bitmap.Save(memoryStream, System.Drawing.Imaging.ImageFormat.Jpeg);\n                    byte[] buffer = memoryStream.ToArray();\n\n                    // Write boundary and then image data\n                    response.ContentType = "multipart/x-mixed-replace; boundary=testboundary";\n                    response.OutputStream.Write(boundaryBytes, 0, boundaryBytes.Length);\n\n                    string contentLengthLine = "Content-Length: " + buffer.Length + "\r\n\r\n";\n                    byte[] contentLengthBytes = Encoding.ASCII.GetBytes(contentLengthLine);\n                    response.OutputStream.Write(contentLengthBytes, 0, contentLengthBytes.Length);\n\n                    response.OutputStream.Write(buffer, 0, buffer.Length);\n\n                    // Flush after each frame\n                    response.OutputStream.Flush();\n                }\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine("Error: " + ex.Message);\n        }\n        finally\n        {\n            response.Close();\n        }\n    }\n\n    private Bitmap GenerateBitmap()\n    {\n        // Implement your bitmap generation logic here\n        return new Bitmap(100, 100); // Example\n    }\n\n    public void StopListening()\n    {\n        listener.Stop();\n        Console.WriteLine("Stopped listening.");\n    }\n}