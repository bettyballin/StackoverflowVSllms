using System;\nusing System.IO;\nusing System.Security.Cryptography;\n\nclass Program\n{\n    static void Main()\n    {\n        string originalFilePath = "original.txt";\n        string encryptedFilePath = "encrypted.aes";\n        string decryptedFilePath = "decrypted.txt";\n\n        byte[] key = GenerateRandomKey(); // AES-256 requires a 32-byte (256-bit) key.\n        byte[] iv = GenerateRandomIV();   // AES block size is 16 bytes.\n\n        EncryptFile(originalFilePath, encryptedFilePath, key, iv);\n        DecryptFile(encryptedFilePath, decryptedFilePath, key, iv);\n\n        Console.WriteLine("Encryption and decryption complete successfully.");\n    }\n\n    private static void EncryptFile(string inputFile, string outputFile, byte[] key, byte[] iv)\n    {\n        using (Aes aes = Aes.Create())\n        {\n            aes.Key = key;\n            aes.IV = iv;\n\n            ICryptoTransform encryptor = aes.CreateEncryptor(aes.Key, aes.IV);\n\n            using (FileStream fsInput = new FileStream(inputFile, FileMode.Open))\n            using (FileStream fsOutput = new FileStream(outputFile, FileMode.Create))\n            using (CryptoStream cryptoStream = new CryptoStream(fsOutput, encryptor, CryptoStreamMode.Write))\n            {\n                fsInput.CopyTo(cryptoStream);\n            }\n        }\n    }\n\n    private static void DecryptFile(string inputFile, string outputFile, byte[] key, byte[] iv)\n    {\n        using (Aes aes = Aes.Create())\n        {\n            aes.Key = key;\n            aes.IV = iv;\n\n            ICryptoTransform decryptor = aes.CreateDecryptor(aes.Key, aes.IV);\n\n            using (FileStream fsInput = new FileStream(inputFile, FileMode.Open))\n            using (FileStream fsOutput = new FileStream(outputFile, FileMode.Create))\n            using (CryptoStream cryptoStream = new CryptoStream(fsOutput, decryptor, CryptoStreamMode.Write))\n            {\n                fsInput.CopyTo(cryptoStream);\n            }\n        }\n    }\n\n    private static byte[] GenerateRandomKey()\n    {\n        using (RNGCryptoServiceProvider rngCsp = new RNGCryptoServiceProvider())\n        {\n            byte[] randomKey = new byte[32]; // AES-256 key size\n            rngCsp.GetBytes(randomKey);\n\n            return randomKey;\n        }\n    }\n\n    private static byte[] GenerateRandomIV()\n    {\n        using (RNGCryptoServiceProvider rngCsp = new RNGCryptoServiceProvider())\n        {\n            byte[] randomIv = new byte[16]; // AES block size\n            rngCsp.GetBytes(randomIv);\n\n            return randomIv;\n        }\n    }\n}