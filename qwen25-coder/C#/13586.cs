// Define the IRepository interface with generic data access methods\npublic interface IRepository<T>\n{\n    void Insert(T entity);\n    void Update(T entity);\n    T GetById(int id);\n    IEnumerable<T> GetAll();\n}\n\n// Concrete repository for SQL Server\npublic class SqlServerRepository<T> : IRepository<T>\n{\n    public void Insert(T entity)\n    {\n        // Implement using ADO.NET or Entity Framework if you choose\n    }\n\n    // Other methods...\n}\n\n// Concrete repository for Visual FoxPro\npublic class VfpRepository<T> : IRepository<T>\n{\n    public void Insert(T entity)\n    {\n        // Implement using OLEDB or any other suitable driver\n    }\n\n    // Other methods...\n}\n\n// Factory to select and return the appropriate repository\npublic static class RepositoryFactory\n{\n    private static string DbType = ConfigurationManager.AppSettings["DbType"];\n\n    public static IRepository<T> GetRepository<T>()\n    {\n        switch (DbType)\n        {\n            case "SqlServer":\n                return new SqlServerRepository<T>();\n            case "Vfp":\n                return new VfpRepository<T>();\n            default:\n                throw new NotImplementedException("Unsupported database type");\n        }\n    }\n}