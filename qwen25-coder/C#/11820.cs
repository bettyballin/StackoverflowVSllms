using System.Web.Mvc;\n\npublic class LoggingAuthorizationFilter : ActionFilterAttribute\n{\n    public override void OnActionExecuting(ActionExecutingContext filterContext)\n    {\n        // Log the request details\n        var controllerName = filterContext.ActionDescriptor.ControllerDescriptor.ControllerName;\n        var actionName = filterContext.ActionDescriptor.ActionName;\n\n        // Example logging (you should use a proper logging library like log4net, NLog, etc.)\n        System.Diagnostics.Debug.WriteLine($"Request to {controllerName}/{actionName}");\n\n        // Dynamic authorization logic\n        if (!IsAuthorized(filterContext))\n        {\n            filterContext.Result = new HttpUnauthorizedResult();\n        }\n\n        base.OnActionExecuting(filterContext);\n    }\n\n    private bool IsAuthorized(ActionExecutingContext context)\n    {\n        // Implement your dynamic authorization logic here\n        return true; // or false, based on the condition\n    }\n}\n\n// Apply the filter globally if needed\npublic class FilterConfig\n{\n    public static void RegisterGlobalFilters(GlobalFilterCollection filters)\n    {\n        filters.Add(new LoggingAuthorizationFilter());\n    }\n}