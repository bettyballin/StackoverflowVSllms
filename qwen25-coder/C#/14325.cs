using System;\nusing System.IO;\nusing System.Net.Sockets;\nusing System.Security.Authentication;\nusing System.Security.Cryptography.X509Certificates;\n\nclass SslTcpClient\n{\n    static void Main(string[] args)\n    {\n        string server = "host";\n        int port = 110; // Usually, SSL/TLS doesn't use port 110 for secure mail. Consider using port 995 or 465.\n        \n        try\n        {\n            using (TcpClient client = new TcpClient(server, port))\n            {\n                Console.WriteLine("Connect OK.");\n                \n                SslStream sslStream = new SslStream(\n                    client.GetStream(),\n                    false,\n                    ValidateServerCertificate,\n                    null);\n\n                // The server name must match the name on the server certificate.\n                try\n                {\n                    sslStream.AuthenticateAsClient(server);\n                }\n                catch (AuthenticationException e)\n                {\n                    Console.WriteLine("Exception: {0}", e.Message);\n                    if (e.InnerException != null)\n                    {\n                        Console.WriteLine("Inner exception: {0}", e.InnerException.Message);\n                    }\n\n                    Console.WriteLine("Authentication failed - closing the connection.");\n                    client.Close();\n                    return;\n                }\n\n                Console.WriteLine("SSL Stream OK - reading data");\n                \n                // Read data from the server\n                using (StreamReader reader = new StreamReader(sslStream))\n                {\n                    string msg = reader.ReadToEnd();\n                    Console.WriteLine(msg);\n                }\n            }\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine($"Error: {e.Message}");\n        }\n    }\n\n    private static bool ValidateServerCertificate(\n          object sender,\n          X509Certificate certificate,\n          X509Chain chain,\n          SslPolicyErrors sslPolicyErrors)\n    {\n        if (sslPolicyErrors == SslPolicyErrors.None) return true;\n\n        Console.WriteLine("Certificate error: {0}", sslPolicyErrors);\n\n        // Return true to continue with the connection, or false to terminate it.\n        return false;\n    }\n}