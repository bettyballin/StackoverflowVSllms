using Rhino.Mocks;\nusing NUnit.Framework;\n\n// Define an interface\npublic interface IDependency {\n    int GetData();\n}\n\n[TestFixture]\npublic class SystemUnderTestTests {\n    [Test]\n    public void TestMethod() {\n        // Create a mock repository and stub for the dependency\n        var mocks = new MockRepository();\n        IDependency dependencyStub = mocks.Stub<IDependency>();\n\n        // Set up the behavior of the stub\n        SetupResult.For(dependencyStub.GetData()).Return(5);\n\n        // Use the stub in your system under test\n        var sut = new SystemUnderTest(dependencyStub);\n        int result = sut.GetProcessedData();\n\n        // Assert the expected outcome\n        Assert.AreEqual(10, result); // Assuming GetProcessedData multiplies GetData by 2\n    }\n}\n\n// Example class that uses IDependency\npublic class SystemUnderTest {\n    private readonly IDependency _dependency;\n\n    public SystemUnderTest(IDependency dependency) {\n        _dependency = dependency;\n    }\n\n    public int GetProcessedData() {\n        return _dependency.GetData() * 2;\n    }\n}