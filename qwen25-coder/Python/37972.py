import os\nimport re\n\nclass Check:\n    def __init__(self, name, type, function, status):\n        self.name = name\n        self.type = type\n        self.function = function\n        self.status = status\n\ndef check_valid(filename, path):\n    valid_patterns = [\n        r"^[A-Za-z ]+ - \[\d{x\d+\] - [^\n]+\.avi$",\n        r"^[A-Za-z ]+ - \[\d+xSpecial\d+\] - [^\n]+\.avi$",\n        r"^[A-Za-z ]+ - \[\d+xExtra\d+\] - [^\n]+\.avi$"\n    ]\n    for pattern in valid_patterns:\n        if re.match(pattern, filename):\n            return True\n    return False\n\ndef check_missing_ep_name(filename, path):\n    pattern = r"^[A-Za-z ]+ - \[\d{x\d+\]\.avi$"\n    return re.match(pattern, filename) is not None\n\ndef check_valid_path(filename, path, season_from_filename):\n    pattern = rf"^[A-Za-z ]+/season {season_from_filename}/.*\.avi$"\n    return re.match(pattern, path) is not None\n\ndef check_folder_jpg(path, folder_name):\n    return os.path.exists(os.path.join(path, f"{folder_name}", "folder.jpg"))\n\ndef extract_season(filename):\n    match = re.search(r"\[(\d+)x", filename)\n    if match:\n        return match.group(1)\n    return None\n\ndef categorize_files(directory):\n    checks = [\n        Check(name='valid files', type='file', function=check_valid, status={'code': 0, 'message': 'Valid'}),\n        Check(name='missing episode name', type='file', function=check_missing_ep_name, status={'code': 2, 'message': 'Missing episode name'}),\n        # Add other checks as needed\n    ]\n    \n    files = []\n    results = {'valid': [], 'invalid': []}\n\n    for root, dirs, filenames in os.walk(directory):\n        season_from_path = re.search(r'season (\d+)', root)\n        season_from_path = int(season_from_path.group(1)) if season_from_path else None\n\n        for filename in filenames:\n            file_path = os.path.join(root, filename)\n            season_from_file = extract_season(filename)\n\n            passed_checks = False\n            for check in checks:\n                if check.type == 'file':\n                    if check.function(filename, file_path):\n                        results['valid'].append((filename, file_path, check.status))\n                        passed_checks = True\n                        break\n\n                elif check.type == 'path' and season_from_file:\n                    full_season = season_from_path or season_from_file\n                    if check.function(file_path, root, str(full_season)):\n                        results['valid'].append((filename, file_path, check.status))\n                        passed_checks = True\n                        break\n\n            if not passed_checks:\n                # Check for missing episode name only once\n                if check_missing_ep_name(filename, file_path):\n                    results['invalid'].append((filename, file_path, {'code': 2, 'message': 'Missing episode name'}))\n                else:\n                    results['invalid'].append((filename, file_path, {'code': 3, 'message': 'Malformed name'}))\n\n        # Check for folder.jpg in each directory\n        folder_name = os.path.basename(root)\n        if not check_folder_jpg(directory, folder_name):\n            results['invalid'].append((f"{folder_name}/", root, {'code': 4, 'message': "Missing folder.jpg"}))\n\n    return results\n\n# Example usage\ndirectory_to_check = '/path/to/tv/shows'\nresult = categorize_files(directory_to_check)\nprint(result)