import cv2\nimport numpy as np\n\ndef count_horizontal_lines(image_path, threshold=150):\n    # Read the image in grayscale\n    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)\n    \n    # Apply Canny edge detection\n    edges = cv2.Canny(img, 50, 150, apertureSize=3)\n    \n    # Use HoughLinesP to detect lines\n    lines = cv2.HoughLinesP(edges, 1, np.pi / 180, threshold,\n                              minLineLength=img.shape[1] * 0.9,  # Minimum line length (most of the width)\n                              maxLineGap=5)  # Max allowed gap between points on the same line to link them\n    \n    horizontal_lines = 0\n    if lines is not None:\n        for line in lines:\n            x1, y1, x2, y2 = line[0]\n            angle = np.arctan2(y2 - y1, x2 - x1) * 180. / np.pi\n            # Consider lines nearly horizontal (within Â±5 degrees of 0)\n            if abs(angle) < 5 or abs(180 + angle) < 5:\n                horizontal_lines += 1\n    \n    return horizontal_lines\n\n# Example usage\nimage_paths = ['path_to_img1.jpg', 'path_to_img2.tif']  # Add all your image paths here\n\nfor path in image_paths:\n    line_count = count_horizontal_lines(path)\n    print(f"Image: {path}, Horizontal Lines: {line_count}")