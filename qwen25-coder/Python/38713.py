from sqlalchemy import create_engine, Column, Integer, String, Date, Text, ForeignKey\nfrom sqlalchemy.orm import sessionmaker, relationship, mapped_column, Mapped\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass Work(Base):\n    __tablename__ = 'works'\n    \n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    uniform_title: Mapped[str] = mapped_column(String(255), nullable=False)\n    created_date: Mapped[Date] = mapped_column(Date, nullable=False)\n    context: Mapped[str | None] = mapped_column(Text)\n    distinguishing_characteristics: Mapped[str | None] = mapped_column(Text)\n\n    variant_titles: Mapped[list["VariantWorkTitle"]] = relationship("VariantWorkTitle", back_populates="work")\n\n    @property\n    def titles(self) -> list[str]:\n        return [variant.title for variant in self.variant_titles]\n\nclass VariantWorkTitle(Base):\n    __tablename__ = 'variant_work_titles'\n    \n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    work_id: Mapped[int] = mapped_column(ForeignKey('works.id'), nullable=False)\n    title: Mapped[str] = mapped_column(String(255), nullable=False)\n\n    work: Mapped["Work"] = relationship("Work", back_populates="variant_titles")\n\n# Setup the database engine and session (assuming SQLite for brevity)\nengine = create_engine('sqlite:///:memory:')\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\nsession = Session()\n\n# Example usage\nnew_work = Work(uniform_title='Test Title', created_date='2023-10-01')\nvariant_titles = ['Title 1', 'Title 2', 'Title 3']\nfor title in variant_titles:\n    new_work.variant_titles.append(VariantWorkTitle(title=title))\n\nsession.add(new_work)\nsession.commit()\n\n# Accessing titles as a list\nretrieved_work = session.query(Work).first()\nprint(retrieved_work.titles)  # Outputs: ['Title 1', 'Title 2', 'Title 3']