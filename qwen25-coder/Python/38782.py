# Define Table Schema\nclass TableSchema:\n    def __init__(self):\n        self.columns = {\n            'id': int,\n            'name': str,\n            'value': float,\n            # Add more fields as necessary\n        }\n\n# DSL Parser and Executor\nclass QueryExecutor:\n    def __init__(self, table_data: list):\n        self.table_data = table_data  # Assuming table data is a list of dictionaries\n\n    @staticmethod\n    def parse_expression(expression):\n        """ Simple parser for expressions """\n        import ast\n        parsed_tree = ast.parse(expression, mode='eval')\n        \n        # Validate expression against schema here if needed\n        \n        return eval(compile(parsed_tree, filename="", mode="eval"))\n\n    def query(self, column_name, start_value=None, end_value=None, filter_expr="True"):\n        """ Query the table using index and filter """\n        filtered_data = self.table_data\n\n        # Example for range queries\n        if start_value is not None:\n            filtered_data = [row for row in filtered_data if row[column_name] >= start_value]\n        if end_value is not None:\n            filtered_data = [row for row in filtered_data if row[column_name] <= end_value]\n\n        # Apply filter expression\n        return [row for row in filtered_data if self.parse_expression(filter_expr)]\n\n# Example usage\nif __name__ == "__main__":\n    table_data = [\n        {'id': 1, 'name': 'Alice', 'value': 23.5},\n        {'id': 2, 'name': 'Bob', 'value': 45.0},\n        {'id': 3, 'name': 'Charlie', 'value': 38.4}\n    ]\n\n    query_executor = QueryExecutor(table_data)\n    results = query_executor.query(column_name='value', start_value=30.0, filter_expr="row['name'].startswith('B')")\n    print(results)  # Output: [{'id': 2, 'name': 'Bob', 'value': 45.0}]