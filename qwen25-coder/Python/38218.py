from bs4 import BeautifulSoup\n\ndef abbreviate_xhtml(xhtml_content, max_words):\n    soup = BeautifulSoup(xhtml_content, 'html.parser')\n    words = []\n    tags = []\n\n    # Extract text and keep track of opening/closing tags\n    for tag in soup.find_all(True):  # True to find all tags\n        if tag.string:\n            pieces = tag.string.split()\n            for piece in pieces:\n                words.append(piece)\n                tags.append(tag)\n\n    # Determine the cut-off point based on max_words\n    truncated_html = []\n    i = 0\n    while i < len(words) and len(truncated_html) <= max_words:\n        word = words[i]\n        tag = tags[i]\n        \n        if not truncated_html or truncated_html[-1] != str(tag):\n            truncated_html.append(str(tag))\n        \n        truncated_html.append(word)\n        i += 1\n\n    # Add ellipsis if content was truncated\n    if len(words) > max_words:\n        last_open_tag = None\n        for tag in reversed(truncated_html):\n            if tag.startswith('<'):\n                last_open_tag = tag\n                break\n        truncated_html.append(' ...')\n        \n        # Close the last unclosed tag properly\n        closed_tag = f"</{last_open_tag[1:last_open_tag.find(' ')]}>" if ' ' in last_open_tag else f"</{last_open_tag[1:-1]}>"\n        truncated_html.append(closed_tag)\n\n    return ''.join(truncated_html)\n\n# Example usage:\nxhtml_content = """\n<p>\n    Proin tristique dapibus neque. Nam eget purus sit amet leo\n    tincidunt accumsan.\n</p>\n<p>\n    Proin semper, orci at mattis blandit, augue justo blandit nulla.\n    <span>Quisque ante congue justo</span>, ultrices aliquet, mattis eget,\n    hendrerit, <em>justo</em>.\n</p>\n"""\nprint(abbreviate_xhtml(xhtml_content, 25))