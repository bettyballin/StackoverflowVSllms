def count_neighbors(grid, row, col):\n    total = 0\n    num_rows = len(grid)\n    num_cols = len(grid[0])\n    \n    # Loop through all adjacent cells\n    for i in (-1, 0, 1):\n        for j in (-1, 0, 1):\n            if i == 0 and j == 0:\n                continue  # Skip the cell itself\n            \n            neighbor_row = row + i\n            neighbor_col = col + j\n            \n            # Check boundaries\n            if neighbor_row < 0 or neighbor_row >= num_rows or neighbor_col < 0 or neighbor_col >= num_cols:\n                continue\n            \n            total += grid[neighbor_row][neighbor_col]\n    \n    return total\n\ndef next_generation(grid):\n    new_grid = [[0 for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    \n    for row in range(len(grid)):\n        for col in range(len(grid[row])):\n            neighbors = count_neighbors(grid, row, col)\n            \n            # Apply the rules of Conway's Game of Life\n            if grid[row][col] == 1 and (neighbors < 2 or neighbors > 3):\n                new_grid[row][col] = 0\n            elif grid[row][col] == 0 and neighbors == 3:\n                new_grid[row][col] = 1\n            else:\n                new_grid[row][col] = grid[row][col]\n    \n    return new_grid\n\n# Example usage:\ncurrent_generation = [\n    [0, 1, 0],\n    [0, 0, 1],\n    [1, 1, 1]\n]\n\nnext_gen = next_generation(current_generation)\nprint(next_gen)