from collections import deque\n\ndef six_degrees_of_separation(users_friends, user1, user2):\n    # Queue to hold the users to check next and their current degree of separation\n    queue = deque([(user1, 0)])\n    visited = set([user1])\n\n    while queue:\n        current_user, degree = queue.popleft()\n\n        # Check if we found the target user\n        if current_user == user2:\n            return degree, visited_path(current_user, users_friends)\n\n        # Add all friends of the current user to the queue that have not been visited\n        for friend in users_friends.get(current_user, []):\n            if friend not in visited:\n                visited.add(friend)\n                queue.append((friend, degree + 1))\n\n    # If no connection is found\n    return None, []\n\ndef visited_path(target, friends_map):\n    path = [target]\n    while True:\n        parent_found = False\n        for user, friends in friends_map.items():\n            if target in friends and user not in path:\n                path.insert(0, user)\n                target = user\n                parent_found = True\n                break\n        if not parent_found:\n            break\n    return path\n\n# Example usage\nusers_friends = {\n    'Alice': ['Bob', 'Charlie'],\n    'Bob': ['Eve'],\n    'Charlie': ['David'],\n    'David': ['Eve'],\n    'Eve': []\n}\n\ndegree, path = six_degrees_of_separation(users_friends, 'Alice', 'Eve')\nif degree is not None:\n    print(f"Degree of separation: {degree}")\n    print("Path:", " -> ".join(path))\nelse:\n    print("No connection found within 6 degrees.")