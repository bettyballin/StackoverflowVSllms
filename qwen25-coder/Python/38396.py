import SocketServer\nimport socket\nimport sys\nimport os\nimport time\n\nclass MyRequestHandler(SocketServer.BaseRequestHandler):\n    def handle(self):\n        try:\n            print("Connected:", self.client_address)\n\n            user = self.request.recv(1024).strip().split(":")[1].decode()\n            user = int(user)\n            self.request.send('Welcome #%s' % user)\n\n            usocket_path = '/tmp/u%s.sock' % user\n            if os.path.exists(usocket_path):\n                os.remove(usocket_path)\n\n            usocket = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)  # Use SOCK_STREAM instead of SOCK_DGRAM\n            usocket.bind(usocket_path)\n            usocket.listen(1)\n\n            while True:\n                usocket_conn, _ = usocket.accept()\n                with usocket_conn:  # Ensures the connection is closed after the block\n                    while True:\n                        data = usocket_conn.recv(1024)\n                        if not data:\n                            break\n                        self.request.send(data)\n            \n            os.unlink(usocket_path)  # Clean up Unix socket file\n\n        except KeyboardInterrupt:\n            pass\n        finally:\n            self.request.close()\n\nmyServer = SocketServer.ThreadingTCPServer(('localhost', 8081), MyRequestHandler)\nmyServer.serve_forever()