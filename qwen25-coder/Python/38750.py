from django.db import connection\nfrom django.core.management.color import no_style\nfrom django.test import TestCase\n\nclass SchemaTestCase(TestCase):\n    def test_database_schema_matches_models(self):\n        with connection.schema_editor(collect_sql=True) as schema_editor:\n            sql_statements = schema_editor.sql_create_model(\n                YourModelName, style=no_style()\n            )\n\n        # Connect to the database and get current schema information\n        cursor = connection.cursor()\n        table_name = 'yourapp_yourmodelname'  # Django automatically creates an underscore between app name and model name in lowercase\n        cursor.execute(f"DESCRIBE {table_name};")\n        existing_columns = {row[0] for row in cursor.fetchall()}\n\n        expected_columns = set()\n        for statement in sql_statements:\n            if 'CREATE TABLE' not in statement:\n                continue\n            # This is a simple extraction, it will vary depending on your SQL dialect and table definitions.\n            columns_part = statement.split("(", 1)[1].rsplit(")", 1)[0]\n            for column_definition in columns_part.split(','):\n                column_name = column_definition.strip().split()[0]\n                expected_columns.add(column_name)\n\n        # Compare the columns\n        self.assertEqual(expected_columns, existing_columns,\n                         f"Database schema mismatch. Expected columns: {expected_columns}, but found: {existing_columns}")