import random\nfrom matplotlib.colors import hls_to_rgb\n\ndef hash_value_to_hsl(value, seed=42):\n    # Use a fixed seed for reproducibility\n    random.seed(hash(f"{value}-{seed}"))\n    \n    # Generate a deterministically random hue in [0, 1)\n    hue = random.random()\n    \n    # Fix saturation and lightness to maximize contrast\n    saturation = 0.8\n    lightness = 0.5\n    \n    return (hue, saturation, lightness)\n\ndef hsl_to_hex(hue, saturation, lightness):\n    rgb = hls_to_rgb(hue, lightness, saturation)\n    r, g, b = [int(255 * val) for val in rgb]\n    return f"#{r:02x}{g:02x}{b:02x}"\n\ndef map_values_to_colors(values):\n    # Normalize values if necessary\n    min_val = min(values)\n    max_val = max(values)\n    normalized_values = [(val - min_val) / (max_val - min_val) for val in values]\n    \n    color_map = {}\n    for val, norm_val in zip(values, normalized_values):\n        hsl = hash_value_to_hsl(norm_val)\n        hex_color = hsl_to_hex(*hsl)\n        color_map[val] = hex_color\n    \n    return color_map\n\n# Example usage\nnumeric_values = [10, 20, 5, 30, 15]\ncolors = map_values_to_colors(numeric_values)\n\nfor value, color in colors.items():\n    print(f"Value: {value}, Color: {color}")