from cryptography.hazmat.primitives.asymmetric import rsa, padding\nfrom cryptography.hazmat.primitives import hashes\n\n# Generate keys\nprivate_key = rsa.generate_private_key(\n    public_exponent=65537,\n    key_size=2048,\n)\npublic_key = private_key.public_key()\n\n# Example of encrypting a message with RSA\nmessage = b"Secure Message"\nencrypted_message = public_key.encrypt(\n    message,\n    padding.OAEP(\n        mgf=padding.MGF1(algorithm=hashes.SHA256()),\n        algorithm=hashes.SHA256(),\n        label=None\n    )\n)\nprint("Encrypted:", encrypted_message)\n\n# Example of decrypting a message with RSA\ndecrypted_message = private_key.decrypt(\n    encrypted_message,\n    padding.OAEP(\n        mgf=padding.MGF1(algorithm=hashes.SHA256()),\n        algorithm=hashes.SHA256(),\n        label=None\n    )\n)\nprint("Decrypted:", decrypted_message.decode())