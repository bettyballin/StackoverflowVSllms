import numpy as np\nfrom sklearn.cluster import DBSCAN\n\n# Function to extract features from mouse coordinates\ndef extract_features(coordinates):\n    # Calculate distances between consecutive points\n    distances = [np.linalg.norm(np.array(coords2) - np.array(coords1)) for coords1, coords2 in zip(coordinates[:-1], coordinates[1:])]\n    \n    # Calculate angles between consecutive vectors\n    angles = []\n    for i in range(1, len(coordinates) - 1):\n        vec1 = np.array(coordinates[i]) - np.array(coordinates[i-1])\n        vec2 = np.array(coordinates[i+1]) - np.array(coordinates[i])\n        cosine_angle = np.dot(vec1, vec2) / (np.linalg.norm(vec1) * np.linalg.norm(vec2))\n        angle = np.arccos(cosine_angle)\n        angles.append(angle)\n\n    return distances + angles\n\n# Function to classify the drawing based on K-means or similar clustering\ndef classify_drawing(features):\n    # Placeholder: In practice, use a trained model\n    if DBSCAN(eps=0.5, min_samples=2).fit_predict([features]).mean() > 0:\n        return "?"\n    else:\n        return "Not ?"\n\n# Example usage\nmouse_coordinates = [(10, 30), (15, 40), (20, 60), (30, 90), (28, 100)]  # Simplified data\nfeatures = extract_features(mouse_coordinates)\nresult = classify_drawing(features)\nprint("Drawn character is:", result)