import hashlib\nimport struct\n\ndef hash_addresses(addresses):\n    sha256 = hashlib.sha256()\n    for address in addresses:\n        # Pack each 64-bit address into 8 bytes and update the hash\n        sha256.update(struct.pack('<Q', address))\n    \n    # Get the digest, convert to integer, then truncate to 64 bits\n    full_digest = int.from_bytes(sha256.digest(), byteorder='little')\n    truncated_hash = full_digest & ((1 << 64) - 1)\n    \n    return truncated_hash\n\n# Example usage:\naddresses = [0x7fff5fbff3d8, 0x7fff5fbff3e0, 0x7fff5fbff3e8]  # List of addresses\nhash_value = hash_addresses(addresses)\nprint(f"Hash value: {hash_value:#x}")