import imaplib\nimport time\n\nclass ImapIdler(imaplib.IMAP4_SSL):\n    def _new_tag(self):\n        """Generate unique tag."""\n        self.tagcounter += 1\n        return b'TAG%03d' % self.tagcounter\n    \n    def idle(self, timeout=None):\n        """Send IDLE command to the server.\n        \n        Args:\n            timeout: Number of seconds for the operation. If no data received\n                within this number of seconds will be drop connection and reconnect,\n                by default is None (just IDLE until response)\n                \n        """\n        tag = self._new_tag()\n        self.send(('%s IDLE\r\n' % tag).encode('utf-8'))\n        if timeout:\n            self.timeout(timeout)\n\n        while True:\n            try:\n                response = self.readline().decode('utf-8').strip()\n                if '*' in response or '+ OK' in response:\n                    yield response\n                else:\n                    break\n            except imaplib.IMAP4.error as e:\n                print(f"IMAP error: {e}")\n                break\n\n    def done(self):\n        """Ends IDLE mode."""\n        tag = self._new_tag()\n        self.send(('%s DONE\r\n' % tag).encode('utf-8'))\n        return self.readline().decode('utf-8').strip()\n\n# Usage\nmail = ImapIdler("imap.gmail.com")\nmail.login('your_email@gmail.com', 'your_password')\nmail.select('inbox')\n\ntry:\n    for response in mail.idle():\n        if 'EXISTS' in response:\n            print(f"New email arrived: {response}")\nfinally:\n    mail.done()\n    mail.close()