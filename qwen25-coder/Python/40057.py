import xml.etree.ElementTree as ET\n\ndef has_cycle(root):\n    visited = set()\n    stack = [(node.attrib['name'], node) for node in root.findall('.//animal')]\n\n    while stack:\n        name, current_node = stack.pop()\n        if name in visited:\n            return True\n        visited.add(name)\n        eats_name = current_node.get('eats')\n        if eats_name is not None and any(child.attrib['name'] == eats_name for child in root.findall('.//animal')):\n            stack.append((eats_name, next(filter(lambda x: x.attrib['name'] == eats_name, root.findall('.//animal')))))\n\n    return False\n\nxml_data = '''<root>\n    <animal name="A" eats="B"/>\n    <animal name="B" eats="C"/>\n    <animal name="C" eats="D"/>\n    <!-- Uncomment to test cyclic reference -->\n    <!--<animal name="D" eats="A"/>-->\n</root>'''\n\nroot_element = ET.fromstring(xml_data)\n\nif has_cycle(root_element):\n    print("XML contains a cycle.")\nelse:\n    print("XML does not contain a cycle.")