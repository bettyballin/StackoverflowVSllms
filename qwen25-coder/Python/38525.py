import numpy as np\n\ndef is_sine_wave(data, threshold=0.5):\n    # Compute the FFT of the data\n    fft_values = np.fft.fft(data)\n    \n    # Compute the power spectrum (squared magnitude of the FFT values)\n    power_spectrum = np.abs(fft_values) ** 2\n    \n    # Find the peak frequency in the power spectrum\n    peak_frequency_index = np.argmax(power_spectrum)\n    \n    # Check if a single dominant frequency exists, ignoring noise at higher frequencies\n    # Normalize the power spectrum to check against threshold\n    normalized_power_spectrum = power_spectrum / np.max(power_spectrum)\n    \n    return normalized_power_spectrum[peak_frequency_index] > threshold\n\n# Example usage:\ndata = np.sin(np.linspace(0, 2 * np.pi, 100)) + 0.1 * np.random.randn(100)  # Sample noisy sine data\nresult = is_sine_wave(data)\nprint("Is the dataset a sine wave?", result)