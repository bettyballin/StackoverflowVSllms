import hmac\nimport hashlib\nimport os\n\ndef generate_challenge():\n    return os.urandom(16)\n\ndef compute_response(password, salt, challenge):\n    # Combine password and salt to form a key\n    key = f"{password}:{salt}".encode('utf-8')\n    # Use HMAC with SHA256\n    hmac_obj = hmac.new(key, challenge, hashlib.sha256)\n    return hmac_obj.digest()\n\n# Example usage:\nserver_salt = os.urandom(16)  # This salt is stored on the server side\n\n# Client requests challenge (step 1)\nchallenge = generate_challenge()  # Server generates this\n\nclient_password = "securepassword"\nresponse = compute_response(client_password, server_salt, challenge)  # Step 3\n\n# Server performs the same computation to verify (against its stored HMAC value)\nexpected_response = compute_response(server_stored_password, server_salt, challenge)\n\n# Compare securely (using compare_digest to prevent timing attacks)\nif hmac.compare_digest(response, expected_response):\n    print("Access granted")\nelse:\n    print("Access denied")