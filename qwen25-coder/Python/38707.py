import time\nfrom threading import Lock\n\nclass CircuitBreaker:\n    def __init__(self, max_failures=5, backoff_factor=2, base_sleep_time_seconds=1):\n        self.max_failures = max_failures\n        self.backoff_factor = backoff_factor\n        self.base_sleep_time_seconds = base_sleep_time_seconds\n        self.failure_count = 0\n        self.is_open = False\n        self.lock = Lock()\n        self.sleep_time_seconds = self.base_sleep_time_seconds\n\n    def request(self, action):\n        with self.lock:\n            if self.is_open:\n                print("Circuit is open. Failing fast.")\n                return self.call_failed()\n\n            try:\n                result = action()\n                self.reset()  # Reset failure count on success\n                print("Request succeeded")\n                return result\n            except Exception as e:\n                print(f"Request failed: {e}")\n                return self.call_failed()\n\n    def call_failed(self):\n        with self.lock:\n            self.failure_count += 1\n            if self.failure_count >= self.max_failures:\n                self.is_open = True\n                self.calculate_next_sleep_time()\n                print("Circuit breaker open")\n\n    def reset(self):\n        with self.lock:\n            self.failure_count = 0\n            self.is_open = False\n            self.sleep_time_seconds = self.base_sleep_time_seconds\n            print("Circuit breaker reset")\n\n    def calculate_next_sleep_time(self):\n        self.sleep_time_seconds *= self.backoff_factor\n\n    def check(self, action):\n        with self.lock:\n            if not self.is_open:\n                return self.request(action)\n\n            # Half-open state: try once more to see if the service is back\n            time_since_last_failure = time.time() - self.last_failure_time\n            if time_since_last_failure > self.sleep_time_seconds:\n                print("Trying to re-establish connection")\n                try:\n                    result = action()\n                    self.reset()  # Success; go back to closed state\n                    return result\n                except Exception as e:\n                    print(f"Re-connection attempt failed: {e}")\n                    self.calculate_next_sleep_time()\n\n# Example usage\ncb = CircuitBreaker()\ndef external_service_call():\n    if time.time() % 5 > 2:  # Simulate an unreliable service call\n        raise Exception("External service failed")\n    return "Success"\n\nfor _ in range(10):\n    result = cb.check(external_service_call)\n    print(result)\n    time.sleep(1)  # Simulate delay between requests