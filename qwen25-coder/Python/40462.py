from django.contrib.auth.models import User\nfrom django.core.mail import send_mail\nfrom django.urls import reverse\nfrom django.core import signing\nfrom django.shortcuts import render, redirect\n\ndef register_user(request):\n    if request.method == 'POST':\n        username = request.POST['username']\n        email = request.POST['email']\n        password = request.POST['password']\n\n        # Create user instance but don't save to db yet\n        user = User.objects.create_user(username, email, password)\n        \n        # Sign the user's primary key (id)\n        signed_id = signing.dumps(user.pk)\n\n        # Build absolute URL for confirmation link\n        domain = 'example.com'  # Change this to your site domain\n        confirm_url = reverse('confirm_registration', kwargs={'token': signed_id})\n        absolute_url = f'http://{domain}{confirm_url}'\n\n        # Send email\n        subject = 'Confirm your registration'\n        message = f'To activate your account, click the link below:\n{absolute_url}'\n        send_mail(subject, message, 'from@example.com', [user.email])\n\n        return render(request, 'registration_success.html')\n    \n    # Render registration form template\n    return render(request, 'registration_form.html')\n\ndef confirm_registration(request, token):\n    try:\n        user_id = signing.loads(token)\n        user = User.objects.get(pk=user_id)\n        user.is_active = True  # Or set any other field to validate the user.\n        user.save()\n\n        return redirect('login')\n    except (signing.BadSignature, User.DoesNotExist):\n        return render(request, 'invalid_link.html')