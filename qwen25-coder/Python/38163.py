import sys\nimport collections\n\nclass TypeTracker:\n    def __init__(self):\n        self.assignments = collections.defaultdict(list)\n\n    def trace_calls(self, frame, event, arg):\n        return self.trace_lines\n\n    def trace_lines(self, frame, event, arg):\n        if event == 'line':\n            code = frame.f_code\n            filename = code.co_filename\n            lineno = frame.f_lineno\n            co = list(code.co_lines())\n            line_number, instruction_offset = co[lineno - 1]\n            opcode = dis.opname[code.co_code[instruction_offset]]\n            \n            # Simplified check for assignment operation\n            if opcode in ('STORE_NAME', 'STORE_GLOBAL'):\n                var_name = code.co_names[code.co_code[instruction_offset + 2]]\n                var_value = frame.f_locals.get(var_name, frame.f_globals.get(var_name))\n                self.record_assignment(filename, lineno, var_name, type(var_value).__name__)\n        return\n\n    def record_assignment(self, filename, lineno, variable, var_type):\n        self.assignments[(filename, lineno)].append((variable, var_type))\n\n    def get_assignments(self):\n        return self.assignments\n\n# Setup tracer\ntype_tracker = TypeTracker()\nsys.settrace(type_tracker.trace_calls)\n\n# Example code to trace\ndef example():\n    a = 5\n    b = 'test'\n    c = [1, 2, 3]\n\nexample()\n\n# Print results\nfor (file, line), assignments in type_tracker.get_assignments().items():\n    print(f"At {file}:{line}, assigned: {assignments}")