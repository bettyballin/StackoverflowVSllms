import time\n\n# Example of an in-memory cache using dictionary for storing unread counts\nunread_cache = {}\n\ndef update_unread_counts():\n    # This function would contain logic to query the database and update the unread count\n    # It should be called periodically by a background task or whenever there's a new item/subscription change\n    pass\n\ndef increment_unread(user_id, feed_id):\n    if (user_id, feed_id) in unread_cache:\n        unread_cache[(user_id, feed_id)] += 1\n    else:\n        unread_cache[(user_id, feed_id)] = 1\n\ndef decrement_unread(user_id, feed_id):\n    if (user_id, feed_id) in unread_cache:\n        unread_cache[(user_id, feed_id)] -= 1\n        # Optional: Clean up cache if unread count reaches zero\n        if unread_cache[(user_id, feed_id)] <= 0:\n            del unread_cache[(user_id, feed_id)]\n\ndef get_unread_counts(user_id):\n    # Returns a dictionary of {feed_id: num_unread} for a given user\n    return {key[1]: value for key, value in unread_cache.items() if key[0] == user_id}\n\n# Example usage and setting up the watchdog process to update counts periodically\nwhile True:\n    update_unread_counts()\n    time.sleep(60)  # Sleep for 1 minute before checking agai