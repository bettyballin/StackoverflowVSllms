import time\nfrom collections import deque\n\nclass TokenBucket:\n    def __init__(self, capacity, fill_rate):\n        self.capacity = capacity  # maximum number of tokens\n        self.fill_rate = fill_rate  # rate of token generation per second\n        self.current_tokens = capacity\n        self.last_check = time.time()\n\n    def consume(self, tokens=1):\n        current_time = time.time()\n        elapsed = current_time - self.last_check\n        self.last_check = current_time\n\n        # Add new tokens since the last check, but do not exceed the bucket's capacity\n        self.current_tokens = min(self.capacity, self.current_tokens + (elapsed * self.fill_rate))\n\n        if self.current_tokens >= tokens:\n            self.current_tokens -= tokens\n            return True\n        else:\n            return False\n\ndef read_from_socket_with_ratelimit(socket, rate_limit):\n    buffer_size = 1024  # size of each chunk to read\n    token_bucket = TokenBucket(capacity=buffer_size, fill_rate=rate_limit)  # rate in bytes per second\n\n    while True:\n        if token_bucket.consume(tokens=buffer_size):\n            data = socket.recv(buffer_size)\n            if not data:\n                break\n            # Process data here\n            print(data)\n        else:\n            time.sleep(0.1)  # wait a bit before trying again to read data\n\n# Usage example:\n# Assuming `s` is your socket object\n# read_from_socket_with_ratelimit(s, rate_limit=512)  # e.g., limit to 512 bytes per second