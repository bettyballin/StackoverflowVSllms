from collections import defaultdict, deque\n\ndef build_graph(edges):\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)  # Assuming undirected graph\n    return graph\n\ndef bfs(graph, start, target):\n    visited = set()\n    queue = deque([start])\n    \n    while queue:\n        node = queue.popleft()\n        if node == target:\n            return True\n        if node not in visited:\n            visited.add(node)\n            queue.extend(graph[node] - visited)  # difference to avoid re-adding visited nodes\n    \n    return False\n\ndef has_path(edges, node1, node2):\n    if node1 not in [u for u, v in edges] + [v for u, v in edges]:\n        return False  # Check if the start node is in the graph\n    graph = build_graph(edges)\n    return bfs(graph, node1, node2)\n\n# Example usage:\nedges = [(1, 5), (3, 7), (5, 6), (2, 6)]\nprint(has_path(edges, 1, 5))  # Output: True\nprint(has_path(edges, 5, 2))  # Output: True\nprint(has_path(edges, 1, 7))  # Output: False\nprint(has_path(edges, 7, 4))  # Output: False