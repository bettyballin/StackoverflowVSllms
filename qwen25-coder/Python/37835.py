import numpy as np\n\ndef normalize(vectors):\n    """ Normalize each vector in a matrix."""\n    norms = np.linalg.norm(vectors, axis=1)\n    return vectors / norms[:, np.newaxis]\n\ndef mid_point(p1, p2):\n    """ Calculate midpoint between two points and normalize it. """\n    midpoint = (p1 + p2) / 2\n    return midpoint\n\ndef subdivide_triangle(vertices, v1_index, v2_index, v3_index):\n    """ Subdivide a triangle into smaller triangles recursively. """\n    v1 = vertices[v1_index]\n    v2 = vertices[v2_index]\n    v3 = vertices[v3_index]\n\n    m1 = normalize(mid_point(v1, v2))\n    m2 = normalize(mid_point(v2, v3))\n    m3 = normalize(mid_point(v3, v1))\n\n    new_vertices = [m1, m2, m3]\n\n    return [\n        (v1_index, len(vertices) + 0, len(vertices) + 2),\n        (len(vertices) + 0, v2_index, len(vertices) + 1),\n        (len(vertices) + 2, len(vertices) + 1, v3_index),\n        (len(vertices) + 2, len(vertices) + 1, len(vertices) + 0)\n    ], new_vertices\n\ndef subdivide_icosahedron(vertices, faces, subdivisions):\n    """ Subdivide all faces of the icosahedron. """\n    for _ in range(subdivisions):\n        new_faces = []\n        additional_vertices = []\n\n        for face in faces:\n            face_triangles, new_vtxs = subdivide_triangle(vertices, *face)\n            additional_vertices.extend(new_vtxs)\n            new_faces.extend(face_triangles)\n\n        vertices = np.vstack((vertices, additional_vertices))\n        faces = np.array(new_faces)\n\n    return vertices, faces\n\n# Define 12 vertices of the icosahedron\nphi = (1 + np.sqrt(5)) / 2\nbase_vertices = np.array(\n    [(-1, phi, 0), (1, phi, 0), (-1, -phi, 0), (1, -phi, 0),\n     (0, -1, phi), (0, 1, phi), (0, -1, -phi), (0, 1, -phi),\n     (phi, 0, -1), (phi, 0, 1), (-phi, 0, -1), (-phi, 0, 1)]\n)\nbase_vertices = normalize(base_vertices)\n\n# Define 20 faces of the icosahedron\nfaces_indices = np.array([\n    [0, 11, 5], [0, 5, 1], [0, 1, 7], [0, 7, 10], [0, 10, 11],\n    [1, 5, 9], [5, 11, 4], [11, 10, 2], [10, 7, 6], [7, 1, 8],\n    [3, 9, 4], [3, 4, 2], [3, 2, 6], [3, 6, 8], [3, 8, 9],\n    [4, 9, 5], [2, 4, 11], [6, 2, 10], [8, 6, 7], [9, 8, 1]\n])\n\n# Subdivide the base icosahedron\nvertices, faces = subdivide_icosahedron(base_vertices, faces_indices, subdivisions=3)\n\nprint("Vertices:\n", vertices)\nprint("Faces:\n", faces)