def force_directed_layout(nodes, edges, iterations):\n    def calculate_repulsion(node1, node2, k):\n        dx = node2.x - node1.x\n        dy = node2.y - node1.y\n        distance_sqrt = abs(dx) + abs(dy)\n        return (dx * k / distance_sqrt, dy * k / distance_sqrt)\n\n    def calculate_attraction(edge, k):\n        node1, node2 = edge.node1, edge.node2\n        dx = node2.x - node1.x\n        dy = node2.y - node1.y\n        distance = max(0.01, (dx ** 2 + dy ** 2) ** 0.5)\n        force_factor = (distance * distance) / k\n        return (dx * force_factor, dy * force_factor)\n\n    def apply_forces(nodes, edges, repulsion_strength, attraction_strength):\n        for node in nodes:\n            node.force_x, node.force_y = (0, 0)\n        for i, node1 in enumerate(nodes):\n            for node2 in nodes[i+1:]:\n                fx, fy = calculate_repulsion(node1, node2, repulsion_strength)\n                node1.force_x += fx\n                node1.force_y += fy\n                node2.force_x -= fx\n                node2.force_y -= fy\n\n        for edge in edges:\n            fx, fy = calculate_attraction(edge, attraction_strength)\n            edge.node1.force_x -= fx\n            edge.node1.force_y -= fy\n            edge.node2.force_x += fx\n            edge.node2.force_y += fy\n\n    def update_positions(nodes):\n        for node in nodes:\n            node.x += node.force_x\n            node.y += node.force_y\n\n    k = (len(nodes) ** 0.5) / 2.0\n    repulsion_strength = max(1, min(len(edges), len(nodes)) * 0.4)\n    attraction_strength = max(1, min(len(edges), len(nodes)) * 0.8)\n\n    for _ in range(iterations):\n        apply_forces(nodes, edges, repulsion_strength, attraction_strength)\n        update_positions(nodes)