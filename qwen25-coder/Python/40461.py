from collections import deque\n\ndef bfs(matrix, start_row, start_col, label):\n    q = deque([(start_row, start_col)])\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    while q:\n        sr, sc = q.popleft()\n        \n        if not matrix[sr][sc]:  # Skip if it's not part of a cluster\n            continue\n        \n        # Label the element and calculate its total mass and centroid\n        matrix[sr][sc] = label\n        \n        for dr, dc in directions:\n            nr, nc = sr + dr, sc + dc\n            # Check boundaries and whether neighbor is part of the original group\n            if 0 <= nr < len(matrix) and 0 <= nc < len(matrix[0]) and matrix[nr][nc] != label:\n                q.append((nr, nc))\n\ndef find_clusters(matrix):\n    label = 1\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] and not isinstance(matrix[i][j], int) or matrix[i][j] > label:  # Unvisited cluster member\n                bfs(matrix, i, j, label)\n                label += 1\n    return matrix\n\n# Example usage:\nmatrix = [\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n    [1, 0, 1, 1, 0, 0, 0, 0, 0, 0],\n    [2, 0, 1, 1, 1, 0, 1, 0, 0, 0],\n    [3, 0, 0, 0, 0, 0, 1, 1, 1, 0],\n    [4, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n    [5, 0, 1, 1, 0, 0, 0, 0, 0, 0],\n    [6, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n    [7, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n    [8, 0, 0, 0, 0, 1, 1, 0, 0, 0],\n    [9, 0, 0, 0, 0, 1, 1, 0, 0, 0]\n]\n\n# Remove the first row and column (index labels)\nmatrix = matrix[1:]\nfor i in range(len(matrix)):\n    matrix[i] = matrix[i][1:]\n\n# Find clusters\nlabeled_matrix = find_clusters(matrix)\n\n# Print labeled matrix\nfor row in labeled_matrix:\n    print(row)