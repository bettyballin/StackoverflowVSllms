function A_star(start_node, goal_node):\n    open_set = {start_node}\n    came_from = an empty map\n    g_score[start_node] = 0\n    f_score[start_node] = h(start_node) // Heuristic from start to goal\n\n    while (open_set is not empty):\n        current = the node in open_set having the lowest f_score[] value\n        if current == goal_node:\n            return reconstruct_path(came_from, current)\n\n        remove current from open_set\n        for each neighbor of current:\n            tentative_g_score = g_score[current] + dist(current, neighbor)\n            if tentative_g_score < g_score[neighbor]:\n                came_from[neighbor] = current\n                g_score[neighbor] = tentative_g_score\n                f_score[neighbor] = g_score[neighbor] + h(neighbor) // Heuristic\n\n    return failure  // Goal not reachable\n\nfunction reconstruct_path(came_from, current):\n    total_path = {current}\n    while current in came_from:\n        current = came_from[current]\n        prepend current to total_path\n    return total_path