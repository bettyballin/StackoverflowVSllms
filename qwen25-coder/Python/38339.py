def can_place_word(grid, word, row, col, direction):\n    """Check if a word can be placed on the grid starting at (row, col) in a given direction."""\n    if direction == 'horizontal':\n        for i in range(len(word)):\n            if col + i >= len(grid[0]) or (grid[row][col + i] not in ['-', word[i]]):\n                return False\n    elif direction == 'vertical':\n        for i in range(len(word)):\n            if row + i >= len(grid) or (grid[row + i][col] not in ['-', word[i]]):\n                return False\n    return True\n\ndef place_word(grid, word, row, col, direction):\n    """Place a word on the grid starting at (row, col) in a given direction."""\n    if direction == 'horizontal':\n        for i in range(len(word)):\n            grid[row][col + i] = word[i]\n    elif direction == 'vertical':\n        for i in range(len(word)):\n            grid[row + i][col] = word[i]\n\ndef remove_word(grid, word, row, col, direction):\n    """Remove a word from the grid starting at (row, col) in a given direction."""\n    if direction == 'horizontal':\n        for i in range(len(word)):\n            grid[row][col + i] = '-'\n    elif direction == 'vertical':\n        for i in range(len(word)):\n            grid[row + i][col] = '-'\n\ndef solve_crossword(grid, words, word_index):\n    """Recursively try placing each word on the crossword grid."""\n    if word_index == len(words):\n        return True\n\n    word = words[word_index]\n    for row in range(len(grid)):\n        for col in range(len(grid[0])):\n            for direction in ['horizontal', 'vertical']:\n                if can_place_word(grid, word, row, col, direction):\n                    place_word(grid, word, row, col, direction)\n                    if solve_crossword(grid, words, word_index + 1):\n                        return True\n                    remove_word(grid, word, row, col, direction)\n    return False\n\ndef create_crossword(words, grid_size):\n    """Create a crossword puzzle with the given list of words."""\n    # Initialize an empty grid\n    grid = [['-' for _ in range(grid_size)] for _ in range(grid_size)]\n\n    if solve_crossword(grid, words, 0):\n        print("Crossword solution found:")\n        for row in grid:\n            print(''.join(row))\n    else:\n        print("No solution exists.")\n\n# Example usage\nwords = ["cross", "word", "puzzle"]\ncreate_crossword(words, 10)