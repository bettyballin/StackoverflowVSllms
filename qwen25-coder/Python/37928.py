import math\n\ndef distance_to_circle_edge(circle_center, radius, point1, point2):\n    # Unpack the input tuples\n    xc, yc = circle_center\n    x1, y1 = point1\n    x2, y2 = point2\n    \n    # Line parameters: ax + by + c = 0\n    a = y2 - y1\n    b = x1 - x2\n    c = x2*y1 - y2*x1\n    \n    # Calculate discriminant of the quadratic equation formed by line and circle intersection\n    A = a**2 + b**2\n    B = 2*(a*c + a*yc*b - xc*a*b)\n    C = yc**2*b**2 + c**2 - radius**2*a**2\n    \n    # Check if discriminant is positive (two intersections), zero (one intersection) or negative (no intersection)\n    discriminant = B**2 - 4*A*C\n    if discriminant < 0:\n        return None  # No real intersection points\n    \n    # Calculate intersections using quadratic formula\n    t1 = (-B + math.sqrt(discriminant)) / (2 * A)\n    t2 = (-B - math.sqrt(discriminant)) / (2 * A)\n    \n    # Determine the valid point (closest to P1 but outside the circle)\n    intersection_points = []\n    for t in [t1, t2]:\n        xi = x1 + t * a\n        yi = y1 + t * b\n        if math.sqrt((xi - xc)**2 + (yi - yc)**2) >= radius:\n            intersection_points.append((xi, yi))\n    \n    # Calculate distances from point1 to valid intersection points\n    distances = [math.sqrt((xi - x1)**2 + (yi - y1)**2) for xi, yi in intersection_points]\n    \n    if not distances:\n        return None  # No intersection outside the circle\n    \n    return min(distances)\n\n# Example usage\ncircle_center = (0, 0)\nradius = 5\npoint1 = (-3, -4)\npoint2 = (3, 4)\n\ndistance = distance_to_circle_edge(circle_center, radius, point1, point2)\nif distance:\n    print(f"Distance from endpoint to circle edge: {distance}")\nelse:\n    print("No intersection outside the circle.")