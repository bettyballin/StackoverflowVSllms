import atexit\n   import os.path\n\n   try:\n       import gnureadline as readline\n   except ImportError:\n       import readline\n   else:\n       import rlcompleter\n\n       class IrlCompleter(rlcompleter.Completer):\n           """\n           This class enables a "tab" insertion if there's no text for\n           completion.\n\n           The default "tab" is four spaces. You can initialize with '\t' as\n           the tab if you wish to use a genuine tab.\n\n           """\n\n           def __init__(self, tab='    '):\n               self.tab = tab\n               rlcompleter.Completer.__init__(self)\n\n           def complete(self, text, state):\n               if text == '':\n                   readline.insert_text(self.tab)\n                   return None\n               else:\n                   return rlcompleter.Completer.complete(self, text, state)\n\n\n       # You could change this line to bind another key instead tab.\n       readline.parse_and_bind('tab: complete')\n       readline.set_completer(IrlCompleter('\t').complete)\n\n   # Restore our command-line history, and save it when Python exits.\n   history_path = os.path.expanduser('~/.pyhistory')\n   if os.path.isfile(history_path):\n       readline.read_history_file(history_path)\n   atexit.register(lambda x=history_path: readline.write_history_file(x))