import numpy as np\n\ndef generate_random_points_in_polygon(vertices, num_points):\n    triangles = []\n    # Create a list of triangles using the first vertex and each consecutive pair\n    for i in range(1, len(vertices) - 1):\n        triangle = [vertices[0], vertices[i], vertices[i + 1]]\n        triangles.append(triangle)\n    \n    points = []\n    while len(points) < num_points:\n        # Choose a random triangle from the set of triangles\n        triangle = triangles[np.random.randint(len(triangles))]\n        \n        # Generate two random numbers in [0, 1]\n        r1, r2 = np.random.rand(2)\n        \n        # Compute the barycentric coordinates\n        sqrt_r1 = np.sqrt(r1)\n        u = sqrt_r1 * r2\n        v = sqrt_r1 * (1 - r2)\n        w = 1 - sqrt_r1\n        \n        # Calculate the random point in the triangle using barycentric coordinates\n        random_point = u * triangle[0] + v * triangle[1] + w * triangle[2]\n        \n        points.append(random_point)\n    \n    return np.array(points)\n\n# Example usage:\nvertices = [\n    [0, 0],\n    [4, 0],\n    [1, 3],\n    [5, 3]\n]\n\nrandom_points = generate_random_points_in_polygon(vertices, 10)\nprint("Random points inside the polygon:", random_points)