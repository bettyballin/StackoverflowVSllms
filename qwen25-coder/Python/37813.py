from django.db import models\n\nclass DirtyTrackerModel(models.Model):\n    _original_state = None\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self._save_original_state()\n\n    def _save_original_state(self):\n        self._original_state = {field: getattr(self, field) for field in self.get_dirty_check_fields()}\n\n    def get_dirty_check_fields(self):\n        # Include fields you want to check\n        return [field.name for field in self._meta.fields]\n\n    @property\n    def is_dirty(self):\n        if not self.id:\n            # If the object doesn't have an ID, it's considered dirty because it hasn't been saved.\n            return True\n\n        current_state = {field: getattr(self, field) for field in self.get_dirty_check_fields()}\n        return self._original_state != current_state\n\n    def save(self, *args, **kwargs):\n        super().save(*args, **kwargs)\n        self._save_original_state()\n\n# Example usage:\nclass MyModel(DirtyTrackerModel):\n    name = models.CharField(max_length=100)\n    description = models.TextField()