def prime_factors(n):\n    factors = {}\n    d = 2\n    while n >= d:\n        if n % d == 0:\n            if d in factors:\n                factors[d] += 1\n            else:\n                factors[d] = 1\n            n //= d\n        else:\n            d += 1\n    return factors\n\ndef count_lattice_points(factors):\n    count = 1\n    for p, exp in factors.items():\n        if p == 2:\n            count *= (4 + 2 * exp)\n        else:\n            count *= (2 + exp)\n    return count\n\ndef find_valid_n(limit, target_count):\n    total = 0\n    primes = list(filter(lambda x: prime_factors(x) == {x: 1}, range(3, limit)))\n    for n in range(3, limit + 1, 2):  # Check only odd numbers\n        factors = prime_factors(n)\n        if count_lattice_points(factors) == target_count:\n            total += n\n    return total\n\n# Add even cases separately\ndef find_even_n(limit, target_count):\n    total = 0\n    for n in range(4, limit + 1, 2):  # Check only even numbers\n        factors = prime_factors(n)\n        if count_lattice_points(factors) == target_count:\n            total += n\n    return total\n\nlimit = 5 * 10**8\ntarget_count = 420\nodd_n_sum = find_valid_n(limit, target_count)\neven_n_sum = find_even_n(limit, target_count)\n\nprint("Total sum of valid n:", odd_n_sum + even_n_sum)