from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n# Sample documents (articles)\ndocuments = [\n    "Python is a great programming language",\n    "Java and Python are popular languages",\n    "I love machine learning in Python",\n    "Natural language processing uses libraries like spaCy"\n]\n\n# Create TF-IDF Vectorizer\nvectorizer = TfidfVectorizer()\n\n# Fit and transform the documents into TF-IDF vectors\ntfidf_matrix = vectorizer.fit_transform(documents)\n\n# Compute cosine similarity matrix\ncosine_sim_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)\n\n# Function to get related articles\ndef get_related_articles(idx):\n    scores = list(enumerate(cosine_sim_matrix[idx]))\n    # Sort by score in descending order and take top 2 (excluding the document itself)\n    related_indices = sorted(scores, key=lambda x: x[1], reverse=True)[1:3]\n    return [(documents[i], score) for i, score in related_indices]\n\n# Example usage\nprint(get_related_articles(0))