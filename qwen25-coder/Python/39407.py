function reconstructTreeFromTraversals(preorder, postorder):\n    if preorder is empty:\n        return null\n\n    rootValue = preorder[0]\n    tree = new Node(rootValue)\n    \n    if length of preorder == 1:\n        return tree\n\n    nextInPreorderIndex = 1\n    endOfSubtreeInPostIndex = findEndOfSubtreeInPost(postorder, rootValue)\n\n    while nextInPreorderIndex < count of subtree elements in preorder:\n        startOfSubtreeInPre = nextInPreorderIndex\n        subTreeRoot = postorder[startOfSubtreeInPre]\n        \n        endOfSubtreeInPre = findEndOfSubtreeInPost(postorder, subTreeRoot)\n        nextInPreorderIndex += (endOfSubtreeInPre - startOfSubtreeInPre + 1)\n        \n        subtreePreorder = preorder[startOfSubtreeInPre:nextInPreorderIndex]\n        subtreePostorder = postorder[postorder.index(subTreeRoot):findEndOfSubtreeInPost(postorder, subTreeRoot)+1]\n        \n        tree.children.append(reconstructTreeFromTraversals(subtreePreorder, subtreePostorder))\n\n    return tree