def log_error_sentence(ui, section_type, line_number, input_file_path):\n    with open(input_file_path, 'r') as original:\n        found_ui = False\n        current_section_lines = []\n        \n        for line in original:\n            if line.startswith('UI -'):\n                # Check if this is the UI we're looking for\n                if ui == line.strip().split(' - ')[1]:\n                    found_ui = True\n                    current_section_lines.clear()  # Reset lines for a new UI section\n                else:\n                    found_ui = False\n            \n            if found_ui and (line.startswith('TI -') or line.startswith('AB -')):\n                # Check which section we're in (title or abstract)\n                if (section_type == 'title' and line.startswith('TI -')) or \\n                   (section_type == 'abstract' and line.startswith('AB -')):\n                    current_section_lines.clear()  # Start a new count for this section\n                elif line.startswith('UI -'):\n                    break  # Exit the loop once we find another UI\n                \n            if found_ui and current_section_lines:\n                # Check if we've reached the offending line number\n                if len(current_section_lines) == line_number:\n                    print(f"Offending sentence: {current_section_lines[-1]}")\n                    return\n            \n            if found_ui:\n                # Collect lines only for the relevant section\n                if (line.startswith('TI -') or line.startswith('AB -')) and not line.strip().split(' - ')[0].lower() == section_type:\n                    continue  # Skip the header line of a section\n                current_section_lines.append(line)\n\n# Usage example\nlog_error_sentence('26474845', 'abstract', 3, 'input.txt')