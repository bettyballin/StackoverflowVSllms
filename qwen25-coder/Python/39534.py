class SampleStatistics:\n    def __init__(self, ema_alpha=0.1):\n        self.count = 0\n        self.sum = 0\n        self.min_val = float('inf')\n        self.max_val = -float('inf')\n        self.first_moment = 0\n        self.second_moment = 0\n        self.ema_alpha = ema_alpha\n        self.ema_value = 0\n\n    def add_sample(self, sample):\n        # Update count\n        self.count += 1\n        \n        # Update sum and calculate first moment (mean)\n        self.sum += sample\n        self.first_moment = self.sum / self.count\n        \n        # Update second moment for variance/std deviation calculation\n        self.second_moment = (self.count - 1) * self.second_moment / self.count + \\n                            (sample - self.first_moment) ** 2 / self.count\n\n        # Track min and max values\n        if sample < self.min_val:\n            self.min_val = sample\n        if sample > self.max_val:\n            self.max_val = sample\n        \n        # Update Exponential Moving Average\n        if self.count == 1:\n            self.ema_value = sample\n        else:\n            self.ema_value = (self.ema_alpha * sample) + ((1 - self.ema_alpha) * self.ema_value)\n\n    def get_stats(self):\n        variance = self.second_moment if self.count > 0 else float('nan')\n        std_deviation = variance ** 0.5 if self.count > 0 else float('nan')\n        return {\n            'count': self.count,\n            'mean': self.first_moment,\n            'variance': variance,\n            'std_deviation': std_deviation,\n            'min': self.min_val,\n            'max': self.max_val,\n            'ema': self.ema_value\n        }\n\n# Sample usage:\nstats = SampleStatistics()\nsamples = [10, 20, 30, 40, 50]\nfor sample in samples:\n    stats.add_sample(sample)\nprint(stats.get_stats())