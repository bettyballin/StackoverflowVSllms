def reverse_bits_count(n):\n    result = [0] * (2 ** n)\n    for i in range(2 ** n):\n        reversed_bit_pattern = 0\n        temp = i\n        power_of_two = n - 1\n        while temp > 0:\n            bit = temp % 2  # Get the least significant bit\n            reversed_bit_pattern += bit * (2 ** power_of_two)  # Add to reversed position\n            temp //= 2  # Remove the least significant bit from temp\n            power_of_two -= 1\n        result[i] = reversed_bit_pattern\n    return result\n\n# Example usage:\nn = 3\nprint(reverse_bits_count(n))