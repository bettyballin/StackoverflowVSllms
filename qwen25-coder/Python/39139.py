import sys\nimport threading\nimport random\nimport time\n\ndef get_stack_trace():\n    frame = sys._current_frames()[threading.main_thread().ident]\n    stacks.append("".join(traceback.format_stack(frame)))\n\ndef sample_stack_traces(sample_count=10, interval=0.1):\n    global stacks\n    stacks = []\n    print(f"Sampling stack traces {sample_count} times with an interval of {interval}s.")\n    for _ in range(sample_count):\n        time.sleep(random.uniform(0, 2*interval))  # Randomize a little\n        get_stack_trace()\n    return stacks\n\n# Example function to run and sample\ndef example_function():\n    while True:\n        time.sleep(0.1)  # Simulate some work\n        expensive_operation()  # This could be something that's slow or unnecessary\n\ndef expensive_operation():\n    sum([i * i for i in range(10000)])  # Example of an expensive operation\n\n# Start the example function in a separate thread\nimport threading\nthread = threading.Thread(target=example_function)\nthread.start()\n\n# Sample the stack traces\nstack_samples = sample_stack_traces()\n\n# Print out sampled stack traces\nfor i, stack in enumerate(stack_samples):\n    print(f"Stack Trace {i+1}:\n{stack}\n")