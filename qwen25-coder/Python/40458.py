from ortools.sat.python import cp_model\n\ndef main():\n    # Data.\n    num_nurses = 15\n    num_days = 30\n    num_shifts = 6\n    all_nurses = range(num_nurses)\n    all_days = range(num_days)\n    all_shifts = range(num_shifts)\n\n    model = cp_model.CpModel()\n\n    # Creates a shifts variable for each nurse, day and shift.\n    shifts = {}\n    for n in all_nurses:\n        for d in all_days:\n            for s in all_shifts:\n                shifts[(n, d, s)] = model.NewBoolVar(f'shift_n{n}d{d}s{s}')\n\n    # Each nurse works at most one shift per day.\n    for n in all_nurses:\n        for d in all_days:\n            model.Add(sum(shifts[(n, d, s)] for s in all_shifts) <= 1)\n\n    # Each shift has exactly the required number of nurses\n    min_assignments = 3  # Example minimum number per shift per day\n    max_assignments = 5  # Example maximum number per shift per day\n    for d in all_days:\n        for s in all_shifts:\n            num_nurses_per_shift = model.NewIntVar(min_assignments, max_assignments,\n                                                   f'num_nurses_d{d}s{s}')\n            model.Add(num_nurses_per_shift == sum(shifts[(n, d, s)] for n in all_nurses))\n\n    # No shift overlap constraints can be added similarly using Add conditions\n\n    # Objective: minimize the total number of shifts that are not ideal\n    # This is just an example. You should define your objective function according to preferences and constraints.\n    undesired_shifts = 0\n    for n in all_nurses:\n        for d in all_days:\n            undesired_shifts += sum(shifts[(n, d, s)] for s in range(3) if s != preferred_shift(n))\n    model.Minimize(undesired_shifts)\n\n    # Creates the solver and solve.\n    solver = cp_model.CpSolver()\n    status = solver.Solve(model)\n\n    if status == cp_model.OPTIMAL:\n        print('Solution:')\n        for d in all_days:\n            print('Day', d)\n            for n in all_nurses:\n                for s in all_shifts:\n                    if solver.Value(shifts[(n, d, s)]) == 1:\n                        print(f'Nurse {n} works shift {s}')\n    else:\n        print('No solution found.')\n\nif __name__ == '__main__':\n    main()