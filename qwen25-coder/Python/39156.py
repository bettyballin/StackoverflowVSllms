# Pseudo-code representation of managing data with metadata in relational DB and BLOBs in CouchDB\n\nclass MediaArchiveSystem:\n    def __init__(self, sql_db_connection, couchdb_client):\n        self.sql_conn = sql_db_connection\n        self.couchdb = couchdb_client\n    \n    def store_media(self, media_file, meta_info):\n        try:\n            # Store blob in CouchDB and get document ID\n            doc_id = self.couchdb.put_attachment(media_file)\n            \n            # Store metadata with reference to BLOB in SQL DB\n            cursor = self.sql_conn.cursor()\n            query = "INSERT INTO media (title, description, couchdb_id) VALUES (%s, %s, %s)"\n            cursor.execute(query, (meta_info['title'], meta_info['description'], doc_id))\n            self.sql_conn.commit()\n        except Exception as e:\n            # Handle exception and possibly rollback in CouchDB\n            print("Error storing media:", e)\n    \n    def retrieve_media(self, media_id):\n        try:\n            # Fetch metadata from SQL DB\n            cursor = self.sql_conn.cursor()\n            query = "SELECT couchdb_id FROM media WHERE id=%s"\n            cursor.execute(query, (media_id,))\n            row = cursor.fetchone()\n            \n            if not row:\n                return None\n            \n            # Fetch BLOB from CouchDB using the document ID stored in metadata\n            doc_id = row[0]\n            blob_data = self.couchdb.get_attachment(doc_id)\n            return blob_data\n        except Exception as e:\n            print("Error retrieving media:", e)\n\n# Usage example\nmedia_system = MediaArchiveSystem(sql_db_connection, couchdb_client)\nmedia_system.store_media(media_file, {'title': 'Sample Title', 'description': 'Description here'})\nblob = media_system.retrieve_media(1)  # Assuming media ID is 1