from collections import Counter, defaultdict\n\ndef preprocess_strings_to_freq_maps(strings):\n    """\n    Preprocess a list of strings to create frequency maps.\n    \n    :param strings: List[str] - A list of strings to preprocess.\n    :return: Dict[str, Counter] - A dictionary mapping each string to its character frequency map.\n    """\n    freq_maps = {}\n    for s in strings:\n        freq_maps[s] = Counter(s)\n    return freq_maps\n\ndef find_closest_string(freq_maps, input_freq_map):\n    """\n    Find the closest string based on shared characters from a precomputed frequency maps.\n    \n    :param freq_maps: Dict[str, Counter] - Dictionary of preprocessed strings and their character frequency maps.\n    :param input_freq_map: Counter - The frequency map for the input string.\n    :return: str - The closest matching string.\n    """\n    max_score = 0\n    best_match = None\n    \n    for s, freq_map in freq_maps.items():\n        score = sum(min(freq_map[char], input_freq_map[char]) for char in input_freq_map)\n        \n        if score > max_score:\n            max_score = score\n            best_match = s\n            \n    return best_match\n\n# Example usage\nstrings_list = ["apple", "banana", "cherry", "date"]\ninput_string = "aple"\n\nfreq_maps = preprocess_strings_to_freq_maps(strings_list)\ninput_freq_map = Counter(input_string)\n\nclosest_string = find_closest_string(freq_maps, input_freq_map)\nprint("Closest string:", closest_string)