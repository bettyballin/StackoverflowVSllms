import asyncio\nfrom aiohttp import web, ClientSession\n\nclass ProxyHandler:\n    def __init__(self):\n        self.session = ClientSession()\n\n    async def handle_request(self, request):\n        url = request.url.with_scheme('http' if request.scheme == 'http' else 'https')\n        \n        # Forward the request to the target server\n        async with self.session.request(\n            method=request.method,\n            url=url,\n            headers={k: v for (k, v) in request.headers.items() if k != 'Host'},\n            data=await request.read()\n        ) as upstream_response:\n            # Modify response here according to your rules/filters\n            modified_body = await self.modify_response(await upstream_response.read())\n            \n            return web.Response(\n                body=modified_body,\n                status=upstream_response.status,\n                headers=dict(upstream_response.headers)\n            )\n\n    async def modify_response(self, body):\n        # Implement your filtering/modification logic here\n        return body\n\napp = web.Application()\nhandler = ProxyHandler()\n\n# Route all requests to the handler\napp.router.add_route('*', '/{path:.*}', handler.handle_request)\n\nweb.run_app(app, port=8080)