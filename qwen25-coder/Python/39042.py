import heapq\n\ndef prims_mst(graph):\n    # Assume graph is represented as an adjacency list:\n    # Example: graph = {0: [(1, 2), (3, 6)], 1: [(0, 2), (2, 3)]...}\n    num_vertices = len(graph)\n    mst_set = set()\n    min_span_tree_edges = []\n    total_cost = 0\n    # Priority queue (min-heap) to store (edge_cost, vertex)\n    pq = [(0, 0)]\n    \n    while len(mst_set) < num_vertices:\n        cost, u = heapq.heappop(pq)\n        \n        if u in mst_set: \n            continue\n        \n        mst_set.add(u)\n        total_cost += cost\n        \n        for v, weight in graph[u]:\n            if v not in mst_set:\n                heapq.heappush(pq, (weight, v))\n    \n    return min_span_tree_edges, total_cost