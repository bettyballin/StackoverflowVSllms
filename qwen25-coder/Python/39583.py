def nearest_neighbor_tsp(f, arr):\n    n = len(arr)\n    if n == 0:\n        return []\n    \n    visited = [False] * n\n    path = [0]\n    visited[0] = True\n    \n    for _ in range(1, n):\n        last = path[-1]\n        nearest = None\n        min_distance = float('inf')\n        \n        for city in range(n):\n            if not visited[city]:\n                distance = f(arr[last], arr[city])\n                if distance < min_distance:\n                    min_distance = distance\n                    nearest = city\n        \n        path.append(nearest)\n        visited[nearest] = True\n    \n    # Make the path circular by adding the start to the end\n    return path + [path[0]]\n\n# Example usage:\n# Define a function f that calculates the "distance" between two elements\ndef f(x, y):\n    return abs(x - y)  # Example: simple absolute difference\n\narr = [4, 2, 9, 3, 7]\noptimal_order = nearest_neighbor_tsp(f, arr)\nprint("Order:", optimal_order)