import cx_Oracle\nimport logging\nimport sys\nfrom threading import Lock\n\nclass OracleDbHandler(logging.Handler):\n    def __init__(self, dsn, user, password, table_name, level=logging.NOTSET):\n        super(OracleDbHandler, self).__init__(level)\n        self.dsn = dsn\n        self.user = user\n        self.password = password\n        self.table_name = table_name\n        self.connection = None\n        self.cursor = None\n        self.lock = Lock()\n        self.connect()\n\n    def connect(self):\n        try:\n            self.connection = cx_Oracle.connect(f"{self.user}/{self.password}@{self.dsn}")\n            self.cursor = self.connection.cursor()\n        except Exception as e:\n            logging.error("Failed to connect to Oracle DB", exc_info=True)\n            raise\n\n    def emit(self, record):\n        with self.lock:\n            try:\n                msg = self.format(record)\n                query = f"INSERT INTO {self.table_name} (log_message) VALUES (:1)"\n                self.cursor.execute(query, (msg,))\n            except Exception as e:\n                logging.error("Failed to log message to Oracle DB", exc_info=True)\n\n    def flush(self):\n        with self.lock:\n            try:\n                if self.connection is not None and self.cursor is not None:\n                    self.connection.commit()\n            except Exception as e:\n                logging.error("Failed to commit to Oracle DB", exc_info=True)\n\n    def close(self):\n        try:\n            if self.cursor is not None:\n                self.cursor.close()\n            if self.connection is not None:\n                self.connection.close()\n        finally:\n            super(OracleDbHandler, self).close()\n\n# Redirect sys.stdout and sys.stderr to the logger\nclass StdOutErrLoggingHandler(logging.Handler):\n    def __init__(self, level=logging.DEBUG):\n        super(StdOutErrLoggingHandler, self).__init__(level)\n\n    def emit(self, record):\n        try:\n            log_entry = self.format(record)\n            print(log_entry)  # or use sys.stdout.write(log_entry + '\n')\n        except Exception:\n            self.handleError(record)\n\n# Example usage\nif __name__ == "__main__":\n    logger = logging.getLogger('OracleLogger')\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n    db_handler = OracleDbHandler(dsn='your_dsn', user='your_user', password='your_password', table_name='log_table')\n    db_handler.setFormatter(formatter)\n    \n    stdouterr_handler = StdOutErrLoggingHandler()\n    stdouterr_handler.setFormatter(formatter)\n\n    sys.stdout = sys.stderr = logging.StreamHandler(stdouterr_handler.stream)\n    logger.addHandler(db_handler)\n    logger.addHandler(stdouterr_handler)\n\n    logger.setLevel(logging.DEBUG)\n\n    try:\n        1 / 0\n    except Exception as e:\n        logger.exception("Exception occurred")