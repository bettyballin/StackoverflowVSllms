class KDNode4D:\n    def __init__(self, point, left=None, right=None):\n        self.point = point  # (x, y, z, time)\n        self.left = left\n        self.right = right\n\ndef build_kd_tree(points, depth=0):\n    if not points:\n        return None\n    \n    k = len(points[0])  # Number of dimensions\n    axis = depth % k\n    \n    sorted_points = sorted(points, key=lambda point: point[axis])\n    median = len(points) // 2\n    \n    return KDNode4D(\n        point=sorted_points[median],\n        left=build_kd_tree(sorted_points[:median], depth + 1),\n        right=build_kd_tree(sorted_points[median + 1:], depth + 1)\n    )\n\n# Example usage\npoints = [(x, y, z, t) for x in range(10) for y in range(10) for z in range(10) for t in range(10)]\ntree = build_kd_tree(points)