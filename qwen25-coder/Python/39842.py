def debruijn(k, n):\n    """\n    Generates a De Bruijn sequence for alphabet size k and subsequences of length n.\n    """\n    a = [0] * k * n\n    sequence = []\n\n    def db(t, p):\n        if t > n:\n            if n % p == 0:\n                for j in range(1, p + 1):  # output cyclically\n                    sequence.append(a[j])\n        else:\n            a[t] = a[t - p]\n            db(t + 1, p)\n            for j in range(a[t - p] + 1, k):\n                a[t] = j\n                db(t + 1, t)\n\n    db(1, 1)\n    return [str(sequence[i]) for i in range(len(sequence))]\n\n# Generate De Bruijn sequence for binary (k=2) and subsequences of length 12 (n=12)\nsequence = debruijn(2, 12)\nbinary_debruijn_sequence = ''.join(sequence)\n\nprint(f"De Bruijn Sequence: {binary_debruijn_sequence}")\nprint(f"Length of De Bruijn sequence: {len(binary_debruijn_sequence)}")