def totient(n):\n    result = n  # Initialize result as n\n    p = 2\n    while p * p <= n:\n        if n % p == 0:  # Check if p is a factor of n\n            while n % p == 0:\n                n //= p\n            result -= result // p\n        p += 1\n    if n > 1:\n        result -= result // n\n    return result\n\ndef phi_chain_length(n):\n    length = 1\n    while n != 1:\n        n = totient(n)\n        length += 1\n    return length\n\ndef sum_of_primes_with_phi_chain_length(limit, chain_length):\n    sieved_numbers = [True] * limit\n    primes = []\n    \n    for num in range(2, limit):\n        if sieved_numbers[num]:\n            primes.append(num)\n            sieve_multiple = num*num\n            while sieve_multiple < limit:\n                sieved_numbers[sieve_multiple] = False\n                sieve_multiple += num\n    \n    total_sum = 0\n    for prime in primes:\n        if phi_chain_length(prime) == chain_length:\n            total_sum += prime\n    \n    return total_sum\n\n# Example usage:\nresult = sum_of_primes_with_phi_chain_length(40000000, 25)\nprint(result)