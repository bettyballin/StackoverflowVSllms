from cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.fernet import Fernet\n\ndef derive_key(password, salt):\n    kdf = PBKDF2HMAC(\n        algorithm=hashes.SHA256(),\n        length=32,\n        salt=salt,\n        iterations=100000,\n        backend=default_backend()\n    )\n    return base64.urlsafe_b64encode(kdf.derive(password))\n\ndef encrypt_message(message, key):\n    fernet = Fernet(key)\n    encrypted = fernet.encrypt(message.encode())\n    return encrypted\n\ndef decrypt_message(encrypted_message, key):\n    fernet = Fernet(key)\n    decrypted = fernet.decrypt(encrypted_message).decode()\n    return decrypted\n\n# Example usage\nsalt = os.urandom(16)  # Generate a random salt for each password hash\npassword_user = b"example_password_user"\npassword_company = b"example_password_company"\n\nkey_a = derive_key(password_user, salt)\nkey_b = derive_key(password_company, salt)\n\nmessage = "Sensitive data that needs encryption"\nencrypted_message = encrypt_message(message, key_a)  # Could be encrypted with either key\n\n# Decrypting using one of the keys\ndecrypted_by_user = decrypt_message(encrypted_message, key_a)\ndecrypted_by_company = decrypt_message(encrypted_message, key_b)\n\nprint(f"Decrypted by user: {decrypted_by_user}")\nprint(f"Decrypted by company: {decrypted_by_company}")