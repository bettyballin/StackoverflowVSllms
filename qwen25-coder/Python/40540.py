from collections import defaultdict, Counter\nimport heapq\n\ndef huffman_encode(data):\n    # Count the frequency of each byte\n    byte_frequency = Counter(data)\n    \n    # Create a priority queue with tuples (frequency, index, byte)\n    heap = [[weight, [symbol, ""]] for symbol, weight in byte_frequency.items()]\n    heapq.heapify(heap)  # Transform list into a heap\n    \n    while len(heap) > 1:\n        lo = heapq.heappop(heap)\n        hi = heapq.heappop(heap)\n        \n        # Merge the nodes and add prefixes\n        for pair in lo[1:]:\n            pair[1] = '0' + pair[1]\n        for pair in hi[1:]:\n            pair[1] = '1' + pair[1]\n        \n        # Push the merged node back into the heap\n        heapq.heappush(heap, [lo[0] + hi[0]] + lo[1:] + hi[1:])\n    \n    huffman_codes = sorted(heapq.heappop(heap)[1:], key=lambda p: (len(p[-1]), p))\n    \n    # Create a mapping of byte to Huffman code\n    encoding_map = {symbol: code for symbol, code in huffman_codes}\n    \n    return encoding_map\n\n# Example usage\ndata = "this is an example for huffman encoding"\nencoding_map = huffman_encode(data)\nencoded_data = ''.join(encoding_map[symbol] for symbol in data)\n\nprint("Huffman Codes:", encoding_map)\nprint("Encoded Data:", encoded_data)