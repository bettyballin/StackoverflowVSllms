import numpy as np\n\ndef find_dense_submatrix(matrix, aspect_ratio=(1, 1), overlap_threshold=0):\n    row_counts = matrix.sum(axis=1)\n    col_counts = matrix.sum(axis=0)\n\n    # Sort indices by count of non-zero elements in descending order\n    sorted_row_indices = row_counts.argsort()[::-1]\n    sorted_col_indices = col_counts.argsort()[::-1]\n\n    best_rows, best_cols = [], []\n\n    for r1 in range(len(sorted_row_indices)):\n        if not matrix[sorted_row_indices[r1]].any():\n            continue\n        overlap_cols = np.nonzero(matrix[sorted_row_indices[r1]])[0]\n        current_rows = [sorted_row_indices[r1]]\n        current_cols = list(overlap_cols)\n\n        for r2 in range(r1 + 1, len(sorted_row_indices)):\n            row_overlap = matrix[sorted_row_indices[r2], overlap_cols].sum()\n            if row_overlap < overlap_threshold:\n                break\n            current_rows.append(sorted_row_indices[r2])\n            updated_overlap_cols = np.intersect1d(overlap_cols, \n                                                   np.nonzero(matrix[sorted_row_indices[r2]])[0])\n            if len(updated_overlap_cols) == 0:\n                break\n            overlap_cols = updated_overlap_cols\n\n        # Check aspect ratio constraint\n        if (len(current_cols) / len(current_rows)) in range(aspect_ratio[0], aspect_ratio[1] + 1):\n            if (len(best_rows) < len(current_rows)) or \\n               (len(best_rows) == len(current_rows) and len(best_cols) < len(current_cols)):\n                best_rows = current_rows\n                best_cols = current_cols\n\n    return np.ix_(best_rows, best_cols), matrix[np.ix_(best_rows, best_cols)]\n\n# Example usage:\n# sparse_matrix = ... your sparse matrix here ...\n# submatrix_indices, dense_submatrix = find_dense_submatrix(sparse_matrix)