import random\n\nclass UniqueRandomNumberGenerator:\n    def __init__(self, db_connection):\n        self.db = db_connection\n        self.cache_size = 1000  # Adjustable based on your needs\n        self.cached_numbers = set()\n        self.load_unused_numbers_from_db()\n\n    def load_unused_numbers_from_db(self):\n        query = "SELECT number FROM numbers WHERE used = 0 LIMIT %s"\n        self.db.execute(query, (self.cache_size,))\n        self.cached_numbers.update(set(row[0] for row in self.db.fetchall()))\n\n    def generate_unique_number(self, user_id):\n        if not self.cached_numbers:\n            self.load_unused_numbers_from_db()\n\n        unique_number = self.cached_numbers.pop()\n        query = "UPDATE numbers SET used = 1 WHERE number = %s AND used = 0"\n        self.db.execute(query, (unique_number,))\n        self.db.connection.commit()  # Ensure changes are saved\n        return unique_number\n\n# Example usage\n# Assuming db_connection is a valid database connection object\n# rng = UniqueRandomNumberGenerator(db_connection)\n# user_id = 1\n# random_number = rng.generate_unique_number(user_id)