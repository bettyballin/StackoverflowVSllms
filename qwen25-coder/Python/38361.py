from math import gcd\nfrom functools import reduce\n\ndef lcm(a, b):\n    """Compute the least common multiple of a and b"""\n    return abs(a * b) // gcd(a, b)\n\ndef lcm_multiple(numbers):\n    """Compute the LCM of a list of numbers"""\n    return reduce(lcm, numbers, 1)\n\ndef next_tasks(last_times, intervals):\n    """\n    Determine the next set of tasks to execute.\n    \n    :param last_times: List of tuples (task_id, last_time) indicating the last time each task was executed\n    :param intervals: Dictionary mapping task_id to its execution interval in hours\n    :return: A tuple with the time of the next task(s) and a list of task_ids to execute at that time\n    """\n    all_intervals = sorted(intervals.keys())\n    if not all_intervals:\n        return None, []\n\n    # Calculate the LCM for each subset of tasks\n    lcm_for_tasks = {task_id: intervals[task_id] for task_id in intervals}\n    \n    next_executions = []\n    for i in range(1, 1 << len(all_intervals)):\n        task_subset = [all_intervals[j] for j in range(len(all_intervals)) if (i & (1 << j))]\n        lcm_time = lcm_multiple([lcm_for_tasks[task_id] for task_id in task_subset])\n        \n        # Find the last time this subset was run\n        last_run_of_subset = max((last_time for task_id, last_time in last_times if task_id in task_subset), default=0)\n        \n        next_execution_time = ((last_run_of_subset // lcm_time) + 1) * lcm_time\n        \n        next_executions.append((next_execution_time, tuple(task_subset)))\n    \n    # Find the soonest upcoming set of tasks\n    next_executions.sort()\n    if not next_executions:\n        return None, []\n\n    next_time, task_ids = next_executions[0]\n    return next_time, list(task_ids)\n\n# Example usage\nlast_times_example = [('1A', 500), ('2A', 1000), ('3A', 1500)]\nintervals_example = {'1A': 500, '2A': 1000, '3A': 1500}\n\nnext_time, tasks_to_do = next_tasks(last_times_example, intervals_example)\nprint(f"Next time to execute: {next_time} hours, Tasks to execute: {tasks_to_do}")