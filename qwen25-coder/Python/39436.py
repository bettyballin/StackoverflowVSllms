import mmh3\n\ndef hash_sparse_bit_vector(sparse_bits, seed=42):\n    """\n    Hashes a sparse bit vector represented as a list of indices where bits are set.\n    :param sparse_bits: List[int] - Indices of the set bits in the vector.\n    :param seed: int - Seed for the hash function to ensure deterministic outputs.\n    :return: int - 32-bit hash value.\n    """\n    # Ensure that the list is sorted, which ensures consistent hash computation\n    sparse_bits = sorted(sparse_bits)\n    \n    # Serialize indices into a byte string\n    message = b''.join(i.to_bytes((i.bit_length() + 7) // 8, byteorder='little') for i in sparse_bits)\n    \n    # Compute the hash using MurmurHash3 (32-bit version)\n    return mmh3.hash(message, seed)\n\n# Example usage:\nsparse_vector_indices = [10, 15, 340, 789, 1000]  # Assuming these are the positions of set bits\nhash_value = hash_sparse_bit_vector(sparse_vector_indices)\nprint(f"Hash Value: {hash_value}")