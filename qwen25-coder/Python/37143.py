class SyntaxColorizer:\n    def __init__(self):\n        self.state = "IDLE"\n        self.buffer = ""\n\n    def process(self, input_string):\n        for char in input_string + "\n":  # Add newline to ensure processing of last line\n            if self.state == "IDLE":\n                if char == "$":\n                    self.state = "FOUND_DOLLAR"\n                else:\n                    self.buffer += char\n            elif self.state == "FOUND_DOLLAR":\n                self.OnDollar()\n                if char == "\n":  # End of line after dollar sign\n                    self.state = "IDLE"\n                elif char != "$":  # Dollar is followed by another character, so start as new line\n                    self.buffer = ""\n                    self.state = "IDLE"\n            if char == "\n":\n                self.flush_buffer()\n\n    def OnDollar(self):\n        print("COLOR: " + self.buffer.strip())\n\n    def flush_buffer(self):\n        if self.state != "FOUND_DOLLAR":  # Only output lines that do not end with $\n            print(self.buffer.strip())\n        self.buffer = ""\n\n# Example usage\ncolorizer = SyntaxColorizer()\ncolorizer.process("This is a test line\nAnd this one ends with $\nAnother normal line")