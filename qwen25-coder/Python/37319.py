def get_usual_payment_amounts(price, denominations):\n    # Sort denominations from largest to smallest\n    denominations.sort(reverse=True)\n    \n    # List to store common payment amounts\n    likely_payments = []\n    \n    # Iterate through each combination of the top 3-4 denominations to find\n    # likely larger payments that would be made (e.g., rounding up to nearest $5, $10, etc.)\n    for i in range(len(denominations)):\n        amount = price // denominations[i] * denominations[i]\n        if amount > price:\n            if amount not in likely_payments:\n                likely_payments.append(amount)\n        else:\n            # Also consider next higher denomination multiple\n            larger_amount = (price // denominations[i] + 1) * denominations[i]\n            for multiplier in [1.0, 1.25]:  # Slight adjustments can be made depending on behavior patterns\n                adjusted_amount = int(larger_amount * multiplier)\n                if adjusted_amount not in likely_payments:\n                    likely_payments.append(adjusted_amount)\n\n    return sorted(set(likely_payments))\n\n# Example usage\ndenominations = [0.05, 0.10, 0.25, 1, 5, 10, 20, 50, 100]\nprices = [151.24, 22.65, 0.95]\n\nfor price in prices:\n    print(f"For price {price}: Likely payment amounts are {get_usual_payment_amounts(price, denominations)}")