from datetime import datetime, timedelta\n\ndef calculate_score(interactions):\n    # Calculate recency score\n    last_interaction = max(interactions, key=lambda x: x['date'])\n    days_ago = (datetime.now() - last_interaction['date']).days\n    \n    if days_ago == 0:\n        recency_score = 5\n    elif days_ago <= 3:\n        recency_score = 4\n    elif days_ago <= 7:\n        recency_score = 3\n    elif days_ago <= 30:\n        recency_score = 2\n    elif days_ago <= 180:\n        recency_score = 1\n    else:\n        recency_score = 0\n    \n    # Calculate frequency score\n    interaction_count = len(interactions)\n    if interaction_count > 100:\n        frequency_score = 4\n    elif interaction_count >= 50:\n        frequency_score = 3\n    elif interaction_count >= 30:\n        frequency_score = 2\n    elif interaction_count >= 10:\n        frequency_score = 1\n    else:\n        frequency_score = 0\n    \n    return recency_score + frequency_score\n\ndef sort_contacts(contacts):\n    """\n    Contacts is a list of dictionaries, each containing 'name' and 'interactions'.\n    Each interaction is a dictionary with at least a 'date'.\n    Example: {'name': 'John Doe', 'interactions': [{'date': datetime.now()},...]}\n    \n    Returns the contacts sorted by their score in descending order.\n    """\n    for contact in contacts:\n        contact['score'] = calculate_score(contact['interactions'])\n    \n    # Sort contacts by score\n    return sorted(contacts, key=lambda x: x['score'], reverse=True)\n\n# Example usage\ncontacts = [\n    {'name': 'Alice', 'interactions': [{'date': datetime.now() - timedelta(days=5)}, {'date': datetime.now()}]},\n    {'name': 'Bob', 'interactions': [{'date': datetime.now() - timedelta(days=100)}, {'date': datetime.now()}]}\n]\n\nsorted_contacts = sort_contacts(contacts)\nfor contact in sorted_contacts:\n    print(contact['name'], contact['score'])