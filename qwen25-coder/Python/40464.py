class RoutingTrieNode:\n    def __init__(self):\n        self.children = {}\n        self.port = None\n\nclass RoutingTrie:\n    def __init__(self):\n        self.root = RoutingTrieNode()\n\n    def insert(self, prefix, length, port):\n        node = self.root\n        for i in range(length):\n            bit = (prefix >> (128 - i - 1)) & 1  # Extract the i-th bit from the 128-bit address\n            if bit not in node.children:\n                node.children[bit] = RoutingTrieNode()\n            node = node.children[bit]\n        node.port = port\n\n    def longest_prefix_match(self, ip):\n        node = self.root\n        next_hop_port = None\n        for i in range(128):  # IPv6 addresses are 128 bits long\n            bit = (ip >> (128 - i - 1)) & 1\n            if bit in node.children:\n                node = node.children[bit]\n                if node.port is not None:\n                    next_hop_port = node.port\n            else:\n                break\n        return next_hop_port\n\n# Example usage:\ntrie = RoutingTrie()\ntrie.insert(int.from_bytes(bytes.fromhex('2001:db8::'), 'big'), 32, 'port1')  # Simplified prefix for demonstration\nip_to_route = int.from_bytes(bytes.fromhex('2001:db8:abcd::1'), 'big')\nprint(trie.longest_prefix_match(ip_to_route))  # Output should be 'port1'