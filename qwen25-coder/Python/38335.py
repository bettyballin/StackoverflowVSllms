def y_to_x(y):\n    # Define the Y interval and corresponding X intervals\n    y_interval = (0, 100)\n    x_intervals = [(100, 200), (300, 400), (500, 600), (700, 900)]\n    \n    # Calculate the total length of Y\n    y_length = y_interval[1] - y_interval[0]\n    \n    # Calculate the cumulative lengths of X intervals\n    x_lengths = [end - start for start, end in x_intervals]\n    total_x_length = sum(x_lengths)\n    \n    # Find the equivalent point in X\n    current_y_position = 0\n    for (x_start, x_end), x_length in zip(x_intervals, x_lengths):\n        if y < current_y_position + (x_length / total_x_length) * y_length:\n            # Calculate the position within this interval\n            relative_y = y - current_y_position\n            relative_position = relative_y / ((x_length / total_x_length) * y_length)\n            return x_start + relative_position * (x_end - x_start)\n        current_y_position += (x_length / total_x_length) * y_length\n\ndef x_to_y(x):\n    # Define the Y interval and corresponding X intervals\n    y_interval = (0, 100)\n    x_intervals = [(100, 200), (300, 400), (500, 600), (700, 900)]\n    \n    # Calculate the total length of Y\n    y_length = y_interval[1] - y_interval[0]\n    \n    # Calculate the cumulative lengths of X intervals\n    x_lengths = [end - start for start, end in x_intervals]\n    total_x_length = sum(x_lengths)\n    \n    # Find the equivalent point in Y\n    current_x_position = 0\n    for (x_start, x_end), x_length in zip(x_intervals, x_lengths):\n        if x_start <= x < x_end:\n            relative_x_in_interval = x - x_start\n            total_length_up_to_here = sum(x_lengths[:x_intervals.index((x_start, x_end))])\n            return (total_length_up_to_here + relative_x_in_interval) / total_x_length * y_length\n\n# Example usage:\ny_value = 50\nx_value = y_to_x(y_value)\nprint(f"Y={y_value} corresponds to X={x_value}")\n\ny_corresponding = x_to_y(x_value)\nprint(f"X={x_value} corresponds back to Y={y_corresponding}")