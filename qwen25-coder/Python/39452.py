function find_optimal_route_with_departure(city_from, city_to, desired_departure_time):\n    // Initialize a priority queue with tuples (min_stopovers, total_layover_time, current_city, path_taken)\n    queue = PriorityQueue()\n    start_state = (0, 0, city_from, [city_from], null) // last element for previous arrival time\n    visited = set()\n    queue.push(start_state)\n\n    while not queue.isEmpty():\n        min_stopovers, total_layover_time, current_city, path_taken, prev_departure_time = queue.pop()\n\n        // Check if we have reached the destination city and adjust based on desired departure time\n        if current_city == city_to:\n            if is_within_desired_departure_time(prev_departure_time, desired_departure_time):\n                return path_taken\n\n        if (current_city, path_taken) in visited:\n            continue\n        visited.add((current_city, path_taken))\n\n        for each flight from_database where flight.departing_city == current_city and flight.arrival_city not in path_taken:\n            // Calculate layover time with constraints\n            next_layover_time = determine_min_layover_time(current_city, city_to, flight.arrival_time)\n            \n            if next_layover_time >= MIN_LAYOVER_TIME and is_after_departure_time(flight.departure_time, desired_departure_time):\n                new_path = path_taken + [flight.arrival_city]\n                queue.push((min_stopovers + 1, total_layover_time + next_layover_time, flight.arrival_city, new_path, flight.arrival_time))\n\n    return null // No valid route found