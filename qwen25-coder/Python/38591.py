from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n# Sample questions titles\nquestions = [\n    "How do I implement a binary search in Java?",\n    "Can anyone explain how to use binary search effectively?",\n    "Difference between Arrays and ArrayLists in Java",\n    "What is the time complexity of binary search?"\n]\n\n# Convert collection of text documents to matrix of TF-IDF features\nvectorizer = TfidfVectorizer()\ntfidf_matrix = vectorizer.fit_transform(questions)\n\ndef find_similar_questions(query, tfidf_matrix, questions):\n    query_vec = vectorizer.transform([query])\n    cosine_similarities_array = cosine_similarity(tfidf_matrix, query_vec).flatten()\n    indices_of_relevant_docs = cosine_similarities_array.argsort()[:-6:-1]\n    similarities = sorted(cosine_similarities_array, reverse=True)[0:5]\n    \n    return [(questions[i], similarities[j]) for j, i in enumerate(indices_of_relevant_docs)]\n\n# Example querying\nquery_title = "How can I find elements in a sorted list using binary search?"\nsimilar_questions = find_similar_questions(query_title, tfidf_matrix, questions)\nfor title, score in similar_questions:\n    print(f"Title: {title}, Similarity Score: {score}")