import itertools\n\ndef generate_schedule(teams, divisions):\n    # Ensure teams are divided into divisions\n    assert len(teams) == sum(len(d) for d in divisions), "Number of teams should match divisional count"\n    \n    # Initialize schedule list\n    schedule = []\n    weeks = max(len(d) * 2 - 1 for d in divisions)\n    \n    # Generate round-robin within each division\n    for div_id, division in enumerate(divisions):\n        for week in range(weeks):\n            matches = list(zip(division[week % len(division):], division[:week % len(division)]))\n            for team1, team2 in [match if i % 2 == 0 else (match[1], match[0]) for i, match in enumerate(matches)][:len(division)//2]:\n                schedule.append((team1, team2, week + 1, 'Division {}'.format(div_id + 1)))\n    \n    # Generate inter-divisional matches\n    all_teams = set(itertools.chain.from_iterable(divisions))\n    division_cycle = list(range(len(divisions)))\n    for _ in range(weeks):  # Number of cycles can vary based on preference or constraint satisfaction\n        used_in_week = set()\n        for div_id in division_cycle:\n            current_division = divisions[div_id]\n            remaining_teams = all_teams - set(current_division) - used_in_week\n            for team in current_division:\n                opponent = next((opponent for opponent in remaining_teams if (team, opponent) not in used_in_week), None)\n                if opponent:\n                    schedule.append((team, opponent, _ + 1, 'Inter-Div'))\n                    used_in_week.add((team, opponent))\n                    used_in_week.add((opponent, team))\n        division_cycle = division_cycle[1:] + [division_cycle[0]]  # Rotate divisions\n    \n    return schedule\n\n# Example usage\nteams = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E', 'Team F']\ndivisions = [['Team A', 'Team B'], ['Team C', 'Team D'], ['Team E', 'Team F']]\nschedule = generate_schedule(teams, divisions)\n\nfor match in schedule:\n    print(f"Week {match[2]}: {match[0]} vs {match[1]}, Location: {match[3]}")