# Naive O(n^3) matrix multiplication\ndef naive_matrix_mult(A, B):\n    n = len(A)\n    result = [[0]*n for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n\n# Placeholder for Strassen's O(n^2.81) algorithm\ndef strassen_matrix_mult(A, B):\n    n = len(A)\n    if n == 1:\n        return [[A[0][0] * B[0][0]]]\n    \n    # Recursive implementation here would require splitting matrices,\n    # computing seven products, and then combining them.\n    \n    # This is a simplified placeholder for the sake of example\n    result = [[0]*n for _ in range(n)]\n    return result\n\n# Usage example with a very small size to avoid actual performance issues\nA = B = [[1, 2], [3, 4]]\nprint("Naive:", naive_matrix_mult(A, B))\nprint("Strassen (simplified):", strassen_matrix_mult(A, B))