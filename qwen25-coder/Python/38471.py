# app.py\nfrom flask import Flask, request, jsonify, render_template_string, g\nimport sqlite3\n\nDATABASE = 'votes.db'\n\napp = Flask(__name__)\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.teardown_appcontext\ndef close_connection(exception):\n    db = getattr(g, '_database', None)\n    if db is not None:\n        db.close()\n\ndef init_db():\n    with app.app_context():\n        db = get_db()\n        db.execute('CREATE TABLE IF NOT EXISTS questions (id INTEGER PRIMARY KEY, votes INTEGER)')\n        db.commit()\n\n@app.route('/')\ndef index():\n    db = get_db()\n    cur = db.execute('SELECT id, votes FROM questions')\n    entries = cur.fetchall()\n    return render_template_string('''\n        <html>\n            <head><script src="https://code.jquery.com/jquery-3.6.0.min.js"></script></head>\n            <body>\n                {% for entry in entries %}\n                    <div class='question' id='question_{{ entry[0] }}'>\n                        <button onclick="vote({{ entry[0] }}, 1)">↑</button>\n                        <span id='votes_{{ entry[0] }}'>{{ entry[1] }}</span>\n                        <button onclick="vote({{ entry[0] }}, -1)">↓</button>\n                    </div>\n                {% endfor %}\n                <script>\n                    function vote(question_id, direction) {\n                        $.ajax({\n                            url: '/vote',\n                            method: 'POST',\n                            data: {question_id: question_id, direction: direction},\n                            success: function(response) {\n                                $('#votes_' + question_id).text(response.votes);\n                            }\n                        });\n                    }\n                </script>\n            </body>\n        </html>\n    ''', entries=entries)\n\n@app.route('/vote', methods=['POST'])\ndef vote():\n    question_id = request.form['question_id']\n    direction = int(request.form['direction'])\n\n    db = get_db()\n    cur = db.execute('SELECT votes FROM questions WHERE id=?', (question_id,))\n    current_votes = cur.fetchone()[0]\n\n    new_votes = current_votes + direction\n    db.execute('UPDATE questions SET votes=? WHERE id=?', (new_votes, question_id))\n    db.commit()\n\n    return jsonify({'votes': new_votes})\n\nif __name__ == '__main__':\n    init_db()\n    app.run(debug=True)