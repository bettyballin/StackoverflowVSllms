import heapq\n\ndef heuristic(a, b):\n    # Example heuristic function; in practice this would be geographic distance\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\ndef a_star_search(graph, start, goal):\n    frontier = []\n    heapq.heappush(frontier, (0, start))\n    came_from = {}\n    cost_so_far = {}\n    came_from[start] = None\n    cost_so_far[start] = 0\n\n    while frontier:\n        current = heapq.heappop(frontier)[1]\n\n        if current == goal:\n            break\n\n        for next in graph.neighbors(current):\n            new_cost = cost_so_far[current] + graph.cost(current, next)\n            if next not in cost_so_far or new_cost < cost_so_far[next]:\n                cost_so_far[next] = new_cost\n                priority = new_cost + heuristic(goal, next)\n                heapq.heappush(frontier, (priority, next))\n                came_from[next] = current\n\n    return came_from, cost_so_far