from django.db.models import Subquery, OuterRef\n\n# First, create a subquery to get the maximum current_price for each market\nmax_current_price = Contract.objects.filter(\n    market=OuterRef('pk')\n).order_by('-current_price').values('current_price')[:1]\n\n# Now use this subquery to annotate markets with the highest contract price\nmarkets_with_max_contract = Market.objects.annotate(\n    max_current_price=Subquery(max_current_price)\n)\n\n# To get full contract details, you need another query since Subquery doesn't return entire model instances\nmarket_ids_with_max_price = [market.id for market in markets_with_max_contract]\ncontracts_with_max_price = Contract.objects.filter(\n    market_id__in=market_ids_with_max_price\n).filter(\n    current_price=Subquery(max_current_price)\n)\n\n# To map each market to its contracts with max price, use a dictionary comprehension\nmarket_to_contract_map = {\n    contract.market_id: contract for contract in contracts_with_max_price\n}\n\n# Now you can fetch markets and their corresponding contracts with the max price\nfor market in markets_with_max_contract:\n    print(f'Market: {market.name}, Max Price Contract: {market_to_contract_map[market.id].name}')