def calculate_cost(node_a, node_b, global_modifier):\n    cost = math.sqrt(min(node_a.e, node_b.e)) * (1 + \n               math.sqrt(math.sqrt((node_a.x - node_b.x)**2 + (node_a.y - node_b.y)**2)) / 75 +\n               math.sqrt(global_modifier) / 10)\n    return cost\n\ndef greedy_initialization(nodes):\n    # Create initial connections\n    links = []\n    for node in nodes:\n        available_nodes = [n for n in nodes if n != node]\n        while len(node.links) < node.L and available_nodes:\n            next_node = max(available_nodes, key=lambda x: calculate_cost(node,x,T))\n            if (node, next_node) not in links and (next_node,node) not in links:\n                links.append((node, next_node))\n                node.links.add(next_node)\n                next_node.links.add(node)\n            available_nodes.remove(next_node)\n    return links\n\ndef local_search(links, nodes):\n    improved = True\n    while improved:\n        improved = False\n        for a, b in links.copy():\n            cands_a = [n for n in (nodes - {a}) if len(n.links) < n.L and (a not in n.links)]\n            cands_b = [m for m in (nodes - {b}) if len(m.links) < m.L and (b not in m.links)]\n            \n            best_impv = None\n            for x in cands_a:\n                impvoa = calculate_cost(a, x, T)\n                for y in cands_b:\n                    impvob = calculate_cost(b, y, T)\n                    delta = impvoa + impvob - calculate_cost(a, b, T)\n\n                    if delta > 0 and (best_impv is None or best_impv < delta):\n                        best_impv = delta\n                        action_remove = [(a,b)]\n                        action_insert = [(a,x), (b,y)]\n\n            if best_impv:\n                for link in action_remove: links.remove(link)\n                for link in action_insert: links.add(link)\n                improved = True\n\n    return links