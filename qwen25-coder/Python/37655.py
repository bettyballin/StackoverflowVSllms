def count_arrangements(n):\n    if n <= 2:\n        return pow(2, n)  # For small n, all combinations are valid\n\n    # Linear case where elements form a line, not in a circle.\n    linear_dp = [0] * (n + 1)\n    linear_dp[0] = 1\n    linear_dp[1] = 2\n\n    for i in range(2, n):\n        linear_dp[i] = linear_dp[i - 1] + linear_dp[i - 2]\n\n    # Circular case.\n    if n == 3:\n        return 4  # Manually calculated for small circle (000, 001, 010, 100)\n\n    circular_valid_count = (\n        linear_dp[n - 2] +  # No 1s next to each other excluding the first and last\n        linear_dp[n - 3]   # First is fixed as 1, last must be 0, then arrange middle (n-3) elements\n    )\n\n    return circular_valid_count\n\n# Example usage:\nn = 5\nprint(count_arrangements(n))  # Output the number of valid arrangements for n=5