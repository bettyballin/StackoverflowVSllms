def polar_angle(p0, p1=None):\n    if p1 is None:\n        p1 = (0, 0)\n    y_span = p0[1] - p1[1]\n    x_span = p0[0] - p1[0]\n    return atan2(y_span, x_span)\n\ndef distance(p0, p1=None):\n    if p1 is None:\n        p1 = (0, 0)\n    y_span = p0[1] - p1[1]\n    x_span = p0[0] - p1[0]\n    return y_span**2 + x_span**2\n\ndef det(p1, p2, p3):\n    # determinant for vectors AB and AC\n    return (p2[0] - p1[0]) * (p3[1] - p1[1]) - (p2[1] - p1[1]) * (p3[0] - p1[0])\n\ndef quickhull(points):\n    if len(points) < 3:\n        return points\n\n    left_most = min(points, key=lambda p: p[0])\n    right_most = max(points, key=lambda p: p[0])\n\n    def _half_hull(p1, p2, points):\n        line_points = [p for p in points if det(p1, p2, p) > 0]\n        farthest_point = None\n        max_distance = float('-inf')\n        for point in line_points:\n            d = distance(point, p1)\n            if d > max_distance:\n                farthest_point = point\n                max_distance = d\n\n        hull = []\n        if farthest_point is not None:\n            # Recursively find convex hull points from each side of the triangle formed by the hull points and the farthest point\n            hull += _half_hull(p1, farthest_point, line_points)\n            hull += _half_hull(farthest_point, p2, line_points)\n\n        if det(p1, p2, farthest_point) != 0:\n            hull.append(farthest_point)\n        return hull\n\n    upperhull = _half_hull(left_most, right_most, points)\n    lowerhull = _half_hull(right_most, left_most, points)\n\n    # The convex hull consists of the two half-hulls plus the outermost two points\n    return [left_most] + upperhull + [right_most] + lowerhull\n\n# Example usage:\npoints = [(0, 0), (1, 1), (2, 2), (4, 0), (3, 3), (5, 0)]\nconvex_hull = quickhull(points)\nprint(convex_hull)