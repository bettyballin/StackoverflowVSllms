import boto3\nimport zipfile\nimport io\n\ndef lambda_handler(event, context):\n    s3_client = boto3.client('s3')\n    \n    bucket_name = 'your-private-bucket'\n    objects_to_zip = event['objects']  # list of object keys to zip\n    \n    # Retrieve these files from S3 and store in memory as byte streams\n    data_buffers = []\n    for obj_key in objects_to_zip:\n        response = s3_client.get_object(Bucket=bucket_name, Key=obj_key)\n        data_stream = io.BytesIO(response['Body'].read())\n        data_buffers.append((obj_key, data_stream))\n    \n    # Create a zip file from the byte streams\n    output_zip = io.BytesIO()\n    with zipfile.ZipFile(output_zip, 'w') as zipf:\n        for obj_key, data_stream in data_buffers:\n            zipf.writestr(obj_key, data_stream.getvalue())\n    \n    # Upload the zip file to S3\n    zip_file_key = f"user-downloads/{context.aws_request_id}.zip"\n    s3_client.put_object(Bucket=bucket_name, Key=zip_file_key, Body=output_zip.getvalue())\n    \n    # Return a pre-signed URL for the user to download\n    url = s3_client.generate_presigned_url('get_object',\n                                            Params={'Bucket': bucket_name,\n                                                    'Key': zip_file_key},\n                                            ExpiresIn=3600)  # URL valid for 1 hour\n    \n    return {'download_url': url}