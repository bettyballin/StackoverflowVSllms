class Cell:\n    def __init__(self, value=None, formula=None):\n        self.value = value\n        self.formula = formula\n        self.dependents = set()\n        self.dependencies = set()\n\n    def update_value(self, new_value):\n        if self.value != new_value:\n            self.value = new_value\n            for dependent in self.dependents:\n                dependent.recalculate()\n\n    def recalculate(self):\n        try:\n            # Evaluate the cell's formula context-awarely.\n            new_value = eval(self.formula, globals(), {'get_cell': get_cell})\n            self.update_value(new_value)\n        except Exception as e:\n            print(f"Error in cell: {self.formula}\n{e}")\n\n    def add_dependent(self, dependent):\n        self.dependents.add(dependent)\n\ndef get_cell(cell_name):\n    # This function should return the value of a cell given its name or reference.\n    # Implement your cell retrieval logic here.\n    pass\n\nclass Worksheet:\n    def __init__(self):\n        self.cells = {}\n\n    def add_cell(self, cell_name, cell_instance):\n        self.cells[cell_name] = cell_instance\n\ndef build_dependency_graph(worksheet):\n    for cell in worksheet.cells.values():\n        if cell.formula:\n            # This is a simplified evaluation. Real Excel formulas are more complex.\n            cell_names_in_formula = set(cell.formula.split())\n            for dep_cell_name in cell_names_in_formula:\n                if dep_cell_name in worksheet.cells:\n                    dependency_cell = worksheet.cells[dep_cell_name]\n                    dependency_cell.add_dependent(cell)\n                    cell.dependencies.add(dependency_cell)\n\n# Example usage\nworksheet = Worksheet()\ncell_a1 = Cell(formula='get_cell("B1") + 2')\ncell_b1 = Cell(value=5)\nworksheet.add_cell('A1', cell_a1)\nworksheet.add_cell('B1', cell_b1)\nbuild_dependency_graph(worksheet)\n\n# Simulate a change\ncell_b1.update_value(10)  # A1 will automatically recalculate to A1 = 12