from collections import defaultdict, deque\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n\n    def add_edge(self, u, v):\n        self.graph[u].append(v)\n\n    def topological_sort_util(self, v, visited, stack):\n        visited[v] = True\n        \n        for i in self.graph[v]:\n            if not visited[i]:\n                self.topological_sort_util(i, visited, stack)\n        \n        stack.insert(0, v)  # Insert at the beginning of the list\n\n    def topological_sort(self):\n        visited = {node: False for node in self.graph}\n        stack = []\n\n        for node in self.graph:\n            if not visited[node]:\n                self.topological_sort_util(node, visited, stack)\n        \n        return stack\n\n# Example usage\ng = Graph()\n# Adding edges to the graph (table dependencies)\ng.add_edge('tableA', 'tableB')\ng.add_edge('tableB', 'tableC')\ng.add_edge('tableD', 'tableE')\n\n# Getting the order of insertion based on dependencies\norder_of_insertion = g.topological_sort()\nprint("Order in which to insert SQL data:", order_of_insertion)