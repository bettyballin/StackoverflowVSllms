def fir_low_pass_filter(signal, cutoff_index):\n    n = len(signal)\n    kernel = np.ones(n) / float(n)\n    for i in range(cutoff_index, n):\n        kernel[i] = 0\n    filtered_signal = np.convolve(signal, kernel, mode='same')\n    return filtered_signal\n\n# Example usage\nsignal = np.random.random(100)\nfiltered_signal = fir_low_pass_filter(signal, 20)  # Assuming we want to pass frequencies below the 20th index