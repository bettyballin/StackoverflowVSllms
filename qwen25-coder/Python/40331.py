import hashlib\nimport numpy as np\n\ndef shingle_data(data, shingle_size=128):\n    """Generate shingles from binary data."""\n    return [data[i:i+shingle_size] for i in range(len(data)-shingle_size+1)]\n\ndef minhash(shingles, num_hashes=10):\n    """Create a MinHash signature for the given list of shingles."""\n    signatures = []\n    for _ in range(num_hashes):\n        min_value = float('inf')\n        for shingle in shingles:\n            hash_value = int(hashlib.md5(shingle).hexdigest(), 16)\n            if hash_value < min_value:\n                min_value = hash_value\n        signatures.append(min_value)\n    return np.array(signatures)\n\ndef jaccard_similarity(sig1, sig2):\n    """Calculate Jaccard similarity between two MinHash signatures."""\n    return np.mean(sig1 == sig2)\n\n# Example usage\nrom_data1 = b'\x00\xff'*128  # Example ROM data\nrom_data2 = b'\x00\xff'*64 + b'\xaa\xaa'*64\n\nshingles1 = shingle_data(rom_data1)\nshingles2 = shingle_data(rom_data2)\n\nsignature1 = minhash(shingles1)\nsignature2 = minhash(shingles2)\n\nsimilarity = jaccard_similarity(signature1, signature2)\nprint(f"Similarity: {similarity:.2f}")