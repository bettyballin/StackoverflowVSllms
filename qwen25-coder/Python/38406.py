import bisect\nfrom collections import deque\nimport time\n\nclass DataFlowMonitor:\n    def __init__(self):\n        self.received_data = deque(maxlen=10000)  # Deque with max length to limit memory usage\n\n    def on_recv(self, data_size):\n        current_time = time.time()\n        bisect.insort(self.received_data, (current_time, data_size))\n\n    def calculate_median_speed(self):\n        current_time = time.time()\n        one_second_ago = current_time - 1.0\n\n        filtered_data = [size for timestamp, size in self.received_data if timestamp >= one_second_ago]\n        \n        if not filtered_data:\n            return 0\n        \n        n = len(filtered_data)\n        sorted_data = sorted(filtered_data)\n\n        # Calculate median\n        mid = n // 2\n        if n % 2 == 1:\n            return sorted_data[mid]\n        else:\n            return (sorted_data[mid - 1] + sorted_data[mid]) / 2.0\n\n# Usage\nmonitor = DataFlowMonitor()\n\n# Simulating OnRecv calls\nfor _ in range(5000):\n    monitor.on_recv(data_size=10)  # Example data size\n    time.sleep(0.0001)  # Simulate intervals between data reception\n\nmedian_speed = monitor.calculate_median_speed()\nprint(f"Median speed over last second: {median_speed} bytes/s")