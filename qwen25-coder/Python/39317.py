import os\nimport signal\nimport threading\n\nPIPE_FILE = '/path/to/fifo'\ndata_lock = threading.Lock()\nwriting_in_progress = threading.Event()\n\ndef SendStream(data):\n    global writing_in_progress\n    with data_lock:\n        if writing_in_progress.is_set():\n            return  # Skip if already writing\n        writing_in_progress.set()\n    \n    pipe = None\n    try:\n        pipe = open(PIPE_FILE, 'w')\n        for i in data:\n            pipe.write(i + '\n')\n            pipe.flush()\n    finally:\n        if pipe:\n            pipe.close()\n        writing_in_progress.clear()\n\ndef Serve(data):\n    signal.signal(signal.SIGUSR1, lambda signum, frame: threading.Thread(target=SendStream, args=(data,)).start())\n\n# Example usage\nif __name__ == "__main__":\n    sample_data = ['line1', 'line2', 'line3']\n    Serve(sample_data)\n\n    # Simulate xinetd server action\n    def simulate_xinetd():\n        with open(PIPE_FILE) as pipe:\n            for line in pipe:\n                print(line.strip())\n\n    threading.Thread(target=simulate_xinetd).start()