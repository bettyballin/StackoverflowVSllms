class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end_of_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end_of_word = True\n\n    def search_prefix(self, prefix):\n        node = self.root\n        for char in prefix:\n            if char not in node.children:\n                return None\n            node = node.children[char]\n        return node\n\ndef dfs(board, i, j, trie_node, path, visited, result):\n    rows, cols = len(board), len(board[0])\n    if not (0 <= i < rows and 0 <= j < cols) or visited[i][j] or board[i][j] not in trie_node.children:\n        return\n\n    path.append(board[i][j])\n    trie_node = trie_node.children[board[i][j]]\n    if trie_node.is_end_of_word:\n        result.add(''.join(path))\n\n    visited[i][j] = True\n    # Explore all 8 possible directions\n    for di, dj in [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]:\n        dfs(board, i + di, j + dj, trie_node, path, visited, result)\n    visited[i][j] = False\n    path.pop()\n\ndef find_words(board, dictionary):\n    trie = Trie()\n    for word in dictionary:\n        if len(word) >= 3:\n            trie.insert(word)\n\n    rows, cols = len(board), len(board[0])\n    result = set()\n    for i in range(rows):\n        for j in range(cols):\n            dfs(board, i, j, trie.root, [], [[False] * cols for _ in range(rows)], result)\n\n    return result\n\n# Example usage\ndictionary = ["word", "fame", "sea", "lob", "tux", "..."]  # Load your dictionary here\nboard = [\n    ['F', 'X', 'I', 'E'],\n    ['A', 'M', 'L', 'O'],\n    ['E', 'W', 'B', 'X'],\n    ['A', 'S', 'T', 'U']\n]\n\nwords_found = find_words(board, dictionary)\nprint(words_found)