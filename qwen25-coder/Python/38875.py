from google.appengine.ext import ndb, memcache\nimport pickle\nimport uuid\n\nclass Session(ndb.Model):\n    created = ndb.DateTimeProperty(auto_now_add=True)\n    updated = ndb.DateTimeProperty(auto_now=True)\n    data = ndb.PickleProperty(compressed=True)\n\ndef create_session(data=None):\n    session_id = str(uuid.uuid4())\n    if data is None:\n        data = {}\n    session_data = Session(id=session_id, data=data)\n    key = session_data.put()\n    \n    # Write to memcache\n    memcache.set(session_id, pickle.dumps(data))\n    return key.string_id()\n\ndef retrieve_session(session_id):\n    # Try fetching from memcache first\n    data_pickle = memcache.get(session_id)\n    if not data_pickle:\n        # If not in memcache, fetch from datastore and put back to memcache\n        session_key = ndb.Key(Session, session_id)\n        session_entity = session_key.get()\n        if session_entity is None:\n            return None\n        data = session_entity.data\n        memcache.set(session_id, pickle.dumps(data))\n    else:\n        data = pickle.loads(data_pickle)\n    \n    return data\n\ndef update_session(session_id, new_data):\n    # Fetch current session data to merge with new data\n    existing_data = retrieve_session(session_id)\n    if not existing_data:\n        return None\n    \n    # Merge new data with the existing one\n    existing_data.update(new_data)\n    \n    # Write updated data back to memcache and datastore\n    memcache.set(session_id, pickle.dumps(existing_data))\n    session_key = ndb.Key(Session, session_id)\n    session_entity = session_key.get()\n    if session_entity:\n        session_entity.data = existing_data\n        session_entity.put()\n\ndef delete_session(session_id):\n    # Remove from both memcache and datastore\n    memcache.delete(session_id)\n    session_key = ndb.Key(Session, session_id)\n    session_key.delete()