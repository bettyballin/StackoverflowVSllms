import re\n\ndef validate_tags(input_string):\n    if not input_string.strip():\n        raise ValueError("Tags cannot be empty.")\n    \n    # Define a regex pattern for allowed tags (alphanumeric, spaces, and dashes)\n    pattern = r'^[a-zA-Z0-9\s\-]+$'\n    \n    if not re.match(pattern, input_string):\n        raise ValueError("Invalid characters detected in tags. Only letters, numbers, spaces, and dashes are allowed.")\n    \n    # Split the string by spaces and trim each tag\n    tags = [tag.strip() for tag in input_string.split()]\n    \n    # Ensure there is at least one non-empty tag\n    if not tags:\n        raise ValueError("At least one tag is required.")\n    \n    # Prepare for database insertion (example using parameterized query)\n    safe_tags = []\n    for tag in tags:\n        # Assume `db` is your database connection object with a prepare method\n        prepared_tag = db.prepare(tag)  # This should escape the input safely\n        safe_tags.append(prepared_tag)\n    \n    # Now you can insert these tags into your database\n    return safe_tags\n\n# Example usage\ntry:\n    user_input = "secure -programming tag1"\n    valid_tags = validate_tags(user_input)\n    print("Valid tags:", valid_tags)\nexcept ValueError as e:\n    print("Error:", e)