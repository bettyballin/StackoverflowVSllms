import hmac\nimport hashlib\nimport base64\n\ndef generate_license_key(version, duration, user_id, secret_key):\n    # Concatenate version, duration, and user ID\n    data = f"{version}-{duration}-{user_id}"\n    \n    # Compute HMAC-SHA256 hash of the data with a secret key\n    h = hmac.new(secret_key.encode(), data.encode(), hashlib.sha256)\n    \n    # Encode in Base32 to make it shorter and URL-safe\n    return base64.b32encode(h.digest()).decode().rstrip('=').lower()\n\n# Example usage\nsecret_key = "your_very_secret_key"\nlicense_key = generate_license_key("1.0", "1Y", "user123", secret_key)\nprint("License key:", license_key)\n\ndef verify_license_key(version, duration, user_id, license_key, secret_key):\n    expected_key = generate_license_key(version, duration, user_id, secret_key)\n    return hmac.compare_digest(license_key.lower(), expected_key)  # Use compare_digest to prevent timing attacks\n\n# Example verification\nis_valid = verify_license_key("1.0", "1Y", "user123", license_key, secret_key)\nprint("Is valid:", is_valid)