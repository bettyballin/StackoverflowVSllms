from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives.asymmetric import rsa, padding\nfrom cryptography.hazmat.primitives import hashes, serialization\nimport os\nimport time\n\n# Generate keys for symmetric and asymmetric encryption\nsymmetric_key = os.urandom(32)  # AES-256 key\niv = os.urandom(16)  # Initialization vector for AES\nprivate_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)\npublic_key = private_key.public_key()\n\n# Data to encrypt\ndata = b"Secure this data securely and fast." * 1000  # Larger data for symmetric encryption\n\n# Symmetric Encryption (AES-256-CBC)\nstart_time = time.time()\ncipher = Cipher(algorithms.AES(symmetric_key), modes.CBC(iv))\nencryptor = cipher.encryptor()\nciphertext_symmetric = encryptor.update(data) + encryptor.finalize()\nsymmetric_encryption_time = time.time() - start_time\n\n# Asymmetric Encryption (RSA-OAEP)\nstart_time = time.time()\nciphertext_asymmetric = public_key.encrypt(\n    data[:256],  # RSA can only encrypt up to the size of the key\n    padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=None)\n)\nasymmetric_encryption_time = time.time() - start_time\n\nprint(f"Symmetric AES Encryption Time: {symmetric_encryption_time:.6f} seconds")\nprint(f"Asymmetric RSA Encryption Time: {asymmetric_encryption_time:.6f} seconds")