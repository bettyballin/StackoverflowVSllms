import heapq\n\nclass MedianFinder:\n    def __init__(self):\n        self.A = []  # max heap (use negative values)\n        self.B = []  # min heap\n\n    def addNum(self, num: int) -> None:\n        if len(self.A) == len(self.B):\n            heapq.heappush(self.B, -heapq.heappushpop(self.A, -num))\n        else:\n            heapq.heappush(self.A, -heapq.heappushpop(self.B, num))\n\n    def findMedian(self) -> float:\n        return -self.A[0] if len(self.A) > len(self.B) else (-self.A[0] + self.B[0]) / 2.0