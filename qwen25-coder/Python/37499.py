#!/usr/bin/env python\nimport sys\nimport time\nfrom multiprocessing import Process, Event\n\n# Shared flag to communicate between processes\nterminate_event = Event()\n\ndef main():\n    # Set up inputs..\n\n    # Spawn processes\n    p1 = Proc(1)\n    p2 = Proc(2)\n    p1.start()\n    p2.start()\n\n    try:\n        while not terminate_event.is_set():\n            time.sleep(0.5)  # Let the processes run freely until interrupted\n    except KeyboardInterrupt:\n        print("User aborted.")\n    finally:\n        terminate_event.set()  # Signal all processes to terminate\n        p1.join()\n        p2.join()\n\nclass Proc(Process):\n    def __init__(self, procNum):\n        self.id = procNum\n        Process.__init__(self)\n\n    def run(self):\n        doneWork = False\n\n        while not terminate_event.is_set():\n            try:\n                # Do work...\n                time.sleep(1)\n                sys.stdout.write('.')\n\n                if doneWork and not terminate_event.is_set():\n                    print("PROC#" + str(self.id) + " Done.")\n                    break\n\n            except KeyboardInterrupt:\n                pass  # Don't handle directly here, just let the shared flag do its job\n\n# Main Entry\nif __name__ == "__main__":\n    main()