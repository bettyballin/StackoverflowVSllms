def encrypt_file(file_path, symmetric_key):\n    with open(file_path, 'rb') as f:\n        data = f.read()\n    encrypted_data = aes_encrypt(data, symmetric_key)\n    return encrypted_data\n\ndef decrypt_file(encrypted_file_path, symmetric_key):\n    with open(encrypted_file_path, 'rb') as ef:\n        encrypted_data = ef.read()\n    decrypted_data = aes_decrypt(encrypted_data, symmetric_key)\n    return decrypted_data\n\ndef encrypt_symmetric_key(symmetric_key, public_keys):\n    encrypted_keys = {}\n    for user_id, public_key in public_keys.items():\n        encrypted_key = rsa_encrypt(symmetric_key, public_key)\n        encrypted_keys[user_id] = encrypted_key\n    return encrypted_keys\n\ndef decrypt_symmetric_key(encrypted_keys, private_key):\n    for user_id, encrypted_key in encrypted_keys.items():\n        try:\n            symmetric_key = rsa_decrypt(encrypted_key, private_key)\n            return symmetric_key\n        except DecryptionError:\n            continue\n    raise Exception("No valid key found")\n\n# Example usage:\nsymmetric_key = generate_aes_key()\npublic_keys = get_users_public_keys(users_with_access)\nencrypted_symmetric_keys = encrypt_symmetric_key(symmetric_key, public_keys)\n\nencrypted_file_data = encrypt_file('sensitive_document.txt', symmetric_key)\n\nfor user_id in encrypted_symmetric_keys:\n    private_key = get_user_private_key(user_id)  # Assume secure retrieval\n    try:\n        decrypted_symmetric_key = decrypt_symmetric_key({user_id: encrypted_symmetric_keys[user_id]}, private_key)\n        data = decrypt_file('encrypted_sensitive_document.txt', decrypted_symmetric_key)\n        print("Decrypted:", data)\n        break\n    except Exception as e:\n        print(f"Failed for user {user_id}: {e}")