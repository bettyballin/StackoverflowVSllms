import os\nimport time\nimport paramiko\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\n\nclass UploadHandler(FileSystemEventHandler):\n    def __init__(self, local_dir, remote_dir, host, port, username, password_or_key):\n        self.local_dir = local_dir\n        self.remote_dir = remote_dir\n        self.ssh = paramiko.SSHClient()\n        self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n        self.ssh.connect(hostname=host, port=port, username=username, key_filename=password_or_key)\n\n    def on_modified(self, event):\n        if not event.is_directory:\n            sftp = self.ssh.open_sftp()\n            local_path = event.src_path\n            remote_path = os.path.join(self.remote_dir, os.path.relpath(local_path, self.local_dir))\n            sftp.put(local_path, remote_path)\n            print(f'Uploaded {event.src_path} to {remote_path}')\n            sftp.close()\n\ndef main():\n    local_folder = '/path/to/local/folder'\n    remote_folder = '/path/on/remote/server/'\n    server_host = 'your.server.com'\n    server_port = 22\n    user_name = 'username'\n    private_key_file = 'path_to_your_private_key'\n\n    event_handler = UploadHandler(local_folder, remote_folder, server_host, server_port, user_name, private_key_file)\n    observer = Observer()\n    observer.schedule(event_handler, local_folder, recursive=True)\n    observer.start()\n\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()\n\nif __name__ == "__main__":\n    main()