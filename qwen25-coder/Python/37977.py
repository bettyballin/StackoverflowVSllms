from scipy.spatial import Delaunay, ConvexHull\n\ndef is_point_inside_hull(point, hull, tolerance=1e-12):\n    """\n    Check if the point is inside the convex hull of points.\n    :param point: A tuple or array-like object representing the point to check.\n    :param hull: The ConvexHull object.\n    :param tolerance: Small numerical tolerance for checking inclusion.\n    :return: True if the point is inside, False otherwise.\n    """\n    return all((np.dot(eq[:-1], point) + eq[-1] <= tolerance) for eq in hull.equations)\n\ndef filter_internal_triangles(points):\n    # ComputeDelaaunay triangulation\n    tri = Delaunay(points)\n    \n    # Compute convex hull\n    hull = ConvexHull(points)\n    \n    internal_triangles = []\n    for simplex in tri.simplices:\n        if all(is_point_inside_hull(points[point], hull) for point in simplex):\n            internal_triangles.append(simplex)\n    return internal_triangles\n\n# Example usage with some points\nimport numpy as np\n\npoints = np.array([(0, 0), (1, 0), (0.5, 0.866), (2, 0), (3, 1)])\ninternal_triangles = filter_internal_triangles(points)\nprint("Internal triangles:", internal_triangles)