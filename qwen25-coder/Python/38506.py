from constraint import Problem\n\ndef solve_shift_requirements():\n    problem = Problem()\n\n    # Example data\n    people = ['James', 'John', 'Ursula', 'Mary']\n    roles = {\n        'James': {'role': 'doctor'},\n        'John': {'role': 'nurse'},\n        'Ursula': {'role': 'doctor', 'team': 'A'},\n        'Mary': {'role': 'nurse'}\n    }\n\n    # Define the problem variables and domains\n    for person in people:\n        problem.addVariable(person, [0, 1])  # 1 if selected for shift\n\n    # Define constraints\n    def at_least_one_doctor(*people_statuses):\n        return sum(roles[person]['role'] == 'doctor' for i, person in enumerate(people) if people_statuses[i] == 1) >= 1\n\n    def at_least_two_nurses(*people_statuses):\n        return sum(roles[person]['role'] == 'nurse' for i, person in enumerate(people) if people_statuses[i] == 1) >= 2\n\n    def one_doctor_team_A(*people_statuses):\n        return sum((roles[person].get('team') == 'A' and roles[person]['role'] == 'doctor') \n                   for i, person in enumerate(people) if people_statuses[i] == 1) >= 1\n\n    # Adding constraints to the problem\n    problem.addConstraint(at_least_one_doctor, people)\n    problem.addConstraint(at_least_two_nurses, people)\n    problem.addConstraint(one_doctor_team_A, people)\n\n    solutions = problem.getSolutions()\n    \n    # Output the results\n    for solution in solutions:\n        selected_people = [person for person in people if solution[person] == 1]\n        print(f"Solution: {selected_people}")\n\nsolve_shift_requirements()