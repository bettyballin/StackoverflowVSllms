def count_trinary_sequences(n):\n    # Initialize a dictionary for memoization\n    dp = {}\n\n    def helper(length, ones, twos):\n        if (length, ones, twos) in dp:\n            return dp[(length, ones, twos)]\n        \n        # Base case: if the length is n, check the conditions\n        if length == n:\n            if ones == twos or ones == twos + 1:\n                return 1\n            else:\n                return 0\n        \n        # Recurrence relation: try adding '0', '1', or '2'\n        count = (helper(length + 1, ones, twos) +\n                 helper(length + 1, ones + 1, twos) +\n                 helper(length + 1, ones, twos + 1))\n        \n        dp[(length, ones, twos)] = count\n        return count\n\n    # Start the recursion with an empty sequence and zero counts\n    result = helper(0, 0, 0)\n    \n    return result\n\n# Calculate for trinary numbers of length 36\nprint(count_trinary_sequences(36))