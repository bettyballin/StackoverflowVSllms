import urllib2\nimport httplib\nimport socket\nimport base64\n\nclass HTTPSProxyAuthHandler(urllib2.BaseHandler):\n    def __init__(self, proxy_url, proxy_user=None, proxy_pass=None):\n        super(HTTPSProxyAuthHandler, self).__init__()\n        self.proxy_url = proxy_url\n        self.proxy_user = proxy_user\n        self.proxy_pass = proxy_pass\n\n    def https_open(self, req):\n        return self.do_open(self.https_connection_with_proxy_auth, req)\n\n    def https_connection_with_proxy_auth(self, host, port=None, **kwargs):\n        conn = httplib.HTTPConnection(self.proxy_url)\n        auth_str = base64.b64encode('{}:{}'.format(self.proxy_user, self.proxy_pass)).strip()\n        headers = {\n            'Host': '{}'.format(host),\n            'Proxy-Authorization': 'Basic {}'.format(auth_str)\n        }\n        conn.request('CONNECT', host + ':' + str(port), headers=headers)\n        response = conn.getresponse()\n        if response.status != 200:\n            raise Exception("Failed to connect to proxy")\n        \n        ssl_context = socket.ssl(conn.sock, cert_reqs=socket.CERT_NONE)  # Not recommended for production!\n        secure_sock = httplib.FakeSocket(conn.sock, ssl_context)\n        return httplib.HTTPSConnection(host, port=port, sock=secure_sock)\n\n# Use the custom handler\nproxy_handler = HTTPSProxyAuthHandler('proxy_host:port', 'user', 'pass')\nopener = urllib2.build_opener(proxy_handler)\nurllib2.install_opener(opener)\n\n# Now you can connect to your URL as usual\nresponse = urllib2.urlopen(A_HTTPS_URL)\nprint(response.read())