import re\n\ndef is_valid_phone_number(phone):\n    # Define patterns for invalid numbers\n    five_five_five_pattern = r'^555'\n    seven_identical_digits_pattern = r'(\d)\1{6}'\n    single_series_pattern = r'^(?:0?00|123-4567|867-5309)'\n    \n    # Valid area codes (excluding some special services)\n    valid_area_codes = [\n        '201', '202', '203', '205', '206', '207', '208', '209', '212', '213',\n        # Add more area codes as necessary, excluding 911 and other special lines\n    ]\n    \n    # Clean the phone number to a standard format (e.g., remove dashes)\n    clean_phone = re.sub(r'\D', '', phone)\n    \n    # Check if length is exactly 10 digits\n    if len(clean_phone) != 10:\n        return False\n    \n    area_code = clean_phone[:3]\n    \n    # Check against invalid number patterns\n    if (re.match(five_five_five_pattern, clean_phone) or\n            re.search(seven_identical_digits_pattern, clean_phone) or\n            re.fullmatch(single_series_pattern, phone)):\n        return False\n    \n    # Verify area code is valid\n    if area_code not in valid_area_codes:\n        return False\n    \n    return True\n\n# Example usage\nphone_number = "330-000-0000"\nif not is_valid_phone_number(phone_number):\n    print("Invalid phone number")\nelse:\n    print("Valid phone number")