import os\nimport requests\nfrom ftplib import FTP\nfrom paramiko import SFTPClient, SSHClient, AutoAddPolicy\nfrom contextlib import contextmanager\n\n@contextmanager\ndef open_file_transfer(uri):\n    scheme = uri.split('://')[0]\n    if scheme == 'ftp':\n        ftp = FTP()\n        ftp.connect(uri.split('/')[2])\n        yield ftp\n        ftp.quit()\n    elif scheme == 'sftp':\n        ssh_client = SSHClient()\n        ssh_client.set_missing_host_key_policy(AutoAddPolicy())\n        ssh_client.connect(uri.split('@')[1].split(':')[0], username=uri.split('@')[0].split('//')[-1])\n        sftp = SFTPClient.from_transport(ssh_client.get_transport())\n        yield sftp\n        ssh_client.close()\n    elif scheme == 'http' or scheme == 'https':\n        response = requests.get(uri)\n        with open('downloaded_file', 'wb') as file:\n            file.write(response.content)\n        yield None  # No direct upload, just download in this simple example\n    elif scheme == 'file':  # Local files\n        path = uri.split('://')[1]\n        yield open(path, 'r+')\n    else:\n        raise ValueError(f"Unsupported scheme: {scheme}")\n\n# Example usage:\nwith open_file_transfer('ftp://username:password@ftp.example.com/file.txt') as ftp:\n    if ftp:\n        ftp.retrlines('LIST')\n\nwith open_file_transfer('http://example.com/file.txt'):\n    print("File downloaded via HTTP")\n\nwith open_file_transfer('file:///path/to/local/file.txt') as local_file:\n    data = local_file.read()