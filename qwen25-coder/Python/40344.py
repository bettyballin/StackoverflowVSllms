def optimal_stock_length(cut_sizes, demand_frequency, min_length=24):  # Assuming min_length is in inches (2 feet)\n    # Sort cut sizes by their frequency of demand in descending order\n    sorted_cuts = sorted(zip(demand_frequency.values(), demand_frequency.keys()), reverse=True)\n\n    max_combination = []\n    current_stock = 0\n\n    for freq, size in sorted_cuts:\n        if current_stock + size <= 240:  # Assuming we initially guess a stock length of 240 inches (20 feet)\n            current_stock += size\n            max_combination.append(size)\n        else:\n            break  # No more cuts can be added without exceeding the guessed stock length\n\n    optimal_length = sum(max_combination)\n\n    return max(optimal_length, min_length)  # Ensure the stock is at least the minimum required length\n\n# Example usage\ncut_sizes = ['48', '60', '72', '96']  # in inches\ndemand_frequency = {'48': 10, '60': 5, '72': 3, '96': 2}  # more frequent cuts should have a higher number\noptimal_length = optimal_stock_length(cut_sizes, demand_frequency)\nprint(f"Optimal stock length: {optimal_length / 12} feet")