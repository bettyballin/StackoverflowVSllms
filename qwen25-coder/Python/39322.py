def can_form_pile(piles, target_length, stick_counts):\n    # Check if we can form the piles based on stick counts\n    for pile in piles:\n        for stick_length in set(pile):\n            if pil e.count(stick_length) > stick_counts[stick_length]:\n                return False\n    return True\n\ndef backtrack(current_piles, target_length, remaining_sticks, max_piles, stick_lengths, stick_counts, best_solution):\n    if not remaining_sticks:\n        # All sticks used, check if this is a better solution\n        if len(current_piles) < len(best_solution):\n            best_solution[:] = current_piles[:]\n        return\n\n    if len(current_piles) >= max_piles:\n        return\n\n    current_length = sum(current_piles[-1]) if current_piles else 0\n\n    for stick in stick_lengths:\n        if stick_counts[stick] == 0:\n            continue\n\n        if current_length + stick > target_length:\n            continue\n\n        # Add to the last pile or create a new pile\n        if current_length + stick == target_length:\n            backtrack(current_piles + [[stick]], target_length, remaining_sticks - 1, max_piles, stick_lengths, {s: c - (s == stick) for s, c in stick_counts.items()}, best_solution)\n        else:\n            new_last_pile = current_piles[-1] + [stick]\n            backtrack(current_piles[:-1] + [new_last_pile], target_length, remaining_sticks - 1, max_piles, stick_lengths, {s: c - (s == stick) for s, c in stick_counts.items()}, best_solution)\n\ndef solve(stick_lengths, counts_per_length, number_of_piles):\n    total_sticks = sum(counts_per_length.values())\n    max_sum_of_sticks = 1000\n    best_solution = []\n    \n    # Try all possible target lengths within the sum of sticks range\n    for target_length in range(1, (total_sticks * max(stick_lengths)) + 1):\n        backtrack([], target_length, total_sticks, number_of_piles, stick_lengths, counts_per_length.copy(), best_solution)\n        if best_solution:\n            break\n    \n    return best_solution\n\n# Example usage\nstick_lengths = [4, 5, 7, 11]\ncounts_per_length = {4: 3, 5: 3, 7: 1, 11: 1}\nnumber_of_piles = 4\nsolution = solve(stick_lengths, counts_per_length, number_of_piles)\nprint(solution)