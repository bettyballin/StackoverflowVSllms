function isValidMove(x, y, previousX, previousY):\n    # Check if (x, y) is within grid bounds\n    if x < 0 or y < 0 or x >= 4 or y >= 4:\n        return false\n    \n    # Check if (x, y) is adjacent to the previous position\n    if not ((abs(x - previousX) == 1 and abs(y - previousY) == 0) or \n            (abs(x - previousX) == 0 and abs(y - previousY) == 1)):\n        return false\n    \n    return true\n\nfunction findWord(grid, word, x, y, currentLength, visited):\n    if currentLength == length(word):\n        return true // Word is found\n    \n    # Mark the cell as visited\n    visited[x][y] = true\n    \n    // Explore all adjacent cells (up, down, left, right)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    for each direction in directions:\n        newX = x + direction[0]\n        newY = y + direction[1]\n        \n        if isValidMove(newX, newY, x, y) and grid[newX][newY] == word[currentLength] and not visited[newX][newY]:\n            if findWord(grid, word, newX, newY, currentLength + 1, visited):\n                return true\n    \n    // Backtrack: unmark the cell as visited\n    visited[x][y] = false\n    return false\n\nfunction canFormWord(grid, word):\n    for each x from 0 to 3:\n        for each y from 0 to 3:\n            if grid[x][y] == word[0]:\n                // Initialize a visited matrix with all values set to False\n                visited = array of 4x4 initialized with False\n                if findWord(grid, word, x, y, 1, visited):\n                    return true\n    return false