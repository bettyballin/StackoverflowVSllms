from ctypes import *\nfrom ctypes.wintypes import DWORD\n\nLocalFree = windll.kernel32.LocalFree\nmemcpy = cdll.msvcrt.memcpy\nCryptProtectData = windll.crypt32.CryptProtectData\nCryptUnprotectData = windll.crypt32.CryptUnprotectData\nCRYPTPROTECT_UI_FORBIDDEN = 0x01\n\nclass DATA_BLOB(Structure):\n    _fields_ = [("cbData", DWORD), ("pbData", POINTER(c_char))]\n\ndef getData(blobOut):\n    cbData = int(blobOut.cbData)\n    pbData = blobOut.pbData\n    buffer = c_buffer(cbData)\n    memcpy(buffer, pbData, cbData)\n    LocalFree(pbData)\n    return buffer.raw\n\ndef Win32CryptProtectData(plainText, entropy):\n    bufferIn = c_buffer(plainText.encode('utf-8'))\n    blobIn = DATA_BLOB(len(plainText), cast(bufferIn, POINTER(c_char)))\n    bufferEntropy = c_buffer(entropy.encode('utf-8'))\n    blobEntropy = DATA_BLOB(len(entropy), cast(bufferEntropy, POINTER(c_char)))\n    blobOut = DATA_BLOB()\n    result = CryptProtectData(byref(blobIn), u"python_data", byref(blobEntropy),\n                               None, None, CRYPTPROTECT_UI_FORBIDDEN, byref(blobOut))\n    if not result:\n        error_code = GetLastError()\n        raise Exception(f"CryptProtectData failed with error code: {error_code}")\n    return getData(blobOut)\n\ndef Win32CryptUnprotectData(cipherText, entropy):\n    bufferIn = c_buffer(cipherText)\n    blobIn = DATA_BLOB(len(cipherText), cast(bufferIn, POINTER(c_char)))\n    bufferEntropy = c_buffer(entropy.encode('utf-8'))\n    blobEntropy = DATA_BLOB(len(entropy), cast(bufferEntropy, POINTER(c_char)))\n    blobOut = DATA_BLOB()\n    result = CryptUnprotectData(byref(blobIn), None, byref(blobEntropy), None, None,\n                                  CRYPTPROTECT_UI_FORBIDDEN, byref(blobOut))\n    if not result:\n        error_code = GetLastError()\n        raise Exception(f"CryptUnprotectData failed with error code: {error_code}")\n    return getData(blobOut)\n\ndef cryptData(text, entropy="cl;ad13 \0al;323kjd #(adl;k$#ajsd"):\n    return Win32CryptProtectData(text, entropy)\n\ndef decryptData(cipher_text, entropy="cl;ad13 \0al;323kjd #(adl;k$#ajsd"):\n    return Win32CryptUnprotectData(cipher_text, entropy).decode('utf-8')