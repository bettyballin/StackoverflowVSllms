import cv2\nimport numpy as np\n\ndef reduce_red_eyes(image_path):\n    # Read the image\n    img = cv2.imread(image_path)\n    if img is None:\n        raise ValueError("Input image not found")\n    \n    # Convert to YCrCb color space\n    ycrcb_img = cv2.cvtColor(img, cv2.COLOR_BGR2YCR_CB)\n\n    # Define a mask for detecting red eyes\n    min_YCrCb = np.array([0,135,85],np.uint8)\n    max_YCrCb = np.array([255,180,135],np.uint8)\n    \n    # Create a binary image where the red color is isolated\n    mask = cv2.inRange(ycrcb_img,min_YCrCb,max_YCrCb)\n\n    # Reduce this area in the original image using Gaussian blur to make it more natural\n    kernel_size = (19, 19)\n    img_bgr_blurred = cv2.GaussianBlur(img,(kernel_size),0)\n\n    # Blend the blurred image and the original image using mask\n    img_final = cv2.addWeighted(src1=img, alpha=1.0, src2=img_bgr_blurred , beta=0.5, gamma=0, dst=None, mask=~mask)\n    \n    return img_final\n\n# Example usage:\n# result_image = reduce_red_eyes("path_to_your_image.jpg")\n# cv2.imshow("Red Eye Reduced", result_image)\n# cv2.waitKey(0)