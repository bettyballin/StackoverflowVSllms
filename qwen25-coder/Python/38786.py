import cx_Oracle\n\n# Function to get the CREATE TABLE statement from a database\ndef get_create_table_statement(connection, table_name):\n    cursor = connection.cursor()\n    cursor.execute(f"SELECT DBMS_METADATA.GET_DDL('TABLE', '{table_name}') FROM dual")\n    result = cursor.fetchone()[0].read()\n    return str(result)\n\n# Function to execute SQL on a connection\ndef execute_sql(connection, sql):\n    cursor = connection.cursor()\n    cursor.execute(sql)\n    connection.commit()\n\n# Database connection info\ndsn_tns_a = cx_Oracle.makedsn('hostA', 'portA', service_name='serviceA')\ndsn_tns_b = cx_Oracle.makedsn('hostB', 'portB', service_name='serviceB')\n\nusername = "your_username"\npassword = "your_password"\n\n# Table name\ntable_name = "FOO"\n\n# Connect to Database A and get the CREATE TABLE statement\nwith cx_Oracle.connect(user=username, password=password, dsn=dsn_tns_a) as conn_a:\n    create_table_sql = get_create_table_statement(conn_a, table_name)\n\n# Modify the SQL if necessary (e.g., remove constraints that reference tables not in Database B)\n# For simplicity, we assume no modifications are needed for this example.\n\n# Connect to Database B and execute the CREATE TABLE statement\nwith cx_Oracle.connect(user=username, password=password, dsn=dsn_tns_b) as conn_b:\n    execute_sql(conn_b, create_table_sql)