import numpy as np\nimport wave\n\ndef detect_door_slam(audio_file_path, sample_rate=4000, threshold_factor=3):\n    # Read audio file\n    with wave.open(audio_file_path, 'rb') as wav:\n        frames = wav.readframes(-1)\n        audio_data = np.frombuffer(frames, dtype=np.int16)\n\n    # Calculate RMS of the entire signal to determine steady state level\n    total_rms = np.sqrt(np.mean(audio_data**2))\n    threshold = total_rms * threshold_factor\n\n    # Iterate through the audio data in chunks and detect spikes\n    chunk_size = sample_rate // 10  # Check every 100 ms\n    for i in range(0, len(audio_data), chunk_size):\n        chunk = audio_data[i:i+chunk_size]\n        window_rms = np.sqrt(np.mean(chunk**2))\n        if window_rms > threshold:\n            print(f"Door slam detected at time {i / sample_rate:.1f} seconds")\n\n# Example usage\ndetect_door_slam('van_driver_door_closing.wav')