class Node:\n    def __init__(self, key):\n        self.key = key\n        self.left = None\n        self.right = None\n        self.parent = None\n        # Red by default\n        self.color = "RED"\n\nclass RedBlackTree:\n    def __init__(self):\n        self.TNULL = Node(0)\n        self.TNULL.color = "BLACK"\n        self.root = self.TNULL\n\n    def left_rotate(self, x):\n        y = x.right\n        x.right = y.left\n        if y.left != self.TNULL:\n            y.left.parent = x\n\n        y.parent = x.parent\n        if x.parent == None:\n            self.root = y\n        elif x == x.parent.left:\n            x.parent.left = y\n        else:\n            x.parent.right = y\n        y.left = x\n        x.parent = y\n\n    def right_rotate(self, x):\n        y = x.left\n        x.left = y.right\n        if y.right != self.TNULL:\n            y.right.parent = x\n\n        y.parent = x.parent\n        if x.parent == None:\n            self.root = y\n        elif x == x.parent.right:\n            x.parent.right = y\n        else:\n            x.parent.left = y\n        y.right = x\n        x.parent = y\n\n# Additional methods like insertion, deletion, and balancing operations follow.