def construct_ssa(cfg):\n    ssa_indices = {}  # Maps variables to their current SSA index per basic block\n    phi_functions = {}  # Maps blocks to their φ functions\n\n    for block in cfg:\n        ssa_indices[block] = {}\n\n    def visit(block, definitions):\n        # Update SSA indices based on incoming definitions\n        ssa_indices[block] = definitions.copy()\n\n        for instruction in block.instructions:\n            if is_assignment(instruction):\n                variable = get_variable(instruction)\n                current_index = ssa_indices[block][variable]\n                new_index = f"{variable}_{current_index + 1}"\n                ssa_indices[block][variable] = new_index\n                # Update the definition with the new SSA index\n                set_ssa_index(instruction, new_index)\n\n        # Traverse successors and handle φ functions at merge points\n        for successor in block.successors:\n            new_definitions = ssa_indices[block].copy()\n            if len(successor.predecessors) > 1 and not all(predecessor in ssa_indices for predecessor in successor.predecessors):\n                phi_functions[successor] = {}\n                # Insert φ functions\n                for variable in set(ssa_indices[p][variable] for p in successor.predecessors for variable in ssa_indices[p]):\n                    unique_indices = [ssa_indices[p].get(variable, None) for p in successor.predecessors]\n                    new_index = f"{variable}_{max(int(i.split('_')[1]) if i else 0 for i in unique_indices) + 1}"\n                    phi_functions[successor][variable] = new_definition(new_index)\n                    set_phi_function(successor, variable, new_index)\n\n            visit(successor, new_definitions)\n\n    # Start from the entry block\n    entry_block = cfg.entry_block\n    initial_definitions = {}\n    visit(entry_block, initial_definitions)\n\n    return ssa_indices, phi_functions\n\n# Example usage:\n# ssa_form, phi_func_map = construct_ssa(control_flow_graph)