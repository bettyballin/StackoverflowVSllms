import socket\nimport asyncio\n\nasync def tail_and_send_file(file_path, send_queue):\n    while True:\n        try:\n            with open(file_path, 'r') as file:\n                while True:\n                    line = file.readline()\n                    if not line:\n                        await asyncio.sleep(1)  # Sleep briefly to avoid CPU load\n                        continue\n                    await send_queue.put(line.strip())\n        except FileNotFoundError:\n            await asyncio.sleep(5)  # Server may have rotated logs\n\nasync def forward_logs(send_queues):\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind(('0.0.0.0', 12345))\n    server_socket.listen()\n    print("Listening for connections...")\n    \n    while True:\n        client_socket, addr = await asyncio.get_event_loop().sock_accept(server_socket)\n        print(f"Connection from {addr}")\n        for queue in send_queues:\n            asyncio.create_task(handle_client(queue, client_socket))\n\nasync def handle_client(send_queue, client_socket):\n    try:\n        writer = client_socket.makefile('wb')\n        while True:\n            data = await send_queue.get()\n            writer.write((data + '\n').encode())\n            await asyncio.sleep(0)  # Allow other tasks to run\n    except Exception as e:\n        print(f"Error handling client: {e}")\n    finally:\n        client_socket.close()\n\nasync def main():\n    send_queues = []\n    file_paths = ['/path/to/log1', '/path/to/log2.xml']  # Add your log paths here\n    \n    for _ in range(len(file_paths)):\n        send_queue = asyncio.Queue()\n        send_queues.append(send_queue)\n    \n    asyncio.create_task(forward_logs(send_queues))\n    \n    for i, path in enumerate(file_paths):\n        if path.endswith('.xml'):\n            # Use XML parser specific task or modify the existing one to handle XML\n            pass\n        else:\n            asyncio.create_task(tail_and_send_file(path, send_queues[i]))\n        \n    await asyncio.gather(*[task for task in asyncio.all_tasks() if task is not asyncio.current_task()])\n\nif __name__ == "__main__":\n    asyncio.run(main())