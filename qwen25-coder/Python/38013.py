def first_fit_decreasing(file_sizes, n_bins):\n    # Sort files in descending order of their sizes\n    file_sizes.sort(reverse=True)\n    \n    # Initialize bins\n    bins = [[] for _ in range(n_bins)]\n    bin_sums = [0] * n_bins\n    \n    for size in file_sizes:\n        placed = False\n        for i in range(len(bins)):\n            if bin_sums[i] + size <= optimal_bin_size and not placed:\n                bins[i].append(size)\n                bin_sums[i] += size\n                placed = True\n        if not placed:  # If no suitable bin was found, add a new one (though this won't happen with n_bins properly defined)\n            raise Exception("Not enough bins! This should not occur with correct parameters.")\n    \n    return bins\n\n# Example usage:\nfile_sizes = [4, 8, 5, 3, 2, 10]\nn_bins = 3\nbins = first_fit_decreasing(file_sizes, n_bins)\nfor i, b in enumerate(bins):\n    print(f"Bin {i+1}: {b}, Total size: {sum(b)}")