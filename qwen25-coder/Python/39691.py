from langdetect import detect, DetectorFactory\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nimport pandas as pd\n\n# Initialize language detector to deterministic mode\nDetectorFactory.seed = 0\n\ndef is_known_language(text, known_language='en'):\n    try:\n        return detect(text) == known_language\n    except Exception:\n        return False\n\n# Example data: replace this with your own dataset\ndata = {\n    'feedback': [\n        "I love your service!",\n        "This is not working.",\n        "jfvgasdjkfahs kdlfjhasdf",\n        "Bonjour, comment puis-je vous aider aujourd'hui?",\n        "qazwsxedcrfvtygbnhmjuiklop"\n    ],\n    'label': [1, 1, 0, 0, 0]  # 1 for meaningful, 0 for gibberish\n}\n\ndf = pd.DataFrame(data)\n\n# Filter by language first\nfiltered_df = df[df['feedback'].apply(is_known_language)]\n\n# Prepare data for training\nX_train = filtered_df['feedback']\ny_train = filtered_df['label']\n\n# Vectorize text\nvectorizer = TfidfVectorizer()\nX_train_vectorized = vectorizer.fit_transform(X_train)\n\n# Train a simple model\nmodel = MultinomialNB()\nmodel.fit(X_train_vectorized, y_train)\n\ndef is_meaningful(feedback):\n    if not is_known_language(feedback):\n        return False\n    feedback_vectorized = vectorizer.transform([feedback])\n    return model.predict(feedback_vectorized)[0] == 1\n\n# Example usage\nnew_feedbacks = ["This app rocks!", "asldkjf aslkdf", "Me encanta esto!"]\nfor feedback in new_feedbacks:\n    print(f"Feedback: '{feedback}' is meaningful? {is_meaningful(feedback)}")