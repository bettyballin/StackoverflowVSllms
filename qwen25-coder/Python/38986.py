from PIL import Image\n\ndef encode_image(image_path, secret_text):\n    # Open an image file\n    img = Image.open(image_path)\n    # Convert the image to RGB if it's not already\n    img = img.convert("RGB")\n    width, height = img.size\n\n    # Ensure there are enough pixels in the image to store the text\n    max_bytes = (width * height) * 3 // 8\n    if len(secret_text) > max_bytes:\n        raise ValueError("Error: Image not large enough to hold this much data")\n\n    # Convert text to binary\n    secret_text_binary = ''.join(format(ord(char), '08b') for char in secret_text)\n\n    bytes_in_data = 0\n    pixel_index = 0\n\n    # Encode the data in the image\n    for byte in secret_text_binary:\n        red, green, blue = img.getpixel((pixel_index % width, pixel_index // width))\n        \n        if bytes_in_data < len(secret_text_binary):\n            red = (red & 254) | int(byte)\n            bytes_in_data += 1\n\n        elif bytes_in_data == len(secret_text_binary):\n            break\n        \n        img.putpixel((pixel_index % width, pixel_index // width), (red, green, blue))\n        pixel_index += 1\n    \n    # Save the encoded image\n    img.save("encoded_image.png")\n\ndef decode_image(encoded_image_path):\n    img = Image.open(encoded_image_path)\n    binary_secret_text = ''\n    \n    for each_pixel in iter(img.getdata()):\n        red, green, blue = each_pixel\n        \n        binary_secret_text += str(red & 1)\n\n        if len(binary_secret_text) >= 8:\n            byte = int(binary_secret_text[:8], 2)\n            if byte == 0: break\n            binary_secret_text = binary_secret_text[8:]\n            \n    return ''.join(chr(int(binary_secret_text[i : i + 8], 2)) for i in range(0, len(binary_secret_text), 8))\n\n# Example usage:\n# encode_image("example.jpg", "Hidden Message")\n# print(decode_image("encoded_image.png"))