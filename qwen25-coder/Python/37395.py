import xmlrpc.client\n\nclass RPCFunctionCaller:\n    def __init__(self, rpc_server_url, menuText, RPC_params, RPC_call):\n        # Create an XML-RPC server proxy\n        self.rpc = xmlrpc.client.ServerProxy(rpc_server_url)\n        self.menuText = menuText\n        self.RPC_params = RPC_params\n        self.RPC_call = RPC_call\n\n    def execute_rpc(self):\n        # Dynamically call the method `serve.<function_name>` with params\n        try:\n            # Use __getattr__ to dynamically get the method from serve namespace\n            remote_method = getattr(self.rpc.serve, self.RPC_call)\n            # Call the method with parameters\n            result = remote_method(*self.RPC_params)\n            return result\n        except xmlrpc.client.Fault as error:\n            print(f"XML-RPC Fault: {error}")\n        except xmlrpc.client.ProtocolError as error:\n            print(f"XML-RPC Protocol Error: {error}")\n        except AttributeError:\n            print("Method not found on the RPC server.")\n        except Exception as e:\n            print(f"An unexpected error occurred: {e}")\n\n# Example usage\nif __name__ == "__main__":\n    rpc_url = "http://example.com/RPC2"\n    caller = RPCFunctionCaller(rpc_url, "Sample Menu", [1, 2, 3], "add")\n    result = caller.execute_rpc()\n    print(f"Result from RPC call: {result}")