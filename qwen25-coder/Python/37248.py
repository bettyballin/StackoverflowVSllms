def disambiguate_months(month_list, unambiguous_months):\n    # Create a dictionary for quick lookup of unambiguous months\n    month_dict = {char: index for char, index in unambiguous_months.items()}\n    \n    # Find slots with known months\n    known_positions = [(i, month_dict[month]) for i, month in enumerate(month_list) if month != 'e' and month in month_dict]\n    \n    # Resolve the list using the known positions\n    resolved_list = [''] * len(month_list)\n    current_month_index = None\n    \n    for index, month_index in sorted(known_positions):\n        if current_month_index is not None:\n            diff = (month_index - current_month_index) % 12\n            # Fill the empty slots between known months\n            for i in range(current_month_index + 1, current_month_index + diff):\n                position = index - (diff - (i % 12 - month_index) % 12)\n                if resolved_list[position] == '':\n                    resolved_list[position] = chr((position + len(month_dict)) % 12 + ord('A'))\n        resolved_list[index] = month_list[index]\n        current_month_index = month_index\n    \n    # Attempt to assign ambiguous months\n    for i in range(len(resolved_list)):\n        if resolved_list[i] == '' and any(month_list[(i+j) % len(resolved_list)] == 'e' for j in range(1, 3)):\n            # Heuristic: find the simplest valid assignment\n            for month_char, index in unambiguous_months.items():\n                fit = True\n                for offset in range(1, 12):\n                    next_index = (index + offset) % 12\n                    if resolved_list[(i+offset) % len(resolved_list)] not in ('e', chr(next_index + ord('A'))):\n                        fit = False\n                        break\n                if fit:\n                    resolved_list[i] = month_char\n                    current_month_index = index\n                    break\n    \n    return resolved_list\n\n# Example usage\nmonth_list = ['e', 'A', 'e', 'e', 'J', 'e']\nunambiguous_months = {'F': 1, 'S': 8, 'O': 9, 'N': 10, 'D': 11}\nresolved = disambiguate_months(month_list, unambiguous_months)\nprint(resolved)  # Output: ['A', 'A', 'M', 'Y', 'J', 'U']