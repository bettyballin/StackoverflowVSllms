import math\n\n# Sample data: zip_code -> (latitude, longitude)\nzip_data = {\n    '07024': (41.3863, -74.1958),\n    # Add more zip codes and their coordinates here\n}\n\ndef haversine(lat1, lon1, lat2, lon2):\n    """Calculate the great-circle distance between two points on the Earth."""\n    R = 3958.8  # Earth radius in miles\n    phi1, phi2 = math.radians(lat1), math.radians(lat2)\n    dphi       = math.radians(lat2 - lat1)\n    dlambda    = math.radians(lon2 - lon1)\n\n    a = math.sin(dphi / 2)**2 + \\n        math.cos(phi1) * math.cos(phi2) * math.sin(dlambda / 2)**2\n\n    return 2 * R * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\ndef getNearest(zipCode, miles):\n    if zipCode not in zip_data:\n        raise ValueError("Zip code not found")\n    \n    lat1, lon1 = zip_data[zipCode]\n    nearby_zip_codes = []\n\n    for zc, (lat2, lon2) in zip_data.items():\n        distance = haversine(lat1, lon1, lat2, lon2)\n        if distance <= miles:\n            nearby_zip_codes.append((zc, distance))\n    \n    return nearby_zip_codes\n\n# Example usage:\nzipCode = '07024'\nradius_miles = 50\nnearby_zips = getNearest(zipCode, radius_miles)\nprint(f"Zip codes within {radius_miles} miles of {zipCode}: {nearby_zips}")