from ctypes import *\n\n# Load the DLL\nmaury = WinDLL('MLibTuners')\n\n# Define the function argument types and return type\nmaury.add_tuner.argtypes = [c_short, c_char_p, c_short, c_short, c_short,\n                            POINTER(c_short), POINTER(c_long * 2),  # Assuming max_range needs two longs\n                            POINTER(c_double), POINTER(c_double),\n                            POINTER(c_double), c_char_p]\nmaury.add_tuner.restype = c_short\n\n# Initialize all the necessary parameters\ntuner_number = c_short(0)\nmodel = create_string_buffer(b'MT982EU')  # Ensure it's bytes for C compatibility on Python 3+\nserial_number = c_short(your_serial_number_here)  # Replace with your actual serial number\nctlr_num = c_short(0)\nctlr_port = c_short(1)\n\n# No of motors is an output, so initialize the short pointer\nno_of_motors = pointer(c_short())\nno_of_motors.contents.value = 0\n\n# max_range is expected to be array of longs, create one with length 2 if needed (adjust as per your requirement)\nmax_range = (c_long * 2)()\nmax_range[0], max_range[1] = c_long(0), c_long(0)\n\n# Frequency limits are output parameters\nfmin, fmax, fcrossover = pointer(c_double()), pointer(c_double()), pointer(c_double())\n\n# Error string buffer for error messages\nerror_string = create_string_buffer(80)\n\n# Call the function\nresult = maury.add_tuner(tuner_number, model, serial_number, ctlr_num,\n                        ctlr_port, no_of_motors, max_range,\n                        fmin, fmax, fcrossover, error_string)\n\nprint(f"Function call result: {result}")\nif result != 0:\n    print(f"Error message: {error_string.value.decode('utf-8')}")