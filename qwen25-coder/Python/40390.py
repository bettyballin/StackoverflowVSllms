class DynamicObject:\n    def __init__(self):\n        self._properties = {}\n\n    def add_property(self, name, value):\n        self._properties[name] = value\n\n    def get_property(self, name):\n        return self._properties.get(name)\n\n    def __getattr__(self, name):\n        try:\n            return self._properties[name]\n        except KeyError:\n            raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")\n\n    def __setattr__(self, name, value):\n        if name.startswith('_'):\n            super().__setattr__(name, value)\n        else:\n            self._properties[name] = value\n\n# Usage\nobj = DynamicObject()\nobj.add_property('dynamic_attr', 'value')\nprint(obj.dynamic_attr)  # Output: value