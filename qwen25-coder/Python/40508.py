from scapy.all import IP, TCP, rdpcap\n\ndef analyze_tcp_congestion_control(pcap_file):\n    packets = rdpcap(pcap_file)\n    cwnd_changes = []\n    time_deltas = []\n\n    last_ack = None\n    sent_packets = {}\n\n    for packet in packets:\n        if IP in packet and TCP in packet:\n            ip_layer = packet[IP]\n            tcp_layer = packet[TCP]\n\n            # Track the timing of sequence numbers being acknowledged\n            if 'A' in str(tcp_layer.flags):\n                ack_seq = tcp_layer.ack\n                if last_ack is not None:\n                    time_diff = (packet.time - last_ack)\n                    time_deltas.append(time_diff)\n                last_ack = packet.time\n\n            # Track sent packets to calculate cwnd changes\n            if 'S' in str(tcp_layer.flags) or 'P' in str(tcp_layer.flags):\n                seq_num = tcp_layer.seq\n                sent_packets[seq_num] = packet.time\n\n    # Example analysis (simplified): Look for time deltas that suggest linear growth\n    for i, td in enumerate(time_deltas):\n        if i > 0 and abs(td - time_deltas[i-1]) < 0.2:\n            print(f"Potential linear increase pattern on packet index {i}: {td}s")\n        else:\n            print(f"Non-linear timing detected: {td}s")\n\n    # Further analysis would require more sophisticated pattern matching\n\n# Usage\nanalyze_tcp_congestion_control('captured_session.pcap')