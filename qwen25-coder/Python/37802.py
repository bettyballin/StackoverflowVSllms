import random\n\ndef transmit_message(message, num_replicas):\n    # Transmit each bit multiple times\n    noisy_channel_output = []\n    flipped_rate = 0.5\n    \n    for bit in message:\n        # Send the same bit `num_replicas` times through a noisy channel\n        noisy_bits = []\n        for _ in range(num_replicas):\n            # Randomly flip the bit with 50% probability\n            if random.random() < flipped_rate:\n                noisy_bit = 1 - int(bit)  # Flip bit\n            else:\n                noisy_bit = int(bit)\n            noisy_bits.append(noisy_bit)\n        noisy_channel_output.append(noisy_bits)\n    return noisy_channel_output\n\ndef decode_received(transmissions):\n    # Use majority voting to determine the original bits\n    recovered_message = []\n    for transmitted_bits in transmissions:\n        if sum(transmitted_bits) > len(transmitted_bits) / 2:\n            recovered_message.append(1)\n        else:\n            recovered_message.append(0)\n    return recovered_message\n\n# Example usage\noriginal_message = [0, 1, 1, 0, 1]  # Original message\nnum_replicas = 15  # Number of times each bit is transmitted\ntransmissions = transmit_message(original_message, num_replicas)\nrecovered_message = decode_received(transmissions)\n\nprint("Original Message:", original_message)\nprint("Noisy Transmissions:", transmissions)\nprint("Recovered Message:", recovered_message)