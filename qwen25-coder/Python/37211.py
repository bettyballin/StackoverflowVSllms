def optimal_string_alignment_distance(s1, s2):\n    if len(s1) < len(s2):\n        return optimal_string_alignment_distance(s2, s1)\n\n    # Initialize distance matrix\n    d = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n\n    for i in range(len(s1) + 1):\n        d[i][0] = i\n    for j in range(len(s2) + 1):\n        d[0][j] = j\n\n    # Compute distances\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            cost = 0 if s1[i - 1] == s2[j - 1] else 1\n            d[i][j] = min(d[i - 1][j] + 1,    # Deletion\n                          d[i][j - 1] + 1,    # Insertion\n                          d[i - 1][j - 1] + cost)  # Substitution\n\n            if i > 1 and j > 1 and s1[i - 1] == s2[j - 2] and s1[i - 2] == s2[j - 1]:\n                d[i][j] = min(d[i][j], d[i - 2][j - 2] + cost)  # Transposition\n\n    return d[len(s1)][len(s2)]\n\n# Example usage\ns1 = "intention"\ns2 = "execution"\ndistance = optimal_string_alignment_distance(s1, s2)\nprint(f"Optimal String Alignment Distance between '{s1}' and '{s2}': {distance}")