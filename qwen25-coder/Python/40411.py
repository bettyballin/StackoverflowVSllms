from datetime import datetime, timedelta\nimport hashlib\n\n# In-memory storage for simplicity; consider using a persistent database in production\nfailed_attempts = {}\nblocked_ips = {}\naccount_lockout_duration = timedelta(hours=1)\nmax_failed_attempts = 5\n\ndef check_login(user_id, password, ip):\n    if ip in blocked_ips and blocked_ips[ip] > datetime.now():\n        print("IP is temporarily blocked.")\n        return False\n    \n    expected_password_hash = get_password_hash_from_db(user_id)  # Assume this function interacts with your database\n    password_hash = hashlib.sha256(password.encode()).hexdigest()\n    \n    if failed_attempts.get(user_id, {}).get('failed_count', 0) >= max_failed_attempts:\n        last_attempt_time = failed_attempts[user_id]['last_attempt']\n        if datetime.now() - last_attempt_time < account_lockout_duration:\n            print("Account is temporarily locked.")\n            return False\n        else:\n            del failed_attempts[user_id]\n    \n    if password_hash == expected_password_hash:\n        # Successful login reset failed attempts count and Unblock IP if needed\n        if user_id in failed_attempts:\n            del failed_attempts[user_id]\n        unblock_ip(ip)\n        print("Login successful.")\n        return True\n    else:\n        record_failed_attempt(user_id, ip)\n        print("Invalid credentials. Please try again.")\n        return False\n\ndef record_failed_attempt(user_id, ip):\n    attempts = failed_attempts.get(user_id, {'failed_count': 0, 'last_ip': None})\n    if attempts['failed_count'] >= max_failed_attempts:\n        # Implement CAPTCHA or other challenge here\n        print("Trigger CAPTCHA or block IP.")\n    \n    if ip != attempts['last_ip']:\n        attempts['last_ip'] = ip\n        attempts['ip_attempt_count'] = 1\n    else:\n        attempts['ip_attempt_count'] += 1\n    \n    if attempts['ip_attempt_count'] >= max_failed_attempts:\n        block_ip(ip)\n    \n    if datetime.now() - attempts['last_attempt'] > timedelta(minutes=5):\n        # Reset after a short period to prevent locking out due to intermittent failures\n        attempts = {'failed_count': 0, 'last_ip': ip}\n    \n    attempts['failed_count'] += 1\n    attempts['last_attempt'] = datetime.now()\n    failed_attempts[user_id] = attempts\n\ndef block_ip(ip):\n    blocked_ips[ip] = datetime.now() + timedelta(hours=2)  # Block IP for 2 hours or more depending on policy\n\ndef unblock_ip(ip):\n    if ip in blocked_ips:\n        del blocked_ips[ip]\n\ndef get_password_hash_from_db(user_id):\n    # Mock function to simulate database interaction\n    return "hashed_password_example"  # Replace with actual retrieval from DB