class Formation:\n    def __init__(self, logger, name, tightness):\n        self.logger = logger\n        self.name = name\n        self.tightness = tightness\n\nclass DataManager:\n    _instance = None\n\n    @staticmethod\n    def get_instance(logger=None):\n        if DataManager._instance is None:\n            DataManager._instance = DataManager(logger)\n        return DataManager._instance\n\n    def __init__(self, logger):\n        if DataManager._instance is not None:\n            raise Exception("This class is a singleton!")\n        self.logger = logger\n        self.formations = []\n        self.formations_hash = {}\n        self.create_formations()\n\n    def create_formations(self):\n        # Standard close quarter formation\n        tight_formation = Formation(self.logger, 'Tight', tightness=1)\n        self.formations.append(tight_formation)\n        self.formations_hash['Tight'] = tight_formation\n\n        # Standard ranged combat formation\n        loose_formation = Formation(self.logger, 'Loose', tightness=0.5)\n        self.formations.append(loose_formation)\n        self.formations_hash['Loose'] = loose_formation\n\n        # Skirmish formation\n        skirmish_formation = Formation(self.logger, 'Skirmish', tightness=0.1)\n        self.formations.append(skirmish_formation)\n        self.formations_hash['Skirmish'] = skirmish_formation\n        \n        # Arrowhead formation\n        arrowhead_formation = Formation(self.logger, 'Arrowhead', tightness=1)\n        self.formations.append(arrowhead_formation)\n        self.formations_hash['Arrowhead'] = arrowhead_formation\n\n    def get_formation(self, search_for):\n        return self.formations_hash.get(search_for)\n\n# Usage\nif __name__ == "__main__":\n    data_manager = DataManager(logger=None)  # Replace None with your logger instance\n    formation = data_manager.get_formation('Tight')