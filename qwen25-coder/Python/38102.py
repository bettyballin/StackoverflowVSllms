# Sample data mimicking the MySQL query output\ndata = [\n    "AAPL;hardware;$279,296",\n    "AAPL;software;$293,620",\n    "AAPL;__xx__;$572,916",\n    "MSFT;hardware;$306,045",\n    "MSFT;software;$308,097",\n    "MSFT;__xx__;$614,142",\n    "__xx__;__xx__;$1,187,058"\n]\n\n# Initialize a dictionary to hold our tree\ntree = {}\n\n# Process each line of data\nfor line in data:\n    company, division, amount = line.split(';')\n    if company not in tree:\n        tree[company] = {}\n    \n    tree[company][division] = amount\n\n# Function to print the tree structure\ndef print_tree_structure(tree):\n    grand_total = 0\n    for company, divisions in tree.items():\n        # Skip the total row for the entire dataset initially\n        if company == "__xx__":\n            continue\n        \n        print(company)\n        company_total = 0\n        for division, amount in divisions.items():\n            if division == "__xx__":\n                continue\n            print(f"    {division};{amount}")\n            company_total += int(amount.replace('$', '').replace(',', ''))\n        \n        # Print the total for each company\n        print(f"        Total; ${company_total:,.0f}")\n        grand_total += company_total\n    \n    # At last, print the grand total row\n    print("Total")\n    print(f"            ${grand_total:,.0f}")\n\n# Print the hierarchical structure\nprint_tree_structure(tree)