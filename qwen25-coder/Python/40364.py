from unittest.mock import Mock\n\nclass ExternalServiceMock:\n    def __init__(self):\n        # Define common responses here\n        self.responses = {\n            'message1': {'status': 'success', 'data': 'expected data for message1'},\n            # Add more messages and their expected responses\n        }\n        # Define error scenarios\n        self.errors = {\n            'message2': ValueError("Specific error condition"),\n            # Map other potential error conditions to exceptions or responses\n        }\n\n    def send_message(self, message):\n        if message in self.errors:\n            raise self.errors[message]\n        elif message in self.responses:\n            return self.responses[message]\n        else:\n            raise NotImplementedError(f"Mock for '{message}' not implemented")\n\n# Usage in tests\ndef test_external_service(mock_service=ExternalServiceMock()):\n    mock_service.send_message('message1')  # should return expected data\n    try:\n        mock_service.send_message('message2')\n    except ValueError as e:\n        assert str(e) == "Specific error condition"