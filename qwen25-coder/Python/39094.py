import wx\n\n# Custom event type for BuildEvent\nEVT_BUILD_UPDATE = wx.NewEventType()\nEVT_BUILD_END = wx.NewEventType()\n\n# Custom Event Classes\nclass BuildEvent(wx.PyEvent):\n    def __init__(self, eventType, id, data=None):\n        super(BuildEvent, self).__init__()\n        self.SetEventType(eventType)\n        self.data = data\n\n# Subclassed Process with better event handling\nclass BuildProcess(wx.Process):\n    def __init__(self, parent, cmd):\n        wx.Process.__init__(self, parent)\n        print("Constructing a build process")\n        self.Redirect()\n        self.cmd = cmd\n        self.pid = None\n        self.parent = parent\n\n    def start(self):\n        print("Starting the process")\n        self.pid = wx.Execute(self.cmd, wx.EXEC_ASYNC, self)\n        print(f"Started with PID: {self.pid}")\n\n    def OnTerminate(self, pid, status):\n        print("Terminating")\n        # Post an event to indicate process termination\n        evt = BuildEvent(EVT_BUILD_END, pid)\n        self.parent.GetEventHandler().ProcessEvent(evt)\n\n    def GetOutputStream(self):\n        return wx.InputStream(self.Redirect())\n\n# Example usage with a frame and event handling setup\nclass MyFrame(wx.Frame):\n    def __init__(self, *args, **kwds):\n        super(MyFrame, self).__init__(*args, **kwds)\n        \n        # Bind custom events to handlers\n        self.Bind(EVT_BUILD_UPDATE, self.on_build_update)\n        self.Bind(EVT_BUILD_END, self.on_build_end)\n\n        # Initialize the process and start it\n        self.build_process = BuildProcess(self, "your_command_here")\n        self.build_process.start()\n\n    def on_build_update(self, event):\n        print("Build update received:")\n        print(event.data)\n\n    def on_build_end(self, event):\n        print(f"Build process terminated with PID: {event.GetEventType()}")\n\nif __name__ == "__main__":\n    app = wx.App(False)\n    frame = MyFrame(None)\n    frame.Show()\n    app.MainLoop()