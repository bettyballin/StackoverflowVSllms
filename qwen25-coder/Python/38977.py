import logging\n\n# Setting up basic configuration for logging\nlogging.basicConfig(level=logging.ERROR)\n\nclass CustomError(Exception):\n    """Custom exception class with an error message."""\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)\n\ndef perform_operation(data):\n    """\n    Perform a custom operation and handle exceptions.\n    \n    :param data: Data required for the operation.\n    :return: The result of the operation or an error code/msg.\n    """\n    try:\n        # Simulate some operation that could go wrong\n        if not isinstance(data, list):\n            raise ValueError("Data must be a list.")\n        \n        # Perform the operation (simplified example)\n        return sum(data)\n    \n    except Exception as e:\n        logging.error(f"Error in perform_operation: {e}", exc_info=True)\n        # Optionally re-raise a custom exception\n        raise CustomError(f"Failed to perform operation. Error: {str(e)}")\n\n# Example usage\ntry:\n    result = perform_operation("not_a_list")\nexcept CustomError as ce:\n    print(ce.message)  # Handle the error in the calling context, e.g., show a messagebox or notify the user