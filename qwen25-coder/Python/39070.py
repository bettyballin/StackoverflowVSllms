def get_session(db_name, verbose, test):\n    """Returns current DB session from SQLAlchemy pool.\n\n    >>> session = get_session('Mmusc20090126', False, True)\n    >>> isinstance(session, sqlalchemy.orm.session.Session)\n    True\n    """\n    import logging\n    from sqlalchemy import create_engine\n    from sqlalchemy.orm import sessionmaker\n\n    log_load = logging.getLogger(__name__)\n\n    if test:\n        engine = create_engine('sqlite:///:memory:', echo=verbose)\n        log_load.debug('DB in RAM.')\n    else:\n        engine = create_engine('sqlite:///' + 'DB/' + db_name + '.db', echo=verbose)\n        log_load.debug('DB stored in file: %s' % ('DB/' + db_name + '.db'))\n\n    # Assuming meta is defined somewhere in the actual code\n    from your_module import meta  # Replace with actual import\n\n    meta.create_all(engine)\n\n    Session = sessionmaker(bind=engine)\n    session = Session()\n\n    return sessio