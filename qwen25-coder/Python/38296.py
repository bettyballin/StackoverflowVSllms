from Crypto.PublicKey import RSA\nfrom Crypto.Cipher import AES, PKCS1_OAEP\nfrom Crypto.Random import get_random_bytes\nimport base64\n\n# Generate a pair of RSA keys\nkey = RSA.generate(2048)\nprivate_key = key.export_key()\npublic_key = key.publickey().export_key()\n\ndef generate_code(namedata, signature):\n    # Generate a random symmetric key (AES-256)\n    sym_key = get_random_bytes(32)  # AES-256 key\n    \n    # Encrypt namedata + signature with the symmetric key\n    cipher_aes = AES.new(sym_key, AES.MODE_GCM)\n    nonce = cipher_aes.nonce\n    ciphertext, tag = cipher_aes.encrypt_and_digest((namedata + signature).encode())\n    \n    # Package encrypted data and nonce\n    package = sym_key + nonce + ciphertext\n    \n    # Sign the package with RSA private key\n    cipher_rsa = PKCS1_OAEP.new(RSA.import_key(private_key))\n    signed_package = cipher_rsa.encrypt(package)\n    \n    # Encode in Base32 for shorter string representation\n    return base64.b32encode(signed_package).decode()\n\ndef verify_code(code, public_k):\n    try:\n        # Decode Base32 to bytes\n        decoded = base64.b32decode(code)\n        \n        # Decrypt with RSA public key\n        cipher_rsa = PKCS1_OAEP.new(RSA.import_key(public_k))\n        decrypted_package = cipher_rsa.decrypt(decoded)\n        \n        # Extract symmetric key, nonce, and ciphertext\n        sym_key = decrypted_package[:32]\n        nonce = decrypted_package[32:48]\n        ciphertext = decrypted_package[48:]\n        \n        # Decrypt with AES key\n        cipher_aes = AES.new(sym_key, AES.MODE_GCM, nonce=nonce)\n        data = cipher_aes.decrypt(ciphertext).decode()\n        \n        namedata = data[:-5]  # Assuming the last 5 bytes are the signature\n        signature = data[-5:]\n        return namedata, signature\n    \n    except Exception as e:\n        return None, None\n\n# Example usage\nnamedata = 'namedata'\nsignature = 'hello'\ncode = generate_code(namedata, signature)\nprint('Generated Code:', code)\n\nretrieved_namedata, retrieved_signature = verify_code(code, public_key)\nprint('Retrieved Namedata:', retrieved_namedata)\nprint('Retrieved Signature:', retrieved_signature)