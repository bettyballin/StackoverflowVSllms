from functools import wraps\nfrom django.utils.decorators import available_attrs\n\ndef no_session(view_func):\n    """\n    Decorator to disable the Django Session framework for a specific view.\n    This works by deleting the session middleware component of the request object.\n    """\n    @wraps(view_func, assigned=available_attrs(view_func))\n    def _wrapped_view(request, *args, **kwargs):\n        # Remove any existing session data and methods from the request\n        if hasattr(request, 'session'):\n            del request.session\n\n        # Process the view without session interaction\n        response = view_func(request, *args, **kwargs)\n\n        return response\n\n    return _wrapped_view\n\n# Usage in your views.py\nfrom django.shortcuts import render\nfrom .decorators import no_session\n\n@no_session\ndef password_reset_view(request):\n    # Your password reset handling logic here\n    return render(request, 'password_reset_form.html')