import numpy as np\n\ndef shortest_distance_between_segments(p1, p2, q1, q2):\n    # Convert points to numpy arrays for easier vector math\n    p1 = np.array(p1)\n    p2 = np.array(p2)\n    q1 = np.array(q1)\n    q2 = np.array(q2)\n\n    # Calculate direction vectors and the initial point of each line segment\n    d1 = p2 - p1\n    d2 = q2 - q1\n    r = p1 - q1\n\n    a = np.dot(d1, d1)  # length squared of d1\n    e = np.dot(d2, d2)  # length squared of d2\n    f = np.dot(d2, r)\n\n    s = 0.0\n    t = (e != 0 and -f / e) or 0.0\n\n    if e == 0:\n        s = 0   # d1 is parallel to d2 so only one value for t in eq. eqn.\n    else:\n        c = np.dot(d1, r)\n        if t < 0: \n            t = 0\n            s = (e != 0 and -c / a) or 0.0\n        elif t > 1.0:\n            t = 1.0\n            s = (e != 0 and (f + c) / a) or 0.0\n        else:\n            s = (e != 0 and (b*f - c*e)/(a*e-b*b)) or 0.0\n\n    if (t < 0) or (t > 1):\n        t = 0\n        b = d2 * (np.clip((-f + c)/b, 0, 1))\n        point_1 = p1 + d1*((c - b[0]) / a)\n        point_2 = q1 + b\n\n        return np.linalg.norm(point_1 - point_2)\n\n    # Otherwise the min-distance line intersects both segments\n    return np.sqrt(c**2/a/f + (f/e)**2 + r**2)\n\n\n# Example usage:\np1, p2 = (0, 0, 0), (1, 0, 0)\nq1, q2 = (0, 1, 0), (1, 1, 1)\nprint(shortest_distance_between_segments(p1, p2, q1, q2))