# Step 1: Basic registration functionality\ndef register_user(name, email):\n    # Simple registration function\n    print(f"Registering {name} with email {email}")\n    return {"name": name, "email": email}\n\n# Step 2: Adding validity checks\ndef is_valid_email(email):\n    # Simple validation for email (in practice use regex or a library)\n    return "@" in email and "." in email\n\ndef can_register_more():\n    # Dummy function to check if more users can register\n    return len(users) < MAX_REGISTRANTS\n\nMAX_REGISTRANTS = 10  # Assume max registrations is 10 for this example\nusers = []\n\ndef register_user_with_validation(name, email):\n    # Check if more users can be registered\n    if not can_register_more():\n        raise Exception("Registration limit reached.")\n    \n    # Validate email format\n    if not is_valid_email(email):\n        raise ValueError("Invalid email address.")\n    \n    user_info = register_user(name, email)\n    users.append(user_info)  # Assume storing users in a list for simplicity\n    \n    return user_info\n\n# Example usage:\ntry:\n    registered_user = register_user_with_validation("John Doe", "john.doe@example.com")\n    print("User registered successfully:", registered_user)\nexcept Exception as e:\n    print("Error:", str(e))