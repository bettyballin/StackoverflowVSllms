class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\nclass BinPacker:\n    def __init__(self):\n        self.bins = []\n\n    def add_bin(self):\n        self.bins.append([])\n\n    def place_rectangle(self, rect):\n        # Try to fit rectangle in current bins using first-fit decreasing heuristic\n        for bin_index, bin_contents in enumerate(self.bins):\n            placed = self._try_place_in_bin(rect, bin_index)\n            if placed:\n                return\n        # If no bin can accommodate the rectangle, create a new bin\n        self.add_bin()\n        self.bins[-1].append(rect)\n\n    def _try_place_in_bin(self, rect, bin_index):\n        bin_contents = self.bins[bin_index]\n        current_height = 0\n        for item in bin_contents:\n            current_height += max(item.width, item.height)\n        if current_height + max(rect.width, rect.height) <= float('inf'):\n            # Place rectangle in the next slot of the bin\n            bin_contents.append(rect)\n            return True\n        return False\n\n    def calculate_minimal_area(self):\n        total_area = 0\n        for bin_contents in self.bins:\n            width_sum = sum(min(item.width, item.height) for item in bin_contents)\n            height_sum = sum(max(item.width, item.height) for item in bin_contents)\n            # Assuming the rectangle orientation is set by max dimension first\n            total_area += (max(width_sum, height_sum), min(width_sum, height_sum))\n        return min(total_area)\n\n# Example usage:\npacker = BinPacker()\nrectangles = [Rectangle(3, 4), Rectangle(2, 5), Rectangle(6, 1)]\n\nfor rect in sorted(rectangles, key=lambda x: max(x.width, x.height), reverse=True):\n    packer.place_rectangle(rect)\n\nminimal_area = packer.calculate_minimal_area()\nprint(f"The minimal area required is: {minimal_area[0] * minimal_area[1]}")