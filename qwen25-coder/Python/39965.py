from pygments import highlight\nfrom pygments.lexers import PythonLexer\nfrom pygments.formatters import HtmlFormatter\n\n# Initialize lexer and formatter\nlexer = PythonLexer()\nformatter = HtmlFormatter(style='colorful')  # Choose your style here\n\n# Get the style definitions as a string\nstyles = formatter.get_style_defs('.highlight')\n\n# Create the HTML content with inline styles\nhtml_code = highlight(open('your_script.py').read(), lexer, formatter)\n\n# Modify each line to include inline styles (this is a simple example and may not cover all cases)\ndef inject_inline_styles(html_code, style_definitions):\n    # Remove class attributes from spans and inject inline styles directly\n    import re\n\n    # Convert the style definitions into a dictionary for easy access\n    styles_dict = {}\n    regex = r'\.(\w+)\s*{([^}]*)}'\n    matches = re.findall(regex, style_definitions)\n    \n    for match in matches:\n        class_name = match[0]\n        styles = match[1].strip()\n        styles_dict[class_name] = styles\n\n    # Replace span tags with inline styles\n    span_class_regex = r'<span class="([^"]+)">([^<]+)</span>'\n    def replace_span_with_inline(match):\n        classes = match.group(1).split()\n        style_content = '; '.join([styles_dict[cls] for cls in classes if cls in styles_dict])\n        return f'<span style="{style_content}">{match.group(2)}</span>'\n\n    inline_html_code = re.sub(span_class_regex, replace_span_with_inline, html_code)\n\n    return inline_html_code\n\n# Inject inline styles into the HTML\nhtml_code = inject_inline_styles(html_code, styles)\n\nprint(html_code)