from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import padding\nfrom os import urandom\n\n# Key and IV generation\nkey = urandom(32)  # 32 bytes key for AES-256\niv = urandom(16)   # AES block size is 16 bytes\n\ndef encrypt_message(message, key=key, iv=iv):\n    padder = padding.PKCS7(algorithms.AES.block_size).padder()\n    padded_data = padder.update(message) + padder.finalize()\n\n    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())\n    encryptor = cipher.encryptor()\n    encrypted_message = encryptor.update(padded_data) + encryptor.finalize()\n    \n    return iv + encrypted_message  # Prepend IV for use in decryption\n\ndef decrypt_message(encrypted_message, key=key):\n    iv = encrypted_message[:16]\n    actual_encrypted_message = encrypted_message[16:]\n    \n    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())\n    decryptor = cipher.decryptor()\n    decrypted_padded_message = decryptor.update(actual_encrypted_message) + decryptor.finalize()\n\n    unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder()\n    decrypted_message = unpadder.update(decrypted_padded_message) + unpadder.finalize()\n\n    return decrypted_message\n\n# Example usage\nmessage = b"Sensitive data"\nencrypted = encrypt_message(message)\ndecrypted = decrypt_message(encrypted)\n\nprint("Original:", message)\nprint("Encrypted:", encrypted)\nprint("Decrypted:", decrypted)