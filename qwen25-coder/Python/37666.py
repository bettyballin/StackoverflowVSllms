from twisted.internet import reactor, protocol\n\nclass MyProtocol(protocol.Protocol):\n    def __init__(self):\n        self.factory.clients.append(self)  # Add client on instantiation\n\n    def connectionLost(self, reason):\n        self.factory.clients.remove(self)  # Remove client when connection is lost\n\nclass MyFactory(protocol.Factory):\n    protocol = MyProtocol\n    clients = []  # List to keep track of connected clients\n\ndef send_data_to_clients():\n    message = "Hello, clients!"  # Message to be sent\n    for client in MyFactory.clients:\n        try:\n            client.transport.write(message.encode('utf-8'))  # Send data to each client\n        except Exception as e:\n            print(f"Error sending data to a client: {e}")\n    \n    reactor.callLater(5, send_data_to_clients)  # Schedule the function to be called again after 5 seconds\n\ndef main():\n    endpoint = serverFromString(reactor, "tcp:8000")  # Bind TCP port 8000\n    endpoint.listen(MyFactory())  # Start listening with our factory\n    reactor.callLater(5, send_data_to_clients)  # Schedule the initial function call to send data\n    reactor.run()\n\nif __name__ == "__main__":\n    main()