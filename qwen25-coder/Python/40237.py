import pickle\nimport socket\nimport threading\n\n# We'll pickle a list of numbers:\nsomeList = [1, 2, 7, 9, 0]\npickledList = pickle.dumps(someList)\n\n# Our thread class:\nclass ClientThread(threading.Thread):\n    def __init__(self, channel, details):\n        self.channel = channel\n        self.details = details\n        threading.Thread.__init__(self)\n\n    def run(self):\n        print('Received connection:', self.details[0])\n        while True:  # Keep the connection alive indefinitely until client closes it\n            try:\n                data = self.channel.recv(1024)\n                if not data:  # Break loop if no data is received\n                    break\n                print(pickle.loads(data))  # Example of handling received data\n                self.channel.send(pickledList)  # Send data back to client\n            except Exception as e:\n                print("Error:", str(e))\n                break\n        self.channel.close()\n        print('Closed connection:', self.details[0])\n\n# Set up the server:\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind(('', 2727))\nserver.listen(5)\n\n# Have the server serve "forever":\nwhile True:\n    channel, details = server.accept()\n    ClientThread(channel, details).start()