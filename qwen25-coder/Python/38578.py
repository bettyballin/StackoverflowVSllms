def preorder_to_postorder(preorder, node_is_leaf):\n    if not preorder:\n        return []\n\n    # The first element in preorder is always the root of this tree/ subtree.\n    root = preorder[0]\n    postorder = []\n\n    if node_is_leaf(root):\n        return [root]\n\n    # Find the left and right subtrees in the preorder sequence.\n    for i, val in enumerate(preorder[1:]):\n        if not node_is_leaf(val):\n            break\n    else:\n        i += 1\n\n    left_subtree = preorder[1:i+1]\n    right_subtree = preorder[i+1:]\n\n    # Recursively convert subtrees.\n    postorder.extend(preorder_to_postorder(left_subtree, node_is_leaf))\n    postorder.extend(preorder_to_postorder(right_subtree, node_is_leaf))\n\n    # Add the root to the end in postorder traversal.\n    postorder.append(root)\n\n    return postorder