from collections import defaultdict\n\ndef is_valid_sequence(cards):\n    # Sort cards by their rank (assuming numerical representation already)\n    return len(cards) == 3 and cards[1] == cards[0] + 1 and cards[2] == cards[1] + 1\n\ndef find_optimal_sets(cards):\n    # Convert card values to numbers for easier comparison\n    value_map = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, \n                 '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 11, 'Q': 12, 'K': 13}\n    cards = [(value_map[card[:-1]], card[-1]) for card in cards]\n    \n    # Group cards by suit\n    suit_groups = defaultdict(list)\n    for rank, suit in cards:\n        suit_groups[suit].append(rank)\n        suit_groups['all_values'].append((rank, suit))\n        \n    sets = []\n    used_ranks = set()\n    \n    # Find sets of three same values first\n    value_sets = defaultdict(int)\n    for rank, suit in suit_groups['all_values']:\n        value_sets[rank] += 1\n    for rank, count in value_sets.items():\n        while count >= 3:\n            count -= 3\n            used_ranks.add(rank)\n            sets.append([f"{value_map[r]}{s}" for r, s in cards if r == rank])\n            \n    # Remove already used ranks from suit groups\n    suit_groups = {suit: [rank for rank in ranks if rank not in used_ranks] \n                   for suit, ranks in suit_groups.items() if suit != 'all_values'}\n    \n    # Sort each suit group to make it easier to find sequences\n    for suit in suit_groups:\n        suit_groups[suit].sort()\n    \n    # Find sets of three sequential cards from the same suit\n    for suit in suit_groups:\n        i, j = 0, 1\n        while j < len(suit_groups[suit]):\n            sequence = [suit_groups[suit][i]]\n            while j < len(suit_groups[suit]) and is_valid_sequence(sequence + [suit_groups[suit][j]]):\n                sequence.append(suit_groups[suit][j])\n                j += 1\n            if len(sequence) >= 3:\n                k = 0\n                while k <= len(sequence) - 3:\n                    sets.append([f"{value_map[rank]}{suit}" for rank in sequence[k:k+3]])\n                    used_ranks.update(sequence[k:k+3])\n                    k += 3\n            i = j\n            j += 1\n\n    return sets\n\n# Example usage\ncards = ['6D', '7D', '7C', '7H', '8D', '8C', '9C', '10H']\nprint(find_optimal_sets(cards))