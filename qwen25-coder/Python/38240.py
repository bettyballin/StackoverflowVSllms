import re\nfrom collections import Counter\n\ndef preprocess(text):\n    # Convert to lowercase and remove non-alphanumeric characters\n    text = re.sub(r'\W+', ' ', text.lower()).strip()\n    # Simple list of common stopwords for demonstration; consider more comprehensive lists.\n    stopwords = set(['the', 'and', 'is', 'in', 'at', 'which', 'on', 'for', 'a', 'an'])\n    words = [word for word in text.split() if word not in stopwords]\n    # Use simple stemming here for demonstration purposes\n    stemmed_words = [stem(word) for word in words]\n    return stemmed_words\n\ndef stem(word):\n    # Simple porter stemmer-like rules (overly simplified)\n    return re.sub(r'ing$', '', word)\n\ndef calculate_similarity(question, target_title, target_content, weight_title=2.0):\n    tokens_question = preprocess(question)\n    tokens_target_title = preprocess(target_title)\n    tokens_target_content = preprocess(target_content)\n    \n    # Count words in question and target\n    counter_question = Counter(tokens_question)\n    counter_title = Counter(tokens_target_title)\n    counter_content = Counter(tokens_target_content)\n    \n    # Calculate similarity score; titles are weighted more heavily\n    score_title = sum(counter_title[word] for word in tokens_question) * weight_title\n    score_content = sum(counter_content[word] for word in tokens_question)\n    return score_title + score_content\n\ndef find_related_questions(question, questions, top_n=5):\n    scores = [(i, calculate_similarity(question, q['title'], q['content'])) for i, q in enumerate(questions)]\n    scores.sort(key=lambda x: x[1], reverse=True)\n    return [questions[i] for i, _ in scores[:top_n]]\n\n# Example usage\nnew_question = "Implementing a related degree measure algorithm"\nexisting_questions = [\n    {'title': 'Algorithm for Related Degree Measure', 'content': 'How can I implement a relatedness algorithm?'},\n    {'title': 'Database Index Optimization', 'content': 'What are some strategies to optimize database indexing?'}\n]\n\nrelated_questions = find_related_questions(new_question, existing_questions)\nfor q in related_questions:\n    print(q['title'], "-", q['content'])