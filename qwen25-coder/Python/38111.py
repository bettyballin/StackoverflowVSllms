from itertools import product\n\ndef evaluate_guess(solution, guess):\n    """Evaluate guess against solution and return (black, white) counts."""\n    black = sum(s == g for s, g in zip(solution, guess))\n    correct_colors = sum(min(solution.count(c), guess.count(c)) for c in set(guess))\n    white = correct_colors - black\n    return black, white\n\ndef mastermind():\n    colors = ['Y', 'B', 'G', 'R', 'O', 'P']\n    all_possibilities = list(product(colors, repeat=4))\n\n    def next_guess(all_possibilities):\n        if len(all_possibilities) == 1:\n            return all_possibilities[0]\n        # Use first guess heuristic\n        guess = ('Y', 'Y', 'B', 'B')\n        max_min_eliminations = 0\n        for potential_guess in product(colors, repeat=4):\n            min_eliminations = len(all_possibilities)\n            for solution in all_possibilities:\n                feedback = evaluate_guess(solution, potential_guess)\n                remaining_after_feedback = [s for s in all_possibilities if evaluate_guess(s, potential_guess) == feedback]\n                if len(remaining_after_feedback) < min_eliminations:\n                    min_eliminations = len(remaining_after_feedback)\n            if min_eliminations > max_min_eliminations:\n                guess = potential_guess\n                max_min_eliminations = min_eliminations\n        return guess\n\n    for attempt in range(10):\n        guess = next_guess(all_possibilities)\n        print(f"Attempt {attempt + 1}: Guessing {guess}")\n        # Here you would get feedback from the user or oracle.\n        # For demonstration, let's assume we have a predefined solution:\n        actual_solution = ('B', 'G', 'O', 'R')\n        black, white = evaluate_guess(actual_solution, guess)\n        print(f"Feedback: {black} blacks, {white} whites")\n        if black == 4:\n            print("Solution found!")\n            return\n        all_possibilities = [solution for solution in all_possibilities if evaluate_guess(solution, guess) == (black, white)]\n    print("Failed to find solution within 10 attempts.")\n\nmastermind()