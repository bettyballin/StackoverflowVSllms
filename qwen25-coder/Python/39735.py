from scipy.optimize import fsolve\n\n# Function representing the difference between given V and what trilinear interpolation gives for x, y, z\ndef equations(vars, v):\n    x, y, z = vars\n    v0, v1, v2, v3, v4, v5, v6, v7 = v\n    eq = [\n        (1-x)*(1-y)*(1-z)*v0 + x*(1-y)*(1-z)*v1 + (1-x)*y*(1-z)*v2 + x*y*(1-z)*v3 +\n        (1-x)*(1-y)*z*v4 + x*(1-y)*z*v5 + (1-x)*y*z*v6 + x*y*z*v7 - V\n    ]\n    # Since the function is scalar, we duplicate equations to make a system for fsolve\n    return eq * 3\n\n# Known value at point (x, y, z)\nV = 0.5\n\n# Vertex values of the cube\nvertex_values = [0.1, 0.2, 0.8, 0.6, 0.4, 0.9, 0.3, 0.7]\n\n# Initial guess for x, y, z\ninitial_guess = (0.5, 0.5, 0.5)\n\n# Solve the system of equations\nsolution = fsolve(equations, initial_guess, args=(vertex_values,))\n\nx_sol, y_sol, z_sol = solution\n\n(x_sol, y_sol, z_sol)