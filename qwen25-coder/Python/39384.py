# Assume RSA as asymmetric algorithm for demonstration\n\n# Generate a session key for symmetric encryption\nsession_key = generate_random_session_key()\n\n# Encrypt data using the session key\nencrypted_data = symmetric_encrypt(data, session_key)\n\n# Public keys of recipients\npublic_keys = [key2, key3, key4]\n\n# Container to hold encrypted session keys\nencrypted_session_keys = []\n\n# Encrypt the session key with each recipient's public key\nfor public_key in public_keys:\n    encrypted_session_key = asymmetric_encrypt(session_key, public_key)\n    encrypted_session_keys.append(encrypted_session_key)\n\n# Transmission\n# Send `encrypted_data` to all recipients along with their respective `encrypted_session_key`\n\n# Each recipient can decrypt the session key using their private key and then use that to decrypt the data