import time\n\nclass TokenBucket:\n    def __init__(self, max_tokens, fill_rate):\n        self.capacity = max_tokens\n        self.tokens = max_tokens\n        self.fill_rate = fill_rate  # tokens per second\n        self.last_checked = time.time()\n\n    def consume(self, tokens=1):\n        now = time.time()\n        elapsed = now - self.last_checked\n        self.last_checked = now\n        self.tokens += elapsed * self.fill_rate\n        if self.tokens > self.capacity:\n            self.tokens = self.capacity\n\n        if self.tokens >= tokens:\n            self.tokens -= tokens\n            return True\n        else:\n            return False\n\n# Example usage\nrate_limiter = TokenBucket(max_tokens=5, fill_rate=5/8)  # Allow max 5 messages every 8 seconds\n\ndef send_message(message):\n    if rate_limiter.consume(1):\n        print(f"Sending message: {message}")\n    else:\n        print("Rate limit exceeded. Try again later.")\n\n# Simulate sending messages\nmessages = ["Hello", "World", "This", "Is", "A", "Test", "Bot"]\nfor i, msg in enumerate(messages):\n    time.sleep(2)  # Sleep for 2 seconds between each message attempt\n    send_message(msg)