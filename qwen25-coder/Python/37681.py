import random\nimport bisect\n\ndef weighted_selection_without_replacement(items, weights, k):\n    # Create a list of tuples (index, item) to maintain the original indices\n    indexed_items = list(enumerate(items))\n    selected_indices = set()\n    selected_items = []\n\n    for _ in range(k):\n        cumulative_weights = []\n        current_sum = 0\n        \n        # Calculate cumulative weights excluding already selected indices\n        for index, _ in indexed_items:\n            if index not in selected_indices:\n                current_sum += weights[index]\n                cumulative_weights.append(current_sum)\n        \n        # Random selection based on cumulative weights\n        target = random.uniform(0, current_sum)\n        selected_index = bisect.bisect_left(cumulative_weights, target)\n        \n        # Track the original index to avoid reselection\n        actual_index = [i for i, _ in indexed_items if i not in selected_indices][selected_index]\n        selected_indices.add(actual_index)\n        selected_items.append(items[actual_index])\n    \n    return selected_items\n\n# Example usage\nitems = ['a', 'b', 'c', 'd']\nweights = [10, 20, 30, 40]\nprint(weighted_selection_without_replacement(items, weights, 2))