import tensorflow as tf\nfrom tensorflow.keras.applications.vgg16 import VGG16, preprocess_input\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nimport numpy as np\nfrom scipy.spatial.distance import cosine\n\n# Load the VGG16 model pre-trained on ImageNet\nmodel = VGG16(weights='imagenet', include_top=False)\n\ndef extract_features(image_path):\n    # Load and preprocess an image for prediction\n    input_shape = (224, 224)\n    img = load_img(image_path, target_size=input_shape)\n    img_array = img_to_array(img)\n    img_batch = np.expand_dims(img_array, axis=0)\n    img_preprocessed = preprocess_input(img_batch)\n\n    # Extract features\n    features = model.predict(img_preprocessed).flatten()\n    return features\n\ndef compare_images_features(features1, features2):\n    # Compute cosine distance between feature vectors\n    dist = cosine(features1, features2)\n    similarity_score = 1 - dist\n    return similarity_score\n\n# Example usage:\nfeatures_img1 = extract_features('image1.jpg')\nfeatures_img2 = extract_features('image2.jpg')\nsimilarity = compare_images_features(features_img1, features_img2)\n\nprint(f"Similarity Score: {similarity}")