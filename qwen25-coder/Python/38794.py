import bcrypt\n\n# Simulate checking password using MD5 hash (for demonstration purposes only)\ndef check_md5_hash(stored_hash, provided_password):\n    # This function should simulate an MD5 check\n    return stored_hash == hashlib.md5(provided_password.encode()).hexdigest()\n\n# Function to create a new bcrypt hash\ndef bcrypt_hash(password):\n    salt = bcrypt.gensalt()\n    hashed = bcrypt.hashpw(password.encode(), salt)\n    return hashed\n\n# Function to verify password using bcrypt\ndef check_bcrypt_hash(stored_bcrypt_hash, provided_password):\n    return bcrypt.checkpw(provided_password.encode(), stored_bcrypt_hash)\n\n# Example of logging in (simplified flow)\ndef login(username, provided_password):\n    user = get_user_from_db(username)  # Assume this function fetches the user record\n    if check_md5_hash(user['password'], provided_password):\n        print("Password correct with old MD5. Rehashing...")\n        new_hash = bcrypt_hash(provided_password)\n        update_user_password_in_db(username, new_hash)  # Update to bcrypt hash\n        return True\n    elif 'bcrypt' in user['hash_type'] and check_bcrypt_hash(user['password'], provided_password):\n        print("Password correct with bcrypt.")\n        return True\n    else:\n        print("Incorrect password.")\n        return False\n\n# Example usage\nif __name__ == "__main__":\n    password = "secure_password123"\n    # Simulate a user login process\n    is_logged_in = login('example_user', password)