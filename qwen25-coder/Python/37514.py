import random\n\ngrammar = {\n    'S': [['NP', 'VP'], ['S', 'and', 'S'], ['S', ',', 'after which', 'S']],\n    'NP': [['the', 'N'], ['the', 'A', 'N'], ['the', 'A', 'A', 'N']],\n    'VP': [['V', 'NP']],\n    'N': ['dog', 'fish', 'bird', 'wizard'],\n    'V': ['kicks', 'meets', 'marries'],\n    'A': ['red', 'striped', 'spotted']\n}\n\ndef generate_sentence(current, terminals_to_add):\n    if not terminals_to_add:\n        return current.strip()\n    \n    expansion = random.choice(grammar[current[0]])\n    for symbol in expansion:\n        if symbol in grammar:\n            current.extend(generate_sentence([symbol], terminals_to_add).split())\n        else:\n            current.append(symbol)\n            terminals_to_add -= 1\n        if not terminals_to_add:\n            break\n    \n    return ' '.join(current)\n\ndef sentence_with_n_terminals(n):\n    # Start with S and require n terminals (V + A + N)\n    sentence = generate_sentence(['S'], n)\n    words = sentence.split()\n    terminals_count = sum(1 for word in words if word in grammar['N'] + grammar['V'] + grammar['A'])\n    \n    while terminals_count != n:\n        sentence = generate_sentence(['S'], n)\n        words = sentence.split()\n        terminals_count = sum(1 for word in words if word in grammar['N'] + grammar['V'] + grammar['A'])\n    \n    return sentence\n\n# Example usage: Generate a sentence with 5 terminals\nprint(sentence_with_n_terminals(5))