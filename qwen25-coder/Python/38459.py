def divisorGenerator(n):\n    # Assuming factorGenerator is defined elsewhere to return (factor, multiplicity) pairs\n    from itertools import product\n\n    def generate_powers(factor, multiplicity):\n        return [factor**pw for pw in range(multiplicity + 1)]\n\n    factors = list(factorGenerator(n))\n    prime_power_lists = [generate_powers(fact, mult) for fact, mult in factors]\n\n    # Generate all combinations of the powers and calculate their products\n    for combo in product(*prime_power_lists):\n        yield eval("*".join(map(str, combo)))\n\n# Example usage:\ndef factorGenerator(n):  # Assume this function returns prime factors and multiplicities\n    from collections import defaultdict\n\n    i = 2\n    factors = defaultdict(int)\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors[i] += 1\n    if n > 1:\n        factors[n] += 1\n    return [(factor, multiplicity) for factor, multiplicity in factors.items()]\n\n# Generate divisors of 100\nfor divisor in divisorGenerator(100):\n    print(divisor)