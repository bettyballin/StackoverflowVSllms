# Initial Draft - A basic function to calculate factorial (naive approach)\ndef factorial(n):\n    result = 1\n    for i in range(2, n+1):\n        result *= i\n    return result\n\n# Iteration 1 - Adding docstring and input validation\ndef factorial(n):\n    """\n    Calculate the factorial of a non-negative integer.\n    \n    :param n: Non-negative integer whose factorial is to be calculated\n    :return: Factorial of the number\n    """\n    if not isinstance(n, int) or n < 0:\n        raise ValueError("Input must be a non-negative integer")\n        \n    result = 1\n    for i in range(2, n+1):\n        result *= i\n    return result\n\n# Iteration 2 - Using recursion to improve code elegance\ndef factorial(n):\n    """\n    Calculate the factorial of a non-negative integer using recursion.\n    \n    :param n: Non-negative integer whose factorial is to be calculated\n    :return: Factorial of the number\n    """\n    if not isinstance(n, int) or n < 0:\n        raise ValueError("Input must be a non-negative integer")\n        \n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)