from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.neighbors import NearestNeighbors\nimport numpy as np\n\n# Sample news items\nnews_items = [\n    "Saddam Hussein ruled Iraq from 1979 until his capture in 2003.",\n    "Donald Rumsfeld's business dealings in Iraq raised numerous ethical questions.",\n    # Add more articles here\n]\n\n# Step 1 & 2: Preprocess and convert text to TF-IDF vectors\nvectorizer = TfidfVectorizer(stop_words='english')\nX = vectorizer.fit_transform(news_items)\n\n# Step 3: Optional - Dimensionality reduction (Example using t-SNE)\nfrom sklearn.manifold import TSNE\nX_reduced = TSNE(n_components=2, random_state=42).fit_transform(X.toarray())\n\n# Step 4: Use k-NN to find similar articles\nneigh = NearestNeighbors(n_neighbors=2) # Adjust n_neighbors as needed\nneigh.fit(X)\n\n# Find neighbors (most similar news items) for a specific article (e.g., Saddam Hussein)\nquery_article_index = 0\ndistances, indices = neigh.kneighbors(X[query_article_index])\n\nprint("Indices of closest articles:", indices[0])\nprint("Distances to closest articles:", distances[0])\n\n# Note: This is a simple example. For better results, consider more sophisticated clustering algorithms or incorporating semantic similarity.