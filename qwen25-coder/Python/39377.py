# Step 1: Calculate Net Balances\nnet_balance = {}\nfor transaction in transactions:\n    debitor, creditor, amount = transaction\n    net_balance[debitor] -= amount\n    net_balance[creditor] += amount\n\n# Step 2: Separate positive from negative balances\npositive_balances, negative_balances = [], []\nfor person, balance in net_balance.items():\n    if balance > 0:\n        positive_balances.append((person, balance))\n    elif balance < 0:\n        negative_balances.append((person, -balance))\n\n# Step 3: Apply Hungarian Algorithm for Minimum Cost Bipartite Matching\ncost_matrix = [[min(bal_pos, bal_neg) for _, bal_neg in negative_balances] \n               for _, bal_pos in positive_balances]\n\nmatches = hungarian_algorithm(cost_matrix)\n\n# Result is a list of (debitor_index, creditor_index) tuples for minimal transactions\nminimal_transactions = []\nfor debitor_index, creditor_index in matches:\n    person_giving, amount_to_give = positive_balances[debitor_index]\n    person_receiving, _ = negative_balances[creditor_index]\n    minimal_transactions.append((person_giving, person_receiving, min(amount_to_give, net_balance[person_receiving])))\n\n# Output the minimal transactions\nprint(minimal_transactions)