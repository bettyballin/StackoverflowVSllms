def find_subsets(nums, target_sum):\n    def backtrack(start, current_subset, current_sum):\n        # If the current subset satisfies the condition, add it to results\n        if current_sum < target_sum:\n            results.append(list(current_subset))\n        \n        for i in range(start, len(nums)):\n            # Prune branches where adding next number makes sum exceed target_sum\n            if current_sum + nums[i] >= target_sum:\n                break\n            \n            # Include nums[i] and move to the next element\n            current_subset.append(nums[i])\n            backtrack(i + 1, current_subset, current_sum + nums[i])\n            \n            # Backtrack by removing the last element\n            current_subset.pop()\n    \n    results = []\n    nums.sort()  # Ensure the list is sorted (not necessary here as stated)\n    backtrack(0, [], 0)\n    return results\n\n# Example usage:\nsorted_list = [i for i in range(100)]\nsubsets = find_subsets(sorted_list, 130)\nprint(subsets[:10])  # Print first 10 subsets for brevity