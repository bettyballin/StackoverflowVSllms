import smtpd\nimport asyncore\n\nclass CustomSMTPServer(smtpd.SMTPServer):\n    def __init__(self, localaddr, remoteaddr):\n        super().__init__(localaddr, remoteaddr)\n        self.auth_state = None  # Track the state of auth process\n\n    def found_terminator(self):\n        line = ''.join(self.__line).strip()\n        print('Data:', repr(line))\n        self.__line = []\n        \n        if not line:\n            self.push('500 Error: bad syntax')\n            return\n        \n        i = line.find(' ')\n        if i < 0:\n            command = line.upper()\n            arg = None\n        else:\n            command = line[:i].upper()\n            arg = line[i+1:].strip()\n\n        method = getattr(self, 'smtp_' + command, None)\n\n        print('looking for: ', command)\n        print('method is: ', method)\n\n        if not method:\n            self.push('502 Error: command "%s" not implemented' % command)\n            return\n        method(arg)\n\n    def smtp_EHLO(self, arg):\n        super().smtp_EHLO(arg)  # Call the parent EHLO logic\n        self.push('250-AUTH PLAIN LOGIN')\n\n    def smtp_AUTH(self, arg):\n        if not self.auth_state:\n            mechanism, data = arg.split(None, 1)\n            if mechanism.upper() == 'PLAIN':\n                # Decode the AUTH PLAIN credentials (username and password)\n                decoded_data = base64.b64decode(data).decode('utf-8')\n                username, _, password = decoded_data.split('\x00', 2)\n                self.authenticate(username, password)  # Verify credentials\n            elif mechanism.upper() == 'LOGIN':\n                if not data:\n                    self.push(b'334 VXNlcm5hbWU6')  # Ask for Username\n                    self.auth_state = 'USERNAME'\n                else:\n                    username = base64.b64decode(data).decode('utf-8')\n                    self.push(b'334 UGFzc3dvcmQ6')  # Ask for Password\n                    self.auth_state = ('PASSWORD', username)\n            else:\n                self.push('504 AUTH mechanism unsupported')\n        else:\n            # Continue with login process based on self.auth_state\n            if self.auth_state == 'USERNAME':\n                username = base64.b64decode(arg).decode('utf-8')\n                self.push(b'334 UGFzc3dvcmQ6')  # Ask for Password\n                self.auth_state = ('PASSWORD', username)\n            elif self.auth_state[0] == 'PASSWORD':\n                password = base64.b64decode(arg).decode('utf-8')\n                _, username = self.auth_state\n                self.authenticate(username, password)  # Verify credentials\n\n    def authenticate(self, username, password):\n        if self.check_credentials(username, password):\n            print("Authentication successful for:", username)\n            self.push('235 Authentication Successful')\n            self.auth_state = None\n        else:\n            print("Authentication failed for:", username)\n            self.push('535 Authentication Failed')\n\n    def check_credentials(self, username, password):\n        # Implement your credentials checking logic here.\n        return username == "user" and password == "password"\n\nserver = CustomSMTPServer(('127.0.0.1', 1025), None)\nasyncore.loop()