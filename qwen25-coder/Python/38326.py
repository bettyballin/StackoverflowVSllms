import pika\nfrom sqlalchemy import create_engine\n\n# Setup database and message broker connection\nengine = create_engine('mssql+pyodbc://user:password@server/database')\nconnection = engine.connect()\n\nrabbitmq_connection = pika.BlockingConnection(pika.ConnectionParameters('rabbitmq_host'))\nchannel = rabbitmq_connection.channel()\nchannel.queue_declare(queue='sync_queue')\n\ndef callback(ch, method, properties, body):\n    data_to_sync = dict(eval(body))  # Assuming Python's eval for simplicity; replace with proper JSON parsing\n    apply_database_changes(data_to_sync)  # Custom function to update the opposite database\n\ndef apply_database_changes(changes):\n    # Logic to apply changes to the database\n    print(f"Changes applied: {changes}")\n    connection.execute("UPDATE table SET column=value WHERE id=some_id")\n\nchannel.basic_consume(queue='sync_queue', on_message_callback=callback, auto_ack=True)\n\nprint('Waiting for messages. To exit press CTRL+C')\nchannel.start_consuming()