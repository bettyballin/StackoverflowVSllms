def flood_fill(grid, x, y, original_color, new_label):\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):\n        return\n    if grid[x][y] != original_color:\n        return\n\n    grid[x][y] = new_label\n\n    # Explore the four cardinal directions\n    flood_fill(grid, x + 1, y, original_color, new_label)\n    flood_fill(grid, x - 1, y, original_color, new_label)\n    flood_fill(grid, x, y + 1, original_color, new_label)\n    flood_fill(grid, x, y - 1, original_color, new_label)\n\ndef find_contiguous_regions(grid):\n    n = len(grid)\n    m = len(grid[0])\n    label = 6  # Start labeling from a number greater than max color (n=5)\n\n    for i in range(n):\n        for j in range(m):\n            if isinstance(grid[i][j], int) and grid[i][j] < 6:  # assuming colors are represented as ints 0 to 5\n                flood_fill(grid, i, j, grid[i][j], label)\n                label += 1\n\n    return label - 6  # Total number of regions found\n\n# Example usage:\ngrid = [\n    [1, 2, 1, 1],\n    [1, 3, 3, 4],\n    [1, 3, 5, 4],\n    [6, 7, 8, 4]\n]\n\nnumber_of_regions = find_contiguous_regions(grid)\nprint("Number of contiguous regions:", number_of_regions)