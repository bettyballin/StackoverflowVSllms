import json\n\nclass Book:\n    def __init__(self, title=None):\n        self.title = title\n\nclass BookDBProxy:\n    def __init__(self, connection):  # Assume connection is some IPC abstraction\n        self.connection = connection\n\n    def get_book(self, index):\n        message = {'method': 'get_book', 'index': index}\n        serialized_message = json.dumps(message)\n        response = self.connection.send_receive(serialized_message)\n        book_data = json.loads(response)\n        return Book(title=book_data['title'])\n\n    def new_book(self):\n        # Create a new book object on the server side\n        message = {'method': 'new_book'}\n        serialized_message = json.dumps(message)\n        response = self.connection.send_receive(serialized_message)\n        book_data = json.loads(response)\n        return Book(title=book_data['title'])\n\n    def save_book(self, book):\n        # Save book to server\n        message = {'method': 'save_book', 'data': {'title': book.title}}\n        serialized_message = json.dumps(message)\n        self.connection.send_receive(serialized_message)\n\nclass IPCConnection:\n    def __init__(self, endpoint):\n        pass  # Initialize connection\n\n    def send_receive(self, message):\n        # Send messages and receive responses via your chosen IPC mechanism\n        print(f"Sending: {message}")\n        response = '{"title": "RPC for Dummies"}'  # This is just a mock response\n        return response\n\n# Usage\nconnection = IPCConnection("remote_endpoint")\nbookdb_proxy = BookDBProxy(connection)\n\nnew_book = bookdb_proxy.new_book()\nnew_book.title = 'RPC for Dummies'\nbookdb_proxy.save_book(new_book)