class Peer:\n    def __init__(self, peer_id):\n        self.id = peer_id\n        self.trusted_peers = {}\n        self.reputation_score = 1.0  # Default score\n\n    def declare_trust(self, other_peer, weight=1.0):\n        if other_peer not in self.trusted_peers:\n            self.trusted_peers[other_peer] = weight\n\ndef compute_reputations(peers):\n    damping_factor = 0.85\n    max_iterations = 100\n    tolerance = 0.0001\n    \n    for iteration in range(max_iterations):\n        delta_sum = 0\n        new_scores = {}\n        \n        for peer_id, peer in peers.items():\n            old_score = peer.reputation_score\n            \n            # Calculate the sum of incoming trust scores weighted by the source's score and weight\n            incoming_trust_sum = sum(\n                peers[srce].reputation_score * w / len(peers[srce].trusted_peers)\n                for srce, w in peer.trusted_peers.items()\n            )\n            \n            # Update reputation score with damping factor and addition of a small constant value\n            new_scores[peer_id] = (1.0 - damping_factor) + damping_factor * incoming_trust_sum\n            \n            delta_sum += abs(new_scores[peer_id] - old_score)\n        \n        for peer_id, peer in peers.items():\n            peer.reputation_score = new_scores[peer_id]\n            \n        if delta_sum < tolerance:\n            break\n\n# Example usage\npeers = {i: Peer(i) for i in range(5)}\npeers[0].declare_trust(peers[1])\npeers[1].declare_trust(peers[2])\npeers[3].declare_trust(peers[1], weight=0.8)\n\ncompute_reputations(peers)\nfor peer_id, peer in peers.items():\n    print(f"Peer {peer.id} trust score: {peer.reputation_score}")