import random\n\ndef generate_unique_color(index):\n    # Cycle through hues with fixed saturation and lightness for even distribution\n    hue = (index * 137.508) % 360  # Use a golden angle to distribute hues\n    saturation = 90  # Constant saturation level\n    lightness = 50   # Constant lightness level\n    \n    return hsl_to_rgb(hue, saturation, lightness)\n\ndef hsl_to_rgb(h, s, l):\n    """Converts an HSL color value to RGB. Assumes hue [0,360], and s,l are percentages."""\n    def hue2rgb(p, q, t):\n        if t < 0: \n            t += 1\n        if t > 1: \n            t -= 1\n        if t < 1/6: \n            return p + (q - p) * 6 * t\n        if t < 1/2: \n            return q\n        if t < 2/3: \n            return p + (q - p) * (2/3 - t) * 6\n        return p\n\n    s /= 100.0\n    l /= 100.0\n\n    if s == 0:\n        r = g = b = l # achromatic\n    \n    else:\n        q = l * (1 + s) if l < 0.5 else l + s - l * s\n        p = 2 * l - q\n        r = hue2rgb(p, q, h / 360 + 1/3)\n        g = hue2rgb(p, q, h / 360)\n        b = hue2rgb(p, q, h / 360 - 1/3)\n\n    return int(r * 255), int(g * 255), int(b * 255)\n\n# Example usage\nfor i in range(10):\n    print(f"Color {i}: {generate_unique_color(i)}")