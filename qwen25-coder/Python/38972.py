class Node:\n    def __init__(self, label, parent=None):\n        self.label = label\n        self.parent = parent\n        self.children = {}\n\nclass PatriciaTrie:\n    def __init__(self):\n        self.root = Node(None)\n\n    def add(self, sequence: str):\n        current_node = self.root\n        for char in sequence:\n            if char not in current_node.children:\n                new_node = Node(char, parent=current_node)\n                current_node.children[char] = new_node\n            current_node = current_node.children[char]\n\n    def _find_prefix(self, node, prefix: str):\n        i = 0\n        while i < len(prefix) and prefix[i] in node.children:\n            child = node.children[prefix[i]]\n            if child.label == prefix[i]:\n                node = child\n                i += 1\n                continue\n        return node\n\n    def search(self, sequence: str):\n        node = self._find_prefix(self.root, sequence)\n        # Check if the full sequence is found\n        return node.label == sequence[-1:]\n\n# Example of a single-layer Patricia Trie\ntrie = PatriciaTrie()\nsequences = ["ATG", "ATA", "ATT"]\nfor seq in sequences:\n    trie.add(seq)\n\nprint(trie.search("ATA"))  # Should return True\nprint(trie.search("ATC"))  # Should return False