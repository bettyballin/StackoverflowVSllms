def find_optimal_chocolate_bar(n):\n    def can_divide_with_breaks(p, q, people, breaks_left):\n        # Base cases: if people == 0 or break constraint is violated\n        if people <= 1:\n            return True\n        if breaks_left < 0:\n            return False\n        \n        # Try dividing p or q into factors to see if we can achieve the division\n        for i in range(2, p):\n            if p % i == 0 and people % i == 0:\n                if can_divide_with_breaks(p // i, q, people // i, breaks_left - 1):\n                    return True\n        \n        for j in range(2, q):\n            if q % j == 0 and people % j == 0:\n                if can_divide_with_breaks(p, q // j, people // j, breaks_left - 1):\n                    return True\n        \n        return False\n    \n    # Try all p * q combinations starting from smallest possible\n    for p in range(2, n + 1):\n        for q in range(2, n + 1):\n            if p * q % n == 0:\n                if can_divide_with_breaks(p, q, n, n - 1):  # -1 because we start with a whole bar\n                    return (p, q)\n    \n    return None\n\n# Example usage\nn = 4\nprint(find_optimal_chocolate_bar(n))  # Output should be (4, 3) or any other valid solutio