import logging\nimport threading\nimport time\n\n# Initialize a lock for thread safety\nlock = threading.Lock()\nsequence_number = 0\n\ndef get_unique_timestamp():\n    global sequence_number\n    with lock:\n        current_time = time.monotonic_ns()  # Get the current monotonic time in nanoseconds\n        sequence_number += 1  # Increment the sequence number\n        return f"{current_time:024d}-{sequence_number}"  # Format as string\n\n# Configure logging to use our custom timestamp function\nlogging.basicConfig(format='%(asctime)s - %(message)s', datefmt=get_unique_timestamp)\n\ndef log_event():\n    for i in range(5):\n        time.sleep(0.1)  # Simulate some processing delay\n        logging.info(f"Event {i}")\n\n# Example usage with multiple threads\nthreads = [threading.Thread(target=log_event) for _ in range(3)]\n\nfor thread in threads:\n    thread.start()\n\nfor thread in threads:\n    thread.join()