import math\n\ndef distance(p1, p2):\n    return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)\n\ndef gld(points):\n    # Ensure the points are in order to form a polygon\n    n = len(points)\n    if n < 2:\n        return 0\n\n    max_distance = 0\n    j = 1\n    for i in range(n):\n        # This inner loop will make sure j is always ahead of i and points are maximally spread out radially.\n        while True:\n            dist = distance(points[i], points[j])\n            if dist > max_distance:\n                max_distance = dist\n            # Move j to the next point in a circular manner\n            next_j = (j + 1) % n\n            if distance(points[i], points[next_j]) <= dist or next_j == i:\n                break\n            j = next_j\n\n    return max_distance\n\n# Example usage:\npoints = [(0, 0), (1, 0), (2, 1), (3, 0), (4, 0)]\nprint(gld(points))