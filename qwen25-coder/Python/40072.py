import numpy as np\nfrom scipy.spatial.distance import cdist\n\ndef greedy_assignment(source_points, destination_points):\n    # Calculate distance matrix between all source and destination points\n    distance_matrix = cdist(source_points, destination_points)\n    \n    # Initialize an array to keep track of assigned sources for each destination\n    assignments = [-1] * len(destination_points)\n    \n    # Sort distances by closest first\n    sorted_indices = np.argsort(distance_matrix, axis=0)\n    \n    # Assign source points to destinations starting from the nearest distance\n    for i in range(len(sorted_indices)):\n        for j in range(len(sorted_indices[i])):\n            if assignments[j] == -1:\n                # Check if this source point is not already assigned\n                if sorted_indices[i][j] not in assignments:\n                    assignments[j] = sorted_indices[i][j]\n                    break\n    \n    return assignments\n\n# Example usage\nsource_points = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])\ndestination_points = np.array([[1, 2, 3], [4, 5, 6]])\n\nassignments = greedy_assignment(source_points, destination_points)\nprint(assignments)