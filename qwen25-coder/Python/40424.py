import hashlib\n\nclass MerkleTree:\n    def __init__(self, leaves):\n        self.leaves = leaves\n        self.tree = self.build_tree()\n\n    def build_tree(self):\n        levels = [leaves]\n        while len(levels[-1]) > 1:\n            levels.append([hashlib.sha256(left.encode() + right.encode()).hexdigest()\n                           for left, right in zip(*[iter(levels[-1])] * 2)])\n        return levels\n\n    def root_hash(self):\n        return self.tree[-1][0]\n\ndef calculate_diff(local_hashes, server_tree):\n    """Calculate the differences between local and server hashes."""\n    required_updates = []\n    for local, server in zip(local_hashes, server_tree[0]):\n        if local != server:\n            required_updates.append(server)\n    return required_updates\n\n# Example usage\nserver_records = ["record1", "record2", "record3"]  # Server-side data records\nclient_records = ["record1", "record_old", "record3"]  # Client's data records\n\nserver_hashes = [hashlib.sha256(record.encode()).hexdigest() for record in server_records]\nlocal_hashes = [hashlib.sha256(record.encode()).hexdigest() for record in client_records]\n\n# Simulate a server with a Merkle tree\nserver_tree = MerkleTree(server_hashes)\n\nupdates_needed = calculate_diff(local_hashes, server_tree.tree)\nprint("Updates needed:", updates_needed)