import subprocess\n\ndef get_issuer_asn1_length(pem_file):\n    # Read the PEM file and process each certificate\n    with open(pem_file, 'r') as file:\n        cert_data = file.read()\n    \n    # Split into individual certificates (in case there are more than one)\n    certs = cert_data.strip().split('\n-----END CERTIFICATE-----\n')\n    certs = [f"{cert}-----END CERTIFICATE-----" for cert in certs if cert]\n\n    total_length = 0\n    for cert in certs:\n        # Extract issuer name as DER encoded data\n        result = subprocess.run(\n            ['openssl', 'x509', '-inform', 'pem', '-issuer_name', '-noout'],\n            input=cert.encode(),\n            capture_output=True,\n            text=True,\n            check=True\n        )\n\n        # Get the issuer in a format that can be DER encoded\n        issuer_dn = result.stdout.strip()\n\n        # Get the ASN.1 length of the issuer name\n        if issuer_dn:\n            der_length = subprocess.run(\n                ['openssl', 'asn1parse', '-inform', 'pem', '-noout'],\n                input=f"-----BEGIN CERTIFICATE-----\n{cert.split('-----END CERTIFICATE-----')[0]}\n-----END CERTIFICATE-----".encode(),\n                capture_output=True,\n                text=True,\n                check=True\n            )\n            \n            # Extract the length from the output manually (this is a simplified approach)\n            lines = der_length.stdout.strip().split('\n')\n            issuer_line = next((line for line in lines if '[Issuer]' in line), None)\n            if issuer_line:\n                _, offset, size, _, _ = issuer_line.split(': ', 1)[1].split(None, 4)\n                total_length += int(size)\n\n    return total_length\n\n# Usage\npem_file_path = 'path/to/your/trusted_certs.pem'\ntotal_issuer_length = get_issuer_asn1_length(pem_file_path)\nprint(f"Total ASN.1 length of Issuer strings: {total_issuer_length} bytes")