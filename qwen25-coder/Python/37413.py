def rpn_to_infix(expression):\n    stack = []\n    operators = set(['+', '-', '*', '/'])\n\n    for token in expression.split():\n        if token not in operators:\n            stack.append(token)\n        else:\n            # Pop two operands from the stack.\n            operand2 = stack.pop()\n            operand1 = stack.pop()\n\n            # Form a new expression and push it back to the stack.\n            new_expr = f"({operand1} {token} {operand2})"\n            stack.append(new_expr)\n\n    # The final element in the stack is the infix expression.\n    return stack[0]\n\n# Example usage:\nrpn_expression = "3 4 + 5 *"\ninfix_expression = rpn_to_infix(rpn_expression)\nprint(infix_expression)  # Output: ((3 + 4) * 5)