import datetime\n\ndef custom_date_decoder(encoded_value):\n    # Base date: 1900-01-01\n    base_date = datetime.date(1900, 1, 1)\n    \n    # Extracting the main part of the value (without lower bits)\n    main_part = encoded_value >> 20\n    \n    # Assuming each increment by 1 in main_part represents a certain number of days\n    # This is a simplistic mapping; actual function can be more complex\n    # Adjust based on your observation data points\n    if main_part < 0x40:\n        additional_days = (main_part - 0x40) * 365\n    elif main_part >= 0x41 and main_part < 0x48:\n        additional_days = ((main_part - 0x41) * 365) + 365\n    else:\n        # You should refine this mapping as per your data points\n        additional_days = (main_part - 0x40) * (2*365)\n    \n    return base_date + datetime.timedelta(days=additional_days)\n\n# Example usage\nencoded_value = 0x40D10000\ndecoded_date = custom_date_decoder(encoded_value)\nprint(decoded_date.strftime('%m/%d/%Y'))