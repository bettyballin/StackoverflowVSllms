import cherrypy\nfrom concurrent.futures import ThreadPoolExecutor\n\n# Configure server configuration with thread pool\nclass MyApp:\n    def __init__(self):\n        self.executor = ThreadPoolExecutor(max_workers=4)  # Adjust max_workers as needed\n\n    @cherrypy.expose\n    def index(self):\n        return "Welcome to the Python Hosting Control Panel!"\n\n    @cherrypy.expose\n    def create_project(self, framework='Django'):\n        # Offload long-running task to a background thread\n        future = self.executor.submit(self._create_project_in_background, framework)\n        return f"Project creation for {framework} started. Check back later."\n\n    def _create_project_in_background(self, framework):\n        # Simulate long-running task\n        import time\n        time.sleep(10)  # Replace with actual project creation logic\n        print(f"Created new {framework} project")\n\nif __name__ == '__main__':\n    cherrypy.config.update({'server.socket_host': '0.0.0.0',\n                            'server.socket_port': 8080,\n                            })\n    cherrypy.quickstart(MyApp())