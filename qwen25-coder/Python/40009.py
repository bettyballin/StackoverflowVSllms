# This is a very simplified example, actual libraries and algorithms are much more complex\n\nclass State:\n    def __init__(self, name):\n        self.name = name\n        self.edges = {}\n\n    def add_edge(self, symbol, state):\n        if symbol in self.edges:\n            self.edges[symbol].append(state)\n        else:\n            self.edges[symbol] = [state]\n\ndef regex_to_nfa(pattern):\n    # Extremely simplified version of regex to NFA conversion\n    start_state = State('start')\n    end_state = State('end')\n    \n    current_state = start_state\n    \n    for symbol in pattern:\n        new_state = State(symbol)\n        current_state.add_edge(symbol, new_state)\n        current_state = new_state\n        \n    current_state.add_edge('', end_state)  # Add epsilon transition to end state\n    return start_state, end_state\n\n# Example usage\nnfa_start, nfa_end = regex_to_nfa('a*b')\nprint(f"Simple NFA created with start: {nfa_start.name} and end: {nfa_end.name}")\n\n# Further steps: convert NFA to DFA, minimize it, etc.