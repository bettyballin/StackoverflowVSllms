def base_31_value(char):\n    """Convert a character to its corresponding numeric value."""\n    values = "0123456789ABCDEFGHJKLMNPQRTUWXY"\n    return values.index(char)\n\ndef add_mod_31(a, b):\n    """Add two numbers and take modulo 31."""\n    return (a + b) % 31\n\ndef double_mod_31(value):\n    """Double a value, if it's greater than or equal to 31 subtract 31 until result is less than 31."""\n    doubled = value * 2\n    while doubled >= 31:\n        doubled -= 31\n    return doubled\n\ndef luhn_base_31(value):\n    """Compute the Luhn-like check digit for a base-31 string."""\n    sum_value = 0\n    reversed_value = value[::-1]\n    \n    for i, char in enumerate(reversed_value):\n        num_val = base_31_value(char)\n        \n        if i % 2 == 1:\n            doubled_num_val = double_mod_31(num_val)\n            sum_value = add_mod_31(sum_value, doubled_num_val)\n        else:\n            sum_value = add_mod_31(sum_value, num_val)\n    \n    # Find the check digit that makes the total sum a multiple of 31\n    check_digit = (31 - (sum_value % 31)) % 31\n    \n    return check_digit\n\n# Example usage\nvalue_to_check = "012345678"\ncheck_digit = luhn_base_31(value_to_check)\nprint(f"Check digit for {value_to_check} is: {check_digit}")