import heapq\nfrom collections import defaultdict\n\ndef incremental_k_core(graph, initial_k, new_vertex_edges):\n    # Initialize the coreness of each node\n    degrees = {node: len(neighbors) for node, neighbors in graph.items()}\n    heap = [(-degrees[node], node) for node in graph if degrees[node] >= initial_k]\n    heapq.heapify(heap)\n    \n    # Initial k-core nodes\n    core_nodes = set(node for _, node in heap)\n    \n    # Process the heap to form k-core\n    while heap:\n        neg_degree, node = heapq.heappop(heap)\n        degree = -neg_degree\n        if degree < initial_k:\n            continue\n        \n        core_nodes.add(node)\n        for neighbor in graph[node]:\n            if degrees[neighbor] >= initial_k and neighbor not in core_nodes:\n                degrees[neighbor] -= 1\n                heapq.heappush(heap, (-degrees[neighbor], neighbor))\n    \n    # Add new vertex and its edges\n    graph[new_vertex_edges[0]] = set(new_vertex_edges[1:])\n    for edge in new_vertex_edges[1:]:\n        if edge in graph:\n            graph[edge].add(new_vertex_edges[0])\n        else:\n            graph[edge] = {new_vertex_edges[0]}\n    \n    # Update the degrees and heap for new connections\n    new_node_degree = len(new_vertex_edges) - 1\n    if new_node_degree >= initial_k:\n        heapq.heappush(heap, (-new_node_degree, new_vertex_edges[0]))\n    \n    additional_nodes_to_process = set()\n    for edge in new_vertex_edges[1:]:\n        if degrees[edge] < initial_k and degrees[edge] + 1 >= initial_k:\n            additional_nodes_to_process.add(edge)\n    \n    while additional_nodes_to_process:\n        node_to_check = additional_nodes_to_process.pop()\n        heapq.heappush(heap, (-degrees[node_to_check], node_to_check))\n        \n        for neighbor in graph[node_to_check]:\n            if degrees[neighbor] >= new_node_degree + 1 and neighbor not in core_nodes:\n                degrees[neighbor] -= 1\n                heapq.heappush(heap, (-degrees[neighbor], neighbor))\n    \n    return core_nodes\n\n# Example usage:\ngraph = {\n    'A': {'B', 'C', 'D'},\n    'B': {'A', 'F'},\n    'C': {'A', 'F'},\n    'D': {'A', 'E'},\n    'E': {'D'}\n}\n\ninitial_k = 2\nnew_vertex_edges = ('F', 'B', 'C')  # Node F with edges to B and C\n\nupdated_core = incremental_k_core(graph, initial_k, new_vertex_edges)\nprint("Updated k-core:", updated_core)