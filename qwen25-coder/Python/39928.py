import asyncio\n\nclass Client:\n    def __init__(self, max_queue_size=10):\n        self.queue = asyncio.Queue(maxsize=max_queue_size)\n\n    async def process_notification(self, notification):\n        print(f"Processing: {notification}")\n        await asyncio.sleep(1)  # Simulate time taken to process the message\n\n    async def push_notification(self, notification):\n        try:\n            await self.queue.put(notification)\n            print(f"Notification added to queue: {notification}")\n        except asyncio.QueueFull:\n            print("Queue is full, not adding new notification")\n\nasync def main():\n    client = Client(max_queue_size=5)\n    tasks = []\n\n    # Simulating a series of rapid notifications\n    for i in range(10):\n        task = client.push_notification(f"Notification {i}")\n        tasks.append(task)\n\n    await asyncio.gather(*tasks)\n\n    while not client.queue.empty():\n        notification = await client.queue.get()\n        await client.process_notification(notification)\n        client.queue.task_done()\n\n# Running the main function\nasyncio.run(main())