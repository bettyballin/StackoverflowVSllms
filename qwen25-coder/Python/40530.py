def has_cycle_util(graph, v, visited, parent):\n    # Mark the current node as visited\n    visited[v] = True\n\n    # Recur for all vertices adjacent to this vertex\n    for neighbor in graph[v]:\n        if not visited[neighbor]:\n            if has_cycle_util(graph, neighbor, visited, v):\n                return True\n        elif neighbor != parent:  # If an adjacent vertex is visited and not parent of current vertex,\n                                  # then there is a cycle.\n            return True\n\n    return False\n\ndef has_cycle(graph):\n    n = len(graph)\n    visited = [False] * n  # Initially all vertices are unvisited\n\n    for i in range(n):  # Check for cycle in different DFS trees\n        if not visited[i]:  # Don't recur for u if it is already visited\n            if has_cycle_util(graph, i, visited, -1):\n                return True\n    return False\n\n# Example usage:\ngraph = {\n    0: [1, 2],\n    1: [2],  # There's a cycle here (0 -> 1 -> 2)\n    2: [0],\n    3: [4],\n    4: [],\n}\n\nprint(has_cycle(graph))  # Output: True