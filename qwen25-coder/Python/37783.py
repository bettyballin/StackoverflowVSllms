def get_ancestors(individual_id, child_table):\n    parents = []\n    # Get parents (father and mother) using individual_id\n    while individual_id:\n        found = False\n        for record in child_table:\n            if record['child_id'] == individual_id:\n                if record['father_id']:\n                    parents.append(record['father_id'])\n                if record['mother_id']:\n                    parents.append(record['mother_id'])\n                individual_id = next((record['father_id'], record['mother_id'])[::2], None)  # Pick the first available parent\n                found = True\n        if not found:\n            break\n    return set(parents)\n\ndef calculate_relationship(individual_a, individual_b, child_table, gender_map):\n    ancestors_a = get_ancestors(individual_a, child_table)\n    ancestors_b = get_ancestors(individual_b, child_table)\n\n    # Find common ancestors\n    common_ancestors = ancestors_a.intersection(ancestors_b)\n    \n    if not common_ancestors:\n        return "No relation"\n\n    # Calculate the depth to each common ancestor from both individuals\n    def depth_to_common(id, common_id):\n        depth = 0\n        current_id = id\n        tree = child_table[::-1]  # Reverse tree traversal for upwards path\n        while current_id != common_id:\n            for record in tree:\n                if record['father_id'] == current_id or record['mother_id'] == current_id:\n                    if record['father_id'] == current_id:\n                        current_id = record['child_id']\n                    else:\n                        current_id = record['child_id']\n                    depth += 1\n        return depth\n\n    relation_a_to_b_depths = []\n    relation_b_to_a_depths = []\n\n    for common in common_ancestors:\n        a_depth = depth_to_common(individual_a, common)\n        b_depth = depth_to_common(individual_b, common)\n        relation_a_to_b_depths.append(a_depth - b_depth)\n        relation_b_to_a_depths.append(b_depth - a_depth)\n\n    # Determine relationship based on depth\n    def determine_relationship(depth_diff, gender):\n        if depth_diff == 0:\n            return "sibling"\n        elif depth_diff > 0:\n            if abs(depth_diff) == 1:\n                return "ancestor" if gender != 'F' else "ancestress"\n            elif abs(depth_diff) == 2 and gender == 'M':\n                return "grandfather"\n            elif abs(depth_diff) == 2 and gender == 'F':\n                return "grandmother"\n        elif depth_diff < 0:\n            if abs(depth_diff) == 1:\n                return "descendant" if gender != 'M' else "descendantrix"\n            elif abs(depth_diff) == 2 and gender == 'M':\n                return "grandson"\n            elif abs(depth_diff) == 2 and gender == 'F':\n                return "granddaughter"\n\n        # Calculate cousins\n        generations_apart = abs(depth_diff)\n        if generations_apart > 1:\n            cousin_suffix = {3: "", 4: "great-", 5: "great-great-"}\n            if depth_diff < 0:\n                prefix = "niece" if gender == 'F' else "nephew"\n            else:\n                prefix = "aunt" if gender == 'F' else "uncle"\n            return f"{cousin_suffix.get(generations_apart, 'great-'*(generations_apart-4))}{prefix}"\n\n    gender_a = gender_map[individual_a]\n    for depth in relation_a_to_b_depths:\n        relationship_ab = determine_relationship(depth, gender_a)\n        if relationship_ab:\n            break\n\n    gender_b = gender_map[individual_b]\n    for depth in relation_b_to_a_depths:\n        relationship_ba = determine_relationship(-depth, gender_b)  # Negate depth because we're reversing the direction\n        if relationship_ba:\n            break\n\n    return relationship_ab, relationship_ba\n\n# Example usage\nindividual_table = {\n    '1': {'gender': 'M'},  # John\n    '2': {'gender': 'F'},  # Mary\n    # ... more individuals ...\n}\n\nchild_table = [\n    {'child_id': '3', 'father_id': '1', 'mother_id': '2'},\n    # ... more children relationships ...\n]\n\nprint(calculate_relationship('1', '3', child_table, individual_table))