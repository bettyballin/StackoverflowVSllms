import numpy as np\n\ndef create_matrix(grid):\n    size = len(grid)\n    mat = np.zeros((size * size, size * size), dtype=int)\n    target = [1] * (size * size)  # All buttons need to be toggled an odd number of times\n    \n    for i in range(size):\n        for j in range(size):\n            idx = i * size + j\n            mat[idx][idx] ^= 1  # Self effect\n            \n            if grid[i][j] in ('+', '#'):\n                if i > 0: mat[idx][(i-1) * size + j] ^= 1  # Above\n                if i < size - 1: mat[idx][(i+1) * size + j] ^= 1  # Below\n            \n            if grid[i][j] in ('|', '#'):\n                if j > 0: mat[idx][i * size + (j-1)] ^= 1  # Left\n                if j < size - 1: mat[idx][i * size + (j+1)] ^= 1  # Right\n            \n            if grid[i][j] == '#' and i > 0 and j > 0:\n                mat[idx][(i-1) * size + (j-1)] ^= 1  # Top-left\n            if grid[i][j] == '#' and i > 0 and j < size - 1:\n                mat[idx][(i-1) * size + (j+1)] ^= 1  # Top-right\n            if grid[i][j] == '#' and i < size - 1 and j > 0:\n                mat[idx][(i+1) * size + (j-1)] ^= 1  # Bottom-left\n            if grid[i][j] == '#' and i < size - 1 and j < size - 1:\n                mat[idx][(i+1) * size + (j+1)] ^= 1  # Bottom-right\n    \n    return mat, target\n\ndef is_solvable(grid):\n    mat, target = create_matrix(grid)\n    aug_mat = np.column_stack((mat, target))\n    \n    rank = np.linalg.matrix_rank(mat)\n    full_rank = np.linalg.matrix_rank(aug_mat)\n    \n    return rank == full_rank\n\n# Example usage\ngrid_example = [\n    ['o', '-', '#'],\n    ['-', '+', '-'],\n    ['#', '|', 'o']\n]\nprint(is_solvable(grid_example))  # True or False depending on the configuratio