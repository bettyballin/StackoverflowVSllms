import cv2\nimport numpy as np\n\ndef calculate_histogram(frame):\n    # Convert image to HSV color space\n    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)\n    # Calculate histogram\n    hist = cv2.calcHist([hsv], [0, 1], None, [180, 256], [0, 180, 0, 256])\n    cv2.normalize(hist, hist)\n    return hist\n\ndef compare_histograms(hist1, hist2):\n    # Compare histograms using Bhattacharyya distance\n    distance = cv2.compareHist(hist1, hist2, cv2.HISTCMP_BHATTACHARYYA)\n    return distance\n\ndef find_representative_frame(frames):\n    histograms = [calculate_histogram(frame) for frame in frames]\n    \n    distances = {}\n    num_frames = len(histograms)\n    if num_frames < 3:\n        raise ValueError("Not enough frames provided.")\n\n    # Calculate average distance from each frame\n    for i, hist_i in enumerate(histograms):\n        total_distance = sum(compare_histograms(hist_i, hist_j) for j, hist_j in enumerate(histograms) if i != j)\n        avg_distance = total_distance / (num_frames - 1)\n        distances[i] = avg_distance\n\n    # Find the frame with a moderate distance indicating it's representative\n    sorted_distances = sorted(distances.items(), key=lambda x: (-x[1], x[0]))  # Sort by decreasing distance, then increasing index\n    return frames[sorted_distances[num_frames // 2][0]]  # Choose middle ranked one\n\n# Example usage:\n# frames = [frame1, frame2, ..., frame30]  # Preloaded set of video frames\n# thumbnail = find_representative_frame(frames)