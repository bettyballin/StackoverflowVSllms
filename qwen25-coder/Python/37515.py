import gi\ngi.require_version('Gtk', '3.0')\nfrom gi.repository import Gtk, Gdk\n\nclass SimpleTextEditor(Gtk.Window):\n    def __init__(self):\n        super(SimpleTextEditor, self).__init__(title="Simple Text Editor")\n        self.set_border_width(10)\n        self.set_default_size(450, 300)\n\n        # Create a TextView and associated ScrolledWindow\n        self.textview = Gtk.TextView()\n        scrolled_window = Gtk.ScrolledWindow(hexpand=True, vexpand=True)\n        scrolled_window.add(self.textview)\n        self.add(scrolled_window)\n\n        # Connect key events to handle undo\n        self.textview.connect('key-press-event', self.on_key_press_event)\n\n        # Initialize the undo stack\n        self.undo_stack = []\n        self.redo_stack = []\n\n    def on_key_press_event(self, widget, event):\n        if Gdk.keyval_name(event.keyval) == 'z' and (event.state & Gdk.ModifierType.CONTROL_MASK):\n            self.on_undo()\n        elif Gdk.keyval_name(event.keyval) == 'y' and (event.state & Gdk.ModifierType.CONTROL_MASK):\n            self.on_redo()\n\n    def on_text_changed(self, buffer):\n        # Save current text state to undo stack\n        start_iter = buffer.get_start_iter()\n        end_iter = buffer.get_end_iter()\n        text_content = buffer.get_text(start_iter, end_iter, True)\n        \n        if not self.undo_stack or self.undo_stack[-1] != text_content:\n            self.undo_stack.append(text_content)\n            # Clear the redo stack when a new action is done\n            self.redo_stack.clear()\n\n    def on_undo(self):\n        if len(self.undo_stack) > 1:\n            # Move current state to redo stack\n            last_state = self.undo_stack.pop()\n            self.redo_stack.append(last_state)\n            \n            # Restore previous state from undo stack\n            prev_state = self.undo_stack[-1]\n            self.update_text_buffer(prev_state)\n\n    def on_redo(self):\n        if self.redo_stack:\n            # Move current redo state to undo stack\n            next_state = self.redo_stack.pop()\n            self.undo_stack.append(next_state)\n            \n            # Update buffer with redo state\n            self.update_text_buffer(next_state)\n\n    def update_text_buffer(self, text):\n        buffer = self.textview.get_buffer()\n        buffer.set_text(text, len(text))\n\nwin = SimpleTextEditor()\nwin.connect("destroy", Gtk.main_quit)\nbuffer = win.textview.get_buffer()\nbuffer.connect('changed', win.on_text_changed)\nwin.show_all()\nGtk.main()