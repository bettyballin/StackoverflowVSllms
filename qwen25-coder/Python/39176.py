from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.backends import default_backend\nimport os\n\n# Function to generate a key and store it in a safe place\ndef generate_key():\n    key = os.urandom(32)  # AES-256 bit key\n    with open('/path/to/secure/keyfile.bin', 'wb') as f:\n        f.write(key)\n    return key\n\n# Function to encrypt a password\ndef encrypt_password(password, key):\n    iv = os.urandom(16)  # Initialization vector for AES block cipher\n    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())\n    encryptor = cipher.encryptor()\n    padded_password = pad_data(password.encode(), algorithms.AES.block_size)\n    encrypted_password = encryptor.update(padded_password) + encryptor.finalize()\n    return iv, encrypted_password\n\n# Padding function to ensure the data is a multiple of block size\ndef pad_data(data, block_size):\n    padding_length = (block_size - len(data) % block_size) or block_size\n    padding = bytes([padding_length] * padding_length)\n    return data + padding\n\n# Example usage\nif __name__ == "__main__":\n    key_file_path = '/path/to/secure/keyfile.bin'\n    if not os.path.exists(key_file_path):\n        key = generate_key()\n    else:\n        with open(key_file_path, 'rb') as f:\n            key = f.read()\n\n    password = "my_secure_password"\n    iv, encrypted_password = encrypt_password(password, key)\n\n    print(f"IV: {iv.hex()}")\n    print(f"Encrypted Password: {encrypted_password.hex()}")