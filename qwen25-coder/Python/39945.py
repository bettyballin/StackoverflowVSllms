from django.utils import timezone\nfrom .models import Appointment\nfrom datetime import timedelta, date\n\ndef _create_appointment(start_date, end_date=None, recurrence_type='WEEKLY', interval=1, occurrences=None):\n    appointment = Appointment.objects.create(\n        start_time=start_date,\n        end_time=end_date or start_date + timedelta(hours=1),\n        recurrence_type=recurrence_type,  # 'DAILY', 'WEEKLY', 'MONTHLY', etc.\n        interval=interval,\n        occurrences=occurrences\n    )\n    return appointment\n\nclass RecurringAppointmentTest(TestCase):\n    def test_single_appointment(self):\n        start_date = timezone.now()\n        appointment = _create_appointment(start_date)\n        self.assertEqual(Appointment.objects.filter(start_time=start_date).count(), 1)\n\n    def test_weekly_recurrence(self):\n        start_date = date(2023, 9, 1)  # Assuming this is a Friday\n        appointment = _create_appointment(start_date, recurrence_type='WEEKLY', occurrences=4)\n        appointments = Appointment.objects.filter(start_time__gte=start_date).order_by('start_time')\n        expected_dates = [start_date + timedelta(weeks=i*1) for i in range(4)]\n        actual_dates = [app.start_time.date() for app in appointments]\n        self.assertEqual(expected_dates, actual_dates)\n\n    def test_monthly_recurrence(self):\n        start_date = date(2023, 9, 30)\n        appointment = _create_appointment(start_date, recurrence_type='MONTHLY', occurrences=4)\n        appointments = Appointment.objects.filter(start_time__gte=start_date).order_by('start_time')\n        expected_dates = [date(2023, m % 12 + (m // 12) * 12, 30 if m != 1 else 28) for m in range(9, 13)]\n        actual_dates = [app.start_time.date() for app in appointments]\n        self.assertEqual(expected_dates, actual_dates)