import random\nfrom collections import defaultdict\n\nclass FlickrPhotoCache:\n    def __init__(self):\n        self.cache = defaultdict(list)  # Tag -> list of photo objects\n    \n    def fetch_photos_from_flickr(self, tags):\n        # Simulate API call to fetch photos based on tags\n        return [{'id': i, 'url': f'http://example.com/photo{i}', 'tags': tags} for i in range(50)]\n    \n    def update_cache(self, tag):\n        if not self.cache[tag]:\n            new_photos = self.fetch_photos_from_flickr(tag)\n            self.cache[tag].extend(new_photos)\n    \n    def get_random_photos(self, tag, count=15):\n        self.update_cache(tag)\n        return random.sample(self.cache[tag], min(count, len(self.cache[tag])))\n    \n    def mark_irrelevant(self, photo_id, tag):\n        self.cache[tag] = [p for p in self.cache[tag] if p['id'] != photo_id]\n\n# Example usage\nflickr_cache = FlickrPhotoCache()\nphotos = flickr_cache.get_random_photos('landscape')\nfor photo in photos:\n    print(photo)