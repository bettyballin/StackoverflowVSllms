function buildBVH(objects):\n    if length(objects) <= 1:\n        return new Node(objects)\n    \n    // Compute bounds for all objects\n    bounds = [object.bounds for object in objects]\n    \n    // Find the axis and center for splitting\n    centroidBounds = Bounds.enclosingAll(bounds)\n    longestAxisIndex = centroidBounds.longestAxis()\n    midPoint = (centroidBounds.min + centroidBounds.max) / 2.0\n    \n    // Split based on median along the longest axis\n    left, right = partition(objects, longestAxisIndex, midPoint)\n    \n    // Recursively build children\n    leftNode = buildBVH(left)\n    rightNode = buildBVH(right)\n    \n    return new Node([leftNode, rightNode], centroidBounds)\n\nfunction partition(objects, axisIndex, midPoint):\n    // Separate objects based on the split plane defined by axis and midpoint\n    ...