def topological_sort_dfs(graph):\n    visited = set()\n    result = []\n\n    def dfs(node):\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                dfs(neighbor)\n        result.append(node)\n\n    # Start DFS from each node that has no incoming edges, or from any node if none exists\n    for node in graph:\n        if node not in visited:\n            dfs(node)\n\n    return result[::-1]  # Reverse the result to get topological order\n\n# Create a graph based on given relations\ngraph = {\n    'A': {'B', 'P'},\n    'B': {'C'},\n    'C': set(),\n    'P': {'Q'},\n    'Q': set()\n}\n\nsorted_order = topological_sort_dfs(graph)\nprint("".join(sorted_order))