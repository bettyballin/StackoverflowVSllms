import os\nimport hashlib\n\nBLOCK_SIZE = 1024 * 1024  # 1MB\n\ndef hash_block(block):\n    return hashlib.sha256(block).hexdigest()\n\ndef deduplicate_file(file_path, known_blocks):\n    with open(file_path, 'rb') as file:\n        block_hash_map = {}\n        for offset in range(0, os.path.getsize(file_path), BLOCK_SIZE):\n            file.seek(offset)\n            data = file.read(BLOCK_SIZE)\n            if not data:  # end of file\n                break\n\n            hash_value = hash_block(data)\n            if hash_value not in known_blocks:\n                # Only store the block if it's new\n                block_hash_map[hash_value] = data\n                known_blocks.add(hash_value)\n\n    return block_hash_map, known_blocks\n\n# Usage\nknown_blocks = set()\nblocks_to_store, updated_known_blocks = deduplicate_file('example.txt', known_blocks)