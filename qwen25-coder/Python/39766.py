import hashlib\nfrom datetime import datetime\nfrom cryptography.hazmat.primitives.asymmetric import padding\nfrom cryptography.hazmat.primitives import hashes\n\nclass NicknameService:\n    def __init__(self):\n        self.nick_registry = {}\n\n    def register_nickname(self, nickname, public_key, signature):\n        if nickname in self.nick_registry:\n            return "Nickname already registered"\n\n        # Verify the signature using the provided public key\n        try:\n            public_key.verify(\n                signature,\n                f"{nickname}-{datetime.now().isoformat()}".encode(),\n                padding.PSS(\n                    mgf=padding.MGF1(hashes.SHA256()),\n                    salt_length=padding.PSS.MAX_LENGTH\n                ),\n                hashes.SHA256()\n            )\n        except Exception as e:\n            return "Failed to verify signature"\n\n        # Store nickname with public key and timestamp\n        self.nick_registry[nickname] = {\n            'public_key': public_key,\n            'timestamp': datetime.now().isoformat()\n        }\n        return "Nickname registered successfully"\n\n# Example usage would involve generating keys, creating a signature, and sending it to the register_nickname method.