def reduce_permutation(perm):\n    # Step 1: Identify and remove runs, replacing them with the smallest element of the run.\n    n = len(perm)\n    i = 0\n    run_mapping = {}\n    reduced_perm = []\n    \n    while i < n:\n        start = i\n        while i + 1 < n and perm[i] < perm[i + 1]:\n            i += 1\n        # We found a run from start to i\n        smallest_in_run = min(perm[start:i+1])\n        for j in range(start, i + 1):\n            run_mapping[perm[j]] = smallest_in_run\n        reduced_perm.append(smallest_in_run)\n        i += 1\n    \n    # Step 2: Map the unique elements of the reduced permutation to a sequence starting from 1.\n    unique_elements = sorted(set(reduced_perm))\n    element_to_new_value = {e: idx + 1 for idx, e in enumerate(unique_elements)}\n    \n    # Step 3: Create the final reduced permutation using the above mapping\n    final_reduced_perm = [element_to_new_value[e] for e in reduced_perm]\n    \n    return final_reduced_perm, run_mapping\n\ndef reconstruct_from_mapping(reduced_perm, run_mapping):\n    # Reverse map from the reduced perm to get back elements of runs.\n    original_perm = []\n    unique_elements = sorted(set(reduced_perm))\n    mapping_back = {idx+1: e for idx, e in enumerate(unique_elements)}\n    \n    for num in reduced_perm:\n        smallest_in_run = mapping_back[num]\n        run = [k for k, v in run_mapping.items() if v == smallest_in_run]\n        original_perm.extend(run)\n        \n    # Ensure the order by original permutation\n    return sorted(original_perm)\n\n# Example usage\nperm = [2, 3, 4, 1, 5, 6]\nreduced_perm, run_mapping = reduce_permutation(perm)\nprint("Reduced Permutation:", reduced_perm)\noriginal_perm = reconstruct_from_mapping(reduced_perm, run_mapping)\nprint("Reconstructed Original Permutation:", original_perm)