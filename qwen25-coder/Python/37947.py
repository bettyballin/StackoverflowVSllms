def is_cyclic_util(graph, v, visited, rec_stack):\n    # Mark current node as visited and adds to recursion stack\n    visited[v] = True\n    rec_stack[v] = True\n\n    # Recur for all vertices adjacent to this vertex\n    for neighbor in graph[v]:\n        if not visited[neighbor]:\n            if is_cyclic_util(graph, neighbor, visited, rec_stack):\n                return True\n        elif rec_stack[neighbor]:\n            return True\n\n    # Remove the vertex from recursion stack\n    rec_stack[v] = False\n    return False\n\ndef is_cyclic(graph):\n    visited = [False] * len(graph)\n    rec_stack = [False] * len(graph)\n\n    for node in range(len(graph)):\n        if not visited[node]:\n            if is_cyclic_util(graph, node, visited, rec_stack):\n                return True\n    return False\n\n# Example usage:\ngraph = {0: [1], 1: [2], 2: [3], 3: [4], 4: [], 5: [0]}  # Graph with a cycle at the end\nprint(is_cyclic(graph))  # Output: True