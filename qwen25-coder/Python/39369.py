function findPeaks(signal, sampling_interval):\n    smooth_signal = applySmoothingFilter(signal)\n    derivative = computeFirstDerivative(smooth_signal)\n    peaks = []\n    \n    for i from 1 to length(derivative) - 2:\n        if derivative[i-1] < 0 and derivative[i] > 0:  # Zero crossing upwards\n            if isLocalMaxima(signal, i):\n                peak_value = signal[i]\n                if peak_value > threshold:\n                    peaks.append((i * sampling_interval, peak_value))\n    \n    return filterPeaks(peaks)\n\nfunction applySmoothingFilter(signal):\n    // Apply a moving average or Gaussian filter to the signal\n    filtered_signal = smoothed(version of signal)\n    return filtered_signal\n\nfunction computeFirstDerivative(signal):\n    derivative = [signal[i+1] - signal[i-1] for i from 1 to length(signal) - 2]\n    return derivative\n\nfunction isLocalMaxima(signal, index):\n    if signal[index] > signal[index-1] and signal[index] > signal[index+1]:\n        return True\n    return False\n\nfunction filterPeaks(peaks):\n    // Filter peaks based on amplitude, time consistency, or other criteria\n    filtered_peaks = [p for p in peaks if isDesiredPeak(p)]\n    return filtered_peaks\n\nfunction isDesiredPeak(peak):\n    // Check each peak against your specific criteria\n    return True  # Example conditio