from cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import padding\nfrom cryptography.hazmat.primitives import hashes\n\n# Load the public key\npublic_key = """\n-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDfG4IuFO2h/LdDNmonwGNw5srW\nnUEWzoBrPRF1NM8LqpOMD45FAPtZ1NmPtHGo0BAS1UsyJEGXx0NPJ8Gw1z+huLrl\nXnAVX5B4ec6cJfKKmpL/l94WhP2v8F3OGWrnaEX1mLMoxe124Pcfamt0SPCGkeal\nVvXw13PLINE/YptjkQIDAQAB\n-----END PUBLIC KEY-----\n"""\n\n# Decode the public key from PEM format\npublic_key = serialization.load_pem_public_key(public_key.encode())\n\n# The data and signature should be bytes, not strings.\ndata = b"your_original_data_string_here"\nsignature = b"your_signature_in_bytes_here"\n\ntry:\n    # Verify the signature\n    public_key.verify(\n        signature,\n        data,\n        padding.PKCS1v15(),\n        hashes.SHA1()\n    )\n    print("Signature is valid.")\nexcept Exception as e:\n    print("Signature is invalid: {}".format(e))