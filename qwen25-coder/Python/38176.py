import base64\n\ndef generate_ticket_code(event_id, order_id, ticket_number, salt):\n    # Example of combining information: 10 digits for each field (assuming all are numeric)\n    combined_str = f"{event_id:05d}{order_id:07d}{ticket_number:03d}"\n    \n    # Convert to bytes\n    combined_bytes = combined_str.encode()\n    \n    # XOR with salt for obfuscation. For simplicity, we repeat salt if it's shorter than our input.\n    obfuscated_bytes = bytearray([a ^ b for a, b in zip(combined_bytes, (salt * (len(combined_bytes) // len(salt) + 1)).encode())])\n    \n    # Base32 encode (removes padding)\n    ticket_code = base64.b32encode(obfuscated_bytes).decode().rstrip('=')\n\n    return ticket_code\n\n# Example usage\nevent_id = 123\norder_id = 456789\nticket_number = 1\nsalt = "secureKey123"\n\nticket_code = generate_ticket_code(event_id, order_id, ticket_number, salt)\nprint(ticket_code)  # Output will be a small, obfuscated alphanumeric string