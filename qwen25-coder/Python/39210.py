from Crypto.Cipher import AES\nimport base64\nimport os\n\ndef pad(text):\n    # PKCS7 padding for 16-byte blocksize\n    length = 16 - (len(text) % 16)\n    return text + (chr(length) * length)\n\ndef unpad(s):\n    return s[:-ord(s[len(s)-1:])]\n\ndef encrypt(data, key_base64, iv_base64):\n    # Decode base64 key and IV\n    key = base64.b64decode(key_base64)\n    iv = base64.b64decode(iv_base64)\n\n    # Initialize cipher in CBC mode with the given key and IV\n    cipher = AES.new(key, AES.MODE_CBC, iv)\n    \n    # Encrypt and return as base64\n    data_padded = pad(data).encode('utf-8')\n    encrypted_data = cipher.encrypt(data_padded)\n    return base64.b64encode(encrypted_data).decode()\n\n# Example usage\nkey_base64 = '0123456789abcdef0123456789abcdef' # Must be 32 bytes for AES-256\niv_base64 = 'abcdef9876543210' # Must be 16 bytes for AES-256-CBC\ndata_to_encrypt = 'Hello, World!'\n\nprint(f"Encrypted data: {encrypt(data_to_encrypt, key_base64, iv_base64)}")