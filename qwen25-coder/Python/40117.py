def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef is_power(n):\n    if n < 2:\n        return False\n    a = 2\n    while (a * a) <= n:\n        power = 1\n        base = a\n        while base <= n:\n            base *= a\n            power += 1\n            if base == n:\n                return True\n        a += 1\n    return False\n\ndef smallest_r(n):\n    r = 2\n    while True:\n        if gcd(r, n) > 1 or pow(n, (r - 1), r) != 1:\n            r += 1\n            continue\n        break\n    for k in range(2, int(((n ** 0.5) + 1).log(r)) + 1):\n        if pow(n, (r ** k - 1), (r ** k)) != 1:\n            break\n    else:\n        return r\n    while True:\n        r += 1\n        if gcd(r, n) == 1 and all(pow(n, d, r) != 1 for d in (a for a in range(2, int(r**0.5)+1) if r % a == 0)):\n            break\n    return r\n\ndef is_prime_aks(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if is_power(n):\n        return False\n    \n    r = smallest_r(n)\n    \n    if pow(n, (r - 1), r) != 1:\n        return False\n    \n    for a in range(2, min(r, int(n ** 0.5)) + 1):\n        if gcd(a, n) > 1:\n            continue\n        x = [a % n]\n        for i in range(1, n):\n            x.append((x[-1] * a) % n)\n        \n        y = [pow(a, n, r)] + [(y[-1] * x[k]) % r for k in range(1, n)]\n        \n        if any(x[i] != y[i] for i in range(1, n)):\n            return False\n    \n    return True\n\n# Example usage:\nnumber = 29\nif is_prime_aks(number):\n    print(f"{number} is prime.")\nelse:\n    print(f"{number} is not prime.")