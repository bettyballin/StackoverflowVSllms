import os.path\nimport base64\nfrom email import encoders\nfrom email.mime.base import MIMEBase\nfrom email.parser import BytesParser\nfrom email.policy import default\nfrom google.auth.transport.requests import Request\nfrom google.oauth2.credentials import Credentials\nfrom google_auth_oauthlib.flow import InstalledAppFlow\nfrom googleapiclient.discovery import build\n\n# If modifying these SCOPES, delete the file token.json.\nSCOPES = ['https://www.googleapis.com/auth/gmail.readonly']\n\ndef main():\n    """Shows basic usage of the Gmail API.\n    Lists the user's Gmail labels.\n    """\n    creds = None\n    # The file token.json stores the user's access and refresh tokens, and is\n    # created automatically when the authorization flow completes for the first time.\n    if os.path.exists('token.json'):\n        creds = Credentials.from_authorized_user_file('token.json', SCOPES)\n    # If there are no (valid) credentials available, let the user log in.\n    if not creds or not creds.valid:\n        if creds and creds.expired and creds.refresh_token:\n            creds.refresh(Request())\n        else:\n            flow = InstalledAppFlow.from_client_secrets_file(\n                'credentials.json', SCOPES)\n            creds = flow.run_local_server(port=0)\n        # Save the credentials for the next run\n        with open('token.json', 'w') as token:\n            token.write(creds.to_json())\n\n    service = build('gmail', 'v1', credentials=creds)\n\n    # Call the Gmail API to fetch INBOX messages.\n    results = service.users().messages().list(userId='me', labelIds=['INBOX']).execute()\n    messages = results.get('messages', [])\n\n    if not messages:\n        print('No messages found.')\n    else:\n        for message in messages:\n            msg = service.users().messages().get(userId='me', id=message['id'], format='raw').execute()\n            msg_str = base64.urlsafe_b64decode(msg['raw'].encode('ASCII'))\n            mime_msg = BytesParser(policy=default).parsebytes(msg_str)\n\n            for part in mime_msg.walk():\n                if part.get_content_maintype() == 'multipart':\n                    continue\n                if part.get('Content-Disposition') is None:\n                    continue\n\n                filename = part.get_filename()\n                if not filename:\n                    filename = 'part-%03d.bin' % counter\n                filepath = os.path.join('/your/download/path/', filename)\n\n                with open(filepath, 'wb') as f:\n                    f.write(part.get_payload(decode=True))\n                counter += 1\n\nif __name__ == '__main__':\n    main()