import smtpd\nimport smtplib\nfrom datetime import datetime\nfrom email.message import EmailMessage\n\nclass MailProcessorServer(smtpd.SMTPServer):\n    def process_message(self, peer, sender, rcpttos, data):\n        badrecipients = []\n        for rcpt in rcpttos:\n            # Assuming you have some logic to determine if a recipient is valid\n            if not self.is_valid_recipient(rcpt):\n                badrecipients.append(rcpt)\n\n        # Only send bounce message if there are invalid recipients\n        if badrecipients:\n            self.send_bounce_email(sender, badrecipients, data)\n\n    def is_valid_recipient(self, rcpt):\n        # Your logic to check if the recipient is valid\n        return rcpt.endswith('@yourdomain.com')\n\n    def send_bounce_email(self, sender, badrecipients, original_message_data):\n        bounce_msg = self.create_bounce_message(sender, badrecipients, original_message_data)\n        try:\n            with smtplib.SMTP('localhost') as server:  # Adjust SMTP host as needed\n                server.sendmail(\n                    from_addr='postmaster@yourdomain.com',\n                    to_addrs=[sender],\n                    msg=bounce_msg.as_string()\n                )\n        except Exception as e:\n            print(f"Failed to send bounce email: {e}")\n\n    def create_bounce_message(self, sender, badrecipients, original_message_data):\n        bounce_email = EmailMessage()\n        bounce_email['From'] = 'postmaster@yourdomain.com'\n        bounce_email['To'] = sender\n        bounce_email['Subject'] = 'Undelivered Mail Returned to Sender'\n\n        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        bounce_email.set_content(f"""\n    This is the Postmaster at yourdomain.com.\n\n    I'm sorry, but this message could not be delivered to\n    all recipients. Below are details for those who did not receive it:\n\n    ------ The following addresses had permanent fatal errors ------\n    \n    """)\n\n        # List bad recipients with error description\n        for rcpt in badrecipients:\n            bounce_email.add_alternative(f"{rcpt}: mail address unknown", subtype='plain')\n\n        bounce_email.set_content(bounce_email.get_content() + f"""\n    --------------- Transcript of session follows ---------------\n    < ... original message headers and body here ... >\n    """)\n\n        # Append part or all of the original message\n        bounce_email.add_attachment(original_message_data, filename='_original.eml')\n\n        return bounce_email\n\nif __name__ == "__main__":\n    server = MailProcessorServer(('localhost', 25), None)\n    try:\n        print("SMTP Server started")\n        server.serve_forever()\n    except KeyboardInterrupt:\n        pass\n    finally:\n        server.close()