from functools import wraps\n\ndef aDecorator(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        print("Decorator A")\n        return func(*args, **kwargs)\n    return wrapper\n\ndef otherDecorator(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        print("Decorator B")\n        return func(*args, **kwargs)\n    return wrapper\n\n@aDecorator\ndef myfunc1():\n    print("Function Execution")\n\nif __name__ == "__main__":\n    myfunc1()  # This will use @aDecorator\n    \n    # Redefine the function with the new decorator\n    myfunc1 = otherDecorator(myfunc1.__original_func if hasattr(myfunc1, '__original_func') else myfunc1)\n    \n    myfunc1()  # Now this will use @otherDecorator