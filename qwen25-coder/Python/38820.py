def calculate_weighted_score(up_votes, down_votes, submission_date):\n    import datetime\n\n    # Calculate the confidence interval for the proportion of upvotes\n    n = up_votes + down_votes  # total number of votes\n    if n == 0:\n        return -1  # default score if no votes at all\n\n    p_up = up_votes / n  # proportion of up votes\n\n    # z is a constant that represents the confidence level (e.g., 1.96 for 95% confidence)\n    z = 1.96\n    p_hat = (p_up + z*z/(2*n) - z * ((p_up*(1-p_up)+z*z/(4*n))/n)**0.5) / (1+z*z/n)\n\n    # Age score to give weight to newer items\n    now = datetime.datetime.utcnow()\n    time_difference = now - submission_date\n    max_age_days = 365  # Define a reasonable maximum age in days\n    age_factor = min(1, time_difference.total_seconds() / (max_age_days * 24 * 3600))\n\n    # Combine score and age factor\n    weighted_score = p_hat + age_factor\n\n    return weighted_score\n\n# Usage example:\nitems = [\n    {'up_votes': 50, 'down_votes': 10, 'submission_date': datetime.datetime(2023, 10, 1)},\n    {'up_votes': 10, 'down_votes': 2, 'submission_date': datetime.datetime(2023, 10, 15)},\n    # Add more items here\n]\n\nsorted_items = sorted(items, key=lambda x: calculate_weighted_score(x['up_votes'], x['down_votes'], x['submission_date']), reverse=True)\n\nfor item in sorted_items:\n    print(item)