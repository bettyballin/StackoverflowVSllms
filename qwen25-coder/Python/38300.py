def is_cyclic_util(graph, v, visited, parent):\n    # Mark the current node as visited\n    visited[v] = True\n\n    # Recur for all the vertices adjacent to this vertex\n    for neighbor in graph[v]:\n        if not visited[neighbor]:\n            if is_cyclic_util(graph, neighbor, visited, v):\n                return True\n        elif parent != neighbor:\n            return True\n\n    return False\n\ndef is_cyclic(graph):\n    V = len(graph)  # number of vertices\n    visited = [False] * V\n\n    for i in range(V):\n        if not visited[i]:\n            if is_cyclic_util(graph, i, visited, -1):\n                return True\n\n    return False\n\n# Example usage:\ngraph = [\n    [1],\n    [0, 2, 4],\n    [1, 3],\n    [2],\n    [1]\n]\n\nprint(is_cyclic(graph))  # Output: True