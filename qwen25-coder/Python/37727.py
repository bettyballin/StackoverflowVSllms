import numpy as np\nfrom sklearn.decomposition import PCA\n\n# Generate some sample data (normal and anomalous points)\ndata = np.array([\n    [1, 2], [2, 3], [5, 6],\n    [4, 5], [8, 9], [100, 100]  # last point is an anomaly\n])\n\n# Perform PCA (Principal Component Analysis) which uses eigen-decomposition under the hood\npca = PCA(n_components=2)\ndata_transformed = pca.fit_transform(data)\n\n# Calculate explained variance ratio to see contribution of each principal component\nexplained_variance = pca.explained_variance_ratio_\nprint("Explained Variance Ratio:", explained_variance)\n\n# Detect anomaly based on transformed data (simple heuristic: points far from the mean in PC space)\nmean = np.mean(data_transformed, axis=0)\nanomalies = []\nfor point in data_transformed:\n    distance = np.linalg.norm(point - mean)\n    if distance > 3 * np.std(data_transformed[:, 0]):  # heuristic threshold\n        anomalies.append(point)\n\nprint("Anomalies detected in transformed space:", anomalies)