from collections import deque, defaultdict\n\n# Example schema: A dictionary where each table points to other tables it can join with.\nschema = {\n    'table1': {'table2', 'table3'},\n    'table2': {'table1', 'table4'},\n    'table3': {'table1', 'table5'},\n    'table4': {'table2'},\n    'table5': {'table3'}\n}\n\ndef find_path(start, end):\n    # BFS to find the shortest path\n    queue = deque([(start, [start])])\n    visited = set()\n    \n    while queue:\n        current_table, path = queue.popleft()\n        \n        if current_table == end:\n            return path\n        \n        visited.add(current_table)\n        for neighbor in schema[current_table]:\n            if neighbor not in visited:\n                queue.append((neighbor, path + [neighbor]))\n                \n    return None  # If no path is found\n\ndef generate_query(tables):\n    # Generate paths between each pair of tables\n    paths = []\n    graph = defaultdict(list)\n    \n    for i in range(len(tables)):\n        for j in range(i + 1, len(tables)):\n            if tables[i] != tables[j]:\n                path = find_path(tables[i], tables[j])\n                if path:\n                    paths.append(path)\n                    \n                    # Create a bidirectional relationship for the graph\n                    graph[path[0]].append(path[-1])\n                    graph[path[-1]].append(path[0])\n\n    # Now we need to combine these paths into one coherent query.\n    # This part is simplified and assumes that paths are directly connectable\n    combined_path = []\n    visited_tables = set()\n    \n    def dfs(table):\n        nonlocal combined_path, visited_tables\n        if table not in visited_tables:\n            visited_tables.add(table)\n            combined_path.append(table)\n            for neighbor in graph[table]:\n                dfs(neighbor)\n\n    # Start DFS from the first table\n    dfs(tables[0])\n    \n    # Generate SQL-like query based on the path\n    query = "SELECT * FROM {}".format(combined_path.pop(0))\n    while combined_path:\n        next_table = combined_path.pop(0)\n        query += " JOIN {} ON ...".format(next_table)  # Define your join condition here\n    \n    return query\n\n# Example usage\nselected_tables = ['table1', 'table4']\nquery = generate_query(selected_tables)\nprint(query)