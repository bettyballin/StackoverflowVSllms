import sys\nimport socket\n\n# Function to encode strings before sending them over the network\ndef send_message(s, message):\n    s.sendall(message.encode('utf-8'))\n\n# Get user input\nHOST = input("Enter IRC server address (default: irc.freenode.net): ") or "irc.freenode.net"\nPORT = int(input("Enter port number (default: 6667): ") or 6667)\nNICK = input("Enter Nickname (default: MauBot): ") or "MauBot"\nIDENT = input("Enter Identifier (default: maubot): ") or "maubot"\nREALNAME = input("Enter Real Name (default: MauritsBot): ") or "MauritsBot"\n\n# Create a new socket using the given address family and socket type\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect((HOST, PORT))\n\n# Send NICK and USER command to the server \nsend_message(s, f"NICK {NICK}\r\n")\nsend_message(s, f"USER {IDENT} {HOST} bla :{REALNAME}\r\n")\n\nreadbuffer = ""\nchannels = []\n\nprint("Type '/JOIN <channel>' to join a channel or type '!quit' to exit.")\n\nwhile True:\n    # Receive data from the server\n    readbuffer += s.recv(1024).decode('utf-8')\n    \n    temp = str.split(readbuffer, "\n")\n    readbuffer = temp.pop()\n    \n    for line in temp:\n        line = line.rstrip()\n        \n        if line.startswith("PING"):\n            send_message(s, f"PONG {line.split()[1]}\r\n")\n\n        # Handle JOIN commands\n        elif "JOIN" in line and ":" + NICK + " " in line:\n            channel = line.split()[2]\n            channels.append(channel)\n            print(f"Joined {channel}")\n\n        # Handle PRIVMSG\n        elif "PRIVMSG" in line:\n            msg = ' '.join(line.split()[3:])[1:]\n            sender = line.split('!')[0][1:]\n            target_channel = line.split()[2]\n            \n            if target_channel != NICK:  # Not a private message\n                print(f"[{target_channel}] {sender}: {msg}")\n            else:\n                print(f"[PM] {sender}: {msg}")\n\n        elif "!quit" in line:\n            send_message(s, "QUIT\r\n")\n            sys.exit()\n\n    command = input("")\n\n    if command.startswith("/JOIN"):\n        channel = command.split()[1]\n        send_message(s, f"JOIN {channel}\r\n")\n    \n    elif command.startswith("/PRIVMSG") or command.startswith("/msg"):\n        _, target, message = command.split(maxsplit=2)\n        send_message(s, f"PRIVMSG {target} :{message}\r\n")\n\n    # Exit the loop when !quit is entered\n    elif command == "!quit":\n        send_message(s, "QUIT\r\n")\n        s.close()\n        break\n\ns.close()