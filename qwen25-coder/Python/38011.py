# Define a simple DSL for option pricing using Black-Scholes model\npricing_dsl = """\nOPTION_PRICE(\n    underlying_price: 100,\n    strike_price: 110,\n    time_to_maturity_in_years: 1.5,\n    risk_free_rate: 0.03,\n    volatility: 0.20,\n    option_type: call\n)\n"""\n\ndef calculate_option_price.dsl(pricing_dsl):\n    import re\n    from scipy.stats import norm\n\n    # Simple parsing to extract parameters (real implementation should be robust and handle errors)\n    params = dict(re.findall(r'(\w+): ([^,\n]+)', pricing_dsl))\n\n    S = float(params['underlying_price'])\n    K = float(params['strike_price'])\n    T = float(params['time_to_maturity_in_years'])\n    r = float(params['risk_free_rate'])\n    sigma = float(params['volatility'])\n    option_type = params['option_type'].strip().lower()\n\n    d1 = (np.log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))\n    d2 = d1 - sigma * np.sqrt(T)\n\n    if option_type == "call":\n        return S * norm.cdf(d1, 0.0, 1.0) - K * np.exp(-r * T) * norm.cdf(d2, 0.0, 1.0)\n    elif option_type == "put":\n        return K * np.exp(-r * T) * norm.cdf(-d2, 0.0, 1.0) - S * norm.cdf(-d1, 0.0, 1.0)\n\n# Usage\nprice = calculate_option_price(pricing_dsl)\nprint(f"Calculated Option Price: {price}")