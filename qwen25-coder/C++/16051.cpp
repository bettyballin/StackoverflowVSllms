#include <fstream>\n#include <iostream>\n#include <string>\n\nvoid insertLineSorted(const std::string& inputFile, const std::string& outputFile, std::string newLine) {\n    std::ifstream in(inputFile);\n    std::ofstream out(outputFile);\n\n    if (!in || !out) {\n        std::cerr << "Error opening files." << std::endl;\n        return;\n    }\n\n    std::string line;\n    bool inserted = false;\n\n    while (std::getline(in, line)) {\n        // Compare the current line with the new line\n        if (!inserted && line > newLine) {\n            out << newLine << "\n";\n            inserted = true;\n        }\n        out << line << "\n";\n    }\n\n    // If the new line was not inserted yet (it's the largest), insert it at the end\n    if (!inserted) {\n        out << newLine << "\n";\n    }\n\n    in.close();\n    out.close();\n}\n\nint main() {\n    std::string inputFile = "input.txt";\n    std::string outputFile = "output.txt";\n\n    std::ifstream inFile(inputFile);\n    std::ofstream outFile("temp_output.txt");\n\n    if (!inFile || !outFile) {\n        std::cerr << "Error opening files." << std::endl;\n        return 1;\n    }\n\n    std::string line;\n\n    while (std::getline(inFile, line)) {\n        insertLineSorted(outputFile, outputFile + ".tmp", line);\n        std::rename((outputFile + ".tmp").c_str(), outputFile.c_str());\n        // Overwrite the original with the new sorted file\n        std::remove((outputFile + ".tmp").c_str());\n    }\n\n    inFile.close();\n    outFile.close();\n\n    return 0;\n}