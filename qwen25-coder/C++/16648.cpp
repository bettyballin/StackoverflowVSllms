#include <windows.h>\n#include <iostream>\n\ntypedef MyClass* (*CreateMyClassFunc)();\ntypedef void (*DestroyMyClassFunc)(MyClass*);\ntypedef void (*DoSomethingFunc)(MyClass*);\n\nint main() {\n    HMODULE hModule = LoadLibrary(TEXT("MyDll.dll"));\n    if (hModule == NULL) {\n        std::cerr << "Failed to load DLL" << std::endl;\n        return 1;\n    }\n\n    CreateMyClassFunc createFunc = reinterpret_cast<CreateMyClassFunc>(GetProcAddress(hModule, "createMyClass"));\n    DestroyMyClassFunc destroyFunc = reinterpret_cast<DestroyMyClassFunc>(GetProcAddress(hModule, "destroyMyClass"));\n    DoSomethingFunc doSomethingFunc = reinterpret_cast<DoSomethingFunc>(GetProcAddress(hModule, "myClassDoSomething"));\n\n    if (createFunc == NULL || destroyFunc == NULL || doSomethingFunc == NULL) {\n        std::cerr << "Failed to get function addresses" << std::endl;\n        FreeLibrary(hModule);\n        return 1;\n    }\n\n    MyClass* myObject = createFunc();\n    doSomethingFunc(myObject);\n    destroyFunc(myObject);\n\n    FreeLibrary(hModule);\n    return 0;\n}