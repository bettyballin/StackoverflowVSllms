#include <windows.h>\n#include <iostream>\n\nint launchProcess(const char* path, const char* args) {\n    STARTUPINFO info = { sizeof(info) };\n    PROCESS_INFORMATION processInfo;\n    \n    // Redirect standard input/output/error to avoid deadlocks.\n    SECURITY_ATTRIBUTES saAttr;\n    saAttr.nLength = sizeof(SECURITY_ATTRIBUTES);\n    saAttr.bInheritHandle = TRUE;\n    saAttr.lpSecurityDescriptor = NULL;\n\n    HANDLE hStdOutRead, hStdOutWrite;\n    if (!CreatePipe(&hStdOutRead, &hStdOutWrite, &saAttr, 0)) {\n        std::cerr << "Stdout CreatePipe failed\n";\n        return 1;\n    }\n\n    info.dwFlags |= STARTF_USESTDHANDLES;\n    info.hStdInput = NULL; // Typically not needed for services\n    info.hStdOutput = hStdOutWrite;\n    info.hStdError = hStdOutWrite;\n\n    if (CreateProcess(\n        path,       // No module name (use command line).\n        const_cast<char*>(args),      // Command line.\n        NULL,                   // Process handle not inheritable.\n        NULL,                   // Thread handle not inheritable.\n        TRUE,                   // Set handles inheritable.\n        0,                      // No creation flags.\n        NULL,                   // Use parent's environment block.\n        NULL,                   // Use parent's starting directory.\n        &info,                  // Pointer to STARTUPINFO structure.\n        &processInfo            // Pointer to PROCESS_INFORMATION structure.\n    ))\n    {\n        CloseHandle(hStdOutWrite);  // No longer needed\n\n        WaitForSingleObject(processInfo.hProcess, INFINITE);\n\n        DWORD exitCode;\n        if (GetExitCodeProcess(processInfo.hProcess, &exitCode)) {\n            std::cout << "Process exited with code: " << exitCode << "\n";\n        }\n        else {\n            std::cerr << "Failed to get process exit code\n";\n        }\n\n        CloseHandle(processInfo.hThread);\n        CloseHandle(processInfo.hProcess);\n\n        return static_cast<int>(exitCode);\n    }\n    else\n    {\n        std::cerr << "CreateProcess failed (" << GetLastError() << ")\n";\n        if (hStdOutWrite != INVALID_HANDLE_VALUE) CloseHandle(hStdOutWrite);\n        return 1;\n    }\n}