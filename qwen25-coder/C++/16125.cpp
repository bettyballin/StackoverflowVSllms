#include <QCoreApplication>\n#include <QThread>\n#include <QTimer>\n#include <QMutex>\n#include <QDebug>\n\n// Simulated Foo class from your description\nclass Foo {\npublic:\n    void someFunc() {\n        QThread::msleep(1000); // simulate a long-running operation\n        qDebug("someFunc completed");\n    }\n    void anotherFunc() {\n        qDebug("anotherFunc completed");\n    }\n};\n\n// Mutex used by FooWrapper to ensure thread safety\nclass FooWrappersMutex {\npublic:\n    QMutex mutex;\n};\n\n// Thread-safe wrapper around Foo class\nclass FooWrapper {\n    Foo* _foo;\n    FooWrappersMutex* _mutex;\n\npublic:\n    explicit FooWrapper(Foo* foo, FooWrappersMutex* mutex) : _foo(foo), _mutex(mutex) {}\n\n    void someFunc() {\n        QMutexLocker lock(&_mutex->mutex);\n        _foo->someFunc();\n    }\n\n    void anotherFunc() {\n        QMutexLocker lock(&_mutex->mutex);\n        _foo->anotherFunc();\n    }\n};\n\n// Worker class to execute specific functions on a separate thread\nclass Worker : public QObject {\n    Q_OBJECT\npublic slots:\n    void doSomeFunc(FooWrapper* wrapper) {\n        wrapper->someFunc();\n    }\n\n    void doAnotherFunc(FooWrapper* wrapper) {\n        wrapper->anotherFunc();\n    }\n};\n\nint main(int argc, char *argv[]) {\n    QCoreApplication a(argc, argv);\n\n    Foo foo;\n    FooWrappersMutex mutex;\n\n    Worker worker;\n    QObject::connect(&worker, &Worker::doSomeFunc,\n                     &worker, &Worker::doSomeFunc, Qt::QueuedConnection);\n    QObject::connect(&worker, &Worker::doAnotherFunc,\n                     &worker, &Worker::doAnotherFunc, Qt::QueuedConnection);\n\n    QThread thread1;\n    worker.moveToThread(&thread1);\n\n    FooWrapper fooWrapper1(&foo, &mutex);\n    QObject::connect(&a, &QCoreApplication::aboutToQuit, &thread1, &QThread::quit);\n\n    QTimer timer;\n    QObject::connect(&timer, &QTimer::timeout, [&]() {\n        thread1.start();\n        QMetaObject::invokeMethod(&worker, "doSomeFunc", Qt::QueuedConnection,\n                                  Q_ARG(FooWrapper*, &fooWrapper1));\n        QThread::msleep(50); // Wait a short time to ensure someFunc is called\n        FooWrapper fooWrapper2(&foo, &mutex);\n        fooWrapper2.anotherFunc();\n    });\n\n    timer.setSingleShot(true);\n    timer.start();\n\n    return a.exec();\n}\n\n#include "main.moc"