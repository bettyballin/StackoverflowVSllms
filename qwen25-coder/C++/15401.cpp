#include <iostream>\n#include <fstream>\n#include <filesystem>\n#include <cstdlib> // std::getenv\n\nint main() {\n    char tmpname[] = "/tmp/tempfileXXXXXX";\n    \n#ifdef _WIN32\n    const char* tempdir = std::getenv("TEMP");\n    if (tempdir) {\n        snprintf(tmpname, sizeof(tmpname), "%s\\tempfileXXXXXX", tempdir);\n    }\n#else\n    const char* tempdir = std::getenv("TMPDIR");\n    if (tempdir) {\n        snprintf(tmpname, sizeof(tmpname), "%s/tempfileXXXXXX", tempdir);\n    }\n#endif\n\n    int fd = mkstemp(tmpname);\n    if (fd == -1) {\n        perror("mkstemp error");\n        return EXIT_FAILURE;\n    }\n\n    close(fd); // Close the file descriptor as we don't need it anymore\n\n    std::ofstream outStream(tmpname, std::ios_base::out | std::ios::binary);\n    if (!outStream.is_open()) {\n        std::cerr << "Failed to open temp file for writing.\n";\n        return EXIT_FAILURE;\n    }\n\n    // Use the ofstream\n    outStream << "Hello, world!" << std::endl;\n\n    outStream.close();\n\n    // Optionally remove the temporary file\n    std::filesystem::remove(tmpname);\n\n    return EXIT_SUCCESS;\n}