#include <pplx/pplxtasks.h>\n#include <cpprest/http_client.h>\n#include <cpprest/filestream.h>\n\nusing namespace utility;\nusing namespace web::http;\nusing namespace web::http::client;\nusing namespace concurrency::streams;\n\nvoid GetAuthenticationCredentials(const std::string& fileUrl, bool isProxy, std::string& username, std::string& password, bool& userCanceled) {\n    // Implement your authentication credential retrieval logic here\n}\n\nint main() {\n    http_client_config config;\n    auto proxy = web_proxy::from_system();\n    config.set_proxy(proxy);\n    http_client client(U("http://your-base-url"), config);\n\n    uri_builder builder(U("/path/to/resource"));\n    uri fileUrl = builder.to_uri();\n\n    std::string username, password;\n    bool userCanceled = false;\n\n    try {\n        pplx::task<http_response> response_task = client.request(methods::GET, fileUrl.path());\n        http_response response = response_task.get();\n\n        if (response.status_code() == status_codes::ProxyAuthenticationRequired) {\n            GetAuthenticationCredentials(fileUrl.to_string(), true, username, password, userCanceled);\n            if (!userCanceled) {\n                // Re-authenticate with proxy\n                web::credentials creds(username, password);\n                config.set_credentials(creds);\n                http_client client_with_proxy_auth(U("http://your-base-url"), config);\n                response = client_with_proxy_auth.request(methods::GET, fileUrl.path()).get();\n            }\n        } else if (response.status_code() == status_codes::Unauthorized) {\n            GetAuthenticationCredentials(fileUrl.to_string(), false, username, password, userCanceled);\n            if (!userCanceled) {\n                // Re-authenticate with server\n                web::credentials creds(username, password);\n                client.set_default_credentials(creds);\n                response = client.request(methods::GET, fileUrl.path()).get();\n            }\n        }\n\n        if (response.status_code() == status_codes::OK) {\n            filestream os(streams::open_ostream(U("output_file.bin")).get());\n            response.body().read_to_end(os.streambuf()).wait();\n            os.close().wait();\n            std::wcout << U("File downloaded successfully.\n");\n        }\n    } catch (const std::exception& e) {\n        std::wcerr << U("Exception: ") << e.what() << std::endl;\n    }\n\n    return 0;\n}