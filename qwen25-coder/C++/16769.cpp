template <typename DataType>\n   class BST {\n   private:\n       struct BinNode;\n       typedef BinNode* BinNodePointer;\n\n       struct BinNode {\n           DataType data;\n           BinNodePointer left;\n           BinNodePointer right;\n\n           BinNode(const DataType & theData, BinNodePointer lft = 0,\n                   BinNodePointer rt = 0) : data(theData), left(lft),\n                                            right(rt) {}\n       };\n\n       BinNodePointer myRoot;\n       \n   public:\n       BST() : myRoot(0) {}  // constructor\n       ~BST();              // destructor\n       void insert(const DataType & item);\n       void remove(const DataType & item);\n       inline void inorder(std::ostream & out) const;       // inorder traversal\n       inline void graph(std::ostream & out) const;         // graphical representation\n   private:\n       void search2(const DataType & item, bool & found,\n                    BinNodePointer & locptr, BinNodePointer & parent) const;\n       \n       void inorderAux(std::ostream &, BinNodePointer subtreeRoot) const;\n       void graphAux(std::ostream &, int indent, \n                     BinNodePointer subtreeRoot) const;\n   };\n   \n   // Definitions of the methods\n   // ...