#include <windows.h>\n#include <objbase.h>\n#include <iostream>\n\nDWORD WINAPI ThreadProc(LPVOID lpParam) {\n    // Initialize COM Library in this thread\n    HRESULT hr = CoInitializeEx(nullptr, COINIT_APARTMENTTHREADED);\n    if (FAILED(hr)) {\n        std::cerr << "Failed to initialize COM library. Error code: " << hr << std::endl;\n        return 1;\n    }\n\n    DWORD_PTR cookie = reinterpret_cast<DWORD_PTR>(lpParam);\n\n    // Obtain IGlobalInterfaceTable\n    IGlobalInterfaceTable* pGit;\n    hr = CoCreateInstance(CLSID_StdGlobalInterfaceTable, nullptr, CLSCTX_INPROC_SERVER, IID_PPV_ARGS(&pGit));\n    if (SUCCEEDED(hr)) {\n        // Get the interface pointer from the cookie\n        IMyInterface* pMyInterface;\n        hr = pGit->GetInterfaceFromGlobal(cookie, __uuidof(IMyInterface), reinterpret_cast<void**>(&pMyInterface));\n        if (SUCCEEDED(hr)) {\n            // Use the interface...\n            std::cout << "Successfully got interface in thread." << std::endl;\n\n            // Release the interface\n            pMyInterface->Release();\n        } else {\n            std::cerr << "Failed to get interface from cookie. Error code: " << hr << std::endl;\n        }\n\n        // Release IGlobalInterfaceTable\n        pGit->Release();\n    } else {\n        std::cerr << "Failed to create Global Interface Table instance. Error code: " << hr << std::endl;\n    }\n\n    // Uninitialize COM Library in this thread\n    CoUninitialize();\n\n    return 0;\n}\n\nint main() {\n    // Initialize COM Library in the main thread\n    HRESULT hr = CoInitializeEx(nullptr, COINIT_APARTMENTTHREADED);\n    if (FAILED(hr)) {\n        std::cerr << "Failed to initialize COM library. Error code: " << hr << std::endl;\n        return 1;\n    }\n\n    // Obtain IGlobalInterfaceTable\n    IGlobalInterfaceTable* pGit;\n    hr = CoCreateInstance(CLSID_StdGlobalInterfaceTable, nullptr, CLSCTX_INPROC_SERVER, IID_PPV_ARGS(&pGit));\n    if (FAILED(hr)) {\n        std::cerr << "Failed to create Global Interface Table instance. Error code: " << hr << std::endl;\n        CoUninitialize();\n        return 1;\n    }\n\n    // Assume pMyInterface is a valid pointer to your interface\n    IMyInterface* pMyInterface = nullptr; // Obtain this from somewhere in your application\n\n    DWORD_PTR cookie;\n    hr = pGit->RegisterInterfaceInGlobal(pMyInterface, __uuidof(IMyInterface), &cookie);\n    if (SUCCEEDED(hr)) {\n        // Create a thread that will use the interface pointer\n        HANDLE hThread = CreateThread(nullptr, 0, ThreadProc, reinterpret_cast<LPVOID>(cookie), 0, nullptr);\n        if (hThread == nullptr) {\n            std::cerr << "Failed to create thread. Error code: " << GetLastError() << std::endl;\n        } else {\n            // Wait for the thread to complete\n            WaitForSingleObject(hThread, INFINITE);\n\n            // Close the thread handle\n            CloseHandle(hThread);\n        }\n\n        // Revoke the interface pointer using the cookie\n        pGit->RevokeInterfaceFromGlobal(cookie);\n\n        // Release IGlobalInterfaceTable\n        pGit->Release();\n    } else {\n        std::cerr << "Failed to register interface in global table. Error code: " << hr << std::endl;\n    }\n\n    // Uninitialize COM Library in the main thread\n    CoUninitialize();\n\n    return 0;\n}