#include <windows.h>\n#include <iostream>\n\nvoid ThreadProc(void* param) {\n    CRITICAL_SECTION* cs = static_cast<CRITICAL_SECTION*>(param);\n    EnterCriticalSection(cs); // Attempt to acquire the lock\n    std::cout << "Thread is in critical section" << std::endl;\n    Sleep(1000); // Simulate work being done\n    LeaveCriticalSection(cs); // Release the lock\n}\n\nint main() {\n    CRITICAL_SECTION cs;\n    InitializeCriticalSection(&cs);\n\n    HANDLE threads[5];\n    for (int i = 0; i < 5; ++i) {\n        threads[i] = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)ThreadProc, &cs, 0, NULL);\n    }\n\n    WaitForMultipleObjects(5, threads, TRUE, INFINITE);\n\n    for (int i = 0; i < 5; ++i) {\n        CloseHandle(threads[i]);\n    }\n    DeleteCriticalSection(&cs); // Clean up\n\n    return 0;\n}