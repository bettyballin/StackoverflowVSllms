#include <iostream>\n#include <cpuid.h>\n\nvoid printCpuVendor() {\n    unsigned int nExIds, i;\n    char cpu_vendor[0x20];\n    std::memset(cpu_vendor, 0, sizeof(cpu_vendor));\n\n    // Get the number of valid extended IDs.\n    __asm__ __volatile__(\n        "cpuid" : "=a"(nExIds) : "0"(0x80000000), "c"(0)\n    );\n\n    for (i = 0x80000000; i <= nExIds; ++i) {\n        unsigned int eax, ebx, ecx, edx;\n        __asm__ __volatile__(\n            "cpuid" : "=a"(eax), "=b"(ebx), "=c"(ecx), "=d"(edx) :\n                "a"(i), "2"(0)\n        );\n\n        if (i == 0x80000002){\n            *(int*)&cpu_vendor[0] = ebx;\n            *(int*)&cpu_vendor[4] = edx;\n            *(int*)&cpu_vendor[8] = ecx;\n        } else if (i == 0x80000003) {\n            *(int*)&cpu_vendor[12] = ebx;\n            *(int*)&cpu_vendor[16] = edx;\n            *(int*)&cpu_vendor[20] = ecx;\n        }\n    }\n\n    std::string vendor(cpu_vendor);\n    if (vendor.find("AuthenticAMD") != std::string::npos) {\n        std::cout << "CPU Vendor: AMD" << std::endl;\n    } else if (vendor.find("GenuineIntel") != std::string::npos) {\n        std::cout << "CPU Vendor: Intel" << std::endl;\n    } else {\n        std::cout << "Unknown CPU Vendor: " << vendor << std::endl;\n    }\n}\n\nint main() {\n    printCpuVendor();\n    return 0;\n}