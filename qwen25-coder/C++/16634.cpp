#include <msxml6.h>\n#include <list>\n\nclass CSimpleXMLParser {\npublic:\n    MSXML2::IXMLDOMDocumentPtr m_pXMLDoc;\n\n    bool OpenXMLDocument(const std::wstring& strPath) {\n        HRESULT hr = m_pXMLDoc.CreateInstance(__uuidof(DOMDocument60));\n        if (FAILED(hr)) return false;\n        VARIANT_BOOL vSuccess = m_pXMLDoc->load(CComVariant(strPath.c_str()));\n        return vSuccess == VARIANT_TRUE;\n    }\n\n    MSXML2::IXMLDOMNodeListPtr SelectNodes(LPCTSTR strXPathFilter, MSXML2::IXMLDOMNodePtr pXMLNode) {\n        MSXML2::IXMLDOMNameSpaceManagerPtr spNSMgr = m_pXMLDoc->createNameSpaceManager(m_pXMLDoc);\n        spNSMgr->declarePrefix(CComBSTR(L"ns"), CComBSTR(L"http://www.**.com/**"));\n        return pXMLNode->selectNodes(CComBSTR((std::wstring(L"ns:") + strXPathFilter).c_str()), spNSMgr);\n    }\n};\n\nclass CXMLRecord {\npublic:\n    MSXML2::IXMLDOMNodePtr m_pXMLNode;\n    CSimpleXMLParser* m_pParser;\n\n    bool GetChildRecords(std::list<CXMLRecord*>& listRecords, LPCTSTR strPath) {\n        MSXML2::IXMLDOMNodeListPtr pListChildren = m_pParser->SelectNodes(strPath, m_pXMLNode);\n        if (pListChildren->length == 0)\n            return false;\n\n        for (long l = 0; l < pListChildren->length; ++l) {\n            listRecords.push_back(new CXMLRecord(pListChildren->item[l], m_pParser));\n        }\n\n        return true;\n    }\n};\n\n// Usage\nint main() {\n    CSimpleXMLParser parserReportData;\n    std::wstring strPathToXML = L"path_to_your_xml_file.xml";\n    if (parserReportData.OpenXMLDocument(strPathToXML)) {\n        std::list<CXMLRecord*> listpChildren;\n        bool bGetChildrenSuccess = parserReportData.GetFirstRecord()->GetChildRecords(listpChildren, _T("subreport"));\n        // Process the children\n    }\n    return 0;\n}