#include <iostream>\n#include <afxwin.h>\n#include <afxmt.h>\n#include <windows.h>\n\nusing namespace std;\n\nbool bStop = false;\nlong k1 = 0;\nlong k2 = 0;\n\nUINT run1(LPVOID param)\n{\n    while (!bStop)\n    {\n        for (int i = 0; i < 10; ++i)\n        {\n            ++k1;\n        }\n    }\n\n    return 0;\n}\n\nUINT run2(LPVOID param)\n{\n    while (!bStop)\n    {\n        for (int i = 0; i < 10; ++i)\n        {\n            ++k2;\n        }\n    }\n\n    return 0;\n}\n\ndouble FileTimeToMillis(FILETIME ft) // Converts FILETIME to milliseconds\n{\n    ULARGE_INTEGER uli = {ft.dwLowDateTime, ft.dwHighDateTime};\n    return (uli.QuadPart * 1.0 / 10000);\n}\n\nint main(int argc, char* argv[])\n{\n    CWinThread* pThread1 = AfxBeginThread(run1, NULL, THREAD_PRIORITY_NORMAL);\n    CWinThread* pThread2 = AfxBeginThread(run2, NULL, THREAD_PRIORITY_BELOW_NORMAL);\n\n    Sleep(3 * 1000); // let threads run for a bit\n\n    bStop = TRUE;\n    pThread1->WaitForCompletion(); // wait for thread to complete\n    pThread2->WaitForCompletion();\n\n    FILETIME f1, f2, f3, f4, f5, f6, f7, f8;\n\n    GetThreadTimes(pThread1->m_hThread, &f1, &f2, &f3, &f4); // get thread 1 times\n    GetThreadTimes(pThread2->m_hThread, &f5, &f6, &f7, &f8); // get thread 2 times\n\n    double cpuTime1 = FileTimeToMillis(f4) + FileTimeToMillis(f3);\n    double cpuTime2 = FileTimeToMillis(f8) + FileTimeToMillis(f7);\n\n    cout << "K1=" << k1 << "\n";\n    cout << "K2=" << k2 << "\n";\n    cout << "Thread1 CPU Time=" << cpuTime1 << " ms\n";\n    cout << "Thread2 CPU Time=" << cpuTime2 << " ms\n";\n    cout << "Exit\n";\n\n    return 0;\n}