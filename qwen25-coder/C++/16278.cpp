// Controller class definition\nclass MyController : public QObject {\n    Q_OBJECT\n\npublic:\n    MyController(QObject* parent = nullptr)\n        : QObject(parent), m_model(new FooTableModel(this)) {}\n\n    void setView(Widget* widget) {\n        if (widget) {\n            widget->setModel(m_model);\n        }\n    }\n\nprivate:\n    FooTableModel* m_model;\n};\n\n// Widget class modification\nclass Widget : public QWidget {\n    Q_OBJECT\n\npublic:\n    // Note: Do not instantiate the model here\n    Widget(QWidget* parent = nullptr)\n        : QWidget(parent), m_model(nullptr) {}\n\n    void setModel(FooTableModel* model) {\n        if (model && m_ui.tableView) {  // Assuming tableView is a pointer to your QTableView\n            m_ui.tableView->setModel(model);\n        }\n        m_model = model;\n    }\n\nprivate:\n    Ui::Widget m_ui;  // If using Qt Designer form\n    FooTableModel* m_model;\n};\n\n// Usage in main.cpp or wherever you set up the components\nint main(int argc, char *argv[]) {\n    QApplication a(argc, argv);\n\n    MyController controller;\n    Widget widget;\n\n    controller.setView(&widget);\n    widget.show();\n\n    return a.exec();\n}