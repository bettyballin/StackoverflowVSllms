// Example of Binary Search Tree (Basic Implementation)\nstruct Node {\n    int key;\n    Node* left, *right;\n\n    Node(int k) : key(k), left(nullptr), right(nullptr) {}\n};\n\nNode* insert(Node* node, int key) {\n    if (node == nullptr) return new Node(key);\n    \n    if (key < node->key)\n        node->left = insert(node->left, key);\n    else\n        node->right = insert(node->right, key);\n\n    return node;\n}\n\n// Example of Quick Sort\nvoid quickSort(int arr[], int low, int high) {\n    if (low < high) {\n        int pi = partition(arr, low, high);\n        quickSort(arr, low, pi - 1);\n        quickSort(arr, pi + 1, high);\n    }\n}\n\nint partition(int arr[], int low, int high) {\n    int pivot = arr[high];\n    int i = low - 1;\n    \n    for (int j = low; j <= high - 1; j++) {\n        if (arr[j] < pivot) {\n            i++;\n            swap(arr[i], arr[j]);\n        }\n    }\n    swap(arr[i + 1], arr[high]);\n    return i + 1;\n}