#include <list>\n\ntemplate <class T >\nclass myList : public std::list<T>\n{\npublic:\n    // Accessor to simulate array-style access\n    T operator[](int index);\n    \n    myList(void) = default;  // Default constructor\n    ~myList(void) override = default; // Default destructor\n};\n\n// Implement the operator[] function in the header file or use export keyword (not recommended)\ntemplate<class T>\nT myList<T>::operator[](int index) {\n    int count = 0;\n    std::list<T>::iterator itr = this->begin();\n    while(count != index && itr != this->end()) { // Make sure to check for end iterator\n        ++itr;\n        ++count;\n    }\n    if (itr == this->end()) {\n        throw std::out_of_range("Index out of range");\n    }\n    return *itr;    \n}