#include <vector>\n#include <iostream>\n\nvoid applyPermutation(std::vector<int>& vec, const std::vector<int>& perm) {\n    for (size_t i = 0; i < perm.size(); ++i) {\n        // Skip if the element is already in the correct position or marked as visited\n        if (perm[i] >= static_cast<int>(vec.size()) || perm[i] == i) continue;\n        \n        int cycleStart = i;\n        int value = vec[cycleStart];\n        \n        do {\n            int nextIndex = perm[i];\n            std::swap(vec[i], vec[nextIndex]);\n            \n            // Mark the index as visited by setting it to a special value\n            // that is out of bounds for valid indices, e.g., adding the size of vec\n            i = nextIndex;\n            perm[i] += static_cast<int>(vec.size());\n        } while (perm[i] != cycleStart);\n        \n        // Restore the original values in the permutation array if needed\n        // For most use cases, this step can be omitted as we do not need perm anymore\n        for (int& p : perm) {\n            if (p >= vec.size()) {\n                p -= static_cast<int>(vec.size());\n            }\n        }\n    }\n}\n\nint main() {\n    std::vector<int> vec = {45, 89, 22, 31, 23, 76};\n    std::vector<int> perm = {5, 3, 2, 1, 0, 4};\n\n    applyPermutation(vec, perm);\n\n    for (int num : vec) {\n        std::cout << num << " ";\n    }\n    // Output should be: 76 31 22 89 45 23\n\n    return 0;\n}