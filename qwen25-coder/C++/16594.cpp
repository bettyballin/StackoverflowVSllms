#include <windows.h>\n#include <iostream>\n#include <string>\n\nstd::wstring GetCurrentUserSid() {\n    HANDLE hToken = NULL;\n    if (!OpenThreadToken(GetCurrentThread(), TOKEN_QUERY, TRUE, &hToken)) {\n        if (GetLastError() != ERROR_NO_TOKEN) {\n            return L"";\n        }\n        if (!OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY, &hToken)) {\n            return L"";\n        }\n    }\n\n    DWORD dwSize = 0;\n    PTOKEN_USER ptiUser = NULL;\n\n    GetTokenInformation(hToken, TokenUser, NULL, 0, &dwSize);\n    ptiUser = (PTOKEN_USER)HeapAlloc(GetProcessHeap(), 0, dwSize);\n    if (!ptiUser || !GetTokenInformation(hToken, TokenUser, ptiUser, dwSize, &dwSize)) {\n        HeapFree(GetProcessHeap(), 0, ptiUser);\n        CloseHandle(hToken);\n        return L"";\n    }\n\n    BOOL bSuccess = ConvertSidToStringSid(ptiUser->User.Sid, NULL);\n    if (bSuccess) {\n        char* sidString;\n        bSuccess = ConvertSidToStringSid(ptiUser->User.Sid, &sidString);\n        if (!bSuccess) {\n            HeapFree(GetProcessHeap(), 0, ptiUser);\n            CloseHandle(hToken);\n            return L"";\n        }\n        std::wstring sid(sidString, sidString + strlen(sidString));\n        LocalFree(sidString);\n\n        HeapFree(GetProcessHeap(), 0, ptiUser);\n        CloseHandle(hToken);\n        return sid;\n    }\n\n    HeapFree(GetProcessHeap(), 0, ptiUser);\n    CloseHandle(hToken);\n    return L"";\n}\n\nint main() {\n    std::wstring sid = GetCurrentUserSid();\n    if (!sid.empty()) {\n        wcout << L"The current user's SID is: " << sid << endl;\n    } else {\n        wcout << L"Failed to get the SID." << endl;\n    }\n    return 0;\n}