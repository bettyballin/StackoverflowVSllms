#include <atlbase.h>\n#include <comdef.h>\n#include <cor.h>\n\nusing namespace ATL;\n\nvoid CreateSingleUseClsidKey(CLSID& clsid)\n{\n    TCHAR szCLSID[128];\n    StringFromGUID2(clsid, szCLSID, 128);\n    CString strPath = _T("CLSID\\");\n    strPath += szCLSID;\n    HKEY hSubkey;\n    HRESULT hr = ::RegCreateKeyEx(HKEY_CLASSES_ROOT, strPath, 0,\n                                  NULL, REG_OPTION_NON_VOLATILE,\n                                  KEY_WRITE | KEY_READ,\n                                  NULL, &hSubkey, NULL);\n    if (SUCCEEDED(hr))\n    {\n        // Set the threading model to Free and set Single Use\n        DWORD regClsFlags = REGCLS_SINGLEUSE; // 1\n        hr = ::RegSetValueEx(hSubkey, _T("Instance"), 0, REG_DWORD,\n                             reinterpret_cast<LPBYTE>(&regClsFlags),\n                             sizeof(DWORD));\n        ::RegCloseKey(hSubkey);\n    }\n}\n\n[module(dll, name="YourComServer.dll", uuid="{your-guid}", version="1.0")]\nclass CYourComServer;\n\n[coclass(uuid="{your-class-guid}")]\nclass ATL_NO_VTABLE CMyClass :\n    public IYourInterface\n{\npublic:\n    static HRESULT WINAPI UpdateRegistry(BOOL bRegister)\n    {\n        CLSID clsid = __uuidof(CMyClass);\n        if (bRegister)\n        {\n            CreateSingleUseClsidKey(clsid);\n        }\n        else\n        {\n            // Optionally handle the case where it's being unregistered\n        }\n\n        return _AtlModule.UpdateRegistryFromResource(IDR_REGISTRY, bRegister);\n    }\n};