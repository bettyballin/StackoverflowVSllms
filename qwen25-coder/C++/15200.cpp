#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\n// Callback function to write the data received from server into a string.\nsize_t WriteCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n    ((std::string*)userp)->append((char*)contents, size * nmemb);\n    return size * nmemb;\n}\n\nint main() {\n    CURL* curl;\n    CURLcode res;\n\n    curl_global_init(CURL_GLOBAL_DEFAULT);\n    curl = curl_easy_init();\n\n    if(curl) {\n        std::string readBuffer;\n        \n        // URL to fetch\n        curl_easy_setopt(curl, CURLOPT_URL, "http://example.com");\n\n        // Function to call with received data.\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);\n\n        // Pointer to pass to our callback function. Here we are passing the address of a string instance.\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);\n\n        // Enable cookies handling\n        curl_easy_setopt(curl, CURLOPT_COOKIEFILE, "");  // This enables cookie engine\n\n        // Perform request\n        res = curl_easy_perform(curl);\n\n        // Check for errors \n        if(res != CURLE_OK)\n            std::cout << "curl_easy_perform() failed: " << curl_easy_strerror(res) << std::endl;\n        else {\n            std::cout << readBuffer << std::endl;\n        }\n\n        // Cleanup\n        curl_easy_cleanup(curl);\n    }\n    \n    curl_global_cleanup();\n    return 0;\n}