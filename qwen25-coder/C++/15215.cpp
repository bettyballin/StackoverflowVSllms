#include <windows.h>\n#include <exdisp.h>\n#include <iostream>\n#include <atlbase.h>\n#include <atldisp.h>\n\nclass CMyExcelSink : public IDispEventSimpleImpl<1, CMyExcelSink, &__uuidof(Excel::_WorksheetEvents)>\n{\npublic:\n    BEGIN_CONNECTION_POINT_MAP(CMyExcelSink)\n        CONNECTION_POINT_ENTRY(__uuidof(Excel::_WorksheetEvents))\n    END_CONNECTION_POINT_MAP()\n\n    BEGIN_DISPEVENT_MAP(CMyExcelSink, IDispEventSimpleImpl<1, CMyExcelSink, &__uuidof(Excel::_WorksheetEvents)>)\n        DISPEVENT_ID(0x00008c7d, SheetSelectionChange, OnSheetSelectionChange)\n    END_DISPEVENT_MAP()\n\n    void STDMETHODCALLTYPE OnSheetSelectionChange(IDispatch* *TargetRange)\n    {\n        std::cout << "Sheet selection changed." << std::endl;\n        // You can use TargetRange to get information about the selected range\n    }\n};\n\nint main()\n{\n    CoInitialize(NULL);\n\n    Excel::_ApplicationPtr pApp = NULL;\n    Excel::_WorkbookPtr pBook = NULL;\n    Excel::_WorksheetPtr pSheet = NULL;\n\n    HRESULT hr = pApp.CreateInstance(__uuidof(Excel::Application));\n    if (FAILED(hr))\n        return -1;\n\n    // Make Excel visible\n    pApp->Visible[VT_BOOL] = TRUE;\n\n    pBook = pApp->Workbooks->Add();\n    pSheet = pBook->ActiveSheet;\n\n    // Create a new sink to receive events.\n    CMyExcelSink* pSink = new CMyExcelSink();\n\n    DWORD dwCookie;\n    IConnectionPointPtr pCP;\n    IID iidWorksheetEvents = __uuidof(Excel::_WorksheetEvents);\n\n    hr = pSheet->QueryInterface(IID_IConnectionPointContainer, (void**)&pCP);\n    if (FAILED(hr))\n        return -1;\n\n    hr = pCP->FindConnectionPoint(iidWorksheetEvents, &pCP);\n    if (FAILED(hr))\n        return -1;\n\n    hr = pCP->Advise(pSink, &dwCookie);\n\n    // Now the sink should receive events\n\n    COleVariant vMissing(DISP_E_PARAMNOTFOUND, VT_ERROR);\n    std::cout << "Press any key to close Excel..." << std::endl;\n    getc(stdin);\n\n    if (pSink && dwCookie != 0)\n        pCP->Unadvise(dwCookie);\n\n    delete pSink;\n\n    pSheet.Release();\n    pBook->Close(vMissing, vMissing, vMissing);\n    pApp->Quit();\n\n    // Release pointers\n    CoUninitialize();\n\n    return 0;\n}