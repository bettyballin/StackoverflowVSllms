#include <X11/X.h>\n#include <X11/Xlib.h>\n#include <png.h>\n#include <iostream>\n#include <vector>\n\nint main() {\n    Display *display = XOpenDisplay(NULL);\n    if (!display) {\n        std::cerr << "Failed to open display\n";\n        return 1;\n    }\n\n    Window root = DefaultRootWindow(display);\n\n    // Get screen dimensions\n    int width = DisplayWidth(display, DefaultScreen(display));\n    int height = DisplayHeight(display, DefaultScreen(display));\n\n    // XGetImage is used to capture the screenshot\n    XImage *image = XGetImage(display, root, 0, 0, width, height, AllPlanes, ZPixmap);\n    if (!image) {\n        std::cerr << "Failed to get image\n";\n        XCloseDisplay(display);\n        return 1;\n    }\n\n    // Create a PNG file\n    FILE *fp = fopen("screenshot.png", "wb");\n    if (!fp) {\n        std::cerr << "Could not open file for writing\n";\n        XDestroyImage(image);\n        XCloseDisplay(display);\n        return 1;\n    }\n\n    png_structp png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);\n    if (!png_ptr) {\n        fclose(fp);\n        XDestroyImage(image);\n        XCloseDisplay(display);\n        return 1;\n    }\n\n    png_infop info_ptr = png_create_info_struct(png_ptr);\n    if (!info_ptr) {\n        png_destroy_write_struct(&png_ptr, (png_infopp)NULL);\n        fclose(fp);\n        XDestroyImage(image);\n        XCloseDisplay(display);\n        return 1;\n    }\n\n    png_init_io(png_ptr, fp);\n\n    // Prepare the PNG header\n    png_set_IHDR(png_ptr, info_ptr, width, height,\n                 8, PNG_COLOR_TYPE_RGB, PNG_INTERLACE_NONE,\n                 PNG_COMPRESSION_TYPE_DEFAULT, PNG_FILTER_TYPE_DEFAULT);\n\n    png_write_info(png_ptr, info_ptr);\n\n    // Convert XImage to PNG data\n    std::vector<png_bytep> row_pointers(height);\n    for (int y = 0; y < height; y++) {\n        png_bytep row = (png_bytep) malloc(png_get_rowbytes(png_ptr,info_ptr));\n        unsigned long pixel;\n        int bshift = image->offset;\n        png_byte *ptr = row;\n\n        for (int x=0 ; x<width; x++) {\n\n            pixel = XGetPixel(image,x,y);\n            *ptr++ = (png_byte) (((pixel>>bshift)&255));\n            *ptr++ = (png_byte) (((pixel>>(bshift+8))&255));\n            *ptr++ = (png_byte) (((pixel>>(bshift+16))&255));\n\n        }\n        row_pointers[y] = row;\n    }\n\n    png_write_image(png_ptr, &row_pointers[0]);\n    png_write_end(png_ptr, NULL);\n\n    // Free all memory\n    for(png_uint_32 y=0;y<height;y++) {\n        free(row_pointers[y]);\n    }\n\n    fclose(fp);\n    png_free_data(png_ptr, info_ptr, PNG_FREE_ALL, -1);\n    png_destroy_write_struct(&png_ptr, (png_infopp)NULL);\n\n    XDestroyImage(image);\n    XCloseDisplay(display);\n\n    return 0;\n}