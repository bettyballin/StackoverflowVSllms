#include <QAbstractTableModel>\n#include <QMap>\n#include <QPersistentModelIndex>\n\nclass columnViewModel : public QAbstractTableModel {\n    // Define your Node and Observer classes here, or assume they are defined elsewhere\n\npublic:\n    columnViewModel(QObject *parent = nullptr) : QAbstractTableModel(parent) {}\n\n    void onExpand(const QModelIndex &index) override {\n        if (index.isValid()) {\n            Node* myNode = static_cast<Node*>(index.internalPointer());\n            Observer* foo = Observer::create();\n            myNode->addObserver(foo);\n            observers[index] = foo;  // Store the observer in our map\n        }\n    }\n\n    void onCollapse(const QModelIndex &index) override {\n        if (index.isValid()) {\n            Node* myNode = static_cast<Node*>(index.internalPointer());\n            auto it = observers.find(index);\n            if (it != observers.end()) {\n                Observer* foo = it.value();\n                myNode->remObserver(foo);\n                delete foo;  // Clean up the observer\n                observers.erase(it);  // Remove from map\n            }\n        }\n    }\n\nprivate:\n    QMap<QPersistentModelIndex, Observer*> observers;\n};