#include <openssl/ssl.h>\n#include <openssl/err.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n#include <iostream>\n\nbool checkMailServerStatus(const char* hostname, int port) {\n    SSL_CTX *ctx;\n    SSL *ssl;\n    int sock;\n    struct sockaddr_in server_address;\n\n    // Initialize the SSL library\n    OpenSSL_add_all_algorithms();\n    ERR_load_BIO_strings();\n    SSL_load_error_strings();\n\n    // Create a new SSL context using TLS method\n    if (!(ctx = SSL_CTX_new(TLS_client_method()))) {\n        ERR_print_errors_fp(stderr);\n        return false;\n    }\n\n    // Set up the address of the server for the socket to connect to\n    memset(&server_address, 0, sizeof(server_address));\n    server_address.sin_family = AF_INET;\n    server_address.sin_port = htons(port);\n\n    // Resolve hostname and fill in IP address\n    struct hostent *host;\n    if ((host = gethostbyname(hostname)) == nullptr) {\n        perror(hostname);\n        SSL_CTX_free(ctx);\n        return false;\n    }\n\n    memcpy(&server_address.sin_addr, host->h_addr_list[0], host->h_length);\n\n    // Create the socket for communicating with the server\n    sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock < 0) {\n        perror("Unable to create socket");\n        SSL_CTX_free(ctx);\n        return false;\n    }\n\n    // Connect the socket to the mail server specified by the address structure\n    if (connect(sock, (struct sockaddr*) &server_address, sizeof(server_address)) != 0) {\n        perror("Could not connect");\n        close(sock);\n        SSL_CTX_free(ctx);\n        return false;\n    }\n\n    // Create a new SSL connection state associated with the created context\n    ssl = SSL_new(ctx);\n    if (!ssl) {\n        ERR_print_errors_fp(stderr);\n        close(sock);\n        SSL_CTX_free(ctx);\n        return false;\n    }\n\n    // Attach the socket descriptor to the newly constructed SSL session\n    SSL_set_fd(ssl, sock);\n\n    // Perform the SSL handshake with the server (this sets up encryption)\n    if (SSL_connect(ssl) < 1) {\n        ERR_print_errors_fp(stderr);\n        SSL_free(ssl);\n        close(sock);\n        SSL_CTX_free(ctx);\n        return false;\n    }\n\n    // Clean up\n    SSL_shutdown(ssl);\n    SSL_free(ssl);\n    close(sock);\n    SSL_CTX_free(ctx);\n\n    // If we reach this point, the connection was successful\n    return true;\n}\n\nint main() {\n    const char* hostname = "smtp.example.com";\n    int port = 465;\n\n    if (checkMailServerStatus(hostname, port)) {\n        std::cout << "Connection to mail server successful." << std::endl;\n    } else {\n        std::cout << "Failed to connect to mail server." << std::endl;\n    }\n\n    return 0;\n}