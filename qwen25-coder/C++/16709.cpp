#include <windows.h>\n#include "EventIDL.h"\n\nclass CTestServer : public ITestServer, public IConnectionPointContainer {\nprivate:\n    LONG m_cRef;\n    IConnectionPoint* m_pCP;\n\npublic:\n    CTestServer() : m_cRef(1), m_pCP(nullptr) { }\n\n    STDMETHODIMP QueryInterface(REFIID riid, void** ppvObject) override {\n        if (riid == IID_IUnknown || riid == IID_ITestServer) {\n            *ppvObject = static_cast<ITestServer*>(this);\n        } else if (riid == IID_IConnectionPointContainer) {\n            *ppvObject = static_cast<IConnectionPointContainer*>(this);\n        } else if (riid == IID_IDispatch) {\n            *ppvObject = static_cast<IDispatch*>(static_cast<ITestServer*>(this));\n        } else {\n            *ppvObject = nullptr;\n            return E_NOINTERFACE;\n        }\n        AddRef();\n        return S_OK; \n    }\n\n    STDMETHODIMP_(ULONG) AddRef() override { return InterlockedIncrement(&m_cRef); }\n    STDMETHODIMP_(ULONG) Release() override {\n        ULONG ulRef = InterlockedDecrement(&m_cRef);\n        if (ulRef == 0) delete this;\n        return ulRef; \n    }\n\n    // IConnectionPointContainer\n    STDMETHOD(IMPL)(EnumConnectionPoints(IEnumConnectionPoints** ppEnum)) override { return E_NOTIMPL; }\n    STDMETHODIMP FindConnectionPoint(REFIID riid, IConnectionPoint** ppCP) override {\n        if (!ppCP) return E_POINTER;\n        *ppCP = nullptr;\n        if (riid == __uuidof(ITestEvents)) {\n            if (!m_pCP) m_pCP = new CConnectionPoint(this);\n            m_pCP->AddRef();\n            *ppCP = m_pCP;\n            return S_OK;\n        }\n        return CONNECT_E_NOCONNECTION;\n    }\n\n    // ITestServer\n    STDMETHODIMP RaiseEvent() override {\n        if (m_pCP) m_pCP->RaiseOnEvent(); // Notify sinks of the event\n        return S_OK; \n    }\n};\n\nclass CConnectionPoint : public IConnectionPoint {\nprivate:\n    LONG m_cRef;\n    DWORD m_dwCookie;\n    ITTestEvents* m_pSink;\n\npublic:\n    CConnectionPoint(CTestServer* pServer) : m_cRef(1), m_dwCookie(0), m_pSink(nullptr) {}\n\n    STDMETHODIMP QueryInterface(REFIID riid, void** ppvObject) override {\n        if (riid == IID_IUnknown || riid == IID_IConnectionPoint) {\n            *ppvObject = static_cast<IConnectionPoint*>(this);\n        } else {\n            *ppvObject = nullptr;\n            return E_NOINTERFACE;\n        }\n        AddRef();\n        return S_OK; \n    }\n\n    STDMETHODIMP_(ULONG) AddRef() override { return InterlockedIncrement(&m_cRef); }\n    STDMETHODIMP_(ULONG) Release() override {\n        ULONG ulRef = InterlockedDecrement(&m_cRef);\n        if (ulRef == 0) delete this;\n        return ulRef; \n    }\n\n    STDMETHODIMP GetConnectionInterface(IID* piid) override { *piid = IID_ITestEvents; return S_OK; }\n    STDMETHODIMP GetConnectionPointContainer(IConnectionPointContainer** ppCPC) override { return E_NOTIMPL; }\n    STDMETHODIMP Advise(IUnknown* pUnkSink, DWORD* pdwCookie) override {\n        if (!pUnkSink || !pdwCookie) return E_POINTER;\n        HRESULT hr = pUnkSink->QueryInterface(IID_ITestEvents, (void**)&m_pSink);\n        if (SUCCEEDED(hr)) {\n            *pdwCookie = m_dwCookie = 1; // Simple cookie management\n        }\n        return hr;\n    }\n\n    STDMETHODIMP Unadvise(DWORD dwCookie) override {\n        if (dwCookie == m_dwCookie) {\n            m_pSink->Release();\n            m_pSink = nullptr;\n            m_dwCookie = 0;\n            return S_OK;\n        }\n        return CONNECT_E_NOCONNECTION;\n    }\n\n    STDMETHODIMP EnumConnections(IEnumConnections** ppEnum) override { return E_NOTIMPL; }\n\n    void RaiseOnEvent() {\n        if (m_pSink) {\n            m_pSink->OnEvent();\n        }\n    }\n};