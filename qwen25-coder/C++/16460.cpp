#include <iostream>\n#include <thread>\n#include <chrono>\n#include <ratio>\n\nvoid throttledLoop(double maxCpuLoad) {\n    const int sleepDurationUs = 100; // Sleep duration in microseconds\n    auto start = std::chrono::high_resolution_clock::now();\n    double totalWorkTime = 0;\n\n    while (true) { // Your main loop condition here\n        auto workStart = std::chrono::high_resolution_clock::now();\n\n        // Perform your intensive computation here, e.g., compression.\n        // For example purposes:\n        for (int i = 0; i < 1000; ++i) {\n            auto result = i * 2;  // Dummy calculation to simulate work\n        }\n\n        auto end = std::chrono::high_resolution_clock::now();\n        double elapsedTimeUs = std::chrono::duration<double, std::micro>(end - workStart).count();\n\n        totalWorkTime += elapsedTimeUs;\n        double elapsedTotalTimeUs = std::chrono::duration<double, std::micro>(end - start).count();\n\n        if (elapsedTotalTimeUs > 0) {\n            double currentLoad = (totalWorkTime / elapsedTotalTimeUs) * 100;\n            if (currentLoad > maxCpuLoad) {\n                // Sleep to throttle down the CPU usage\n                std::this_thread::sleep_for(std::chrono::microseconds(sleepDurationUs));\n                auto sleptEnd = std::chrono::high_resolution_clock::now();\n                totalWorkTime -= std::chrono::duration<double, std::micro>(sleptEnd - end).count();\n            }\n        }\n    }\n}\n\nint main() {\n    const double maxCpuLoad = 50.0; // Max CPU load desired (in percentage)\n    std::thread worker(throttledLoop, maxCpuLoad);\n    worker.join();\n\n    return 0;\n}