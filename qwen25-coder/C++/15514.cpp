#include <ft2build.h>\n#include FT_FREETYPE_H\n\n// Initialize FreeType library\nFT_Library ft;\nif (FT_Init_FreeType(&ft))\n    std::cerr << "ERROR::FREETYPE: Could not init FreeType Library" << std::endl;\n\n// Load font as face\nFT_Face face;\nif (FT_New_Face(ft, "/path/to/font.ttf", 0, &face))\n    std::cerr << "ERROR::FREETYPE: Failed to load font!" << std::endl;\n\n// Set size of font and ensure correct pixel density for retina etc.\nFT_Set_Char_Size(face, 48 * 64, 48 * 64, 300, 300);\n\n// Example function to generate texture from a single character\nvoid LoadChar(unsigned char ch) {\n    if (FT_Load_Char(face, ch, FT_LOAD_RENDER)) {\n        std::cerr << "ERROR::FREETYPE: Failed to load Glyph" << std::endl;\n        return;\n    }\n\n    // Generate texture\n    GLuint texture;\n    glGenTextures(1, &texture);\n    glBindTexture(GL_TEXTURE_2D, texture);\n    glTexImage2D(\n            GL_TEXTURE_2D,\n            0,\n            GL_RED,\n            face->glyph->bitmap.width,\n            face->glyph->bitmap.rows,\n            0,\n            GL_RED,\n            GL_UNSIGNED_BYTE,\n            face->glyph->bitmap.buffer\n    );\n\n    // Texture filtering options\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n\n    // Store character for later use\n    Character character = {\n            texture,\n            glm::ivec2(face->glyph->bitmap.width, face->glyph->bitmap.rows),\n            glm::ivec2(face->glyph->bitmap_left, face->glyph->bitmap_top),\n            static_cast<unsigned int>(face->glyph->advance.x)\n    };\n    Characters.insert(std::pair<char, Character>(ch, character));\n}\n\n// Don't forget to clean up FreeType\nFT_Done_Face(face);\nFT_Done_FreeType(ft);