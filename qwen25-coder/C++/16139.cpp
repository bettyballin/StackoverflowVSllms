#include <windows.h>\n\n// Window procedure for the message-only window.\nLRESULT CALLBACK MessageOnlyWindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {\n    switch (uMsg) {\n        case WM_USER + 1:\n            // Handle custom messages here\n            MessageBox(hwnd, L"Received custom message", L"Message", MB_OK);\n            break;\n        default:\n            return DefWindowProc(hwnd, uMsg, wParam, lParam);\n    }\n    return 0L;\n}\n\nint WINAPI wWinMain(_In_ HINSTANCE hInstance, _In_opt_ HINSTANCE, _In_ LPWSTR lpCmdLine, _In_ int nCmdShow) {\n    // Define window class for the message-only window.\n    const wchar_t CLASS_NAME[] = L"SampleMessageOnlyWindowClass";\n\n    WNDCLASSEX wcex = { sizeof(WNDCLASSEX) };\n    wcex.lpfnWndProc = MessageOnlyWindowProc;\n    wcex.hInstance = hInstance;\n    wcex.lpszClassName = CLASS_NAME;\n\n    RegisterClassEx(&wcex);\n\n    // Create the message-only window.\n    HWND hwndMessageOnly = CreateWindowEx(0, CLASS_NAME, nullptr,\n                                          0, 0, 0, 0, 0,\n                                          HWND_MESSAGE, nullptr, hInstance, nullptr);\n\n    if (!hwndMessageOnly) {\n        MessageBox(nullptr, L"Creating Message-Only Window Failed!", L"Error", MB_OK);\n        return -1;\n    }\n\n    // Post a custom message to the message-only window\n    PostMessage(hwndMessageOnly, WM_USER + 1, 0, 0);\n\n    // Run a simple message loop.\n    MSG msg;\n    while (GetMessage(&msg, NULL, 0, 0)) {\n        TranslateMessage(&msg);\n        DispatchMessage(&msg);\n    }\n\n    return static_cast<int>(msg.wParam);\n}