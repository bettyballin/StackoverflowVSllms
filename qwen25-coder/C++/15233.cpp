#include <windows.h>\n#include <iostream>\n\nvoid EnumerateExportFunctions(const char* dllPath) {\n    HMODULE hModule = LoadLibrary(dllPath);\n    if (!hModule) {\n        std::cerr << "Failed to load DLL: " << GetLastError() << std::endl;\n        return;\n    }\n\n    PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)hModule;\n    if (dosHeader->e_magic != IMAGE_DOS_SIGNATURE) {\n        FreeLibrary(hModule);\n        std::cerr << "Invalid DOS Header" << std::endl;\n        return;\n    }\n\n    PIMAGE_NT_HEADERS ntHeaders = (PIMAGE_NT_HEADERS)((char*)dosHeader + dosHeader->e_lfanew);\n    if (ntHeaders->Signature != IMAGE_NT_SIGNATURE) {\n        FreeLibrary(hModule);\n        std::cerr << "Invalid NT Header" << std::endl;\n        return;\n    }\n\n    PIMAGE_EXPORT_DIRECTORY expDirectory = (PIMAGE_EXPORT_DIRECTORY)((char*)hModule + ntHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);\n    PDWORD namesRVA = (PDWORD)((char*)hModule + expDirectory->AddressOfNames);\n    PDWORD funcsRVA = (PDWORD)((char*)hModule + expDirectory->AddressOfFunctions);\n    PWORD ordinals = (PWORD)((char*)hModule + expDirectory->AddressOfNameOrdinals);\n\n    for (DWORD i = 0; i < expDirectory->NumberOfNames; ++i) {\n        LPCSTR funcName = (LPCSTR)((char*)hModule + namesRVA[i]);\n        std::cout << "Function Name: " << funcName << std::endl;\n    }\n\n    FreeLibrary(hModule);\n}\n\nint main() {\n    EnumerateExportFunctions("c:\\windows\\system32\\kernel32.dll");\n    return 0;\n}