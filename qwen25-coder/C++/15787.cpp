#include <map>\n#include <string>\n#include <numeric> // for std::accumulate\n\nstruct SMyStruct \n{\n   int MULT;\n   int VAL;\n};\n\nint main() {\n    std::map<std::string, SMyStruct*> _idToMyStructMap;\n    \n    // Example of populating the map\n    SMyStruct* struct1 = new SMyStruct{2, 3};\n    SMyStruct* struct2 = new SMyStruct{4, 5};\n    _idToMyStructMap["key1"] = struct1;\n    _idToMyStructMap["key2"] = struct2;\n\n    // Calculating the total using std::accumulate\n    int total = std::accumulate(_idToMyStructMap.begin(), _idToMyStructMap.end(), 0,\n        [](int sum, const std::map<std::string, SMyStruct*>::value_type& pair) {\n            return sum + (pair.second->MULT * pair.second->VAL);\n        });\n\n    // Clean up dynamically allocated memory\n    delete struct1;\n    delete struct2;\n\n    return total; // This should output 26 for the example data.\n}