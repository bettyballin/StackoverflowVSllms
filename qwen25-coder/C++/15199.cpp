// Event Sink Class Definition\nclass CBrowserEventSink : public IDispatch {\npublic:\n    CBrowserEventSink(IWebBrowser2* pBrowser) : m_pBrowser(pBrowser), m_lRef(1) {}\n\n    // IUnknown methods\n    STDMETHODIMP QueryInterface(REFIID riid, void** ppvObject) {\n        if (IsEqualGUID(riid, IID_IUnknown) || IsEqualGUID(riid, IID_IDispatch)) {\n            *ppvObject = static_cast<IDispatch*>(this);\n            AddRef();\n            return S_OK;\n        }\n        *ppvObject = nullptr;\n        return E_NOINTERFACE;\n    }\n\n    STDMETHODIMP_(ULONG) AddRef() { return InterlockedIncrement(&m_lRef); }\n    STDMETHODIMP_(ULONG) Release() {\n        long lRef = InterlockedDecrement(&m_lRef);\n        if (lRef == 0)\n            delete this;\n        return lRef;\n    }\n\n    // IDispatch methods\n    STDMETHODIMP GetTypeInfoCount(UINT* pctinfo) { return E_NOTIMPL; }\n    STDMETHODIMP GetTypeInfo(UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) { return E_NOTIMPL; }\n    STDMETHODIMP GetIDsOfNames(REFIID riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid, DISPID* rgDispId) {\n        if (cNames > 1)\n            return E_INVALIDARG;\n\n        LPCOLESTR name = rgszNames[0];\n        if (_wcsicmp(name, L"NavigateComplete2") == 0) {\n            *rgDispId = DISPID_NAVIGATECOMPLETE2;\n            return S_OK;\n        }\n        return DISP_E_UNKNOWNNAME;\n    }\n\n    STDMETHODIMP Invoke(DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams,\n                            VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) {\n        if (dispIdMember == DISPID_NAVIGATECOMPLETE2) {\n            BSTR url;\n            HRESULT hr = pDispParams->rgvarg[0].punkVal->QueryInterface(IID_IPersistMoniker,\n                                                                           reinterpret_cast<void**>(&url));\n            if (SUCCEEDED(hr)) {\n                wprintf(L"Current URL: %s\n", url);\n                SysFreeString(url);\n            }\n        }\n        return S_OK;\n    }\n\nprivate:\n    IWebBrowser2* m_pBrowser;\n    long         m_lRef;\n};\n\n// Usage\nIConnectionPointContainer* pCPC = nullptr;\nm_pWebBrowser->QueryInterface(IID_IConnectionPointContainer, (void**)&pCPC);\nif (pCPC) {\n    IConnectionPoint* pCP = nullptr;\n    CLSID clsidDIAdviseHolder;\n    CLSIDFromString(OLESTR("{00020102-0000-0000-C000-000000000046}"), &clsidDIAdviseHolder);\n    \n    pCPC->FindConnectionPoint(clsidDIAdviseHolder, &pCP);\n    if (pCP) {\n        DWORD dwCookie = 0;\n        CBrowserEventSink* pSink = new CBrowserEventSink(m_pWebBrowser);\n        pCP->Advise(pSink, &dwCookie);\n\n        // When done\n        pCP->Unadvise(dwCookie);\n        pCP->Release();\n    }\n    pCPC->Release();\n}