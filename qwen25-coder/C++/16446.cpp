// foo.h\n   #include <boost/bind.hpp>\n\n   class Foo {\n   public:\n       template <typename F>\n       void func(F f);\n\n   private:\n       int member_;\n   };\n\n   // foo.cc\n   #include "foo.h"\n   #include <boost/function.hpp>\n   #include <boost/bind.hpp>\n\n   template <typename F>\n   void Foo::func(F f) {\n       f(member_);\n   }\n\n   // Explicit instantiation for a specific type, if needed\n   // This part is optional unless you want to pre-compile with known types\n   namespace {\n       class Bar {\n       public:\n           static void bar_func(int) {}\n       };\n   \n       void instantiate() {\n           Foo foo;\n           Bar bar_instance;\n           foo.func(boost::bind(&Bar::bar_func, &bar_instance, _1));\n       }\n   }