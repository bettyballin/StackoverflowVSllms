#include <atlbase.h>\n#include <atlcom.h>\n\nclass CMyATLControl : public CAxControl<CMyATLControl>, public IConnectionPointContainerImpl<CMyATLControl>\n{\npublic:\n    // Define your events here.\n\n    BEGIN_COM_MAP(CMyATLControl)\n        COM_INTERFACE_ENTRY(IDispatch)\n        COM_INTERFACE_ENTRY(IConnectionPointContainer)\n    END_COM_MAP()\n\n    BEGIN_CONNECTION_POINT_MAP(CMyATLControl)\n        CONNECTIONPOINT_ENTRY(__uuidof(_DMyControlEvents))\n    END_CONNECTION_POINT_MAP()\n\n    void FireMyEvent()\n    {\n        METHOD_DATA _data = { __uuidof(_DMyControlEvents), &__uuidof(_DMyControlEvents) };\n        CComVariant varResult;\n        DISPPARAMS dispParams = { NULL, NULL, 0, 0 };\n\n        // Using fire event macro\n        Fire_Event(&varResult, &_data, 1, &dispParams);\n    }\n\n    void AsyncFireMyEvent()\n    {\n        // This is a conceptual example and would require more robust implementation.\n        // You might use a thread pool or another mechanism to manage async tasks.\n\n        std::thread([this]() {\n            FireMyEvent();\n        }).detach();  // Detach the thread so it runs independently\n    }\n};