#include <windows.h>\n\nLRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) {\n    switch (msg) {\n        case WM_PAINT: {\n            // Handle painting here if necessary\n            break;\n        }\n        case WM_CHAR: {\n            // wParam contains the Unicode character code point\n            wchar_t ch = (wchar_t)wParam;\n            // Process your character here, it should now be Unicode\n            MessageBoxW(hwnd, &ch, L"Received Character", MB_OK);\n            break;\n        }\n        case WM_DESTROY:\n            PostQuitMessage(0);\n            return 0;\n    }\n    return DefWindowProcW(hwnd, msg, wParam, lParam);\n}\n\nHWND CreateUnicodeWindow(HINSTANCE hInstance) {\n    WNDCLASSEXW wc = { sizeof(WNDCLASSEXW), CS_HREDRAW | CS_VREDRAW, WndProc,\n                       0, 0, hInstance, NULL, NULL, (HBRUSH)(COLOR_WINDOW+1),\n                       NULL, L"UnicodeWindowClass", NULL };\n    if (!RegisterClassExW(&wc)) {\n        MessageBoxW(NULL, L"Window Registration Failed!", L"Error!",\n                    MB_ICONEXCLAMATION | MB_OK);\n        return 0;\n    }\n\n    HWND hwnd = CreateWindowExW(0, wc.lpszClassName,\n                                L"My Unicode Window", WS_OVERLAPPEDWINDOW,\n                                CW_USEDEFAULT, CW_USEDEFAULT, 300, 200,\n                                NULL, NULL, hInstance, NULL);\n    if (!hwnd) {\n        MessageBoxW(NULL, L"Window Creation Failed!", L"Error!",\n                    MB_ICONEXCLAMATION | MB_OK);\n        return 0;\n    }\n\n    ShowWindow(hwnd, SW_SHOW);\n    UpdateWindow(hwnd);\n\n    return hwnd;\n}