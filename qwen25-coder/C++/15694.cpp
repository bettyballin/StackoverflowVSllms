#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <string>\n#include <unordered_map>\n\nstruct pky {\n    int pc;\n    int ct;\n    int av;\n    int cv;\n    int cp;\n    int rec;\n    int p_id;\n    char g;\n    int a;\n    int sz;\n    int cr;\n\n    pky() :\n        pc(0),\n        ct(0),\n        av(0),\n        cv(0),\n        cp(0),\n        rec(0),\n        p_id(0),\n        g('U'),\n        a(0),\n        sz(0),\n        cr(0)\n    {}\n};\n\nclass FileParser {\npublic:\n    explicit FileParser(const std::string& filename) : file(filename) {}\n\n    bool parseNextLine(pky& record) {\n        if (!std::getline(file, line)) return false; // No more lines to read\n\n        std::istringstream iss(line);\n        std::string pair;\n        std::unordered_map<std::string, int> values;\n\n        while (std::getline(iss, pair, ' ')) {\n            size_t eqPos = pair.find('=');\n            if (eqPos != std::string::npos) {\n                std::string key = pair.substr(0, eqPos);\n                int value = std::stoi(pair.substr(eqPos + 1));\n                parseKey(key, value, record);\n            }\n        }\n        return true;\n    }\n\nprivate:\n    std::ifstream file;\n    std::string line;\n\n    void parseKey(const std::string& key, int value, pky& record) {\n        if (key == "pc")   record.pc = value;\n        else if (key == "ct")  record.ct = value;\n        else if (key == "av")  record.av = value;\n        else if (key == "cv")  record.cv = value;\n        else if (key == "cp")  record.cp = value;\n        else if (key == "rec") record.rec = value;\n        else if (key == "p")   record.p_id = value;\n        else if (key == "a")   record.a = value;\n        else if (key == "sz")  record.sz = value;\n        else if (key == "cr")  record.cr = value;\n        else if (key == "g")   record.g = static_cast<char>(value);\n    }\n};\n\nint main() {\n    FileParser parser("data.txt"); // Replace data.txt with your file name\n    pky record;\n\n    while (parser.parseNextLine(record)) {\n        // Use the populated 'record' structure here\n        std::cout << "Parsed: pc=" << record.pc << ", ct=" << record.ct << ", av=" << record.av << ", ... \n";\n    }\n\n    return 0;\n}