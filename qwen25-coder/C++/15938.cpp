#include <iostream>\n\nclass A {\nprivate:\n    void (*handler)(void* obj, int nEvent);\n\npublic:\n    void SetEvent(void (*func)(void*, int)) { handler = func; }\n\n    void EventOne() { \n        if (handler) handler(this, 1); \n    }\n};\n\nclass B {\nprivate:\n    A a;\n    \n    // Static wrapper function\n    static void EventFromAWrapper(void* obj, int nEvent) {\n        B* b = static_cast<B*>(obj);\n        b->EventFromA(nEvent);\n    }\n\npublic:\n    B() {\n        a.SetEvent(EventFromAWrapper); \n    }\n\n    void EventFromA(int nEvent) { \n        std::cout << "Event " << nEvent << " received in class B" << std::endl;\n    }\n};\n\nint main() {\n    B b;\n    b.a.EventOne();  // This will call B::EventFromA with the event number.\n    return 0;\n}