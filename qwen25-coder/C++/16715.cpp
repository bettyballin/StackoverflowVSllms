// socket.h\nclass some_class {\nprivate:\n    boost::asio::io_service io_service;\n    std::shared_ptr<boost::asio::ip::tcp::socket> sock;\n\npublic:\n    some_class() : sock(std::make_shared<boost::asio::ip::tcp::socket>(io_service)) {}\n\n    bool connect(const std::string& host, const std::string& port);\n};\n\n// socket.cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <memory>\n\nusing boost::asio::ip::tcp;\n\nbool some_class::connect(const std::string& host, const std::string& port) \n{\n    std::cout << "Resolving hostname...\n";\n\n    // Resolve hostname.\n    tcp::resolver resolver(io_service);\n    tcp::resolver::query query(tcp::v4(), host, port);\n    tcp::resolver::iterator iterator = resolver.resolve(query);\n\n    std::cout << "Connecting to " << host << ":" << port << "... ";\n    std::cout.flush();  // Ensure the output is flushed immediately\n\n    // Connect to resolved hosts.\n    boost::asio::connect(*sock, iterator);  // Use connect instead of sock->connect for better exception handling\n\n    std::cout << "Connected.\n";\n    return true;\n}