#include <iostream>\n#include <fstream>\n#include <string>\n\nstruct InventoryItem {\n    std::string description;\n    int quantity;\n    double wholesaleCost;\n    double retailCost;\n    std::string dateAdded;\n};\n\n// Function to add a new record\nvoid addRecord(const InventoryItem &item, const std::string &filename) {\n    std::ofstream file(filename, std::ios_base::app);\n    if (file.is_open()) {\n        file << item.description << "," \n             << item.quantity << ","\n             << item.wholesaleCost << ","\n             << item.retailCost << ","\n             << item.dateAdded << "\n";\n        file.close();\n    } else {\n        std::cerr << "Unable to open file for adding record.\n";\n    }\n}\n\n// Function to display all records\nvoid displayRecords(const std::string &filename) {\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        InventoryItem item;\n        while(file.peek() != EOF) {\n            std::getline(file, item.description, ',');\n            file >> item.quantity;\n            file.ignore();\n            file >> item.wholesaleCost;\n            file.ignore();\n            file >> item.retailCost;\n            file.ignore();\n            std::getline(file, item.dateAdded);\n\n            std::cout << "Description: " << item.description << "\n"\n                      << "Quantity: " << item.quantity << "\n"\n                      << "Wholesale Cost: $" << item.wholesaleCost << "\n"\n                      << "Retail Cost: $" << item.retailCost << "\n"\n                      << "Date Added: " << item.dateAdded << "\n\n";\n        }\n        file.close();\n    } else {\n        std::cerr << "Unable to open file for displaying records.\n";\n    }\n}\n\n// Function to change a record (for simplicity, assume we know the line number)\nvoid updateRecord(int lineNumber, const InventoryItem &item, const std::string &filename) {\n    std::ifstream inFile(filename);\n    if (!inFile.is_open()) {\n        std::cerr << "Unable to open file for reading.\n";\n        return;\n    }\n\n    // Read all lines into a vector\n    std::vector<std::string> lines;\n    std::string line;\n    while (getline(inFile, line)) {\n        lines.push_back(line);\n    }\n    inFile.close();\n\n    if (lineNumber >= 0 && lineNumber < lines.size()) {\n        lines[lineNumber] = item.description + ","\n                          + std::to_string(item.quantity) + ","\n                          + std::to_string(item.wholesaleCost) + ","\n                          + std::to_string(item.retailCost) + ","\n                          + item.dateAdded;\n    } else {\n        std::cerr << "Invalid line number.\n";\n        return;\n    }\n\n    // Write all lines back to the file\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        for (const auto &l : lines) {\n            outFile << l << "\n";\n        }\n        outFile.close();\n    } else {\n        std::cerr << "Unable to open file for writing.\n";\n    }\n}\n\nint main() {\n    InventoryItem item = {"Laptop", 12, 800.00, 1200.00, "2023-10-15"};\n    addRecord(item, "inventory.txt");\n\n    std::cout << "Current inventory:\n";\n    displayRecords("inventory.txt");\n\n    // Update the first item (line number starts from 0)\n    InventoryItem updatedItem = {"Laptop", 8, 750.00, 1150.00, "2023-10-15"};\n    updateRecord(0, updatedItem, "inventory.txt");\n\n    std::cout << "\nUpdated inventory:\n";\n    displayRecords("inventory.txt");\n\n    return 0;\n}