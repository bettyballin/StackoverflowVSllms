#include <exdispid.h>\n#include <mshtmhst.h>\n\nclass CMyBrowserEventHandler : public DWebBrowserEvents2 {\npublic:\n    // IUnknown methods\n    STDMETHOD(QueryInterface)(REFIID riid, void** ppvObject) override {\n        if (riid == IID_IUnknown || riid == __uuidof(DWebBrowserEvents2)) {\n            *ppvObject = static_cast<DWebBrowserEvents2*>(this);\n            AddRef();\n            return S_OK;\n        }\n        *ppvObject = nullptr;\n        return E_NOINTERFACE;\n    }\n\n    STDMETHOD_(ULONG, AddRef)() override {\n        return InterlockedIncrement(&m_refCount);\n    }\n\n    STDMETHOD_(ULONG, Release)() override {\n        ULONG refCount = InterlockedDecrement(&m_refCount);\n        if (refCount == 0)\n            delete this;\n        return refCount;\n    }\n\n    // DWebBrowserEvents2 methods\n    STDMETHOD(BeforeNavigate2)(IDispatch* pDisp, VARIANT* URL, VARIANT* Flags,\n                               VARIANT* TargetFrameName, VARIANT* PostData,\n                               VARIANT* Headers, VARIANT_BOOL* Cancel) override {\n        // Destroy your child window here\n        DestroyWindow(m_hChildWnd); // Assuming m_hChildWnd is your child window handle\n        return S_OK;\n    }\n\nprivate:\n    ULONG m_refCount = 0;\n    HWND m_hChildWnd; // Store your child window handle\n\npublic:\n    CMyBrowserEventHandler(HWND hChildWnd) : m_hChildWnd(hChildWnd) {}\n};\n\n// Usage in your IE plugin code:\nCComObject<CMyBrowserEventHandler>* pHandler;\nHRESULT hr = CComObject<CMyBrowserEventHandler>::CreateInstance(&pHandler);\nif (SUCCEEDED(hr)) {\n    IDispatch* pDispatch = NULL;\n    pHandler->QueryInterface(__uuidof(IDispatch), reinterpret_cast<void**>(&pDispatch));\n    // Advise your web browser control with this dispatcher\n    // Assume m_spWebBrowser is a smart pointer to IConnectionPointContainer\n    IConnectionPoint* pConnectionPoint = nullptr;\n    GUID IID_DWebBrowserEvents2 = DIID_DWebBrowserEvents2;\n    hr = m_spWebBrowser->FindConnectionPoint(IID_DWebBrowserEvents2, &pConnectionPoint);\n    if (SUCCEEDED(hr)) {\n        DWORD dwCookie = 0;\n        hr = pConnectionPoint->Advise(pDispatch, &dwCookie);\n        // Hold on to the cookie and connection point for unadvising later\n    }\n}