#include "EventIDL.h"\n#include <comdef.h>\n\nclass CClient : public ITestEvents {\nprivate:\n    LONG m_cRef;\n\npublic:\n    CClient() : m_cRef(1) {}\n\n    STDMETHODIMP QueryInterface(REFIID riid, void** ppvObject) override {\n        if (riid == IID_IUnknown || riid == IID_IDispatch || riid == IID_ITestEvents) {\n            *ppvObject = static_cast<ITestEvents*>(this);\n        } else {\n            *ppvObject = nullptr;\n            return E_NOINTERFACE;\n        }\n        AddRef();\n        return S_OK; \n    }\n\n    STDMETHODIMP_(ULONG) AddRef() override { return InterlockedIncrement(&m_cRef); }\n    STDMETHODIMP_(ULONG) Release() override {\n        ULONG ulRef = InterlockedDecrement(&m_cRef);\n        if (ulRef == 0) delete this;\n        return ulRef; \n    }\n\n    // IDispatch\n    STDMETHODIMP GetTypeInfoCount(UINT* pctinfo) override { return E_NOTIMPL; }\n    STDMETHODIMP GetTypeInfo(UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) override { return E_NOTIMPL; }\n    STDMETHODIMP GetIDsOfNames(REFIID riid, LPOLESTR* rgszNames, UINT cNames, LCID lcid,\n        DISPID* rgDispId) override { return E_NOTIMPL; }\n    STDMETHODIMP Invoke(DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS* pDispParams,\n        VARIANT* pVarResult, EXCEPINFO* pExcepInfo, UINT* puArgErr) override { return E_NOTIMPL; }\n\n    // ITestEvents\n    STDMETHODIMP OnEvent() override {\n        printf("OnEvent called!\n");\n        return S_OK;\n    }\n};\n\nint main() {\n    CoInitialize(NULL);\n    CLSID clsid = __uuidof(TestServer);\n    IUnknown* pUnk;\n    HRESULT hr = CoCreateInstance(clsid, NULL, CLSCTX_INPROC_SERVER, IID_IUnknown, (void**)&pUnk);\n    if (FAILED(hr)) return 1;\n\n    ITestServer* pTestServer;\n    hr = pUnk->QueryInterface(IID_ITestServer, (void**)&pTestServer);\n    if (FAILED(hr)) {\n        pUnk->Release();\n        CoUninitialize();\n        return 2;\n    }\n\n    CClient* pClient = new CClient();\n\n    IConnectionPointContainer* pCPC;\n    hr = pTestServer->QueryInterface(IID_IConnectionPointContainer, (void**)&pCPC);\n    if (FAILED(hr)) {\n        pTestServer->Release();\n        CoUninitialize();\n        return 3;\n    }\n\n    IConnectionPoint* pCP;\n    IID iid = IID_ITestEvents;\n    hr = pCPC->FindConnectionPoint(iid, &pCP);\n    if (FAILED(hr)) {\n        pCPC->Release();\n        pTestServer->Release();\n        CoUninitialize();\n        return 4;\n    }\n\n    DWORD dwCookie;\n    hr = pCP->Advise(pClient, &dwCookie);\n    if (SUCCEEDED(hr)) {\n        printf("Connection successful\n");\n\n        // Raise event\n        pTestServer->RaiseEvent();\n\n        // Unadvise the sink from connection point\n        hr = pCP->Unadvise(dwCookie);\n        if (FAILED(hr)) printf("Unadvise failed\n");\n    } else {\n        printf("Failed to advise\n");\n    }\n\n    delete pClient;\n    pCP->Release();\n    pCPC->Release();\n    pTestServer->Release();\n\n    CoUninitialize();\n    return 0;\n}