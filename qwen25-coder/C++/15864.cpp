#include <windows.h>\n#include <iostream>\n\nint main() {\n    // Process information structures\n    STARTUPINFO si1 = { sizeof(si1) };\n    PROCESS_INFORMATION pi1;\n\n    STARTUPINFO si2 = { sizeof(si2) };\n    PROCESS_INFORMATION pi2;\n\n    // Command line arguments for the new processes\n    LPCSTR appCmdLine = "cmd.exe"; // You could point this to your app if you wanted\n\n    // Start the first child process\n    if (!CreateProcess(\n        NULL,                 // lpApplicationName\n        (LPSTR)appCmdLine,    // lpCommandLine\n        NULL,                 // lpProcessAttributes\n        NULL,                 // lpThreadAttributes\n        FALSE,                // bInheritHandles\n        CREATE_NEW_CONSOLE,   // dwCreationFlags\n        NULL,                 // lpEnvironment\n        NULL,                 // lpCurrentDirectory\n        &si1,               // lpStartupInfo\n        &pi1))                // lpProcessInformation\n    {\n        std::cerr << "CreateProcess failed (" << GetLastError() << ").\n";\n        return 1;\n    }\n\n    // Start the second child process\n    if (!CreateProcess(\n        NULL,                 // lpApplicationName\n        (LPSTR)appCmdLine,    // lpCommandLine\n        NULL,                 // lpProcessAttributes\n        NULL,                 // lpThreadAttributes\n        FALSE,                // bInheritHandles\n        CREATE_NEW_CONSOLE,   // dwCreationFlags\n        NULL,                 // lpEnvironment\n        NULL,                 // lpCurrentDirectory\n        &si2,               // lpStartupInfo\n        &pi2))                // lpProcessInformation\n    {\n        std::cerr << "CreateProcess failed (" << GetLastError() << ").\n";\n        return 1;\n    }\n\n    // Send commands to the console windows - this is basic example using WriteConsoleA\n    CHAR msg1[] = "echo 1\n";\n    DWORD bytesWritten;\n    WriteConsole(pi1.hStdInput, msg1, strlen(msg1), &bytesWritten, NULL);\n\n    CHAR msg2[] = "echo 2\n";\n    WriteConsole(pi2.hStdInput, msg2, strlen(msg2), &bytesWritten, NULL);\n\n    // Wait for both child processes to finish\n    WaitForSingleObject(pi1.hProcess, INFINITE);\n    WaitForSingleObject(pi2.hProcess, INFINITE);\n\n    // Clean up resources\n    CloseHandle(pi1.hThread);  CloseHandle(pi1.hProcess); \n    CloseHandle(pi2.hThread);  CloseHandle(pi2.hProcess);\n\n    return 0;\n}