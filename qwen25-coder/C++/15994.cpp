// Include necessary headers\n#include <dwmapi.h>\n#pragma comment(lib, "dwmapi.lib")\n\nBOOL IsDwmEnabled()\n{\n    BOOL bResult = FALSE;\n    DwmIsCompositionEnabled(&bResult);\n    return bResult;\n}\n\nRECT GetNonClientFrameAdjustment(HWND hwnd)\n{\n    RECT rcExtendedFrame = { 0 };\n    RECT rcStandardFrame = { 0 };\n\n    if (IsDwmEnabled())\n    {\n        // Get the extended frame bounds\n        DwmGetWindowAttribute(hwnd, DWMWA_EXTENDED_FRAME_BOUNDS, &rcExtendedFrame, sizeof(rcExtendedFrame));\n    }\n    else\n    {\n        // On older systems, use AdjustWindowRectExEx for non-client area calculation\n        RECT rc = { 0 };\n        GetClientRect(hwnd, &rc);\n        AdjustWindowRectExEx(&rc, WS_POPUP | WS_THICKFRAME, FALSE, WS_EX_TOOLWINDOW | WS_EX_TOPMOST, NULL, &rcExtendedFrame);\n    }\n\n    // The standard frame can be obtained by using the usual method\n    RECT rcTest = { 0 };\n    GetClientRect(hwnd, &rcTest);\n    AdjustWindowRectEx(&rcTest, WS_POPUP | WS_THICKFRAME, FALSE, WS_EX_TOOLWINDOW | WS_EX_TOPMOST);\n\n    SetRectDifference(&rcStandardFrame, &rcExtendedFrame, &rcTest);\n\n    return rcStandardFrame;\n}\n\n// Usage example:\nRECT nonClientAdjust = GetNonClientFrameAdjustment(AppBarData.hWnd);\nint topPadding = nonClientAdjust.top;  // Use this value to adjust your window size