// A simplified version of shared_ptr\ntemplate<typename T>\nclass simple_shared_ptr {\n public:\n    explicit simple_shared_ptr(T* ptr = 0)\n        : _ptr(ptr), _count(new int(1)) {}\n\n    ~simple_shared_ptr() {\n        if (--(*_count) == 0) {\n            delete _ptr;\n            delete _count;\n        }\n    }\n\n    simple_shared_ptr(const simple_shared_ptr& other)\n        : _ptr(other._ptr),\n          _count(other._count) {\n        (*_count)++;\n    }\n\n    simple_shared_ptr& operator=(const simple_shared_ptr& other) {\n        if (this != &other) {\n            reset();\n            _ptr = other._ptr;\n            _count = other._count;\n            (*_count)++;\n        }\n        return *this;\n    }\n\n    T* get() const { return _ptr; }\n    void reset(T* ptr = 0) {\n        if (--(*_count) == 0) {\n            delete _ptr;\n            delete _count;\n        }\n        _ptr = ptr;\n        _count = new int(1);\n    }\n\n    T& operator*() const { return *_ptr; }\n    T* operator->() const { return _ptr; }\n\n private:\n    T* _ptr;\n    int* _count;\n};