#include <boost/thread.hpp>\n#include <queue>\n\nstd::queue<data> q;\nboost::mutex access;\nboost::condition_variable cond;\n\n// consumer\ndata read() {\n    boost::unique_lock<boost::mutex> lock(access);\n\n    // This blocks until the data is ready\n    while (q.empty()) {  // Always check a condition predicate with a loop to prevent spurious wakeups.\n        cond.wait(lock);\n    }\n\n    // Queue is ready, get data from queue\n    data item = q.front();\n    q.pop();\n    return item;\n}\n\n// producer\nvoid push(const data& item) {\n    boost::unique_lock<boost::mutex> lock(access);\n    q.push(item);  // add data to queue\n\n    cond.notify_one();  \n}