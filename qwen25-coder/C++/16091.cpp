#include <vector>\n#include <cmath>\n\nstruct Vector2D {\n    float x, y;\n};\n\nclass Component {\nprivate:\n    Vector2D relativePosition; // Position relative to ship center\n    Vector2D rotatedPosition;  // Cache for already computed rotated position\n    bool isRotatedPositionValid = false;\n\npublic:\n    Component(float relX, float relY) : relativePosition{relX, relY} {}\n\n    const Vector2D& getRotatedPosition(float angle) {\n        if (!isRotatedPositionValid) {\n            // Rotate the component's position.\n            rotatedPosition.x = relativePosition.x * cos(angle) - relativePosition.y * sin(angle);\n            rotatedPosition.y = relativePosition.x * sin(angle) + relativePosition.y * cos(angle);\n            isRotatedPositionValid = true;\n        }\n        return rotatedPosition;\n    }\n\n    // Mark the position as invalid if rotation changes\n    void markRotationInvalid() {\n        isRotatedPositionValid = false;\n    }\n};