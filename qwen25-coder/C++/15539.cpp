#include <mscoree.h>\n#include <metahost.h>\n#include <iostream>\n\n#pragma comment(lib, "mscoree.lib")\n#pragma comment(lib, "corhlpr.lib")\n\nint main() {\n    HRESULT hr;\n\n    // Initialize the COM library.\n    if (FAILED(hr = CoInitializeEx(NULL, COINIT_MULTITHREADED))) {\n        std::cerr << "Failed to initialize the COM library. HR: 0x" \n                  << std::hex << hr << std::endl;\n        return -1;\n    }\n\n    // .NET runtime version that is loaded\n    ICLRMetaHost *pMetaHost = NULL;\n\n    // Create CLR Runtime Host.\n    if (FAILED(hr = CLRCreateInstance(CLSID_CLRMetaHost, IID_PPV_ARGS(&pMetaHost)))) {\n        std::cerr << "Failed to create CLR Metahost object. HR: 0x" \n                  << std::hex << hr << std::endl;\n        return -1;\n    }\n\n    ICLRRuntimeInfo *pRuntimeInfo = NULL;\n\n    /* If the runtime version is not specified we use the latest .NET\n       runtime installed on this machine */\n    if (FAILED(hr = pMetaHost->GetLatestSku Runtime(&pRuntimeInfo))) {\n        std::cerr << "Failed to get the latest SKU. HR: 0x" \n                  << std::hex << hr << std::endl;\n        return -1;\n    }\n\n    ICLRRuntimeHost *host = NULL;\n\n    if (FAILED(hr = pRuntimeInfo->GetInterface(CLSID_CLRRuntimeHost, IID_PPV_ARGS(&host)))) {\n        std::cerr << "Failed to get the CLR Runtime host interface. HR: 0x" \n                  << std::hex << hr << std::endl;\n        return -1;\n    }\n\n    // Start up the CLR using this runtime version\n    if (FAILED(hr = host->Start())) {\n        std::cerr << "Failed to start the CLR. HR: 0x" \n                  << std::hex << hr << std::endl;\n        return -1;\n    }\n\n    // Now that we have started the CLR, we can interact with it\n    DWORD res;\n    if (FAILED(hr = host->ExecuteInDefaultAppDomain(\n            L"path_to_your_assembly.dll",     /* Path to managed assembly */\n            L"Namespace.ClassName",           /* Name of type */\n            L"MethodName",                    /* Name of method */\n            L"",                              /* Arguments passed as a single string */\n            &res))) {\n        std::cerr << "Failed in ExecuteInDefaultAppDomain(). HR: 0x" \n                  << std::hex << hr << std::endl;\n    } else {\n        std::cout << "ExecuteInDefaultAppDomain() returned. Result: "\n                  << res << std::endl;\n    }\n\n    // Stop the CLR\n    if (FAILED(hr = host->Stop())) {\n        std::cerr << "Failed to stop the CLR. HR: 0x" \n                  << std::hex << hr << std::endl;\n        return -1;\n    }\n\n    // Clean up COM resources.\n    CoFreeUnusedLibraries();\n\n    // Release the ICLRMetaHost interface pointer.\n    if (pMetaHost) pMetaHost->Release();\n    \n    // Release the ICLRRuntimeInfo interface pointer.\n    if (pRuntimeInfo) pRuntimeInfo->Release();\n    \n    // Release the ICLRRuntimeHost interface pointer.\n    if (host) host->Release();\n\n    return 0;\n}