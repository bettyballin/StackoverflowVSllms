#include <windows.h>\n#include <objbase.h>\n#include <comdef.h>\n#include <iostream>\n\nvoid PrintTypeInfo(ITypeInfo* pTI) {\n    TYPEATTR* tAttr;\n    if (FAILED(pTI->GetTypeAttr(&tAttr))) return;\n\n    std::wcout << L"Type: " << tAttr->lcid << std::endl;\n    \n    for (UINT i = 0; i < tAttr->cFuncs; ++i) {\n        FUNCDESC* funcDesc;\n        if (SUCCEEDED(pTI->GetFuncDesc(i, &funcDesc))) {\n            EX FUNCDESC* pExFnDesc = (EX FUNCDESC*)funcDesc;\n            std::wcout << L"Function: " << std::endl;\n            \n            WCHAR szBuf[512];\n            BSTR bsName;\n            if (SUCCEEDED(pTI->GetDocumentation(funcDesc->memid, &bsName, NULL, NULL, NULL))) {\n                wcscpy_s(szBuf, 512, bsName);\n                SysFreeString(bsName);\n                std::wcout << szBuf << L"(";\n\n                for (int arg = funcDesc->lprgelemdescParam[0].paramdesc.wParamFlags; \n                     arg < funcDesc->cParams+funcDesc->lprgelemdescParam[0].paramdesc.wParamFlags; ++arg) {\n                    if (arg > 1)\n                        std::wcout << L", ";\n                    \n                    pTI->GetVarDesc(arg, &pExFnDesc->lpElems);\n                    std::wcout << pExFnDesc->lpElems->elemdesc.tdesc.vt;\n                }\n                \n                std::wcout << L")" << std::endl;\n            }\n\n            pTI->ReleaseFuncDesc(funcDesc);\n        }   \n    }\n    \n    for (UINT i = 0; i < tAttr->cVars; ++i) {\n        VARDESC* varDesc;\n        if (SUCCEEDED(pTI->GetVarDesc(i, &varDesc))) {\n            BSTR bsName;\n            if (SUCCEEDED(pTI->GetDocumentation(varDesc->memid, &bsName, NULL, NULL, NULL))) {\n                std::wcout << L"Property: " << bsName << L" (" \n                           << varDesc->elemdescVar.tdesc.vt << ")" << std::endl;\n                SysFreeString(bsName);\n            }\n            \n            pTI->ReleaseVarDesc(varDesc);\n        }\n    }\n\n    pTI->ReleaseTypeAttr(tAttr);\n}\n\nint main() {\n    CoInitialize(NULL);\n\n    CLSID clsid;\n    CLSIDFromProgID(L"Scripting.FileSystemObject", &clsid);\n    \n    IUnknown* pUnk = NULL;\n    HRESULT hr = CoCreateInstance(clsid, NULL, CLSCTX_INPROC_SERVER | CLSCTX_LOCAL_SERVER, IID_IDispatch, (void**)&pUnk);\n    if (FAILED(hr)) {\n        std::cerr << "Failed to create object." << std::endl;\n        return 1;\n    }\n\n    IDispatch* pDisp = NULL;\n    hr = pUnk->QueryInterface(IID_IDispatch, (void**)&pDisp);\n    if (SUCCEEDED(hr)) {\n        ITypeInfo* pTI = NULL;\n        hr = pDisp->GetTypeInfo(0, LOCALE_USER_DEFAULT, &pTI);\n        \n        if (SUCCEEDED(hr))\n            PrintTypeInfo(pTI);\n\n        pTI->Release();\n        pDisp->Release();\n    }\n\n    pUnk->Release();\n    CoUninitialize();\n\n    return 0;\n}