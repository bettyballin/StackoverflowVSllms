#include <vector>\n#include <iostream>\n\nclass FastUnorderedArray {\nprivate:\n    std::vector<int> data;\n\npublic:\n    void add(int value) {\n        data.push_back(value);\n    }\n\n    bool remove(unsigned int index) {\n        if (index >= data.size()) return false; // Out of bounds\n        // Move the last element to the place of the one we want to remove\n        data[index] = data.back();\n        data.pop_back(); // Remove the last element\n        return true;\n    }\n\n    int get(unsigned int index) const {\n        if (index >= data.size()) throw std::out_of_range("Index out of range");\n        return data[index];\n    }\n\n    size_t size() const {\n        return data.size();\n    }\n};\n\nint main() {\n    FastUnorderedArray arr;\n    arr.add(10);\n    arr.add(20);\n    arr.add(30);\n\n    std::cout << "Removed: " << (arr.remove(1) ? "Success" : "Failure") << "\n"; // Removes 20, replaces with 30\n    for (size_t i = 0; i < arr.size(); ++i) {\n        std::cout << arr.get(i) << " ";\n    }\n    // Output will be: Removed: Success\n    //                 10 30\n\n    return 0;\n}