#include <windows.h>\n#include <iostream>\n#include <string>\n\nstd::string exec(const char* cmd) {\n    std::array<char, 128> buffer;\n    std::string result;\n    SECURITY_ATTRIBUTES saAttr; \n    HANDLE hReadPipe, hWritePipe;\n\n    // Set the bInheritHandle flag so pipe handles are inherited.\n    saAttr.nLength = sizeof(SECURITY_ATTRIBUTES);\n    saAttr.bInheritHandle = TRUE;\n    saAttr.lpSecurityDescriptor = NULL;\n\n    // Create a pipe for the child process's STDOUT. \n    if (!CreatePipe(&hReadPipe, &hWritePipe, &saAttr, 0)) {\n        return "Error creating pipe.";\n    }\n\n    STARTUPINFO si;\n    PROCESS_INFORMATION pi;\n    ZeroMemory(&si, sizeof(si));\n    si.cb = sizeof(si);\n    si.hStdOutput = hWritePipe;\n    si.hStdError = hWritePipe; // Redirect stderr too\n    si.dwFlags |= STARTF_USESTDHANDLES;\n\n    ZeroMemory(&pi, sizeof(pi));\n\n    // Start the child process. \n    if (!CreateProcess(NULL,\n                       (LPSTR)cmd,   // Command line\n                       NULL,          // Process handle not inheritable\n                       NULL,          // Thread handle not inheritable\n                       TRUE,          // Set handle inheritance to TRUE\n                       0,             // No creation flags \n                       NULL,          // Use parent's environment block\n                       NULL,          // Use parent's starting directory \n                       &si,           // Pointer to STARTUPINFO structure\n                       &pi)           // Pointer to PROCESS_INFORMATION structure)) { \n\n        return "Error creating process.";\n    }\n\n    CloseHandle(hWritePipe);\n    \n    // Read output from the child process's pipe for STDOUT and STDERR.\n    DWORD bytesRead;\n    while (ReadFile(hReadPipe, buffer.data(), buffer.size() - 1, &bytesRead, NULL) != 0 && bytesRead > 0) {\n        buffer[bytesRead] = '\0';\n        result += std::string(buffer.data());\n    }\n\n    CloseHandle(pi.hProcess);\n    CloseHandle(pi.hThread);\n    return result;\n}\n\nint main() {\n    std::string output = exec("svn update");\n    std::cout << "SVN Update Output:\n" << output;\n\n    // Example of capturing make output\n    std::string buildOutput = exec("make");\n    std::cout << "\nBuild Output:\n" << buildOutput;\n    \n    return 0;\n}