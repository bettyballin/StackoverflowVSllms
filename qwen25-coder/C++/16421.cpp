int col_num = 1;\nSQLINTEGER length = very_long_string.length();\nretcode = SQLBindParameter(\n    StatementHandle,\n    (SQLUSMALLINT)col_num,       // parameter number\n    SQL_PARAM_INPUT,              // input/output type\n    SQL_C_CHAR,                   // C data type\n    SQL_LONGVARCHAR,              // SQL data type (TEXT corresponds to LONGVARCHAR)\n    length,                       // column size (for variable-length types like TEXT)\n    0,                            // decimal digits (ignored for non-numeric types)\n    (SQLPOINTER)very_long_string.c_str(),  // pointer to the parameter value\n    0,                            // buffer length/indicator (0 because we're using SQLPutData)\n    &length                       // pointer to strlen_or_ind (used by SQLPutData to determine when data is complete)\n);\n\nif (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO) {\n    // Handle error\n}\n\n// Now you can use SQLPutData in a loop to send the data in chunks\nSQLLEN totalSent = 0;\nconst size_t chunkSize = 1024; // Define your preferred chunk size\n\nwhile (totalSent < length) {\n    retcode = SQLPutData(\n        StatementHandle,\n        (SQLPOINTER)(very_long_string.c_str() + totalSent),\n        std::min(chunkSize, static_cast<size_t>(length - totalSent))\n    );\n\n    if (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO) {\n        // Handle error\n        break;\n    }\n\n    totalSent += chunkSize;\n}