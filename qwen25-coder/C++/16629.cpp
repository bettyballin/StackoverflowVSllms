#include <iostream>\n#include <sys/ipc.h>\n#include <sys/shm.h>\n#include <unistd.h>\n\n#define SHM_SIZE 4  // Size of the segment\n\nint main() {\n    key_t key = ftok("shmfile", 65); // Generate a unique key\n    int shmid = shmget(key, SHM_SIZE, 0666|IPC_CREAT); // Create and get shared memory\n    int *count = (int*) shmat(shmid, (void*)0, 0); // Attach shared memory\n\n    if (*count == -1) {\n        std::cerr << "shmat error" << std::endl;\n        return 1;\n    }\n\n    *count = 0; // Initialize the count to zero\n\n    pid_t pid = fork();\n    if (pid < 0) {\n        std::cerr << "fork failed" << std::endl;\n        return 1;\n    } else if (pid == 0) { // Child process\n        (*count)++;\n        std::cout << "Child: count is now " << *count << std::endl;\n        shmdt(count); // Detach shared memory\n        _exit(0);\n    } else { // Parent process\n        wait(NULL); // Wait for the child to finish\n\n        if (pid > 0) {\n            pid = fork();\n            if (pid < 0) {\n                std::cerr << "fork failed" << std::endl;\n                return 1;\n            } else if (pid == 0) { // Second Child process\n                (*count)++;\n                std::cout << "Second child: count is now " << *count << std::endl;\n                shmdt(count); // Detach shared memory\n                _exit(0);\n            } else {\n                wait(NULL); // Wait for the second child to finish\n\n                std::cout << "Parent: final count is " << *count << std::endl;\n\n                shmdt(count); // Detach shared memory\n                shmctl(shmid, IPC_RMID, NULL); // Destroy shared memory\n            }\n        }\n    }\n\n    return 0;\n}