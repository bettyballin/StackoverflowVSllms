#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nint main() {\n    CURL *curl;\n    CURLcode res;\n\n    curl = curl_easy_init();\n    if(curl) {\n        std::string from    = "your-email@example.com";\n        std::string to      = "recipient-email@example.com";\n        std::string subject = "Test Email Subject";\n        std::string body    = "This is the test email body.";\n\n        // Recipient's name and email address\n        struct curl_slist *recipients  = NULL;\n        recipients = curl_slist_append(recipients, to.c_str());\n\n        // SMTP server options\n        curl_easy_setopt(curl, CURLOPT_URL, "smtp://smtp.example.com");\n        curl_easy_setopt(curl, CURLOPT_USERNAME, from.c_str());\n        curl_easy_setopt(curl, CURLOPT_PASSWORD, ""); // Use application-specific password if needed\n\n        std::string mail_text =\n            "Date: Mon, 29 Nov 2010 21:54:29 +1100\r\n"\n            "To: " + to + "\r\n"\n            "From: " + from + " (Example User)\r\n"\n            "Subject: " + subject + "\r\n"\n            "\r\n" /* empty line to divide headers from body, see RFC5322 */\n            + body + "\r\n";\n\n        curl_easy_setopt(curl, CURLOPT_MAIL_FROM, from.c_str());\n        curl_easy_setopt(curl, CURLOPT_MAIL_RCPT, recipients);\n        curl_easy_setopt(curl, CURLOPT_READDATA, &mail_text);\n\n        res = curl_easy_perform(curl);\n\n        if(res != CURLE_OK)\n            std::cerr << "curl_easy_perform() failed: " << curl_easy_strerror(res) << "\n";\n\n        // Free the list of recipients and clean up libcurl\n        curl_slist_free_all(recipients);\n        curl_easy_cleanup(curl);\n    }\n\n    return 0;\n}