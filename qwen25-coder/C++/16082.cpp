#include <sqltypes.h>\n#include <sqlext.h>\n#include <iostream>\n\nvoid executeQueryWithParameters(SQLHSTMT hStmt, const std::string& userName) {\n    // Example SQL statement with parameter markers (?)\n    SQLCHAR* query = (SQLCHAR*)"SELECT * FROM users WHERE username = ?";\n\n    // Prepare the SQL statement\n    if (SQLPrepare(hStmt, query, SQL_NTS) != SQL_SUCCESS) {\n        std::cerr << "Failed to prepare statement\n";\n        return;\n    }\n\n    // Bind parameter marker (?) in SQL statement\n    if (SQLBindParameter(hStmt,\n                         1,                  // Parameter number\n                         SQL_PARAM_INPUT,      // Input/Output type\n                         SQL_C_CHAR,         // C Data Type\n                         SQL_VARCHAR,          // SQL Data Type\n                         20,                   // Column Size\n                         0,                    // Decimal digits\n                         (SQLPOINTER)userName.c_str(),   // Parameter value pointer\n                         userName.size() + 1,    // Buffer length\n                         NULL                  // Length/indicator ptr\n                         ) != SQL_SUCCESS) {\n        std::cerr << "Failed to bind parameter\n";\n        return;\n    }\n\n    // Execute the statement\n    if (SQLExecute(hStmt) != SQL_SUCCESS) {\n        std::cerr << "Execution failed\n";\n        return;\n    }\n\n    // Process results...\n\n    // Unbind parameters or free handle\n    SQLFreeHandle(SQL_HANDLE_STMT, hStmt);\n}\n\nint main() {\n    SQLHENV hEnv;  // Environment handle\n    SQLHDBC hDbc;  // Connection handle\n    SQLHSTMT hStmt; // Statement handle\n\n    // Initialize environment and connection setup here...\n\n    // Assume hStmt is properly set up to execute queries\n    std::string userInput = "exampleUser";\n    executeQueryWithParameters(hStmt, userInput);\n\n    // Cleanup resources\n    // ...\n\n    return 0;\n}