// test.cpp, compiled with VC9\n#include "interface.h"\n\n#include <iostream>\n#include <windows.h>\n\nint main()\n{\n    HMODULE dll = nullptr;\n    typedef IClass* (*CreateClassFunc)(void);\n    CreateClassFunc method = nullptr;\n    IClass* dllclass = nullptr;\n\n    std::cout << "Loading a.dll\n";\n    dll = LoadLibraryW(L"a.dll");\n    if (dll) {\n        method = reinterpret_cast<CreateClassFunc>(GetProcAddress(dll, "CreateClass"));\n        if (method) {\n            dllclass = method();\n            if (dllclass) {\n                dllclass->PrintSomething(); // Should not crash\n                dllclass->Release();\n            } else {\n                std::cerr << "Failed to create class\n";\n            }\n        } else {\n            std::cerr << "Failed to get CreateClass function address\n";\n        }\n    } else {\n        std::cerr << "Failed to load a.dll\n";\n    }\n\n    if (dll) FreeLibrary(dll);\n\n    std::cout << "Done, press enter to exit." << std::endl;\n    std::cin.get();\n    return 0;\n}