#include <windows.h>\n#include <wincrypt.h>\n#include <stdio.h>\n\n#pragma comment(lib, "advapi32.lib")\n\nBOOL EncryptData(const DATA_BLOB& dataIn, DATA_BLOB* pEncryptedBlob)\n{\n    return CryptProtectData(\n        &dataIn,\n        L"Sample Description",\n        NULL, // no optional entropy\n        NULL, // reserved\n        NULL, // prompt for key (dialog box)\n        CRYPTPROTECT_LOCAL_MACHINE|CRYPTPROTECT_UI_FORBIDDEN,\n        pEncryptedBlob);\n}\n\nBOOL DecryptData(DATA_BLOB& encryptedBlob, DATA_BLOB* pDataOut)\n{\n    return CryptUnprotectData(\n        &encryptedBlob,\n        NULL, // ignores if specified\n        NULL, // optional entropy\n        NULL, // reserved\n        NULL, // prompt for key (dialog box)\n        0,    // see docs: flags to use\n        pDataOut);\n}\n\nvoid SecureStorage()\n{\n    DATA_BLOB dataIn = {0}, encryptedBlob = {0}, plaintextBlob;\n\n    // Prepare data to encrypt\n    BYTE szData[] = "Sensitive information";\n    dataIn.pbData = reinterpret_cast<BYTE*>(szData);\n    dataIn.cbData = sizeof(szData) / sizeof(szData[0]);\n\n    if (EncryptData(dataIn, &encryptedBlob))\n    {\n        printf("Encryption succeeded.\n");\n\n        if (DecryptData(encryptedBlob, &plaintextBlob))\n        {\n            printf("Decryption succeeded. Original: %s\n", plainTextBlob.pbData);\n            SecureZeroMemory(plainTextBlob.pbData, plaintextBlob.cbData);\n            LocalFree(plaintextBlob.pbData);\n        }\n        else\n        {\n            printf("Decryption failed.\n");\n        }\n\n        LocalFree(encryptedBlob.pbData);\n    }\n}