#include <windows.h>\n#include <iostream>\n\nLONG ReadDWordFromRegistry(const std::string& keyPath, DWORD& value) {\n    HKEY hRootKey = NULL;\n    const char* subKeyPath = "";\n\n    if (keyPath.find("HKEY_CURRENT_USER") == 0) {\n        hRootKey = HKEY_CURRENT_USER;\n        subKeyPath = keyPath.c_str() + strlen("HKEY_CURRENT_USER\\");\n    } else {\n        return ERROR_FILE_NOT_FOUND; // or another appropriate error code\n    }\n\n    HKEY hKey;\n    LONG result = RegOpenKeyEx(hRootKey, subKeyPath, 0, KEY_READ, &hKey);\n    if (result != ERROR_SUCCESS) return result;\n\n    DWORD type = REG_DWORD;\n    DWORD dataSize = sizeof(DWORD);\n    result = RegQueryValueEx(hKey, NULL, NULL, &type, (LPBYTE)&value, &dataSize);\n\n    // Close the key\n    RegCloseKey(hKey);\n    \n    if (result != ERROR_SUCCESS) return result;\n\n    return 0; // success\n}\n\nLONG WriteDWordToRegistry(const std::string& keyPath, DWORD value) {\n    HKEY hRootKey = NULL;\n    const char* subKeyPath = "";\n\n    if (keyPath.find("HKEY_CURRENT_USER") == 0) {\n        hRootKey = HKEY_CURRENT_USER;\n        subKeyPath = keyPath.c_str() + strlen("HKEY_CURRENT_USER\\");\n    } else {\n        return ERROR_FILE_NOT_FOUND; // or another appropriate error code\n    }\n\n    HKEY hKey;\n    LONG result = RegCreateKeyEx(hRootKey, subKeyPath, 0, NULL, REG_OPTION_NON_VOLATILE, KEY_WRITE, NULL, &hKey, NULL);\n    if (result != ERROR_SUCCESS) return result;\n\n    result = RegSetValueEx(hKey, NULL, 0, REG_DWORD, (const BYTE*)&value, sizeof(value));\n\n    // Close the key\n    RegCloseKey(hKey);\n    \n    if (result != ERROR_SUCCESS) return result;\n\n    return 0; // success\n}\n\nint main() {\n    std::string keyPath = "HKEY_CURRENT_USER\\Software\\MyProgram\\SomeKey";\n    DWORD valueToRead, valueToWrite = 12345;\n\n    LONG readResult = ReadDWordFromRegistry(keyPath, valueToRead);\n    if (readResult == 0) {\n        std::cout << "Value read: " << valueToRead << std::endl;\n    } else {\n        std::cerr << "Failed to read from registry: " << readResult << std::endl;\n    }\n\n    LONG writeResult = WriteDWordToRegistry(keyPath, valueToWrite);\n    if (writeResult == 0) {\n        std::cout << "Value written successfully." << std::endl;\n    } else {\n        std::cerr << "Failed to write to registry: " << writeResult << std::endl;\n    }\n\n    return 0;\n}