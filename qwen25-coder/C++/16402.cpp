#include <windows.h>\n#include <combaseapi.h> // For CoCreateInstance and other COM functions\n\n// Assume IS8Simulation is defined elsewhere in your code or headers\ninterface IS8Simulation {\n    virtual HRESULT STDMETHODCALLTYPE Open() = 0;\n};\n\nUINT_PTR dwGenericThreadID;\n\nDWORD WINAPI SecondaryThread(LPVOID lpParam) {\n    IS8Simulation* pis8 = static_cast<IS8Simulation*>(lpParam);\n    if (pis8 != nullptr) {\n        // Use the interface pointer\n        pis8->Open();\n        // Don't forget to release the interface after use if necessary\n        pis8->Release();\n    }\n    return 0;\n}\n\nint main() {\n    CLSID clsid; // Assume this is initialized with the appropriate CLSID\n    IS8Simulation* pis8 = nullptr;\n\n    HRESULT hr = CoCreateInstance(\n                     clsid,\n                     NULL,\n                     CLSCTX_LOCAL_SERVER,\n                     __uuidof(IS8Simulation),\n                     reinterpret_cast<void**>(&pis8));\n\n    if (FAILED(hr)) {\n        // Handle error\n        return -1;\n    }\n\n    HANDLE hThread = CreateThread(\n                    NULL,                   // default security attributes\n                    0,                      // use default stack size  \n                    SecondaryThread,        // thread function name\n                    pis8,                   // argument to thread function \n                    0,                      // use default creation flags \n                    &dwGenericThreadID);    // returns the thread identifier\n\n    if (hThread == NULL) {\n        // Handle error\n        // Don't forget to release pis8 before returning if necessary\n        pis8->Release();\n        return -1;\n    }\n\n    // Wait for the thread to finish or detach it depending on your application needs\n    WaitForSingleObject(hThread, INFINITE);\n\n    CloseHandle(hThread);  // Clean up\n\n    return 0;\n}