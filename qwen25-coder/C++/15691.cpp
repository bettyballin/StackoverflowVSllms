#include <vector>\n#include <utility>\n#include <iostream>\n\nstruct Point {\n    double x, y;\n};\n\nclass QuadtreeNode {\npublic:\n    std::vector<Point> points;\n    QuadtreeNode* ne = nullptr; // northeast\n    QuadtreeNode* nw = nullptr; // northwest\n    QuadtreeNode* sw = nullptr; // southwest\n    QuadtreeNode* se = nullptr; // southeast\n    double x0, y0, x1, y1;\n\n    QuadtreeNode(double x0, double y0, double x1, double y1) : x0(x0), y0(y0), x1(x1), y1(y1) {}\n\n    void insert(Point p) {\n        if (points.size() < 4 && !ne) { // Assuming max 4 points per node for simplicity\n            points.push_back(p);\n        } else {\n            ensureChildren();\n            if (p.x <= (x0 + x1) / 2 && p.y >= (y0 + y1) / 2)\n                nw->insert(p);\n            else if (p.x > (x0 + x1) / 2 && p.y >= (y0 + y1) / 2)\n                ne->insert(p);\n            else if (p.x <= (x0 + x1) / 2 && p.y < (y0 + y1) / 2)\n                sw->insert(p);\n            else\n                se->insert(p);\n        }\n    }\n\n    void query(double qx0, double qy0, double qx1, double qy1, std::vector<Point>& result) {\n        // Check if this rectangle intersects with the query rectangle\n        if (x1 < qx0 || x0 > qx1 || y1 < qy0 || y0 > qy1)\n            return;\n\n        for (const auto& p : points) { // Check points in node\n            if (p.x >= qx0 && p.y >= qy0 && p.x <= qx1 && p.y <= qy1)\n                result.push_back(p);\n        }\n\n        if (!ne) return; // No children\n\n        ne->query(qx0, qy0, qx1, qy1, result); // Query child nodes\n        nw->query(qx0, qy0, qx1, qy1, result);\n        sw->query(qx0, qy0, qx1, qy1, result);\n        se->query(qx0, qy0, qx1, qy1, result);\n    }\n\nprivate:\n    void ensureChildren() {\n        if (!ne) ne = new QuadtreeNode((x0 + x1) / 2, (y0 + y1) / 2, x1, y1);\n        if (!nw) nw = new QuadtreeNode(x0, (y0 + y1) / 2, (x0 + x1) / 2, y1);\n        if (!sw) sw = new QuadtreeNode(x0, y0, (x0 + x1) / 2, (y0 + y1) / 2);\n        if (!se) se = new QuadtreeNode((x0 + x1) / 2, y0, x1, (y0 + y1) / 2);\n    }\n};\n\nint main() {\n    std::vector<Point> points = {{0.5, 3}, {2, 4}, {1, 2}, {3, 1}, {2, 3}};\n    QuadtreeNode q(0, 0, 5, 5); // Create a quadtree for the space (0,0) to (5,5)\n\n    for (const auto& p : points)\n        q.insert(p);\n\n    std::vector<Point> result;\n    double rectX0 = 1.0, rectY0 = 2.0, rectX1 = 3.5, rectY1 = 4.5; // Rectangle region to query\n    q.query(rectX0, rectY0, rectX1, rectY1, result);\n\n    std::cout << "Points in rectangle: ";\n    for (const auto& p : result)\n        std::cout << "(" << p.x << ", " << p.y << ") ";\n    std::cout << std::endl;\n\n    return 0;\n}