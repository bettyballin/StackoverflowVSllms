#include <windows.h>\n#include <iostream>\n#include <comdef.h>\n\nint main()\n{\n    // Initialize COM library.\n    HRESULT hr = CoInitialize(NULL);\n    if (FAILED(hr)) {\n        std::cerr << "Failed to initialize COM library. Error code = 0x"\n                  << std::hex << hr << std::endl;\n        return 1;  // Program has failed.\n    }\n\n    CLSID clsid;\n    HRESULT res = CLSIDFromProgID(_bstr_t("StringListProvider.StringListProvider"), &clsid);\n\n    if (FAILED(res)) {\n        std::cerr << "Error getting CLSID. Error code = 0x"\n                  << std::hex << res << std::endl;\n        CoUninitialize();\n        return 1;  // Program has failed.\n    }\n\n    IStringListProvider* pIStringListProvider = NULL;\n    res = CoCreateInstance(\n        clsid,\n        NULL,\n        CLSCTX_INPROC_SERVER,\n        IID_IStringListProvider,\n        (void**)&pIStringListProvider);\n\n    if (FAILED(res)) {\n        std::cerr << "Error creating instance. Error code = 0x"\n                  << std::hex << res << std::endl;\n        CoUninitialize();\n        return 1;  // Program has failed.\n    }\n\n    VARIANT var;\n    VariantInit(&var);\n    HRESULT hr1 = pIStringListProvider->GetStringList(&var);\n\n    if (SUCCEEDED(hr1))\n    {\n        if (var.vt == (VT_ARRAY | VT_BSTR))\n        {\n            SAFEARRAY* psa = V_ARRAY(&var);\n            LONG lLbound, lUbound;\n            SafeArrayGetLBound(psa, 1, &lLbound);\n            SafeArrayGetUBound(psa, 1, &lUbound);\n\n            BSTR bstr;\n            for (LONG i = lLbound; i <= lUbound; i++)\n            {\n                hr1 = SafeArrayGetElement(psa, &i, &bstr);\n                if (SUCCEEDED(hr1))\n                {\n                    std::wcout << bstr << std::endl;\n                    SysFreeString(bstr);\n                }\n            }\n        }\n\n        VariantClear(&var);\n    }\n\n    pIStringListProvider->Release();\n    CoUninitialize();\n\n    return 0; // Program succeeded.\n}