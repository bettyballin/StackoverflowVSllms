#include <vector>\n#include <algorithm> // for std::lower_bound\n\ntemplate <typename ForwardIt, typename T>\nForwardIt binary_search_iterator(ForwardIt first, ForwardIt last, const T& value) {\n    ForwardIt iter = std::lower_bound(first, last, value);\n    if (iter != last && *iter == value) {\n        return iter;\n    }\n    return last; // element not found\n}\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 6, 7, 8, 9, 0}; // Ensure the vector is sorted for binary search\n    auto iter = binary_search_iterator(vec.begin(), vec.end(), 5);\n\n    if (iter != vec.end()) {\n        std::cout << "Element found: " << *iter << '\n';\n    } else {\n        std::cout << "Element not found.\n";\n    }\n\n    return 0;\n}