#include <iostream>\n#include <cstring>\n\nconst int MAX_NAME_LENGTH = 100;\nint numberOfNames = 5; // Example size, adjust as needed\nchar** registeredNames = new char*[numberOfNames];\nint lastIndex = 0;\n\nbool isNameRegistered(const char* name) {\n    for (int i = 0; i < lastIndex; ++i) {\n        if (strcmp(registeredNames[i], name) == 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvoid registerName(const char* name, int length) {\n    // Check if the name is already registered\n    if (!isNameRegistered(name)) {\n        // Allocate memory for the new name and copy it over\n        registeredNames[lastIndex] = new char[length + 1];\n        strcpy(registeredNames[lastIndex], name);\n        lastIndex++;\n\n        // Resize if necessary (basic check, not optimal)\n        if (lastIndex >= numberOfNames) {\n            int newSize = numberOfNames * 2;\n            char** temp = new char*[newSize];\n            for (int i = 0; i < lastIndex; ++i) {\n                temp[i] = registeredNames[i];\n            }\n            delete[] registeredNames;\n            registeredNames = temp;\n            numberOfNames = newSize;\n        }\n    }\n}\n\nvoid cleanup() {\n    // Free all allocated strings\n    for (int i = 0; i < lastIndex; ++i) {\n        delete[] registeredNames[i];\n    }\n    // Free the array of pointers\n    delete[] registeredNames;\n}\n\nint main() {\n    registerName("Alice", strlen("Alice"));\n    registerName("Bob", strlen("Bob"));\n    registerName("Alice", strlen("Alice")); // This should not add a duplicate\n\n    for (int i = 0; i < lastIndex; ++i) {\n        std::cout << registeredNames[i] << std::endl;\n    }\n\n    cleanup(); // Clean up allocated memory before exiting\n    return 0;\n}