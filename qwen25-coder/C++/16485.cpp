#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <unordered_map>\n#include <vector>\n\nusing namespace std;\n\ntypedef pair<string, int> FileAndLine; // filename and line number\n\nclass LoggerIndex {\npublic:\n    unordered_map<string, vector<FileAndLine>> index;\n\n    void addLogEntry(const string& filename, int lineNumber, const string& logEntry) {\n        size_t start = 0;\n        while (start < logEntry.length()) {\n            size_t end = logEntry.find(' ', start);\n            if (end == string::npos)\n                end = logEntry.length();\n            index[logEntry.substr(start, end - start)].emplace_back(filename, lineNumber);\n            start = end + 1;\n        }\n    }\n\n    void search(const string& term) {\n        auto it = index.find(term);\n        if (it != index.end()) {\n            for (const FileAndLine& fileLine : it->second)\n                cout << "Found in " << fileLine.first << " at line " << fileLine.second << endl;\n        } else {\n            cout << "No results found." << endl;\n        }\n    }\n\n    void loadLogs(const string& filename) {\n        ifstream logFile(filename);\n        if (!logFile.is_open()) return;\n\n        string logEntry;\n        int lineNumber = 0;\n        while (getline(logFile, logEntry)) {\n            lineNumber++;\n            addLogEntry(filename, lineNumber, logEntry);\n        }\n        logFile.close();\n    }\n};\n\nint main() {\n    LoggerIndex myIndex;\n    // Assuming there's a new log file added daily\n    for (int day = 1; day <= 30; ++day) { // Load logs from the last 30 days\n        string filename = "log_day_" + to_string(day) + ".txt";\n        myIndex.loadLogs(filename);\n    }\n\n    string searchTerm;\n    cout << "Enter search term: ";\n    cin >> searchTerm;\n    myIndex.search(searchTerm);\n\n    return 0;\n}