#include "mupdf/fitz.h"\n#include <iostream>\n#include <fstream>\n\nvoid render_pdf_page_to_bmp(const char *filename, int pagenum) {\n    fz_context *ctx = fz_new_context(nullptr, nullptr, FZ_STORE_UNLIMITED);\n    if (!ctx) {\n        std::cerr << "cannot create mupdf context" << std::endl;\n        return;\n    }\n\n    try {\n        fz_document *doc = fz_open_document(ctx, filename);\n        int page_count = fz_count_pages(ctx, doc);\n        if (pagenum >= page_count) {\n            std::cerr << "page number out of range" << std::endl;\n            throw 0;\n        }\n\n        fz_page *page = fz_load_page(ctx, doc, pagenum);\n\n        int w = fz_bound_page_rectangle(ctx, page)->x1;\n        int h = fz_bound_page_rectangle(ctx, page)->y1;\n\n        fz_pix *pix = fz_new_pixmap_with_data(ctx, fz_device_rgb(ctx), w, h, nullptr);\n        fz_device *dev = fz_new_draw_device(ctx, pix);\n\n        fz_matrix transform;\n        fz_rotate(&transform, -90);\n        fz_scale(&transform, 2 * w / h, 2);\n        fz_concat(&transform, &fz_identity);\n        fz_grow_pixmap(ctx, pix, 1.0);\n\n        fz_run_page_with_device(ctx, page, dev, transform, nullptr);\n        fz_close_device(ctx, dev);\n\n        // Save pixmap as BMP or convert to PNG\n        std::ofstream bmp_file("output.bmp", std::ios::out | std::ios::binary);\n        if (!bmp_file) {\n            throw 0;\n        }\n\n        // Write a simple BMP header\n        bmp_file.write("\x42\x4D", 2);\n        bmp_file.write((char*)&(w*h*3 + 54), 4); // File size\n        bmp_file.write("\x00\x00\x00\x00", 4);\n        bmp_file.write("\x36\x00\x00\x00", 4);\n\n        bmp_file.write("\x28\x00\x00\x00", 4); // Header size\n        bmp_file.write((char*)&w, 4);\n        bmp_file.write((char*)&h, 4);\n        bmp_file.write("\x01\x00", 2);\n        bmp_file.write("\x18\x00", 2); // Bits per pixel\n        bmp_file.write("\x03\x00\x00\x00", 4);\n        bmp_file.write((char*)&(w*h*3), 4);\n\n        for (int y = h-1; y>=0; --y) {\n            for (int x=0; x < w;++x) {\n                unsigned char r = pix->samples[y * pix->w + x];\n                unsigned char g = pix->samples[w*h + y * pix->w + x];\n                unsigned char b = pix->samples[2*w*h + y * pix->w + x];\n\n                bmp_file.write((char*)&b, 1);\n                bmp_file.write((char*)&g, 1);\n                bmp_file.write((char*)&r, 1);\n            }\n        }\n\n        fz_drop_pix(ctx, pix);\n        fz_close_device(ctx, dev);\n        fz_free_page(ctx, page);\n        fz_drop_document(ctx, doc);\n\n    } catch (...) {\n        std::cerr << "error rendering document" << std::endl;\n    }\n\n    fz_drop_context(ctx);\n}\n\nint main() {\n    render_pdf_page_to_bmp("example.pdf", 0); // Render the first page\n    return 0;\n}