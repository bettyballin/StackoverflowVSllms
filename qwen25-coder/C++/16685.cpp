#include <iostream>\n#include <cstdint>\n\nclass TCPConnectionSimulator {\nprivate:\n    uint32_t localSeq;  // Local sequence number\n    uint32_t remoteAck; // Expected acknowledgment from the remote\n\npublic:\n    TCPConnectionSimulator(uint32_t initialSeq)\n        : localSeq(initialSeq), remoteAck(0) {}\n\n    void receivePacket(uint32_t seq, uint32_t ack, uint16_t dataSize) {\n        if (seq == remoteAck && dataSize > 0) { // Packet is in order and not empty\n            remoteAck += dataSize; // Update expected acknowledgment number\n            std::cout << "Received packet with seq: " << seq << ", ack: " << ack \n                      << ". Updated local remoteAck to: " << remoteAck << std::endl;\n        }\n    }\n\n    void sendPacket(uint16_t dataSize) {\n        uint32_t currentSeq = localSeq; // Current sequence number for this packet\n        localSeq += dataSize; // Increment the sequence number for next packet\n        std::cout << "Sending packet with seq: " << currentSeq << ", ack: " << remoteAck \n                  << ". Updated localSeq to: " << localSeq << std::endl;\n    }\n};\n\nint main() {\n    TCPConnectionSimulator conn(1000);\n\n    // Simulate receiving and sending packets\n    conn.receivePacket(1000, 2000, 500);\n    conn.sendPacket(1000);\n    conn.receivePacket(2000, 3000, 750);\n    conn.sendPacket(500);\n\n    return 0;\n}