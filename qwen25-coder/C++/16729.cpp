#include <iostream>\n#include <vector>\n#include <algorithm>\n\nclass Thing {\npublic:\n    // Constructor\n    Thing(int val) : _val(val) {}\n\n    // Operator overload with const reference\n    bool operator<(const Thing& rhs) const {\n        std::cout << "this works!" << std::endl;\n        return this->val() < rhs.val();\n    }\n\n    int val() const { // Make the method const to avoid copying\n        return _val;\n    }\nprotected:\n    int _val;\n};\n\nstruct Sort {\n    bool operator()(const Thing& start, const Thing& end) const { // Use const references\n        return start.val() < end.val();\n    }\n};\n\nint main (int argc, char * const argv[]) {\n    std::srand(std::time(NULL));\n\n    std::vector<Thing> things;\n    for(int i = 0; i < 100; i++) {\n        Thing myThing(std::rand());\n        things.push_back(myThing);\n    }\n\n    // Use the overloaded operator<\n    std::sort(things.begin(), things.end());\n\n    // Alternatively, use the functor\n    // std::sort(things.begin(), things.end(), Sort());\n\n    for(int i = 0; i < 100; i++) {\n        std::cout << things.at(i).val() << std::endl;\n    }\n\n    return 0;\n}