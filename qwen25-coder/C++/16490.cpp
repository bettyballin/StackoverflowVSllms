#include <windows.h>\n#include <aclapi.h>\n\nHANDLE CreateSharedMemory() {\n    HANDLE hMapFile = NULL;\n    SECURITY_DESCRIPTOR sd;\n    SECURITY_ATTRIBUTES sa;\n\n    // Initialize security descriptor and security attributes.\n    if (!InitializeSecurityDescriptor(&sd, SECURITY_DESCRIPTOR_REVISION)) {\n        return FALSE;\n    }\n\n    PSID pSIDUser = NULL;   // SID of the current user\n    PSID pSIDLocalSystem = NULL;  // SID for Local System (service account)\n\n    // Create a well-known SID for local system.\n    if (!AllocateAndInitializeSid(&SECURITY_NT_AUTHORITY, 1, SECURITY_LOCAL_SYSTEM_RID,\n                                  0, 0, 0, 0, 0, 0, 0, &pSIDLocalSystem)) {\n        return FALSE;\n    }\n\n    // Obtain the SID for the current user.\n    if (!ConvertStringSidToSid(TEXT("S-1-5-11"), &pSIDUser)) {  // S-1-5-11 represents Authenticated Users\n        FreeSid(pSIDLocalSystem);\n        return FALSE;\n    }\n\n    EXPLICIT_ACCESS ea[2];\n    \n    ZeroMemory(&ea, sizeof(EXPLICIT_ACCESS) * 2);\n\n    // Initialize EA for Local System.\n    ea[0].grfAccessPermissions = GENERIC_ALL;         // Full control\n    ea[0].grfAccessMode = SET_ACCESS;\n    ea[0].grfInheritance = NO_INHERITANCE;\n    ea[0].Trustee.TrusteeForm = TRUSTEE_IS_SID;\n    ea[0].Trustee.TrusteeType = TRUSTEE_IS_WELL_KNOWN_GROUP;   \n    ea[0].Trustee.ptstrName = (LPTSTR)pSIDLocalSystem;\n\n    // Initialize EA for Authenticated Users.\n    ea[1].grfAccessPermissions = FILE_MAP_READ | FILE_MAP_WRITE;\n    ea[1].grfAccessMode = SET_ACCESS;\n    ea[1].grfInheritance = NO_INHERITANCE;\n    ea[1].Trustee.TrusteeForm = TRUSTEE_IS_SID;  \n    ea[1].Trustee.TrusteeType = TRUSTEE_IS_WELL_KNOWN_GROUP;\n    ea[1].Trustee.ptstrName = (LPTSTR)pSIDUser;\n\n    PACL pOldDacl = NULL, pNewDacl = NULL;\n    // Create dacl that grants previously initialized access rights.\n    if (SetEntriesInAcl(2, ea, pOldDacl, &pNewDacl) != ERROR_SUCCESS) {\n        FreeSid(pSIDUser);\n        FreeSid(pSIDLocalSystem);\n        return FALSE;\n    }\n\n    // Assign new Dacl to security descriptor.\n    if (!SetSecurityDescriptorDacl(&sd, TRUE, pNewDacl, FALSE)) {\n        FreeSid(pSIDUser);\n        FreeSid(pSIDLocalSystem);\n        LocalFree(pNewDacl);\n        return FALSE;\n    }\n    \n    sa.nLength = sizeof(SECURITY_ATTRIBUTES);\n    sa.lpSecurityDescriptor = &sd;\n    sa.bInheritHandle = TRUE;\n\n    // Create the file mapping object.\n    hMapFile = CreateFileMapping(\n            INVALID_HANDLE_VALUE,       // Use paging file\n            &sa,                        // Security attributes\n            PAGE_READWRITE,             // Read/Write access\n            0,                          // Max. object size \n            1024*1024,                  // Buffer size \n            TEXT("Global\\YourSharedMemory")  // Name of mapping object\n    );\n\n    if (hMapFile == NULL) {\n        FreeSid(pSIDUser);\n        FreeSid(pSIDLocalSystem);\n        LocalFree(pNewDacl);\n    } else {\n        // Clean up, if successful.\n        LocalFree(pNewDacl); \n        FreeSid(pSIDUser);\n        FreeSid(pSIDLocalSystem);\n    }\n\n    return hMapFile;\n}