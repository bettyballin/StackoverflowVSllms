#include <iostream>\n#include <vector>\n\ntemplate <typename T>\nclass A {\npublic:\n    using value_type = T;\n\n    A() noexcept = default;\n    \n    template<typename U>\n    A(const A<U>&) noexcept {}\n\n    [[nodiscard]] T* allocate(std::size_t n, const void* hint = 0) {\n        std::cout << "Yo!";\n        return static_cast<T*>(::operator new(n * sizeof(T)));\n    }\n\n    void deallocate(T* p, std::size_t n) {\n        ::operator delete(p);\n    }\n};\n\ntemplate<typename T, typename U>\nbool operator==(const A<T>&, const A<U>&) { return true; }\n\ntemplate<typename T, typename U>\nbool operator!=(const A<T>&, const A<U>&) { return false; }\n\n\nint main() {\n    std::vector<int, A<int>> v(1000, 42);\n    return 0;\n}