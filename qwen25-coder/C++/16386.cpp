#include <iostream>\n#include <libxml/parser.h>\n#include <libxml/xmlschemas.h>\n\nint main() {\n    xmlDocPtr doc;\n    xmlSchemaParserCtxtPtr parser_ctxt;\n    xmlSchemaPtr schema = NULL;\n    xmlSchemaValidCtxtPtr valid_ctxt;\n    int ret;\n\n    // Initialize the library and check potential ABI mismatches\n    LIBXML_TEST_VERSION\n\n    // Load the XML document\n    doc = xmlReadFile("your_xml_file.xml", NULL, 0);\n    if (doc == NULL) {\n        std::cerr << "Failed to parse your_xml_file.xml" << std::endl;\n        return -1;\n    }\n\n    // Create the schema parser context\n    parser_ctxt = xmlSchemaNewParserCtxt("your_schema.xsd");\n    if (parser_ctxt == NULL) {\n        std::cerr << "Error creating the parsing context" << std::endl;\n        xmlFreeDoc(doc);\n        return -1;\n    }\n\n    // Compile the schema\n    schema = xmlSchemaParse(parser_ctxt);\n    xmlSchemaFreeParserCtxt(parser_ctxt);\n    if (schema == NULL) {\n        std::cerr << "Failed to compile the schema" << std::endl;\n        xmlFreeDoc(doc);\n        return -2;\n    }\n\n    // Create a validation context\n    valid_ctxt = xmlSchemaNewValidCtxt(schema);\n    if (valid_ctxt == NULL) {\n        std::cerr << "Error creating the validation context" << std::endl;\n        xmlFreeDoc(doc);\n        xmlSchemaFree(schema);\n        return -3;\n    }\n\n    // Validate the document against the schema\n    ret = xmlSchemaValidateDoc(valid_ctxt, doc);\n\n    if (ret == 0) {\n        std::cout << "XML is valid." << std::endl;\n    } else {\n        std::cerr << "XML failed validation." << std::endl;\n    }\n\n    // Clean up everything when done\n    xmlFreeDoc(doc);\n    xmlSchemaFree(schema);\n    xmlSchemaFreeValidCtxt(valid_ctxt);\n\n    return ret;\n}