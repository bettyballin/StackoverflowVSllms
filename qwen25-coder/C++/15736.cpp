#include <windows.h>\n#include <pdh.h>\n#include <pdhmsg.h>\n\n#pragma comment(lib, "pdh.lib")\n\nDWORD GetProcessCPUUsage(DWORD pid)\n{\n    PDH_HQUERY cpuQuery;\n    PDH_HCOUNTER counter;\n    PDH_FMT_COUNTERVALUE counterVal;\n\n    // Create a query object to hold the query\n    if (PdhOpenQuery(NULL, 0, &cpuQuery) != ERROR_SUCCESS) {\n        return 0;\n    }\n\n    // Add a counter to query - for process CPU usage\n    char buffer[256];\n    sprintf_s(buffer, "\\Process(%u)\\%% Processor Time", pid);\n    if (PdhAddCounter(cpuQuery, buffer, 0, &counter) != ERROR_SUCCESS) {\n        PdhCloseQuery(cpuQuery);\n        return 0;\n    }\n\n    // Collect a value for the counter\n    if (PdhCollectQueryData(cpuQuery) != ERROR_SUCCESS) {\n        PdhCloseQuery(cpuQuery);\n        return 0;\n    }\n    \n    // Wait a little bit before the second collect call to allow the first one to complete.\n    Sleep(1000);\n\n    // Now collect the counter again - this gives us the CPU usage time.\n    if (PdhCollectQueryData(cpuQuery) != ERROR_SUCCESS) {\n        PdhCloseQuery(cpuQuery);\n        return 0;\n    }\n\n    // Get formatted value\n    if (PdhGetFormattedCounterValue(counter, PDH_FMT_DOUBLE | PDH_FAVOR_NEWER_DATA, NULL, &counterVal) != ERROR_SUCCESS) {\n        PdhCloseQuery(cpuQuery);\n        return 0;\n    }\n\n    // CPU usage is a percentage of all available CPU time. If the computer has 4 cores and your process runs\n    // at full capacity on one core, it will return ~25%\n    DWORD cpuUsage = (DWORD) counterVal.doubleValue;\n\n    // Close query now that we have what we need\n    PdhCloseQuery(cpuQuery);\n\n    // Return CPU usage of the process as a percentage\n    return cpuUsage;\n}\n\nint main()\n{\n    DWORD pid = GetCurrentProcessId(); // Or replace with any process ID you are interested in.\n    DWORD usage = GetProcessCPUUsage(pid);\n    printf("The CPU usage of this application is: %d%%\n", usage);\n\n    return 0;\n}