#include <iostream>\n#include <comdef.h>\n#include <Wbemidl.h>\n\n#pragma comment(lib, "wbemuuid.lib")\n\nint main() {\n    HRESULT hres;\n\n    // Step 1: Initialize COM library. ------------------------------------------\n    hres = CoInitializeEx(0, COINIT_MULTITHREADED);\n    if (FAILED(hres)) {\n        std::cout << "Failed to initialize COM library. Error code = 0x" \n                  << std::hex << hres << std::endl;\n        return 1;               // Program has failed.\n    }\n\n    // Step 2: Set general COM security levels -----------------------------------\n    hres = CoInitializeSecurity(\n                   NULL,                        \n                   -1,                          // COM authentication\n                   NULL,                        // Authentication services\n                   NULL,                        // Reserved\n                   RPC_C_AUTHN_LEVEL_DEFAULT,   // Default authentication \n                   RPC_C_IMP_LEVEL_IMPERSONATE, // Default Impersonation  \n                   NULL,                        // Authentication info\n                   EOAC_NONE,                   // Additional capabilities \n                   NULL                         // Reserved\n                   );\n    if (FAILED(hres)) {\n        std::cout << "Failed to initialize security. Error code = 0x" \n                  << std::hex << hres << std::endl;\n        CoUninitialize();\n        return 1;               // Program has failed.\n    }\n\n    // Step 3: Obtain the initial locator to WMI -------------------------\n    IWbemLocator *pLoc = NULL;\n\n    hres = CoCreateInstance(\n                   CLSID_WbemLocator,             \n                   0, \n                   CLSCTX_INPROC_SERVER, \n                   IID_IWbemLocator, (LPVOID *) &pLoc);\n    if (FAILED(hres)) {\n        std::cout << "Failed to create IWbemLocator object. "\n                  << "Err code = 0x" << std::hex << hres << std::endl;\n        CoUninitialize();\n        return 1;               // Program has failed.\n    }\n\n    // Step 4: Connect to WMI through the IWbemLocator::ConnectServer method\n    IWbemServices *pSvc = NULL;\n\n    // Connecting to the local provider\n    hres = pLoc->ConnectServer(\n                  _bstr_t(L"ROOT\\CIMV2"), // Object path of WMI namespace\n                  NULL,                    // User name. NULL = current user\n                  NULL,                    // User password. NULL = current\n                  0,                       // Locale. NULL indicates current\n                  NULL,                    // Security flags.\n                  0,                       // Authority (for example, Kerberos)\n                  0,                       // Context object \n                  &pSvc                    // pointer to IWbemServices proxy\n                  );\n    if (FAILED(hres)) {\n        std::cout << "Could not connect. Error code = 0x" \n                  << std::hex << hres << std::endl;\n        pLoc->Release();     \n        CoUninitialize();\n        return 1;                // Program has failed.\n    }\n\n    std::cout << "Connected to ROOT\\CIMV2 WMI namespace" << std::endl;\n\n    // Use the IWbemServices pointer to make requests of WMI ----\n    // For example, query for system information.\n\n    pSvc->Release();\n    pLoc->Release();     \n    CoUninitialize();\n\n    return 0;   // Program successfully completed.\n}