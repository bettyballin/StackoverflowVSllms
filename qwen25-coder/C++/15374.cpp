#include <iostream>\n\nclass BaseA {\npublic:\n    virtual int foo() = 0;\n};\n\nclass BaseB {\npublic:\n    virtual int foo() { return 42; }\n};\n\nclass BaseC {\npublic:\n    int foo() { return 42; }\n};\n\nclass Child : public BaseA {\npublic:\n    int foo() override { return 84; } // Implement pure virtual function required\n};\n\nclass ChildB : public BaseB {\npublic:\n    int foo() override { return 126; } // Correctly overrides the virtual method\n};\n\nclass ChildC : public BaseC {\npublic:\n    int foo() { return 126; } // Hides the non-virtual function in BaseC\n};\n\nint main() {\n    Child childA;\n    ChildB childB;\n    ChildC childC;\n\n    std::cout << "Child of BaseA (should not compile without definition): " << childA.foo() << std::endl;\n    \n    std::cout << "Child of BaseB: ";\n    BaseB* baseBP = &childB;\n    std::cout << baseBP->foo() << std::endl; // Outputs 126, virtual function overridden\n\n    ChildC* childCP = &childC;\n    BaseC* baseCP = static_cast<BaseC*>(childCP);\n    \n    std::cout << "Child of BaseC as ChildC*: ";\n    std::cout << childCP->foo() << std::endl; // Outputs 126, function in Child class\n\n    std::cout << "Child of BaseC as BaseC*: ";\n    std::cout << baseCP->foo() << std::endl; // Outputs 42, non-virtual function in BaseC is called\n}