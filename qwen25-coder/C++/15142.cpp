class ApplicationSettings {\nprivate:\n    std::unique_ptr<ISettingsManager> m_pSettingsManager;\n\npublic:\n    ApplicationSettings() {\n        // Decide which implementation to use based on configuration (e.g., a compile-time setting or runtime option)\n        if (useDatabase) {\n            m_pSettingsManager = std::make_unique<DBSettingsManager>();\n        } else {\n            m_pSettingsManager = std::make_unique<RegistrySettingsManager>();\n        }\n    }\n\n    void LoadSetting(const CString& key, CString& value) {\n        m_pSettingsManager->LoadSetting(key, value);\n    }\n\n    void SaveSetting(const CString& key, const CString& value) {\n        m_pSettingsManager->SaveSetting(key, value);\n    }\n};