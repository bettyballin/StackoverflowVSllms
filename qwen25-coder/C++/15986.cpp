template <class T>\nbool List<T>::add(T value, int index) {\n    if (index < 0 || (head == nullptr && index != 0)) {\n        return false; // Invalid index or list is empty but index is not 0\n    }\n\n    Node<T>* new_n = new Node<T>(value);\n    if (!new_n) return false; // Memory allocation failed\n\n    if (index == 0) {\n        new_n->next = head;\n        if (head) head->previous = new_n;\n        else last = new_n; // If list was empty\n        head = new_n;\n    } else {\n        Node<T>* current = head;\n        int i = 0;\n\n        // Move current to the node just before the index position\n        while (current->next && i < index - 1) {\n            current = current->next;\n            ++i;\n        }\n\n        if (i < index - 1) { // Index is beyond the end of the list\n            delete new_n; // Clean up allocated node\n            return false;\n        }\n\n        new_n->next = current->next;\n        new_n->previous = current;\n\n        if (current->next) {\n            current->next->previous = new_n;\n        } else {\n            last = new_n; // new_n becomes the new last element\n        }\n        current->next = new_n;\n    }\n\n    return true;\n}