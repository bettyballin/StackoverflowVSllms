#include <vector>\n\nvoid createLinearGradient(std::vector<std::vector<int>>& array, \n                         int startX, int startY, int endX, int endY, \n                         int startValue, int endValue) {\n    int width = array.size();\n    int height = array[0].size();\n\n    // Calculate differences\n    float dx = endX - startX;\n    float dy = endY - startY;\n\n    // Fill the array with interpolated values\n    for (int y = 0; y < height; ++y) {\n        for (int x = 0; x < width; ++x) {\n            // Calculate normalized position t along the line from start to end\n            float pdx = x - startX;\n            float pdy = y - startY;\n\n            // Assuming line equation: Ax + By + C = 0, where A = dy, B = -dx, C = dx*y1 - dy*x1\n            float denom = sqrt(dx * dx + dy * dy);\n            float t = (dx * pdy - dy * pdx) / denom;\n\n            // Clamp t to [0, 1] to ensure it's within the bounds of the gradient\n            if (t < 0) {\n                t = 0;\n            } else if (t > 1) {\n                t = 1;\n            }\n\n            // Interpolate value based on t\n            array[y][x] = startValue + t * (endValue - startValue);\n        }\n    }\n}\n\nint main() {\n    int width = 500, height = 500;\n    std::vector<std::vector<int>> gradient(width, std::vector<int>(height));\n\n    createLinearGradient(gradient, 0, 250, 499, 250, 0, 255);\n\n    // The array 'gradient' is now filled with a horizontal linear gradient from (0, 250) to (499, 250)\n    return 0;\n}