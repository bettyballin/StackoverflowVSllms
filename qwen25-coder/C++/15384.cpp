#include <cstddef>\n#include <iostream>\n#include <stdexcept>\n\nclass VertexPoolAllocator {\npublic:\n    // Constructor initializes the pool with given size\n    VertexPoolAllocator(size_t size) : buffer(new char[size]), bufferSize(size), used(0) {}\n\n    ~VertexPoolAllocator() { delete[] buffer; }\n\n    // Allocate a block of memory from the pool\n    void* allocate(size_t size) {\n        if (used + size > bufferSize) {\n            throw std::bad_alloc();\n        }\n        void* result = static_cast<void*>(buffer + used);\n        used += size;\n        return result;\n    }\n\n    // Reset the allocator, making all memory available again\n    void reset() {\n        used = 0;\n    }\n\nprivate:\n    char* buffer;       // Pointer to the start of the pool\n    size_t bufferSize;  // Total size of the pool\n    size_t used;        // Amount of currently allocated space in the pool\n};\n\nint main() {\n    VertexPoolAllocator allocator(1024); // Create a vertex pool with 1024 bytes\n\n    try {\n        float* vertices = static_cast<float*>(allocator.allocate(3 * sizeof(float))); // Allocate memory for 3 floats\n        vertices[0] = 0.0f; vertices[1] = 0.5f; vertices[2] = 0.0f; // Example data\n\n        std::cout << "Allocated vertices: (" << vertices[0] << ", " << vertices[1] << ", " << vertices[2] << ")" << std::endl;\n\n    } catch (const std::bad_alloc& e) {\n        std::cerr << "Failed to allocate memory from pool" << std::endl;\n    }\n\n    allocator.reset(); // Reset the allocator when done\n\n    return 0;\n}