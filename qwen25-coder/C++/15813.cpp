#include <windows.h>\n#include <iostream>\n\nbool TruncateFileStartAndEnd(const std::wstring& filePath, ULONGLONG bytesToRemoveFromStart, ULONGLONG bytesToRemoveFromEnd) {\n    HANDLE hFile = CreateFile(filePath.c_str(), GENERIC_READ | GENERIC_WRITE,\n                               0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);\n    if (hFile == INVALID_HANDLE_VALUE) {\n        std::cerr << "Could not open file." << std::endl;\n        return false;\n    }\n\n    LARGE_INTEGER fileSize;\n    if (!GetFileSizeEx(hFile, &fileSize)) {\n        CloseHandle(hFile);\n        std::cerr << "Failed to get file size." << std::endl;\n        return false;\n    }\n\n    ULONGLONG newFileSize = fileSize.QuadPart - bytesToRemoveFromStart - bytesToRemoveFromEnd;\n\n    // Move data from the start\n    char buffer[4096]; // Adjust buffer size as needed\n    LARGE_INTEGER currentPos, readPos, writePos;\n    readPos.QuadPart = bytesToRemoveFromStart;\n    SetFilePointerEx(hFile, readPos, NULL, FILE_BEGIN);\n\n    bool success = true;\n    while (readPos.QuadPart < fileSize.QuadPart - bytesToRemoveFromEnd && success) {\n        DWORD bytesRead;\n        if (!ReadFile(hFile, buffer, sizeof(buffer), &bytesRead, NULL)) {\n            std::cerr << "Failed to read file." << std::endl;\n            success = false;\n        }\n        else if (bytesRead > 0) {\n            writePos.QuadPart = readPos.QuadPart - bytesToRemoveFromStart;\n            SetFilePointerEx(hFile, writePos, NULL, FILE_BEGIN);\n            DWORD bytesWritten;\n            if (!WriteFile(hFile, buffer, bytesRead, &bytesWritten, NULL)) {\n                std::cerr << "Failed to write file." << std::endl;\n                success = false;\n            }\n            readPos.QuadPart += bytesRead;\n        }\n    }\n\n    // Truncate the end\n    SetFilePointerEx(hFile, newFileSize, &currentPos, FILE_BEGIN);\n    if (!SetEndOfFile(hFile)) {\n        std::cerr << "Failed to truncate file." << std::endl;\n        success = false;\n    }\n\n    CloseHandle(hFile);\n    return success;\n}\n\nint main() {\n    ULONGLONG startBytesToRemove = 1024 * 1024 * 500; // 500 MB\n    ULONGLONG endBytesToRemove = 1024 * 1024 * 500;   // 500 MB\n\n    std::wstring filePath = L"C:\\path\\to\\your\\largefile.mp4";\n\n    if (TruncateFileStartAndEnd(filePath, startBytesToRemove, endBytesToRemove)) {\n        std::cout << "File truncated successfully." << std::endl;\n    } else {\n        std::cerr << "Failed to truncate file." << std::endl;\n    }\n\n    return 0;\n}