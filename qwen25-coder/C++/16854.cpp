#include <cstring>\n#include <string>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nbool isHttpRequest(const std::string& data) {\n    // Check for common HTTP methods at the start of the received data\n    return (data.find("GET ") == 0 || data.find("POST ") == 0 ||\n            data.find("PUT ") == 0 || data.find("DELETE ") == 0);\n}\n\nvoid handleClient(int clientSocket) {\n    char buffer[1024];\n    int bytesReceived = recv(clientSocket, buffer, sizeof(buffer) - 1, 0);\n\n    if (bytesReceived > 0) {\n        buffer[bytesReceived] = '\0'; // Null-terminate the received data\n        std::string requestData(buffer);\n\n        if (isHttpRequest(requestData)) {\n            // It's an HTTP request, so ignore it\n            close(clientSocket);\n            return;\n        }\n    }\n\n    // If it's not an HTTP request, handle it as usual\n    // ... your code to handle normal connections ...\n}\n\nint main() {\n    int serverSocket = socket(AF_INET, SOCK_STREAM, 0);\n    sockaddr_in serverAddress{};\n    serverAddress.sin_family = AF_INET;\n    serverAddress.sin_port = htons(8080);\n    serverAddress.sin_addr.s_addr = INADDR_ANY;\n\n    bind(serverSocket, (struct sockaddr*)&serverAddress, sizeof(serverAddress));\n    listen(serverSocket, SOMAXCONN);\n\n    while (true) {\n        int clientSocket = accept(serverSocket, nullptr, nullptr);\n        handleClient(clientSocket);\n    }\n\n    close(serverSocket);\n    return 0;\n}