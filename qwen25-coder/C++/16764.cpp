#include <vector>\nusing namespace std;\n\ntypedef vector<vector<int>> Image;\n\nvoid floodFill(Image& image, int x, int y, int oldColor, int newColor) {\n    if (x < 0 || x >= image.size() || y < 0 || y >= image[x].size() || image[x][y] != oldColor) return;\n    if (oldColor == newColor) return; // Prevents infinite recursion if the colors are the same\n\n    // Use a stack to implement an iterative DFS\n    vector<pair<int, int>> stack = {{x, y}};\n    \n    while (!stack.empty()) {\n        auto [cx, cy] = stack.back();\n        stack.pop_back();\n\n        image[cx][cy] = newColor;\n\n        // Check all 4 adjacent pixels\n        static const pair<int, int> directions[] = {{0, -1}, {-1, 0}, {1, 0}, {0, 1}};\n        for (const auto& [dx, dy] : directions) {\n            int nx = cx + dx;\n            int ny = cy + dy;\n            if (nx >= 0 && nx < image.size() && ny >= 0 && ny < image[nx].size() && image[nx][ny] == oldColor) {\n                stack.push_back({nx, ny});\n            }\n        }\n    }\n}