#include <iostream>\n#include <string>\n#include <cstring>\n#include <curl/curl.h>\n\n// Callback function for writing received data\nstatic size_t WriteCallback(void *contents, size_t size, size_t nmemb, void *userp) {\n    ((std::string*)userp)->append((char*)contents, size * nmemb);\n    return size * nmemb;\n}\n\nint main() {\n    CURL *curl;\n    CURLcode res;\n\n    // URL of the PHP login script\n    const char* login_url = "http://example.com/login.php";\n    // URL to access after logging in\n    const char* protected_url = "http://example.com/protected.php";\n\n    std::string readBuffer;  // Buffer for response data\n\n    curl_global_init(CURL_GLOBAL_DEFAULT);\n    curl = curl_easy_init();\n\n    if(curl) {\n        // Set the URL for login\n        curl_easy_setopt(curl, CURLOPT_URL, login_url);\n\n        // POST data to login (username and password)\n        std::string post_fields = "user=username&pass=password";\n        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, post_fields.c_str());\n\n        // Enable cookie engine\n        curl_easy_setopt(curl, CURLOPT_COOKIEFILE, "/dev/null");  // Enables the cookie engine\n\n        // Set function to receive data\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);\n\n        // Perform the login request\n        res = curl_easy_perform(curl);\n        if(res != CURLE_OK) {\n            std::cerr << "curl_easy_perform() failed: " << curl_easy_strerror(res) << std::endl;\n        } else {\n            std::cout << "Login response:\n" << readBuffer << std::endl;\n\n            // Now, we can access a protected page with the same CURL object\n            curl_easy_setopt(curl, CURLOPT_URL, protected_url);\n\n            // Clear previous post data\n            curl_easy_setopt(curl, CURLOPT_POSTFIELDS, NULL);\n\n            // Perform the request to protected resource\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK) {\n                std::cerr << "curl_easy_perform() failed: " << curl_easy_strerror(res) << std::endl;\n            } else {\n                std::cout << "Protected Page response:\n" << readBuffer << std::endl;\n            }\n        }\n\n        // Clean up\n        curl_easy_cleanup(curl);\n    }\n\n    curl_global_cleanup();\n    return 0;\n}