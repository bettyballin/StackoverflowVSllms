#include <string>\n#include <iostream>\n\nstd::string wordWrap(const std::string& sentence, int width) {\n    std::string result;\n    std::size_t start = 0;\n    std::size_t end = 0;\n\n    while (end != std::string::npos) {\n        // Find the position to insert a newline (\n)\n        end = sentence.find(' ', start + width);\n\n        // If no space is found in the current line, take the whole substring and exit\n        if (end == std::string::npos || end - start < width) {\n            result += sentence.substr(start);\n            break;\n        }\n\n        // Find the last space within the width limit to insert a newline\n        while (end > start && sentence[end] != ' ') {\n            --end;\n        }\n        \n        if (end == start) {  // No spaces found, take this word and move on\n            end = sentence.find(' ', start);\n            if (end == std::string::npos) {\n                result += sentence.substr(start);\n                break;\n            } else {\n                result += sentence.substr(start, end - start) + '\n';\n                start = end + 1;\n            }\n        } else {  // Space found, add the substring and newline\n            result += sentence.substr(start, end - start) + '\n';\n            start = end + 1; // move start to the character after space\n        }\n    }\n\n    return result;\n}\n\nint main() {\n    std::cout << wordWrap("a b c abcde abcdef longword shtwd", 5) << std::endl << std::endl;\n    std::cout << wordWrap("this is a sentence of massive proportions", 4) << std::endl;\n\n    return 0;\n}