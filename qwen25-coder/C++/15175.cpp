#include <sqlite3.h>\n#include <vclClasses.hpp>  // Required for TDirectory functions\n#include <System.SysUtils.hpp>\n\nvoid CreateDatabaseAndTable(sqlite3 *&db, const String &dbName) {\n    int rc = sqlite3_open(dbName.c_str(), &db);\n    if (rc) {\n        ShowMessage("Can't open database: " + String(sqlite3_errmsg(db)));\n    } else {\n        const char *sqlCreateTable =\n            "CREATE TABLE IF NOT EXISTS Images("\n            "ID INTEGER PRIMARY KEY AUTOINCREMENT, "\n            "FileName TEXT NOT NULL, "\n            "FilePath TEXT NOT NULL, "\n            "FileType TEXT NOT NULL);";\n\n        char *errorMessage = nullptr;\n        rc = sqlite3_exec(db, sqlCreateTable, 0, 0, &errorMessage);\n        if (rc != SQLITE_OK) {\n            ShowMessage("SQL error: " + String(errorMessage));\n            sqlite3_free(errorMessage);\n        }\n    }\n}\n\nvoid InsertFileIntoDatabase(sqlite3 *db, const String &fileName, const String &filePath, const String &fileType) {\n    char *errorMessage = nullptr;\n    String sqlInsert = Format(\n        "INSERT INTO Images (FileName, FilePath, FileType) VALUES ('%s', '%s', '%s');",\n        ARRAYOFCONST((StringReplace(fileName, "'", "''", TReplaceFlags() << rfReplaceAll),\n                      StringReplace(filePath, "'", "''", TReplaceFlags() << rfReplaceAll),\n                      fileType)));\n\n    int rc = sqlite3_exec(db, sqlInsert.c_str(), 0, 0, &errorMessage);\n    if (rc != SQLITE_OK) {\n        ShowMessage("SQL error: " + String(errorMessage));\n        sqlite3_free(errorMessage);\n    }\n}\n\nvoid PopulateDatabaseWithImages(const String &directoryPath, const String &dbName, const TStrings *fileExtensions) {\n    sqlite3 *db;\n    CreateDatabaseAndTable(db, dbName);\n\n    for (const auto &fileName : TDirectory::GetFiles(directoryPath)) {\n        String fileExt = ExtractFileExt(fileName).LowerCase();\n        if (fileExtensions->IndexOf(fileExt) != -1) {  // Check if file extension is in the list\n            InsertFileIntoDatabase(db, ExtractFileName(fileName), fileName, fileExt);\n        }\n    }\n\n    sqlite3_close(db);\n}\n\n// Example usage\nvoid __fastcall TForm1::ButtonPopulateClick(TObject *Sender) {\n    TStrings *extensions = new TStringList;\n    extensions->CommaText = "jpg,jpeg,png";  // Specify the file types you want to include\n\n    PopulateDatabaseWithImages("C:\\Your\\Image\\Path", "images.db", extensions);\n\n    delete extensions;\n}