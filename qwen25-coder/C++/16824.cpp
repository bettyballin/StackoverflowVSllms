#include <iostream>\n#include <stdexcept>\n\nclass ValidationProxy {\npublic:\n    ValidationProxy(bool& hasFailed) : m_hasFailed(hasFailed) {}\n\n    template<typename T>\n    ValidationProxy isNotNull(T* value, const std::string& message = "Value cannot be null") {\n        if (!m_hasFailed && value == nullptr) {\n            m_hasFailed = true;\n            throw std::invalid_argument(message);\n        }\n        return *this;\n    }\n\n    template<typename T>\n    ValidationProxy isInRange(T value, T min, T max, const std::string& message = "Value out of range") {\n        if (!m_hasFailed && (value < min || value > max)) {\n            m_hasFailed = true;\n            throw std::out_of_range(message);\n        }\n        return *this;\n    }\n\nprivate:\n    bool& m_hasFailed;\n};\n\nclass Validator {\npublic:\n    ValidationProxy begin() {\n        m_hasFailed = false;\n        return ValidationProxy(m_hasFailed);\n    }\n\nprivate:\n    bool m_hasFailed;\n};\n\nint main() {\n    Validator validator;\n\n    try {\n        int value = 10;\n        int* ptr = nullptr;\n\n        validator.begin()\n            .isNotNull(ptr, "Pointer should not be null!")\n            .isInRange(value, 5, 15, "Value must be between 5 and 15");\n\n        std::cout << "All checks passed!" << std::endl;\n    } catch (const std::exception& e) {\n        std::cerr << "Validation failed: " << e.what() << std::endl;\n    }\n\n    return 0;\n}