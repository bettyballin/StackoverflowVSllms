#include <windows.h>\n#include <iostream>\n\nint main() {\n    // Specify application name and command line arguments\n    LPCTSTR szAppName = "YourDotNetApp.exe";\n    LPTSTR szCmdLine = (LPTSTR)"arg1 arg2";\n\n    STARTUPINFO si;\n    PROCESS_INFORMATION pi;\n\n    ZeroMemory(&si, sizeof(si));\n    si.cb = sizeof(si);\n    ZeroMemory(&pi, sizeof(pi));\n\n    // Start the child process. \n    if (!CreateProcess(\n            szAppName,          // No module name (use command line)\n            szCmdLine,           // Command line\n            NULL,                // Process handle not inheritable\n            NULL,                // Thread handle not inheritable\n            FALSE,               // Set handle inheritance to FALSE\n            0,                    // No creation flags\n            NULL,                // Use parent's environment block\n            NULL,                // Use parent's starting directory \n            &si,                 // Pointer to STARTUPINFO structure\n            &pi)                // Pointer to PROCESS_INFORMATION structure\n    ) {\n        std::cerr << "CreateProcess failed (" << GetLastError() << ").\n";\n        return -1;\n    }\n\n    // Wait until child process exits.\n    WaitForSingleObject(pi.hProcess, INFINITE);\n\n    // Get the exit code of the process\n    DWORD dwExitCode;\n    if (!GetExitCodeProcess(pi.hProcess, &dwExitCode)) {\n        std::cerr << "GetExitCodeProcess failed (" << GetLastError() << ").\n";\n        return -1;\n    }\n\n    // Close process and thread handles. \n    CloseHandle(pi.hProcess);\n    CloseHandle(pi.hThread);\n\n    // Output the exit code\n    std::cout << "Process exited with code: " << dwExitCode << "\n";\n\n    return 0;\n}