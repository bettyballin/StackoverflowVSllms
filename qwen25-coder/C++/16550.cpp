#include <iostream>\n#include <fstream>\n#include <openssl/sha.h>\n#include <iomanip>\n\nstd::string readFile(const std::string& filename) {\n    std::ifstream file(filename, std::ios::binary);\n    if (!file) return "";\n    std::string content((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());\n    return content;\n}\n\nstd::string sha256Hash(const std::string& input) {\n    unsigned char hash[SHA256_DIGEST_LENGTH];\n    SHA256_CTX sha256;\n    SHA256_Init(&sha256);\n    SHA256_Update(&sha256, input.c_str(), input.size());\n    SHA256_Final(hash, &sha256);\n\n    std::stringstream ss;\n    for (int i = 0; i < SHA256_DIGEST_LENGTH; ++i) {\n        ss << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(hash[i]);\n    }\n    return ss.str();\n}\n\nvoid createSignatureFile(const std::string& documentPath, const std::string& indexFilePath) {\n    std::string fileContent = readFile(documentPath);\n    if (fileContent.empty()) {\n        std::cerr << "Failed to read the file: " << documentPath << std::endl;\n        return;\n    }\n\n    std::string signature = sha256Hash(fileContent);\n    \n    std::ofstream indexFile(indexFilePath, std::ios::app);\n    if (!indexFile) {\n        std::cerr << "Failed to open index file: " << indexFilePath << std::endl;\n        return;\n    }\n    \n    indexFile << documentPath << "," << signature << "\n";\n}\n\nint main() {\n    const std::string documentPath = "example.txt";  // Path to your document\n    const std::string indexFilePath = "index.txt";   // Path where the index will be stored\n\n    createSignatureFile(documentPath, indexFilePath);\n\n    return 0;\n}