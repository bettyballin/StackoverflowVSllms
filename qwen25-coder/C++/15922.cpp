#include <functional>\n\nclass Action {\npublic:\n    void operator() () const;\n};\n\nclass Data {\npublic:\n    Data() {}\n    ~Data() {}\n    void Register(std::function<void()> action) { \n        _a = action; \n    }\n\nprivate:\n    std::function<void()> _a;\n};\n\nclass Display {\npublic:\n    Display(Data& d) { \n        auto boundFunc = std::bind(&Display::SomeTask, this);\n        d.Register(boundFunc); \n    }\n    ~Display() {}\n\n    void SomeTask() {}\n};