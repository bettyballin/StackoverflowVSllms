#include <windows.h>\n#include <tlhelp32.h>\n#include <tchar.h>\n#include <iostream>\n\nBOOL IsEnvVarSet(DWORD dwProcessId, LPCTSTR lpszEnvVar) {\n    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n    if (hSnapshot == INVALID_HANDLE_VALUE)\n        return FALSE;\n\n    PROCESSENTRY32 pe;\n    pe.dwSize = sizeof(PROCESSENTRY32);\n    if (!Process32First(hSnapshot, &pe)) {\n        CloseHandle(hSnapshot);\n        return FALSE;\n    }\n\n    do {\n        if (pe.th32ProcessID == dwProcessId) {\n            HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, pe.th32ProcessID);\n            if (!hProcess) {\n                CloseHandle(hSnapshot);\n                return FALSE;\n            }\n\n            SIZE_T dwSize;\n            QueryEnvironmentVariableW(hProcess, lpszEnvVar, NULL, &dwSize);\n            DWORD lastError = GetLastError();\n            CloseHandle(hProcess);\n\n            // If the environment variable exists, ERROR_ENVVAR_NOT_FOUND will not be returned\n            if (lastError != ERROR_ENVVAR_NOT_FOUND) {\n                CloseHandle(hSnapshot);\n                return TRUE;\n            }\n\n            break;\n        }\n    } while (Process32Next(hSnapshot, &pe));\n\n    CloseHandle(hSnapshot);\n    return FALSE;\n}\n\nint main() {\n    DWORD processId = 1234; // Replace with the target process ID\n    TCHAR envVar[] = _T("MY_ENV_VAR"); // Environment variable to check\n\n    if (IsEnvVarSet(processId, envVar)) {\n        std::wcout << L"Environment variable " << envVar << L" is set in process " << processId << std::endl;\n    } else {\n        std::wcout << L"Environment variable " << envVar << L" is not set in process " << processId << std::endl;\n    }\n\n    return 0;\n}