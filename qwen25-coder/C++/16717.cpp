#include "pch.h"\n#include <atlbase.h>\n#include <atlcom.h>\n\n// Include your managed DLL here if needed, or load it dynamically\n\nclass ATL_NO_VTABLE CManagedServer :\n    public CComObjectRootEx<CComSingleThreadModel>,\n    public CComCoClass<CManagedServer, &CLSID_ManagedServer>,\n    // Interface declarations\n{\npublic:\n    DECLARE_REGISTRY_APPID_RESOURCEID(IDR_MANAGEDSERVER1, "{your-app-guid}")\n\n    BEGIN_COM_MAP(CManagedServer)\n        COM_INTERFACE_ENTRY(IYourInterface)  // replace with your interface\n    END_COM_MAP()\n\n    HRESULT FinalConstruct()\n    {\n        // Load and initialize .NET runtime and assemblies here\n        return S_OK;\n    }\n\n    void FinalRelease()\n    {\n        // Clean up resources if necessary\n    }\n\npublic:\n    STDMETHOD(InterfaceMethod)() override\n    {\n        // Call into your managed code here\n        return S_OK;\n    }\n};\n\nOBJECT_ENTRY_AUTO(__uuidof(ManagedServer), CManagedServer)\n\nint APIENTRY _tWinMain(HINSTANCE, HINSTANCE, LPTSTR /*lpCmdLine*/, int nCmdShow)\n{\n    AtlInitCommonControlsEx(ICC_BAR_CLASSES); // Add other common control classes as needed\n\n    HRESULT hRes = CoInitialize(nullptr);\n    if (FAILED(hRes))\n        return -1;\n\n    _Module.Init(ObjectMap, hInstance);\n\n    _AtlComModule.Add creation hook for out-of-proc server functionality\n    _AtlModule.m_bUserObjectsInitialized = TRUE;\n    \n    INT_PTR nResponse = _Module.Run();\n\n    _Module.Term();\n    \n    CoUninitialize();\n\n    return static_cast<int>(nResponse);\n}