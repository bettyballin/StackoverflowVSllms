#include <memory>\n#include <iostream>\n\ntemplate<typename T, typename Allocator = std::allocator<T>>\nclass my_container {\npublic:\n    using allocator_traits = std::allocator_traits<Allocator>;\n    using pointer = typename allocator_traits::pointer;\n\n    explicit my_container(size_t size, Allocator alloc = Allocator{})\n        : alloc_(alloc), size_(size) {\n            data_ = alloc_.allocate(size_);\n        }\n\n    ~my_container() {\n            for (size_t i = 0; i < size_; ++i) {\n                allocator_traits::destroy(alloc_, &data_[i]);\n            }\n            alloc_.deallocate(data_, size_);\n        }\n\n    void initialize(const T& value) {\n            std::uninitialized_fill_n(data_, size_, value);\n        }\n\nprivate:\n    Allocator alloc_;\n    pointer data_;\n    size_t size_;\n};\n\nint main() {\n    my_container<int> container(10);\n    container.initialize(5);\n\n    // The container's destructor will clean up the allocated memory.\n}