#include "llvm/ExecutionEngine/Orc/LLJIT.h"\n#include "llvm/IR/Function.h"\n#include "llvm/IR/Module.h"\n#include "llvm/IR/Verifier.h"\n#include <memory>\n#include <iostream>\n\nusing namespace llvm;\nusing namespace llvm::orc;\n\nint main() {\n    // Initialize LLVM.\n    InitializeNativeTarget();\n    InitializeNativeTargetAsmPrinter();\n\n    // Create an LLJIT instance which acts as the ExecutionEngine.\n    auto J = LLJITBuilder().create();\n\n    if (!J) {\n        logAllUnhandledErrors(J.takeError(), llvm::errs(),\n                               "LLJITBuilder Failed: ");\n        return 1;\n    }\n\n    // Define a simple function in human-readable LLVM IR.\n    std::string FuncIR = R"(\n@.str = private unnamed_addr constant [4 x i8] c"Hi\0A\00", align 1\ndefine i32 @hello() {\nentry:\n  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0))\n  ret i32 0\n}\ndeclare i32 @printf(i8*, ...)\n)";\n\n    // Parse the LLVM IR.\n    SMDiagnostic Err;\n    std::unique_ptr<Module> M = parseAssemblyString(FuncIR,\n                                                    Err,\n                                                    J->getMainJITDylib().getContext());\n\n    if (!M) {\n        Err.print("LLJIT Example", errs());\n        return 1;\n    }\n\n    // Add the module to the JIT instance.\n    auto ThreadSafeMod = ThreadSafeModule(std::move(M), std::make_unique<LLVMContext>());\n    if (auto Err = J->addIRModule(std::move(ThreadSafeMod))) {\n        logAllUnhandledErrors(std::move(Err), errs(), "Error loading IR:");\n        return 1;\n    }\n\n    // Get the address of the 'hello()' function.\n    auto HelloSym = J->lookup("hello");\n    if (!HelloSym) {\n        logAllUnhandledErrors(HelloSym.takeError(), errs(),\n                               "Unable to find the address of 'hello': ");\n        return 1;\n    }\n\n    // Cast from JITTargetAddress to native pointer type and run function\n    void (*HelloFunc)() = (void (*)())(intptr_t)*HelloSym;\n\n    HelloFunc();  // This executes the function\n\n    return 0;\n}