#include <iostream>\n#include <vector>\n\nbool findMultiplicationChain(int powerOf2, int constant, int count, int &start, int &multiplier) {\n    int modulus = 1 << powerOf2; // Calculate 2^powerOf2\n\n    // Try all possible multipliers and starts\n    for (int m = 1; m < modulus; ++m) { // multiplier from 1 to 2^powerOf2 - 1\n        for (int s = 0; s < modulus; ++s) { // start from 0 to 2^powerOf2 - 1\n            int a = s;\n            bool valid = true;\n\n            for (int i = 0; i < count; ++i) {\n                a = static_cast<long long>(a) * m % modulus;\n                if (i == count - 1 && a != constant) {\n                    valid = false;\n                    break;\n                }\n            }\n\n            if (valid) {\n                start = s;\n                multiplier = m;\n                return true;\n            }\n        }\n    }\n\n    // If no valid start and multiplier found\n    return false;\n}\n\nint main() {\n    int powerOf2, constant, count;\n    std::cout << "Enter power of 2: ";\n    std::cin >> powerOf2;\n    std::cout << "Enter stopping constant: ";\n    std::cin >> constant;\n    std::cout << "Enter number of times for the loop: ";\n    std::cin >> count;\n\n    int start, multiplier;\n    if (findMultiplicationChain(powerOf2, constant, count, start, multiplier)) {\n        std::cout << "Found start = " << start << ", multiplier = " << multiplier << "\n";\n    } else {\n        std::cout << "No valid multiplication chain found.\n";\n    }\n\n    return 0;\n}