FILE *input_file = fopen(current->post_file_name.c_str(), "rb");\nFILE *output_file = fopen(current->results_file_name.c_str(), "wb");\nif (!input_file || !output_file) {\n    // Handle file opening errors\n    fprintf(stderr, "Failed to open files: input(%p), output(%p)\n", (void*)input_file, (void*)output_file);\n} else {\n    struct curl_slist *header_opts = 0;\n    CURLcode rcd;\n\n    header_opts = curl_slist_append(header_opts, "Content-Type: application/soap+xml; charset=utf8");\n    curl_easy_reset(curl_handle);\n    curl_easy_setopt(curl_handle, CURLOPT_NOPROGRESS, 1L); // Use long for option values\n    curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, output_file);\n    curl_easy_setopt(curl_handle, CURLOPT_READDATA, input_file);\n    curl_easy_setopt(curl_handle, CURLOPT_URL, fs_service_url.c_str());\n    curl_easy_setopt(curl_handle, CURLOPT_POST, 1L); // Use long for option values\n    curl_easy_setopt(curl_handle, CURLOPT_HTTPHEADER, header_opts);\n    rcd = curl_easy_perform(curl_handle);\n    if (rcd != 0) {\n        current->curl_result = rcd;\n        current->curl_error = curl_easy_strerror(rcd);\n        fprintf(stderr, "Curl error: %s\n", current->curl_error.c_str());\n    }\n    fclose(output_file); // Ensure output file is closed\n    fclose(input_file);  // Ensure input file is closed\n    curl_slist_free_all(header_opts);\n}