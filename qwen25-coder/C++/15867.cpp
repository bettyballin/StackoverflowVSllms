#include <iostream>\n#include <fstream>\n#include <vector>\n\n// Function to build the KMP table (partial match table)\nstd::vector<int> computeLPS(const std::string& pattern) {\n    std::vector<int> lps(pattern.size(), 0);\n    int length = 0;\n    size_t i = 1;\n\n    while (i < pattern.length()) {\n        if (pattern[i] == pattern[length]) {\n            length++;\n            lps[i] = length;\n            i++;\n        } else {\n            if (length != 0) {\n                length = lps[length - 1];\n            } else {\n                lps[i] = 0;\n                i++;\n            }\n        }\n    }\n\n    return lps;\n}\n\n// Function to match pattern over the text using KMP algorithm\nvoid KMPSearchInFile(const std::string& filename, const std::string& pattern) {\n    std::ifstream file(filename, std::ios::in | std::ios::binary);\n    if (!file.is_open()) {\n        std::cerr << "Failed to open file." << std::endl;\n        return;\n    }\n\n    std::vector<int> lps = computeLPS(pattern);\n    char buffer[4096]; // Reading the file in chunks of 4KB\n    size_t bytes_read;\n    int pattern_len = pattern.length();\n    std::string remaining_text;\n\n    while ((bytes_read = file.readsome(buffer, sizeof(buffer))) > 0) {\n        std::string current_data(remaining_text + buffer, bytes_read);\n        size_t i = 0, j = 0;\n        size_t data_len = current_data.size();\n\n        while (i < data_len) {\n            if (pattern[j] == current_data[i]) {\n                j++;\n                i++;\n            }\n\n            if (j == pattern_len) {\n                std::cout << "Pattern found at index: " \n                          << (current_data.size() - bytes_read + i - j)\n                          << std::endl;\n                j = lps[j - 1];\n            } else if (i < data_len && pattern[j] != current_data[i]) {\n                if (j != 0) {\n                    j = lps[j - 1];\n                } else {\n                    i++;\n                }\n            }\n        }\n\n        remaining_text = current_data.substr(data_len - pattern_len + 1);\n    }\n\n    file.close();\n}\n\nint main() {\n    const std::string filename = "largefile.txt";\n    const std::string pattern = "example";\n    KMPSearchInFile(filename, pattern);\n    return 0;\n}