#include <iostream>\nusing namespace std;\n\nclass ListNode {\nprivate:\n    struct Node {\n        int value;\n        Node *next;\n        Node(int v, Node* n) : value(v), next(n) {}\n    };\n    Node* head;\n\npublic:\n    ListNode() : head(nullptr) {}\n\n    ~ListNode() { // Destructor to free memory\n        while (head != nullptr) {\n            Node* temp = head;\n            head = head->next;\n            delete temp;\n        }\n    }\n\n    int getValue() const {\n        if (head == nullptr) throw runtime_error("List is empty");\n        return head->value;\n    }\n\n    ListNode* getNext() const {\n        if (head == nullptr) throw runtime_error("List is empty");\n        return new ListNode(head->next); // Returning a new ListNode object for the next node\n    }\n\n    void insert(int i) {\n        Node* newNode = new Node(i, head);\n        head = newNode;\n    }\n\n    bool listcontains(int j) const {\n        Node* current = head;\n        while (current != nullptr) {\n            if (current->value == j) return true;\n            current = current->next;\n        }\n        return false;\n    }\n\n    void displayList() const {\n        Node* current = head;\n        while (current != nullptr) {\n            cout << current->value << " ";\n            current = current->next;\n        }\n        cout << endl;\n    }\n};\n\nint main() {\n    ListNode list;\n\n    cout << "Input integers below. Input the integer -1 to stop inputting.\n";\n\n    int num;\n    while (cin >> num && num != -1) {\n        list.insert(num);\n    }\n\n    cout << "\nThe numbers you entered are: ";\n    list.displayList();\n\n    cout << "Enter a number to search for in the list: ";\n    cin >> num;\n\n    if (list.listcontains(num)) {\n        cout << num << " is in the list." << endl;\n    } else {\n        cout << num << " is not in the list." << endl;\n    }\n\n    return 0;\n}