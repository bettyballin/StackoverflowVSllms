#include <zlib.h>\n#include <boost/format.hpp> // or any other formatting library\n\nvoid CompressGzip(void *to, size_t to_size, void *from, size_t from_size, int *final_size)\n{\n    int ret;\n    z_stream stream;\n\n    stream.zalloc = Z_NULL;\n    stream.zfree  = Z_NULL;\n    stream.opaque = Z_NULL;\n\n    if (deflateInit2(&stream, CompressionSpeed, Z_DEFLATED, 15 + 16, 8, Z_DEFAULT_STRATEGY) != Z_OK)\n        COMPRESSION_ERROR("deflateInit() failed");\n\n    stream.next_out = (Bytef *)to;\n    stream.avail_out = to_size;\n\n    stream.next_in = (Bytef *)from;\n    stream.avail_in = from_size;\n\n    if ((ret = deflate(&stream, Z_NO_FLUSH)) != Z_OK)\n        COMPRESSION_ERROR("deflate() failed");\n\n    while (stream.avail_in != 0) {\n        if ((ret = deflate(&stream, Z_NO_FLUSH)) != Z_OK)\n            COMPRESSION_ERROR("deflate() failed");\n    }\n\n    if ((ret = deflate(&stream, Z_FINISH)) != Z_STREAM_END)\n        COMPRESSION_ERROR("deflate() failed");\n\n    *final_size = stream.total_out;\n    deflateEnd(&stream);\n}\n\n// Usage in your main code\nint compressed_output_size = content.length() + (content.length() * 0.1) + 20; // Extra space for gzip header and footer\nchar *compressed_output = (char *)malloc(compressed_output_size);\nint compressed_output_length;\nCompressGzip(compressed_output, compressed_output_size, (void *)content.c_str(), content.length(), &compressed_output_length);\n\n/* Send the Compressed Header */\ncout << "Content-Encoding: gzip\r\n";\ncout << boost::format("Content-Length: %d\r\n") % compressed_output_length;\ncgiHeaderContentType("text/html");\ncout.write(compressed_output, compressed_output_length);\nfree(compressed_output);