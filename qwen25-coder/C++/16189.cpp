class DLL_EXPORT FontManager {\npublic:\n    FontManager();\n    ~FontManager();\n    void someMethod();\nprivate:\n    class FontManagerImpl; // Forward declaration of the implementation class\n    std::unique_ptr<FontManagerImpl> pImpl; // Pointer to the implementation\n};\n\n// .cpp file\n#include "FontManager.h"\nclass FontManager::FontManagerImpl {\npublic:\n    std::map<std::string, tFontInfoRef> m_fonts;\n    // Other members and methods\n};\n\nFontManager::FontManager() : pImpl(std::make_unique<FontManagerImpl>()) {}\nFontManager::~FontManager() = default; // Needed for complete type in destructor\nvoid FontManager::someMethod() {\n    // Use pImpl->m_fonts and other members here\n}