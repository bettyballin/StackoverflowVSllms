#include <iostream>\n\nclass Piece {\nprivate:\n    int pieceArray[4][4];\n\npublic:\n    int (*returnPiece())[4]\n    {\n        return pieceArray;\n    }\n\n    // Constructor to initialize the array for demonstration purposes\n    Piece() {\n        for (int i = 0; i < 4; i++) {\n            for (int j = 0; j < 4; j++) {\n                pieceArray[i][j] = i * 4 + j;\n            }\n        }\n    }\n};\n\nclass Grid {\nprivate:\n    int squares[10][10];\n    int x_ROWS = 10, y_COLUMNS = 10;\n\npublic:\n    void InsertArray(int (*arr)[4])\n    {\n        for (int i = 0; i < 4 && i < x_ROWS; ++i) // Ensure you do not exceed bounds\n        {\n            for (int j = 0; j < 4 && j < y_COLUMNS; ++j)\n            {\n                squares[i][j] = arr[i][j];\n            }\n        }\n    }\n\n    void printGrid() {\n        for(int i = 0; i < x_ROWS ; ++i) {\n             for (int j = 0; j < y_COLUMNS ; ++j) {\n                 std::cout << squares[i][j] << " ";\n             }\n             std::cout << "\n";\n         }\n    }\n\n};\n\nint main() {\n    Piece piece;\n    Grid grid;\n    grid.InsertArray(piece.returnPiece());\n    grid.printGrid(); // This will print the inserted small array in a bigger context\n    return 0;\n}