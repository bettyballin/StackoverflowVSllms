#include <boost/asio.hpp>\n#include <boost/asio/ssl.hpp>\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n\n        // Create an SSL context\n        boost::asio::ssl::context ssl_context(boost::asio::ssl::context_base::tls_server);\n\n        // Load certificate and private key into the SSL context\n        ssl_context.use_certificate_chain_file("server.pem");\n        ssl_context.use_private_key_file("server.key", boost::asio::ssl::context_base::pem);\n        \n        // Set supported TLS versions\n        ssl_context.set_options(\n            boost::asio::ssl::context::default_workarounds |\n            boost::asio::ssl::context::no_sslv2 |\n            boost::asio::ssl::context::single_dh_use);\n\n        // First socket\n        boost::asio::ip::tcp::acceptor acceptor1(io_context, {boost::asio::ip::address_v4::any(), 8081});\n        boost::asio::ssl::stream<boost::asio::ip::tcp::socket> ssl_socket1(io_context, ssl_context);\n\n        // Second socket\n        boost::asio::ip::tcp::acceptor acceptor2(io_context, {boost::asio::ip::address_v4::any(), 8082});\n        boost::asio::ssl::stream<boost::asio::ip::tcp::socket> ssl_socket2(io_context, ssl_context);\n\n        // Accept connections...\n    } catch (std::exception& e) {\n        std::cerr << "Exception: " << e.what() << "\n";\n    }\n\n    return 0;\n}