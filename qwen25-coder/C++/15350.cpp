#include <iostream>\n#include <list>\n#include <cmath>\n\nclass Point {\npublic:\n    int x, y;\n    Point(int x1, int y1) : x(x1), y(y1) {}\n};\n\ndouble distance(const Point& p1, const Point& p2) {\n    return std::sqrt(std::pow(p1.x - p2.x, 2) + std::pow(p1.y - p2.y, 2));\n}\n\nvoid removeClosestPoint(std::list<Point>& pointList, int targetX, int targetY) {\n    if (pointList.empty()) return;\n\n    Point target(targetX, targetY);\n    auto closestIt = pointList.begin();\n    double minDist = distance(*closestIt, target);\n\n    for (auto it = ++pointList.begin(); it != pointList.end(); ++it) {\n        double currentDist = distance(*it, target);\n        if (currentDist < minDist) {\n            minDist = currentDist;\n            closestIt = it;\n        }\n    }\n\n    pointList.erase(closestIt);\n}\n\nint main() {\n    std::list<Point> pointList;\n    pointList.push_back(Point(3, 4));\n    pointList.push_back(Point(5, 10));\n    pointList.push_back(Point(7, 8));\n\n    removeClosestPoint(pointList, 5, 12);\n\n    for (const auto& p : pointList) {\n        std::cout << "(" << p.x << ", " << p.y << ")\n";\n    }\n\n    return 0;\n}