#include <objbase.h>\n#include <iostream>\n\nvoid QuerySupportedInterfaces(REFCLSID clsid) {\n    HRESULT hr;\n    IUnknown* pUnknown = nullptr;\n\n    // Create an instance of the class with the specified CLSID\n    hr = CoCreateInstance(clsid,\n                          NULL,\n                          CLSCTX_INPROC_SERVER | CLSCTX_LOCAL_SERVER,\n                          IID_PPV_ARGS(&pUnknown));\n    if (FAILED(hr)) {\n        std::cerr << "Failed to create instance for CLSID" << std::endl;\n        return;\n    }\n\n    // List of common interface IIDs to check\n    const GUID* interfaceIIDs[] = { &IID_IUnknown, &IID_IDispatch, &IID_IPersist };\n\n    for (const auto& iid : interfaceIIDs) {\n        LPUNKNOWN pInterface = nullptr;\n        hr = pUnknown->QueryInterface(*iid, reinterpret_cast<void**>(&pInterface));\n        if (SUCCEEDED(hr)) {\n            std::cout << "Supports interface: ";\n            if (*iid == IID_IUnknown)\n                std::cout << "IID_IUnknown";\n            else if (*iid == IID_IDispatch)\n                std::cout << "IID_IDispatch";\n            else if (*iid == IID_IPersist)\n                std::cout << "IID_IPersist";\n\n            // Release the interface pointer\n            pInterface->Release();\n            std::cout << std::endl;\n        }\n    }\n\n    // Release the IUnknown pointer obtained from CoCreateInstance\n    pUnknown->Release();\n}\n\nint main() {\n    HRESULT hr;\n\n    // Initialize COM library for use by calling thread\n    hr = CoInitializeEx(NULL, COINIT_APARTMENTTHREADED);\n    if (FAILED(hr)) {\n        std::cerr << "Failed to initialize COM library" << std::endl;\n        return -1;  // Program error\n    }\n\n    // Replace with the CLSID you want to inspect\n    CLSID clsid = /* Your CLSID here */;\n    \n    QuerySupportedInterfaces(clsid);\n\n    // Uninitialize the COM library.\n    CoUninitialize();\n\n    return 0;\n}