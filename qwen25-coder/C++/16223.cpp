#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <vector>\n\n// Function to tokenize the input text based on given rules\nstd::string tokenize(const std::string& input, const std::unordered_map<std::string, std::string>& rules) {\n    std::string result;\n    size_t i = 0;\n    while (i < input.size()) {\n        bool matched = false;\n        // Check all possible patterns starting at position i\n        for (auto it = rules.rbegin(); !matched && it != rules.rend(); ++it) {\n            const auto& pattern = it->first;\n            if (input.compare(i, pattern.size(), pattern) == 0) {\n                matched = true;\n                result += it->second + " ";\n                i += pattern.size();\n            }\n        }\n        // If no match found, move to the next character\n        if (!matched) {\n            ++i;\n        }\n    }\n    return result.empty() ? "" : result.substr(0, result.size() - 1); // Remove trailing space\n}\n\nint main() {\n    std::unordered_map<std::string, std::string> rules = {\n        {"a", "V-A"},\n        {"pp", "C-PPA"},\n        {"p", "C-PA"}, // 'p' should be checked after longer patterns like 'pp'\n        {"u", "V-U"}\n    };\n    \n    std::string input = "appu";\n    std::string tokens = tokenize(input, rules);\n    std::cout << "Tokens: " << tokens << std::endl; // Output: Tokens: V-A C-PPA V-U\n\n    return 0;\n}