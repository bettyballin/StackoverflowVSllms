// Declare these somewhere in your global scope or at the beginning of your message handler for WM_INITDIALOG.\nHWND hOKButton = NULL;\nHWND hEditControl = NULL;\n\nLRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) {\n    switch (msg) {\n        case WM_INITDIALOG:\n            // Initialize your controls here\n            hEditControl = GetDlgItem(hwnd, ID_TEXTO2);\n            hOKButton = GetDlgItem(hwnd, ID_BOTON9); // Assuming ID_BOTON9 is the OK button\n\n            // Initially disable the OK button if the edit control is empty\n            EnableWindow(hOKButton, FALSE);\n\n            // Set font and other properties for hEditControl here\n            SendMessage(hEditControl, EM_SETLIMITTEXT, 10, 0); // Assuming phone numbers are max 10 digits long\n\n            return TRUE; // Return TRUE to give initial focus to the first control in the dialog\n\n        case WM_COMMAND:\n            switch (LOWORD(wParam)) {\n                case ID_BOTON9: // OK button clicked\n                    int len = GetWindowTextLength(hEditControl);\n                    if (len > 0) {\n                        TCHAR phone[11]; // Adjust size as necessary based on expected input length\n                        GetWindowText(hEditControl, phone, sizeof(phone) / sizeof(TCHAR));\n                        \n                        // Optional: Further validate the format of the number\n                        bool isValid = ValidatePhoneNumber(phone); // Implement this function if needed\n                        \n                        if (isValid) {\n                            // Proceed with accepted data, e.g., send the data to another component or process.\n                            MessageBox(hwnd, _T("Número válido"), _T("Éxito"), MB_ICONINFORMATION | MB_OK);\n                            EndDialog(hwnd, IDOK); // Close the dialog\n                        } else {\n                            MessageBox(hEditControl, _T("Número no válido"), _T("Error"), MB_ICONEXCLAMATION | MB_OK);\n                        }\n                    }\n                    break;\n\n                default:\n                    return FALSE;\n            }\n            break;\n\n        case WM_CTLCOLORSTATIC:\n            return (LRESULT)GetStockObject(WHITE_BRUSH);\n\n        case WM_HSCROLL:\n            if ((HWND)lParam == hEditControl) {\n                UpdateDialogControls(hwnd, TRUE);\n            }\n            break;\n\n        case WM_NOTIFY: // Handle EN_CHANGE from edit control\n            if (((NMHDR *)lParam)->code == EN_CHANGE) {\n                int len = GetWindowTextLength(hEditControl);\n                EnableWindow(hOKButton, (len > 0));\n            }\n            return FALSE;\n\n        default:\n            return DefWindowProc(hwnd, msg, wParam, lParam);\n    }\n\n    return TRUE;\n}\n\n// Example function to validate phone number. You can customize it.\nbool ValidatePhoneNumber(const TCHAR* phoneNumber) {\n    // Implement your validation logic here\n    // For simplicity, let's assume only digits and a fixed length of 10 are valid.\n    for (int i = 0; phoneNumber[i] != '\0'; ++i) {\n        if (!isdigit(phoneNumber[i])) {\n            return false;\n        }\n    }\n    return _tcslen(phoneNumber) == 10;\n}