#include <emmintrin.h> // Header file to include for SSE2\n\nvoid processWithSSE(int* data, int* resultMin, int* resultMax, unsigned int mask, int count) {\n    __m128i minVec = _mm_set1_epi32(INT_MAX);\n    __m128i maxVec = _mm_set1_epi32(INT_MIN);\n\n    for (int i = 0; i <= count - 4; i += 4) { // Process four integers at a time\n        __m128i loadVec = _mm_loadu_si128((__m128i*)&data[i]);\n        __m128i maskedVec = _mm_and_si128(loadVec, _mm_set1_epi32(mask));\n        \n        minVec = _mm_min_epi32(minVec, maskedVec);\n        maxVec = _mm_max_epi32(maxVec, maskedVec);\n    }\n\n    // Extract results from the SIMD vectors\n    int mins[4];\n    int maxs[4];\n    _mm_storeu_si128((__m128i*)mins, minVec);\n    _mm_storeu_si128((__m128i*)maxs, maxVec);\n\n    *resultMin = std::min({mins[0], mins[1], mins[2], mins[3]});\n    *resultMax = std::max({maxs[0], maxs[1], maxs[2], maxs[3]});\n\n    // Handle remaining elements (if array size is not a multiple of 4)\n    for (int i = count - (count % 4); i < count; ++i) {\n        int maskedValue = data[i] & mask;\n        *resultMin = std::min(maskedValue, *resultMin);\n        *resultMax = std::max(maskedValue, *resultMax);\n    }\n}