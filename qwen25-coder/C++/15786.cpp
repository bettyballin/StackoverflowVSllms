#include <windows.h>\n#include <iostream>\n\nunsigned long GetTargetProcessIdFromWindow(const char *className, const char *windowName)\n{\n    HWND targetWnd = FindWindowA(className, windowName);\n    if (targetWnd == NULL) {\n        std::cerr << "Failed to find window." << std::endl;\n        return 0;\n    }\n\n    unsigned long processID = 0;\n    unsigned long threadID = GetWindowThreadProcessId(targetWnd, &processID);\n\n    if (threadID == 0) {\n        std::cerr << "Failed to get thread ID." << std::endl;\n        return 0;\n    }\n\n    return threadID;\n}\n\nint _tmain(int argc, _TCHAR* argv[]) {\n    unsigned long threadID = GetTargetProcessIdFromWindow("Notepad", NULL); // Use NULL if the title is not fixed\n\n    if (threadID == 0) {\n        std::cerr << "Could not find Notepad's thread ID." << std::endl;\n        return -1;\n    }\n\n    printf("TID: %u\n", threadID);\n\n    HINSTANCE hinst = LoadLibrary(_T("MyDLL.dll"));\n    if (!hinst) {\n        std::cerr << "Failed to load DLL." << std::endl;\n        return -1;\n    }\n\n    typedef void (*Install)(unsigned long);\n    typedef void (*Uninstall)();\n    Install install = (Install)GetProcAddress(hinst, "install");\n    Uninstall uninstall = (Uninstall)GetProcAddress(hinst, "uninstall");\n\n    if (!install || !uninstall) {\n        std::cerr << "Failed to get function addresses." << std::endl;\n        FreeLibrary(hinst);\n        return -1;\n    }\n\n    install(threadID);\n    printf("Hook installed. Press any key to uninstall...");\n    getchar();\n\n    uninstall();\n    FreeLibrary(hinst);\n\n    return 0;\n}