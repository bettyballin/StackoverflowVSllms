#include <iostream>\n#include <fstream>\n#include <vector>\n\nclass Model {\npublic:\n    std::vector<double> parameters;\n\n    // Constructor\n    Model(std::vector<double> params) : parameters(params) {}\n\n    // Save to a binary file\n    void save(const std::string& filename) const {\n        std::ofstream ofs(filename, std::ios::binary);\n        size_t sz = parameters.size();\n        ofs.write(reinterpret_cast<const char*>(&sz), sizeof(sz));\n        ofs.write(reinterpret_cast<const char*>(parameters.data()), sz * sizeof(double));\n    }\n\n    // Load from a binary file\n    static Model load(const std::string& filename) {\n        std::ifstream ifs(filename, std::ios::binary);\n        size_t sz;\n        ifs.read(reinterpret_cast<char*>(&sz), sizeof(sz));\n        std::vector<double> params(sz);\n        ifs.read(reinterpret_cast<char*>(params.data()), sz * sizeof(double));\n        return Model(params);\n    }\n};\n\nint main() {\n    Model model({0.1, 0.2, 0.3});\n    model.save("model.bin");\n\n    // Load the model\n    Model loadedModel = Model::load("model.bin");\n    for (double param : loadedModel.parameters) {\n        std::cout << param << " ";\n    }\n}