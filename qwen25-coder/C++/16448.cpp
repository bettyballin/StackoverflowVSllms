#include <string>\n#include <vector>\n#include <algorithm>\n#include <iostream>\n\nusing namespace std;\n\nint levenshtein(const string &s1, const string &s2) {\n    string::size_type N1 = s1.length();\n    string::size_type N2 = s2.length();\n    vector<int> T(N2 + 1);\n\n    for (string::size_type i = 0; i <= N2; i++)\n        T[i] = i;\n\n    for (string::size_type i = 0; i < N1; i++) {\n        T[0] = i + 1;\n        int corner = i;\n        for (string::size_type j = 0; j < N2; j++) {\n            int upper = T[j + 1];\n            if (s1[i] == s2[j])\n                T[j + 1] = corner;\n            else\n                T[j + 1] = min(T[j], min(upper, corner)) + 1;\n            corner = upper;\n        }\n    }\n    return T[N2];\n}\n\nvector<string> suggestCorrections(const string &word, const vector<string> &dictionary) {\n    vector<string> suggestions;\n    for (const auto &dictWord : dictionary) {\n        if (levenshtein(word, dictWord) == 1) {\n            suggestions.push_back(dictWord);\n        }\n    }\n    return suggestions;\n}\n\nint main() {\n    string word = "bearn";\n    vector<string> dictionary = {"bear", "bears", "beard", "beer", "bare"};\n\n    vector<string> corrections = suggestCorrections(word, dictionary);\n\n    cout << "Suggestions for '" << word << "':" << endl;\n    for (const auto &suggestion : corrections) {\n        cout << suggestion << endl;\n    }\n\n    return 0;\n}