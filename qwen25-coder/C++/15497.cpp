#include <windows.h>\n\nvoid ConvertTo8bpp(HDC hdcDest, BYTE* pSourceBuffer, int width, int height)\n{\n    BITMAPINFOHEADER bmiHeader;\n    HDC hdcSrc = CreateCompatibleDC(hdcDest);\n    HBITMAP hBitmap;\n\n    // Initialize the header.\n   é›¶Memory(&bmiHeader, sizeof(BITMAPINFOHEADER));\n    bmiHeader.biSize        = sizeof(BITMAPINFOHEADER); \n    bmiHeader.biWidth       = width;                  // Width of image \n    bmiHeader.biHeight      = -height;                 // Negative height for 'top-down' bitmap.\n    bmiHeader.biPlanes      = 1;                      // # source planes\n    bmiHeader.biBitCount    = 24;                     // Pixel plane size in bits (24bpp source)\n    bmiHeader.biCompression = BI_RGB;\n\n    // Create DIB section that wraps your existing buffer.\n    hBitmap = CreateDIBitmap(hdcSrc, &bmiHeader, CBM_INIT, pSourceBuffer, (BITMAPINFO *)&bmiHeader, DIB_RGB_COLORS);\n    if (!hBitmap) {\n        DeleteDC(hdcSrc);\n        return;\n    }\n\n    // Select bitmap into memory DC.\n    HGDIOBJ hOldBitmap = SelectObject(hdcSrc, hBitmap);\n\n    // Create a 8bpp DIB section as a destination\n    BITMAPINFOHEADER bmiDestHeader = {0};\n    bmiDestHeader.biSize = sizeof(BITMAPINFOHEADER);\n    bmiDestHeader.biWidth = width;\n    bmiDestHeader.biHeight = -height; // Negative for top-down bitmap.\n    bmiDestHeader.biPlanes = 1;\n    bmiDestHeader.biBitCount = 8; // Destination is 8bpp\n    bmiDestHeader.biCompression = BI_RGB;\n\n    BYTE* pDestBuffer = NULL;\n    HBITMAP hBitmapDest = CreateDIBSection(hdcDest, (const BITMAPINFO*)&bmiDestHeader, DIB_RGB_COLORS, (void**)&pDestBuffer, NULL, 0);\n    if (!hBitmapDest) {\n        SelectObject(hdcSrc, hOldBitmap);\n        DeleteObject(hBitmap);\n        DeleteDC(hdcSrc);\n        return;\n    }\n\n    // Select destination bitmap to another memory DC\n    HDC hdcDestMem = CreateCompatibleDC(hdcDest);\n    HGDIOBJ hOldBitmapDest = SelectObject(hdcDestMem, hBitmapDest);\n\n    // Use StretchBlt or BitBlt for conversion. We assume source and dest are the same size here.\n    StretchBlt(hdcDestMem, 0, 0, width, height, hdcSrc, 0, 0, width, height, SRCCOPY);\n\n    // Now pDestBuffer contains the converted data\n\n    // Cleanup\n    SelectObject(hdcDestMem, hOldBitmapDest);\n    DeleteObject(hBitmapDest);\n    DeleteDC(hdcDestMem);\n    \n    SelectObject(hdcSrc, hOldBitmap);\n    DeleteObject(hBitmap);\n    DeleteDC(hdcSrc);\n}