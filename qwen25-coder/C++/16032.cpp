#include <iostream>\n#include <fstream>\n#include <vector>\n#include <cstdint>\n\n// Define the Vertex structure with natural alignment for performance\nstruct alignas(4) Vertex {\n    float point[3];\n    float normal[3];\n    float texcoord[2];\n};\n\nvoid writeVertices(const std::string& filename, const std::vector<Vertex>& vertices) {\n    std::ofstream outFile(filename, std::ios::binary);\n    if (!outFile) {\n        throw std::runtime_error("Could not open file for writing.");\n    }\n    outFile.write(reinterpret_cast<const char*>(vertices.data()), vertices.size() * sizeof(Vertex));\n    if (outFile.fail()) {\n        throw std::runtime_error("Error writing to file.");\n    }\n}\n\nstd::vector<Vertex> readVertices(const std::string& filename, size_t vertexCount) {\n    std::ifstream inFile(filename, std::ios::binary);\n    if (!inFile) {\n        throw std::runtime_error("Could not open file for reading.");\n    }\n    std::vector<Vertex> vertices(vertexCount);\n    inFile.read(reinterpret_cast<char*>(vertices.data()), vertexCount * sizeof(Vertex));\n    if (inFile.fail() && !inFile.eof()) {\n        throw std::runtime_error("Error reading from file.");\n    }\n    return vertices;\n}\n\nint main() {\n    try {\n        // Example usage\n        std::vector<Vertex> vertices = {/* Your data here */};\n\n        // Write to file\n        writeVertices("vertices.bin", vertices);\n\n        // Read back from the same file\n        size_t vertexCount = vertices.size();\n        std::vector<Vertex> loadedVertices = readVertices("vertices.bin", vertexCount);\n\n        // Use loadedVertices as needed...\n    } catch (const std::exception& e) {\n        std::cerr << "Exception: " << e.what() << '\n';\n        return EXIT_FAILURE;\n    }\n\n    return EXIT_SUCCESS;\n}