#include <mysql++.h>\n#include <vector>\n\nclass ConnectionPool {\nprivate:\n    std::vector<mysqlpp::Connection> connections;\n    size_t maxConnections;\n\npublic:\n    ConnectionPool(size_t numConnections, const mysqlpp::ConnectOptions& options)\n        : maxConnections(numConnections) {\n        for (size_t i = 0; i < numConnections; ++i) {\n            connections.emplace_back(options);\n            if (!connections.back().connected()) {\n                throw std::runtime_error("Failed to connect to database");\n            }\n        }\n    }\n\n    mysqlpp::Connection& getConnection() {\n        // Simple round-robin connection selection\n        static size_t current = 0;\n        mysqlpp::Connection& conn = connections[current];\n        current = (current + 1) % maxConnections;\n        return conn;\n    }\n};\n\nint main() {\n    try {\n        mysqlpp::ConnectOptions options("user", "password", "localhost", "database_name");\n        ConnectionPool pool(10, options); // Pool of 10 connections\n\n        mysqlpp::Connection& con = pool.getConnection();\n        if (!con) {\n            std::cerr << "Failed to get connection from pool" << std::endl;\n            return 1;\n        }\n\n        mysqlpp::Query query = con.query("SELECT * FROM example_table");\n        mysqlpp::StoreQueryResult res = query.store();\n\n        // Process results...\n    } catch (const mysqlpp::BadQuery& e) {\n        std::cerr << "Query error: " << e.what() << std::endl;\n    } catch (const mysqlpp::Exception& e) {\n        std::cerr << "MySQL++ Exception: " << e.what() << std::endl;\n    }\n\n    return 0;\n}