#include <iostream>\n#include <memory>\n\nclass Base {\nprotected:\n    Base() {}\npublic:\n    virtual ~Base() {}\n\n    virtual bool Test() = 0;\n};\n\nclass A : public Base {\npublic:\n    bool Test() override { return true; }\n};\n\nclass B : public Base {\npublic:\n    bool Test() override { return false; }\n};\n\nint main(int argc, char* argv[]) {\n    const int maxSize = 10;\n    std::unique_ptr<Base> bases[maxSize];\n    int size = 0;\n\n    bases[size++] = std::make_unique<A>();\n    bases[size++] = std::make_unique<B>();\n\n    for (int i = 0; i < size; i++) {\n        if (bases[i]->Test()) {\n            std::cout << "Test passed." << std::endl;\n        } else {\n            std::cout << "Test failed." << std::endl;\n        }\n    }\n\n    // No need to manually delete with unique_ptr\n    return 0;\n}