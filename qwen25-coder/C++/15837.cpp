#include <windows.h>\n#include <shlwapi.h>\n#include <iostream>\n#include <iomanip>\n\n// Link against Shlwapi.lib if not already linked\n#pragma comment(lib, "Shlwapi.lib")\n\nvoid GetDLLInfo() {\n    HMODULE hModule = NULL;\n    // Get handle to the current module (your DLL)\n    if (!GetModuleHandleEx(GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS |\n                            GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT,\n                            (LPCTSTR)GetDLLInfo, &hModule)) {\n        std::cerr << "Failed to get module handle." << std::endl;\n        return;\n    }\n\n    // Get the DLL path\n    WCHAR dllPath[MAX_PATH];\n    if (!GetModuleFileName(hModule, dllPath, MAX_PATH)) {\n        std::cerr << "Failed to retrieve DLL file name." << std::endl;\n        return;\n    }\n\n    // Print the DLL file name\n    std::wcout << L"DLL Path: " << dllPath << std::endl;\n\n    // Get the file version information size\n    DWORD versionInfoSize = GetFileVersionInfoSize(dllPath, NULL);\n    if (versionInfoSize == 0) {\n        std::cerr << "Failed to get file version info size." << std::endl;\n        return;\n    }\n\n    // Allocate memory for the buffer that receives the version information\n    BYTE* versionInfoBuffer = new BYTE[versionInfoSize];\n    if (!GetFileVersionInfo(dllPath, 0, versionInfoSize, versionInfoBuffer)) {\n        delete[] versionInfoBuffer;\n        std::cerr << "Failed to retrieve file version info." << std::endl;\n        return;\n    }\n\n    // Structure for the block of data in the buffer\n    UINT length = 0;\n    VS_FIXEDFILEINFO* vsffi = nullptr;\n    if (!VerQueryValue(versionInfoBuffer, L"\\", (LPVOID*)&vsffi, &length)) {\n        delete[] versionInfoBuffer;\n        std::cerr << "Failed to query file version info." << std::endl;\n        return;\n    }\n\n    // Print the DLL version\n    ULONGLONG fileVersion = HIWORD(vsffi->dwFileVersionMS);\n    fileVersion <<= 16 | LOWORD(vsffi->dwFileVersionMS);\n    fileVersion <<= 16 | HIWORD(vsffi->dwFileVersionLS);\n    fileVersion <<= 16 | LOWORD(vsffi->dwFileVersionLS);\n\n    std::cout << "DLL Version: " \n              << (fileVersion >> 48) & 0xFFFF << "."\n              << (fileVersion >> 32) & 0xFFFF << "."\n              << (fileVersion >> 16) & 0xFFFF << "."\n              << fileVersion & 0xFFFF << std::endl;\n\n    // Clean up\n    delete[] versionInfoBuffer;\n}