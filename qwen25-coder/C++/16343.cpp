#include <csignal>\n#include <iostream>\n#include <unistd.h>\n\nvoid signalHandler(int signum) {\n    std::cerr << "Interrupt signal (" << signum << ") received.\n";\n    // Perform minimal logging here\n    // Ensure to keep this handler simple and signal-safe\n\n    exit(signum);  // Exit program or attempt graceful shutdown\n}\n\nint main() {\n    // Register signal handlers for common signals\n    std::signal(SIGINT, signalHandler);\n    std::signal(SIGFPE, signalHandler);\n    std::signal(SIGSEGV, signalHandler);\n\n#ifdef __linux__\n    std::signal(SIGUSR1, signalHandler);  // User-defined signal example\n    // Add more Linux-specific handlers here if needed\n#endif\n\n#ifndef _WIN32\n    std::signal(SIGHUP, signalHandler);   // Terminal hang-up\n    std::signal(SIGTERM, signalHandler);  // Termination request via kill()\n#endif\n\n    // Your main application code goes here\n\n    return 0;\n}