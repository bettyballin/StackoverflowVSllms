// MyClass.h\n#ifdef MYLIBRARY_EXPORTS\n#define MYLIBRARY_API __declspec(dllexport)\n#else\n#define MYLIBRARY_API __declspec(dllimport)\n#endif\n\nclass MyClass {\n    // Private constructor and destructor to prevent direct instantiation from outside the library\n    MyClass();\n    ~MyClass();\n\npublic:\n    friend class MyClassFactory; // Allow factory class access\n};\n\n// Factory for creating and destroying objects\nclass MyClassFactory {\npublic:\n    static MYLIBRARY_API MyClass* CreateInstance();\n    static MYLIBRARY_API void DestroyInstance(MyClass* pObject);\n};\n\n\n// MyClass.cpp\n#include "MyClass.h"\n#include <new>\n\nMyClass::MyClass() {}\nMyClass::~MyClass() {}\n\nMYLIBRARY_API MyClass* MyClassFactory::CreateInstance() {\n    return new MyClass();\n}\n\nMYLIBRARY_API void MyClassFactory::DestroyInstance(MyClass* pObject) {\n    delete pObject;\n}