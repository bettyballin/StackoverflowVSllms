#include <iostream>\n#include <random>\n#include <ctime>\n\nbool generateCriticalHit(float criticalChance) {\n    static std::mt19937 generator(static_cast<unsigned int>(std::time(nullptr))); // Seed the generator with current time\n    std::uniform_real_distribution<float> distribution(0.0, 1.0); // Define a uniform distribution between 0 and 1\n\n    float randomValue = distribution(generator);\n    return randomValue < criticalChance; // Return true if random value is less than the crit chance (20% in this case)\n}\n\nint main() {\n    const float criticalHitChance = 0.2f; // 20% chance for a critical hit\n    int numberOfHits = 10;\n    int critCount = 0;\n\n    for(int i = 0; i < numberOfHits; ++i) {\n        if(generateCriticalHit(criticalHitChance)) {\n            std::cout << "Crit on hit #" << i+1 << std::endl;\n            ++critCount;\n        }\n    }\n\n    std::cout << "Total crits in " << numberOfHits << " hits: " << critCount << std::endl;\n\n    return 0;\n}