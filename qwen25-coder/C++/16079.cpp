#include "Poco/NotificationQueue.h"\n#include "Poco/NotificationThread.h"\n#include "Poco/TaskNotification.h"\n#include "Poco/AutoPtr.h"\n\nusing namespace Poco;\n\nclass MyTask : public Runnable {\npublic:\n    MyTask(NotificationQueue& queue) : _queue(queue) {}\n\n    void run() {\n        while (true) {\n            AutoPtr<Notification> pNf(_queue.waitDequeueNotification());\n            if (!pNf) break; // End of work\n            TaskNotification* pTaskNf = dynamic_cast<TaskNotification*>(pNf);\n            if (pTaskNf) {\n                std::cout << "Task ID: " << pTaskNf->task().name() << std::endl;\n            } else {\n                std::cout << "Unknown Notification" << std::endl;\n            }\n        }\n    }\n\nprivate:\n    NotificationQueue& _queue;\n};\n\nint main() {\n    NotificationQueue queue;\n    MyTask task(queue);\n    NotificationThread nt(task);\n\n    // Post notifications\n    queue.enqueueNotification(new TaskStartedNotification(Task("MyTask")));\n    queue.enqueueNotification(new TaskProgressNotification(Task("MyTask"), 50));\n    queue.enqueueNotification(new TaskCompletedNotification(Task("MyTask")));\n\n    // Stop the task\n    queue.wakeUpAll();\n    nt.join();\n\n    return 0;\n}