#include <windows.h>\n\n// Global variables to store thread information\nHANDLE g_threadHandle = NULL;\nDWORD g_threadId = 0;\nBOOL g_isThreadActive = FALSE;\nCRITICAL_SECTION g_criticalSection;\nint g_result = -1; // Default result if thread hasn't completed\n\n// Thread function that performs the heavy operation\nDWORD WINAPI HeavyFunction(LPVOID lpParam) {\n    // Simulate a long-running task\n    Sleep(200); // Replace with actual communication setup code\n\n    EnterCriticalSection(&g_criticalSection);\n    g_result = 42; // Set some result or status code\n    LeaveCriticalSection(&g_criticalSection);\n\n    return 0;\n}\n\n// Initialization function for your DLL (called once at load time)\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {\n    switch (ul_reason_for_call) {\n        case DLL_PROCESS_ATTACH:\n            InitializeCriticalSection(&g_criticalSection);\n            break;\n        case DLL_PROCESS_DETACH:\n            if (g_threadHandle != NULL) {\n                WaitForSingleObject(g_threadHandle, INFINITE);\n                CloseHandle(g_threadHandle);\n            }\n            DeleteCriticalSection(&g_criticalSection);\n            break;\n    }\n    return TRUE;\n}\n\n// API function that your automation package will call\nint __stdcall YourEFBFunction() {\n    EnterCriticalSection(&g_criticalSection);\n\n    if (!g_isThreadActive) {\n        // Start the thread\n        g_threadHandle = CreateThread(NULL, 0, HeavyFunction, NULL, 0, &g_threadId);\n        g_isThreadActive = TRUE;\n        LeaveCriticalSection(&g_criticalSection);\n        return DOEFB_BUSY; // Indicate that operation is in progress\n    } else {\n        if (WaitForSingleObject(g_threadHandle, 0) == WAIT_TIMEOUT) {\n            // Thread still running\n            LeaveCriticalSection(&g_criticalSection);\n            return DOEFB_BUSY;\n        } else {\n            // Thread finished\n            CloseHandle(g_threadHandle);\n            g_threadHandle = NULL;\n            g_isThreadActive = FALSE;\n\n            int result_to_return = g_result; // Save the result to return\n\n            LeaveCriticalSection(&g_criticalSection);\n\n            return result_to_return; // Return the result of the operation\n        }\n    }\n}