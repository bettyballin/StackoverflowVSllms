#include <immintrin.h>\n#include <stdint.h>\n\nvoid rgb_to_argb_avx2(const uint8_t* rgb, uint8_t* argb, size_t num_pixels) {\n    __m256i alpha = _mm256_set1_epi8(255);\n    \n    for (size_t i = 0; i <= num_pixels - 32 / 4; i += 32 / 4) { // Process 16 pixels at a time\n        __m256i rgb_vec = _mm256_loadu_si256((__m256i const*)(&rgb[i * 3]));\n        \n        // Shift and pack RGB into ARGB format\n        __m256i argb_vec = _mm256_insertf128_si256(_mm256_castsi128_si256(\n            _mm_cvtepu8_epi32(*(__m128i*)&rgb[i * 3])), \n                                                   _mm_cvtepu8_epi32(*(__m128i*)(&rgb[(i + 8) * 3])), 1);\n        argb_vec = _mm256_permutevar8x32_epi32(argb_vec, *(__m256i*)&_mm_setr_epi32(0, 4, 1, 5, 2, 6, 3, 7));\n        \n        // Set alpha channel\n        argb_vec = _mm256_blend_epi8(argb_vec, alpha, 0xF0);\n        \n        _mm256_storeu_si256((__m256i*)(&argb[i * 4]), argb_vec);\n    }\n\n    // Handle leftover pixels\n    rgb_to_argb(rgb + (num_pixels - num_pixels % (32 / 4)) * 3, \n                argb + (num_pixels - num_pixels % (32 / 4)) * 4, \n                num_pixels % (32 / 4));\n}