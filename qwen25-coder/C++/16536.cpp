#include <winsock2.h>\n#include <ws2tcpip.h>\n#include <iostream>\n\n#pragma comment(lib, "Ws2_32.lib")\n\nint main() {\n    WSADATA wsaData;\n    int iResult;\n\n    // Initialize Winsock\n    iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);\n    if (iResult != NO_ERROR) {\n        std::cerr << "WSAStartup failed: " << iResult << std::endl;\n        return 1;\n    }\n\n    SOCKET RecvSocket;\n    sockaddr_in RecvAddr;\n\n    char RecvBuf[512];\n    int BufLen = 512;\n\n    unsigned short PortNo = 5004;\n\n    RecvSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n    if (RecvSocket == INVALID_SOCKET) {\n        std::cerr << "Error at socket(): " << WSAGetLastError() << std::endl;\n        WSACleanup();\n        return 1;\n    }\n\n    // Set up the sockaddr structure\n    memset((char*)&RecvAddr, 0, sizeof(RecvAddr));\n    RecvAddr.sin_family = AF_INET;\n    RecvAddr.sin_port = htons(PortNo);\n    RecvAddr.sin_addr.s_addr = htonl(INADDR_ANY);\n\n    iResult = bind(RecvSocket, (SOCKADDR*)&RecvAddr, sizeof(RecvAddr));\n    if (iResult != 0) {\n        std::cerr << "bind failed with error: " << WSAGetLastError() << std::endl;\n        closesocket(RecvSocket);\n        WSACleanup();\n        return 1;\n    }\n\n    // Join multicast group\n    ip_mreq mreq;\n    char MulticastIP[] = "239.0.0.255";\n    mreq.imr_multiaddr.s_addr = inet_addr(MulticastIP);\n    mreq.imr_interface.s_addr = htonl(INADDR_ANY);\n\n    iResult = setsockopt(RecvSocket, IPPROTO_IP, IP_ADD_MEMBERSHIP,\n                         (char*)&mreq, sizeof(mreq));\n    if (iResult != 0) {\n        std::cerr << "setsockopt failed with error: " << WSAGetLastError() << std::endl;\n        closesocket(RecvSocket);\n        WSACleanup();\n        return 1;\n    }\n\n    sockaddr_in SenderAddr;\n    int SenderAddrSize = sizeof(SenderAddr);\n\n    // Receive data\n    iResult = recvfrom(RecvSocket, RecvBuf, BufLen, 0,\n                       (sockaddr*)&SenderAddr, &SenderAddrSize);\n    if (iResult == SOCKET_ERROR) {\n        std::cerr << "recvfrom failed with error: " << WSAGetLastError() << std::endl;\n    } else {\n        RecvBuf[iResult] = '\0';\n        std::cout << "Received from IP address: " << inet_ntoa(SenderAddr.sin_addr) \n                  << ", port " << ntohs(SenderAddr.sin_port) << "\nMessage: " \n                  << RecvBuf << std::endl;\n    }\n\n    // Leave multicast group\n    setsockopt(RecvSocket, IPPROTO_IP, IP_DROP_MEMBERSHIP,\n               (char*)&mreq, sizeof(mreq));\n\n    closesocket(RecvSocket);\n    WSACleanup();\n\n    return 0;\n}