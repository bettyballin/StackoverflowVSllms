#include <boost/interprocess/mapped_region.hpp>\n#include <boost/interprocess/file_mapping.hpp>\n#include <cstddef>\n\ntemplate<typename T>\nclass DiskBackedVector {\nprivate:\n    boost::interprocess::file_mapping fm;\n    boost::interprocess::mapped_region mr;\n\npublic:\n    DiskBackedVector(const std::string &filename, size_t capacity) \n        : fm(filename.c_str(), boost::interprocess::read_write), \n          mr(fm, boost::interprocess::read_write, 0, capacity * sizeof(T)) {\n        // Initialize the file with zero bytes if it doesn't exist or is too small\n    }\n\n    T &operator[](size_t idx) {\n        return *(static_cast<T*>(mr.get_address()) + idx);\n    }\n};\n\nint main() {\n    DiskBackedVector<int> vec("large_data.dat", 1024*1024); // A million integers\n    vec[10] = 42;\n    int value = vec[10];\n    return 0;\n}