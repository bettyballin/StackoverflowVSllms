#include <glm/glm.hpp> // GLM for easy vector and matrices operations\n\nvoid Camera::extractModelViewMatrixData() {\n    float m[16];\n    glGetFloatv(GL_MODELVIEW_MATRIX, m);\n\n    glm::mat4 matrix(m);\n    \n    // Extract up vector\n    up.x = m[4];\n    up.y = m[5];\n    up.z = m[6];\n\n    // Extract lookAt direction from the third column of the matrix (inversed direction)\n    // In OpenGL's left-handed coordinate system, it points towards the scene.\n    glm::vec3 look(-m[8], -m[9], -m[10]);\n    \n    // Extract eye position by multiplying the inverse of the upper-left 3x3 part with the translation part\n    glm::mat3 rotation(m);\n    glm::vec3 translation = glm::vec3(m[12], m[13], m[14]);\n    eye.x = -glm::dot(rotation[0], translation);\n    eye.y = -glm::dot(rotation[1], translation);\n    eye.z = -glm::dot(rotation[2], translation);\n\n    // Optionally, recalculate lookAt position by adding direction to the eye position\n    // Note: lookAt here means the point the camera is looking at, not just direction.\n    look.x += eye.x;\n    look.y += eye.y;\n    look.z += eye.z;\n\n    // Update your original look vector for consistency\n    this->look = glm::vec3(-m[8], -m[9], -m[10]);\n}