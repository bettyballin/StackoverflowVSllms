#include <windows.h>\n\n// Assuming hMenu is your handle to the context menu and\n// menuItemID is the ID of the "Copy" menu item.\nvoid SelectMenuItem(HWND hWndTarget, HMENU hMenu, UINT menuItemID) {\n    // Find screen coordinates of the target window's top-left corner.\n    RECT rect;\n    GetWindowRect(hWndTarget, &rect);\n\n    // Determine position to send mouse click. This is a simplified example\n    // and may require adjustments based on actual menu layout.\n    POINT ptClient = {0};  // Adjust this point for the specific menu item location\n    ClientToScreen(hWndTarget, &ptClient);\n    \n    // Use MFT_STRING | MF_SEPARATOR to find the position of the "Copy" menu item\n    int itemCount = GetMenuItemCount(hMenu);\n    for (int i = 0; i < itemCount; ++i) {\n        MENUITEMINFO mii = {0};\n        mii.cbSize = sizeof(MENUITEMINFO);\n        mii.fMask = MIIM_ID | MIIM_TYPE;\n        if (GetMenuItemInfo(hMenu, i, TRUE, &mii)) {\n            if (!(mii.fType & MFT_SEPARATOR) && strcmp((char*)mii.dwTypeData, "Copy") == 0) {\n                menuItemID = mii.wID;\n                break;\n            }\n        }\n    }\n\n    // Simulate mouse clicks to select the menu item\n    SendMessage hWndTarget, WM_LBUTTONDOWN, MK_LBUTTON, MAKELPARAM(ptClient.x, ptClient.y));\n    Sleep(20); // Small delay to simulate real user action\n    SendMessage(hWndTarget, WM_LBUTTONUP, 0, MAKELPARAM(ptClient.x, ptClient.y));\n\n    // Send the command directly if you know the menu item ID\n    // HWND hWndOwner = FindWindowEx(HWND_DESKTOP, NULL, "TPUtilWindow", NULL); // This may need to be looped and checked\n    // If you cannot find the owner window, sending the message to the target window might still work.\n    SendMessage(hWndTarget, WM_COMMAND, menuItemID, 0);\n}