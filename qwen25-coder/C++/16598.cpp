#include <iostream>\n#include <vector>\n#include <string>\n\n// Function to decode a single UTF-8 character into its Unicode code point\nbool decodeUTF8(const std::string& str, size_t start, unsigned int& unicodeCodePoint) {\n    if (start >= str.size()) return false;\n\n    unsigned char byte = static_cast<unsigned char>(str[start]);\n\n    if ((byte & 0x80) == 0) { // 1-byte UTF-8 character\n        unicodeCodePoint = byte;\n        return true;\n    } else if ((byte & 0xE0) == 0xC0 && start + 1 < str.size()) { // 2-byte UTF-8 character\n        unicodeCodePoint = (byte & 0x1F) << 6 | (str[start + 1] & 0x3F);\n        return true;\n    } else if ((byte & 0xF0) == 0xE0 && start + 2 < str.size()) { // 3-byte UTF-8 character\n        unicodeCodePoint = (byte & 0x0F) << 12 | ((str[start + 1] & 0x3F) << 6) | (str[start + 2] & 0x3F);\n        return true;\n    } else if ((byte & 0xF8) == 0xF0 && start + 3 < str.size()) { // 4-byte UTF-8 character\n        unicodeCodePoint = (byte & 0x07) << 18 | ((str[start + 1] & 0x3F) << 12) |\n                           ((str[start + 2] & 0x3F) << 6) | (str[start + 3] & 0x3F);\n        return true;\n    }\n\n    // Invalid UTF-8 sequence\n    return false;\n}\n\n// Function to check for Unicode characters and print them in hexadecimal\nvoid printUnicodeHex(const std::string& str) {\n    size_t i = 0;\n    while (i < str.size()) {\n        unsigned int codePoint;\n        if (decodeUTF8(str, i, codePoint)) {\n            // Check if the character is a Unicode character outside of ASCII range\n            if (codePoint > 127) {\n                std::cout << "Unicode character detected: U+" << std::hex << codePoint << "\n";\n            }\n            // Determine how many bytes to advance based on the UTF-8 sequence length\n            if ((static_cast<unsigned char>(str[i]) & 0x80) == 0) {\n                ++i;\n            } else if ((static_cast<unsigned char>(str[i]) & 0xE0) == 0xC0) {\n                i += 2;\n            } else if ((static_cast<unsigned char>(str[i]) & 0xF0) == 0xE0) {\n                i += 3;\n            } else if ((static_cast<unsigned char>(str[i]) & 0xF8) == 0xF0) {\n                i += 4;\n            }\n        } else {\n            std::cerr << "Invalid UTF-8 sequence at position " << i << "\n";\n            ++i; // Advance one byte to continue parsing\n        }\n    }\n}\n\nint main() {\n    std::string sample = "Hello, world! Привет мир! こんにちは世界!";\n    printUnicodeHex(sample);\n    return 0;\n}