#include <iostream>\n#include <vector>\n\n// Base class with a pure virtual function\nclass Base {\npublic:\n    virtual ~Base() = default;\n    virtual void DoSomething() = 0; // Pure virtual function\n};\n\n// Templated derived class that implements the base class's virtual function\ntemplate <class T>\nclass MyClass : public Base {\npublic:\n    void DoSomething() override {\n        // Example implementation for DoSomething\n        std::cout << "MyClass<>" << typeid(T).name() << "::DoSomething()" << std::endl;\n    }\n};\n\n// Holding class to store pointers to the base class\nclass Holder {\npublic:\n    ~Holder() {\n        // Clean up all stored objects\n        for (auto& obj : objects) {\n            delete obj;\n        }\n    }\n\n    void AddObject(Base* obj) {\n        objects.push_back(obj);\n    }\n\n    void CallDoSomethingForAll() {\n        for (const auto& obj : objects) {\n            obj->DoSomething(); // Call the overridden function\n        }\n    }\n\nprivate:\n    std::vector<Base*> objects; // Vector of pointers to Base\n};\n\nint main() {\n    Holder holder;\n    \n    MyClass<int>* intObj = new MyClass<int>();\n    MyClass<double>* doubleObj = new MyClass<double>();\n\n    holder.AddObject(intObj);\n    holder.AddObject(doubleObj);\n\n    holder.CallDoSomethingForAll();\n\n    return 0;\n}