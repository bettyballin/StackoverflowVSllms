#include <iostream>\n\nclass ManagedObject {\npublic:\n    ~ManagedObject() {\n        std::cout << "ManagedObject destroyed" << std::endl;\n    }\n};\n\nclass Manager {\npublic:\n    static void initialize() {\n        if (!instance) {\n            instance.reset(new ManagedObject());\n        }\n    }\n\n    static void shutdown() {\n        instance.reset();\n    }\n\n    static ManagedObject& getInstance() {\n        return *instance;\n    }\n\nprivate:\n    static std::unique_ptr<ManagedObject> instance;\n};\n\nstd::unique_ptr<ManagedObject> Manager::instance = nullptr;\n\nint main() {\n    Manager::initialize(); // Initialize managed object\n    ManagedObject& obj = Manager::getInstance();\n    // Use obj here\n\n    Manager::shutdown(); // Explicitly shut down when done, ensuring order\n    return 0;\n}