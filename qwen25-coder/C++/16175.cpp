struct IProcess {\n   virtual bool doSomeWork() const = 0;\n};\n\nclass Foo : public IProcess {    \n  virtual bool doSomeWork() const override {\n    // Implementation here...\n    return true; // Example return value\n  }\n};\n\nclass Bar\n{\nprivate:\n    mutable std::unique_ptr<IProcess> process;\n\npublic:\n    Bar(std::unique_ptr<IProcess> p) : process(std::move(p)) {}\n\n   const IProcess& getProcess() const {\n        return *process;\n    }\n\n    void doOtherWork() {\n        // Call the const version of getProcess()\n        getProcess().doSomeWork();        \n    }\n};