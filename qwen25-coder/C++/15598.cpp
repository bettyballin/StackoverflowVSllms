#include <vector>\n#include <iterator>\n\ntemplate<class InputIt1, class InputIt2>\nstd::vector<typename std::iterator_traits<InputIt1>::value_type>\nconcat(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2) {\n    using value_type = typename std::iterator_traits<InputIt1>::value_type;\n    auto total_size = std::distance(first1, last1) + std::distance(first2, last2);\n    std::vector<value_type> result;\n    result.reserve(total_size); // Reserve space to avoid multiple allocations\n    std::copy(first1, last1, std::back_inserter(result));\n    std::copy(first2, last2, std::back_inserter(result));\n    return result;\n}\n\nclass X {\npublic:\n    template <typename Iter>\n    X(Iter begin, Iter end) : mVec(begin, end) {}\n\n    template <typename Iter1, typename Iter2>\n    X(Iter1 begin1, Iter1 end1, Iter2 begin2, Iter2 end2)\n        : mVec(concat(begin1, end1, begin2, end2)) {}\n\nprivate:\n    const std::vector<Y> mVec;\n};