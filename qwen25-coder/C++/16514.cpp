class Foo {\nprotected:\n    virtual void aImp() = 0;\n    virtual void bImp() = 0;\n\nprivate:\n    friend class FooHelper; // Allow the helper access to protected members\n\n    struct ScopedLock {\n        boost::mutex& mtx;\n        ScopedLock(boost::mutex& m) : mtx(m) { mtx.lock(); }\n        ~ScopedLock() { mtx.unlock(); }\n    };\n\npublic:\n    void A() {\n        FooHelper::a(this);\n    }\n\n    void B() {\n        FooHelper::b(this);\n    }\n\nprivate:\n    boost::mutex mutex;\n};\n\nclass FooHelper {\npublic:\n    static void a(Foo* foo) {\n        ScopedLock lock(foo->mutex);\n        foo->aImp();\n    }\n\n    static void b(Foo* foo) {\n        ScopedLock lock(foo->mutex);\n        foo->bImp();\n    }\n};\n\nclass Bar : public Foo {\nprotected:\n    void aImp() override {\n        // ... some operations ...\n        FooHelper::b(this); // Safely call the helper method\n        // ... other operations ...\n    }\n\n    void bImp() override {\n        // Implementation of bImp\n    }\n};