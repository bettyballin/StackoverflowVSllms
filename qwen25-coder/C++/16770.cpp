#include <windows.h>\n#include <iostream>\n\nvoid SafeGetFileTime(HANDLE fileHandle) {\n    OSVERSIONINFOEX osvi;\n    ZeroMemory(&osvi, sizeof(OSVERSIONINFOEX));\n    osvi.dwOSVersionInfoSize = sizeof(OSVERSIONINFOEX);\n\n    if (GetVersionEx((OSVERSIONINFO*)&osvi)) {\n        // Check for NT-based systems\n        if (osvi.dwPlatformId == VER_PLATFORM_WIN32_NT) {\n            FILETIME creationTime, lastAccessTime, lastWriteTime;\n            if (GetFileTime(fileHandle, &creationTime, &lastAccessTime, &lastWriteTime)) {\n                // Successfully retrieved file times\n                std::cout << "File times retrieved successfully." << std::endl;\n            } else {\n                std::cerr << "Failed to retrieve file times: " << GetLastError() << std::endl;\n            }\n        } else {\n            // Handle pre-NT systems\n            std::cerr << "Function not supported on this OS version." << std::endl;\n            // Alternatively, provide alternative functionality here\n        }\n    } else {\n        std::cerr << "Failed to get system information: " << GetLastError() << std::endl;\n    }\n}\n\nint main() {\n    HANDLE hFile = CreateFile("example.txt", GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);\n    if (hFile == INVALID_HANDLE_VALUE) {\n        std::cerr << "Failed to open file: " << GetLastError() << std::endl;\n        return 1;\n    }\n\n    SafeGetFileTime(hFile);\n\n    CloseHandle(hFile);\n    return 0;\n}