#include <atlbase.h>\n\nclass CMySingleton {\npublic:\n    static CMySingleton* GetInstance() {\n        if (m_pInstance == nullptr) {\n            m_pInstance = new CMySingleton();\n        }\n        return m_pInstance;\n    }\n\n    ~CMySingleton() {\n        m_pOtherComObject.Release(); // Release the COM object\n    }\n\n    void Initialize() {\n        HRESULT hr = ::CoCreateInstance(CLSID_OtherComObject, nullptr, CLSCTX_INPROC_SERVER,\n                                       IID_IOtherComInterface, (LPVOID*) &m_pOtherComObject);\n        if (FAILED(hr)) {\n            throw std::runtime_error("Failed to create Other COM object");\n        }\n    }\n\nprivate:\n    CMySingleton() {}\n\n    static CMySingleton* m_pInstance;\n    CComPtr<IOtherComInterface> m_pOtherComObject; // Smart pointer for safer COM management\n};\n\nCMySingleton* CMySingleton::m_pInstance = nullptr;\n\nextern "C" BOOL WINAPI DllCanUnloadNow() {\n    if (CMySingleton::GetInstance()->m_pOtherComObject == nullptr) {\n        return S_TRUE;\n    }\n    return S_FALSE;\n}