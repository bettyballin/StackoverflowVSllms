#include <winsock2.h>\n#include <windows.h>\n#include <iostream>\n\n#pragma comment(lib, "ws2_32.lib")\n\nvoid sendData(const std::string& ip, int port, const std::string& message) {\n    WSADATA wsaData;\n    SOCKET ConnectSocket = INVALID_SOCKET;\n\n    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {\n        std::cerr << "WSAStartup failed!" << std::endl;\n        return;\n    }\n\n    struct addrinfo *result = NULL, hints;\n\n    ZeroMemory(&hints, sizeof(hints));\n    hints.ai_family = AF_UNSPEC;\n    hints.ai_socktype = SOCK_STREAM;\n    hints.ai_protocol = IPPROTO_TCP;\n\n    if (getaddrinfo(ip.c_str(), std::to_string(port).c_str(), &hints, &result) != 0) {\n        WSACleanup();\n        std::cerr << "Failed to resolve IP or port!" << std::endl;\n        return;\n    }\n\n    ConnectSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);\n\n    if (ConnectSocket == INVALID_SOCKET) {\n        freeaddrinfo(result);\n        WSACleanup();\n        std::cerr << "Error at socket()!" << std::endl;\n        return;\n    }\n\n    if (connect(ConnectSocket, result->ai_addr, static_cast<int>(result->ai_addrlen)) == SOCKET_ERROR) {\n        closesocket(ConnectSocket);\n        ConnectSocket = INVALID_SOCKET;\n        freeaddrinfo(result);\n        WSACleanup();\n        std::cerr << "Connection failed!" << std::endl;\n        return;\n    }\n\n    send(ConnectSocket, message.c_str(), static_cast<int>(message.size()), 0);\n\n    closesocket(ConnectSocket);\n    freeaddrinfo(result);\n    WSACleanup();\n}\n\nint main() {\n    HANDLE hSerial = CreateFile("\\\\.\\COM5", GENERIC_READ | GENERIC_WRITE, 0, NULL,\n                                OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);\n    if (hSerial == INVALID_HANDLE_VALUE) {\n        std::cerr << "Could not open COM port." << std::endl;\n        return -1;\n    }\n\n    while (true) {\n        char buffer[256];\n        DWORD bytesRead;\n\n        if (ReadFile(hSerial, buffer, sizeof(buffer), &bytesRead, NULL)) {\n            sendData("192.168.0.1", 4444, std::string(buffer, bytesRead));\n        }\n    }\n\n    CloseHandle(hSerial);\n    return 0;\n}