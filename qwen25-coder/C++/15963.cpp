// Interface for Device operations\nclass IDevice {\npublic:\n    virtual ~IDevice() = default;\n    virtual bool Open(const std::string& param1, const int param2) = 0;\n    virtual void GetInfo(YourCustomDataStructure* dataStruct) = 0;\n};\n\n// Real device that communicates with the DLL\nclass RealDevice : public IDevice {\npublic:\n    bool Open(const std::string& param1, const int param2) override {\n        // Call DLL function to open the real device\n        // return myfuncpointer.Open(param1, param2);\n        return true; // Simulate successful operation for now\n    }\n    \n    void GetInfo(YourCustomDataStructure* dataStruct) override {\n        // Call DLL function to get info from the real device\n        // myfuncpointer.GetInfo(dataStruct);\n        // Fill dataStruct with actual values received from the DLL\n    }\n};\n\n// Mock device that simulates device behavior using spec sheet data\nclass MockDevice : public IDevice {\npublic:\n    bool Open(const std::string& param1, const int param2) override {\n        // Simulate opening the mock device\n        return true; // Successful operation\n    }\n\n    void GetInfo(YourCustomDataStructure* dataStruct) override {\n        // Simulate getting info from the mock device using spec sheet data\n        if (dataStruct) {\n            dataStruct->option = true;\n            // Fill other fields with mock data based on your spec sheet\n            // dataStruct->otherField = someValue;\n        }\n    }\n};\n\n// Example of using the interface in your application logic\nvoid UseDevice(IDevice* device) {\n    if (!device->Open("param1", 42)) {\n        std::cerr << "Failed to open device" << std::endl;\n        return;\n    }\n\n    YourCustomDataStructure dataStruct;\n    device->GetInfo(&dataStruct);\n\n    // Process the received data\n}\n\nint main() {\n    // Using real device for actual tests (assuming you connect the physical device)\n    RealDevice realDevice;\n    UseDevice(&realDevice);\n\n    // Using mock device for testing without the physical one\n    MockDevice mockDevice;\n    UseDevice(&mockDevice);\n    \n    return 0;\n}