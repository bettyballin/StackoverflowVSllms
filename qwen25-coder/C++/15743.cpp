#include <iostream>\n#include <string>\n\n// Subject interface\nclass ISubject {\npublic:\n    virtual void request() const = 0;\n};\n\n// Real subject which does some work.\nclass RealSubject : public ISubject {\nprivate:\n    std::string data;\n\npublic:\n    RealSubject(const std::string& s) : data(s) {}\n\n    void request() const override {\n        std::cout << "RealSubject: Handling Request" << std::endl;\n        std::cout << "Data: " << data << std::endl;\n    }\n};\n\n// Proxy\nclass SubjectProxy : public ISubject {\nprivate:\n    RealSubject* real_subject;\n\npublic:\n    SubjectProxy(const std::string& s) : real_subject(nullptr), subject_str(s) {}\n\n    ~SubjectProxy() {\n        if (real_subject != nullptr) delete real_subject;\n    }\n\n    void request() const override {\n        // Lazy Initialization\n        if (!real_subject) {\n            real_subject = new RealSubject(subject_str);\n        }\n        std::cout << "SubjectProxy: Logging the time of request" << std::endl;\n        real_subject->request();\n    }\n\nprivate:\n    std::string subject_str;\n};\n\nint main() {\n    SubjectProxy proxy("Hello, Proxy!");\n    proxy.request(); // When requesting, initialization happens\n    return 0;\n}