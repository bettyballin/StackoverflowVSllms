#include <vector>\n#include <algorithm>\n\n// Original predicate\nstruct FindPredicate\n{\n    FindPredicate(const SomeType& t) : _t(t) {}\n    bool operator()(const SomeType& t) const { return t == _t; }\n\nprivate:\n    const SomeType& _t;\n};\n\n// Negated predicate\nstruct NotFindPredicate\n{\n    NotFindPredicate(const FindPredicate& pred) : _pred(pred) {}\n    bool operator()(const SomeType& t) const { return !_pred(t); }\n\nprivate:\n    FindPredicate _pred;\n};\n\nbool ContainsValue(std::vector<SomeType>& v, const SomeType& valueToFind) {\n    return std::find_if(v.begin(), v.end(), FindPredicate(valueToFind)) != v.end();\n}\n\n// Function to check if all members do not satisfy the original predicate\nbool AllDoNotSatisfy(std::vector<SomeType>& v, const SomeType& valueToCheck) {\n    return std::none_of(v.begin(), v.end(), NotFindPredicate(FindPredicate(valueToCheck)));\n}