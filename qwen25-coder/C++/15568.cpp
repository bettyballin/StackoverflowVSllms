#include <iostream>\n#include <string>\n#include <cctype>\n\nbool isDigit(char c) {\n    return std::isdigit(static_cast<unsigned char>(c));\n}\n\nbool variesInSingleNumberField(const std::string& str1, const std::string& str2) {\n    int i = 0, j = 0;\n    bool inDifferingSubstring = false;\n\n    while (i < str1.length() && j < str2.length()) {\n        if (str1[i] != str2[j]) {\n            if (!inDifferingSubstring) {\n                // Start of a new differing substring\n                if ((isDigit(str1[i])) != (isDigit(str2[j]))) {\n                    return false; // Differing non-numerical characters\n                }\n                inDifferingSubstring = true;\n            } else {\n                // Already in a differing substring\n                if (!isDigit(str1[i]) && !isDigit(str2[j])) {\n                    return false; // Non-digit diff character found\n                } else if (str1.substr(i) == str2.substr(j)) {\n                    break; // End of differing substring\n                }\n            }\n        } else {\n            if (inDifferingSubstring) {\n                inDifferingSubstring = false;\n            }\n        }\n        i++;\n        j++;\n    }\n\n    // Check if remaining characters are digits and differ\n    while (i < str1.length() && isDigit(str1[i])) {\n        i++;\n        inDifferingSubstring = true;\n    }\n    while (j < str2.length() && isDigit(str2[j])) {\n        j++;\n        inDifferingSubstring = true;\n    }\n\n    return inDifferingSubstring && i == str1.length() && j == str2.length();\n}\n\nint main() {\n    std::cout << std::boolalpha; // Print bools as true/false\n    std::cout << variesInSingleNumberField("foo7bar", "foo123bar") << '\n'; // True\n    std::cout << variesInSingleNumberField("foo7bar00", "foo123bar00") << '\n'; // True\n    std::cout << variesInSingleNumberField("foo7bar00", "foo123bar01") << '\n'; // False\n    std::cout << variesInSingleNumberField("foobar00", "foo123bar00") << '\n'; // True\n    std::cout << variesInSingleNumberField("foobar00", "foobar00") << '\n'; // False\n    return 0;\n}