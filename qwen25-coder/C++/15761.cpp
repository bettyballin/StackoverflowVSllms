#include <windows.h>\n#include <rapi2.h>\n\n// Define the function signature for the callback\nvoid CALLBACK MyRapiCallback(DWORD dwCode, DWORD dwParam)\n{\n    // Handle different return codes from CeRapiInitEx\n    switch(dwCode)\n    {\n        case RAPI_STREAM_HANDLED:\n            PostMessage(g_hWnd, WM_RAPI_CONNECTED, 0, dwParam);\n            break;\n        case RAPI_STREAM_ERROR:\n            // Handle error appropriately\n            PostMessage(g_hWnd, WM_RAPI_ERROR, 0, dwParam);\n            break;\n    }\n}\n\n// Example message handlers in a window procedure\nLRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)\n{\n    static HWND h btnCancel;\n    switch (message)\n    {\n        case WM_CREATE:\n            // Initialize RAPI asynchronously with callback\n            HRESULT hr = CeRapiInitEx(MyRapiCallback);\n            if (FAILED(hr))\n                MessageBox(hWnd, L"Failed to initialize RAPI.", L"Error", MB_ICONERROR | MB_OK);\n\n            // Create a cancel button\n            h btnCancel = CreateWindow(TEXT("button"), TEXT("Cancel"),\n                                       WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,\n                                       50, 100, 100, 24, hWnd, (HMENU)IDCANCEL,\n                                       ((LPCREATESTRUCT)lParam)->hInstance, NULL);\n            if (!hBtnCancel)\n                return -1;\n            \n            break;\n\n        case WM_COMMAND:\n            if (LOWORD(wParam) == IDCANCEL) {\n                CeRapiUninit();  // Clean up RAPI initialization\n                PostMessage(hWnd, WM_QUIT, 0, 0);  // Exit the application loop\n            }\n            break;\n\n        case WM_RAPI_CONNECTED: \n            MessageBox(hWnd, L"Device Connected!", L"Success", MB_ICONINFORMATION | MB_OK);\n            CeRapiUninit();  // Clean up RAPI initialization\n            PostMessage(hWnd, WM_QUIT, 0, 0);  // Exit the application loop\n            break;\n\n        case WM_RAPI_ERROR:\n            MessageBox(hWnd, L"Error connecting to device.", L"Error", MB_ICONERROR | MB_OK);\n            CeRapiUninit();  // Clean up RAPI initialization\n            PostMessage(hWnd, WM_QUIT, 0, 0);  // Exit the application loop\n            break;\n\n        case WM_DESTROY:\n            PostQuitMessage(0);\n            break;\n        \n        default:\n            return DefWindowProc(hWnd, message, wParam, lParam);\n    }\n    return 0;\n}\n\nint WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)\n{\n    // Register and create the window\n    const char g_szClassName[] = "myWindowClass";\n    WNDCLASSEX wc = { };\n    HWND hwnd;\n\n    wc.cbSize        = sizeof(WNDCLASSEX);\n    wc.lpfnWndProc   = WndProc;\n    wc.hInstance     = hInstance;\n    wc.lpszClassName = g_szClassName;\n\n    RegisterClassEx(&wc);\n\n    hwnd = CreateWindowEx(\n           0,                              // Optional window styles.\n           g_szClassName,                  // Window class\n           "Connecting to Device",         // Window text\n           WS_OVERLAPPEDWINDOW,            // Window style\n           CW_USEDEFAULT, CW_USEDEFAULT, 320, 240,\n           NULL,       // Parent window    \n           NULL,       // Menu\n           hInstance,  // Instance handle\n           NULL        // Additional application data\n           );\n\n    if (hwnd == NULL)\n    {\n        return 0;\n    }\n\n    ShowWindow(hwnd, nCmdShow);\n\n    // Run the message loop.\n    MSG msg = { };\n    while (GetMessage(&msg, NULL, 0, 0))\n    {\n        TranslateMessage(&msg);\n        DispatchMessage(&msg);\n    }\n    return (int) msg.wParam;\n}