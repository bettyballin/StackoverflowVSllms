#include <winsock2.h>\n#include <ws2tcpip.h>\n#include <iostream>\n#include <cassert>\n#include <cstring>  // For strlen\n\nconst char html[] = "HTTP/1.1 200 OK\r\n"\n                    "Connection: close\r\n"\n                    "Content-type: text/html\r\n"\n                    "Content-Length: 141\r\n"  // Include Content-Length header\n                    "\r\n"\n                    "<html>\r\n"\n                    "<head>\r\n"\n                    "<title>Hello, world!</title>\r\n"\n                    "</head>\r\n"\n                    "<body>\r\n"\n                    "<h1>Hello, world!</h1>\r\n"\n                    "</body>\r\n"\n                    "</html>";\n\nint main() {\n    WSADATA wsa;\n\n    if (WSAStartup(MAKEWORD(2, 2), &wsa) != 0) {\n        std::cerr << "Failed to initialize winsock." << std::endl;\n        return -1;\n    }\n\n    addrinfo *res = NULL;\n    addrinfo hints;\n\n    ZeroMemory(&hints, sizeof(hints));\n\n    hints.ai_family = AF_INET;\n    hints.ai_socktype = SOCK_STREAM;\n    hints.ai_protocol = IPPROTO_TCP;\n    hints.ai_flags = AI_PASSIVE;\n\n    if (getaddrinfo(NULL, "80", &hints, &res) != 0) {\n        std::cerr << "Failed to get addrinfo." << std::endl;\n        WSACleanup();\n        return -1;\n    }\n\n    SOCKET s = socket(res->ai_family, res->ai_socktype, res->ai_protocol);\n\n    if (s == INVALID_SOCKET) {\n        std::cerr << "Failed to create socket." << std::endl;\n        freeaddrinfo(res);\n        WSACleanup();\n        return -1;\n    }\n\n    if (bind(s, res->ai_addr, (int)res->ai_addrlen) == SOCKET_ERROR) {\n        std::cerr << "Failed to bind socket." << std::endl;\n        closesocket(s);\n        freeaddrinfo(res);\n        WSACleanup();\n        return -1;\n    }\n\n    if (listen(s, SOMAXCONN) == SOCKET_ERROR) {\n        std::cerr << "Failed to listen on socket." << std::endl;\n        closesocket(s);\n        freeaddrinfo(res);\n        WSACleanup();\n        return -1;\n    }\n\n    SOCKADDR_IN clientAddr;\n    int clientAddrSize = sizeof(clientAddr);\n\n    SOCKET client = accept(s, (SOCKADDR*)&clientAddr, &clientAddrSize);\n\n    if (client == INVALID_SOCKET) {\n        std::cerr << "Failed to accept connection." << std::endl;\n        closesocket(s);\n        freeaddrinfo(res);\n        WSACleanup();\n        return -1;\n    }\n\n    char buffer[512];\n    int bytes = recv(client, buffer, 512, 0);\n\n    if (bytes > 0) {\n        std::cout << "Received request:\n" << std::string(buffer, bytes) << "\n";\n        \n        if (send(client, html, strlen(html), 0) == SOCKET_ERROR) {\n            std::cerr << "Failed to send response." << std::endl;\n        }\n\n        \n        shutdown(client, SD_BOTH);\n    } else {\n        std::cerr << "Receive failed or connection closed by client." << std::endl;\n    }\n\n    closesocket(client);\n    freeaddrinfo(res);\n    WSACleanup();\n\n    return 0;\n}