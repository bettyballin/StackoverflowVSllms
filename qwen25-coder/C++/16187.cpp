#include <atomic>\n#include <thread>\n#include <chrono>\n\nstd::atomic<bool> quitted(false), paused(false);\nstd::atomic<bool> should_quit(false), should_pause(false);\n\nvoid downloader_thread() {\n    quitted = false;\n    while(!should_quit.load()) {\n        fill_buffer(bfr);\n        if(should_pause.load()) {\n            paused.store(true);\n            while(should_pause.load()) std::this_thread::sleep_for(std::chrono::milliseconds(50));\n            paused.store(false);\n        }\n    }\n    quitted = true;\n}\n\nvoid ui_thread() {\n    // new Thread(downloader_thread).start();\n    // ...\n    should_pause.store(true);\n    while(!paused.load()) std::this_thread::sleep_for(std::chrono::milliseconds(50));\n    // resize buffer or something else non-thread-safe\n    should_pause.store(false);\n}