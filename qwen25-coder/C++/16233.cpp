#include <vector>\nusing namespace std;\n\nvoid stableInPlacePartition(vector<string>& arr, int pos) {\n    vector<int> count(5, 0); // Assuming 'A', 'C', 'G', 'T' plus offset for index\n\n    // Count occurrences of each character at position pos\n    for (const auto& str : arr) {\n        switch (str[pos]) {\n            case 'A': count[0]++; break;\n            case 'C': count[1]++; break;\n            case 'G': count[2]++; break;\n            case 'T': count[3]++; break;\n        }\n    }\n\n    // Convert counts to indices\n    for (int i = 1; i < count.size(); ++i) {\n        count[i] += count[i - 1];\n    }\n\n    // Place elements in correct position within the original array\n    int n = arr.size();\n    for (int i = n - 1; i >= 0; --i) {\n        char keyChar = arr[i][pos];\n        int index;\n        switch (keyChar) {\n            case 'A': index = count[0] - 1; count[0]--; break;\n            case 'C': index = count[1] - 1; count[1]--; break;\n            case 'G': index = count[2] - 1; count[2]--; break;\n            case 'T': index = count[3] - 1; count[3]--; break;\n        }\n        while (i != index) {\n            swap(arr[i], arr[index]);\n            string& swappedString = arr[index];\n            switch (swappedString[pos]) {\n                case 'A': index = --count[0]; break;\n                case 'C': index = --count[1]; break;\n                case 'G': index = --count[2]; break;\n                case 'T': index = --count[3]; break;\n            }\n        }\n    }\n}\n\nvoid inPlaceRadixSort(vector<string>& arr, int pos) {\n    if (pos < 0) return;\n    // Partition elements based on the character at current position\n    stableInPlacePartition(arr, pos);\n    // Recursively sort for the next significant digit\n    inPlaceRadixSort(arr, pos - 1);\n}\n\n// Usage example:\nint main() {\n    vector<string> dnaSequences = {"AAC", "ATG", "CCA", "TAA"};\n    int maxStringLength = 3; // Assuming all strings are of equal length\n    inPlaceRadixSort(dnaSequences, maxStringLength - 1);\n    for (const auto& seq : dnaSequences) {\n        cout << seq << endl;\n    }\n}