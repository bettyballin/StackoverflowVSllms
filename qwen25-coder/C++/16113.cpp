class Base {\npublic:\n    virtual ~Base() = default;\n\n    // Define the function with a default implementation\n    virtual void myFunction() {\n        // Common functionality here\n        std::cout << "Base class function" << std::endl;\n        \n        // Call the next level in hierarchy, if needed\n        doMyFunction();\n    }\n\nprotected:\n    // Use this to enforce overriding in derived classes\n    virtual void doMyFunction() = 0;\n};\n\nclass Derived : public Base {\nprivate:\n    int extraVar1;\n    double extraVar2;\n\npublic:\n    Derived(int v1, double v2) : extraVar1(v1), extraVar2(v2) {}\n\nprotected:\n    // Override the function to include derived-specific logic\n    void doMyFunction() override {\n        // Use extra variables here\n        std::cout << "Derived class function: " << extraVar1 << ", " << extraVar2 << std::endl;\n        \n        // Call base functionality if needed\n        Base::myFunction();\n    }\n};