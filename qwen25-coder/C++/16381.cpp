#include <iostream>\n#include <vector>\n#include <queue>\n\nusing namespace std;\n\n// Define pixel coordinates structure\nstruct Pixel {\n    int x, y;\n};\n\n// Function to perform flood fill and count connected components\nint floodFill(int startX, int startY, vector<vector<int>>& image, int targetColor) {\n    if (image[startY][startX] != targetColor || startX < 0 || startY < 0) return 0;\n\n    queue<Pixel> q;\n    Pixel start = {startX, startY};\n    q.push(start);\n\n    const int rowN[] = {-1, 0, 0, 1}; // Row numbers (for 4 directions)\n    const int colN[] = {0, -1, 1, 0}; // Column numbers (for 4 directions)\n\n    image[startY][startX] = -1; // Mark the current cell as visited\n    int count = 1;\n\n    while (!q.empty()) {\n        Pixel p = q.front();\n        q.pop();\n\n        for (int d = 0; d < 4; ++d) { // Check all adjacent cells\n            int newX = p.x + colN[d];\n            int newY = p.y + rowN[d];\n\n            if (newX >= 0 && newX < image[0].size() && newY >= 0 && newY < image.size()) {\n                if (image[newY][newX] == targetColor) {\n                    Pixel newPixel = {newX, newY};\n                    q.push(newPixel);\n                    image[newY][newX] = -1; // Mark as visited\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}\n\n// Example usage\nint main() {\n    vector<vector<int>> image = {\n        {0, 255, 255, 0, 0},\n        {0, 255, 255, 0, 0},\n        {0, 0, 0, 255, 255},\n        {0, 0, 0, 255, 255}\n    };\n\n    int targetColor = 255; // Assuming the color of characters is 255\n    vector<vector<int>> visited(image.size(), vector<int>(image[0].size(), 0));\n\n    vector<int> componentSizes;\n\n    for (int i = 0; i < image.size(); ++i) {\n        for (int j = 0; j < image[i].size(); ++j) {\n            if (image[i][j] == targetColor) {\n                int size = floodFill(j, i, image, targetColor);\n                componentSizes.push_back(size);\n            }\n        }\n    }\n\n    cout << "Number of characters found: " << componentSizes.size() << endl;\n    for (int i = 0; i < componentSizes.size(); ++i) {\n        cout << "Size of character " << i + 1 << ": " << componentSizes[i] << endl;\n    }\n\n    return 0;\n}