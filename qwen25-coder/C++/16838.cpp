void Library::addBook(Book newBook)\n{\n    fstream dataFile;\n    // Ensure the file is opened in binary mode and created if it does not exist.\n    dataFile.open("BookData.dat", ios::in | ios::out | ios::binary);\n    if (!dataFile)\n    {\n        cerr << "File could not be opened or created" << endl;\n        return; // Return early if the file cannot be opened\n    }\n\n    int hashResult = newBook.getId() % 4 + 1; // The result of the hash function\n\n    // Find the right place to place the new book\n    dataFile.seekp((hashResult - 1) * sizeof(Book), ios::beg);\n\n    Book readBook;\n    dataFile.read(reinterpret_cast<char*>(&readBook), sizeof(Book));\n\n    // Initialize readBook if the file is empty or not properly initialized\n    if (dataFile.eof()) {\n        memset(&readBook, -1, sizeof(Book)); // Set all fields of readBook to -1\n        dataFile.clear(); // Clear eof flag\n    }\n\n    // The record doesnt exist or it has been deleted\n    if (readBook.getId() == -1 || readBook.getIdPtr() == -1)\n    {\n        // The record doesn't exist, write the new book at this location\n        dataFile.seekp((hashResult - 1) * sizeof(Book));\n        dataFile.write(reinterpret_cast<char*>(&newBook), sizeof(Book));\n\n        if (dataFile.fail()) {\n            cerr << "Failed to write to file" << endl;\n        }\n\n    }\n    // The record has been deleted or there is already such record with such hash function\n    // so we need to follow the pointer to the overflow file\n    else\n    {\n        newBook.setIsBookInData(false); // New book is in overflow file\n        overflowFile.seekg((readBook.getIdPtr() - 1) * sizeof(Book));\n        overflowFile.read(reinterpret_cast<char*>(&readBook), sizeof(Book));\n\n        // Follow the chain\n        while (readBook.getIdPtr() != -1)\n        {\n            overflowFile.seekg((readBook.getIdPtr() - 1) * sizeof(Book));\n            overflowFile.read(reinterpret_cast<char*>(&readBook), sizeof(Book));\n        }\n\n        readBook.setIdPtr(header); // Make the pointer to point to the new book\n        overflowFile.seekp((header - 1) * sizeof(Book));\n        overflowFile.write(reinterpret_cast<char*>(&newBook), sizeof(Book));\n        header++;\n    }\n\n    dataFile.close();\n}