#include <matheval.h>\n#include <vector>\n#include <string>\n#include <cstring>\n\n// Function to convert std::vector<std::string> to char**\nchar** vector_to_char_array(const std::vector<std::string>& vec) {\n    char** arr = new char*[vec.size()];\n    for (size_t i = 0; i < vec.size(); ++i) {\n        arr[i] = new char[vec[i].size() + 1];\n        std::strcpy(arr[i], vec[i].c_str());\n    }\n    return arr;\n}\n\n// Function to clean up the allocated memory\nvoid free_char_array(char** arr, size_t size) {\n    for (size_t i = 0; i < size; ++i) {\n        delete[] arr[i];\n    }\n    delete[] arr;\n}\n\nint main() {\n    std::vector<std::string> names = {"x", "y", "z"};\n    std::vector<double> values = {1.0, 2.0, 3.0};\n\n    char** c_names = vector_to_char_array(names);\n    double* c_values = values.data();\n\n    // Assume evaluator is already created\n    void *evaluator = evaluator_create("x + y * z");\n\n    // Evaluate the expression with the provided names and values\n    char* result = evaluator_evaluate(evaluator, names.size(), c_names, c_values);\n\n    std::cout << "Result: " << result << std::endl;\n\n    // Clean up\n    free_char_array(c_names, names.size());\n    evaluator_destroy(evaluator);\n    evaluator_free(result);\n\n    return 0;\n}