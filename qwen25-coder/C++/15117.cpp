#include <comdef.h>\n#include <objbase.h>\n#include <iostream>\n#include <string>\n\n// Global to store last attempted UUID\nGUID gLastCreateAttemptUuid;\n\ntemplate<typename T>\nclass SafeComObject {\npublic:\n    SafeComObject(const CLSID& clsid) : ptr(nullptr) {\n        try {\n            gLastCreateAttemptUuid = clsid;\n            HRESULT hr = CoCreateInstance(clsid, NULL, CLSCTX_ALL, __uuidof(T), (LPVOID*)&ptr);\n            if (FAILED(hr)) {\n                throw _com_error(hr);\n            }\n        } catch (_com_error &e) {\n            std::cout << "Failed to create instance for UUID: " \n                      << std::string(reinterpret_cast<const char*>(gLastCreateAttemptUuid.Data1)) << std::endl;\n            // Optionally log the error e.ErrorMessage()\n            throw;\n        }\n    }\n\n    ~SafeComObject() {\n        if (ptr) ptr->Release();\n    }\n\n    T* operator -> () const {\n        return ptr;\n    }\n\nprivate:\n    T* ptr;\n};\n\nint main() {\n    CoInitialize(NULL);\n\n    try {\n        SafeComObject<ISomeObject> pObj(__uuidof(SomeClass));\n        // Further operations...\n    } catch (_com_error &e) {\n        std::cerr << "COM Error: " << e.ErrorMessage() << std::endl;\n    }\n\n    CoUninitialize();\n}