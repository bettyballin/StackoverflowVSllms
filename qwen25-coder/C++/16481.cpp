#include <windows.h>\n#include <psapi.h>\n#include <iostream>\n\nvoid PrintResourceUsage(HANDLE hProcess);\nvoid MonitorChildProcess(LPCSTR processName);\n\nint main() {\n    LPCSTR processName = "notepad.exe"; // Example process\n    MonitorChildProcess(processName);\n    return 0;\n}\n\nvoid PrintResourceUsage(HANDLE hProcess) {\n    PROCESS_MEMORY_COUNTERS pmc;\n    FILETIME creationTime, exitTime, kernelTime, userTime;\n\n    if (GetProcessMemoryInfo(hProcess, &pmc, sizeof(pmc))) {\n        std::cout << "Working Set Size: " << pmc.WorkingSetSize / 1024.0 << " KB\n";\n        std::cout << "Virtual Memory Size: " << pmc.PrivateUsage / 1024.0 << " KB\n";\n    }\n\n    if (GetProcessTimes(hProcess, &creationTime, &exitTime, &kernelTime, &userTime)) {\n        DWORDLONG kernelTimeMS = ((DWORDLONG)kernelTime.dwHighDateTime << 32) + kernelTime.dwLowDateTime / 10000;\n        DWORDLONG userTimeMS = ((DWORDLONG)userTime.dwHighDateTime << 32) + userTime.dwLowDateTime / 10000;\n\n        std::cout << "Kernel Time: " << kernelTimeMS / 10.0 << " ms\n";\n        std::cout << "User Time: " << userTimeMS / 10.0 << " ms\n";\n    }\n}\n\nvoid MonitorChildProcess(LPCSTR processName) {\n    STARTUPINFO si;\n    PROCESS_INFORMATION pi;\n\n    ZeroMemory(&si, sizeof(si));\n    si.cb = sizeof(si);\n    ZeroMemory(&pi, sizeof(pi));\n\n    // Start the child process.\n    if (!CreateProcess(NULL,   // No module name (use command line)\n                       const_cast<LPSTR>(processName),        // Command line\n                       NULL,           // Process handle not inheritable\n                       NULL,           // Thread handle not inheritable\n                       FALSE,          // Set handle inheritance to FALSE\n                       0,              // No creation flags\n                       NULL,           // Use parent's environment block\n                       NULL,           // Use parent's starting directory \n                       &si,            // Pointer to STARTUPINFO structure\n                       &pi)            // Pointer to PROCESS_INFORMATION structure)\n    ) {\n        std::cerr << "CreateProcess failed (" << GetLastError() << ").\n";\n        return;\n    }\n\n    // Wait until child process exits.\n    WaitForSingleObject(pi.hProcess, INFINITE);\n\n    DWORD exitCode = 0;\n    if (GetExitCodeProcess(pi.hProcess, &exitCode)) {\n        std::cout << "Child Process Exited with code: " << exitCode << "\n";\n    }\n\n    // Print resource usage\n    PrintResourceUsage(pi.hProcess);\n\n    // Close process and thread handles. \n    CloseHandle(pi.hThread);\n    CloseHandle(pi.hProcess);\n}