// Define a new syntax for allocating objects or arrays in a custom allocator\ntemplate<typename T>\nclass arena_allocator {\n    // Allocator implementation details...\n};\n\narena_allocator<obj> a;\nobj* p = a.new_obj();  // Allocates and constructs a single obj\nobj* arr = a.new_array(10);  // Allocates an array of 10 objs, calling constructors\n\n// Under the hood:\n//\n// template<typename T>\n// T* arena_allocator<T>::new_obj() {\n//     void* mem = allocate(sizeof(T));\n//     return new(mem) T();\n// }\n//\n// template<typename T>\n// T* arena_allocator<T>::new_array(size_t count) {\n//     void* mem = allocate(count * sizeof(T));\n//     T* arr = static_cast<T*>(mem);\n//     for (size_t i = 0; i < count; ++i, ++arr)\n//         new(arr) T();\n//     return static_cast<T*>(mem);\n// }