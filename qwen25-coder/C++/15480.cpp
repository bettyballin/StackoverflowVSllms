#include <gtkmm.h>\n#include <iostream>\n\ngint get_treeview_header_height(Gtk::TreeView& tree_view) {\n    int header_height = 0;\n    \n    Gtk::TreeModel::iterator iter;\n    Glib::RefPtr<Gtk::TreeModel> ref_model = tree_view.get_model();\n    \n    // Check if there are columns and a valid model\n    if (ref_model && !tree_view.get_columns().empty()) {\n        // Iterate through each column header to sum their heights\n        for (auto& column : tree_view.get_columns()) {\n            Gtk::CellRenderer* renderer = column->get_cell_renderers()[0];\n            Gtk::CellArea* area = dynamic_cast<Gtk::CellArea*>(renderer);\n            if (!area) {\n                Gtk::Widget& header_widget = column->get_widget();\n                Gdk::Rectangle allocation;\n                header_widget.get_allocation(allocation);\n                header_height += allocation.get_height();\n            }\n        }\n        \n        // Adjust based on GTK's internal spacing (this is a bit of a guess and may need tuning)\n        Gtk::TreeLevelPacker* level_packer = dynamic_cast<Gtk::TreeLevelPacker*>(tree_view.get_level_packer());\n        if (level_packer) {\n            header_height += level_packer->get_spacing();\n        }\n    }\n\n    return header_height;\n}\n\nint main(int argc, char *argv[]) {\n	auto app = Gtk::Application::create(argc, argv, "org.gtkmm.example");\n\n	Gtk::Window window;\n	Gtk::ScrolledWindow scrolled_window;\n	Gtk::ListViewText tree_view;\n\n	scrolled_window.add(tree_view);\n	window.set_child(scrolled_window);\n\n	// Adding a sample column to the TreeView for demonstration\n	auto column = Gtk::make_managed<Gtk::TreeViewColumn>("Sample Column", Gtk::CellRendererText(), 0);\n	tree_view.append_column(*column);\n\n	// Show window with TreeView and get header height\n	window.show_all();\n	gint header_height = get_treeview_header_height(tree_view);\n	std::cout << "Header Height: " << header_height << std::endl;\n\n	return app->run(window);\n}