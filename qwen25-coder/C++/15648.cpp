#include <stdio.h>\n#include <stdarg.h>\n\n// Attribute applied correctly: first parameter is the format string, no fixed arguments after va_list.\nvoid MyPrintf(char const* format, va_list args) __attribute__((format(printf, 1, 0)));\nvoid MyPrintf(char const* format, va_list args)\n{\n    vprintf(format, args);\n}\n\n// Attribute applied correctly: first parameter is the format string, second parameter starts variable arguments.\nvoid MyVariadicPrintf(char const* format, ...) __attribute__((format(printf, 1, 2)));\nvoid MyVariadicPrintf(char const* format, ...)\n{\n    va_list args;\n    va_start(args, format);\n    MyPrintf(format, args);\n    va_end(args);\n}\n\nint main(int argc, char *argv[])\n{\n    // This will produce the 'too few arguments for format' warning.\n    MyVariadicPrintf("%s" /* missing second argument */);\n\n    return 0;\n}\n\n// Template version won't work with GCC's __attribute__((format(...)))\ntemplate<typename Type>\nvoid MyVariadicPrintfT(Type const* format, ...)\n{\n    va_list args;\n    va_start(args, format);\n    vprintf(format, args); // You'd use vprintf directly or similar.\n    va_end(args);\n}