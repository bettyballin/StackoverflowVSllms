#include <vector>\n#include <cmath>\n\nstd::vector<int16_t> mixSFX(const std::vector<int16_t>& sound1, const std::vector<int16_t>& sound2) {\n    size_t length = std::min(sound1.size(), sound2.size());\n    std::vector<int16_t> mixedSound(length);\n\n    for (size_t i = 0; i < length; ++i) {\n        int32_t mixSample = static_cast<int32_t>(sound1[i] * 0.5f) + static_cast<int32_t>(sound2[i] * 0.5f);\n        \n        // Clipping to prevent overflow\n        if (mixSample > std::numeric_limits<int16_t>::max()) {\n            mixSample = std::numeric_limits<int16_t>::max();\n        } else if (mixSample < std::numeric_limits<int16_t>::min()) {\n            mixSample = std::numeric_limits<int16_t>::min();\n        }\n        \n        mixedSound[i] = static_cast<int16_t>(mixSample);\n    }\n\n    return mixedSound;\n}