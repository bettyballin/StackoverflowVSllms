#include <iostream>\nusing namespace std;\n\n// Brute Force: Finds the largest prime factor of a number (inefficient for large numbers)\nbool isPrime(long long n) {\n    if (n <= 1) return false;\n    for (long long i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nlong long largestPrimeBruteForce(long long number) {\n    long long maxPrime = -1;\n    while (number % 2 == 0) {\n        maxPrime = 2;\n        number /= 2;\n    }\n    for (long long i = 3; i <= number; i += 2) {\n        if (isPrime(i) && number % i == 0) {\n            maxPrime = i;\n            while (number % i == 0) {\n                number /= i;\n            }\n        }\n    }\n    return (number > 2) ? number : maxPrime;\n}\n\n// Optimized: Finds the largest prime factor of a number more efficiently\nlong long largestPrimeOptimized(long long number) {\n    long long maxPrime = -1;\n    while (number % 2 == 0) {\n        maxPrime = 2;\n        number /= 2;\n    }\n    for (long long i = 3; i * i <= number; i += 2) {\n        while (number % i == 0) {\n            maxPrime = i;\n            number /= i;\n        }\n    }\n    return (number > 2) ? number : maxPrime;\n}\n\nint main() {\n    long long number = 600851475143; // Example large number\n    cout << "Largest Prime Factor (Brute Force): " << largestPrimeBruteForce(number) << endl;\n    cout << "Largest Prime Factor (Optimized): " << largestPrimeOptimized(number) << endl;\n}