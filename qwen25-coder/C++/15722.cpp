#include <vector>\n#include <string>\n#include <memory> // for std::unique_ptr\n\nvoid LoadRecordsetIntoStream(_RecordsetPtr& pRs, std::string& ostrm)\n{\n    ADODB::_FieldPtr spField;\n    char buf[80];\n    ::SYSTEMTIME sysTime;\n    _variant_t var;\n    std::vector<std::string> rowStrings; // Temporarily store row data as strings\n    size_t totalLength = 0;\n\n    auto AppendToString = [&ostrm, &totalLength](const char* str) {\n        totalLength += strlen(str);\n        ostrm.append(str); // Efficiently append to final string\n    };\n\n    int nColumns = pRs->Fields->GetCount();\n\n    while (!pRs->EndOfFile)\n    {\n        for (long i = 0L; i < nColumns; ++i)  \n        {\n            spField = pRs->Fields->GetItem(i);\n            var = spField->GetValue(); // Minimize COM call frequency\n\n            switch (V_VT(&var)) \n            {\n                case VT_BSTR:\n                    AppendToString((const char*) (_bstr_t) var);   \n                    break;\n                case VT_I4:\n                case VT_UI1:\n                case VT_I2:\n                case VT_BOOL:\n                    append_itoa(((int)var), buf);\n                    AppendToString(buf);\n                    break;\n                case VT_DATE:\n                    ::VariantTimeToSystemTime(var, &sysTime);\n                    _snprintf_s(buf, sizeof(buf), _TRUNCATE, "%04d-%02d-%02d %02d:%02d:%02d",\n                                sysTime.wYear, sysTime.wMonth, sysTime.wDay,\n                                sysTime.wHour, sysTime.wMinute, sysTime.wSecond);\n                    AppendToString(buf);\n                    break;\n                // Handle other types as necessary\n            }\n        }\n\n        pRs->MoveNext(); // After processing all fields in a row, move to the next one\n    }\n\n    ostrm.reserve(totalLength); // Optionally reserve memory if totalLength is accurate (or overestimate)\n}\n\n// Custom itoa implementation might be faster than C's standard library function\nvoid append_itoa(int value, char* buffer) {\n    int n = abs(value), i = 0;\n    do { buffer[i++] = '0' + (n % 10); } while ((n /= 10) > 0);\n    if (value < 0) buffer[i++] = '-';\n    buffer[i] = '\0';\n    std::reverse(buffer, buffer + i); // Reverse string to correct order\n}