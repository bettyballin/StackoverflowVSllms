#include <iostream>\n#include <sys/types.h>\n#include <unistd.h>\n#include <signal.h>\n#include <stdio.h>\n\nint id_process;\n\nvoid manager_signal (int signum) {\n    kill (id_process, SIGKILL);\n    kill (getppid(),SIGKILL);\n}\n\nint main () {\n    id_process = fork ();\n    if (id_process == -1) {\n        perror("ERROR to create the fork");\n        return 1;\n    } else {\n        if ( id_process != 0 ) { // Parent process\n            printf("Father's ID is %d \n", getpid());   \n            alarm(5);\n            signal(SIGALRM, manager_signal); // Make sure to include int signum in signal handler function\n            pause(); // Parent will wait for the signal rather than sleeping\n        } else { // Child process\n            printf ("Children's ID is %d \n", getpid());\n            while (1) {\n                printf("Children RUN FOREVER ^^ ");\n                sleep(2);\n            }\n        }\n    }\n    return 0;\n}