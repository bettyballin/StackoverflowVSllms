#include <iostream>\n\nclass Base {\nprotected: // Make constructor protected to allow derivation but prevent instantiation\n    Base() {}\npublic:\n    virtual ~Base() {} // Virtual destructor is important for base classes\n\n    virtual bool Test() = 0;\n};\n\nclass A : public Base {\npublic:\n    bool Test() override {\n        std::cout << "A::Test()" << std::endl;\n        return true;\n    }\n};\n\nclass B : public Base {\npublic:\n    bool Test() override {\n        std::cout << "B::Test()" << std::endl;\n        return false;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    const int maxSize = 10;\n    Base* bases[maxSize]; // Array of pointers to Base\n    int size = 0;\n\n    bases[size++] = new A();\n    bases[size++] = new B();\n\n    for (int i = 0; i < size; i++) {\n        if (bases[i]->Test()) {\n            std::cout << "Test passed." << std::endl;\n        } else {\n            std::cout << "Test failed." << std::endl;\n        }\n    }\n\n    // Clean up memory\n    for (int i = 0; i < size; i++) {\n        delete bases[i];\n    }\n\n    return 0;\n}