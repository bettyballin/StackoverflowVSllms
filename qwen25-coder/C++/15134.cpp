#include <windows.h>\n#include <iostream>\n\nvoid runProcessSilently(const std::string& appPath, const std::string& logFile) {\n    HANDLE hRedirect = CreateFile(logFile.c_str(), GENERIC_WRITE, FILE_SHARE_READ, NULL,\n                                  CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);\n\n    if (hRedirect == INVALID_HANDLE_VALUE) {\n        std::cerr << "Failed to create output file.";\n        return;\n    }\n\n    STARTUPINFO siStartInfo;\n    PROCESS_INFORMATION piProcInfo;\n\n    ZeroMemory(&piProcInfo, sizeof(PROCESS_INFORMATION));\n    ZeroMemory(&siStartInfo, sizeof(STARTUPINFO));\n    siStartInfo.cb = sizeof(STARTUPINFO);\n    siStartInfo.dwFlags |= STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;\n    siStartInfo.wShowWindow = SW_HIDE;  // don't show the console window\n    siStartInfo.hStdOutput = hRedirect;\n    siStartInfo.hStdError = hRedirect;\n\n    BOOL bSuccess = CreateProcess(\n        NULL, // No module name (use command line)\n        const_cast<LPSTR>(appPath.c_str()), // Command line\n        NULL,                                // Process handle not inheritable\n        NULL,                                // Thread handle not inheritable\n        TRUE,                                // Set handle inheritance to TRUE\n        DETACHED_PROCESS,                    // Creation flags: run detached and hidden\n        NULL,                                // Use parent's environment block\n        NULL,                                // Use parent's starting directory \n        &siStartInfo,                        // Pointer to STARTUPINFO structure\n        &piProcInfo                          // Pointer to PROCESS_INFORMATION structure\n    );\n\n    if (!bSuccess) {\n        std::cerr << "Failed to start process.";\n        CloseHandle(hRedirect);\n        return;\n    }\n\n    WaitForSingleObject(piProcInfo.hProcess, INFINITE);  // Wait until child process exits.\n\n    CloseHandle(piProcInfo.hProcess);\n    CloseHandle(piProcInfo.hThread);\n    CloseHandle(hRedirect);\n}\n\nint main() {\n    runProcessSilently("path/to/console_app.exe", "output.log");\n}