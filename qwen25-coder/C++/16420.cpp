#include <iostream>\n\nclass Bitmask {\nprivate:\n    unsigned int high; // Bits 32-63\n    unsigned int low;  // Bits 0-31\n\npublic:\n    void setBit(int bit) {\n        if (bit >= 0 && bit < 32) {\n            low |= (1U << bit);\n        } else if (bit >= 32 && bit < 64) {\n            high |= (1U << (bit - 32));\n        }\n    }\n\n    bool getBit(int bit) {\n        if (bit >= 0 && bit < 32) {\n            return low & (1U << bit);\n        } else if (bit >= 32 && bit < 64) {\n            return high & (1U << (bit - 32));\n        }\n        return false;\n    }\n\n    void clearBit(int bit) {\n        if (bit >= 0 && bit < 32) {\n            low &= ~(1U << bit);\n        } else if (bit >= 32 && bit < 64) {\n            high &= ~(1U << (bit - 32));\n        }\n    }\n};\n\nint main() {\n    Bitmask mask;\n    mask.setBit(5);\n    mask.setBit(37);\n    std::cout << "Bit 5 is: " << mask.getBit(5) << "\n";\n    std::cout << "Bit 37 is: " << mask.getBit(37) << "\n";\n    std::cout << "Bit 10 is: " << mask.getBit(10) << "\n"; // Not set\n    return 0;\n}