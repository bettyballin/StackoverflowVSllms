#include <iostream>\n#include <windows.h>\n\nvoid GetProcessCreateTime() {\n    // Take a snapshot of all processes\n    HANDLE hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n    if (hSnap == INVALID_HANDLE_VALUE) {\n        std::cerr << "Failed to create snapshot." << std::endl;\n        return;\n    }\n\n    PROCESSENTRY32 pe;\n    pe.dwSize = sizeof(PROCESSENTRY32);\n\n    // Loop through all processes to find our own\n    if (Process32First(hSnap, &pe)) {\n        do {\n            if (pe.th32ProcessID == GetCurrentProcessId()) {\n                HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, pe.th32ProcessID);\n                if (hProcess) {\n                    FILETIME creationTime, exitTime, kernelTime, userTime;\n                    if (GetProcessTimes(hProcess, &creationTime, &exitTime, &kernelTime, &userTime)) {\n                        SYSTEMTIME stCreation;\n                        FileTimeToSystemTime(&creationTime, &stCreation);\n                        std::cout << "Process creation time: "\n                                  << stCreation.wYear << "-" << stCreation.wMonth << "-" << stCreation.wDay\n                                  << " " << stCreation.wHour << ":" << stCreation.wMinute << ":" << stCreation.wSecond << std::endl;\n                    } else {\n                        std::cerr << "Failed to get process times." << std::endl;\n                    }\n                    CloseHandle(hProcess);\n                }\n                break; // No need to continue if we found our process\n            }\n        } while (Process32Next(hSnap, &pe));\n    }\n\n    CloseHandle(hSnap);\n}\n\nint main() {\n    GetProcessCreateTime();\n    return 0;\n}