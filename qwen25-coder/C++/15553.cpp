#include <windows.h>\n#include <iphlpapi.h>\n#include <iostream>\n\n#pragma comment(lib, "iphlpapi.lib")\n\nvoid GetMacAddress()\n{\n    ULONG outBufLen = 0;\n    if (GetAdaptersAddresses(AF_UNSPEC, GAA_FLAG_INCLUDE_PREFIX, NULL, NULL, &outBufLen) == ERROR_BUFFER_OVERFLOW)\n    {\n        PIP_ADAPTER_ADDRESSES pAddresses = (PIP_ADAPTER_ADDRESSES)malloc(outBufLen);\n        if (pAddresses != NULL)\n        {\n            DWORD dwRetVal = GetAdaptersAddresses(AF_UNSPEC, GAA_FLAG_INCLUDE_PREFIX, NULL, pAddresses, &outBufLen);\n            if (dwRetVal == NO_ERROR)\n            {\n                PIP_ADAPTER_ADDRESSES currentAddress = pAddresses;\n                while (currentAddress)\n                {\n                    PIP_ADAPTER_UNICAST_ADDRESS unicastAddr = currentAddress->FirstUnicastAddress;\n                    while (unicastAddr)\n                    {\n                        if (currentAddress->PhysicalAddressLength != 0)\n                        {\n                            std::cout << "MAC Address: ";\n                            for (DWORD i = 0; i < currentAddress->PhysicalAddressLength; i++)\n                            {\n                                printf("%.2X", (int)currentAddress->PhysicalAddress[i]);\n                                if (i < (currentAddress->PhysicalAddressLength - 1))\n                                    printf("-");\n                            }\n                            std::cout << std::endl;\n                        }\n                        unicastAddr = unicastAddr->Next;\n                    }\n                    currentAddress = currentAddress->Next;\n                }\n            }\n            free(pAddresses);\n        }\n    }\n}\n\nint main()\n{\n    GetMacAddress();\n    return 0;\n}