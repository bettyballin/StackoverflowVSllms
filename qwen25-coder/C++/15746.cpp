#include <gumbo.h>\n#include <string>\n#include <iostream>\n\nstd::string escapeHTML(const std::string& input) {\n    std::string output;\n    for (char c : input) {\n        switch (c) {\n            case '&': output.append("&amp;"); break;\n            case '<': output.append("&lt;");  break;\n            case '>': output.append("&gt;");  break;\n            case '"': output.append("&quot;");break;\n            case '\'': output.append("&#39;"); break;\n            default: output.push_back(c);\n        }\n    }\n    return output;\n}\n\nvoid sanitizeGumboNode(GumboNode* node) {\n    if (node->type != GUMBO_NODE_ELEMENT)\n        return;\n\n    GumboElement* element = &node->v.element;\n    GumboVector* children = &element->children;\n\n    // Remove elements like <script>, <style>, etc.\n    bool removeThisElement = false;\n    const std::string tagName(gumbo_normalized_tagname(element->tag));\n    if (tagName == "script" || tagName == "style") {\n        removeThisElement = true;\n    }\n\n    for (unsigned int i = 0; i < children->length;) {\n        GumboNode* childNode = static_cast<GumboNode*>(children->data[i]);\n        sanitizeGumboNode(childNode);\n        if (childNode->type == GUMBO_NODE_TEXT) {  \n            // Escape text content\n            GumboText* textNode = &childNode->v.text;\n            std::string escapedText = escapeHTML(std::string(textNode->original_text.data, textNode->original_text.length));\n            \n            GumboBox* box = gumbo_box_create(0);\n            box->type = GUMBO_STRING;\n            box->v.string = strdup(escapedText.c_str());\n            strcpy(childNode->v.text.original_text.data, escapedText.c_str());\n        }\n        i++;\n    }\n\n    if (removeThisElement) {\n        gumbo_destroy_node(node);\n        children->length--;\n    }\n}\n\nstd::string sanitizeHTML(const std::string& inputHTML) {\n    GumboOutput* output = gumbo_parse(inputHTML.c_str());\n\n    // Walk the document and sanitize each node.\n    for (unsigned int i = 0; i < output->root->v.element.children.length; ++i)\n        sanitizeGumboNode(static_cast<GumboNode*>(output->root->v.element.children.data[i]));\n\n    std::string ret(output->root->original_text.data, output->root->original_text.length);\n    gumbo_destroy_output(&kGumboDefaultOptions, output);\n    return ret;\n}\n\nint main() {\n    std::string htmlInput = "<html><body><script>alert('XSS');</script><p>Hello <b>World</b></p></body></html>";\n    std::string sanitizedHTML = sanitizeHTML(htmlInput);\n    \n    std::cout << "Sanitized HTML: " << sanitizedHTML << std::endl;\n    return 0;\n}