#include <boost/graph/adjacency_list.hpp>\n#include <boost/graph/dijkstra_shortest_paths.hpp>\n#include <iostream>\n\nint main() {\n    using namespace boost;\n\n    typedef adjacency_list<vecS, vecS, directedS,\n                           no_property, property<edge_weight_t, int>> Graph;\n    typedef graph_traits<Graph>::vertex_descriptor VertexDescriptor;\n\n    // Create a simple example graph\n    enum { A, B, C, D, E, F, G, N };\n    char name[] = "ABCDEFG";\n    const int num_vertices = N;\n    int weights[] = { 10, 50, 30, 10, 10, 40, 20, 60, 10, 70,\n                      20, 50, 60, 20, 90, 10 };\n\n    Graph g;\n    for (int i = 0; i < num_vertices; ++i)\n        add_vertex(g);\n\n    // Add weighted edges\n    add_edge(A, B, weights[0], g);\n    add_edge(A, E, weights[1], g);\n    add_edge(B, C, weights[2], g);\n    add_edge(C, D, weights[3], g);\n    add_edge(D, A, weights[4], g);\n    add_edge(E, F, weights[5], g);\n    add_edge(F, G, weights[6], g);\n    add_edge(G, A, weights[7], g);\n    add_edge(A, C, weights[8], g);\n    add_edge(C, E, weights[9], g);\n    add_edge(E, D, weights[10], g);\n    add_edge(D, G, weights[11], g);\n    add_edge(G, B, weights[12], g);\n    add_edge(B, F, weights[13], g);\n    add_edge(F, E, weights[14], g);\n    add_edge(E, C, weights[15], g);\n\n    std::vector<VertexDescriptor> p(num_vertices); // store parents\n    std::vector<int> d(num_vertices); // store distances\n\n    dijkstra_shortest_paths(g, A,\n                            predecessor_map(&p[0]).\n                                distance_map(&d[0]));\n\n    for (std::size_t i = 0; i != num_vertices; ++i)\n        std::cout << "distance(" << name[A] << ", "\n                  << name[i] << ") = " << d[i] << ", "\n                  << "path = { ";\n\n    // Print paths\n    for(int target = 0; target < num_vertices; target++) {\n        int v = target;\n        std::cout << name[target];\n        while (p[v] != v) {\n            v = p[v];\n            std::cout << ", " << name[v];\n        }\n        std::cout << "} \n";\n    }\n\n    return 0;\n}