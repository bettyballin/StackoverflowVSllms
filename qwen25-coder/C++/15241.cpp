#include <windows.h>\n#include <iostream>\n\nint main() {\n    // Create a new job object.\n    HANDLE hJob = CreateJobObject(NULL, NULL);\n    if (hJob == NULL) {\n        std::cerr << "Failed to create job: " << GetLastError() << std::endl;\n        return 1;\n    }\n\n    // Set the extended limit information on the job.\n    JOBOBJECT_EXTENDED_LIMIT_INFORMATION jeli = {0};\n    jeli.BasicLimitInformation.LimitFlags = JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE;\n\n    if (!SetInformationJobObject(hJob, JobObjectExtendedLimitInformation,\n                                  &jeli, sizeof(jeli))) {\n        std::cerr << "Failed to set job info: " << GetLastError() << std::endl;\n        CloseHandle(hJob);\n        return 1;\n    }\n\n    // Start the child process.\n    STARTUPINFO si = {0};\n    PROCESS_INFORMATION pi = {0};\n    si.cb = sizeof(si);\n\n    if (!CreateProcess(\n            NULL,                   // No module name (use command line)\n            "C:\\path\\to\\child.exe", // Command line\n            NULL,                   // Process handle not inheritable\n            NULL,                   // Thread handle not inheritable\n            FALSE,                  // Set handle inheritance to FALSE\n            0,                      // No creation flags\n            NULL,                     // Use parent's environment block\n            NULL,                     // Use parent's starting directory \n            &si,                    // Pointer to STARTUPINFO structure\n            &pi)                    // Pointer to PROCESS_INFORMATION structure\n        ) {\n        std::cerr << "Failed to create process: " << GetLastError() << std::endl;\n        CloseHandle(hJob);\n        return 1;\n    }\n\n    // Add the child process to the job.\n    if (!AssignProcessToJobObject(hJob, pi.hProcess)) {\n        std::cerr << "Failed to assign process to job: " << GetLastError() << std::endl;\n        CloseHandle(pi.hThread);\n        CloseHandle(pi.hProcess);\n        CloseHandle(hJob);\n        return 1;\n    }\n\n    // Wait for the child process to finish.\n    WaitForSingleObject(pi.hProcess, INFINITE);\n\n    // Clean up handles and close the job object.\n    CloseHandle(pi.hThread);\n    CloseHandle(pi.hProcess);\n    CloseHandle(hJob);\n\n    return 0;\n}