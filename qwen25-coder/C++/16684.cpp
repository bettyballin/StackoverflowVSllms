#include <iostream>\n#include <string>\n#include <boost/asio.hpp>\n\nusing boost::asio::ip::tcp;\n\nint main(int argc, char* argv[]) {\n    try {\n        if (argc != 3) {\n            std::cerr << "Usage: p2pchat_client <username> <server>\n";\n            return 1;\n        }\n\n        std::string username(argv[1]);\n        boost::asio::io_context io_context;\n\n        // Connect to the specified server\n        tcp::resolver resolver(io_context);\n        auto endpoints = resolver.resolve(tcp::v4(), argv[2], "1234");\n\n        tcp::socket socket(io_context);\n        boost::asio::connect(socket, endpoints);\n\n        // Register with the server\n        std::string reg_message = "R " + username + "\n";\n        boost::asio::write(socket, boost::asio::buffer(reg_message));\n\n        char data[1024];\n        boost::asio::read_until(socket, boost::asio::buffer(data), '\n');\n        std::cout << "Server response: " << data;\n\n        // Query for other clients\n        std::string query_message = "G\n";\n        boost::asio::write(socket, boost::asio::buffer(query_message));\n\n        boost::system::error_code ignore_error;\n        size_t len = boost::asio::read_until(socket, boost::asio::buffer(data), '\n', ignore_error);\n        if (!ignore_error) {\n            std::string response(data, len - 1); // exclude newline\n            std::cout << "Available Peers:\n" << response;\n        }\n\n    } catch (std::exception& e) {\n        std::cerr << e.what() << "\n";\n    }\n    \n    return 0;\n}