void TestMultipleConnections(IS8Simulation *pis8) {\n    HRESULT hresult;\n    IConnectionPointContainer *pContainer = NULL;\n    IConnectionPoint *pConnection = NULL;\n    DWORD dwAdvise1, dwAdvise2;\n\n    // Obtain the IConnectionPointContainer interface from the COM object.\n    hresult = pis8->QueryInterface(__uuidof(IConnectionPointContainer), (void**)&pContainer);\n    if (SUCCEEDED(hresult)) {\n        std::cout << "IConnectionPointContainer supported." << std::endl;\n    } else {\n        std::cerr << "Error: No such interface supported." << std::endl;\n        exit(EXIT_FAILURE);\n    }\n\n    // Find the connection point for our event sink.\n    hresult = pContainer->FindConnectionPoint(__uuidof(IS8SimulationEvents), &pConnection);\n    switch (hresult) {\n        case S_OK:\n            std::cout << "Obtained valid interface pointer." << std::endl;\n            break;\n        default:\n            std::cerr << "Failed to get the connection point" << std::endl;\n            exit(EXIT_FAILURE);\n    }\n\n    // First sink setup.\n    Sink *pSink1 = new Sink();\n    IUnknown *pSinkUnk1 = NULL;\n    hresult = pSink1->QueryInterface(__uuidof(IUnknown), (void**)&pSinkUnk1);\n    if ( FAILED( hresult ) )\n    {\n        std::cerr << "Could not get the unknown interface" << std::endl;\n        exit(EXIT_FAILURE);\n    }    \n    dwAdvise1 = 0;\n    hresult = pConnection->Advise(pSinkUnk1, &dwAdvise1);\n\n    if (SUCCEEDED(hresult)) {\n        std::cout << "First connection established." << std::endl;\n    } else {\n        std::cerr << "Failed to establish first connection" << std::endl;\n        exit(EXIT_FAILURE);\n    }\n\n    // Second sink setup.\n    Sink *pSink2 = new Sink();\n    IUnknown *pSinkUnk2 = NULL;\n    hresult = pSink2->QueryInterface(__uuidof(IUnknown), (void**)&pSinkUnk2);\n    if ( FAILED( hresult ) )\n    {\n        std::cerr << "Could not get the unknown interface" << std::endl;\n        exit(EXIT_FAILURE);\n    }    \n    dwAdvise2 = 0;\n    hresult = pConnection->Advise(pSinkUnk2, &dwAdvise2);\n\n    if (SUCCEEDED(hresult)) {\n        std::cout << "Second connection established." << std::endl;\n    } else {\n        std::cerr << "Failed to establish second connection: ";\n        switch (HRESULT_CODE(hresult)) {\n            case CONNECT_E_ADVISELIMIT:\n                std::cerr << "CONNECT_E_ADVISELIMIT - The connection point has already reached its limit of connections and cannot accept any more." << std::endl;\n                break;\n             default:\n                std::cerr << "Other error" << std::endl;\n        }\n    }\n\n    // Unadvise after testing.\n    if (SUCCEEDED(hresult)) {\n        pConnection->Unadvise(dwAdvise2);\n    }\n    pConnection->Unadvise(dwAdvise1);\n\n    // Release the obtained interfaces.\n    pSinkUnk2->Release();\n    pSinkUnk1->Release();\n\n    pConnection->Release();\n    pContainer->Release();\n\n    delete pSink2;\n    delete pSink1;\n\n}