#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nclass A {\npublic:\n    A(std::string a) : _a(a) {}\n\n    bool operator==(const A& p) const { // Add 'const' for comparison with other objects\n        return p._a == _a;\n    }\n\n    std::string getA() const { // Getter for demonstration purposes\n        return _a;\n    }\n\nprivate:\n    std::string _a;\n};\n\nint main() {\n    std::vector<A*> va;\n\n    va.push_back(new A("one"));\n    va.push_back(new A("two"));\n    va.push_back(new A("three"));\n\n    // Define a lambda function as the predicate\n    auto match = [](A* ptr, const std::string& value) {\n        return ptr->getA() == value; // Use a method to compare the content\n    };\n\n    // Use find_if with a lambda that captures the desired value\n    std::string searchValue = "two";\n    auto it = std::find_if(va.begin(), va.end(), [&searchValue](A* ptr) {\n        return match(ptr, searchValue);\n    });\n\n    if (it != va.end()) {\n        std::cout << "Found: " << (*it)->getA() << std::endl;\n    } else {\n        std::cout << "Not found" << std::endl;\n    }\n\n    // Clean up memory\n    for (auto ptr : va) {\n        delete ptr;\n    }\n\n    return 0;\n}