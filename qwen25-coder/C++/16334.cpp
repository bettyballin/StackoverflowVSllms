#include <windows.h>\n#include <iostream>\n\nHKEY OpenRegistryKey(HKEY root, const std::wstring& subkey) {\n    HKEY hKey;\n    if (RegOpenKeyEx(root, subkey.c_str(), 0, KEY_READ, &hKey) != ERROR_SUCCESS) {\n        return nullptr;\n    }\n    return hKey;\n}\n\nstd::wstring QueryRegistryValue(HKEY hKey, const std::wstring& valueName) {\n    DWORD dataType;\n    DWORD dataSize = 0;\n\n    // First call to determine the size of the buffer needed.\n    if (RegQueryValueEx(hKey, valueName.c_str(), nullptr, &dataType, nullptr, &dataSize) != ERROR_SUCCESS) {\n        return L"";\n    }\n\n    std::wstring data(dataSize / sizeof(wchar_t), '\0');\n\n    // Second call to fill the buffer with actual data.\n    if (RegQueryValueEx(hKey, valueName.c_str(), nullptr, &dataType, reinterpret_cast<BYTE*>(&data[0]), &dataSize) != ERROR_SUCCESS) {\n        return L"";\n    }\n\n    // Resize the wstring to reflect the actual data read\n    data.resize(data.find(L'\0'));\n\n    if (dataType != REG_SZ && dataType != REG_EXPAND_SZ) {\n        return L"";\n    }\n    \n    return data;\n}\n\nint main() {\n    HKEY hKey = OpenRegistryKey(HKEY_CURRENT_USER, L"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer");\n    if (!hKey) {\n        std::wcerr << L"Failed to open registry key.\n";\n        return 1;\n    }\n\n    std::wstring cacheValue = QueryRegistryValue(hKey, L"Shell Folders\\Cache");\n    RegCloseKey(hKey);\n\n    if (cacheValue.empty()) {\n        std::wcerr << L"Failed to read or value is empty.\n";\n    } else {\n        std::wcout << L"Cache Value: " << cacheValue << '\n';\n    }\n\n    return 0;\n}