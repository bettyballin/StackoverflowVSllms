// Helper.h\n#ifdef MYLIBRARY_EXPORTS\n#define MYLIBRARY_API __declspec(dllexport)\n#else\n#define MYLIBRARY_API __declspec(dllimport)\n#endif\n\nclass MYLIBRARY_API StaticVarHolder {\npublic:\n    static int getStaticVar() { return s_StaticVar; }\n    static void setStaticVar(int value) { s_StaticVar = value; }\nprivate:\n    static int s_StaticVar;\n};\n\n// Helper.cpp\n#include "Helper.h"\nint StaticVarHolder::s_StaticVar = 0;\n\n// TemplateClass.h\ntemplate <typename T>\nclass TemplateClass {\npublic:\n    static int getSharedStatic() {\n        return StaticVarHolder::getStaticVar();\n    }\n\n    static void setSharedStatic(int value) {\n        StaticVarHolder::setStaticVar(value);\n    }\n};\n\n// Example usage\n#include "TemplateClass.h"\n#include "Helper.h"\n#include <iostream>\n\nvoid testFunction() {\n    TemplateClass<int>::setSharedStatic(42);\n    std::cout << "Shared static: " << TemplateClass<int>::getSharedStatic() << std::endl; // Should output 42\n}