#include <windows.h>\n#include <iostream>\n\n#define BUFFER_SIZE (1024 * 1024) // 1 MB Buffer\n\nint main() {\n    const char* filePath = "testfile.dat";\n    \n    HANDLE hFile = CreateFile(filePath, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS,\n                               FILE_ATTRIBUTE_NORMAL | FILE_FLAG_SEQUENTIAL_SCAN, NULL);\n    if (hFile == INVALID_HANDLE_VALUE) {\n        std::cerr << "Failed to create file." << std::endl;\n        return 1;\n    }\n\n    char *buffer = (char*)VirtualAlloc(NULL, BUFFER_SIZE, MEM_COMMIT | MEM_RESERVE,\n                                        PAGE_READWRITE);\n    if (!buffer) {\n        CloseHandle(hFile);\n        std::cerr << "Memory allocation failed." << std::endl;\n        return 1;\n    }\n\n    LARGE_INTEGER start, end, frequency;\n    QueryPerformanceCounter(&start);\n\n    DWORD bytesWritten;\n    bool writeSuccess = WriteFile(hFile, buffer, BUFFER_SIZE, &bytesWritten, NULL);\n\n    QueryPerformanceCounter(&end);\n    QueryPerformanceFrequency(&frequency);\n\n    double duration = (double)(end.QuadPart - start.QuadPart) / frequency.QuadPart;\n    double throughputMBPerSec = bytesWritten / (1024 * 1024) / duration;\n\n    std::cout << "Write Throughput: " << throughputMBPerSec << " MB/s" << std::endl;\n\n    VirtualFree(buffer, 0, MEM_RELEASE);\n    CloseHandle(hFile);\n\n    return writeSuccess ? 0 : 1;\n}