#include <windows.h>\n#include <aclapi.h>\n#include <stdio.h>\n\nvoid CreateWorldReadableKey() {\n    HKEY hKey;\n    DWORD dwDisposition;\n\n    // Define the security attributes structure.\n    SECURITY_ATTRIBUTES sa;\n    ACL* pDACL = NULL;\n    PACL pOldAcl = NULL;\n    PSECURITY_DESCRIPTOR pSD = NULL;\n\n    // Initialize a security descriptor.\n    if(!InitializeSecurityDescriptor(&pSD, SECURITY_DESCRIPTOR_REVISION)) {\n        printf("Failed to initialize Security Descriptor\n");\n        return;\n    }\n\n    EXPLICIT_ACCESS ea[1];\n\n    // Set permissions for everyone.\n    ZeroMemory(&ea, sizeof(EXPLICIT_ACCESS));\n    \n    // We want world readability/writability.\n    ea[0].grfAccessPermissions = KEY_ALL_ACCESS;\n    ea[0].grfAccessMode = SET_ACCESS;\n\n    // Want to add access to well-known SID - everyone.\n    if(!ConvertStringSidToSid("S-1-1-0", &ea[0].Trustee.ptstrName)) {\n        printf("Failed to convert string sid\n");\n        LocalFree(pSD);\n        return;\n    }\n\n    ea[0].grfTrusteeForm = TRUSTEE_IS_SID;\n    ea[0].Trustee.TrusteeType = TRUSTEE_IS_WELL_KNOWN_GROUP;\n\n    // Make absolute SD.\n    if(SetEntriesInAcl(1, ea, NULL, &pDACL) != ERROR_SUCCESS) {\n        printf("Failed to set entries in ACL\n");\n        LocalFree(pSD);\n        LocalFree(ea[0].Trustee.ptstrName);\n        return;\n    }\n\n    // Set absolute SD as DACL.\n    if(!SetSecurityDescriptorDacl(pSD, TRUE, pDACL, FALSE)) {\n        printf("Failed to set security descriptor dacl\n");\n        LocalFree(pSD);\n        LocalFree(ea[0].Trustee.ptstrName);\n        LocalFree(pDACL);\n        return;\n    }\n\n    // Set security attributes to point our SD.\n    sa.nLength = sizeof(SECURITY_ATTRIBUTES);\n    sa.lpSecurityDescriptor = pSD;\n    sa.bInheritHandle = TRUE;\n\n    LONG result = RegCreateKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\MyNewKey"), 0, NULL, REG_OPTION_NON_VOLATILE,\n                               KEY_ALL_ACCESS, &sa, &hKey, &dwDisposition);\n\n    if (result == ERROR_SUCCESS) {\n        printf("Key created successfully\n");\n\n        // Always clean up\n        RegCloseKey(hKey);\n    } else {\n        printf("Failed to create key: %lu\n", result);\n    }\n\n    // Cleanup.\n    LocalFree(pSD);\n    LocalFree(ea[0].Trustee.ptstrName);\n    LocalFree(pDACL);\n\n}\n\nint main() {\n    CreateWorldReadableKey();\n    return 0;\n}