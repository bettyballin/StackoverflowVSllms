#define WIN32_LEAN_AND_MEAN\n#include <windows.h>\n#include <iostream>\n\nLRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam) {\n    switch (msg) {\n        case WM_QUERYENDSESSION:\n            if (!lparam) { // Not a system shutdown/restart\n                return TRUE;\n            }\n            [[fallthrough]]; // Continue to handle end session notification\n\n        case WM_ENDSESSION: {\n            BOOL isLoggingOff = wparam != 0;\n            BOOL isSystemShutdown = (lparam & ENDSESSION_SYSTEM_SHUTDOWN) != 0;\n\n            if (isSystemShutdown && !isLoggingOff) {\n                std::cout << "Windows is shutting down or restarting." << std::endl;\n            } else if (!isSystemShutdown && isLoggingOff) {\n                std::cout << "User is logging off." << std::endl;\n            }\n        }\n        return 0;\n\n        case WM_DESTROY:\n            PostQuitMessage(0);\n            return 0;\n    }\n\n    return DefWindowProc(hwnd, msg, wparam, lparam);\n}\n\nint main() {\n    WNDCLASS wc = {0};\n    MSG msg = {0};\n\n    wc.lpfnWndProc = WndProc;\n    wc.hInstance = GetModuleHandle(NULL);\n    wc.lpszClassName = "ShutdownMonitor";\n\n    RegisterClass(&wc);\n\n    CreateWindow(wc.lpszClassName, "Shutdown Monitor", 0, 0, 0, 0, 0, HWND_MESSAGE, NULL, wc.hInstance, NULL);\n\n    while (GetMessage(&msg, NULL, 0, 0)) {\n        TranslateMessage(&msg);\n        DispatchMessage(&msg);\n    }\n\n    return msg.wParam;\n}