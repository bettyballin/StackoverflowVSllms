#include <comdef.h>\n#include <vector>\n#include <algorithm>\n\ntemplate <typename T>\nclass ComEnumIterator {\npublic:\n    using value_type = T;\n    using pointer = value_type*;\n    using reference = value_type&;\n    using difference_type = std::ptrdiff_t;\n    using iterator_category = std::input_iterator_tag;\n\n    ComEnumIterator() : m_pEnum(nullptr), m_hr(S_FALSE) {}\n    explicit ComEnumIterator(IEnumUnknownPtr pEnum) : m_pEnum(pEnum), m_hr(S_OK) { MoveNext(); }\n\n    bool operator!=(const ComEnumIterator& other) const {\n        return m_hr != other.m_hr;\n    }\n    bool operator==(const ComEnumIterator& other) const {\n        return !(*this != other);\n    }\n    value_type operator*() const {\n        return m_current;\n    }\n    const ComEnumIterator& operator++() {\n        MoveNext();\n        return *this;\n    }\n\n    ComEnumIterator operator++(int) {\n        ComEnumIterator tmp = *this;\n        ++(*this);\n        return tmp;\n    }\n\nprivate:\n    void MoveNext() {\n        if (m_pEnum.p != nullptr) { \n            m_current.Release();\n            ULONG fetched = 0;\n            m_hr = m_pEnum->Next(1, reinterpret_cast<IUnknown**>(&m_current), &fetched);\n            if (fetched == 0) {\n                m_current.Release();\n            }\n        } else {\n            m_hr = S_FALSE;\n        }\n    }\n\n    IEnumUnknownPtr m_pEnum;\n    HRESULT m_hr;\n    CComPtr<T> m_current;\n};\n\nclass ComEnumWrapper {\npublic:\n    explicit ComEnumWrapper(IEnumUnknownPtr pEnum) : m_enum(pEnum) {}\n\n    ComEnumIterator<IUnknown> begin() const {\n        return ComEnumIterator<IUnknown>(m_enum);\n    }\n    ComEnumIterator<IUnknown> end() const {\n        return {};\n    }\n\nprivate:\n    IEnumUnknownPtr m_enum;\n};\n\n// Example usage\nvoid DoSomethingWithUnk(IUnknown* unk) {\n    // Your code to handle each unknown interface pointer\n}\n\nvoid UseComEnum(IEnumUnknownPtr pEnumUnk) {\n    ComEnumWrapper wrapper(pEnumUnk);\n    std::for_each(wrapper.begin(), wrapper.end(), DoSomethingWithUnk);\n}