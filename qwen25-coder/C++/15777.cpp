#include <iostream>\n#include <unordered_map>\n#include <typeindex>\n#include <memory>\n#include <string>\n\n// Base class for all services\nclass Service {\npublic:\n    virtual ~Service() = default;\n};\n\n// Example service implementations\nclass LoggingService : public Service {\npublic:\n    void log(const std::string& msg) {\n        std::cout << "Log: " << msg << std::endl;\n    }\n};\n\nclass DatabaseService : public Service {\npublic:\n    void connect() {\n        std::cout << "Database connected" << std::endl;\n    }\n};\n\n// Service provider class\nclass ServiceProvider {\nprivate:\n    std::unordered_map<std::type_index, std::unique_ptr<Service>> services;\n\npublic:\n    template<typename T>\n    void registerService(std::unique_ptr<T> service) {\n        static_assert(std::is_base_of_v<Service, T>, "T must inherit from Service");\n        services.insert_or_assign(typeid(T), std::move(service));\n    }\n\n    template<typename T>\n    T* getService() {\n        auto it = services.find(typeid(T));\n        if (it != services.end()) {\n            return dynamic_cast<T*>(it->second.get());\n        }\n        return nullptr;\n    }\n};\n\nint main() {\n    ServiceProvider serviceProvider;\n\n    // Register services\n    serviceProvider.registerService(std::make_unique<LoggingService>());\n    serviceProvider.registerService(std::make_unique<DatabaseService>());\n\n    // Retrieve and use a service\n    LoggingService* loggingService = serviceProvider.getService<LoggingService>();\n    if (loggingService) {\n        loggingService->log("Hello, World!");\n    }\n\n    DatabaseService* databaseService = serviceProvider.getService<DatabaseService>();\n    if (databaseService) {\n        databaseService->connect();\n    }\n\n    return 0;\n}