class Protocol {\nprotected:\n    int numberOfBytesInPackOfText;\n    std::string serviceString;\n\npublic:\n    Protocol(int sizeOfTextPack, const char* extraString)\n        : numberOfBytesInPackOfText(sizeOfTextPack), serviceString(extraString) {}\n\n    virtual ~Protocol() = default; // No need to clear members in destructor\n\n    virtual std::string convertToSystemMessage(const char* message) = 0;\n    virtual std::string convertToNativeMessage(const char* message) = 0;\n\nprotected:\n    // You can add protected methods here that both client and server might use\n};\n\nclass ServerProtocol : public Protocol {\npublic:\n    ServerProtocol(int sizeOfTextPack, const char* service)\n        : Protocol(sizeOfTextPack, service) {}\n\n    std::string convertToSystemMessage(const char* nativeMessage) override;\n    std::string convertToNativeMessage(const char* systemMessage) override;\n};\n\nclass ClientProtocol : public Protocol {\npublic:\n    ClientProtocol(int sizeOfTextPack, const char* service)\n        : Protocol(sizeOfTextPack, service) {}\n\n    // Override only if logic differs from server\n    std::string convertToSystemMessage(const char* nativeMessage) override;\n    std::string convertToNativeMessage(const char* systemMessage) override;\n\n    // Add client-specific methods here\n};