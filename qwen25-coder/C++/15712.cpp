#include <list>\n#include <cmath>\n\nbool multiple_sieve(std::list<int>& num_list) {\n    if (num_list.empty()) return false;\n\n    std::list<int>::iterator start_iter = num_list.begin();\n\n    // Only need to check up to the square root of the largest number in the list\n    int max_value = *std::max_element(num_list.begin(), num_list.end());\n    for (int i = 2; i <= std::sqrt(max_value); ++i) {\n        start_iter = num_list.begin();\n        while (start_iter != num_list.end()) {\n            if ((*start_iter == i) || (*start_iter % i != 0)) {\n                ++start_iter;\n            } else {\n                start_iter = num_list.erase(start_iter);\n            }\n        }\n    }\n\n    return true;\n}\n\nstd::list<int>& prime_sieve(std::list<int>& num_list) {\n    multiple_sieve(num_list);\n    return num_list;\n}