WITH job_ranges AS (\n    SELECT emp_id,\n           job_id,\n           eff_date AS start_date,\n           LEAD(eff_date) OVER (PARTITION BY emp_id, job_id ORDER BY eff_date) - 1 AS end_date,\n           status\n    FROM employee_jobs\n),\nactive_jobs AS (\n    SELECT emp_id, \n           job_id, \n           start_date, \n           CASE WHEN end_date IS NULL THEN (SELECT MAX(eff_date) FROM employee_jobs e2 WHERE e2.emp_id = j.emp_id) ELSE end_date END AS adjusted_end_date,\n           ROWNUM rn\n    FROM job_ranges j\n    WHERE status = 'A'\n)\nSELECT emp_id, \n       job_id, \n       start_date, \n       CASE WHEN LEAD(start_date) OVER (PARTITION BY emp_id, job_id ORDER BY start_date) > adjusted_end_date THEN adjusted_end_date END AS end_date,\n       row_number() OVER (PARTITION BY emp_id, job_id ORDER BY start_date) - 1 row_gap\nFROM active_jobs\nORDER BY emp_id, job_id, start_date;\n\n-- Further processing or filtering can be done as needed.