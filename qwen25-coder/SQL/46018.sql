DECLARE @LicenseLimit INT = 10;\n\n  WITH UserSessions AS (\n    SELECT UserId, LoginDateTime,\n           ISNULL(LogoutDateTime, GETDATE()) AS LogoutDateTime\n    FROM UserSessionLog\n    WHERE LogoutDateTime IS NULL OR LogoutDateTime > (GETDATE() - INTERVAL '30 days') -- consider last 30 days for performance\n  ),\n  SessionIntervals AS (\n    SELECT DATEADD(MINUTE, DATEDIFF(MINUTE, 0, LoginDateTime) / 5 * 5, 0) AS IntervalStart,\n           CEILING(DATEDIFF(SECOND, LoginDateTime, LogoutDateTime) / 300.0) AS MinuteCount -- assume checking every 5 minutes\n    FROM UserSessions\n  ),\n  IntervalCounts AS (\n    SELECT DATEADD(MINUTE, (T1.IntervalStart - T2.Beginning) / 60, T2.Beginning) AS IntervalStart,\n           SUM(T3.MinuteCount) AS ActiveUsers\n    FROM SessionIntervals AS T1\n    CROSS JOIN (SELECT DATEADD(DAY, number, '2023-01-01') AT TIME ZONE 'UTC' AS Beginning\n                FROM master..spt_values\n                WHERE type = 'P'\n                  AND DATEADD(DAY, number, '2023-01-01') <= GETDATE()) T2 -- generate intervals dynamically\n    LEFT JOIN (SELECT IntervalStart, 1 AS MinuteCount\n               FROM SessionIntervals) T3 ON T2.Beginning < T1.IntervalStart + INTERVAL '5 minutes'\n                                         AND T2.Beginning >= T1.IntervalStart\n    GROUP BY DATEADD(MINUTE, (T1.IntervalStart - T2.Beginning) / 60, T2.Beginning)\n    HAVING COUNT(*) > @LicenseLimit\n  )\n  INSERT INTO LicenseOveruseEvents (ExceedTimeStart, ExceedCount)\n  SELECT IntervalStart, ActiveUsers\n  FROM IntervalCounts;