DELIMITER $$\n\n-- Procedure to add a new item with a specific rank\nCREATE PROCEDURE AddItemWithRank(\n  IN p_link MEDIUMINT UNSIGNED,\n  IN p_title TEXT,\n  IN p_rank INT UNSIGNED\n)\nBEGIN\n  DECLARE max_rank INT;\n\n  -- Find the current highest rank or set it to 0 if no items exist\n  SELECT MAX(rank) INTO max_rank FROM item;\n  IF max_rank IS NULL THEN SET max_rank = 0; END IF;\n\n  -- Push up all ranks equal to or greater than p_rank\n  UPDATE item SET rank = rank + 1 WHERE rank >= p_rank;\n\n  -- Insert the new item with the desired rank\n  INSERT INTO item (link, title, rank) VALUES (p_link, p_title, p_rank);\nEND$$\n\n-- Procedure to remove an item by link\nCREATE PROCEDURE RemoveItemByLink(\n  IN p_link MEDIUMINT UNSIGNED\n)\nBEGIN\n  DECLARE removed_rank INT;\n\n  -- Retrieve the rank of the item being removed\n  SELECT rank INTO removed_rank FROM item WHERE link = p_link LIMIT 1;\n\n  -- Delete the item\n  DELETE FROM item WHERE link = p_link;\n\n  -- Adjust ranks for remaining items if necessary\n  IF removed_rank IS NOT NULL THEN\n    UPDATE item SET rank = rank - 1 WHERE rank > removed_rank;\n  END IF;\nEND$$\n\n-- Procedure to update an item's rank\nCREATE PROCEDURE UpdateItemRank(\n  IN p_link MEDIUMINT UNSIGNED,\n  IN p_new_rank INT UNSIGNED\n)\nBEGIN\n  DECLARE current_rank INT;\n\n  -- Retrieve the current rank of the item\n  SELECT rank INTO current_rank FROM item WHERE link = p_link LIMIT 1;\n\n  IF current_rank IS NOT NULL THEN\n    IF current_rank < p_new_rank THEN\n      -- Push down all ranks in between to fill the gap\n      UPDATE item SET rank = rank - 1 WHERE rank > current_rank AND rank <= p_new_rank;\n    ELSEIF current_rank > p_new_rank THEN\n      -- Push up all ranks in between to make space for the new rank\n      UPDATE item SET rank = rank + 1 WHERE rank >= p_new_rank AND rank < current_rank;\n    END IF;\n\n    -- Update the item's rank to the new value\n    UPDATE item SET rank = p_new_rank WHERE link = p_link;\n  END IF;\nEND$$\n\nDELIMITER ;