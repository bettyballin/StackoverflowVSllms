DELIMITER //\nCREATE PROCEDURE UpdateReportingPeriods()\nBEGIN\n    DECLARE done INT DEFAULT FALSE;\n    DECLARE new_start_date DATE;\n    DECLARE reporting_period_length INT;\n    DECLARE period_id INT;\n    DECLARE cur CURSOR FOR SELECT id, CreationDate, ReportingPeriodLength FROM YourOtherTable WHERE Status = 'Active';\n    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;\n\n    OPEN cur;\n\n    read_loop: LOOP\n        FETCH cur INTO period_id, new_start_date, reporting_period_length;\n        IF done THEN\n            LEAVE read_loop;\n        END IF;\n\n        -- Check if the latest reporting period for this ID has expired\n        SET @latestEndDate = (\n            SELECT EndDate \n            FROM ReportingPeriods \n            WHERE ReportingPeriodId = period_id \n            ORDER BY EndDate DESC \n            LIMIT 1\n        );\n\n        IF DATE(@latestEndDate) < CURDATE() THEN\n            -- Insert new reporting period starting from the day after the latest end date\n            INSERT INTO ReportingPeriods (ReportingPeriodId, StartDate, EndDate)\n            VALUES (\n                period_id,\n                DATE_ADD(DATE(@latestEndDate), INTERVAL 1 DAY),\n                DATE_ADD(DATE(@latestEndDate), INTERVAL reporting_period_length + 1 DAY)\n            );\n        END IF;\n    END LOOP;\n\n    CLOSE cur;\nEND//\nDELIMITER ;