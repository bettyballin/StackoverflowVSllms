WITH Hierarchy AS (\n    -- Anchor member: start with the root nodes (those without a parent)\n    SELECT \n        Id, \n        ParentId, \n        Name, \n        Depth,\n        CAST(Name AS VARCHAR(MAX)) AS Path  -- Track the path for ordering\n    FROM \n        YourTable\n    WHERE \n        ParentId IS NULL\n\n    UNION ALL\n\n    -- Recursive member: join the CTE with the table to add child nodes\n    SELECT \n        t.Id, \n        t.ParentId, \n        t.Name, \n        t.Depth,\n        CAST(h.Path + ' -> ' + t.Name AS VARCHAR(MAX))  -- Update the path for ordering\n    FROM \n        YourTable t\n    INNER JOIN \n        Hierarchy h ON t.ParentId = h.Id\n)\n-- Select from the CTE and order by Depth and Path to ensure hierarchical order\nSELECT \n    Id, \n    ParentId, \n    Name, \n    Depth\nFROM \n    Hierarchy\nORDER BY \n    Depth, -- First order by depth to handle levels\n    Path;  -- Then order by path for correct ordering of siblings and childre