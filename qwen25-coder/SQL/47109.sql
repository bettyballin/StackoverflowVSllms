-- Find duplicates in a column, grouped by another column\nSELECT duplicate_column, COUNT(*), group_column\nFROM your_table\nGROUP BY duplicate_column, group_column\nHAVING COUNT(*) > 1;\n\n-- Update statement using CASE WHEN based on conditions\nUPDATE your_table\nSET status = CASE \n    WHEN condition_column < 10 THEN 'Low'\n    WHEN condition_column BETWEEN 10 AND 20 THEN 'Medium'\n    ELSE 'High'\nEND\nWHERE other_column IS NOT NULL;\n\n-- Recursive CTE to find hierarchy (e.g., in an employee table with a manager_id)\nWITH RECURSIVE cte_employee AS (\n    SELECT id, name, manager_id\n    FROM employees\n    WHERE manager_id IS NULL -- Base case: root of the hierarchy\n\n    UNION ALL\n\n    SELECT e.id, e.name, e.manager_id\n    FROM employees e\n    INNER JOIN cte_employee ce ON e.manager_id = ce.id -- recursive member\n)\nSELECT * FROM cte_employee;\n\n-- Window functions for ranking rows within a partition\nSELECT employee_name, salary,\n       RANK() OVER (PARTITION BY department ORDER BY salary DESC) as rank_by_salary\nFROM employees;\n\n-- Use of JSON functions to parse and extract data from JSON columns\nSELECT id, \n       json_col->>'title' AS title,  -- Extracting a field from JSON column\n       json_col->'details'->>'description' AS description  -- Nested extraction\nFROM articles;\n\n-- Subquery factoring (WITH clause) for complex queries with reusable parts\nWITH temp_table AS (\n    SELECT some_column, COUNT(*) as count\n    FROM your_table\n    GROUP BY some_column\n)\nSELECT tt.some_column, tt.count\nFROM temp_table tt\nWHERE tt.count > 1;\n\n-- Using UNION ALL to combine multiple result sets without eliminating duplicates\nSELECT name FROM table_a\nUNION ALL\nSELECT name FROM table_b;