CREATE FUNCTION dbo.SplitString(@Input VARCHAR(MAX), @Delimiter CHAR(1))\nRETURNS TABLE (Value VARCHAR(200))\nAS\nRETURN (\n    SELECT LTRIM(RTRIM(x)) AS Value FROM (\n        SELECT item.f.value('.', 'VARCHAR(200)') AS f\n        FROM (SELECT CAST('<X>' + REPLACE(@Input, @Delimiter, '</X><X>') + '</X>' AS XML).nodes('/X') AS a(f)\n    ) x WHERE LTRIM(RTRIM(x)) <> ''\n);\n\n-- Now use this function to find related videos\nDECLARE @TargetVideoID BIGINT = 1;\nWITH VideoTags AS (\n    SELECT v.VideoID, t.Value AS Tag\n    FROM Videos v\n    CROSS APPLY dbo.SplitString(v.Tags, ',') t\n    WHERE v.VideoID != @TargetVideoID AND v.isActive = 1\n),\nTargetTags AS (\n    SELECT t.Value AS Tag\n    FROM Videos v\n    CROSS APPLY dbo.SplitString(v.Tags, ',') t\n    WHERE v.VideoID = @TargetVideoID AND v.isActive = 1\n)\nSELECT vt.VideoID, COUNT(*) AS MatchingTagsCount\nFROM VideoTags vt\nINNER JOIN TargetTags tt ON vt.Tag = tt.Tag\nGROUP BY vt.VideoID\nORDER BY MatchingTagsCount DESC;