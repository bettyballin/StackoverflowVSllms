BEGIN\n    UPDATE history_table ht\n    SET some_date_col = (\n        CASE \n            WHEN REGEXP_LIKE(some_date_col, '^\d{4}-\d{2}-\d{2}$') THEN -- yyyy-mm-dd format\n                TO_CHAR(TO_DATE(some_date_col, 'yyyy-mm-dd') + 30, 'mm/dd/yyyy')\n            WHEN REGEXP_LIKE(some_date_col, '^\d{1,2}/\d{1,2}/\d{4}$') THEN -- mm/dd/yyyy format\n                TO_CHAR(TO_DATE(some_date_col, 'mm/dd/yyyy') + 30, 'mm/dd/yyyy')\n            WHEN REGEXP_LIKE(some_date_col, '^\d{1,2}/\d{1,2}/\d{2}$') THEN -- mm/dd/yy format\n                TO_CHAR(TO_DATE(some_date_col, 'mm/dd/yy') + 30, 'mm/dd/yyyy')\n            WHEN REGEXP_LIKE(some_date_col, '^\d{2}/\d{2}/\d{1,4}$') THEN -- Assuming ambiguous dd/mm format could be yy or yyyy\n                CASE \n                    WHEN TO_CHAR(TO_DATE(some_date_col, 'dd/mm/yy'), 'YYYY') >= 1950 AND TO_CHAR(TO_DATE(some_date_col, 'dd/mm/yy'), 'YYYY') <= 1999 THEN -- Assuming cutoff for 2-digit years\n                        TO_CHAR(TO_DATE(some_date_col, 'dd/mm/yy') + 30, 'mm/dd/yyyy')\n                    ELSE\n                        TO_CHAR(TO_DATE(some_date_col, 'dd/mm/yyyy') + 30, 'mm/dd/yyyy')\n                END\n            ELSE\n                some_date_col -- or NULL, or raise an error if you expect all dates should be processed\n        END\n    )\n    WHERE some_date_col IS NOT NULL;\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.PUT_LINE('Error during conversion: ' || SQLERRM);\nEND;\n/