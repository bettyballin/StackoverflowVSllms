WITH SplitRanges AS (\n    SELECT \n        r1.Start,\n        CASE WHEN r2.Start > r1.Start THEN r2.Start ELSE r1.Finish END AS Finish,\n        r1.Priority,\n        ROW_NUMBER() OVER (ORDER BY r1.Start, r1.Finish DESC, r1.Priority DESC) AS rn\n    FROM #ranges r1\n    LEFT JOIN #ranges r2 ON r1.Start < r2.Start AND r2.Start <= r1.Finish AND r2.Priority > r1.Priority\n    WHERE NOT EXISTS (\n        SELECT 1 \n        FROM #ranges r3 \n        WHERE r3.Start < r1.Start AND r1.Start <= r3.Finish AND r3.Priority >= r1.Priority\n    )\n    UNION ALL\n    SELECT \n        rn.Finish,\n        CASE WHEN r2.Start > rn.Finish THEN r2.Start ELSE r1.Finish END AS Finish,\n        r1.Priority,\n        ROW_NUMBER() OVER (ORDER BY r1.Start, r1.Finish DESC, r1.Priority DESC) AS rn\n    FROM SplitRanges rn\n    JOIN #ranges r1 ON rn.Finish < r1.Finish AND r1.Start <= rn.Finish AND r1.Priority = rn.Priority\n    LEFT JOIN #ranges r2 ON rn.Finish < r2.Start AND r2.Start <= r1.Finish AND r2.Priority > r1.Priority\n),\nOrderedRanges AS (\n    SELECT \n        Start,\n        Finish,\n        Priority,\n        ROW_NUMBER() OVER (PARTITION BY Start ORDER BY Priority DESC) AS pri_rn\n    FROM SplitRanges\n)\nSELECT \n    Start,\n    Finish,\n    Priority\nFROM OrderedRanges\nWHERE pri_rn = 1\nORDER BY Start, Finish;