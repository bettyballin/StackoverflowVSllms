-- Step 1: Backup database (Perform this step outside of SQL scripts, typically through your DBMS tools)\n\n-- Step 2: Create a mapping table to hold old and new IDs\nCREATE TABLE #IDMapping (\n    OldAccountID INT,\n    NewAccountID INT IDENTITY(1,1)\n);\n\n-- Step 3: Populate the mapping table with old and new IDs\nINSERT INTO #IDMapping (OldAccountID)\nSELECT accountID FROM accounts ORDER BY accountID;\n\n-- Step 4: Update the accounts table with new IDs\nUPDATE a\nSET accountID = m.NewAccountID\nFROM accounts a\nJOIN #IDMapping m ON a.accountID = m.OldAccountID;\n\n-- Step 5: Propagate changes to all referencing tables\n-- Example for updating 'notes' table, repeat for other referencing tables\nUPDATE n\nSET accountID = m.NewAccountID\nFROM notes n\nJOIN #IDMapping m ON n.accountID = m.OldAccountID;\n\n-- Repeat the above step for each table that references accounts (equipment, etc.)\n\n-- Step 6: Drop temporary mapping table if no longer needed\nDROP TABLE #IDMapping;\n\n-- Optional: Recreate Identity Specification on Accounts Table\nDBCC CHECKIDENT ('accounts', RESEED, 0);\nGO\n\nINSERT INTO accounts (...) VALUES (...); -- Adding a new row just to let SQL Server set the identity correctly.\nDELETE FROM accounts WHERE accountID = SCOPE_IDENTITY();