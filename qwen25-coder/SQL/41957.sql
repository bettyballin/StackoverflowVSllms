WITH FolderHierarchy AS (\n    -- Anchor member: select root folders\n    SELECT \n        ItemID,\n        ParentID,\n        Name AS ReportFolderName,\n        CAST('<ReportFolder>' + '<FolderName>' + Name + '</FolderName>' AS XML) AS XmlData,\n        1 AS Level\n    FROM Catalog\n    WHERE Type = 2 AND ParentID IS NULL -- Assuming type 2 is a folder\n\n    UNION ALL\n\n    -- Recursive member: select child folders and reports\n    SELECT \n        c.ItemID,\n        c.ParentID,\n        c.Name AS ReportFolderName,\n        CASE \n            WHEN c.Type = 2 THEN rh.XmlData.modify('insert <ReportFolder>{<FolderName/>' + (SELECT Name FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)') + '</FolderName>}</ReportFolder> into (/ReportFolder)[1]') OR rh.XmlData\n            ELSE rh.XmlData.modify('insert <Report>{<ReportName/>' + (SELECT Name FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)') + '</ReportName>}</ReportFolder>' into (/ReportFolder)[1]') OR rh.XmlData\n        END AS XmlData,\n        rh.Level + 1 AS Level\n    FROM Catalog c\n    INNER JOIN FolderHierarchy rh ON c.ParentID = rh.ItemID\n    WHERE rh.Level < 4 -- Limit the depth to 4 levels\n)\nSELECT \n    (SELECT XmlData.query('/ReportFolder') FOR XML PATH(''), TYPE) As ServerXml\nFROM FolderHierarchy\nWHERE ParentID IS NULL; -- Only root level nodes are needed at the end.