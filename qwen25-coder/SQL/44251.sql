-- Set a variable for today's date and time\nSET @now = NOW();\n\n-- Count rows added today\nSELECT DATE(@now) AS date, COUNT(*) AS count_today \nFROM your_table \nWHERE DATE(your_date_field) = DATE(@now);\n\n-- Count rows added yesterday\nSELECT DATE(DATE_SUB(@now, INTERVAL 1 DAY)) AS date, COUNT(*) AS count_yesterday \nFROM your_table \nWHERE DATE(your_date_field) = DATE(DATE_SUB(@now, INTERVAL 1 DAY));\n\n-- Repeat the above pattern for days ago\n-- If you need a query that does this all in one go and provides counts from today back to 30 days ago:\nSELECT \n    DATE(DATE_SUB(@now, INTERVAL (units.i + tens.i * 10) DAY)) AS date, \n    COUNT(*) as count \nFROM your_table,\n     (select 0 as i union select 1 union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9) units\n     cross join\n     (select 0 as i union select 1 union select 2 union select 3) tens\nWHERE DATE(your_date_field) = DATE(DATE_SUB(@now, INTERVAL (units.i + tens.i * 10) DAY))\nAND (units.i + tens.i * 10) < 30 -- Limit to 30 days \nGROUP BY date\nORDER BY date DESC;\n\n-- For counting rows per month:\nSELECT\n    DATE_FORMAT(your_date_field, '%Y-%m') AS year_month,\n    COUNT(*) as count\nFROM your_table\nWHERE your_date_field >= DATE_SUB(@now, INTERVAL 1 YEAR) -- Adjust the interval to go back further if needed\nGROUP BY year_month\nORDER BY year_month;\n\n-- For counting rows per year:\nSELECT\n    DATE_FORMAT(your_date_field, '%Y') AS year,\n    COUNT(*) as count\nFROM your_table\nGROUP BY year\nORDER BY year;