-- Example script to generate view definition based on a star schema structure\n\nDECLARE @SchemaName NVARCHAR(255) = 'dbo';\nDECLARE @ViewName NVARCHAR(255) = 'MODEL_SYSTEM_1';\n\nDECLARE @SQL NVARCHAR(MAX) = 'CREATE VIEW ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@ViewName) + ' AS SELECT ';\nDECLARE @Joins NVARCHAR(MAX) = '';\nDECLARE @Selects NVARCHAR(MAX) = '';\n\n-- Dynamically build the SELECT clause\nSELECT @Selects += \n         ', ' + CASE WHEN ORDINAL_POSITION = 1 THEN '' ELSE '(' END +\n           QUOTENAME(TABLE_NAME) + '.' + QUOTENAME(COLUMN_NAME) +\n           CASE WHEN ORDINAL_POSITION = MAX(ORDINAL_POSITION) OVER (PARTITION BY TABLE_NAME) THEN ')' ELSE '' END\nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE TABLE_TYPE = 'BASE TABLE'\n  AND TABLE_SCHEMA = @SchemaName\nORDER BY TABLE_NAME, ORDINAL_POSITION;\n\n-- Remove the leading comma\nSET @Selects = STUFF(@Selects, 1, 2, '');\n\n-- Dynamically build the FROM and JOIN clauses\n-- This assumes that your Fact table is known, adjust based on your schema\nSELECT @Joins += ' INNER JOIN ' + QUOTENAME(TABLE_NAME) +\n                  ' ON ' + \n                  (SELECT TOP 1 -- Assuming a single FK reference for simplicity\n                    QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME) + '.' + QUOTENAME(COLUMN_NAME) +\n                    ' = ' +\n                    (SELECT QUOTENAME(referenced_table_schema) + '.' + QUOTENAME(referenced_table_name) + '.' + QUOTENAME(referenced_column_name)\n                     FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS rc\n                     INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu1 ON rc.constraint_name = kcu1.constraint_name\n                     WHERE kcu2.column_name = kcu1.column_name\n                       AND kcu2.table_schema = @SchemaName\n                       AND TABLE_NAME = rc.referenced_table_name)\n                   FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu2\n                   WHERE kcu2.table_schema = @SchemaName\n                     AND OBJECTPROPERTY(OBJECT_ID(CONSTRAINT_SCHEMA + '.' + CONSTRAINT_NAME), 'IsForeignKey') = 1\n                     AND TABLE_NAME = T.TABLE_NAME)\nFROM INFORMATION_SCHEMA.TABLES AS T\nWHERE TABLE_TYPE = 'BASE TABLE'\n  AND TABLE_SCHEMA = @SchemaName\n  AND TABLE_NAME != (SELECT TOP 1 TABLE_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_TYPE = 'PRIMARY KEY' AND TABLE_SCHEMA = @SchemaName) -- Exclude Fact table assumption\n\n-- Combine into final SQL statement\nSET @SQL += @Selects + ' FROM ' + \n            (SELECT TOP 1 QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME)\n             FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_TYPE = 'PRIMARY KEY' AND TABLE_SCHEMA = @SchemaName) -- Assuming Fact table has PK\n            + @Joins;\n\nPRINT @SQL; -- For debugging, replace with EXEC if everything checks out\n\n-- Note: You might need to further refine aliases and handle naming conflicts