-- Create a stored procedure to handle the complex logic\nCREATE PROCEDURE ProcessBinaryData ( @binaryBlob VARBINARY(MAX) )\nAS\nBEGIN\n    BEGIN TRY\n        -- Logic to process binary data\n        INSERT INTO SecondTable (Column1, Column2)\n        VALUES /* values derived from binaryBlob */;\n\n        -- Add more processing as needed\n    END TRY\n    BEGIN CATCH\n        -- Log the error or handle as required\n        INSERT INTO ErrorLogTable (ErrorMessage)\n        VALUES (ERROR_MESSAGE());\n\n        -- Continue without rolling back the transaction\n        RETURN;\n    END CATCH\nEND\n\n-- Modify your trigger to call this procedure\nCREATE TRIGGER InsertTrigger\nON FirstTable\nAFTER INSERT\nAS\nBEGIN\n    SET NOCOUNT ON;\n\n    BEGIN TRY\n        DECLARE @binaryBlob VARBINARY(MAX);\n\n        -- Assuming you have a column named BinaryColumn in FirstTable\n        SELECT @binaryBlob = BinaryColumn\n        FROM inserted;\n\n        -- Call the stored procedure with sp_executesql to handle errors gracefully\n        EXEC ProcessBinaryData @binaryBlob;\n    END TRY\n    BEGIN CATCH\n        -- Optionally log this error, but we expect the transaction not to be doomed here\n        INSERT INTO ErrorLogTable (ErrorMessage)\n        VALUES (ERROR_MESSAGE());\n\n        RETURN;  -- Return early to avoid any further action in the trigger\n    END CATCH\nEND;