ALTER TRIGGER [dbo].[UpdateUniqueSubjectAfterInsertUpdate]\n   ON  [dbo].[Contents]\n   AFTER INSERT, UPDATE\nAS\nBEGIN\n    SET NOCOUNT ON;\n\n    -- Update the LastModifiedOn field to current datetime for all inserted/updated rows\n    UPDATE C\n    SET LastModifiedOn = GETDATE()\n    FROM [dbo].[Contents] C\n    INNER JOIN INSERTED I ON I.ContentId = C.ContentId\n\n    -- Process each row in the INSERTED table\n    DECLARE @ContentId INTEGER,\n        @ContentTypeId TINYINT,\n        @UniqueSubject NVARCHAR(200),\n        @NumberFound INTEGER;\n\n    DECLARE inserted_cursor CURSOR FAST_FORWARD FOR \n        SELECT ContentId, ContentTypeId, [dbo].[ToUriCleanText]([Subject])\n        FROM INSERTED;\n\n    OPEN inserted_cursor;\n\n    FETCH NEXT FROM inserted_cursor INTO @ContentId, @ContentTypeId, @UniqueSubject;\n\n    WHILE @@FETCH_STATUS = 0\n    BEGIN\n        -- Find out how many items we have for these keys.\n        SELECT @NumberFound = COUNT(ContentId)\n        FROM [dbo].[Contents]\n        WHERE ContentId = @ContentId\n            AND UniqueSubject = @UniqueSubject;\n\n        -- If there is at least one identical subject, make it unique.\n        IF @NumberFound > 0\n            SET @UniqueSubject = @UniqueSubject + CAST(@NumberFound AS NVARCHAR(10));\n\n        -- Update the unique subject for this row.\n        UPDATE [dbo].[Contents]\n        SET UniqueSubject = @UniqueSubject\n        WHERE ContentId = @ContentId;\n\n        FETCH NEXT FROM inserted_cursor INTO @ContentId, @ContentTypeId, @UniqueSubject;\n    END\n\n    CLOSE inserted_cursor;\n    DEALLOCATE inserted_cursor;\nEND