DELIMITER $$\n\nCREATE PROCEDURE InsertDocLinks()\nBEGIN\n    DECLARE done INT DEFAULT FALSE;\n    DECLARE v_issue_key, v_doc_key INT;\n    DECLARE v_issue_id VARCHAR(255);\n    DECLARE v_references TEXT;\n\n    -- Cursor declaration to iterate over Issues with multi-line References\n    DECLARE issue_cursor CURSOR FOR \n        SELECT IssueKey, IssueID, References FROM Issue;\n\n    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;\n\n    OPEN issue_cursor;\n\n    read_loop: LOOP\n        FETCH issue_cursor INTO v_issue_key, v_issue_id, v_references;\n        \n        IF done THEN LEAVE read_loop; END IF;\n\n        -- Split references and insert into DocLink if not exists\n        DROP TEMPORARY TABLE IF EXISTS temp_doc_ids;\n        CREATE TEMPORARY TABLE temp_doc_ids (doc_id VARCHAR(255));\n        SET @cur_str = CONCAT(v_references, '<EOL>');  -- add delimiter to end\n\n        WHILE LENGTH(@cur_str) > 0 DO\n            INSERT INTO temp_doc_ids(doc_id) \n            VALUES(SUBSTRING_INDEX(@cur_str, '\n',1));\n            \n            SET @cur_str := SUBSTRING(@cur_str, LOCATE('\n',@cur_str) + 1);\n        END WHILE;\n\n        -- Insert into DocLink if not already present\n        INSERT INTO DocLink (IssueKey, DocKey)\n        SELECT v_issue_key, d.DocKey \n        FROM temp_doc_ids td \n        INNER JOIN Doc d ON td.doc_id = d.DocID\n        LEFT JOIN DocLink dl ON dl.IssueKey = v_issue_key AND dl.DocKey = d.DocKey\n        WHERE dl.LinkKey IS NULL;  -- Ensure no duplicates\n\n        DROP TEMPORARY TABLE IF EXISTS temp_doc_ids;\n\n    END LOOP;\n    \n    CLOSE issue_cursor;\nEND$$\n\nDELIMITER ;