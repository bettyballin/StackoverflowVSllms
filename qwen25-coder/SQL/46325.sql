-- Use SQLCMD scripting variables\n:setvar DatabaseName "YourDatabaseName"\n:setvar OwnerAccount "YourOwnerAccount"\n\nUSE [$(DatabaseName)]\nGO\n\nBEGIN TRANSACTION\nDECLARE @ReturnCode INT\nSELECT @ReturnCode = 0\n\n-- Add the job\nIF NOT EXISTS (SELECT name FROM msdb.dbo.sysjobs WHERE name=N'YourJobName')\nBEGIN\n	EXEC @ReturnCode =  msdb.dbo.sp_add_job @job_name=N'YourJobName', \n			@enabled=1, \n			@notify_level_eventlog=2, \n			@notify_level_email=0, \n			@notify_level_netsend=0, \n			@notify_level_page=0, \n			@delete_level=0, \n			@description=N'No description available.', \n			@category_name=N'[Uncategorized (Local)]', \n			@owner_login_name=N'$(OwnerAccount)', \n			@job_id = @jobId OUTPUT\nEND\nELSE\nBEGIN\n	-- Select job_id of existing job\n	SELECT @job_id = job_id FROM msdb.dbo.sysjobs WHERE name=N'YourJobName'\nEND\n\nIF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback\n/****** Object:  Step [Run Procedure]    Script Date: 1/1/2000 00:00:00 AM ******/\nEXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'Run Procedure', \n			@subsystem=N'TSQL', \n			@command=N'SET NOCOUNT ON;\nUSE [$(DatabaseName)];\nEXEC dbo.YourProcedure;', \n			@database_name=N'$(DatabaseName)', \n			@flags=0\nIF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback\n\nCOMMIT TRANSACTION\nGOTO EndSave\nQuitWithRollback:\n    IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION\nEndSave:\n\nGO