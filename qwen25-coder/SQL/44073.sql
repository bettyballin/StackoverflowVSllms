-- Start a transaction\nBEGIN;\n\n-- Insert a new order\nINSERT INTO orders (order_id, customer_id, amount) VALUES (101, 205, 29.99);\n\n-- Let's say an error occurs here, e.g., trying to delete from a non-existent table\nDELETE FROM non_existent_table WHERE some_condition = true;\n\n-- If the above DELETE statement fails, the transaction will not be committed\nCOMMIT;\n\n-- In case of an exception or error, an explicit rollback can be handled as follows:\nDO $$\nBEGIN\n    -- Start a transaction block\n    BEGIN;\n        -- Perform database operations here\n        INSERT INTO orders (order_id, customer_id, amount) VALUES (102, 206, 39.99);\n        \n        -- Intentionally cause an error\n        DELETE FROM non_existing_table WHERE id = 1;\n    \n    EXCEPTION\n        WHEN OTHERS THEN\n            -- Rollback the transaction in case of any exception\n            ROLLBACK;\n            RAISE NOTICE 'Transaction rolled back due to error: %', SQLERRM;\n    END;\nEND $$;\n\n-- The automatic rollback on commit failure example is usually handled by the database system itself.