-- Define a record for key-value pair\nCREATE OR REPLACE TYPE TKeyVal AS OBJECT (\n    name VARCHAR2(240),\n    value_text VARCHAR2(2000)\n);\n/\n\n-- VARRAY to hold multiple TKeyVal records, max size 1000 can be adjusted\nCREATE OR REPLACE TYPE TMapRec AS VARRAY(1000) OF TKeyVal;\n/\n\n-- Object type to represent a node which can have key-value pairs and child nodes\nCREATE OR REPLACE TYPE TKey AS OBJECT (\n    name VARCHAR2(240),\n    value_text VARCHAR2(2000),\n    children TMapRec,\n    \n    MEMBER FUNCTION getValue RETURN VARCHAR2,\n    MEMBER PROCEDURE setValue(p_value IN VARCHAR2),\n    MEMBER PROCEDURE addChild(p_name IN VARCHAR2, p_valueText IN VARCHAR2)\n);\n/\n\n-- Package to handle operations on TKey and its children\nCREATE OR REPLACE PACKAGE KeyManager AS\n    FUNCTION createKey(p_name IN VARCHAR2, p_valueText IN VARCHAR2) RETURN TKey;\n    PROCEDURE addNestedChild(key IN OUT NOCOPY TKey, p_keyName IN VARCHAR2, p_childKeyName IN VARCHAR2, p_childValueText IN VARCHAR2);\nEND KeyManager;\n/\n\nCREATE OR REPLACE PACKAGE BODY KeyManager AS\n    FUNCTION createKey(p_name IN VARCHAR2, p_valueText IN VARCHAR2) RETURN TKey IS\n        key TKey := TKey(p_name, p_valueText, TMapRec());\n    BEGIN\n        RETURN key;\n    END;\n\n    PROCEDURE addNestedChild(key IN OUT NOCOPY TKey, p_keyName IN VARCHAR2, p_childKeyName IN VARCHAR2, p_childValueText IN VARCHAR2) IS\n        child<TKey := TKey(p_childKeyName, p_childValueText, TMapRec());\n        index PLS_INTEGER;\n    BEGIN\n        -- Find the parent key\n        FOR i IN 1 .. key.children.LAST LOOP\n            IF key.children(i).name = p_keyName THEN\n                index := i;\n                EXIT;\n            END IF;\n        END LOOP;\n\n        -- If not found, add a new key\n        IF index IS NULL THEN\n            index := NVL(key.children.LAST, 0) + 1;\n            key.children.EXTEND(1);\n            key.children(index) := TKey(p_keyName, NULL, TMapRec(child));\n        ELSE\n            -- Add child to the existing key\n            key.children(index).children.EXTEND;\n            key.children(index).children(key.children(index).children.LAST) := child;\n        END IF;\n    END;\n    \n    MEMBER FUNCTION getValue RETURN VARCHAR2 IS\n    BEGIN\n        RETURN Self.value_text;\n    END;\n\n    MEMBER PROCEDURE setValue(p_value IN VARCHAR2) IS\n    BEGIN\n        Self.value_text := p_value;\n    END;\n\n    MEMBER PROCEDURE addChild(p_name IN VARCHAR2, p_valueText IN VARCHAR2) IS \n        child<TKey;\n    BEGIN\n        child := TKey(p_name, p_valueText, TMapRec());\n        Self.children.EXTEND(1);\n        Self.children(Self.children.LAST) := child;\n    END;\nEND KeyManager;\n/