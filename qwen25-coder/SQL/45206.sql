-- Generate all possible customer-month combinations\nWITH CustomerMonths AS (\n    SELECT \n        c.Id AS CustomerId, \n        c.Name AS CustomerName,\n        DATEADD(MONTH, DATEDIFF(MONTH, 0, p.DateFrom), 0) AS MonthDate\n    FROM Customers c\n    CROSS JOIN Payments p\n    GROUP BY c.Id, c.Name, DATEADD(MONTH, DATEDIFF(MONTH, 0, p.DateFrom), 0)\n),\n-- Calculate earnings and bonuses for each customer within the given time period\nCustomerEarningsBonuses AS (\n    SELECT \n        s.CustomerId,\n        SUM(s.Earning) AS TotalEarningsInMonth,\n        c.MonthDate,\n        ISNULL(SUM(bp.Amount), 0) - SUM(cp.Quantity * cp.UnitPrice) AS RemainingBonusAmount,\n        ISNULL(SUM(cp.Quantity * cp.UnitPrice), 0) AS TotalPaidAmount\n    FROM Customers c\n    JOIN Stats s ON c.Id = s.CustomerId AND DATEADD(MONTH, DATEDIFF(MONTH, 0, s.Date), 0) = c.MonthDate\n    LEFT JOIN Payments p ON c.Id = p.CustomerId AND p.DateFrom <= s.Date AND p.DateTo >= s.Date\n    LEFT JOIN CampaignPayment cp ON p.Id = cp.PaymentId\n    LEFT JOIN BonusPayment bp ON p.Id = bp.PaymentId\n    GROUP BY \n        s.CustomerId,\n        DATEADD(MONTH, DATEDIFF(MONTH, 0, s.Date), 0)\n),\n-- Get payments with their respective details\nPaymentsWithDetails AS (\n    SELECT \n        c.CustomerId,\n        c.Name AS CustomerName,\n        p.Id AS PaymentId,\n        SUM(cp.Quantity * cp.UnitPrice) AS Amount,\n        SUM(bp.Amount) AS BonusAmount,\n        p.DateFrom,\n        p.DateTo\n    FROM Customers c\n    JOIN Payments p ON c.Id = p.CustomerId\n    LEFT JOIN CampaignPayment cp ON p.Id = cp.PaymentId\n    LEFT JOIN BonusPayment bp ON p.Id = bp.PaymentId\n    GROUP BY \n        c.CustomerId,\n        c.Name,\n        p.Id, \n        p.DateFrom, \n        p.DateTo\n)\n-- Final result set\nSELECT \n    cm.CustomerId,\n    cm.CustomerName,\n    pd.PaymentId,\n    CASE WHEN pd.PaymentID IS NOT NULL THEN pd.Amount ELSE (ceb.TotalEarningsInMonth - ceb.TotalPaidAmount) END AS Amount,\n    CASE WHEN pd.PaymentID IS NOT NULL THEN pd.BonusAmount ELSE 0 END AS BonusAmount,\n    cm.MonthDate AS DateFrom,\n    DATEADD(DAY, -1, DATEADD(MONTH, 1, cm.MonthDate)) AS DateTo\nFROM CustomerMonths cm\nLEFT JOIN PaymentsWithDetails pd ON cm.CustomerId = pd.CustomerId AND pd.DateFrom <= cm.MonthDate AND pd.DateTo >= DATEADD(DAY, -1, DATEADD(MONTH, 1, cm.MonthDate))\nLEFT JOIN CustomerEarningsBonuses ceb ON cm.CustomerId = ceb.CustomerId AND cm.MonthDate = ceb.MonthDate\nORDER BY \n    cm.CustomerName,\n    cm.MonthDate;