-- Step 1: Create a change log table\nCREATE TABLE ChangeLog (\n    id SERIAL PRIMARY KEY,\n    changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    change_type VARCHAR(50),\n    table_name VARCHAR(255),\n    row_id INT,\n    old_value JSONB,\n    new_value JSONB\n);\n\n-- Step 2: Create triggers (example for Employee table)\nCREATE OR REPLACE FUNCTION log_change() RETURNS TRIGGER AS $$\nBEGIN\n    IF TG_OP = 'INSERT' THEN\n        INSERT INTO ChangeLog(change_type, table_name, row_id, new_value)\n        VALUES ('INSERT', 'Employee', NEW.id, to_jsonb(NEW));\n        RETURN NEW;\n    ELSIF TG_OP = 'DELETE' THEN\n        INSERT INTO ChangeLog(change_type, table_name, row_id, old_value)\n        VALUES ('DELETE', 'Employee', OLD.id, to_jsonb(OLD));\n        RETURN OLD;\n    ELSIF TG_OP = 'UPDATE' THEN\n        IF NEW <> OLD THEN -- if anything has changed\n            INSERT INTO ChangeLog(change_type, table_name, row_id, old_value, new_value)\n            VALUES ('UPDATE', 'Employee', NEW.id, to_jsonb(OLD), to_jsonb(NEW));\n        END IF;\n        RETURN NEW;\n    END IF;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER employee_changes_trigger\nAFTER INSERT OR DELETE OR UPDATE ON Employee FOR EACH ROW EXECUTE FUNCTION log_change();