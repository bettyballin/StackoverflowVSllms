-- Ensure the inner function works correctly in isolation\nBEGIN\n  DECLARE\n    varCursor SYS_REFCURSOR;\n    docid_ NUMBER;\n  BEGIN\n    A_CURSOR_TEST_INNER(varCursor => varCursor);\n    LOOP\n      FETCH varCursor INTO docid_;\n      EXIT WHEN varCursor%NOTFOUND;\n      DBMS_OUTPUT.PUT_LINE('docid_: ' || docid_);\n    END LOOP;\n    CLOSE varCursor;\n  END;\nEND;\n\n-- Ensure the outer function works correctly in isolation\nBEGIN\n  DECLARE\n    varCursor SYS_REFCURSOR;\n    docid_ NUMBER;\n  BEGIN\n    A_CURSOR_TEST_OUTER(varCursor => varCursor);\n    LOOP\n      FETCH varCursor INTO docid_;\n      EXIT WHEN varCursor%NOTFOUND;\n      DBMS_OUTPUT.PUT_LINE('docid_: ' || docid_);\n    END LOOP;\n    CLOSE varCursor;\n  END;\nEND;\n\n-- Your regular test harness remains unchanged\nDECLARE\n  varCursor SYS_REFCURSOR;\n  v_Return NUMBER;\nBEGIN\n  v_Return := A_CURSOR_TEST_OUTER(varCursor => varCursor);\n  DECLARE\n      docid_ NUMBER;\n  BEGIN\n      IF(varCursor %ISOPEN) THEN\n          LOOP\n              FETCH varCursor INTO docid_ ;\n              EXIT WHEN varCursor %NOTFOUND;\n              DBMS_OUTPUT.PUT_LINE('docid_: ' || docid_);\n          END LOOP;\n          CLOSE varCursor;\n      END IF;\n  END;\nEND;