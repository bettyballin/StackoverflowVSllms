-- Assuming we have a parent table and child tables partitioned by some key\nCREATE TABLE parent_table (\n    id SERIAL PRIMARY KEY,\n    partition_key INT NOT NULL,\n    data TEXT,\n    UNIQUE (id)\n) PARTITION BY LIST (partition_key);\n\nCREATE TABLE partition_a PARTITION OF parent_table FOR VALUES IN (1);\nCREATE TABLE partition_b PARTITION OF parent_table FOR VALUES IN (2);\n\n-- Create a separate table to track unique IDs\nCREATE TABLE id_tracker (\n    id SERIAL PRIMARY KEY,\n    CONSTRAINT unique_id UNIQUE (id)\n) WITH (fillfactor=50);\n\n-- Trigger function to ensure ID is unique across partitions\nCREATE OR REPLACE FUNCTION check_unique_across_partitions()\nRETURNS TRIGGER AS $$\nBEGIN\n    -- Attempt to insert or update the tracker table, which will fail if a duplicate is found\n    INSERT INTO id_tracker(id) VALUES (NEW.id) ON CONFLICT DO NOTHING;\n    \n    IF NOT FOUND THEN\n        RAISE EXCEPTION 'ID already exists in another partition';\n    END IF;\n    \n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Create trigger on parent table to enforce unique ID across all partitions\nCREATE TRIGGER enforce_unique_id\nBEFORE INSERT ON parent_table\nFOR EACH ROW EXECUTE FUNCTION check_unique_across_partitions();