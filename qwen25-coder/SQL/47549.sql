DECLARE\n    -- Array to hold the names of tables\n    TYPE table_name_t IS TABLE OF VARCHAR2(30);\n    table_names table_name_t := table_name_t('TABLE1', 'TABLE2', 'TABLE3');\n    \n    output_dir VARCHAR2(100) := 'YOUR_DIRECTORY_NAME'; -- Define your directory object\n    \n    file_handle UTL_FILE.file_type;\n    sql_query VARCHAR2(32767);\n    column_list VARCHAR2(4000);\n    row_data  VARCHAR2(32767);\n    \n    CURSOR dynamic_cur IS\n        EXECUTE IMMEDIATE sql_query;\n\nBEGIN\n    -- Loop through each table name in the array\n    FOR i IN 1..table_names.COUNT LOOP\n        column_list := ''; \n        \n        -- Get column names and construct the header row for CSV\n        FOR c IN (SELECT column_name FROM all_tab_columns WHERE table_name = UPPER(table_names(i)) ORDER BY column_id) LOOP\n            IF column_list IS NOT NULL THEN\n                column_list := column_list || '|';\n            END IF;\n            column_list := column_list || '"' || c.column_name || '"';\n        END LOOP;\n\n        -- Create the file for this table\n        file_handle := UTL_FILE.FOPEN(output_dir, LOWER(table_names(i)) || '.csv', 'w');\n        \n        -- Write the header row to the file\n        UTL_FILE.PUT_LINE(file_handle, column_list);\n        \n        -- Prepare and execute dynamic SQL to fetch rows from the current table\n        sql_query := 'SELECT * FROM ' || UPPER(table_names(i));\n        \n        OPEN dynamic_cur;\n        LOOP\n            FETCH dynamic_cur INTO row_data;\n            EXIT WHEN dynamic_cur%NOTFOUND;\n            \n            -- Construct the CSV line dynamically for each row\n            row_data := ''; \n            FOR c IN (\n                SELECT \n                    '"' || CASE \n                                WHEN data_type = 'NUMBER' THEN TO_CHAR(COLUMN_VALUE)\n                                ELSE REPLACE(COLUMN_VALUE, '"', '""')\n                           END || '"' AS value\n                FROM TABLE(\n                        DBMS_SQL.EXECUTE_QUERY_DYNAMIC(dynamic_cur.rowid%ROWIDPARENT)\n                     )\n            ) LOOP\n                IF row_data IS NOT NULL THEN\n                    row_data := row_data || '|';\n                END IF;\n                row_data := row_data || c.value;\n            END LOOP;\n\n            -- Write the constructed row to the file\n            UTL_FILE.PUT_LINE(file_handle, row_data);\n        END LOOP;\n        CLOSE dynamic_cur;\n        \n        -- Close the file\n        UTL_FILE.FCLOSE(file_handle);\n    END LOOP;    \nEXCEPTION\n    WHEN OTHERS THEN\n        IF UTL_FILE.IS_OPEN(file_handle) THEN\n            UTL_FILE.FCLOSE(file_handle);\n        END IF;\n        RAISE;\nEND;\n/