-- Step 1: Create a helper table\nCREATE TABLE UniquePairs (\n    PairKey1 INT NOT NULL,\n    PairKey2 INT NOT NULL,\n    UNIQUE (PairKey1, PairKey2),\n    CONSTRAINT CHK_UniquePairs CHECK (PairKey1 < PairKey2)\n);\n\n-- Step 2: Create the main table with an INSTEAD OF INSERT trigger\nCREATE TABLE MyTable (\n    Id1 INT NOT NULL,\n    Id2 INT NOT NULL\n);\n\nCREATE TRIGGER trg_MyTable_Insert ON MyTable\nINSTEAD OF INSERT\nAS\nBEGIN\n    SET NOCOUNT ON;\n\n    -- Ensure that each pair in the inserted rows is unique, even when transposed\n    IF EXISTS (\n        SELECT 1 FROM UniquePairs WHERE \n            (PairKey1 = INSERTED.Id1 AND PairKey2 = INSERTED.Id2) OR\n            (PairKey1 = INSERTED.Id2 AND PairKey2 = INSERTED.Id1)\n    )\n    BEGIN\n        RAISERROR ('Duplicate pair with transposed values exists.', 16, 1);\n        ROLLBACK TRANSACTION;\n        RETURN;\n    END\n\n    -- If the check passes, insert into the UniquePairs table\n    DECLARE @TempTable TABLE (\n        MinId INT,\n        MaxId INT\n    );\n\n    INSERT INTO @TempTable (MinId, MaxId)\n    SELECT CASE WHEN Id1 < Id2 THEN Id1 ELSE Id2 END AS MinId,\n           CASE WHEN Id1 > Id2 THEN Id1 ELSE Id2 END AS MaxId\n    FROM INSERTED;\n\n    -- Insert into the UniquePairs table to enforce uniqueness\n    INSERT INTO UniquePairs (PairKey1, PairKey2)\n    SELECT MinId, MaxId FROM @TempTable;\n\n    -- Finally, insert into MyTable as usual\n    INSERT INTO MyTable (Id1, Id2)\n    SELECT Id1, Id2 FROM INSERTED;\nEND;