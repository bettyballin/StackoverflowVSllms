-- Table structure\nCREATE TABLE articles (\n    article_id SERIAL PRIMARY KEY,\n    title TEXT NOT NULL,\n    content TEXT NOT NULL\n);\n\nCREATE TABLE comments (\n    comment_id SERIAL PRIMARY KEY,\n    article_id INT REFERENCES articles(article_id),\n    user_id INT,\n    content TEXT NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE read_by_user (\n    user_id INT,\n    comment_id INT,\n    PRIMARY KEY (user_id, comment_id)\n);\n\n-- Function to update the unread count for an article and a specific user\nCREATE OR REPLACE FUNCTION update_unread_count() RETURNS TRIGGER AS $$\nBEGIN\n    -- Delete existing counts for the article/user pair\n    DELETE FROM unread_comment_counts WHERE article_id = NEW.article_id AND user_id = NEW.user_id;\n\n    -- Insert the new count\n    INSERT INTO unread_comment_counts (article_id, user_id, unread_count)\n    SELECT \n        c.article_id, \n        r.user_id,\n        COUNT(*) AS unread_count\n    FROM comments c\n    LEFT JOIN read_by_user r ON c.comment_id = r.comment_id AND r.user_id = NEW.user_id\n    WHERE c.article_id = NEW.article_id AND r.comment_id IS NULL\n    GROUP BY c.article_id, r.user_id;\n\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Table to store unread counts\nCREATE TABLE unread_comment_counts (\n    article_id INT REFERENCES articles(article_id),\n    user_id INT,\n    unread_count INT DEFAULT 0,\n    PRIMARY KEY (article_id, user_id)\n);\n\n-- Trigger setup\nCREATE TRIGGER update_unread_count_trigger AFTER INSERT OR DELETE ON read_by_user \nFOR EACH ROW EXECUTE FUNCTION update_unread_count();\n\nCREATE TRIGGER insert_comment_trigger AFTER INSERT ON comments\nFOR EACH ROW EXECUTE FUNCTION update_unread_count();