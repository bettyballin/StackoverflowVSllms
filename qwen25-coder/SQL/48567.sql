-- Create a package that will hold the logic and avoid direct mutating access\nCREATE OR REPLACE PACKAGE pkg_table_guard AS\n    TYPE t_t1_pk_list IS TABLE OF TBL1.t1_pk%TYPE;\n    v_t1_appnt_evnt_id_list t_t1_pk_list := t_t1_pk_list();\n    \n    PROCEDURE before_each_row(\n        p_action VARCHAR2,\n        p_new_t1_prnt_t1_pk TBL1.t1_prnt_t1_pk%TYPE,\n        p_new_t1_appnt_evnt_id TBL1.t1_appnt_evnt_id%TYPE\n    );\n    \n    PROCEDURE after_statement;\nEND pkg_table_guard;\n/\n\nCREATE OR REPLACE PACKAGE BODY pkg_table_guard AS\n    PROCEDURE before_each_row(\n        p_action VARCHAR2,\n        p_new_t1_prnt_t1_pk TBL1.t1_prnt_t1_pk%TYPE,\n        p_new_t1_appnt_evnt_id TBL1.t1_appnt_evnt_id%TYPE\n    ) IS\n    BEGIN\n        IF p_action = 'INSERT' OR (p_action = 'UPDATE' AND p_new_t1_prnt_t1_pk IS NOT NULL) THEN\n            v_t1_appnt_evnt_id_list.EXTEND;\n            v_t1_appnt_evnt_id_list(v_t1_appnt_evnt_id_list.COUNT) := p_new_t1_appnt_evnt_id;\n        END IF;\n    END before_each_row;\n\n    PROCEDURE after_statement IS\n        TYPE t_temp_table IS TABLE OF TBL1.t1_appnt_evnt_id%TYPE INDEX BY PLS_INTEGER;\n        v_reassign_count NUMBER(20);\n        v_unique_events t_temp_table;\n        i PLS_INTEGER := 0;\n    BEGIN\n        -- Remove duplicates from application event IDs\n        FOR rec IN (SELECT DISTINCT COLUMN_VALUE AS event_id FROM TABLE(v_t1_appnt_evnt_id_list)) LOOP\n            i := i + 1;\n            v_unique_events(i) := rec.event_id;\n        END LOOP;\n\n        -- Check for violations\n        FOR j IN 1..v_unique_events.COUNT LOOP\n            SELECT COUNT(t1_pk) INTO v_reassign_count \n            FROM TBL1 WHERE t1_appnt_evnt_id = v_unique_events(j) AND t1_prnt_t1_pk IS NOT NULL;\n            \n            IF v_reassign_count > 0 THEN\n                RAISE_APPLICATION_ERROR(-20013, 'Multiple reassignments not allowed');\n            END IF;\n        END LOOP;\n\n        -- Clear the list for next transaction\n        v_t1_appnt_evnt_id_list.DELETE();\n    END after_statement;\nEND pkg_table_guard;\n/\n\n-- Modify the trigger to use the package procedures\nCREATE OR REPLACE TRIGGER TRG_T1_TBL1_COL1\nBEFORE INSERT OR UPDATE ON TBL1\nFOR EACH ROW\nWHEN (NEW.t1_prnt_t1_pk IS NOT NULL)\nBEGIN\n    pkg_table_guard.before_each_row(\n        p_action => CASE WHEN INSERTING THEN 'INSERT' ELSE 'UPDATE' END,\n        p_new_t1_prnt_t1_pk => :NEW.t1_prnt_t1_pk,\n        p_new_t1_appnt_evnt_id => :NEW.t1_appnt_evnt_id\n    );\nEND;\n/\n\nCREATE OR REPLACE TRIGGER TRG_T1_TBL1_COL2\nAFTER INSERT OR UPDATE ON TBL1\nBEGIN\n    pkg_table_guard.after_statement;\nEND;\n/