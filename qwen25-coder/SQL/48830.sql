SET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n\nALTER TRIGGER [dandb_raw_searchNames]\n    ON [dandb_raw]\n    FOR INSERT, UPDATE\nAS\nBEGIN\n    SET NOCOUNT ON;\n\n    -- Ensure all necessary columns are selected into #magic\n    SELECT dunsId, name INTO #magic FROM inserted;\n\n    -- Update searchName based on the name column\n    UPDATE dandb\n    SET dandb.searchName = company_generateSearchName(dandb.name)\n    FROM (SELECT dunsId, name FROM #magic) i\n    INNER JOIN dandb_raw dandb ON i.dunsId = dandb.dunsId;\n\n    -- Add new search matches\n    SELECT c.companyId, dandb.dunsId INTO #newMatches\n    FROM dandb_raw dandb\n    INNER JOIN (SELECT dunsId, name FROM #magic) a ON a.dunsId = dandb.dunsId\n    INNER JOIN companies c  ON dandb.searchName = c.searchBrand\n    AND (LOWER(dandb.url) = LOWER(c.url)\n        OR dandb.url = ''\n        OR c.url = ''\n        OR c.url IS NULL);\n\n    -- Ensure the column list matches both SELECT and INSERT INTO #newMatches\n    INSERT INTO #newMatches (companyId, dunsId)\n    SELECT c.companyId, MAX(dandb.dunsId) AS dunsId\n    FROM dandb_raw dandb\n    INNER JOIN (\n        SELECT CASE WHEN CHARINDEX('/', url) <> 0 THEN LEFT(url, CHARINDEX('/',url)-1)\n               ELSE url END AS urlMatch, *\n        FROM companies\n    ) c ON dandb.url = c.urlMatch\n    WHERE subsidiaryOf = 1 AND isReported = 1 AND dandb.url <> ''\n    AND c.companyId NOT IN (SELECT companyId FROM #newMatches)\n    GROUP BY c.companyId\n    HAVING COUNT(dandb.dunsId) = 1;\n\n    -- Update companies_dandb table with new matches\n    UPDATE cd\n    SET cd.dunsId = nm.dunsId\n    FROM companies_dandb cd\n    INNER JOIN #newMatches nm ON cd.companyId = nm.companyId;\nEND\nGO