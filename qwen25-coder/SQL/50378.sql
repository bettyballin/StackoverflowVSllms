DELIMITER //\n\nCREATE PROCEDURE UpdateTicketsExtraBatch(IN batch_size INT)\nBEGIN\n    DECLARE done INT DEFAULT FALSE;\n    DECLARE ticket_id_batch_start, ticket_id_batch_end INT;\n\n    -- Assuming tickets.id is indexed and sequential\n    SET @max_ticket_id = (SELECT MAX(id) FROM tickets);\n    \n    WHILE NOT done DO\n        START TRANSACTION;\n        \n        SELECT MIN(ticket_id), MAX(ticket_id) INTO ticket_id_batch_start, ticket_id_batch_end\n        FROM (\n            SELECT id AS ticket_id\n            FROM (\n                SELECT id \n                FROM tickets \n                WHERE id > IFNULL(ticket_id_batch_end, 0)\n                ORDER BY id \n                LIMIT batch_size + 1\n                LOCK IN SHARE MODE\n            ) t\n        ) AS sub;\n\n        INSERT INTO tickets_extra (ticket_id, manager_created)\n        SELECT \n          t.id, \n          su.user_id\n        FROM (\n          SELECT \n            t.id, \n            shift_times.shift_id AS shift_id \n          FROM tickets t\n          JOIN shifts ON t.shop_id = shifts.shop_id \n          JOIN shift_times ON shifts.id = shift_times.shift_id AND \n                              DAYOFWEEK(t.created) = shift_times.dow AND \n                              TIME(t.created) BETWEEN shift_times.start AND shift_times.end\n          WHERE t.id >= ticket_id_batch_start AND t.id <= ticket_id_batch_end\n        ) t\n        LEFT JOIN shifts_users su ON t.shift_id = su.shift_id\n        LEFT JOIN shift_positions ON su.shift_position_id = shift_positions.id\n        WHERE shift_positions.manager_role IS NOT NULL; -- Example condition to reduce full table scans\n        \n        COMMIT;\n\n        IF batch_size + 1 > (SELECT COUNT(*) FROM tickets WHERE id >= ticket_id_batch_start AND id <= ticket_id_batch_end) THEN\n            SET done = TRUE;\n        END IF;\n\n    END WHILE;\nEND //\n\nDELIMITER ;