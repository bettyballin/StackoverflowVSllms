BEGIN\n  -- Create a global temporary table or use a package variable to store last known good time.\n  IF NOT (SELECT COUNT(*) FROM user_tab_columns WHERE table_name = 'LAST_KNOWN_SYSTEM_DATE') > 0 THEN\n    EXECUTE IMMEDIATE 'CREATE GLOBAL TEMPORARY TABLE last_known_system_date(capture_time DATE) ON COMMIT DELETE ROWS';\n    INSERT INTO last_known_system_date (capture_time) VALUES (SYSDATE);\n  END IF;\n\n  DECLARE\n    v_last_good_datetime DATE;\n    v_current_datetime DATE := SYSDATE;\n    v_difference_in_days NUMBER;\n  BEGIN\n    SELECT capture_time INTO v_last_good_datetime FROM last_known_system_date;\n\n    -- Assuming more than an hour change should trigger a job reset\n    v_difference_in_days := (v_current_datetime - v_last_good_datetime) * 24;\n\n    IF ABS(v_difference_in_days) > 1 THEN\n      DBMS_OUTPUT.PUT_LINE('System date has been significantly altered.');\n\n      -- Reset all jobs by disabling and re-enabling them.\n      FOR rec IN (SELECT job_name FROM user_scheduler_jobs) LOOP\n        BEGIN\n          DBMS_SCHEDULER.DISABLE(rec.job_name);\n          DBMS_SCHEDULER.ENABLE(rec.job_name);\n        EXCEPTION\n          WHEN OTHERS THEN\n            DBMS_OUTPUT.PUT_LINE('Failed to reset job: ' || rec.job_name || '. Error: ' || SQLERRM);\n        END;\n      END LOOP;\n\n      -- Update the last known good system date.\n      DELETE FROM last_known_system_date;\n      INSERT INTO last_known_system_date (capture_time) VALUES (SYSDATE);\n    ELSE\n      DBMS_OUTPUT.PUT_LINE('System date is within acceptable range.');\n    END IF;\n  END;\n\nEND;\n/