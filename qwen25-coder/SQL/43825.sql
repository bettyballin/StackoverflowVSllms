-- Step 1: Create a temporary table to hold segmentids\nDECLARE @TempSegmentIds TABLE (segmentid INT);\n\n-- Insert your comma-separated segment ids into @TempSegmentIds\nINSERT INTO @TempSegmentIds (segmentid)\nVALUES (1), (2), (3); -- Replace with actual values or dynamic insertion\n\n-- Step 2: Aggregate durations and insert into Activities while capturing new activityids\nDECLARE @ActivityInserts TABLE (activityid INT);\n\nINSERT INTO Activities (actdate, actduration, ticketnumber) \nOUTPUT inserted.activityid INTO @ActivityInserts (activityid)\nSELECT \n    MIN(s.startdate), -- or some other relevant date logic\n    SUM(DATEDIFF(SECOND, s.starttime, s.endtime)), -- Duration in seconds\n    s.ticketid\nFROM ActivitySegments s\nJOIN @TempSegmentIds t ON s.segmentid = t.segmentid\nGROUP BY s.ticketid;\n\n-- Step 3: Update ActivitySegments with new activityids\nUPDATE s\nSET s.activityid = a.activityid\nFROM ActivitySegments s\nJOIN @ActivityInserts ai ON <your_logic_to_match_segments_to_activities>;