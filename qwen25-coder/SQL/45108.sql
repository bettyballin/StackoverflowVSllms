CREATE OR REPLACE FUNCTION duplicate_tables_for_new_year(old_year INT) RETURNS VOID AS $$\nDECLARE\n    new_year ALIAS FOR old_year + 1;\n    table_name TEXT;\n    like_table_name TEXT;\nnew_table_name TEXT;\nBEGIN\n    -- List all tables to be duplicated. Adjust the query if you have naming conventions or prefixes.\n    FOR table_name IN SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name ~ '^orders_'\n    LOOP\n        like_table_name := table_name;\n        new_table_name := substr(table_name, 1, position('_' in table_name)) || new_year;\n\n        -- Create a new table with the same structure as last year's table.\n        EXECUTE format('CREATE TABLE %I (LIKE %I INCLUDING ALL);', new_table_name, like_table_name);\n\n        -- Adjust foreign keys for the new tables.\n        EXECUTE format(\n            $$DO $$\n                DECLARE\n                    constraint_record record;\n                BEGIN\n                    FOR constraint_record IN\n                        SELECT conname, pg_get_constraintdef(c.oid)\n                        FROM pg_catalog.pg_constraint c\n                        JOIN pg_catalog.pg_class t ON t.oid = c.conrelid\n                        WHERE t.relkind = 'r'\n                            AND t.relname = %L\n                            AND confrelid != 0 -- Filter out non-FK constraints.\n                    LOOP\n                        EXECUTE format('ALTER TABLE %I DROP CONSTRAINT %s;', %L, constraint_record.conname);\n                        EXECUTE format('ALTER TABLE %I ADD CONSTRAINT %I ' || constraint_record.pg_get_constraintdef || ';',\n                                       %L, replace(constraint_record.conname, like_table_name, new_table_name));\n                    END LOOP;\n                END $$;$$,\n            old_year || '_%', -- Pattern matching any table for the previous year.\n            new_table_name,\n            like_table_name\n        );\n    END LOOP;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Call this function with the current year to prepare tables for next year.\nSELECT duplicate_tables_for_new_year(2023);