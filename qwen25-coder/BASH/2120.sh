# Function to determine if a DLL is 32-bit or 64-bit\nfunction Get-DllArchitecture {\n    param (\n        [string]$filePath\n    )\n    \n    # Use the dumpbin utility to get the architecture information\n    $dumpBinPath = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\bin\Hostx86\x86\dumpbin.exe"\n    \n    if (-Not (Test-Path $dumpBinPath)) {\n        Write-Error "dumpbin not found at the specified path."\n        return\n    }\n\n    $output = & $dumpBinPath /headers $filePath | Select-String -Pattern "machine"\n\n    if ($output) {\n        if ($output.Line -match "x86") {\n            return "32-bit"\n        }\n        elseif ($output.Line -match "x64|AMD64") {\n            return "64-bit"\n        }\n        else {\n            Write-Error "Unknown architecture: $($output.Line)"\n        }\n    } else {\n        Write-Error "Could not determine the architecture of $filePath."\n    }\n}\n\n# Directory containing DLLs\n$directoryPath = "C:\Path\To\Your\Dlls"\n\n# Expected architecture (either "32-bit" or "64-bit")\n$expectedArchitecture = "64-bit"\n\n# Check all DLL files in the directory\nGet-ChildItem -Path $directoryPath -Filter *.dll | ForEach-Object {\n    $architecture = Get-DllArchitecture $_.FullName\n\n    if ($architecture -eq $expectedArchitecture) {\n        Write-Host "$($_.Name) is $architecture as expected."\n    } else {\n        Write-Error "$($_.Name) is $architecture, but expected $expectedArchitecture."\n    }\n}