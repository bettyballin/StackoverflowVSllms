(function($) {\n    // Define our plugin constructor function\n    $.fn.ajaxIcon = function(options) {\n        return this.each(function() {\n            var $this = $(this);\n\n            // If an instance already exists, get it instead of creating a new one\n            if ($this.data('ajaxicon')) {\n                return;\n            }\n\n            // Default settings for the plugin\n            var settings = $.extend({\n                // Configuration defaults here\n            }, options);\n\n            // Define your plugin's methods and properties here\n            function AJAXIcon(element, settings) {\n                this.$el = element;\n                this.settings = settings;\n\n                this.start = function() {\n                    // Start logic here\n                    console.log('Starting AJAX icon');\n                };\n\n                this.stop = function() {\n                    // Stop logic here\n                    console.log('Stopping AJAX icon');\n                };\n            }\n\n            var ajaxIconInstance = new AJAXIcon($this, settings);\n\n            // Store the instance of the plugin on the element itself using jQuery's .data()\n            $this.data('ajaxicon', ajaxIconInstance);\n        });\n    };\n\n    // Extend jQuery prototype to allow access to methods directly via data attribute\n    $.fn.startAjaxIcon = function() {\n        return this.each(function() {\n            var iconInstance = $(this).data('ajaxicon');\n            if (iconInstance) {\n                iconInstance.start();\n            }\n        });\n    };\n\n    $.fn.stopAjaxIcon = function() {\n        return this.each(function() {\n            var iconInstance = $(this).data('ajaxicon');\n            if (iconInstance) {\n                iconInstance.stop();\n            }\n        });\n    };\n}(jQuery));\n\n// Usage example:\n$("#myId").ajaxIcon();  // Initializes the plugin\n$("#myId").startAjaxIcon(); // Calls start method\nsetTimeout(function() {\n    $("#myId").stopAjaxIcon(); // Calls stop method after some delay\n}, 3000);