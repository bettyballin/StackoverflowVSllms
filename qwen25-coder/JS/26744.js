// Function to validate email for main entry (very loose)\nfunction isValidGenericEmail(email) {\n    const genericPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;\n    return genericPattern.test(email);\n}\n\n// Custom validators for specific agencies\nconst agencyValidators = {\n    'agencyA': function(email) {\n        // More restrictive pattern if necessary\n        const pattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;\n        return pattern.test(email);\n    },\n    'agencyB': function(email) {\n        // Agency-specific rules, e.g., only certain domains allowed\n        return email.endsWith('@valid-domain.com');\n    }\n};\n\nfunction validateEmailForAgency(email, agencyName) {\n    const mainValidation = isValidGenericEmail(email);\n    if (!mainValidation) {\n        throw new Error("Invalid email format.");\n    }\n\n    const specificValidator = agencyValidators[agencyName];\n    if (specificValidator && !specificValidator(email)) {\n        throw new Error(`The email does not meet ${agencyName}'s requirements.`);\n    }\n}\n\n// Usage example\nconst email = 'user@example.com';\ntry {\n    validateEmailForAgency(email, 'agencyA');\n    console.log("Email is valid for agency A.");\n} catch (error) {\n    console.error(error.message);\n}