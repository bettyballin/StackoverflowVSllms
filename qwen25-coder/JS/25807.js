function sanitizeHTML(input) {\n    const allowedTags = ['b', 'i', 'u', 'a', 'ul', 'ol', 'li'];\n    const doc = new DOMParser().parseFromString(input, 'text/html');\n    walkThroughAndSanitize(doc.body);\n    return doc.body.innerHTML;\n}\n\nfunction walkThroughAndSanitize(element) {\n    for (let i = element.childNodes.length - 1; i >= 0; i--) {\n        const child = element.childNodes[i];\n        if (child.nodeType === Node.ELEMENT_NODE) {\n            if (!allowedTags.includes(child.tagName.toLowerCase())) {\n                // remove non-allowed tags but retain child nodes\n                while (child.firstChild) {\n                    element.insertBefore(child.firstChild, child);\n                }\n                element.removeChild(child);\n            } else {\n                sanitizeAttributes(child);\n                walkThroughAndSanitize(child);\n            }\n        }\n    }\n}\n\nfunction sanitizeAttributes(element) {\n    const allowedAttributes = ['href', 'style'];\n    for (let attr of element.attributes) {\n        if (!allowedAttributes.includes(attr.name)) {\n            element.removeAttributeNode(attr);\n        } else {\n            // Further sanitization for specific attributes\n            switch (attr.name.toLowerCase()) {\n                case 'href':\n                    if (!/^https?:\/\//i.test(attr.value)) { // Allow only http/https URLs\n                        element.removeAttribute(attr.name);\n                    }\n                    break;\n                case 'style':\n                    // Simple example of style cleaning\n                    // More sophisticated handling might be necessary or use dedicated libraries.\n                    const styles = attr.value.match(/[\w-]+:\s*[^;]+(?=;|$)/g) || [];\n                    const newStyle = styles.filter(style => /color|font-family/i.test(style.split(':')[0])).join('; ');\n                    element.setAttribute(attr.name, newStyle);\n                    break;\n            }\n        }\n    }\n}\n\n// Example usage\nconst userInput = "<p>This is a <b>test</b> with some <script>alert('XSS')</script><a href='javascript:alert(1)'>bad link</a></p>";\nconsole.log(sanitizeHTML(userInput));