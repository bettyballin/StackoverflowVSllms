function getRandomColor(baseHue, baseSaturation, baseLightness) {\n    // Randomly perturb the base hue, saturation, and lightness within certain limits\n    const h = (baseHue + Math.random() * 30 - 15 + 360) % 360; // Keep hue between 0-360 degrees\n    const s = Math.min(100, baseSaturation + Math.random() * 20 - 10); // Saturation adjustments\n    const l = Math.min(100, baseLightness + Math.random() * 20 - 10); // Lightness adjustments\n\n    // Convert HSL to RGB\n    function hslToRgb(h, s, l) {\n        let r, g, b;\n        s /= 100;\n        l /= 100;\n\n        const c = (1 - Math.abs(2 * l - 1)) * s;\n        const x = c * (1 - Math.abs((h / 60 % 2) - 1));\n        const m = l - c / 2;\n\n        if (h < 60) [r, g, b] = [c, x, 0];\n        else if (h < 120) [r, g, b] = [x, c, 0];\n        else if (h < 180) [r, g, b] = [0, c, x];\n        else if (h < 240) [r, g, b] = [0, x, c];\n        else if (h < 300) [r, g, b] = [x, 0, c];\n        else [r, g, b] = [c, 0, x];\n\n        return [\n            Math.round((r + m) * 255),\n            Math.round((g + m) * 255),\n            Math.round((b + m) * 255)\n        ];\n    }\n\n    const rgb = hslToRgb(h, s, l);\n    return `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`;\n}\n\nfunction generateColorPalette(numColors) {\n    const palette = [];\n    const baseHue = Math.random() * 360; // Start from a random hue\n    const baseSaturation = 50; // Middle ground saturation\n    const baseLightness = 70;  // Light color bias\n\n    for (let i = 0; i < numColors; i++) {\n        palette.push(getRandomColor(baseHue, baseSaturation, baseLightness));\n    }\n\n    return palette;\n}\n\n// Example usage: Generate a palette with 10 colors\nconsole.log(generateColorPalette(10));