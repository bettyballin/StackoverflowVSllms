// Utility function to generate random string\nfunction generateRandomString(length) {\n    let text = '';\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for(let i=0; i < length; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\n\n// Generate a code verifier\nconst codeVerifier = generateRandomString(128);\n\n// Encode the code verifier to create the code challenge\nconst encoder = new TextEncoder();\nconst data = encoder.encode(codeVerifier);\nconst digest = await crypto.subtle.digest('SHA-256', data);\nconst base64 = btoa(String.fromCharCode(...new Uint8Array(digest)));\nconst codeChallenge = base64.replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');\n\n// Define the OpenID Connect configuration parameters\nconst authUrl = 'https://authorization-server.com/auth';\nconst clientId = 'your-client-id';\nconst redirectUri = 'https://your-app.com/callback';\nconst responseType = 'code';\nconst scopes = ['openid', 'profile'];\n\n// Construct the authorization request URL\nconst url = `${authUrl}?response_type=${responseType}&code_challenge_method=S256&code_challenge=${encodeURIComponent(codeChallenge)}&client_id=${clientId}&redirect_uri=${encodeURIComponent(redirectUri)}&scope=${scopes.join(' ')}`;\n\n// Redirect to the OpenID Connect provider for user authentication\nwindow.location.href = url;\n\n// Handle the redirect back and exchange the code for tokens\nfunction handleRedirect() {\n    const params = new URLSearchParams(window.location.search);\n    const authCode = params.get('code');\n\n    if (authCode) {\n        // POST request to token endpoint with the code & verifier\n        fetch('https://authorization-server.com/token', {\n            method: 'POST',\n            headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n            body: new URLSearchParams({\n                grant_type: 'authorization_code',\n                client_id: clientId,\n                redirect_uri: redirectUri,\n                code: authCode,\n                code_verifier: codeVerifier\n            })\n        }).then(response => response.json())\n          .then(data => {\n              console.log('Access token:', data.access_token);\n          });\n    }\n}\n\n// Example of handling the callback in your SPAs logic\nhandleRedirect();