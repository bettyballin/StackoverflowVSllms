// Step 1: Load data into an array of hashmaps\nresult_set = [\n    { 'Id': 1, 'Name': 'Node 1', 'ParentId': 0, 'Order': 10 },\n    { 'Id': 2, 'Name': 'Node 1.1', 'ParentId': 1, 'Order': 10 },\n    { 'Id': 3, 'Name': 'Node 2', 'ParentId': 0, 'Order': 20 },\n    { 'Id': 4, 'Name': 'Node 1.1.1', 'ParentId': 2, 'Order': 10 },\n    { 'Id': 5, 'Name': 'Node 2.1', 'ParentId': 3, 'Order': 10 },\n    { 'Id': 6, 'Name': 'Node 1.2', 'ParentId': 1, 'Order': 20 }\n]\n\n// Step 2: Initialize a hashmap to hold nodes by ID\nnodes_by_id = {}\n\nfor node in result_set:\n    nodes_by_id[node['Id']] = {\n        'name': node['Name'],\n        'children': []\n    }\n\n// Step 3: Build tree from flat table structure\nfor node_id, node_data in nodes_by_id.items():\n    parent_id = result_set[node_id-1]['ParentId'] // Adjust for zero-indexing or direct reference\n    if parent_id != 0:\n        nodes_by_id[parent_id]['children'].append(node_id)\n\n// Step 4: Sort children by 'Order'\nfor node in nodes_by_id.values():\n    node['children'].sort(key=lambda x: next(filter(lambda y: y['Id'] == x, result_set))['Order'])\n\n// Helper function to recursively output as HTML\nfunction print_tree_as_html(node_id, indent):\n    node = nodes_by_id[node_id]\n    print(''.join(['&nbsp;' * indent, '<div>', node['name'], '</div>']))\n    for child_id in node['children']:\n        print_tree_as_html(child_id, indent + 4)\n\n// Print the whole tree starting from root (ParentId=0)\nfor node_id, node_data in nodes_by_id.items():\n    if result_set[node_id-1]['ParentId'] == 0: // Identify top-level nodes\n        print_tree_as_html(node_id, 0)