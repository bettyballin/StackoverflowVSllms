let cache = {};\nlet pendingRequests = {};\n\nasync function fetchWithCache(url) {\n    if (cache[url]) {\n        return Promise.resolve(cache[url]);\n    }\n\n    if (!pendingRequests[url]) {\n        pendingRequests[url] = fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                cache[url] = data;\n                delete pendingRequests[url]; // Clean up after the request is done\n                return data;\n            })\n            .catch(error => {\n                delete pendingRequests[url];\n                throw error;\n            });\n    }\n\n    return pendingRequests[url];\n}\n\n// Usage example:\nfetchWithCache('/api/data').then(data => {\n    console.log('Data received:', data);\n});\n\nfetchWithCache('/api/data').then(data => { // This call will use the cached version\n    console.log('Cached Data received:', data);\n});