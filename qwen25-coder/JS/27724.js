// Debounce function to limit execution rate\nfunction debounce(func, wait) {\n    let timeout;\n    return function(...args) {\n        const context = this;\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(context, args), wait);\n    };\n}\n\n// Your original onUpdate function\nfunction myUpdateFunction(event) {\n    // Logic to resize elements and draw graphs\n}\n\n// Create a debounced version of your onUpdate function\nconst debouncedUpdateFunction = debounce(myUpdateFunction, 200); // Adjust the delay as needed\n\n// Initialize Sortable with the debounced function\nSortable.create('my-sortable-element', {\n    onUpdate: debouncedUpdateFunction\n});