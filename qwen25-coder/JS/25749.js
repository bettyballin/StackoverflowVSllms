// A simple logger class for each channel\nclass ChannelLogger {\n    constructor(channelName) {\n        this.channelName = channelName;\n        this.logs = [];\n    }\n\n    log(message) {\n        // Add message to the logs array\n        const timestamp = new Date().toISOString();\n        this.logs.push(`[${timestamp}] ${message}\n`);\n\n        // Flush logs every 2 minutes (120000 ms)\n        setTimeout(() => this.flushLogs(), 120000);\n    }\n\n    flushLogs() {\n        if (this.logs.length > 0) {\n            const fs = air.FileStream;\n            const file = new air.File(applicationStorageDirectory, `${this.channelName}.log`);\n\n            // Ensure the directory exists\n            file.parent.createDirectory();\n\n            try {\n                if (!file.exists) {\n                    file.create();\n                }\n\n                // Open in append mode\n                fs.open(file, air.FileMode.APPEND);\n                fs.writeUTFBytes(this.logs.join(''));\n                fs.close();\n\n                // Clear logs after writing to disk\n                this.logs = [];\n            } catch (e) {\n                console.error("Error writing to log file:", e.message);\n            }\n        }\n    }\n}\n\n// Usage example\nconst logger = new ChannelLogger('#general');\nlogger.log('User joined the channel.');\nlogger.log('Message sent by user.');