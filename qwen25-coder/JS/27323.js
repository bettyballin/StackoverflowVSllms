const express = require('express');\nconst session = require('express-session');\nconst RedisStore = require('connect-redis')(session);\nconst redisClient = require('redis').createClient();\n\nconst app = express();\nconst sess = {\n    store: new RedisStore({ client: redisClient }),\n    secret: 'your-secret-key',\n    saveUninitialized: false,\n    resave: false\n};\n\napp.use(session(sess));\n\napp.post('/login', (req, res) => {\n    // Check user credentials validity...\n    // If valid, invalidate any previous session for this user\n    req.session = null;\n    redisClient.del('user:' + username); // Assuming you store sessions with a key like 'user:username'\n\n    // Create a new session and set a new token\n    sess.store.set(req.sessionID, { userId: userId, ip: req.ip }, (err) => {\n        if (err){\n            return res.status(500).send('Internal error');\n        }\n        res.send('Logged in successfully');\n    });\n});\n\napp.get('/protected', (req, res) => {\n    // Check session existence and validate IP\n    sess.store.get(req.sessionID, (err, sessionData) => {\n        if (!sessionData || sessionData.ip !== req.ip){\n            return res.status(401).send('Unauthorized');\n        }\n        res.send('Protected content');\n    });\n});\n\napp.listen(3000);