// Define a DataSource for fetching tree data lazily.\nvar siteTreeDS = new SmartGWT.TreeDataSource({\n    ID: "siteTreeDS",\n    fields: [\n        {name: "id"},\n        {name: "name"},\n        {name: "leaf", type:"boolean"}\n    ],\n    parentNodeProperty: "parentId",\n    folderIcons: ["countryIcon.png", "stateIcon.png", "cityIcon.png"],\n    leafIcon: "siteIcon.png"\n});\n\n// Now create a TreeGrid that uses this DataSource\nvar siteTree = new SmartGWT.TreeGrid({\n    width: 400,\n    height: 350,\n    canExpandEmptyFolders: true,\n    folderImage: "[SKIN]/folder.gif",\n    leafImage: "[SKIN]/table.gif",\n    closedFolderImage: "[SKIN]/folder_closed.gif",\n    dataSource: siteTreeDS\n});\n\nsiteTree.fetchChildren = function (parentNode) {\n    // Request children from server and return a Promise\n    var d = new SmartGWT.DataSource.getDeferredResponse();\n    var xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n            // Assuming the server returns the children as an array of JSON objects.\n            var childrenData = JSON.parse(xhr.responseText);\n            d.provide(childrenData);\n        }\n    };\n    xhr.open("GET", "/loadChildren?parentId=" + parentNode.id + "&parentType=" + parentNode.nodeType, true);\n    xhr.send(null);\n    return d;\n};\n\nsiteTree.draw();