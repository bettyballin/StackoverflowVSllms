async function encryptMessage(message, key) {\n    const iv = crypto.getRandomValues(new Uint8Array(12)); // GCM recommended 96-bit IV\n    const encodedMessage = new TextEncoder().encode(message);\n\n    const cipherText = await crypto.subtle.encrypt(\n        { name: "AES-GCM", iv: iv },\n        key,\n        encodedMessage\n    );\n\n    return { iv, encryptedData: new Uint8Array(cipherText) };\n}\n\nasync function generateKey(password){\n    const encoder = new TextEncoder();\n    const passwordBuffer = encoder.encode(password);\n\n    return await crypto.subtle.importKey(\n        "raw",\n        passwordBuffer,\n        {name: "PBKDF2"},\n        false,\n        ["deriveBits", "deriveKey"]\n    );\n}\n\n// Example usage\n(async () => {\n    const passwordKey = await generateKey("your-password");\n    const aesKey = await crypto.subtle.deriveKey(\n        {\n            name: "PBKDF2",\n            salt: new Uint8Array(16), // Random or fixed\n            iterations: 100000,\n            hash: "SHA-256"\n        },\n        passwordKey,\n        {name: "AES-GCM", length: 256},\n        false,\n        ["encrypt", "decrypt"]\n    );\n\n    const encrypted = await encryptMessage("Hello, World!", aesKey);\n    console.log(encrypted); // Send this to your server\n})();