const data = {\n  name: "root",\n  children: [\n    { name: "child1" },\n    { name: "child2", children: [{ name: "grandchild1" }] },\n    // add more nodes as required\n  ]\n};\n\nconst width = 640, \n      height = 640,\n      radius = (Math.min(width, height) / 2) - 80;\n\nconst treeLayout = d3.tree()\n    .size([2 * Math.PI, radius]); // set the size of the layout\n\n// Create a root node\nconst root = d3.hierarchy(data)\n              .sort((a, b) => a.data.name.localeCompare(b.data.name));\n\nconst nodes = treeLayout(root);\nnodes.each((d,i) => {\n  // convert polar coordinates to x/y\n  d.y *= radius;\n  const x1 = d.x >= Math.PI ? d.y * Math.cos(d.x - Math.PI / 2) : -d.y * Math.cos(Math.PI / 2 - d.x);\n  const y1 = d.x >= Math.PI ? -d.y * Math.sin(d.x - Math.PI / 2) : -d.y * Math.sin(Math.PI / 2 - d.x);\n  d.radialX = x1;\n  d.radialY = y1;\n});\n\nconst canvas = d3.select("body")\n    .append("svg:svg")\n        .attr('width', width)\n        .attr('height', height)\n      .append('g')\n          .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");\n\ncanvas.selectAll('.node').data(nodes.descendants())\n    .enter().append('circle')\n        .attr('r', 4.5)\n        .attr('cx', function(d) { return d.radialX; })\n        .attr('cy', function(d) { return d.radialY; });\n\nconst linkGenerator = d3.linkRadial()\n      .angle(function(d) { return d.x - Math.PI / 2; })\n      .radius(function(d) { return d.y; });\n\ncanvas.selectAll('.link').data(nodes.descendants().slice(1))\n    .enter().append('path')\n        .attr("class", "link")\n        .attr("d", linkGenerator);