function treeEditDistance(tree1, tree2):\n    // Create table for storing distances\n    let distanceTable = array of size [n+1][m+1]\n    n = number of nodes in tree1\n    m = number of nodes in tree2\n\n    // Initialize the table with base cases\n    for i from 0 to n:\n        distanceTable[i][0] = i  // Remove all nodes from tree1 to get empty tree\n    for j from 0 to m:\n        distanceTable[0][j] = j  // Insert all nodes into tree1 to create tree2\n\n    // Compute the distances using dynamic programming\n    for i from 1 to n:\n        for j from 1 to m:\n            cost = if tree1 node labels match with tree2 node labels then 0 else 1\n            distanceTable[i][j] = min(\n                distanceTable[i-1][j] + 1,   // Deletion from tree1\n                distanceTable[i][j-1] + 1,   // Insertion into tree1\n                distanceTable[i-1][j-1] + cost // Substitution between nodes in tree1 and tree2\n            )\n\n    return distanceTable[n][m]