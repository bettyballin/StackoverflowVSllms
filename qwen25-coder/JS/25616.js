function getNiceTicks(minValue, maxValue, tickCount=5) {\n    // Find the range\n    let range = maxValue - minValue\n    \n    // Calculate an order-of-magnitude for the range\n    let niceRange = niceNum(range, false)\n    \n    // Calculate a tick spacing depending on the nice range and desired number of ticks\n    let niceTickSpacing = niceNum(niceRange / (tickCount - 1), true)\n    \n    // Find the start value that aligns to a multiple of the tick spacing\n    let niceMinValue = Math.floor(minValue / niceTickSpacing) * niceTickSpacing\n    \n    // Find the end value that aligns to a multiple of the tick spacing\n    let niceMaxValue = Math.ceil(maxValue / niceTickSpacing) * niceTickSpacing\n    \n    return {\n        minValue: niceMinValue,\n        maxValue: niceMaxValue,\n        tickSpacing: niceTickSpacing\n    }\n}\n\nfunction niceNum(roundVal, roundDown) {\n    let expt // exponent of range\n    let fraction // fractional part of range\n    let niceFraction // nice, rounded fraction\n    \n    if (roundVal == 0.0)\n        return 0\n    \n    expt = Math.floor(Math.log10(roundVal))\n    fraction = roundVal / Math.pow(10, expt)    \n    \n    if (roundDown) {\n       if (fraction < 1.5)\n          niceFraction = 1\n       else if (fraction < 3)\n          niceFraction = 2\n       else if (fraction < 7)\n          niceFraction = 5\n       else\n          niceFraction = 10\n    } else {\n       if (fraction <= 1)\n          niceFraction = 1\n       else if (fraction <= 2)\n          niceFraction = 2\n       else if (fraction <= 5)\n          niceFraction = 5\n       else\n          niceFraction = 10    \n    }\n    \n    return niceFraction * Math.pow(10, expt)\n}