let scrollInterval = null;\nlet stopScrolling = false;\n\nfunction startScrolling() {\n    // Clear any existing interval to prevent overlap\n    clearTimeout(scrollInterval);\n\n    // Check the mouse position relative to window dimensions\n    const mouseX = globalMouseX; // Assume this is set elsewhere\n    const mouseY = globalMouseY; // Assume this is set elsewhere\n    const threshold = 50; // Adjust as necessary\n\n    let scrollAmount = 10; // How many pixels to scroll at a time\n\n    if (mouseX <= threshold) {\n        // Scroll left\n        window.scrollBy(-scrollAmount, 0);\n    } else if (mouseX >= window.innerWidth - threshold) {\n        // Scroll right\n        window.scrollBy(scrollAmount, 0);\n    }\n\n    if (mouseY <= threshold) {\n        // Scroll up\n        window.scrollBy(0, -scrollAmount);\n    } else if (mouseY >= window.innerHeight - threshold) {\n        // Scroll down\n        window.scrollBy(0, scrollAmount);\n    }\n\n    // Schedule the function to run again after a short delay\n    if (!stopScrolling) {\n        scrollInterval = setTimeout(startScrolling, 10);\n    }\n}\n\n// Setup mouse move listener to update positions and potentially start scrolling\ndocument.addEventListener('mousemove', (event) => {\n    globalMouseX = event.clientX;\n    globalMouseY = event.clientY;\n\n    // Start or continue scrolling if near an edge\n    if (\n        globalMouseX <= 50 || \n        globalMouseX >= window.innerWidth - 50 ||\n        globalMouseY <= 50 ||\n        globalMouseY >= window.innerHeight - 50\n    ) {\n        startScrolling();\n    } else {\n        // Stop scrolling when not near any edge\n        clearTimeout(scrollInterval);\n        stopScrolling = true;\n    }\n});