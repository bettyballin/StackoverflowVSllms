// Initial state of the robot\nvar currentPositionX = 0\nvar currentPositionY = 0\nvar currentAngle = 0 // In degrees\n\nfunction updatePosition(deltaX, deltaY) {\n    currentPositionX += deltaX\n    currentPositionY += deltaY\n}\n\nfunction rotate(angleDegrees) {\n    currentAngle += angleDegrees\n    if (currentAngle >= 360) currentAngle -= 360\n    if (currentAngle < 0) currentAngle += 360\n}\n\nfunction move(distanceInches) {\n    // Convert angle to radians for trig functions\n    var angleRadians = currentAngle * Ï€ / 180\n    \n    // Calculate the x and y components of the movement\n    deltaX = distanceInches * cos(angleRadians)\n    deltaY = distanceInches * sin(angleRadians)\n    \n    updatePosition(deltaX, deltaY)\n}\n\nfunction executeMovementSet(movements) {\n    for each movement in movements:\n        if (movement is a rotation):\n            rotate(movement.angle)\n        else if (movement is a move command):\n            move(movement.distance)\n}\n\n// Example usage\nvar movementSet = [\n    { type: "rotate", angle: 45 },\n    { type: "move", distance: 3 },\n    { type: "rotate", angle: 90 },\n    { type: "move", distance: 10 },\n    { type: "rotate", angle: -110 },\n    { type: "move", distance: 5 },\n    { type: "rotate", angle: 10 },\n    { type: "move", distance: 1 }\n]\n\nexecuteMovementSet(movementSet)\n\n// After executing, currentPositionX and currentPositionY will reflect where the robot thinks it is.