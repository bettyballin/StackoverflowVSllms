const puppeteer = require('puppeteer');\nconst fs = require('fs');\nconst path = require('path');\n\nasync function capturePages(urls, hostMap) {\n    const browser = await puppeteer.launch({headless: true});\n    \n    for (const url of urls) {\n        for (let [key, value] of Object.entries(hostMap)) {\n            const page = await browser.newPage();\n            // Rewrite the request URL to point to the test or live host\n            await page.setRequestInterception(true);\n            page.on('request', interceptedRequest => {\n                let newUrl = interceptedRequest.url().replace(/^https?:\/\/[^/]+/, value);\n                interceptedRequest.continue({url: newUrl});\n            });\n            \n            await page.goto(url, {waitUntil: 'networkidle2'});\n            await page.screenshot({\n                path: path.join(key, url.replace(/[^a-z0-9]/gi, '_') + '.png'),\n                fullPage: true\n            });\n\n            await page.close();\n        }\n    }\n\n    await browser.close();\n}\n\n// Example usage\nconst urls = ['http://example.com/page1', 'http://example.com/page2'];\nconst hostMap = {\n    live: 'https://live.example.com',\n    test: 'https://test.example.com'\n};\n\ncapturePages(urls, hostMap);