// Example of LRU Cache with Size Limit and Compression in JavaScript\n\nclass LRUCache {\n    constructor(maxSize) {\n        this.cache = new Map();\n        this.maxSize = maxSize;\n    }\n\n    get(key) {\n        if (!this.cache.has(key)) return null;\n\n        const value = this.cache.get(key);\n        this.cache.delete(key);\n        this.cache.set(key, value); // Move to the end\n        return JSON.parse(atob(value)); // Decompress data\n    }\n\n    set(key, value) {\n        if (this.cache.size === this.maxSize && !this.cache.has(key)) {\n            this.cache.delete(this.oldest()); // Remove the oldest entry\n        }\n        const compressed = btoa(JSON.stringify(value)); // Compress data\n        this.cache.set(key, compressed);\n    }\n\n    oldest() { \n        return this.cache.keys().next().value;\n    }\n}\n\nconst cache = new LRUCache(5); // Max 5 items