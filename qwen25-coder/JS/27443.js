// Simple Publish-Subscribe implementation\nclass PubSub {\n    constructor() {\n        this.events = {};\n    }\n\n    subscribe(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = [];\n        }\n        this.events[eventName].push(callback);\n    }\n\n    publish(eventName, data) {\n        const event = this.events[eventName];\n        if (event) {\n            // Notify all subscribers in parallel\n            event.forEach(cb => cb(data));\n        }\n    }\n}\n\n// Usage example\nconst pubsub = new PubSub();\n\n// Subscribing to an AJAX completion event\npubsub.subscribe('ajaxCompleted', function(data) {\n    console.log('Listener 1 received:', data);\n    // Update UI Part 1\n});\n\npubsub.subscribe('ajaxCompleted', function(data) {\n    console.log('Listener 2 received:', data);\n    // Update UI Part 2\n});\n\n// Simulating an AJAX call using fetch\nfunction simulateAjaxCall() {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            const response = { status: 'success', message: 'Data fetched' };\n            resolve(response);\n        }, 1000); // Simulate network delay\n    });\n}\n\n// Handling AJAX completion and notifying all subscribers\nsimulateAjaxCall().then(data => {\n    pubsub.publish('ajaxCompleted', data);\n});