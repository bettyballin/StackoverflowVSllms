class FunctionQueue {\n    constructor() {\n        this.queue = [];\n    }\n\n    enqueue(func) {\n        // Store the function in the queue\n        if (typeof func === 'function') {\n            this.queue.push(func);\n        } else {\n            console.error("Only functions can be enqueued");\n        }\n    }\n\n    dequeueAndExecute() {\n        // Remove a function from the front of the queue and execute it\n        const func = this.queue.shift();\n        if (func) {\n            func();\n        } else {\n            console.log("Queue is empty, nothing to execute.");\n        }\n    }\n\n    isEmpty() {\n        return this.queue.length === 0;\n    }\n\n    size() {\n        return this.queue.length;\n    }\n}\n\n// Example usage:\nconst functionQueue = new FunctionQueue();\n\nfunction doSomething() {\n    console.log("Doing something!");\n}\n\nfunctionQueue.enqueue(doSomething);\nconsole.log(`Queue size: ${functionQueue.size()}`); // Output: Queue size: 1\n\nfunctionQueue.dequeueAndExecute(); // Output: Doing something!\nconsole.log(`Queue size after execution: ${functionQueue.size()}`); // Output: Queue size after execution: 0