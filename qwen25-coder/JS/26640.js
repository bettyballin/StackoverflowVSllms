// Assuming you have a reference to the img element\nvar imgElement = document.querySelector('img'); // Replace with your selector\n\nif (imgElement) {\n    var ioService = Components.classes["@mozilla.org/network/io-service;1"]\n                              .getService(Components.interfaces.nsIIOService);\n    var uri = ioService.newURI(imgElement.src, null, null);\n\n    var clipboardHelper = Components.classes["@mozilla.org/widget/clipboardhelper;1"]\n                                    .getService(Components.interfaces.nsIClipboardHelper);\n    \n    // For text data, you would use:\n    // clipboardHelper.copyStringToClipboard("Your text here", Components.interfaces.nsIClipboard.kGlobalClipboard);\n\n    // For images, especially using XPCOM, it's much more complex and not directly supported\n    // You might need to base64 encode the image and then handle it accordingly\n\n    var imgSrc = imgElement.src;\n    var dataURI;\n    \n    if (imgSrc.indexOf("data:") === 0) {\n        dataURI = imgSrc; // Already a Data URI\n    } else {\n        // Convert image to Data URI (this is a simplified example and might not work with all types of images)\n        imgElement.crossOrigin = "";\n        var canvas = document.createElement('canvas');\n        canvas.width = imgElement.naturalWidth;\n        canvas.height = imgElement.naturalHeight;\n        canvas.getContext('2d').drawImage(imgElement, 0, 0);\n        dataURI = canvas.toDataURL();\n    }\n\n    // Now you could use the Data URI to perform further actions\n    console.log("Data URI of selected image:", dataURI);\n    \n    // Note: Copying binary data to clipboard directly via JavaScript is not natively supported,\n    // and handling this in an extension would require more advanced code, possibly involving\n    // interacting with nsIClipboard directly for binary data.\n}