// Sample function to sanitize user-provided CSS\nfunction sanitizeCSS(userCSS) {\n    // Define allowed properties\n    const allowedProperties = [\n        'background-color', \n        'color', \n        'font-size', \n        'margin', \n        'padding', \n        // Add other safe CSS properties\n    ];\n\n    // Split the CSS into individual rules\n    const cssRules = userCSS.split(';');\n    let sanitizedCSS = '';\n\n    cssRules.forEach(rule => {\n        const [property, value] = rule.split(':').map(part => part.trim());\n\n        if (allowedProperties.includes(property)) {\n            // Here you might want to add more validation for the values, depending on your use case\n            sanitizedCSS += `${property}: ${value}; `;\n        }\n    });\n\n    return sanitizedCSS;\n}\n\n// Example usage:\nconst userProvidedCSS = "background-color: red; margin: 10px; maliciousProperty: badValue;";\nconst safeCSS = sanitizeCSS(userProvidedCSS);\nconsole.log(safeCSS); // Output: background-color: red; margin: 10px;