import { Version } from '@microsoft/sp-core-library';\nimport {\n  IPropertyPaneConfiguration,\n  PropertyPaneDropdown,\n  PropertyPaneLabel\n} from '@microsoft/sp-property-pane';\nimport { BaseClientSideWebPart, IWebPartContext } from '@microsoft/sp-webpart-base';\nimport * as strings from 'ColumnManagerWebPartStrings';\nimport pnp from "sp-pnp-js";\n\nexport interface IColumnManagerWebPartProps {\n  category: string;\n}\n\nexport default class ColumnManagerWebPart extends BaseClientSideWebPart <IColumnManagerWebPartProps> {\n\n  private _dropdownOptions = [\n    { key: 'dev', text: 'Development' },\n    { key: 'ops', text: 'Operations' },\n    { key: 'qa', text: 'Quality Assurance' }\n  ];\n\n  public render(): void {\n    this.domElement.innerHTML = `<div>\n                                    <h3>${strings.WelcomeMessage}</h3>\n                                    ${PropertyPaneDropdown('category', {\n                                      label: strings.CategoryFieldLabel,\n                                      options: this._dropdownOptions\n                                    })}\n                                  </div>`;\n  }\n\n  protected onSaveCategory(event) {\n    const listName = "Your Custom List Name"; // Change to your custom list name\n    const categoryFields = { dev: ['Version', 'DevNotes'], ops: ['Environment', 'OpsNotes'], qa: ['TestCases', 'QANotes'] };\n\n    categoryFields[event.selectedKey].forEach(fieldName => {\n      pnp.sp.web.lists.getByTitle(listName).fields.addText(fieldName, {\n        Required: false\n      }).then(() => {\n        console.log(`Field ${fieldName} added successfully.`);\n      }).catch((error) => {\n        console.error('Error adding field:', error);\n      });\n    });\n  }\n\n  protected onPropertyPaneFieldChanged(propertyPath: string, oldValue: any, newValue: any): void {\n    if (propertyPath === 'category') {\n      this.onSaveCategory(newValue);\n    }\n  }\n\n  protected get dataVersion(): Version {\n    return Version.parse('1.0');\n  }\n\n  protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration {\n    return {\n      pages: [\n        {\n          header: {\n            description: strings.PropertyPaneDescription\n          },\n          groups: [\n            {\n              groupName: strings.BasicGroupName,\n              groupFields: [\n                new PropertyPaneLabel(null, { text: "Choose a category to add its fields:" }),\n                PropertyPaneDropdown('category', {\n                  label: strings.CategoryFieldLabel,\n                  options: this._dropdownOptions\n                })\n              ]\n            }\n          ]\n        }\n      ]\n    };\n  }\n}