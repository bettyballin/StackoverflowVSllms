// Pseudo-code representation of Fountain Model phases interaction\nfunction fountainModelProcess() {\n    let currentPhase = 'requirements';\n    let completedPhases = [];\n    while (projectNotCompleted()) {\n        switch(currentPhase) {\n            case 'requirements':\n                gatherRequirements();\n                if (requirementsChanged(completedPhases)) {\n                    returnToPhase('requirements');\n                } else {\n                    moveToFase('design');\n                }\n                break;\n            case 'design':\n                designSystemArchitecture();\n                if (requirementsChanged(completedPhases)) {\n                    returnToPhase('requirements');\n                } else {\n                    moveToFase('implementation');\n                }\n                break;\n            case 'implementation':\n                implementSystemModules();\n                if (requirementsChanged(completedPhases)) {\n                    returnToPhase('design');\n                } else {\n                    moveToFase('testing');\n                }\n                break;\n            case 'testing':\n                performTesting();\n                if (requirementsChanged(completedPhases)) {\n                    returnToPhase('implementation');\n                } else {\n                    moveToFase('deployment');\n                }\n                break;\n            default:\n                deploySystem();\n                currentPhase = 'maintenance'; // After deployment, enter maintenance phase\n        }\n        \n        completedPhases.push(currentPhase);\n    }\n\n}\n\n// Example functions (not actual code implementations)\nfunction gatherRequirements() { /* ... */ }\nfunction designSystemArchitecture() { /* ... */ }\nfunction implementSystemModules() { /* ... */ }\nfunction performTesting() { /* ... */ }\nfunction deploySystem() { /* ... */ }\nfunction requirementsChanged(phases) { /* Check if any changes to previous phases are required */ return false; }\nfunction moveToFase(phaseName) { currentPhase = phaseName; }\nfunction returnToPhase(phaseName) { currentPhase = phaseName; }