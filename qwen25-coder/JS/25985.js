(async () => {\n    const sp = pnp.sp;\n    const itemId = 1; // Example item ID, replace with logic to get current item ID\n    const roleName = "ExampleRoleName"; // Replace with actual role name or logic to determine it\n    \n    try {\n        // Get the list where items are stored\n        const myList = sp.web.lists.getByTitle("Job Roles Assignments");\n\n        // Get the item by ID\n        const myItem = myList.items.getById(itemId);\n\n        // Break role inheritance (removing existing permissions)\n        await myItem.breakRoleInheritance(false, true);\n        \n        // Remove all role assignments for clean slate\n        let roleAssignments = await myItem.roleAssignments();\n        for (let ra of roleAssignments) {\n            await myItem.roleAssignments.getById(ra.PrincipalId).delete();\n        }\n\n        // Get role definition by name (assuming unique name or modify query as necessary)\n        const permissions = sp.web.roleDefinitions.filter(`Name eq '${roleName}'`).get().then(result => result[0]);\n        \n        const userLoginName = "DOMAIN\\username"; // Replace with logic to get manager's login name\n        const user = await sp.web.ensureUser(userLoginName);\n        \n        if (permissions && user) {\n            // Assemble role assignment for the user based on role definition\n            let ra = { PrincipalId: user.data.Id, RoleDefId: permissions.Id };\n            \n            // Apply role assignment to item\n            await myItem.roleAssignments.add(ra.PrincipalId, ra.RoleDefId);\n        }\n\n        console.log(`Permissions set successfully for item ID ${itemId}.`);\n    } catch (error) {\n        console.error("There was an error setting permissions on the item: ", error);\n    }\n})();