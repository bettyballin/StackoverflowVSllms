var R = 3961.3; // Radius of the Earth in miles\n\n// Helper function to convert decimal degrees to radians\nfunction toRadians(degrees) {\n    return degrees * Math.PI / 180;\n}\n\nLatLon.crossTrack = function(lat1, lon1, lat2, lon2, lat3, lon3) {\n    var φ1 = toRadians(lat1), λ1 = toRadians(lon1);\n    var φ2 = toRadians(lat2), λ2 = toRadians(lon2);\n    var φ3 = toRadians(lat3), λ3 = toRadians(lon3);\n\n    // Calculate the bearing between points 1 and 2\n    var brng12 = Math.atan2(Math.sin(λ2 - λ1) * Math.cos(φ2),\n                            Math.cos(φ1) * Math.sin(φ2) -\n                            Math.sin(φ1) * Math.cos(φ2) * Math.cos(λ2 - λ1));\n\n    // Calculate the bearing between points 1 and 3\n    var brng13 = Math.atan2(Math.sin(λ3 - λ1) * Math.cos(φ3),\n                            Math.cos(φ1) * Math.sin(φ3) -\n                            Math.sin(φ1) * Math.cos(φ3) * Math.cos(λ3 - λ1));\n\n    // Calculate the angular distance between points 1 and 3\n    var d13 = LatLon.distHaversine(lat1, lon1, lat3, lon3) / R;\n\n    // Calculate cross track error in radians\n    var dXtRad = Math.asin(Math.sin(d13) * Math.sin(brng13 - brng12));\n\n    // Convert from radians to distance and return\n    var dXt = dXtRad * R;\n    return dXt;\n};\n\n// Example usage with the coordinates you provided\nconsole.log(LatLon.crossTrack(-94.127592, 41.81762, -94.087257, 41.848202, -94.046875, 41.791057));