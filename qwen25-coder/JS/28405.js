// Sample blood glucose readings at different times of the day\nconst dataPoints = [\n  { time: 0, glucose: 150 }, // midnight\n  { time: 6, glucose: 400 }, // 6 AM\n  { time: 12, glucose: 350 }, // Noon\n  { time: 18, glucose: 250 }, // 6 PM\n  { time: 24, glucose: 180 }  // Midnight again\n];\n\n// Using math.js to create an interpolation function\nconst interpolateFunction = math.interpol.interpolate(\n    dataPoints.map(dp => dp.time),\n    dataPoints.map(dp => dp.glucose),\n    'linear' // or 'cubic' for more accurate smoothing\n);\n\n// Generate interpolated glucose levels between the given points\nconst interpolatedData = [];\nfor (let i = 0; i <= 24; i++) {\n  interpolatedData.push({ time: i, glucose: interpolateFunction(i) });\n}\n\n// For simple linear extrapolation based on the last two data points for the next few hours\nfunction predictGlucose(lastTwoPoints, futureHours) {\n    const slope = (lastTwoPoints[1].glucose - lastTwoPoints[0].glucose) / \n                  (lastTwoPoints[1].time - lastTwoPoints[0].time);\n    \n    return Array.from({ length: futureHours }, (_, i) => ({\n        time: 24 + i + 1,\n        glucose: lastTwoPoints[1].glucose + slope * (i + 1)\n    }));\n}\n\nconst futureData = predictGlucose(dataPoints.slice(-2), 5); // Predicting next 5 hours\n\nconsole.log(interpolatedData);\nconsole.log(futureData);