function isValidWorkWeekDate(requestedDate) {\n    // Get today's date\n    const today = new Date();\n    \n    // Calculate next Monday\n    const daysUntilNextMonday = 8 - today.getDay(); // 8 because we want Monday as the start of the week (1)\n    if (daysUntilNextMonday <= 3 && daysUntilNextMonday > 0) {\n        daysUntilNextMonday += 7; // If it's Friday, Saturday, or Sunday, move to next week\n    }\n    const nextMonday = new Date(today);\n    nextMonday.setDate(today.getDate() + daysUntilNextMonday);\n\n    // Calculate next Friday (end of work week)\n    const nextFriday = new Date(nextMonday);\n    nextFriday.setDate(nextMonday.getDate() + 4); // Work week is assumed to be Monday to Friday\n\n    // Set time to the start and end of these days for comparison\n    const startOfWorkWeek = new Date(nextMonday.setHours(0, 0, 0, 0));\n    const endOfWorkWeek = new Date(nextFriday.setHours(23, 59, 59, 999));\n\n    // Parse requestedDate to ensure it's a valid date\n    const parsedRequestedDate = new Date(requestedDate);\n    if (isNaN(parsedRequestedDate.getTime())) {\n        console.error("Invalid date format");\n        return false;\n    }\n\n    // Check if the date is within the range of start and end of work week\n    return parsedRequestedDate >= startOfWorkWeek && parsedRequestedDate <= endOfWorkWeek;\n}\n\n// Example usage:\nconsole.log(isValidWorkWeekDate('2023-10-09')); // Output depends on when you run this code