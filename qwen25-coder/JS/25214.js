const express = require('express');\nconst jwt = require('jsonwebtoken');\nconst app = express();\n\n// Middleware to parse JSON bodies\napp.use(express.json());\n\nconst SECRET_KEY = 'your_secret_key';\n\n// Mock user data\nconst users = [\n  { id: 1, username: 'user1', password: 'password1' }\n];\n\n// Authentication middleware\nfunction authenticateToken(req, res, next) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n  \n  if (token == null) return res.sendStatus(401);\n\n  jwt.verify(token, SECRET_KEY, (err, user) => {\n    console.log(err);\n    \n    if (err) return res.sendStatus(403);\n    \n    req.user = user;\n    \n    next();\n  });\n}\n\n// Login route\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  \n  // Here you should validate the credentials against a database or another service.\n  const user = users.find(u => u.username === username && u.password === password);\n  \n  if (!user) return res.sendStatus(401);\n\n  // Create and send token\n  const accessToken = jwt.sign(user, SECRET_KEY);\n  res.json({ accessToken });\n});\n\n// Secure route example\napp.get('/secure-info', authenticateToken, (req, res) => {\n  res.send('Secure information only for authenticated users.');\n});\n\n// Ensure the server runs over HTTPS in production.\n// This can be done using a reverse proxy or libraries like `https` directly.\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});