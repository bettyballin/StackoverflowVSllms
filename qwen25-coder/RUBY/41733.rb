require 'thread'\n\n# Create a condition variable and a mutex\ncondition_variable = ConditionVariable.new\nmutex = Mutex.new\n\n# Array to hold data between threads\ndata = []\n\n# Thread that waits for data\nconsumer_thread = Thread.new do\n  mutex.synchronize do\n    # Wait until there is data\n    while data.empty?\n      puts "Consumer waiting for data..."\n      condition_variable.wait(mutex)\n    end\n    puts "Consumed: #{data.pop}"\n  end\nend\n\n# Thread that provides the data\nproducer_thread = Thread.new do\n  mutex.synchronize do\n    sleep(1)  # Simulate work before producing data\n    data.push("Data produced")\n    condition_variable.broadcast   # Notify all waiting threads (similar to notifyAll)\n  end\nend\n\n# Wait for both threads to finish\nconsumer_thread.join\nproducer_thread.joi