# Define available ingredients and their corresponding pump numbers\nINGREDIENT_PUMPS = {\n  vodka: 1,\n  orange_juice: 2,\n  water: 3,\n  # Add more ingredients as necessary\n}\n\n# DSL class for building recipes\nclass RecipeDSL\n  attr_accessor :description, :glassware, :ingredients\n\n  def initialize(&block)\n    @ingredients = []\n    instance_eval(&block) if block_given?\n  end\n\n  def description(text)\n    @description = text\n  end\n\n  def serve_in(glass_type)\n    @glassware = glass_type\n  end\n\n  def ingredients(&block)\n    instance_eval(&block)\n  end\n\n  def method_missing(name, amount)\n    ingredient_name = name.to_sym\n    if INGREDIENT_PUMPS.key?(ingredient_name)\n      @ingredients << {name: ingredient_name, amount: amount}\n    else\n      raise ArgumentError, "Ingredient #{ingredient_name} is not recognized."\n    end\n  end\n\n  def ounces(amount, &block)\n    return block.call if block_given?\n    amount.to_f\n  end\nend\n\n# Example usage of the DSL\nrecipe = RecipeDSL.new do\n  description 'Screwdriver'\n  serve_in 'Highball Glass'\n  ingredients do\n    2.ounces :vodka\n    5.ounces :orange_juice\n  end\nend\n\nputs "Preparing: #{recipe.description}"\nputs "Serve in: #{recipe.glassware}"\nputs "\nIngredients:"\nrecipe.ingredients.each do |ingredient|\n  puts "#{ingredient[:name]}: #{ingredient[:amount]} ounces"\nend