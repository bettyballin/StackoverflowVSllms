require 'net/imap'\n\n# Connect to the IMAP server\nimap = Net::IMAP.new('imap.gmail.com', 993, ssl: true)\nimap.login('your_email@gmail.com', 'your_password')\nimap.select('INBOX')\n\n# Fetch the last known UID from your database or local storage\nlast_known_uid = get_last_known_uid_from_storage() # Replace with actual retrieval logic\n\n# If no UID is stored yet, fetch all messages and update the last known UID\nif last_known_uid.nil?\n  imap.search(['ALL']).each do |uid|\n    msg = imap.fetch(uid.attr['UID'], "RFC822")[0]\n    store_email_in_database(msg) # Replace with actual storage logic\n  end\n  last_known_uid = imap.search(['ALL']).max\nelse\n  # Fetch new messages since the last known UID\n  new_messages = imap.uid_search(["UID", "#{last_known_uid + 1}:*"])\n  new_messages.each do |uid|\n    msg = imap.fetch(uid, "RFC822")[0]\n    store_email_in_database(msg) # Replace with actual storage logic\n  end\n  last_known_uid = new_messages.max || last_known_uid\nend\n\n# Update the last known UID in your database or local storage\nupdate_last_known_uid_to_storage(last_known_uid) # Replace with actual update logic\n\n# Logout from IMAP server\nimap.logout\nimap.disconnect