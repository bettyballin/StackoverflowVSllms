require 'acme-client'\n\n# Set up your directory endpoint, account key, private key, and domain name\ndirectory = Acme::Client::DIRECTORY_URLS['lets_encrypt']\naccount_key = OpenSSL::PKey::RSA.new(2048)\ndomain_name = 'example.com'\n\n# Initialize the client and register the account if needed\nclient = Acme::Client.new(directory: directory, private_key: account_key)\n\nregistration = client.register(contact: "mailto:kent@example.com")\nregistration.update(terms_of_service_agreed: true) unless registration.terms_of_service_agreed\n\n# Authorize and validate your domain\nauthorization = client.authorize(domain: domain_name)\nchallenge = authorization.http01\n\npublickey = OpenSSL::PKey::RSA.new(2048).public_key\ncsr = Acme::Client::CertificateRequest.generate([domain_name], publickey)\n\nputs "Add the following to .well-known/acme-challenge/#{challenge.filename}:"\nputs challenge.file_content(content: csr.to_pem)\nputs "Then run:"\nputs "curl http://#{domain_name}/.well-known/acme-challenge/#{challenge.filename}"\nputs "Ensure it returns #{challenge.expected}"\n\n# After you've proven control of the domain:\nchallenge.request_verification\nauthorization.verify_status\n\n# Request the SSL certificate\ncertificate = client.new_certificate(csr)\n\n# Save the certificate to a file\nFile.write('example.crt', certificate.to_pem)