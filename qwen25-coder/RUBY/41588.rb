class DateValidator < ActiveModel::EachValidator\n  def validate_each(record, attribute, value)\n    return unless value.is_a?(Hash) && value.keys.include?("year") && value.keys.include?("month") && value.keys.include?("day")\n\n    year = value["year"].to_i\n    month = value["month"].to_i\n    day = value["day"].to_i\n\n    # Check if it's a valid date\n    unless ::Date.valid_date?(year, month, day)\n      record.errors[attribute] << (options[:message] || "is not a valid date")\n    end\n  end\nend\n\nclass YourModel < ApplicationRecord\n  validate :date_validity\n  attr_accessor :entered_date # If it's not already defined\n\n  def date_validity\n    # Assuming params for year, month, day are saved in a hash called 'entered_date'\n    if entered_date.present?\n      DateValidator.new(attributes: :entered_date).validate_each(self, :entered_date, entered_date)\n    end\n  end\nend