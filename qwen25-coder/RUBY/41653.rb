def extract_and_spaces(text)\n  # Split the text into parts based on newlines or specific patterns if necessary.\n  parts = text.split(/[\n-]+/)\n\n  # Filter out any empty strings that resulted from splitting\n  filtered_parts = parts.reject(&:empty?)\n\n  # Map over the components to separate numbers and words, identifying large negatives as spaces\n  spaced_text = filtered_parts.each_with_index.map do |component, index|\n    if component.start_with?(/\d+/) && component.to_i < -300\n      ' '     # Return a space if it's a large negative number\n    else\n      component.strip   # Otherwise return the word stripped of any leading/trailing whitespace\n    end\n  end.join('')\n\n  spaced_text.strip\nend\n\n# Example usage:\ntext = ".7aspe-5.5cts-715.1o0.6f-708.5f-0.4aces-721.4that-716.3are-720.0i-1.8mportant-716.3in-713.9soc-5.5i-1.8alcommunica6.6tion6.3.-711.6Althoug6.3h-708.1m-1.9od6.3els-709.3o6.4f-702.8f5.4ace-707.9proc6.6essing-708.2haveproposed-611.2ways-615.5to-614.7deal-613.2with-613.0these-613.9diff10.4erent-613.7tasks,-611.9it-617.1remainsunclear-448.0how-450.7these-443.2mechanisms-451.7might-446.7be-447.7implemented-447.2in-450.3visualOne-418.9model-418.8of-417.3human-416.4face-421.9processing-417.5proposes-422.7that-419.8informa-tion-584.5is-578.0processed-586.1in-583.1specialised-584.7modules-577.0(Breen-584.4et-582.9al.,-582.32002;Bruce-382.1and-384.0Y92.0-46.-531.4lsmith-301-,44,-0,-92.6730,-0,56.75-5,375-55,-920,-0,-10)"\nputs extract_and_spaces(text)