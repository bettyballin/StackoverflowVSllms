require 'nokogiri'\nrequire 'open-uri'\nrequire 'zip'\n\nclass PagesController < ApplicationController\n  def download_page\n    # Render the page as you normally would, but capture it in a string\n    html_content = render_to_string action: :statistics\n\n    filename = "page_#{Time.now.strftime('%d-%m%Y')}.html"\n    zip_filename = "#{filename.delete('.html')}.zip"\n\n    tempfile = Tempfile.new(zip_filename)\n    Zip::OutputStream.open(tempfile.path) do |zos|\n      # Add the HTML file to the archive\n      zos.put_next_entry(filename)\n      zos.write(html_content)\n\n      # Parse HTML for resource URLs and add them to the zip\n      doc = Nokogiri::HTML(html_content)\n      ['link[@href]', 'img[@src]', 'script[@src]'].each do |selector|\n        doc.css(selector).each do |node|\n          url_attr = selector.include?('link') ? node.attribute('href') : node.attribute('src')\n          next unless url_attr\n\n          resource_url = URI.join(request.url, url_attr.value)\n          next unless valid_resource?(resource_url)\n\n          # Fetch the resource\n          open(resource_url) do |file|\n            path = File.join(File.basename(filename).delete('.html'), resource_url.path.split('/').last)\n\n            zos.put_next_entry(path)\n            zos.write(file.read)\n\n            # Update HTML link in memory to point to internal location\n            url_attr.value = path\n          end\n        end\n      end\n\n      updated_html_content = doc.to_html\n      tempfile.rewind\n      Zip::InputStream.open(tempfile) do |zis|\n        entry = zis.get_next_entry\n        while entry\n          if entry.name == filename\n            # Update the HTML with new resource paths and write it back to zip\n            zos.put_next_entry(entry.name)\n            zos.write(updated_html_content)\n          else\n            # Copy existing entries forward unmodified\n            zos.put_next_entry(entry.name)\n            zos.write zis.read\n          end\n\n          entry = zis.get_next_entry\n        end\n      end\n    end\n\n    tempfile.rewind\n\n    send_file tempfile.path, type: 'application/zip', disposition: 'attachment',\n              filename: zip_filename\n  ensure\n    tempfile.close unless tempfile.nil?\n    tempfile.unlink unless tempfile.nil?\n  end\n\n  private\n\n  def valid_resource?(url)\n    # Implement any specific validation you need\n    !url.query && url.scheme.to_s.start_with?('http')\n  end\nend