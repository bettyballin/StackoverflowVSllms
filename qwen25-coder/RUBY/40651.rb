require 'net/http'\nrequire 'uri'\nrequire 'tempfile'\n\nclass FileConversionController < ApplicationController\n  CONVERTER_SERVICE_URL = 'http://example.com/convert'.freeze\n\n  def convert_file\n    # Assuming uploaded file is available in params[:open_office_file]\n    open_office_file = params[:open_office_file]\n\n    unless open_office_file && open_office_file.present?\n      return render json: { error: 'No file provided' }, status: :bad_request\n    end\n\n    uri = URI.parse(CONVERTER_SERVICE_URL)\n    http = Net::HTTP.new(uri.host, uri.port)\n    request = Net::HTTP::Post.new(uri.request_uri)\n\n    # Sending the open office file to the conversion service\n    request['Content-Type'] = 'multipart/form-data; boundary=#{request.uuid}'\n    request.set_form([['file', open_office_file.read]], 'multipart/form-data')\n\n    response = http.request(request)\n    \n    if response.is_a?(Net::HTTPSuccess) && response.body.present?\n      # Create a temporary file to store the converted file\n      temp_file = Tempfile.new(['converted', '.docx'])\n      temp_file.binmode\n      temp_file.write(response.body)\n      temp_file.rewind\n\n      # Send the converted file as a response\n      send_file temp_file.path, type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', disposition: 'inline'\n    else\n      render json: { error: "Conversion failed: #{response.message}" }, status: :internal_server_error\n    end\n  ensure\n    # Ensure that temp file is closed and unlinked after use\n    temp_file.close if defined?(temp_file) && !temp_file.closed?\n    temp_file.unlink if defined?(temp_file)\n  end\nend