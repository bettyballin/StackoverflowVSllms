class Man < ActiveRecord::Base\n  has_many :wives\n  has_many :cats, through: :wives\n\n  scope :has_red_cat, -> { joins(cats: []).where(cats: { color: 'red' }).distinct }\n  scope :has_7yo_cat, -> { joins(cats: []).where(cats: { age: 7 }).distinct }\n\n  # Men who have at least one red cat AND at least one 7-year-old cat\n  scope :has_red_and_7yo_cats, -> do\n    condition1 = arel_table.join(Cat.arel_table).on(Wife.reflect_on_association(:cats).foreign_key.eq(Cat.arel_table[Wife.primary_key])).where(color: 'red').distinct.exists\n    condition2 = arel_table.join(Cat.arel_table).on(Wife.reflect_on_association(:cats).foreign_key.eq(Cat.arel_table[Wife.primary_key])).where(age: 7).distinct.exists\n\n    where(condition1.and(condition2))\n  end\n\n  # For wives named conditions using similar approach\n  scope :has_wives_named, ->(*names) { joins(wives: []).where(wives: { name: names }).distinct }\n  \n  # Men who have at least one young wife named Esther AND Ada\n  scope :has_young_wives_named, ->(min_age, *names) do\n    all.each_with_object([]) do |name, array|\n      condition = arel_table.join(Wife.arel_table).on(primary_key.eq(Wife.reflect_on_association(:man).foreign_key))\n                          .where(wives: { name: name, age: min_age..Float::INFINITY })\n                          .exists\n      array << condition\n    end.inject(:and)\n  end.then(&method(:where))\n\n  # Specific for Esther, Ruth, Ada and minimum age of 30\n  scope :has_young_wifes_esther_ruth_ada, -> { has_young_wives_named(30, 'Esther', 'Ruth', 'Ada') }\nend