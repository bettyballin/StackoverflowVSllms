require 'csv' # Use CSV instead of fastercsv for Ruby 1.9+\n# require 'fastercsv' # Uncomment this if you are using Ruby 1.8\n\n# csv issues import for redmine\n# Will convert a csv into a issues bulkloader into redmine\n# Column names\n# row[0]=Nb Number,row[1]=Product,row[2]=Element,row[3]=Type,row[4]=Queue,\n# row[5]=KeyWord,row[6]=Responsible,row[7]=Case Descriptions,row[8]=Days,\n# row[9]=Planned Delivery,row[10]=Version\n\ndesc <<-END_DESC\nBulk loading of issues from a CSV file.\n\nAvailable options:\n  * filepath    => path to the text file.\n  * project     => id or identifier of project\n\nExample:\n  rake redmine:csv_import filepath="~/import.csv" project="askiavista"\nEND_DESC\n\nnamespace :redmine do\n  task csv_import: :environment do\n    first_row = true # Removed '@' since it's not an instance variable\n    count = 1\n\n    CSV.foreach(ENV['filepath']) do |row|\n      if !first_row\n        i = Issue.new\n        proj_name = ENV['project']\n        i.project = Project.find_by(name: proj_name) || raise("Project '#{proj_name}' not found")\n        \n        # If not a feature it's a bug\n        if row[3].include?("SUG") \n          i.tracker_id = Tracker.where(name: "Feature").pluck(:id).first || 2 # Assume tracker ID 2 is Feature if not found\n        else\n          i.tracker_id = Tracker.where(name: "Bug").pluck(:id).first || 1 # Assume tracker ID 1 is Bug if not found\n        end\n\n        case row[4]\n        when /TOP PRIORITY/\n          i.priority_id = Enumeration.where(name: "Urgent").pluck(:id).first || 7\n        when /HIGH PRIORITY/\n          i.priority_id = Enumeration.where(name: "High").pluck(:id).first || 5\n        when /MEDIUM PRIORITY/\n          i.priority_id = Enumeration.where(name: "Normal").pluck(:id).first || 4\n        else\n          i.priority_id = Enumeration.where(name: "Low").pluck(:id).first || 3\n        end\n\n        i.author_id = User.find(5).id # Assuming the user ID is 5, adjust as needed\n        i.subject = row[7].truncate(50) # I assume row[7] contains case descriptions or subject\n        i.description = row[7]\n        i.status_id = IssueStatus.where(name: "New").pluck(:id).first || 1\n        if i.save\n          puts "Created issue ##{count}: #{i.subject}"\n        else\n          puts "Failed to create issue: #{i.errors.full_messages.join(', ')}"\n        end\n\n        count += 1\n      end\n      \n      first_row = false # Moved this assignment inside the block\n    end\n  end\nend