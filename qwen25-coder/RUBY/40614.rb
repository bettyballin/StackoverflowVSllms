require 'set'\n\nclass Graph\n  def initialize\n    @adjacency_list = Hash.new { |hash, key| hash[key] = Set.new }\n  end\n\n  def add_edge(a, b)\n    @adjacency_list[a].add(b)\n    @adjacency_list[b].add(a) # For undirected graph\n  end\n\n  def bfs(start_node, target_node)\n    visited = Set.new\n    queue = [[start_node]]\n\n    while (path = queue.shift)\n      node = path.last\n\n      next if visited.include?(node)\n\n      return path if node == target_node\n\n      visited.add(node)\n\n      @adjacency_list[node].each do |neighbor|\n        queue.push(path + [neighbor])\n      end\n    end\n\n    nil # No path found\n  end\nend\n\n# Example usage\ngraph = Graph.new\n%w[a b c d e f g h i j k m n z].each_slice(2) { |a, b| graph.add_edge(a, b) }\nconnection_paths = graph.bfs('YOU', 'z')\nputs connection_paths.join(' -> ') if connection_paths # Outputs one of the paths