class Order < ApplicationRecord\n  include StateMachine::MacroMethods\n\n  has_many :order_items # Example association\n  mount_uploader :image, ImageUploader # Using CarrierWave for image uploads\n\n  state_machine initial: :step1 do\n    after_transition any => [:step2, :step3, :step4, :complete] do |order|\n      order.update(step_params)\n    end\n\n    event :next_step do\n      transition [:step1] => [:step2]\n      transition [:step2] => [:step3]\n      transition [:step3] => [:step4]\n      transition [:step4] => [:complete]\n    end\n\n    event :previous_step do\n      transition [:step2] => [:step1]\n      transition [:step3] => [:step2]\n      transition [:step4] => [:step3]\n      transition [:complete] => [:step4]\n    end\n  end\n\n  def step_params\n    # method to define parameters per step\n    if current_step == 'step1'\n      params.require(:order).permit(:field_a, :field_b)\n    elsif current_step == 'step2'\n      params.require(:order).permit(:field_c, :image)\n    else\n      params.require(:order).permit(order_items_attributes: [:id, :name, :quantity])\n    end\n  end\n\n  def current_step\n    # method to return current step in the form process\n  end\nend