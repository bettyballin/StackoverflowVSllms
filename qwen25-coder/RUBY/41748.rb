def find_subsets(data, target)\n  return [[]] if target == 0\n  return [] if data.empty? || target < 0\n\n  # Include the first element and search for subsets with remaining elements\n  subsets_with_first = []\n  subsets_without_first = find_subsets(data[1..-1], target)\n  subsets_with_first += subsets_without_first.map { |subset| subset }\n\n  # Exclude the first element and search for subsets with the same total sum\n  if data.first <= target\n    subsets_with_first += find_subsets(data[1..-1], target - data.first).map { |subset| [data.first] + subset }\n  end\n\n  subsets_with_first.uniq\nend\n\ndef parse_file(file_path)\n  File.readlines(file_path).first.split(',').map(&:to_f)\nend\n\n# Main execution\nfile_path = 'data.txt' # replace with your file path\noriginal_sum = 5.0 # provide the original sum\n\ndata = parse_file(file_path)\ntotal_sum = data.sum\ndifference = (total_sum - original_sum) / 2\n\nsubsets = find_subsets(data, difference)\n\nputs "Subsets that sum up to #{difference}:"\nsubsets.each { |subset| puts subset.inspect }