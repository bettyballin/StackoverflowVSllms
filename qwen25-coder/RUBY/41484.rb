require 'ice_cube'\n\ndef create_recurring_event(name, description, start_time)\n  recurrence_rule = IceCube::Rule.weekly.day(:monday).hour_of_day(start_time.hour).minute_of_hour(start_time.min)\n\n  schedule = IceCube::Schedule.new(start_time)\n  schedule.add_recurrence_rule(recurrence_rule)\n\n  event = Event.create!(name: name, description: description)\n  Recurrence.create!(event_id: event.id, schedule_string: schedule.to_yaml) # Serialize the schedule for storage\n\n  event\nend\n\ndef override_event_instance(event_id, instance_start_time, changes = {})\n  Override.create!(event_id: event_id, start_time: instance_start_time, details: changes)\nend\n\ndef get_occurrences(event_id, from, to)\n  recurrence = Recurrence.find_by(event_id:)\n  schedule = IceCube::Schedule.from_yaml(recurrence.schedule_string)\n\n  # Apply overrides\n  overrides = Override.where(event_id:)\n  overrides.each do |override|\n    if override.details.include?(:delete) && override.details[:delete]\n      schedule.remove_occurrences(override.start_time)\n    else\n      schedule.change_occurrence(override.start_time, override.details)\n    end\n  end\n\n  schedule.occurrences_between(from, to)\nend