class Person < ApplicationRecord\n  validate :conditional_validations\n\n  private\n\n  def conditional_validations\n    rules = VALIDATION_RULES['rules']\n    return unless rules && rules[country] && rules[country][company_name]\n\n    rules[country][company_name].each do |field, conditions|\n      value = public_send(field)\n      next if value.blank? # Allow blank values\n\n      validate_length(field, value, conditions)\n      validate_format(field, value, conditions)\n    end\n  end\n\n  def validate_length(field, value, conditions)\n    return unless (min_len = conditions[:minimum_length]) || (max_len = conditions[:maximum_length])\n\n    length_range = (min_len || ...)..(max_len || ...)\n    errors.add(field, "is too short") if value.length < min_len.to_i\n    errors.add(field, "is too long") if value.length > max_len.to_i\n  end\n\n  def validate_format(field, value, conditions)\n    return unless (format = conditions[:format])\n\n    regex = Regexp.new(format.gsub(%r{'}, ''), Regexp::IGNORECASE)\n\n    errors.add(field, "doesn't match format") unless value.match?(regex)\n  end\nend