# Reminder model\nclass Reminder < ApplicationRecord\n  scope :pending, -> { where('send_at <= ? AND status = ?', Time.current, 'active') }\n\n  def mark_as_sent\n    update!(status: 'sent')\n  end\n\n  # Add other methods here if needed like cancel_reminder, reschedule etc.\nend\n\n# Sidekiq worker for sending emails\nclass ReminderMailerWorker\n  include Sidekiq::Worker\n\n  def perform(reminder_id)\n    reminder = Reminder.find_by(id: reminder_id)\n    return unless reminder&.pending?\n\n    # Send the email using Rails mailer or any other method preferred\n    UserMailer.reminder_email(reminder).deliver_now\n    reminder.mark_as_sent\n  end\nend\n\n# Cron job to check and enqueue emails that need sending (using whenever gem)\nevery 1.minute do\n  runner "Reminder.where('send_at <= ? AND status = ?', Time.current, 'active').each { |r| ReminderMailerWorker.perform_async(r.id) }"\nend