class Account < ApplicationRecord\n  after_create :send_welcome_email\n\n  def send_welcome_email\n    # Determine the user_name and password dynamically\n    smtp_settings = EmailAccountService.get_available_smtp_settings\n    ActionMailer::Base.smtp_settings = smtp_settings if smtp_settings\n\n    SubscriptionNotifier.welcome(self).deliver_later\n  end\nend\n\n# A service to handle SMTP settings switching\nclass EmailAccountService\n  @email_accounts = [\n    { username: "noreply1@mydomain.com", password: "password1" },\n    { username: "noreply2@mydomain.com", password: "password2" },\n    # Add more accounts as needed...\n  ]\n\n  @sent_count_by_user = Hash.new(0)\n\n  class << self\n    def get_available_smtp_settings\n      # Increment sent count for the user\n      available_accounts.each do |account|\n        if sent_count_by_user[account[:username]] < 500\n          sent_count_by_user[account[:username]] += 1\n          return { address: "smtp.gmail.com", port: 587, domain: "mydomain.com",\n                   authentication: :plain, user_name: account[:username],\n                   password: account[:password] }\n        end\n      end\n      # No available accounts - log an error or handle accordingly\n    end\n\n    def available_accounts\n      @email_accounts\n    end\n\n    def sent_count_by_user\n      @sent_count_by_user\n    end\n  end\nend\n\n# subscription_notifier.rb\nclass SubscriptionNotifier < ActionMailer::Base\n  default from: "noreply@mydomain.com"\n\n  def welcome(account)\n    @account = account\n    mail(to: account.email, subject: "Welcome to the App")\n  end\nend