<?php\n\nfunction fetchUserData($db, $startUserId) {\n    // Fetch all users who have_card and want_card\n    $query = "SELECT id, have_card, want_card FROM users";\n    $result = $db->query($query);\n    \n    $data = [];\n    while ($row = $result->fetch_assoc()) {\n        $data[$row['id']] = [\n            'have_card' => $row['have_card'],\n            'want_card' => $row['want_card']\n        ];\n    }\n    return $data;\n}\n\nfunction findCycle($usersData, $startUserId) {\n    // Build an adjacency list\n    $adjList = [];\n    foreach ($usersData as $userId => $user) {\n        foreach ($usersData as $anotherUserId => $anotherUser) {\n            if ($user['want_card'] === $anotherUser['have_card']) {\n                $adjList[$userId][] = $anotherUserId;\n            }\n        }\n    }\n\n    // DFS to find cycle\n    $visited = array_fill(0, count($usersData), false);\n    $pathVisited = array_fill(0, count($usersData), false);\n\n    function dfs($node, &$adjList, &$visited, &$pathVisited, &$path) {\n        $visited[$node] = true;\n        $pathVisited[$node] = true;\n        $path[] = $node;\n\n        foreach ($adjList[$node] as $neighbor) {\n            if (!$visited[$neighbor]) {\n                if (dfs($neighbor, $adjList, $visited, $pathVisited, $path)) {\n                    return true;\n                }\n            } elseif ($pathVisited[$neighbor]) {\n                // Cycle detected\n                array_splice($path, 0, array_search($neighbor, $path));\n                return true;\n            }\n        }\n\n        $pathVisited[$node] = false;\n        array_pop($path);\n        return false;\n    }\n\n    $cycle = [];\n    if (dfs($startUserId, $adjList, $visited, $pathVisited, $cycle)) {\n        return $cycle;\n    } else {\n        return null;\n    }\n}\n\n// Example usage\n$dbConnection = new mysqli('localhost', 'user', 'password', 'database');\n$usersData = fetchUserData($dbConnection, 1);\n$startUserId = 1;\n\n$cycle = findCycle($usersData, $startUserId);\nif ($cycle) {\n    echo "Circular swap found for User #$startUserId: ";\n    echo implode(" -> ", $cycle);\n} else {\n    echo "No circular swap available starting from User #$startUserId";\n}\n\n$dbConnection->close();\n\n?>