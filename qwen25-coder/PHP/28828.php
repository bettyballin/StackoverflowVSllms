class Db {\n    private static $_instance = NULL;\n\n    private function __construct() {}\n    private function __clone() {}\n\n    public static function getInstance() {\n        if (!self::$_instance) {\n            try {\n                self::$_instance = new PDO('mysql:host=' . CONFIG_MYSQL_SERVER . ';dbname=' . CONFIG_MYSQL_DATABASE, CONFIG_MYSQL_USERNAME, CONFIG_MYSQL_PASSWORD);\n                self::$_instance->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n            } catch (PDOException $e) {\n                throw new Exception($e->getMessage());\n            }\n        }\n        return self::$_instance;\n    }\n\n    public static function query(string $query, array $bindings = []) {\n        if (!empty($bindings)) {\n            return self::executePreparedQuery($query, $bindings);\n        } elseif (self::isSelectQuery($query)) {\n            return self::runNonPreparedQuery($query);\n        } else {\n            return self::executeNonQuery($query);\n        }\n    }\n\n    private static function executePreparedQuery(string $query, array $bindings) {\n        $stmt = self::getInstance()->prepare($query);\n        foreach ($bindings as $binding => $data) {\n            if (is_array($data)) {\n                $value = $data['value'];\n                $dataType = isset($data['dataType']) ? $data['dataType'] : PDO::PARAM_STR;\n                $length = isset($data['length']) ? (int)$data['length'] : null;\n                $stmt->bindParam($binding, $value, $dataType, $length);\n            } else {\n                $stmt->bindValue($binding, $data);\n            }\n        }\n        $stmt->execute();\n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    }\n\n    private static function runNonPreparedQuery(string $query) {\n        return self::getInstance()->query($query)->fetchAll(PDO::FETCH_ASSOC);\n    }\n\n    private static function executeNonQuery(string $query) {\n        return self::getInstance()->exec($query);\n    }\n\n    private static function isSelectQuery(string $query): bool {\n        return stripos($query, 'select') === 0;\n    }\n\n    public static function getLastInsertId(): string {\n        return (string)self::getInstance()->lastInsertId();\n    }\n\n    public static function disconnect() {\n        self::$_instance = null;\n    }\n}