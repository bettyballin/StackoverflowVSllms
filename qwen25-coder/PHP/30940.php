class XmlNamespaceAwareWriter {\n    private $xmlWriter;\n    private $namespaces = [];\n\n    public function __construct($output) {\n        $this->xmlWriter = new XMLWriter();\n        if (is_string($output)) {\n            $this->xmlWriter->openMemory();\n        } else {\n            // Assuming a resource for direct output, e.g., PHP://stdout\n            $this->xmlWriter->openURI($output);\n        }\n    }\n\n    public function startElementNS($prefix, $name, $uri) {\n        if (!isset($this->namespaces[$uri])) {\n            $this->xmlWriter->startElementNs($prefix, $name, $uri);\n            $this->namespaces[$uri] = true;\n        } else {\n            $this->xmlWriter->startElementNs($prefix, $name, null);\n        }\n    }\n\n    public function writeElementNS($prefix, $name, $uri, $content) {\n        if (!isset($this->namespaces[$uri])) {\n            $this->xmlWriter->writeElementNS($prefix, $name, $uri, $content);\n            $this->namespaces[$uri] = true;\n        } else {\n            $this->xmlWriter->writeElementNs($prefix, $name, null, $content);\n        }\n    }\n\n    public function outputMemory() {\n        return $this->xmlWriter->outputMemory();\n    }\n\n    // Add other methods as necessary to encapsulate full XMLWriter functionality\n}\n\n// Example Usage:\n$xml = new XmlNamespaceAwareWriter(null); // or 'php://stdout' for direct output\n$xml->startDocument('1.0', 'UTF-8');\n$xml->startElementNS('example', 'root', 'http://www.example.com/ns/example');\n\n$xml->startElementNS('example', 'child', 'http://www.example.com/ns/example');\n$xml->text('Content');\n$xml->endElement();\n\n$xml->endElement();\necho $xml->outputMemory();