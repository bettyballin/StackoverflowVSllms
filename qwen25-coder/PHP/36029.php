abstract class AbstractCostCounter {\n    protected $cost = 0;\n\n    public final function countCost($messageObj) {\n        $this->countNotReccurentSendingCost($messageObj);\n        $this->countOptional($messageObj);\n        return $this->cost;\n    }\n\n    private function countNotReccurentSendingCost($messageObj) {\n        $totalMessages = $messageObj->getTotalMessages();\n        $message_cost = 1; // cost per message\n        $this->cost += $totalMessages * $message_cost;\n    }\n\n    abstract protected function countOptional($messageObj);\n}\n\nclass NonReccurentCostCounting extends AbstractCostCounter {\n    protected function countOptional($messageObj) {\n        // No additional costs for non-recurring messages\n    }\n}\n\nclass ReccurentCostCounting extends AbstractCostCounter {\n    protected function countOptional($messageObj) {\n        $originalCost = $this->cost;\n        $totalMessagesInScheduledPlan = $messageObj->getTotalMessagesInScheduledPlan();\n        $reccurentSendingPlanCost = $originalCost * $totalMessagesInScheduledPlan;\n        $this->cost = $reccurentSendingPlanCost;\n    }\n}