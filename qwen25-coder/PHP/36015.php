class DatabaseHandler {\n    private static $instance;\n    private $mdb2;\n\n    private function __construct() {\n        // Initialize your MDB2 instance here\n        $dsn = 'mysqli://username:password@host/database';\n        $this->mdb2 = MDB2::connect($dsn);\n        if (MDB2::isError($this->mdb2)) {\n            throw new Exception('Could not connect to database: ' . $this->mdb2->getMessage());\n        }\n        // Set charset\n        $setCharsetResult = $this->mdb2->setCharset('utf8');\n        if (MDB2::isError($setCharsetResult)) {\n            throw new Exception('Could not set charset: ' . $setCharsetResult->getMessage());\n        }\n    }\n\n    public static function getInstance() {\n        if (!self::$instance) {\n            self::$instance = new self();\n        }\n        return self::$instance;\n    }\n\n    public function executeQuery($query) {\n        if (!$this->mdb2->isConnected()) {\n            // Reconnect and reset charset\n            $reconnectResult = $this->mdb2->forceConnect();\n            if (MDB2::isError($reconnectResult)) {\n                throw new Exception('Could not reconnect: ' . $reconnectResult->getMessage());\n            }\n            $setCharsetResult = $this->mdb2->setCharset('utf8');\n            if (MDB2::isError($setCharsetResult)) {\n                throw new Exception('Could not set charset after reconnection: ' . $setCharsetResult->getMessage());\n            }\n        }\n        // Execute your query\n        return $this->mdb2->query($query);\n    }\n\n    public function closeConnection() {\n        if ($this->mdb2 && $this->mdb2->isConnected()) {\n            $this->mdb2->disconnect();\n        }\n    }\n}\n\n// Usage example:\nclass IntSmarty {\n    private $databaseHandler;\n\n    public function __construct() {\n        $this->databaseHandler = DatabaseHandler::getInstance();\n    }\n\n    public function saveStrings($strings) {\n        // Convert $strings to SQL insert queries and execute them\n        foreach ($strings as $string) {\n            $query = "INSERT INTO localized_strings (text) VALUES (" . $this->databaseHandler->escape($string) . ")";\n            $this->databaseHandler->executeQuery($query);\n        }\n    }\n\n    public function __destruct() {\n        // Ensure all strings are saved before closing the connection\n        // In this case, saveStrings should be called explicitly before destructing\n        $this->databaseHandler->closeConnection();  // Or let the script end naturally to close\n    }\n\n    private function escape($text) {\n        return "'" . mysql_real_escape_string($text, $this->databaseHandler->getResource()) . "'";\n    }\n}\n\n// Save localized strings explicitly and allow destructor to close connection\n$intSmarty = new IntSmarty();\n$stringsToSave = ['Localized string 1', 'Localized string 2'];\n$intSmarty->saveStrings($stringsToSave);\nunset($intSmarty); // or let script end naturally