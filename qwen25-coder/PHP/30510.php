require_once __DIR__ . '/vendor/autoload.php';\n\nuse Google\Client;\nuse Google\Service\Calendar;\n\n// Set up the client to use your credentials and access the Calendar service.\n$client = new Client();\n$client->setApplicationName('Google Calendar API PHP Quickstart');\n$client->setScopes(Calendar::CALENDAR_READONLY);\n$client->setAccessType('offline');\n\n// Load previously authorized token from a file, if it exists. It is recommended\n// to store tokens securely, such as in encrypted user-specific database.\n$tokenPath = 'token.json';\nif (file_exists($tokenPath)) {\n    $accessToken = json_decode(file_get_contents($tokenPath), true);\n    $client->setAccessToken($accessToken);\n}\n\n// If there is no previous token or it's expired, get a new one via authorization flow.\nif ($client->isAccessTokenExpired()) {\n    // Redirect the user to Google's OAuth 2.0 server for authentication.\n    if (empty($_GET['code'])) {\n        $authUrl = $client->createAuthUrl();\n        printf("Open the following link in your browser:\n%s\n", $authUrl);\n        print 'Enter verification code: ';\n        $authCode = trim(fgets(STDIN));\n\n        // Exchange authorization code for an access token.\n        $accessToken = $client->fetchAccessTokenWithAuthCode($authCode);\n\n        // Check for errors.\n        if (array_key_exists('error', $accessToken)) {\n            throw new Exception(join(', ', $accessToken));\n        }\n\n        // Save the token to a file.\n        if (!file_exists(dirname($tokenPath))) {\n            mkdir(dirname($tokenPath), 0700, true);\n        }\n        file_put_contents($tokenPath, json_encode($client->getAccessToken()));\n    } else {\n        $accessToken = json_decode(file_get_contents($tokenPath), true);\n    }\n\n    $client->setAccessToken($accessToken);\n}\n\n// Check to see if there was an error storing the token.\nif (array_key_exists('error', $accessToken)) {\n    throw new Exception(join(', ', $accessToken));\n}\n\n$service = new Calendar($client);\n\n$calendarId = 'your_calendar_id@group.calendar.google.com';\n$optParams = [\n  'maxResults' => 5,\n  'orderBy' => 'startTime',\n  'singleEvents' => true,\n  'timeMin' => date('c'),\n];\n\n$results = $service->events->listEvents($calendarId, $optParams);\n\n$events = $results->getItems();\n\nif (empty($events)) {\n    print "No upcoming events found.\n";\n} else {\n    foreach ($events as $event) {\n        $start = $event->start->dateTime;\n        if (empty($start)) {\n            $start = $event->start->date;\n        }\n        printf("%s (%s)\n", $event->getSummary(), $start);\n        if (!empty($event->getLocation())) {\n            printf("Location: %s\n", $event->getLocation());\n        }\n        printf("Link: %s\n", $event->htmlLink);\n    }\n}