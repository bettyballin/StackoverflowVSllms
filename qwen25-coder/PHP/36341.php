class DBObjectIterator implements Iterator {\n    private $result;\n    private $row;\n    private $position = 0;\n\n    public function __construct($result) {\n        if (!$result) {\n            throw new Exception("Invalid result set provided.");\n        }\n        $this->result = $result;\n        $this->rewind();\n    }\n\n    function rewind() {\n        // MySQLi: This could be an issue with unbuffered queries\n        // PDO: Use fetchAll or fetch in chunks if needed\n        $this->row = null;\n        $this->position = 0;\n        mysql_data_seek($this->result, 0);\n    }\n\n    function current() {\n        return $this->row ? unserialize(serialize(new dbObject($this->row))) : false; // Clone the object for safe usage\n    }\n\n    function key() {\n        return $this->position;\n    }\n\n    function next() {\n        if ($this->valid()) {\n            $this->row = mysql_fetch_assoc($this->result);\n            $this->position++;\n        } else {\n            $this->row = null;\n        }\n    }\n\n    function valid() {\n        $row = mysql_fetch_assoc($this->result);\n        if (!$row) {\n            return false;\n        }\n        // Put the fetched row back into the result set\n        mysqli_data_seek($this->result, $this->position);\n        $this->row = $row;\n\n        return true;\n    }\n\n    function __destruct() {\n        // Free memory associated with result\n        mysql_free_result($this->result);\n    }\n}