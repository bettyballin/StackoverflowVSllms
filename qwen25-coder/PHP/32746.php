class ExpressionBuilder {\n    private $fields = [\n        'FieldX' => ['type' => 'date'],\n        'FieldY' => ['type' => 'string'],\n        'FieldZ' => ['type' => 'null']\n    ];\n\n    public function buildExpression($conditions) {\n        if (!is_array($conditions)) return false;\n        \n        $expressions = [];\n        foreach ($conditions as $condition) {\n            if (isset($this->fields[$condition['field']])) {\n                switch ($condition['operator']) {\n                    case '>':\n                        // Add proper date conversion if the field type is 'date'\n                        $expression = "({$condition['field']} > '{$condition['value']}')";\n                        break;\n                    case '=':\n                        $expression = "({$condition['field']} = '{$condition['value']}')";\n                        break;\n                    case '!null':\n                        $expression = "({$condition['field']} IS NOT NULL)";\n                        break;\n                }\n                $expressions[] = $expression;\n            }\n        }\n\n        return implode(' AND ', $expressions);\n    }\n}\n\n// Example usage\n$conditions = [\n    ['field' => 'FieldX', 'operator' => '>', 'value' => '5/23/2007'],\n    // Add more conditions as needed\n];\n\n$builder = new ExpressionBuilder();\necho $builder->buildExpression($conditions);