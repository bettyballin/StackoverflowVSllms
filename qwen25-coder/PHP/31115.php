class CustomIterator implements IteratorAggregate {\n    protected $_array = ['foo' => 'bar', 'baz' => 'quux'];\n\n    public function getArray() {\n        return $this->_array;\n    }\n\n    public function setArray(array $array) {\n        $this->_array = $array;\n    }\n\n    public function getIterator() {\n        return new CustomArrayIterator($this->_array);\n    }\n}\n\nclass CustomArrayIterator implements Iterator {\n    private $array;\n    private $position;\n\n    public function __construct(array $array) {\n        $this->setPosition(0);\n        $this->array = $array;\n    }\n\n    public function rewind() {\n        $this->setPosition(0);\n    }\n\n    public function current() {\n        return $this->array[$this->position];\n    }\n\n    public function key() {\n        $keys = array_keys($this->array);\n        return $keys[$this->position];\n    }\n\n    public function next() {\n        ++$this->position;\n    }\n\n    public function valid() {\n        return isset($this->array[$this->position]);\n    }\n\n    private function setPosition($position) {\n        $this->position = $position < 0 ? 0 : $position;\n    }\n}\n\n// Usage\n$foo = new CustomIterator();\nforeach ($foo as $key => $value) {\n    echo "$key => $value\n";\n}