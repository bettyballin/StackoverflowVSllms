function isValidRssFeedUrl($url) {\n    // Validate URL format using filter_var\n    if (!filter_var($url, FILTER_VALIDATE_URL)) {\n        return false;\n    }\n\n    // Parse the URL to ensure it is safe (not a SSRF attempt)\n    $parsedUrl = parse_url($url);\n    \n    // Check that the host part exists and does not point to localhost or internal IPs\n    if (!isset($parsedUrl['host']) || \n        in_array(strtolower($parsedUrl['host']), ['localhost', '127.0.0.1', '::1'])) {\n        return false;\n    }\n\n    // Optionally, verify the URL points to a recognized RSS content type using cURL\n    $ch = curl_init($url);\n    curl_setopt_array($ch, [\n        CURLOPT_RETURNTRANSFER => true,\n        CURLOPT_HEADER => true,\n        CURLOPT_FOLLOWLOCATION => true,\n        CURLOPT_NOBODY => true,\n        CURLOPT_TIMEOUT => 10\n    ]);\n\n    $response = curl_exec($ch);\n    if ($response === false) {\n        return false;\n    }\n\n    // Check the Content-Type header to ensure it's an RSS feed\n    $headers = explode("\n", rtrim(curl_getinfo($ch, CURLINFO_HEADER_OUT)));\n    foreach ($headers as $header) {\n        if (stripos($header, 'Content-Type:') === 0 && preg_match('/application\/(rss|atom)\+xml/i', trim(explode(':', $header, 2)[1]))) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n$url = "http://example.com/rss";\nif (isValidRssFeedUrl($url)) {\n    // Parse the RSS feed securely\n    if (!class_exists('DOMDocument')) return false; // Ensure DOMDocument is available\n\n    $rssParser = new DOMDocument();\n    @$rssParser->load($url); // @ suppresses warnings, consider error handling strategy\n    \n    // Process RSS data\n} else {\n    echo "Invalid or unsafe RSS feed URL.";\n}