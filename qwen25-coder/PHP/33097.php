<?php\n\nfunction generateSubsetQueries($tags, $postId) {\n    $total = count($tags);\n    $queries = [];\n\n    // Generate all possible combinations of tags\n    for ($i = 1; $i <= $total; $i++) { // Start from 1 tag up to all tags\n        foreach (combinations($tags, $i) as $combination) {\n            $tagIds = implode(',', array_map(function ($tagId) {\n                return (int)$tagId;\n            }, $combination));\n\n            $queries[] = "\n                SELECT DISTINCT p.post_id, p.title \n                FROM Posts p\n                INNER JOIN Post_tag_nn pt ON p.post_id = pt.post_id\n                WHERE pt.tag_id IN ($tagIds)\n                  AND p.post_id != $postId";\n        }\n    }\n\n    return $queries;\n}\n\n// Function to generate combinations of a specific length from an array\nfunction combinations($arr, $n) {\n    $result = [];\n\n    if ($n > count($arr)) {\n        return [];\n    }\n\n    // Helper recursive function to build combinations\n    $combine = function ($start, $choose_, $arr_) use (&$combine, &$result, $n) {\n        if ($choose_ == 0) {\n            array_push($result, []);\n            return;\n        }\n        for ($i = $start; $i <= count($arr_) - $choose_; ++$i) {\n            $tmp = combinations_helper(array_slice($arr_, $i + 1), $choose_ - 1);\n            foreach ($tmp as &$t) {\n                array_unshift($t, $arr_[$i]);\n            }\n            $result = array_merge($result, $tmp);\n        }\n    };\n\n    $combine(0, $n, $arr);\n\n    return $result;\n}\n\n// Example usage\n$tags = [1, 2, 3, 4]; // Tag IDs associated with the specific post\n$postId = 10;           // ID of the specific post\n\n$queries = generateSubsetQueries($tags, $postId);\nforeach ($queries as $index => $query) {\n    echo "Query " . ($index + 1) . ": \n$query\n";\n    // Execute each query using your MySQL connection\n}