class HBool {\n    private $value;\n    private $changed;\n\n    public function __construct(bool $value = false) {\n        $this->value = $value;\n        $this->changed = false;\n    }\n\n    public function __invoke() : bool {\n        if (!$this->changed) {\n            $this->value = !$this->value;\n            $this->changed = true;\n            return !$this->value;\n        }\n        return $this->value;\n    }\n\n    public static function fromBool(bool $bool) : self {\n        return new self($bool);\n    }\n\n    public static function getFalse() : self {\n        return new self(false);\n    }\n\n    public static function getTrue() : self {\n        return new self(true);\n    }\n}\n\n// Usage\n$b = HBool::fromBool(false);\nvar_dump($b()); // bool(false)\nvar_dump($b()); // bool(true)\nvar_dump($b()); // bool(true)\n\n$b1 = HBool::getFalse();\nvar_dump($b1()); // bool(false)\nvar_dump($b1()); // bool(true)\nvar_dump($b1()); // bool(true)\n\n$b2 = HBool::getTrue();\nvar_dump($b2()); // bool(true)\nvar_dump($b2()); // bool(false)\nvar_dump($b2()); // bool(false)\n\n$b3 = new HBool();\nvar_dump($b3()); // bool(false)\nvar_dump($b3()); // bool(false)\nvar_dump($b3()); // bool(false)