<?php\n\nfunction Image($imagePath, $crop = null, $size = null) {\n    $sourceImage = imagecreatefromstring(file_get_contents($imagePath));\n\n    if (!is_resource($sourceImage)) {\n        return false;\n    }\n\n    $originalWidth = imagesx($sourceImage);\n    $originalHeight = imagesy($sourceImage);\n\n    // Determine crop dimensions\n    if ($crop === null) {\n        $cropRatioX = 1;\n        $cropRatioY = 1;\n    } else {\n        list($cropRatioX, $cropRatioY) = array_map('intval', explode(':', $crop));\n        // Ensure both parts of the ratio are numeric, default to square if not\n        if (!is_numeric($cropRatioX)) $cropRatioX = $cropRatioY;\n        if (!is_numeric($cropRatioY)) $cropRatioY = $cropRatioX;\n    }\n\n    $originalAspectRatio = $originalWidth / $originalHeight;\n    $requiredAspectRatio = $cropRatioX / $cropRatioY;\n\n    // Calculate crop dimensions to match aspect ratio\n    if ($originalAspectRatio > $requiredAspectRatio) {\n        // Image is wider than required, adjust width\n        $newWidth = $originalHeight * $requiredAspectRatio;\n        $newHeight = $originalHeight;\n        $xOffset = ($originalWidth - $newWidth) / 2;\n        $yOffset = 0;\n    } else if ($originalAspectRatio < $requiredAspectRatio) {\n        // Image is taller than required, adjust height\n        $newWidth = $originalWidth;\n        $newHeight = $originalWidth / $requiredAspectRatio;\n        $xOffset = 0;\n        $yOffset = ($originalHeight - $newHeight) / 2;\n    } else {\n        // Correct aspect ratio, no cropping needed\n        $newWidth = $originalWidth;\n        $newHeight = $originalHeight;\n        $xOffset = 0;\n        $yOffset = 0;\n    }\n\n    // Determine resize dimensions if specified\n    if ($size === null) {\n        $finalWidth = $newWidth;\n        $finalHeight = $newHeight;\n    } else {\n        list($width, $height) = array_map('intval', explode('x', $size));\n\n        if (!is_numeric($width)) $width = round($height * $newWidth / $newHeight);\n        if (!is_numeric($height)) $height = round($width * $newHeight / $newWidth);\n\n        $finalWidth = $width;\n        $finalHeight = $height;\n    }\n\n    // Create destination image\n    $destinationImage = imagecreatetruecolor($finalWidth, $finalHeight);\n    if (!is_resource($destinationImage)) {\n        imagedestroy($sourceImage);\n        return false;\n    }\n\n    imagealphablending($destinationImage, false);\n    imagesavealpha($destinationImage, true);\n\n    // Fill with transparent background\n    $transparentColor = imagecolorallocatealpha($destinationImage, 255, 255, 255, 127);\n    imagefill($destinationImage, 0, 0, $transparentColor);\n\n    imagetruecolortopalette($sourceImage, false, 256);\n    // Resample and crop\n    imagecopyresampled(\n        $destinationImage,\n        $sourceImage,\n        0, 0, // dest x,y\n        $xOffset, $yOffset, // source x,y\n        $finalWidth, $finalHeight, // dest width,height\n        $newWidth, $newHeight // source width,height\n    );\n\n    header('Content-Type: image/jpeg');\n    ImageInterlace($destinationImage, true);\n    ImageJPEG($destinationImage, null, 90);\n\n    // Free up memory\n    imagedestroy($sourceImage);\n    imagedestroy($destinationImage);\n\n    return true;\n}\n\n// Usage Examples\nImage('http://upload.wikimedia.org/wikipedia/commons/4/47/PNG_transparency_demonstration_1.png', '1:1', '600x');\nImage('http://upload.wikimedia.org/wikipedia/commons/4/47/PNG_transparency_demonstration_1.png', '2:1', '600x');\nImage('http://upload.wikimedia.org/wikipedia/commons/4/47/PNG_transparency_demonstration_1.png', '2:', '250x300');\n\n?>