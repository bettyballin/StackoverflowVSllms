use Zend\Permissions\Acl\Acl;\nuse Zend\Permissions\Acl\Resource;\nuse Zend\Permissions\Acl\Role;\n\n$acl = new Acl();\n\n// Define roles, resources, and rules\n\n$roles = ['guest', 'user', 'admin'];\nforeach ($roles as $role) {\n    $acl->addRole(new Role($role));\n}\n\n$acl->deny(); // Default to deny all\n$acl->allow('user', 'module/user/profile', 'edit'); // Users can edit their own profiles\n\n// Generic hierarchy\n$acl->addResource(new Resource('module'));\n$acl->addResource(new Resource('module/user'), 'module');\n$acl->addResource(new Resource('module/user/profile'), 'module/user');\n\n// Instance hierarchy\n$acl->addResource(new Resource('module_1/user1'));\n$acl->addResource(new Resource('module_1/user1/profile'), 'module_1/user1');\n\n// Custom permission checks to simulate multiple inheritance\nfunction isAllowedWithMultipleInheritance(Acl $acl, $role, $resource) {\n    // Check direct permissions\n    if ($acl->isAllowed($role, $resource)) {\n        return true;\n    }\n\n    // Extract the instance identifier (e.g., 'user1')\n    preg_match('/module_1\/(\w+)/', $resource, $matches);\n    $instance = isset($matches[1]) ? $matches[1] : null;\n\n    if ($instance) {\n        // Map instance to generic\n        $genericResource = str_replace('_1/' . $instance, '', $resource);\n\n        // Check against the generic resource permissions\n        return $acl->isAllowed($role, $genericResource);\n    }\n\n    return false;\n}\n\n// Usage example\n$isGuestAllowedToReadUser1Profile = isAllowedWithMultipleInheritance($acl, 'guest', 'module_1/user1/profile');\necho $isGuestAllowedToReadUser1Profile ? "Allowed" : "Denied"; // Outputs: Denied\n\n$acl->allow('user', 'module_1/user1/profile', 'read');\n$isUserAllowedToReadUser1Profile = isAllowedWithMultipleInheritance($acl, 'user', 'module_1/user1/profile');\necho $isUserAllowedToReadUser1Profile ? "Allowed" : "Denied"; // Outputs: Allowed