require_once 'vendor/autoload.php';\n\nsession_start();\n\n$client = new \Google_Client();\n$client->setApplicationName('Google Calendar Events Test');\n$client->setScopes([\Google_Service_Gmail::GMAIL_READONLY]);\n$client->setAuthConfig('credentials.json');\n$client->setAccessType('offline');\n\n// Load previously authorized token from a file, if it exists.\n$tokenPath = 'token.json';\nif (file_exists($tokenPath)) {\n    $accessToken = json_decode(file_get_contents($tokenPath), true);\n    $client->setAccessToken($accessToken);\n}\n\n// If there is no previous token or it's expired, obtain a new one by prompting the user.\nif ($client->isAccessTokenExpired()) {\n    if ($client->getRefreshToken()) {\n        $client->fetchAccessTokenWithRefreshToken($client->getRefreshToken());\n    } else {\n        // Request authorization from the user.\n        $authUrl = $client->createAuthUrl();\n        printf("Open the following link in your browser:\n%s\n", $authUrl);\n        print 'Enter verification code: ';\n        $authCode = trim(fgets(STDIN));\n\n        // Exchange authorization code for an access token.\n        $accessToken = $client->fetchAccessTokenWithAuthCode($authCode);\n\n        if (array_key_exists('error', $accessToken)) {\n            throw new Exception(join(', ', $accessToken));\n        }\n    }\n    // Save the token to a file.\n    if (!file_exists(dirname($tokenPath))) {\n        mkdir(dirname($tokenPath), 0700, true);\n    }\n    file_put_contents($tokenPath, json_encode($client->getAccessToken()));\n}\n\n// Get the Gmail service\n$service = new Google_Service_Gmail($client);\n\n// Call the Gmail API\n$user = 'me';\n$query = ''; // empty search will return all emails\n\ntry {\n    $results = $service->users_messages->listUsersMessages($user, ['q' => $query]);\n\n    if (count($results->getMessages()) == 0) {\n        print "No messages found.\n";\n    } else {\n        foreach ($results->getMessages() as $message) {\n            // Get each message by ID\n            $msg = $service->users_messages->get('me', $message['id']);\n            print 'Message Subject: ';\n            print $this->parseMsgPart($msg);\n            print "\n\n";\n        }\n    }\n} catch (Exception $e) {\n    print "An error occurred: " . $e->getMessage() . "\n";\n}\n\nprivate function parseMsgPart(Google_Service_Gmail_MessagePart &$part)\n{\n    if ($part['parts'][0]['mimeType'] == 'text/html') {\n        return htmlspecialchars($this->decodeBody($part));\n    }\n    else {\n        foreach ($part->getParts() as $child) {\n            return $this->parseMsgPart($child);\n        }\n    }\n}\n\nprivate function decodeBody(Google_Service_Gmail_MessagePart &$body)\n{\n    if (isset($body->parts[0]->body->data)) {\n        return base64url_decode($body->parts[0]->body->data);\n    }\n    else if ($body->body) {\n        return base64url_decode($body->body->data);\n    }\n}\n\nfunction base64url_decode($data)\n{\n    return base64_decode(strtr($data, '-_', '+/'));\n}