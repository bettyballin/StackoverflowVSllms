class PersonArray implements Iterator {\n    public $items = [];\n    public $internalRegisteredHashList = [];\n\n    public function insertAt($index, $object) {\n        if ($object->getHash()) {\n            // Insert the new object at the specified index\n            array_splice($this->items, $index, 0, [$object]);\n\n            // Update the hash map\n            $hash = $object->getHash();\n            $newIndex = $index;\n            foreach ($this->internalRegisteredHashList as $key => &$value) {\n                if ($value >= $newIndex) {\n                    $value++; // Increment indices that are greater than or equal to the new index\n                }\n            }\n\n            $this->internalRegisteredHashList[$hash] = $newIndex;\n        }\n    }\n\n    public function Find($pKey) {\n        if($this->ContainsKey($pKey)) {\n            return $this->Item($this->internalRegisteredHashList[$pKey]);\n        }\n    }\n\n    public function Add($object) {\n        if ($object->getHash()) {\n            $this->internalRegisteredHashList[$object->getHash()] = count($this->items);\n            $this->items[] = $object;\n        }\n    }\n\n    public function getItems() {\n        return $this->items;\n    }\n\n    public function ContainsKey($pKey) {\n        return isset($this->internalRegisteredHashList[$pKey]);\n    }\n\n    public function Count() {\n        return count($this->items);\n    }\n\n    public function Item($pKey) {\n        if (isset($this->items[$pKey])) {\n            return $this->items[$pKey];\n        }\n    }\n\n    // Iteration implementation\n    private $position = 0;\n\n    public function rewind() {\n        $this->position = 0;\n    }\n\n    public function current() {\n        return $this->items[$this->position];\n    }\n\n    public function key() {\n        return $this->position;\n    }\n\n    public function next() {\n        ++$this->position;\n    }\n\n    public function valid() {\n        return isset($this->items[$this->position]);\n    }\n}