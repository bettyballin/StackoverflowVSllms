amespace Application\Mvc\Route;\n\n   use Laminas\Router\Http\RouteInterface;\n   use Psr\Http\Message\ResponseInterface;\n   use Psr\Http\Message\ServerRequestInterface;\n   use Laminas\Db\Adapter\AdapterInterface;\n\n   class DatabaseRoute implements RouteInterface\n   {\n       private $adapter;\n\n       public function __construct(AdapterInterface $adapter)\n       {\n           $this->adapter = $adapter;\n       }\n\n       public function match(ServerRequestInterface $request, $pathOffset = null): ?array\n       {\n           $uriParts = explode('/', trim($request->getUri()->getPath(), '/'));\n           if (empty($uriParts)) {\n               return null;\n           }\n           \n           $pageName = array_shift($uriParts);\n           $sql = "SELECT controller, module, view FROM sitePage WHERE pageName = ?";\n           $result = $this->adapter->query($sql, [$pageName]);\n           $row = $result->current();\n\n           if (!$row) {\n               return null;\n           }\n\n           $params = [\n               'controller' => $row['controller'],\n               'action' => str_replace('.phtml', '', $row['view'])\n           ];\n\n           if ($row['module']) {\n               $params['module'] = $row['module'];\n           }\n\n           return [\n               'route' => __CLASS__,\n               'name' => null,\n               'options' => [],\n               'defaults' => $params\n           ];\n       }\n\n       public function assemble(array $params = [], array $options = []): ?string\n       {\n           // Not implementing assemble for simplicity, as this is not needed for matching only.\n           return null;\n       }\n\n       public static function factory(array $options)\n       {\n           throw new \Exception('Factory pattern deprecated');\n       }\n   }