class User implements JsonSerializable {\n    private $fname;\n    private $age;\n\n    public function __construct($fname = '', $age = 0) {\n        $this->fname = $fname;\n        $this->age = $age;\n    }\n\n    /**\n     * @return string\n     */\n    public function getFname() {\n        return $this->fname;\n    }\n\n    /**\n     * @return int\n     */\n    public function getAge() {\n        return $this->age;\n    }\n\n    /**\n     * Set the first name\n     * @param string $fname\n     */\n    public function setFname($fname) {\n        $this->fname = $fname;\n    }\n\n    /**\n     * Set the age\n     * @param int $age\n     */\n    public function setAge($age) {\n        $this->age = $age;\n    }\n\n    /**\n     * Specify data which should be serialized to JSON\n     * @link https://php.net/manual/en/jsonserializable.jsonserialize.php\n     * @return mixed data which can be serialized by <b>json_encode</b>,\n     * which is a value of any type other than a resource.\n     * @since 5.4.0\n     */\n    public function jsonSerialize() {\n        return [\n            'fname' => $this->fname,\n            'age' => $this->age,\n        ];\n    }\n}\n\n// Usage\n$user = new User();\n$user->setFname('John');\n$user->setAge(32);\n\necho json_encode($user);