class Singleton {\n    // Object instance\n    private static $instance;\n\n    protected function __construct() { }\n    public function __clone() { }\n    public function __wakeup() { }\n\n    protected static function getInstance() {\n        if (!self::$instance instanceof static) {  // Use `static` for late binding\n            self::$instance = new static();  // Create an instance of the subclass\n        }\n        return self::$instance;\n    }\n}\n\nclass Test extends Singleton {\n    private static $values = array();\n\n    protected function load() {\n        $this->values['a-value'] = "test";\n    }\n\n    public static function get($arg) {\n        if (count(self::getInstance()->values) === 0)\n            self::getInstance()->load();\n\n        if (isset(self::getInstance()->values[$arg]))\n            return self::getInstance()->values[$arg];\n\n        return false;\n    }\n}\n\n// Example usage\necho Test::get('a-value');  // Outputs: test