<?php\n\nfunction bfsShortestPath($graph, $startNode, $endNode) {\n    // Queue for BFS\n    $queue = new SplQueue();\n    $visitedNodes = [];\n    $previousNodes = [];\n\n    // Start with the starting node\n    $queue->enqueue($startNode);\n    $visitedNodes[$startNode] = true;\n\n    while (!$queue->isEmpty()) {\n        $currentNode = $queue->dequeue();\n\n        if ($currentNode === $endNode) {\n            // Reconstruct path from end to start using previous nodes\n            $path = [];\n            for ($node = $endNode; isset($previousNodes[$node]); $node = $previousNodes[$node]) {\n                array_unshift($path, $node);\n            }\n            array_unshift($path, $startNode); // Add the initial node at the start\n            return $path;\n        }\n\n        foreach ($graph[$currentNode] as $neighbor) {\n            if (!isset($visitedNodes[$neighbor])) {\n                $queue->enqueue($neighbor);\n                $visitedNodes[$neighbor] = true;\n                $previousNodes[$neighbor] = $currentNode;\n            }\n        }\n    }\n\n    return null; // No path found\n}\n\n// Example usage:\n$graph = [\n    'A' => ['B', 'C'],\n    'B' => ['A', 'D', 'E'],\n    'C' => ['A', 'F'],\n    'D' => ['B'],\n    'E' => ['B', 'F'],\n    'F' => ['C', 'E']\n];\n\n$startNode = 'A';\n$endNode = 'F';\n\n$path = bfsShortestPath($graph, $startNode, $endNode);\nif ($path) {\n    echo "Shortest path from $startNode to $endNode is: " . implode(' -> ', $path);\n} else {\n    echo "No path found between $startNode and $endNode.";\n}\n\n?>