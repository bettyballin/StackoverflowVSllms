interface FormatExporter {\n    public function export(array $data): string;\n}\n\nclass FormatXMLExporter implements FormatExporter {\n    public function export(array $data): string {\n        // Convert data array to XML format and return it as a string.\n        // Use DOMDocument or another XML manipulation library.\n        // ...\n        return $xmlString;\n    }\n}\n\nclass FormatXSLTExporter implements FormatExporter {\n    private $xsltFile;\n\n    public function __construct(string $xsltFile) {\n        $this->xsltFile = $xsltFile;\n    }\n\n    public function export(array $data): string {\n        // Load XSLT file and transform data using it.\n        // This is less likely to be used if you are leaning away from XSLT.\n        // ...\n        return $transformedString;\n    }\n}\n\nclass FormatCSVExporter implements FormatExporter {\n    public function export(array $data): string {\n        // Convert data array to CSV format and return it as a string.\n        // ...\n        return $csvString;\n    }\n}\n\n// Usage\n$exporter = new FormatXMLExporter();\n$xmlOutput = $exporter->export($peopleData);