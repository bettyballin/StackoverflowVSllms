<?php\n\nclass Singleton {\n    // Hold the class instance.\n    private static $instance = null;\n\n    // The constructor is private to prevent initiation with outer code.\n    private function __construct() {\n        // The expensive process (e.g., database connection) goes here.\n    }\n\n    // The object is created from within the class itself only if the class has no instance.\n    public static function getInstance() {\n        if (self::$instance == null) {\n            self::$instance = new Singleton();\n        }\n        return self::$instance;\n    }\n\n    // Example of a method that can be called on the singleton instance\n    public function showMessage() {\n        echo "Hello, I am a Singleton Class.";\n    }\n\n    // Prevent users to clone the instance\n    private function __clone() {}\n\n    // Prevent from being unserialized (which would create a second instance of it)\n    public function __wakeup() {\n        throw new Exception("Cannot unserialize singleton");\n    }\n}\n\n// Usage:\n$singleton1 = Singleton::getInstance();\n$singleton2 = Singleton::getInstance();\n\n$singleton1->showMessage(); // Output: Hello, I am a Singleton Class.\nvar_dump($singleton1 === $singleton2); // Output: bool(true) - both variables point to the same instance\n\n?>