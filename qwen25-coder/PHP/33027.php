require 'vendor/autoload.php';\n\nuse GuzzleHttp\Client;\nuse GuzzleHttp\Promise;\n\n$client = new Client();\n\n// Create a promise for each request\n$promise1 = $client->getAsync('http://example.com/api/data');\n$promise2 = $client->getAsync('http://example.com/api/more-data');\n\n// Use promises to handle responses asynchronously\n$responses = Promise\Utils::settle([$promise1, $promise2])\n    ->wait(); // Wait for all of them to finish (or fail)\n\nforeach ($responses as $response) {\n    if ($response['state'] == 'fulfilled') {\n        echo "Response: " . $response['value']->getBody()->getContents() . PHP_EOL;\n    } else {\n        echo "Request failed: " . $response['reason']->getMessage() . PHP_EOL;\n    }\n}\n\n// Your main script continues to execute while the HTTP requests are processed asynchronously\necho "Main script continues...\n";