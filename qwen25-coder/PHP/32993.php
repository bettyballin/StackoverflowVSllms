class MemcacheSingleton {\n    private static $instance = null;\n    private $mem;\n\n    // Private constructor to prevent instantiation\n    private function __construct() {\n        $this->mem = memcache_connect('localhost', 11211);\n        if (!$this->mem) {\n            throw new Exception('Could not connect to Memcache server.');\n        }\n    }\n\n    public static function getInstance() {\n        if (self::$instance == null) {\n            self::$instance = new MemcacheSingleton();\n        }\n        return self::$instance;\n    }\n\n    public function insert($key, $value) {\n        memcache_set($this->mem, $key, $value);\n    }\n\n    public function get($key) {\n        return memcache_get($this->mem, $key);\n    }\n\n    public function delete($key) {\n        memcache_delete($this->mem, $key);\n    }\n}\n\n// Usage\n$mc1 = MemcacheSingleton::getInstance();\n$mc2 = MemcacheSingleton::getInstance();\n\n$mc1->insert('test_key', 'test_value');\necho $mc2->get('test_key'); // Outputs: test_value