class HTML {\n    private $currentTag;\n\n    public function tag($tag = "", $attributes = [], $text = "") {\n        $newTag = new Tag($tag, $attributes, $text);\n        if ($this->currentTag) {\n            $this->currentTag->addChild($newTag);\n        }\n        $this->currentTag = $newTag;\n        return $this;\n    }\n\n    public function attr($key, $value) {\n        if ($this->currentTag) {\n            $this->currentTag->addAttribute($key, $value);\n        }\n        return $this;\n    }\n\n    public function text($text) {\n        if ($this->currentTag) {\n            $this->currentTag->setText($text);\n        }\n        return $this;\n    }\n\n    public function close() {\n        if ($this->currentTag) {\n            $this->currentTag = $this->currentTag->getParent();\n        }\n        return $this;\n    }\n\n    function __toString() {\n        $output = "";\n        if (!$this->currentTag || !$this->currentTag->getRoot()) {\n            return $output; // empty string\n        }\n        return (string)$this->currentTag->getRoot();\n    }\n}\n\nclass Tag {\n    private $name;\n    private $attributes;\n    private $text;\n    private $children = [];\n    private $parent = null;\n\n    public function __construct($name, $attributes = [], $text = "") {\n        $this->name = $name;\n        $this->attributes = $attributes;\n        $this->text = $text;\n    }\n\n    public function addChild(Tag $tag) {\n        $tag->setParent($this);\n        $this->children[] = $tag;\n    }\n\n    public function addAttribute($key, $value) {\n        $this->attributes[$key] = $value;\n    }\n\n    public function setText($text) {\n        $this->text = $text;\n    }\n\n    public function setParent(Tag $parent) {\n        $this->parent = $parent;\n    }\n\n    public function getParent() {\n        return $this->parent;\n    }\n\n    public function getRoot() {\n        if ($this->parent) {\n            return $this->parent->getRoot();\n        }\n        return $this;\n    }\n\n    function __toString() {\n        $output = "<$this->name";\n        foreach ($this->attributes as $key => $value) {\n            $output .= " {$key}=\"" . htmlspecialchars($value) . "\"";\n        }\n        $output .= ">";\n\n        if (!empty($this->children)) {\n            foreach ($this->children as $child) {\n                $output .= (string)$child;\n            }\n        } else {\n            $output .= $this->text;\n        }\n\n        return "$output</$this->name>";\n    }\n}