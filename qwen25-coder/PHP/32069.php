class Entity {\n    private $originalData;\n    private $_modified = false;\n\n    public function __construct(array $data) {\n        $this->originalData = $data;\n        foreach ($data as $key => $value) {\n            $this->$key = $value;\n        }\n    }\n\n    public function __set($name, $value) {\n        if (!isset($this->$name) || $this->$name !== $value) {\n            $this->$name = $value;\n            $this->_modified = true;\n        }\n    }\n\n    public function isModified() {\n        return $this->_modified;\n    }\n\n    // Optionally, you can add a method to reset the modified state if needed\n    public function markAsUnchanged() {\n        $this->_modified = false;\n    }\n}\n\nclass Repository {\n    public function save(Entity $entity) {\n        if ($entity->isModified()) {\n            // Logic to update persistent storage\n            echo "Entity has been modified, updating database...\n";\n            // Reset modification flag if needed after saving\n            $entity->markAsUnchanged();\n        } else {\n            echo "No changes detected.\n";\n        }\n    }\n}