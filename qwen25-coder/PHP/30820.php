function googleToPostgresSearch($query) {\n    // Define simple regular expressions to match different parts of the query\n    $regexes = [\n        'quoted' => '/"([^"]*)"/U',\n        'field'  => '/([a-zA-Z_]+):(.+?)(\s|$)/',\n        'word'   => '/(\w+)/'\n    ];\n\n    // Replace quoted phrases with a placeholder to avoid parsing them as separate words\n    preg_match_all($regexes['quoted'], $query, $matches);\n    foreach ($matches[1] as $i => $match) {\n        $token = "QUOTED{$i}";\n        $query = str_replace("\"$match\"", $token, $query);\n        $quotes[$token] = $match;\n    }\n\n    // Replace simple words with placeholders\n    preg_match_all($regexes['word'], $query, $matches);\n    foreach ($matches[1] as $i => $match) {\n        if (!isset($words["WORD{$i}"])) {\n            $words[] = $match;\n        }\n    }\n\n    // Split the query into parts to handle different operators\n    $operatorParts = preg_split('/\s*(AND|OR|-|\(|\))\s*/', $query, -1, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE);\n\n    $tsQueryParts = [];\n    $sqlWhereParts = ["to_tsvector(description) @@ to_tsquery('')"];\n    \n    foreach ($operatorParts as $part) {\n        if (in_array($part, ['AND', 'OR'])) {\n            $tsQueryParts[] = strtolower($part);\n            continue;\n        } elseif ($part === '-') {\n            $negate = true;\n            continue;\n        } elseif ($part === '(' || $part === ')') {\n            $tsQueryParts[] = $part;\n            continue;\n        }\n\n        // Check for field-specific search\n        if (preg_match($regexes['field'], $part, $fieldMatch)) {\n            $fieldName = $fieldMatch[1];\n            $fieldValue = trim($fieldMatch[2]);\n            \n            if (isset($quotes[$fieldValue])) {\n                $fieldValue = $quotes[$fieldValue] ?? $fieldValue;\n                $sqlWhereParts[] = "$fieldName ILIKE '" . pg_escape_string($fieldValue) . "'";\n            } else {\n                $escapedField = pg_escape_identifier($fieldName);\n                $escapedValue = pg_escape_string("'$fieldValue'"); // Properly escape for SQL\n                $sqlWhereParts[] = "$escapedField ILIKE $escapedValue";\n            }\n        } elseif (isset($quotes[$part])) {\n            // If it's a quoted phrase, add to tsquery as a literal\n            $tsQueryParts[] = '"' . pg_escape_string($quotes[$part]) . '"';\n        } else {\n            // Otherwise, treat as keyword in description field\n            $wordIndex = array_search($part, $words);\n            if ($wordIndex !== false) {\n                $escapedWord = pg_escape_string("\\$words[$wordIndex]");\n                $tsQueryParts[] = ($negate ? '!' : '') . "'$escapedWord'";\n            }\n        }\n\n        $negate = false; // Reset negation for the next word\n    }\n\n    // Join tsquery parts into a single query\n    $tsQueryString = implode(' ', $tsQueryParts);\n    if (empty($sqlWhereParts)) {\n        return 'WHERE description @@ to_tsquery(\'' . pg_escape_string($tsQueryString) . '\')';\n    } else {\n        return 'WHERE (' . str_replace("to_tsvector(description) @@ to_tsquery('')", "description @@ to_tsquery('" . pg_escape_string($tsQueryString) . "') ", implode(' AND ', $sqlWhereParts)) . ')';\n    }\n}\n\n// Usage\n$searchQuery = '((color:blue OR "4x4") OR style:coupe) -color:red used';\necho googleToPostgresSearch($searchQuery);