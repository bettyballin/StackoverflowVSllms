class Status {\n    const ACTIVE = 'active';\n    const INACTIVE = 'inactive';\n    const PENDING = 'pending';\n\n    private $value;\n\n    private function __construct($value) {\n        if (!in_array($value, self::getConstants())) {\n            throw new \InvalidArgumentException("Invalid status value");\n        }\n        $this->value = $value;\n    }\n\n    public static function active() { return new Status(self::ACTIVE); }\n    public static function inactive() { return new Status(self::INACTIVE); }\n    public static function pending() { return new Status(self::PENDING); }\n\n    private static function getConstants() {\n        $oClass = new \ReflectionClass(__CLASS__);\n        return $oClass->getConstants();\n    }\n\n    public function toString(): string {\n        return $this->value;\n    }\n\n    public function equalTo(Status $status): bool {\n        return $this->toString() === $status->toString();\n    }\n}\n\n// Usage\n$status = Status::active();\necho $status->toString(); // Outputs: active\n\nif ($status->equalTo(Status::pending())) {\n    echo "Status is pending.";\n} else {\n    echo "Status is not pending.";\n}