abstract class SQL_Stmt {\n    protected $type;\n    protected $columns = [];\n    protected $where = [];\n    protected $order = [];\n    protected $limit;\n\n    abstract protected function buildSQL();\n\n    public function set_type($type) {\n        $this->type = $type;\n    }\n\n    public function set_columns($columns) {\n        if (is_string($columns)) {\n            $this->columns[] = $columns;\n        } else if (is_array($columns)) {\n            $this->columns = array_merge($this->columns, $columns);\n        }\n    }\n\n    public function set_where(array $where) {\n        $this->where = array_merge($this->where, $where);\n    }\n\n    public function set_order($column, $direction = 'ASC') {\n        $this->order[] = [$column => strtoupper($direction)];\n    }\n\n    public function set_limit($offset = 0, $limit = null) {\n        $this->limit = ['offset' => $offset, 'limit' => $limit];\n    }\n\n    public function exec() {\n        $sql = $this->buildSQL();\n        // Here you would add database interaction logic\n        echo $sql;\n    }\n}\n\nclass MySQL_Stmt extends SQL_Stmt {\n    protected function buildSQL() {\n        $query = strtoupper($this->type) . ' ';\n        \n        if (!empty($this->columns)) {\n            $query .= implode(', ', $this->columns);\n        } else {\n            $query .= '*';\n        }\n\n        // Add other clauses like WHERE, ORDER BY, LIMIT\n        // ...\n\n        return $query;\n    }\n}\n\nclass MSSQL_Stmt extends SQL_Stmt {\n    protected function buildSQL() {\n        // Similar to MySQL_Stmt but with MSSQL syntax specifics\n    }\n}