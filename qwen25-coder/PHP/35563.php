<?php\n\nclass A implements IColumnMapped {\n    public $prop1, $prop2;\n    private $map;\n\n    public function __construct() {\n        $this->map = array();\n        $this->map['col1'] = &$this->prop1;\n        $this->map['col2'] = &$this->prop2;\n    }\n\n    public function getMap() {\n        return $this->map;\n    }\n}\n\ninterface IColumnMapped {}\n\n$mysqli = new mysqli("host", "user", "password", "database");\n\n// Prepare the statement\n$stmt = $mysqli->prepare("SELECT col1, col2, col3 FROM table WHERE col3 = ?");\n$stmt->bind_param("s", $value);\n\n// Example value for parameter binding\n$value = 'some_value';\n\n// Execute the query\n$stmt->execute();\n\n// Store result set from stmt object\n$result = $stmt->get_result();\n\n// Fetch metadata\n$metadata = $result->fetch_fields();\n\n// Prepare variables to bind to result set\n$params = array();\n$typeMap = '';\n\nforeach ($metadata as $field) {\n    // Add a variable to the params array\n    ${'var_' . $field->name} = null;\n    $params[] = &${'var_' . $field->name};\n    // Create a type map for values (this example assumes all values are strings)\n    if ($typeMap !== '') {\n        $typeMap .= 's';\n    } else {\n        $typeMap = 's';\n    }\n}\n\n// Bind results to variables in params array\ncall_user_func_array(array($result, 'bind_result'), $params);\n\n// Fetch the data and map it to class properties\nwhile ($result->fetch()) {\n    foreach ($metadata as $index => $field) {\n        if (isset($object->getMap()[$field->name])) {\n            $dest = &$object->getMap()[$field->name];\n            $dest = $params[$index];\n        }\n    }\n}\n\n// Close the statement and result set\n$stmt->close();\n$result->free();\n?>