function generateCombinations($prefix, $remaining, &$results) {\n    if (!empty($prefix)) {\n        $results[] = $prefix;\n    }\n    for ($i = 0; $i < strlen($remaining); $i++) {\n        generateCombinations($prefix . $remaining[$i], substr($remaining, $i + 1), $results);\n    }\n}\n\nfunction findSubsets($word) {\n    // Load a list of valid words (dictionary)\n    $validWords = loadDictionary();\n\n    // Generate all combinations\n    $combinations = [];\n    generateCombinations('', str_split($word));\n\n    // Filter combinations to find valid words\n    $subAnagrams = array_filter($combinations, function($combination) use ($validWords) {\n        return in_array(strVal(sortString($combination)), $validWords);\n    });\n\n    return $subAnagrams;\n}\n\nfunction sortString($string) {\n    $chars = str_split($string);\n    sort($chars);\n    return implode('', $chars);\n}\n\nfunction loadDictionary() {\n    // Dummy function to represent loading of dictionary\n    // In practice, this should load words from a file or database\n    return ['a', 'ar', 'as', 'at', 'are', 'art', 'arts', 'ears', 'er', 'ers', 'rate', 'rest', 'star', 'stare'];\n}\n\n// Example usage\n$word = "arrest";\n$subAnagrams = findSubsets($word);\nprint_r($subAnagrams);