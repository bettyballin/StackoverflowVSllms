class Validator {\n    private $conditions = [];\n    \n    public function addCondition(Condition $condition, $join = null) {\n        $this->conditions[] = [\n            'condition' => $condition,\n            'join' => $join\n        ];\n    }\n    \n    public function validate() {\n        if (empty($this->conditions)) return true; // No conditions to evaluate\n        \n        // Start evaluating from the first condition\n        $result = true;\n        foreach ($this->conditions as $index => $entry) {\n            $conditionResult = $entry['condition']->validate();\n            \n            if ($index == 0) {\n                // Initialize result with the first condition's result\n                $result = $conditionResult;\n                continue;\n            }\n            \n            $join = strtoupper($entry['join']);\n            switch ($join) {\n                case 'AND':\n                    $result = $result && $conditionResult;\n                    break;\n                case 'OR':\n                    $result = $result || $conditionResult;\n                    break;\n                case 'NOT':\n                    // NOT is a bit tricky, it negates the current condition result\n                    // and could be seen as applying to itself or what precedes it.\n                    // Here we interpret it as negating the result of the previous condition\n                    // combined with the current one.\n                    $result = !$conditionResult;\n                    break;\n                default:\n                    throw new \InvalidArgumentException("Invalid join operator: {$join}");\n            }\n        }\n        \n        return $result;\n    }\n}\n\ninterface Condition {\n    public function validate(): bool;\n}