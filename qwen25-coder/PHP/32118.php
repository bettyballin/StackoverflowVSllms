class ClassDetectionIterator extends IteratorIterator {\n    private $regex;\n\n    public function __construct(RecursiveIteratorIterator $iterator, $regex) {\n        parent::__construct($iterator);\n        $this->regex = $regex;\n    }\n\n    public function current() {\n        $file = parent::current(); // Get the current SplFileInfo object\n        if ($file->isFile() && strpos($file->getFilename(), '.php') !== false) {\n            $contents = file_get_contents($file->getPathname());\n            preg_match_all($this->regex, $contents, $matches);\n            \n            $classFiles = [];\n            foreach ($matches[1] as $className) { // Assuming the class names are in the first capture group\n                $classFiles[$className] = $file->getPathname();\n            }\n            return $classFiles;\n        }\n        return parent::current(); // Fallback, should not reach here due to filter logic\n    }\n\n    public function key() {\n        static $key = 0; // Create a unique key for each set of classes found\n        return $key++;\n    }\n\n    public function valid() {\n        if (parent::valid()) {\n            $file = parent::current(); // Get the current SplFileInfo object\n            return strpos($file->getFilename(), '.php') !== false;\n        }\n        return false;\n    }\n}\n\n// Usage\n$dir = '/path/to/your/directory';\n$regex = '/class\s+(\w+)/'; // Example regex to match class names\n\n$directoryIterator = new RecursiveDirectoryIterator($dir, RecursiveDirectoryIterator::SKIP_DOTS);\n$recursiveIterator = new RecursiveIteratorIterator($directoryIterator);\n\n$classDetectionIterator = new ClassDetectionIterator($recursiveIterator, $regex);\n$masterArray = [];\n\nforeach ($classDetectionIterator as $classes) {\n    if (is_array($classes)) {\n        $masterArray = array_merge($masterArray, $classes);\n    }\n}\n\nprint_r($masterArray);