interface UserRepositoryInterface {\n    public function findById(int $userId): ?User;\n    public function insert(User $user): void;\n    public function update(User $user): void;\n    public function delete(User $user): void;\n    public static function get(array $filters, array $orderValues, int $limit): array; // Returns a list of users\n}\n\nclass UserRepository implements UserRepositoryInterface {\n    private $pdo;\n\n    public function __construct(PDO $pdo) {\n        $this->pdo = $pdo;\n    }\n\n    public function findById(int $userId): ?User {\n        $stmt = $this->pdo->prepare("SELECT * FROM user WHERE user_id = :user_id");\n        $stmt->execute(['user_id' => $userId]);\n        $result = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        return $result ? new User($result['user_id'], $result['email'], $result['username'], $result['password'], $result['company_id'], (bool)$result['active']) : null;\n    }\n\n    public function insert(User $user): void {\n        // Insert logic here\n    }\n\n    public function update(User $user): void {\n        // Update logic here\n    }\n\n    public function delete(User $user): void {\n        // Delete logic here\n    }\n\n    public static function get(array $filters, array $orderValues, int $limit): array {\n        // Get method detailed implementation here, using PDO or any other database connector.\n    }\n}