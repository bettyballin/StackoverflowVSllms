interface MyInterface {\n    public function doSomething();\n}\n\nclass MyClass implements MyInterface {\n    public function doSomething() {\n        echo "Doing something!\n";\n    }\n}\n\nclass AnotherClass implements MyInterface {\n    public function doSomething() {\n        echo "Doing something else!\n";\n    }\n}\n\nclass TypedArray {\n    private array $elements = [];\n\n    /**\n     * Adds an element to the array if it implements MyInterface.\n     *\n     * @param MyInterface $element\n     */\n    public function addElement(MyInterface $element): void {\n        $this->elements[] = $element;\n    }\n\n    /**\n     * Returns all elements in the array.\n     *\n     * @return array\n     */\n    public function getElements(): array {\n        return $this->elements;\n    }\n}\n\n// Usage\n$typedArray = new TypedArray();\n$typedArray->addElement(new MyClass());\n$typedArray->addElement(new AnotherClass());\n\nforeach ($typedArray->getElements() as $element) {\n    $element->doSomething();\n}