/** \n * Convert an IPv4 or IPv6 address to binary format suitable for database storage.\n *\n * @param string $ip The IP address in dot-decimal (IPv4) or colon-separated (IPv6) notation.\n * @return string|bool Binary representation of the IP address, or false if invalid.\n */\nfunction ipToBinary($ip) {\n    $binaryIp = inet_pton($ip);\n    return $binaryIp === false ? null : $binaryIp; // Use NULL for invalid IPs instead of false\n}\n\n/**\n * Convert a binary IPv4 or IPv6 address back to string format.\n *\n * @param string $binaryIp The binary representation of the IP address.\n * @return string|bool Human-readable IPv4/IPv6 address, or null if input is not valid.\n */\nfunction binaryToIp($binaryIp) {\n    return inet_ntop($binaryIp);\n}\n\n/**\n * Get client's real IP address in binary form suitable for database storage\n *\n * @param bool $forDatabase If true, returns the IP address in binary format.\n * @return string|null The binary or human-readable IP address of the client.\n */\nfunction getClientIpAddress(bool $forDatabase = false) {\n    // This is a simple example. In production, use proper logic to get trusted IP\n    $ip = $_SERVER['REMOTE_ADDR'] ?? null;\n\n    // Validate the IP format (IPv4 or IPv6)\n    if (!filter_var($ip, FILTER_VALIDATE_IP)) {\n        return null;\n    }\n\n    return $forDatabase ? ipToBinary($ip) : $ip;\n}