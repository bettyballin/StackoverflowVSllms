class BookShelf implements ArrayAccess, Countable, SeekableIterator {\n    protected $_books = [];\n    protected $_magazines = [];\n    private $position = 0;\n    private $subArrayIndex = 'books'; // Start with books\n\n    public function __construct($books, $magazines) {\n        $this->_books = $books;\n        $this->_magazines = $magazines;\n    }\n\n    public function rewind() {\n        $this->position = 0;\n        $this->subArrayIndex = 'books';\n    }\n\n    public function current() {\n        if ($this->subArrayIndex === 'books' && isset($this->_books[$this->position])) {\n            return $this->_books[$this->position];\n        } elseif ($this->subArrayIndex === 'magazines' && isset($this->_magazines[$this->position])) {\n            return $this->_magazines[$this->position];\n        }\n        throw new OutOfBoundsException("Invalid seek position");\n    }\n\n    public function key() {\n        return $this->position;\n    }\n\n    public function next() {\n        if ($this->subArrayIndex === 'books' && isset($this->_books[$this->position + 1])) {\n            $this->position++;\n        } else {\n            $this->position = 0;\n            $this->subArrayIndex = 'magazines';\n            // Check if magazines array is not empty and move to next if it's empty\n            if (!isset($this->_magazines[$this->position]) && count($this->_magazines) === 0) {\n                throw new OutOfBoundsException("No more elements");\n            }\n        }\n    }\n\n    public function valid() {\n        if ($this->subArrayIndex === 'books' && isset($this->_books[$this->position])) {\n            return true;\n        } elseif ($this->subArrayIndex === 'magazines' && isset($this->_magazines[$this->position])) {\n            return true;\n        }\n        return false;\n    }\n\n    public function seek($position) {\n        if ($position >= 0 && $position < count($this->_books)) {\n            $this->position = $position;\n            $this->subArrayIndex = 'books';\n        } elseif ($position >= count($this->_books) && $position - count($this->_books) < count($this->_magazines)) {\n            $this->position = $position - count($this->_books);\n            $this->subArrayIndex = 'magazines';\n        } else {\n            throw new OutOfBoundsException("Invalid seek position");\n        }\n    }\n\n    // Methods for ArrayAccess and Countable interfaces\n    public function offsetExists($offset) {\n        return ($offset >= 0 && $offset < count($this->_books)) || \n               ($offset >= count($this->_books) && $offset - count($this->_books) < count($this->_magazines));\n    }\n\n    public function offsetGet($offset) {\n        if ($offset >= 0 && $offset < count($this->_books)) {\n            return $this->_books[$offset];\n        } elseif ($offset >= count($this->_books) && $offset - count($this->_books) < count($this->_magazines)) {\n            return $this->_magazines[$offset - count($this->_books)];\n        }\n        throw new OutOfBoundsException("Invalid offset");\n    }\n\n    public function offsetSet($offset, $value) {\n        if ($offset >= 0 && $offset < count($this->_books)) {\n            $this->_books[$offset] = $value;\n        } elseif ($offset >= count($this->_books) && $offset - count($this->_books) < count($this->_magazines)) {\n            $this->_magazines[$offset - count($this->_books)] = $value;\n        } else {\n            throw new OutOfBoundsException("Invalid offset");\n        }\n    }\n\n    public function offsetUnset($offset) {\n        if ($offset >= 0 && $offset < count($this->_books)) {\n            unset($this->_books[$offset]);\n        } elseif ($offset >= count($this->_books) && $offset - count($this->_books) < count($this->_magazines)) {\n            unset($this->_magazines[$offset - count($this->_books)]);\n        } else {\n            throw new OutOfBoundsException("Invalid offset");\n        }\n    }\n\n    public function count() {\n        return count($this->_books) + count($this->_magazines);\n    }\n}\n\n// Example usage\n$shelf = new BookShelf(['Book 1', 'Book 2'], ['Magazine 1', 'Magazine 2']);\n\nforeach ($shelf as $item) {\n    echo $item . "\n";\n}