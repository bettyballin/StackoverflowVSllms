class Test {\n    public $a;\n    private $b;\n\n    function __get($key) { \n        if (property_exists($this, $key)) {\n            return $this->$key; \n        }\n    }\n\n    // Setter method for b with validation\n    function setB($val) {\n        if (!is_numeric($val)) throw new Exception("Variable b must be numeric");\n        echo "__SET: Setting b to {$val}<br/>";\n        $this->b = $val;\n    }\n\n    function bMethod() {\n        try {\n            // Use the setter method within the class\n            $this->setB("World2");\n        } catch (Exception $e) {\n            echo "FAIL within bMethod: Testing b exception handling {$e->getMessage()}<br/>";\n        }\n    }\n}\n\n$t = new Test();\n\n// testing a\ntry {\n    $t->a = "hello";\n    echo "PASS: Testing a: {$t->a}<br/>";\n} catch (Exception $e)  {\n    echo "FAIL: Testing a";\n}\n\n// testing b\ntry {\n    $t->setB("world");\n    echo "FAIL: Testing b exception handling<br/>";\n} catch (Exception $e){\n    echo "PASS: Testing b exception handling {$e->getMessage()}<br/>";\n}\n\n// testing b with valid value\ntry  {\n    $t->setB(123);\n    echo "PASS: Testing b with valid value: {$t->b}<br/>";\n} catch (Exception $e) {\n    echo "FAIL: Testing b";\n}\n\n// bypassing exception handling with method\n$t->bMethod();