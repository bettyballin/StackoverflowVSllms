public function save(PropelPDO $con = null) {\n    $con = Propel::getConnection();\n    try {\n        $con->beginTransaction();\n\n        // Fetch the Foo object with a FOR UPDATE lock to prevent other transactions from modifying it\n        $foo = $this->getFoo(); // Ensure this method fetches with a locking clause if needed\n\n        // If your getFoo() doesn't support locking, replace it with raw SQL for demonstration:\n        // $sql = "SELECT * FROM foo WHERE id = ? FOR UPDATE";\n        // $stmt = $con->prepare($sql);\n        // $stmt->execute([$this->getFooId()]);\n        // $fooData = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        // Perform operations on Foo\n        if ($foo->someCondition()) {\n            $foo->doModification();\n        }\n\n        parent::save($con);\n        $foo->save($con);\n\n        $con->commit();\n    } catch (Exception $e) {\n        $con->rollBack();\n        throw $e;\n    }\n}