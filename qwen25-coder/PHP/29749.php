require_once __DIR__ . '/vendor/autoload.php';\n\nuse Google\Client;\nuse Google\Service\Gmail;\nuse Google\Service\Gmail\Message;\n\nfunction getClient() {\n    $client = new Client();\n    $client->setApplicationName('Gmail API PHP Quickstart');\n    $client->setScopes([Gmail::MAIL_GOOGLE_COM]);\n    $client->setAuthConfig('credentials.json');\n    $client->setAccessType('offline');\n\n    // Load previously authorized token from a file, if it exists.\n    $tokenPath = 'token.json';\n    if (file_exists($tokenPath)) {\n        $accessToken = json_decode(file_get_contents($tokenPath), true);\n        $client->setAccessToken($accessToken);\n    }\n\n    // If there is no previous token or itâ€™s expired, get a new one.\n    if ($client->isAccessTokenExpired()) {\n        // Refresh the token if possible\n        if ($client->getRefreshToken()) {\n            $client->fetchAccessTokenWithRefreshToken($client->getRefreshToken());\n        } else {\n            // Redirect to Google's authorization server:\n            $authUrl = $client->createAuthUrl();\n            printf("Open the following link in your browser:\n%s\n", $authUrl);\n            print 'Enter verification code: ';\n            $authCode = trim(fgets(STDIN));\n\n            // Exchange authorization code for an access token.\n            $accessToken = $client->fetchAccessTokenWithAuthCode($authCode);\n            $client->setAccessToken($accessToken);\n\n            // Check to see if there was an error.\n            if (array_key_exists('error', $accessToken)) {\n                throw new Exception(join(', ', $accessToken));\n            }\n        }\n\n        // Save the token to a file.\n        if (!file_exists(dirname($tokenPath))) {\n            mkdir(dirname($tokenPath), 0700, true);\n        }\n        file_put_contents($tokenPath, json_encode($client->getAccessToken()));\n    }\n\n    return $client;\n}\n\nfunction sendMessage($service, $userId, $email) {\n    try {\n        // The message needs to be encoded in URL-safe base64.\n        $encodedEmail = rtrim(strtr(base64_encode($email), '+/', '-_'), '=');\n        $message = new Message(['raw' => $encodedEmail]);\n        \n        // Call the Gmail API\n        $message = $service->users_messages->send($userId, $message);\n\n        printf('Message with ID: %s sent.', $message->getId());\n        return $message;\n    } catch (Exception $e) {\n        print 'An error occurred while sending message: ' . $e->getMessage();\n    }\n}\n\n// Get the API client and construct the service\n$client = getClient();\n$service = new Gmail($client);\n\n// Base64 encode raw email string with Gmail API requirements.\nrawEmailString = "From: user@example.com\r\n"\n                ."To: someone@domain.com\r\n"\n                ."Subject: Hello from PHP!\r\n"\n                ."\r\n"\n                ."This is a message sent via the Gmail API using PHP.";\n$email = base64_encode($rawEmailString);\n$email = strtr($email, '+/=', '-_,');\n\n// Send an email\nsendMessage($service, 'me', $email);