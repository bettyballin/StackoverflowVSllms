class Helper {\n    private $loadedFunctions = [];\n\n    public function load($file) {\n        if (file_exists($file)) {\n            include_once $file;\n            // Assuming each file has functions named like 'function_name'\n            $funcName = basename($file, '.php');\n            if (function_exists($funcName)) {\n                $this->loadedFunctions[$funcName] = $funcName;\n            } else {\n                throw new Exception("Function {$funcName} not found in file.");\n            }\n        } else {\n            throw new Exception("File {$file} does not exist.");\n        }\n    }\n\n    public function __call($name, $arguments) {\n        if (array_key_exists($name, $this->loadedFunctions)) {\n            return call_user_func_array($this->loadedFunctions[$name], $arguments);\n        } else {\n            throw new Exception("Method {$name} not found.");\n        }\n    }\n}