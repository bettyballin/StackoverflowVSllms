<?php\n// Constants for node size and spacing\ndefine("NODE_RADIUS", 20);\ndefine("NODE_SPACING_X", 150);\ndefine("NODE_SPACING_Y", 150);\n\n// Create a new true color image\n$width = 800;\n$height = 600;\n$image = imagecreatetruecolor($width, $height);\n\n// Colors\n$bgColor = imagecolorallocate($image, 255, 255, 255); // White background\n$nodeColor = imagecolorallocate($image, 200, 200, 200); // Grey nodes\n$textColor = imagecolorallocate($image, 0, 0, 0); // Black text\n$arrowColor = imagecolorallocate($image, 150, 150, 150); // Grey arrows\n\n// Fill the background with white color\nimagefill($image, 0, 0, $bgColor);\n\n// Example graph: nodes and edges (format: 'nodeA' => ['nodeB', 'nodeC'])\n$graph = [\n    "A" => ["B", "C"],\n    "B" => ["D"],\n    "C" => ["E", "F"]\n];\n\nfunction drawNode($image, $x, $y, $label) {\n    global $nodeColor, $textColor;\n    \n    // Draw node\n    imagefilledellipse($image, $x, $y, NODE_RADIUS * 2, NODE_RADIUS * 2, $nodeColor);\n    \n    // Label node\n    imagettftext($image, 12, 0, $x - NODE_RADIUS / 3 + 2, $y + NODE_RADIUS / 3 - 1, $textColor, __DIR__ . '/arial.ttf', $label);\n}\n\nfunction drawArrow($image, $fromX, $fromY, $toX, $toY) {\n    global $arrowColor;\n    \n    // Draw arrow line\n    imageline($image, $fromX + NODE_RADIUS, $fromY, $toX - NODE_RADIUS, $toY, $arrowColor);\n    \n    // Arrow head\n    $angle = atan2(($toY - $fromY), ($toX - $fromX));\n    $px = $fromX + cos($angle + pi() / 4) * (NODE_RADIUS + 5);\n    $py = $fromY + sin($angle + pi() / 4) * (NODE_RADIUS + 5);\n    imageline($image, $toX - NODE_RADIUS, $toY, $px, $py, $arrowColor);\n    \n    $px = $fromX + cos($angle - pi() / 4) * (NODE_RADIUS + 5);\n    $py = $fromY + sin($angle - pi() / 4) * (NODE_RADIUS + 5);\n    imageline($image, $toX - NODE_RADIUS, $toY, $px, $py, $arrowColor);\n}\n\n// Draw nodes and edges\nforeach ($graph as $node => $edges) {\n    $startX = 100;\n    $startY = 100 + array_search($node, array_keys($graph)) * NODE_SPACING_Y;\n    \n    // Draw node\n    drawNode($image, $startX, $startY, $node);\n    \n    // For simplicity assume edge layout straight down and right\n    $i = 0;\n    foreach ($edges as $edge) {\n        $toNodePos = array_search($edge, array_keys($graph));\n        \n        if ($toNodePos !== false){\n            $endX = NODE_SPACING_X + $startX;\n            $endY = $node == "B" ? 100 : (100 + $toNodePos * NODE_SPACING_Y);\n            \n            // Draw node\n            drawNode($image, $endX, $endY, $edge);\n\n            // Draw arrow between nodes\n            drawArrow($image, $startX, $startY, $endX, $endY);\n        }\n    }\n}\n\n// Output image to browser\nheader('Content-Type: image/png');\nimagepng($image);\n\n// Free up memory\nimagedestroy($image);\n?>