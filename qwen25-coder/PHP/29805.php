class Cache {\n    private $data;\n\n    // Private constructor to force use of static factory methods\n    private function __construct($data) {\n        $this->data = $data;\n    }\n\n    // Static method for creating a Cache from a file path\n    public static function fromFile($filePath) {\n        if (!is_file($filePath)) {\n            throw new InvalidArgumentException("Invalid file path provided.");\n        }\n        return new self(file_get_contents($filePath));\n    }\n\n    // Static method for creating a Cache from a URL\n    public static function fromUrl($url) {\n        $parsedUrl = parse_url($url);\n        if ($parsedUrl === false || !isset($parsedUrl['scheme'])) {\n            throw new InvalidArgumentException("Invalid URL provided.");\n        }\n        $data = file_get_contents($url);\n        if ($data === false) {\n            throw new RuntimeException("Failed to fetch data from URL.");\n        }\n        return new self($data);\n    }\n\n    // Static method for creating a Cache from a string\n    public static function fromString($string) {\n        if (!is_string($string)) {\n            throw new InvalidArgumentException("Invalid string provided.");\n        }\n        return new self($string);\n    }\n\n    // Method to get the data\n    public function getData() {\n        return $this->data;\n    }\n}