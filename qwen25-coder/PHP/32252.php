function validate_and_migrate_password($plain_password, $oscommerce_hash, &$new_application_hash) {\n    // Split the osCommerce hash into the actual hash and salt\n    list($hash, $salt) = explode(':', $oscommerce_hash);\n\n    // Check if the provided plain password matches the stored osCommerce-style hash\n    if (md5($salt . $plain_password) == $hash) {\n        // Password is valid. Now create a new hash using your application's method.\n        $new_application_hash = md5($plain_password);\n        return true;\n    }\n\n    return false;\n}\n\n// Example usage:\n$oscommerce_stored_hash = "acaa6e689ae0008285320e6617ca8e95:74"; // Example hash from osCommerce\n$user_provided_password = "PaSs"; // Password the user entered\n\n$new_md5_hash = '';\nif (validate_and_migrate_password($user_provided_password, $oscommerce_stored_hash, $new_md5_hash)) {\n    echo "Password is correct. Migrated password hash: " . $new_md5_hash;\n    // Here you would update your new application's database with $new_md5_hash\n} else {\n    echo "Incorrect password.";\n}