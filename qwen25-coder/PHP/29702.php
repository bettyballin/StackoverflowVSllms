public function select($psTableName, $paFields = "*", $paWhere = array())\n{\n    // Initial return value\n    $lbReturn = false;\n    \n    try {\n        $lsQuery = "SELECT {$paFields} FROM `{$psTableName}`";\n        \n        if (!empty($paWhere)) {\n            $aConditions = [];\n            foreach ($paWhere as $key => $value) {\n                $aConditions[] = "`$key` = ?";\n            }\n            \n            $lsQuery .= " WHERE " . implode(" AND ", $aConditions);\n        }\n\n        // Prepare statement\n        if (!$stmt = $this->mPDOConnection->prepare($lsQuery)) {\n            throw new DBException("Prepare failed: " . $this->mPDOConnection->error);\n        }\n        \n        // Bind parameters\n        $types = str_repeat('s', count($paWhere));\n        array_unshift($paWhere, $types); // Add types at the beginning\n        \n        call_user_func_array(array($stmt, 'bind_param'), $this->refValues($paWhere));\n        \n        if (!$stmt->execute()) {\n            throw new DBException("Execution failed: " . $stmt->error);\n        } else {\n            // Process results\n            $lbReturn = true;\n        }\n    } catch (DBException $errorMsg) {\n        ErrorHandler::handleException($errorMsg);\n    }\n    \n    return $lbReturn;\n}\n\n// Helper function to make references for bind_param\nprivate function refValues($arr)\n{\n    $refs = [];\n    foreach ($arr as $key => $value) {\n        $refs[$key] = &$arr[$key];\n    }\n    return $refs;\n}