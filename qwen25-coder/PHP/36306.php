function projectListToTree($projects) {\n    $root = array();\n    $stack = array();\n\n    foreach ($projects as $project) {\n        // Remove nodes from the stack that are completed (parent boundaries)\n        while (!empty($stack) && $stack[count($stack) - 1]['Right'] < $project['Left']) {\n            array_pop($stack);\n        }\n\n        if (\count($stack)) {\n            // Add current project as a child of the last element in the stack\n            $stack[count($stack) - 1]['Children'][] = &$project;\n        } else {\n            // If there's no parent, this is part of the root\n            $root[] = &$project;\n        }\n\n        // Push the current node onto the stack\n        $stack[] = &$project;\n    }\n\n    return $root;\n}\n\n// Project data in MPTT format\n$projects = [\n    ["ID" => "2", "Left" => "2", "Right" => "9", "ParentID" => "1", "Name" => "Parent"],\n    ["ID" => "3", "Left" => "3", "Right" => "4", "ParentID" => "2", "Name" => "First Child"],\n    ["ID" => "4", "Left" => "5", "Right" => "8", "ParentID" => "2", "Name" => "Second Child"],\n    ["ID" => "5", "Left" => "6", "Right" => "7", "ParentID" => "4", "Name" => "Grand Child"]\n];\n\n$tree = projectListToTree($projects);\necho "-----\n\n\n\n";\nvar_dump($tree[0]); // Output the root node