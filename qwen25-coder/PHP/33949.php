<?php\n\n// Database connection setup - adjust accordingly\n$dsn = 'mysql:host=your_host;dbname=your_db;charset=utf8mb4';\n$username = 'your_username';\n$password = 'your_password';\n\ntry {\n    $pdo = new PDO($dsn, $username, $password);\n} catch (\PDOException $e) {\n    throw new \PDOException($e->getMessage(), (int)$e->getCode());\n}\n\n$emailsFilePath = '/path/to/emails.csv'; // CSV file format: email,language,username\n$batchSize = 100; // Number of emails to send per batch\n\n// Function to parse the CSV line into an array\nfunction parseCsvLine($line) {\n    $data = str_getcsv(trim($line));\n    return [\n        'email' => trim($data[0]),\n        'language' => trim($data[1]),\n        'username' => trim($data[2])\n    ];\n}\n\n// Function to send an email using PHPMailer\nfunction sendEmail($to, $subject, $body) {\n    // Use PHPMailer for sending emails\n    require '/path/to/PHPMailer/src/Exception.php';\n    require '/path/to/PHPMailer/src/PHPMailer.php';\n    require '/path/to/PHPMailer/src/SMTP.php';\n\n    $mail = new \PHPMailer\PHPMailer\PHPMailer(true);\n\n    try {\n        //Server settings\n        $mail->isSMTP();\n        // SMTP config...\n\n        //Recipients\n        $mail->setFrom('from@example.com', 'Mailer');\n        $mail->addAddress($to);     // Add a recipient\n\n        // Content\n        $mail->isHTML(false);\n        $mail->Subject = $subject;\n        $mail->Body    = $body;\n\n        $mail->send();\n    } catch (\PHPMailer\PHPMailer\Exception $e) {\n        echo "Message could not be sent. Mailer Error: {$mail->ErrorInfo}";\n        return false;\n    }\n    return true;\n}\n\n// Check the last processed line\n$stmt = $pdo->query("SELECT MAX(line_number) FROM email_logs");\n$lastProcessedLine = (int)$stmt->fetchColumn();\n\n$file = fopen($emailsFilePath, 'r');\n\nif (!$file) {\n    die('Cannot open file for reading.');\n}\n\n$currentLine = 0;\nwhile (($line = fgets($file)) !== false) {\n    // Skip processed lines\n    if ($currentLine < $lastProcessedLine) {\n        $currentLine++;\n        continue;\n    }\n\n    $data = parseCsvLine($line);\n    if (!empty($data['email'])) {\n        $subject = "Personalized Subject";\n        $body = getTranslatedBody($data['language'], $data['username']);\n        \n        // Send email\n        if (sendEmail($data['email'], $subject, $body)) {\n            // Log sent email to avoid resending\n            $stmt = $pdo->prepare("INSERT INTO email_logs (line_number, email) VALUES (?, ?)");\n            $stmt->execute([$currentLine, $data['email']]);\n        }\n    }\n\n    $currentLine++;\n    \n    // Process emails in batches to avoid timeouts\n    if (($currentLine - $lastProcessedLine) % $batchSize == 0) {\n        fclose($file);\n        exit(0); // Exit to allow resuming by the user\n    }\n}\n\nfclose($file);\n\n// Function to get translated email body based on language and username\nfunction getTranslatedBody($language, $username) {\n    switch ($language) {\n        case 'en':\n            return "Hello $username, this is your message in English.";\n        case 'es':\n            return "Hola $username, este es su mensaje en espa√±ol.";\n        // Add more languages as needed\n        default:\n            return "Hello $username, this is a fallback message.";\n    }\n}