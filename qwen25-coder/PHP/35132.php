class Database {\n    private $pdo;\n\n    public function __construct($host, $dbname, $username, $password) {\n        try {\n            $this->pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);\n            // Set the PDO error mode to exception\n            $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n        } catch (PDOException $e) {\n            die("Connection failed: " . $e->getMessage());\n        }\n    }\n\n    public function doSelect($query, $params = []) {\n        try {\n            // Prepare the statement\n            $stmt = $this->pdo->prepare($query);\n\n            // Execute the statement with parameters\n            $stmt->execute($params);\n\n            // Fetch all results as an associative array\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch (PDOException $e) {\n            echo "Query failed: " . $e->getMessage();\n            return [];\n        }\n    }\n}\n\n// Usage example:\n$db = new Database('localhost', 'database_name', 'username', 'password');\n$query  = "SELECT * FROM someTable WHERE someField = ? AND anotherField = ?";\n$params = array($var1, $var2);\n$result = $db->doSelect($query, $params);\n\nforeach ($result as $row) {\n    // ... do stuff with each row\n}