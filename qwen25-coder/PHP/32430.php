<?php\n\nfunction checkUrls($urls, $timeout = 10) {\n    $mh = curl_multi_init();\n    $channels = [];\n\n    foreach ($urls as $id => $url) {\n        $ch[$id] = curl_init();\n\n        curl_setopt($ch[$id], CURLOPT_URL, $url);\n        curl_setopt($ch[$id], CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch[$id], CURLOPT_NOBODY, true); // Only fetch headers\n        curl_setopt($ch[$id], CURLOPT_TIMEOUT, $timeout); // Set timeout\n\n        curl_multi_add_handle($mh, $ch[$id]);\n    }\n\n    $active = null;\n    do {\n        $mrc = curl_multi_exec($mh, $active);\n    } while ($mrc == CURLM_CALL_MULTI_PERFORM);\n\n    while ($active && $mrc == CURLM_OK) {\n        if (curl_multi_select($mh) != -1) {\n            do {\n                $mrc = curl_multi_exec($mh, $active);\n            } while ($mrc == CURLM_CALL_MULTI_PERFORM);\n        }\n    }\n\n    $results = [];\n    foreach ($channels as $id => $ch) {\n        $httpCode = curl_getinfo($ch[$id], CURLINFO_HTTP_CODE);\n        if (curl_errno($ch[$id])) {\n            // Handle error\n            $results[$url] = ['error' => curl_error($ch[$id]), 'code' => null];\n        } else {\n            $results[$url] = ['status' => $httpCode >= 200 && $httpCode < 300, 'code' => $httpCode];\n        }\n        curl_multi_remove_handle($mh, $ch[$id]);\n    }\n\n    curl_multi_close($mh);\n\n    return $results;\n}\n\n$urls = [\n    "https://example.com",\n    "https://another-example.com",\n    // Add more URLs here\n];\n\n$results = checkUrls($urls);\n\nforeach ($results as $url => $result) {\n    if (isset($result['error'])) {\n        echo "URL: $url Error: {$result['error']}\n";\n    } else {\n        if (!$result['status']) {\n            echo "URL: $url is potentially broken with HTTP Code: {$result['code']}\n";\n        }\n    }\n}\n\n?>