class EngineTypeBroker {\n    attribute definitions = [];\n\n    // Registering a new definition\n    function registerDefinition(id, definition) {\n        this.definitions[id] = definition;\n    }\n\n    // Getting a definition by key\n    function getDefinition(key) {\n        return this.definitions[key];\n    }\n}\n\n// Example subclass for WankelEngine\nclass WankelEngine extends EngineType {\n    string GetEngineTypeName() { \n        return "Wankel"; \n    }\n    int GetEngineTypeMaxRPM() {\n        return 8000;\n    }\n}\n\n// Registering the WankelEngine in the broker\nbroker = new EngineTypeBroker();\nbroker.registerDefinition("Wankel", new WankelEngine());\n\nclass Car {\n    attribute Name;\n    attribute EngineTypeCode;\n\n    object GetEngineTypeDef() {\n        // Fetches the definition from the broker using the code.\n        return broker.getDefinition(this.EngineTypeCode);\n    }\n\n    string GetDescription() {\n        object def = this.GetEngineTypeDef();\n        return "I am a car called " . this.Name . ", whose " . \n               def.GetEngineTypeName() . " engine can run at " . \n               def.GetEngineTypeMaxRPM() . " RPM!";\n    }\n}