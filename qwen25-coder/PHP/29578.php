<?php\n\nfunction fetchMergedResults($page, $pageSize) {\n    // Assuming we use caching and store the last fetched merged results\n    $cacheKey = 'search_results';\n    $mergedResults = getCachedData($cacheKey);\n\n    if ($mergedResults === null || count($mergedResults) < ($page * $pageSize)) {\n        // Fetch from both sources\n        $apiResults = fetchApiData(); \n        $dbResults = fetchDbData();\n\n        // Merge and sort results by date\n        $allResults = array_merge($apiResults, $dbResults);\n        usort($allResults, function ($a, $b) {\n            return strcmp($b['date'], $a['date']); // Assuming date is in a sortable format\n        });\n\n        // Store merged results in cache with an expiration time\n        setCachedData($cacheKey, $allResults, 3600); // Cache for 1 hour\n        return array_slice($allResults, ($page - 1) * $pageSize, $pageSize);\n    } else {\n        // Return from cached data\n        return array_slice($mergedResults, ($page - 1) * $pageSize, $pageSize);\n    }\n}\n\n// Helper functions\nfunction getCachedData($key) {\n    // Implement cache retrieval logic (e.g., Redis)\n}\n\nfunction setCachedData($key, $data, $ttl) {\n    // Implement cache storage logic with TTL (e.g., Redis)\n}\n\nfunction fetchApiData() {\n    // Fetch data from external API\n}\n\nfunction fetchDbData() {\n    // Query data from your database\n}