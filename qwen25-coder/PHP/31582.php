class Thing {\n    private $param;\n\n    public function __construct($param) {\n        // Assign param to a member variable without processing\n        $this->param = $param;\n    }\n\n    public function initialize() {\n        if (!$this->isValidParam()) {\n            throw new InvalidArgumentException('Invalid parameter');\n        }\n\n        $this->transformParam();\n    }\n\n    private function isValidParam() {\n        // Perform validation logic on $this->param\n        return true; // Example: replace with actual validation\n    }\n\n    private function transformParam() {\n        // Transform the param as needed\n    }\n}\n\n// Usage\n$thing = new Thing($var);\ntry {\n    $thing->initialize();\n} catch (InvalidArgumentException $e) {\n    // Handle exception\n}