class DB {\n    private static $instance = NULL;\n    private static $dsn      = "mysql:host=localhost;dbname=mydatabase;";\n    private static $db_user  = getenv('DB_USER'); // Use environment variables or configuration files\n    private static $db_pass  = getenv('DB_PASS');\n\n    private function __construct() {}\n    private function __clone() {}\n\n    public static function getInstance() {\n        if (!self::$instance) {\n            error_reporting(0); // Suppress Errors during connection to avoid leak of sensitive data\n            self::$instance = new PDO(self::$dsn, self::$db_user, self::$db_pass);\n            error_reporting(E_ALL); // Re-enable errors\n            self::$instance->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n        }\n        return self::$instance;\n    }\n\n    public static function executeWithExceptionHandling($closure) {\n        try {\n            return $closure();\n        } catch (PDOException $e) {\n            // Log the exception instead of returning it directly to avoid leaking sensitive data\n            error_log("Database Error: " . $e->getMessage());\n            return "An error occurred. Please try again later.";\n        }\n    }\n}\n\nfunction get_recent_activities() {\n    return DB::executeWithExceptionHandling(function () {\n        $db = DB::getInstance();\n        // Prepare and execute query here, fetch the result\n        $stmt = $db->query("SELECT * FROM activities ORDER BY date DESC LIMIT 10");\n        $result = $stmt->fetchAll(PDO::FETCH_ASSOC);\n        return $result;\n    });\n}\n\n// Example of another function using the same error handling mechanism\nfunction get_user_by_id($id) {\n    return DB::executeWithExceptionHandling(function () use ($id) {\n        $db = DB::getInstance();\n        // Prepare and execute query here, fetch the result\n        $stmt = $db->prepare("SELECT * FROM users WHERE id = :id");\n        $stmt->bindParam(':id', $id);\n        $stmt->execute();\n        return $stmt->fetch(PDO::FETCH_ASSOC);\n    });\n}