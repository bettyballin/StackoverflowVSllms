class NestedSet {\n    protected $table;\n    protected $leftCol = 'lft';\n    protected $rightCol = 'rgt';\n    protected $dbName;\n\n    public function __construct($tableName, PDO $pdo) {\n        $this->table = $tableName;\n        $this->dbName = $pdo;\n    }\n\n    private function getLastRight() {\n        return $this->dbName->query("SELECT MAX({$this->rightCol}) FROM {$this->table}")->fetchColumn();\n    }\n\n    public function createRootNode($nodeData) {\n        $lastRight = $this->getLastRight() ?: 0;\n        $values = array_merge([$lastRight + 1, $lastRight + 2], $nodeData);\n        $sql = "INSERT INTO {$this->table} ({$this->leftCol}, {$this->rightCol}) VALUES (?, ?)";\n        foreach ($nodeData as $key => $value) {\n            $sql .= ", " . $this->dbName->quoteIdentifier($key) . " (:$key)";\n        }\n        $stmt = $this->dbName->prepare($sql);\n        return $stmt->execute(array_values($values));\n    }\n\n    public function createSubNode($parentId, $nodeData) {\n        $leftRight = $this->getLeftAndRightByNodeId($parentId);\n        if (!$leftRight) return false;\n\n        list($lft, $rgt) = $leftRight;\n        $sql = "UPDATE {$this->table} SET {$this->rightCol} = {$this->rightCol} + 2 " .\n               "WHERE {$this->rightCol} >= ? ";\n        $this->dbName->prepare($sql)->execute([$rgt]);\n\n        $sql = "UPDATE {$this->table} SET {$this->leftCol} = {$this->leftCol} + 2 " .\n               "WHERE {$this->leftCol} > ? ";\n        $this->dbName->prepare($sql)->execute([$lft]);\n        \n        $values = array_merge([$rgt, $rgt + 1], $nodeData);\n        $sql = "INSERT INTO {$this->table} ({$this->leftCol}, {$this->rightCol}) VALUES (?, ?)";\n        foreach ($nodeData as $key => $value) {\n            $sql .= ", " . $this->dbName->quoteIdentifier($key) . " (:$key)";\n        }\n        $stmt = $this->dbName->prepare($sql);\n        return $stmt->execute(array_values($values));\n    }\n\n    private function getLeftAndRightByNodeId($id) {\n        return $this->dbName->query("SELECT {$this->leftCol}, {$this->rightCol} FROM {$this->table} WHERE id = ?", [$id])\n            ->fetch(PDO::FETCH_NUM);\n    }\n\n    public function deleteNode($nodeId) {\n        list($lft, $rgt) = $this->getLeftAndRightByNodeId($nodeId);\n        if (!$lft || !$rgt) return false;\n\n        $width = $rgt - $lft + 1;\n        $sql = "DELETE FROM {$this->table} WHERE {$this->leftCol} BETWEEN ? AND ?";\n        $this->dbName->prepare($sql)->execute([$lft, $rgt]);\n\n        $sql = "UPDATE {$this->table} SET {$this->rightCol} = {$this->rightCol} - ? " .\n               "WHERE {$this->rightCol} > ?";\n        $this->dbName->prepare($sql)->execute([$width, $rgt]);\n        \n        $sql = "UPDATE {$this->table} SET {$this->leftCol} = {$this->leftCol} - ? " .\n               "WHERE {$this->leftCol} > ? ";\n        $this->dbName->prepare($sql)->execute([$width, $lft]);\n        \n        return true;\n    }\n\n    public function moveTree($nodeIdToMove, $newParentNodeId) {\n        list($lft, $rgt) = $this->getLeftAndRightByNodeId($nodeIdToMove);\n        if (!$lft || !$rgt) return false;\n\n        list($parentLft, $parentRgt) = $this->getLeftAndRightByNodeId($newParentNodeId);\n        if (!$parentLft || !$parentRgt) return false;\n\n        // Calculate the width of the subtree\n        $width = $rgt - $lft + 1;\n        \n        // Remove the subtree temporarily by decrementing its boundaries\n        $sql = "UPDATE {$this->table} SET "\n             . "{$this->leftCol} = {$this->leftCol} ^ -($width), "\n             . "{$this->rightCol} = {$this->rightCol} ^ -($width) "\n             . "WHERE {$this->leftCol} >= ? AND {$this->rightCol} <= ?";\n        $this->dbName->prepare($sql)->execute([$lft, $rgt]);\n        \n        // Shift nodes to the right to make space\n        $sql = "UPDATE {$this->table} SET {$this->leftCol} = {$this->leftCol} + ? WHERE {$this->leftCol} > ?";\n        $this->dbName->prepare($sql)->execute([$width, $parentRgt]);\n        \n        $sql = "UPDATE {$this->table} SET {$this->rightCol} = {$this->rightCol} + ? WHERE {$this->rightCol} >= ?";\n        $this->dbName->prepare($sql)->execute([$width, $parentRgt]);\n\n        // Insert the subtree back to its new position\n        $sql = "UPDATE {$this->table} SET "\n             . "{$this->leftCol} = ({$this->leftCol} ^ -($width)) + ?, "\n             . "{$this->rightCol} = ({$this->rightCol} ^ -($width)) + ?"\n             . "WHERE {$this->leftCol} < 0 AND {$this->rightCol} < 0";\n        $this->dbName->prepare($sql)->execute([$parentRgt, $parentRgt]);\n\n        // Clean up shifted nodes\n        $sql = "UPDATE {$this->table} SET {$this->leftCol} = {$this->leftCol} - ? WHERE {$this->leftCol} > ?";\n        $this->dbName->prepare($sql)->execute([$width, $parentRgt + $width]);\n        \n        $sql = "UPDATE {$this->table} SET {$this->rightCol} = {$this->rightCol} - ? WHERE {$this->rightCol} >= ?";\n        $this->dbName->prepare($sql)->execute([$width, $parentRgt + $width]);\n\n        return true;\n    }\n}