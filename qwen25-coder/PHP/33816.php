class LanguagePack {\n    private $translations;\n    private static $instance;\n\n    // Use singleton pattern for this class\n    private function __construct($languageCode) {\n        $this->loadTranslations($languageCode);\n    }\n\n    public static function getInstance($languageCode): self {\n        if (!isset(self::$instance[$languageCode])) {\n            self::$instance[$languageCode] = new LanguagePack($languageCode);\n        }\n        return self::$instance[$languageCode];\n    }\n\n    private function loadTranslations($languageCode) {\n        $cacheFile = __DIR__ . "/translations/$languageCode.cache.php";\n        if (file_exists($cacheFile)) {\n            $this->translations = include $cacheFile;\n            return;\n        }\n\n        $translationSource = __DIR__ . "/translations/$languageCode.php";\n        if (!file_exists($translationSource)) {\n            throw new Exception("Language file for $languageCode not found.");\n        }\n\n        $this->translations = include $translationSource;\n\n        // Cache the result to improve performance\n        file_put_contents($cacheFile, "<?php return " . var_export($this->translations, true) . ";");\n    }\n\n    public function getTranslation($key): string {\n        if (array_key_exists($key, $this->translations)) {\n            return $this->translations[$key];\n        }\n        // Return the key itself or a fallback message\n        return "[$key]";\n    }\n}\n\n// Usage example\n$language = LanguagePack::getInstance('en');\necho $language->getTranslation('hello_world'); // Assume 'hello_world' is defined in the English language file.