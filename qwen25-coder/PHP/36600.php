interface Component {\n    public function print();\n}\n\nclass Node implements Component {\n    private $name;\n    private $id;\n    private $description;\n    private $children = [];\n\n    public function __construct($name, $id, $description) {\n        $this->name = $name;\n        $this->id = $id;\n        $this->description = $description;\n    }\n\n    public function add(Component $component) {\n        $this->children[] = $component;\n    }\n\n    public function print() {\n        echo "Node: " . $this->name . "\n"; // Example operation\n        foreach ($this->children as $child) {\n            $child->print();\n        }\n    }\n}\n\nclass Leaf implements Component {\n    private $name;\n    private $id;\n    private $description;\n\n    public function __construct($name, $id, $description) {\n        $this->name = $name;\n        $this->id = $id;\n        $this->description = $description;\n    }\n\n    public function print() {\n        echo "Leaf: " . $this->name . "\n"; // Example operation\n    }\n}\n\n// Usage\n$root = new Node('Root', 'id0', 'desc0');\n$node1 = new Node('Node1', 'id1', 'desc1');\n$leaf1 = new Leaf('Leaf1', 'ld1', 'lesc1');\n\n$root->add($node1);\n$node1->add($leaf1);\n\n$root->print();