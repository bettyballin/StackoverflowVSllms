class TrieNode {\n    public $children = [];\n    public $isEndOfWord = false;\n}\n\nclass Trie {\n    private $root;\n\n    public function __construct() {\n        $this->root = new TrieNode();\n    }\n\n    // Insert word into the trie\n    public function insert($word) {\n        $current = $this->root;\n        for ($i = 0; $i < strlen($word); $i++) {\n            $char = $word[$i];\n            if (!isset($current->children[$char])) {\n                $current->children[$char] = new TrieNode();\n            }\n            $current = $current->children[$char];\n        }\n        $current->isEndOfWord = true;\n    }\n\n    // Check if word exists in the trie\n    public function search($word) {\n        $node = $this->find($word);\n        return ($node !== null && $node->isEndOfWord);\n    }\n\n    // Find node corresponding to the end of a prefix\n    private function find($prefix) {\n        $current = $this->root;\n        for ($i = 0; $i < strlen($prefix); $i++) {\n            $char = $prefix[$i];\n            if (!isset($current->children[$char])) {\n                return null;\n            }\n            $current = $current->children[$char];\n        }\n        return $current;\n    }\n}\n\n// Example usage\n$trie = new Trie();\n$dictionary = ['cat', 'catapult', 'dog', 'dodge'];\nforeach ($dictionary as $word) {\n    $trie->insert($word);\n}\n\necho $trie->search('cat') ? "Found\n" : "Not found\n"; // Should print: Found\necho $trie->search('car') ? "Found\n" : "Not found\n"; // Should print: Not found