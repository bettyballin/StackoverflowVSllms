include('inc/connection.php');\n$conn = dbConnect();\n\n// Sample movie data and arrays\n$movieid = 1;\n$title = "Inception";\n$year = 2010;\n$runtime = 148;\n$plot = "A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea into the mind of a CEO.";\n$genres = ["Action", "Adventure", "Sci-Fi"];\n$actors = ["Leonardo DiCaprio", "Joseph Gordon-Levitt"];\n\n// Start transaction\n$conn->begin_transaction();\n\ntry {\n    // Insert movie data\n    $sql_movie = 'INSERT INTO movies (movieid, title, year, runtime, plot) VALUES (?, ?, ?, ?, ?)';\n    $stmt_movie = $conn->prepare($sql_movie);\n    if (!$stmt_movie) throw new Exception("Error preparing 'movies' statement: " . $conn->error);\n    $stmt_movie->bind_param('isiis', $movieid, $title, $year, $runtime, $plot);\n    if (!$stmt_movie->execute()) throw new Exception("Error executing 'movies' insert: " . $stmt_movie->error);\n\n    // Insert genres\n    $sql_genre = 'INSERT INTO genres (movieid, genre) VALUES (?, ?)';\n    $stmt_genre = $conn->prepare($sql_genre);\n    if (!$stmt_genre) throw new Exception("Error preparing 'genres' statement: " . $conn->error);\n    foreach ($genres as $genre) {\n        $stmt_genre->bind_param('is', $movieid, $genre);\n        if (!$stmt_genre->execute()) throw new Exception("Error executing 'genres' insert: " . $stmt_genre->error);\n    }\n\n    // Insert actors\n    $sql_actor = 'INSERT INTO actors (movieid, actor) VALUES (?, ?)';\n    $stmt_actor = $conn->prepare($sql_actor);\n    if (!$stmt_actor) throw new Exception("Error preparing 'actors' statement: " . $conn->error);\n    foreach ($actors as $actor) {\n        $stmt_actor->bind_param('is', $movieid, $actor);\n        if (!$stmt_actor->execute()) throw new Exception("Error executing 'actors' insert: " . $stmt_actor->error);\n\n    }\n\n    // Commit transaction\n    $conn->commit();\n} catch (Exception $e) {\n    // Rollback transaction in case of error\n    $conn->rollback();\n    echo "Failed to insert data: " . $e->getMessage();\n}\n\n// Close statements and connection\n$stmt_movie->close();\n$stmt_genre->close();\n$stmt_actor->close();\n$conn->close();