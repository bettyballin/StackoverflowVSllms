class EveKillmailParser {\n    private $rawData;\n    private $parsedData;\n\n    public function __construct($data) {\n        $this->rawData = explode("\n", $data);\n        $this->parsedData = [];\n    }\n\n    public function parse() {\n        $section = '';\n        foreach ($this->rawData as $line) {\n            if (empty(trim($line))) continue;\n\n            if (stripos($line, 'Victim:') !== false || stripos($line, 'Destroyed:') !== false || stripos($line, 'Faction:') !== false) {\n                $section = 'victim';\n            } elseif ($line === 'Involved parties:') {\n                $section = 'involved-parties';\n                continue;\n            } elseif ($line === 'Destroyed items:') {\n                $section = 'destroyed-items';\n                continue;\n            } elseif ($line === 'Dropped items:') {\n                $section = 'dropped-items';\n                continue;\n            }\n\n            switch ($section) {\n                case 'victim':\n                    $this->parseVictimDetails($line);\n                    break;\n                case 'involved-parties':\n                    $this->parseInvolvedPartyLine($line);\n                    break;\n                case 'destroyed-items':\n                    $this->parseItemList($line, 'destroyedItems');\n                    break;\n                case 'dropped-items':\n                    $this->parseItemList($line, 'droppedItems');\n                    break;\n            }\n        }\n    }\n\n    private function parseVictimDetails($line) {\n        preg_match('/(Victim|Destroyed|Corp|Alliance|Faction|System|Security|Damage Taken): (.+)/', $line, $matches);\n        if (count($matches) === 3) {\n            $this->parsedData[$matches[1]] = trim($matches[2]);\n        }\n    }\n\n    private function parseInvolvedPartyLine($line) {\n        if (!isset($this->parsedData['involved-parties'])) {\n            $this->parsedData['involved-parties'] = [];\n        }\n        \n        // Handling computer-controlled enemy cases or final blow indicator\n        preg_match('/Name: (.*?)(?: \(laid the final blow\))?(.*)/', $line, $nameMatches);\n        if (!empty($nameMatches[1])) {\n            $currentParty = ['Name' => $nameMatches[1]];\n            \n            // Parsing other attributes of involved party\n            preg_match_all('/(\w+): ([^,\n]+)/', $nameMatches[2], $attributes);\n            foreach ($attributes[1] as $index => $attributeKey) {\n                $currentParty[$attributeKey] = trim($attributes[2][$index]);\n            }\n            \n            $this->parsedData['involved-parties'][] = $currentParty;\n        } else if (preg_match('/(\w+) \/ (\w+) (\w+?) \(Damage Done: (\d+)\)/', $line, $computerControlledMatches)) {\n            // Handling computer-controlled enemies\n            $this->parsedData['involved-parties'][] = [\n                'Name' => $computerControlledMatches[1] . " / " . $computerControlledMatches[2],\n                'Faction' => $computerControlledMatches[3],\n                'Damage Done' => (int)$computerControlledMatches[4]\n            ];\n        }\n    }\n\n    private function parseItemList($line, $section) {\n        if (!isset($this->parsedData[$section])) {\n            $this->parsedData[$section] = [];\n        }\n        \n        // Parsing item data and quantity\n        preg_match('/(.+?)(?: \(Qty: (\d+)\))?(?: \((Cargo)\))?/', $line, $matches);\n        $itemData = [\n            'Item' => trim($matches[1]),\n            'Quantity' => isset($matches[2]) ? (int)$matches[2] : 1,\n            'Location' => isset($matches[3]) ? "Cargo" : null\n        ];\n        \n        $this->parsedData[$section][] = $itemData;\n    }\n\n    public function getParsedData() {\n        return $this->parsedData;\n    }\n}\n\n// Example usage:\n$killmailText = "YOUR KILLMAIL TEXT HERE";\n$parser = new EveKillmailParser($killmailText);\n$parser->parse();\n$parsedData = $parser->getParsedData();\nprint_r($parsedData);