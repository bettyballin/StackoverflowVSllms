class InputValidator {\n    private $taintedData;\n    private $cleanData;\n\n    public function __construct($data) {\n        $this->taintedData = $data;\n        $this->cleanData = [];\n    }\n\n    public function validate() {\n        foreach ($this->taintedData as $key => $value) {\n            list($type, $length, $name) = explode('-', $key, 3);\n            if (!isset($length)) {\n                $length = null;\n            }\n            switch ($type) {\n                case 'in': // integer\n                    $this->cleanData[$name] = filter_var($value, FILTER_VALIDATE_INT);\n                    break;\n                case 'tx': // text\n                    $pattern = '/^[a-zA-Z0-9-_]{1,' . intval($length) . '}$/'; // Adjust pattern and length as needed\n                    if (preg_match($pattern, $value)) {\n                        $this->cleanData[$name] = $value;\n                    } else {\n                        $this->cleanData[$name] = false;\n                    }\n                    break;\n                case 'em': // email\n                    if (filter_var($value, FILTER_VALIDATE_EMAIL)) {\n                        $this->cleanData[$name] = $value;\n                    } else {\n                        $this->cleanData[$name] = false;\n                    }\n                    break;\n                default:\n                    $this->cleanData[$name] = false;\n            }\n        }\n    }\n\n    public function getCleanData() {\n        return $this->cleanData;\n    }\n}\n\n// Usage\n$validator = new InputValidator($_GET);\n$validator->validate();\n$cGet = $validator->getCleanData();