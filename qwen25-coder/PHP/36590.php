<?php\n\n// Run linux command in background and return the PID created by the OS\nfunction run_ffmpeg_in_background($inputFile, $outputFile) {\n    // Always sanitize file paths and inputs\n    $escapedInput = escapeshellarg($inputFile);\n    $escapedOutput = escapeshellarg($outputFile);\n\n    // Command to convert video to .flv using ffmpeg\n    $command = "ffmpeg -i {$escapedInput} {$escapedOutput}";\n\n    // Run command in background and fetch PID\n    $pid = shell_exec("nohup nice -n 10 $command > /dev/null & echo $!");\n\n    return intval($pid);\n}\n\n// Verifies if a process is running in linux using /proc instead of ps\nfunction is_process_running($pid) {\n    return file_exists("/proc/{$pid}/cmdline");\n}\n\n// Example usage:\n$inputVideo = '/path/to/input/video.mp4';\n$outputVideo = '/path/to/output/video.flv';\n\n$processId = run_ffmpeg_in_background($inputVideo, $outputVideo);\n\nif ($processId > 0) {\n    echo "Process started with PID: {$processId}";\n} else {\n    echo "Failed to start process.";\n}\n\n// To check if the process is still running\nsleep(5); // Just for demonstration, replace with appropriate logic or loop\n\nif (is_process_running($processId)) {\n    echo "The process is still running.";\n} else {\n    echo "The process has completed.";\n}\n?>