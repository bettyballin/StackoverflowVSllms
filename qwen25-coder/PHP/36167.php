public function ipn() {\n    $transaction = http_build_query($_POST);\n    $this->log('Processing transaction: ' . $transaction);\n\n    // Use CakePHP's HTTP client\n    $client = new Http\Client();\n    $response = $client->post(Configure::read('Paypal.IPN_URL'), $transaction, ['headers' => Configure::read('Paypal.HEADER')]);\n\n    if (!$response) {\n        throw new InternalErrorException(__('Could not connect to PayPal.'));\n    }\n\n    $body = $response->getStringBody();\n    if ($body === 'VERIFIED') {\n        // Format the $_POST and call model method to process transaction\n        $notification = ['PaypalNotification' => $_POST];\n        $this->log('Transaction verified, processing...');\n\n        // Minor change to use item_id as premium_site_id\n        $notification['PaypalNotification']['premium_site_id'] = $_POST['item_number'];\n\n        if ($this->PaypalNotification->save($notification)) {\n            $this->__processTransaction($this->PaypalNotification->id);\n        } else {\n            $this->log('Failed to save transaction data.');\n        }\n    } elseif ($body === 'INVALID') {\n        // Log it for investigation\n        $this->log('Invalid transaction: ' . $transaction, 'error');\n    }\n\n    // Redirect\n    $this->redirect('/');\n}\n\nprivate function __processTransaction($id) {\n    $notification = $this->PaypalNotification->find(\n        'first',\n        ['conditions' => ['PaypalNotification.id' => $id], 'recursive' => false]\n    );\n\n    if (!empty($notification)) {\n        $txnType = $notification['PaypalNotification']['txn_type'];\n\n        // Move logic to the model(s)\n        switch ($txnType) {\n            case Configure::read('PAYPAL.TXN_TYPE_SUBSCRIBE'):\n                $this->handleSubscription($notification);\n                break;\n            case Configure::read('PAYPAL.TXN_TYPE_CANCEL'):\n            case Configure::read('PAYPAL.TXN_TYPE_EOT'):\n                $this->handleCancellationOrEndOfTerm($notification);\n                break;\n        }\n    } else {\n        $this->log(__('Transaction with ID %s not found.', $id), 'error');\n    }\n}