function recursiveReplace(&$nodes) {\n    foreach ($nodes as &$node) {\n        // Replace node if it is of type RefObject\n        if ($node['type'] == 'RefObject') {\n            $n = $this->site->get_node_where('id', $node['node_ref']);\n            // Replace node with new node of potentially different type\n            $newNode = $this->site->get_node_where('object_id', $n['object_id']);\n            \n            // Check if the new node has children and replace them recursively\n            if (isset($newNode['children'])) {\n                $newNode['children'] = $this->site->get_descendants($newNode['lft'], $newNode['rgt']);\n                recursiveReplace($newNode['children']);\n            }\n            \n            // Replace the current node with the new node\n            $node = $newNode;\n        } elseif (isset($node['children'])) {\n            // If the node is not a RefObject but has children, recursively search its children\n            recursiveReplace($node['children']);\n        }\n    }\n}\n\n// Call the function on your root nodes array\nrecursiveReplace($nodes);\nreturn $nodes;