class SerializableObject {\n    public $id;\n    public $parent = null;\n    /** @var SerializableObject[] */\n    public $children = [];\n\n    public function __construct($id, SerializableObject $parent = null) {\n        $this->id = $id;\n        if ($parent !== null) {\n            $this->parent = $parent;\n            $parent->children[] = $this;\n        }\n    }\n\n    public function toXML(array &$serializedObjects = []) {\n        // Check if this object has already been serialized\n        if (isset($serializedObjects[(int)$this])) {\n            return "<object reference='true' id='{$this->id}' />\n";\n        }\n\n        // Mark the current object as being serialized\n        $serializedObjects[(int)$this] = true;\n\n        $xml = "<object id='{$this->id}'>\n";\n\n        if ($this->parent !== null) {\n            $xml .= "  <parent>" . $this->parent->toXML($serializedObjects) . "</parent>\n";\n        }\n\n        $xml .= "  <children>\n";\n        foreach ($this->children as $child) {\n            $xml .= "    " . $child->toXML($serializedObjects);\n        }\n        $xml .= "  </children>\n";\n\n        $xml .= "</object>\n";\n\n        return $xml;\n    }\n\n    public function getParentId() {\n        return ($this->parent !== null) ? $this->parent->id : 'null';\n    }\n\n    public function getChildIds() {\n        return implode(', ', array_map(function($child){return $child->id;}, $this->children));\n    }\n}\n\n// Example usage\n$obj1 = new SerializableObject('1');\n$obj2 = new SerializableObject('2', $obj1);\n$obj3 = new SerializableObject('3', $obj2);\n$obj4 = new SerializableObject('4', $obj2);\n\necho $obj1->toXML();