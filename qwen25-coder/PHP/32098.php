class SecureObject {\n    private $properties = [];\n\n    public function __get($name) {\n        if (array_key_exists($name, $this->properties)) {\n            return $this->properties[$name];\n        } else {\n            throw new Exception("Property {$name} does not exist.");\n        }\n    }\n\n    public function __set($name, $value) {\n        // Example of validation\n        if (!is_string($value)) {\n            throw new Exception("Value for {$name} must be a string.");\n        }\n        $this->properties[$name] = htmlspecialchars($value, ENT_QUOTES, 'UTF-8');\n    }\n\n    public function __isset($name) {\n        return isset($this->properties[$name]);\n    }\n\n    public function __unset($name) {\n        unset($this->properties[$name]);\n    }\n}\n\n// Usage\n$obj = new SecureObject();\ntry {\n    $obj->username = "<b>badUser</b>";\n    echo "Username: {$obj->username}"; // Output: Username: &lt;b&gt;badUser&lt;/b&gt;\n    if (isset($obj->username)) {\n        unset($obj->username);\n    }\n    echo "\nUsername is set: " . ($obj->username ?? 'Not Set');\n} catch (Exception $e) {\n    echo "Error: " . $e->getMessage();\n}