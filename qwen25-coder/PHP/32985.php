// Define custom exceptions\nclass FrameworkException extends Exception {}\nclass UserException extends Exception {}\n\n// Error handling function\nfunction errorHandler($errno, $errstr, $errfile, $errline) {\n    throw new ErrorException($errstr, 0, $errno, $errfile, $errline);\n}\n\n// Set error handler\nset_error_handler("errorHandler");\n\n// Implement a global exception handler\nfunction exceptionHandler(Exception $exception) {\n    try {\n        // Determine the type of exception and log it accordingly\n        if ($exception instanceof UserException) {\n            // Log user-level errors (e.g., 404)\n            error_log('User Error: ' . $exception->getMessage());\n            // Handle user errors, e.g., show a friendly error page\n            echo "<h1>Oops! We can't find that.</h1>";\n        } else if ($exception instanceof FrameworkException) {\n            // Log framework-level errors (e.g., DB connection failures)\n            error_log('Framework Error: ' . $exception->getMessage());\n            // Optionally, handle framework-level errors differently\n            echo "<h1>Something went wrong with our system. Please try again later.</h1>";\n        } else {\n            // Unexpected exceptions\n            error_log('Unhandled Exception: ' . $exception->getMessage());\n            echo "<h1>An unexpected error occurred. Please contact support.</h1>";\n        }\n    } catch (Exception $e) {\n        // Handle errors that occur during exception handling\n        error_log("Failed to handle exception: " . $e->getMessage());\n    }\n\n    exit(); // Stop execution after an error\n}\n\n// Register the global exception handler\nset_exception_handler('exceptionHandler');