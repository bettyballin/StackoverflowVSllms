class DomainChecker {\n    private $domain;\n    private $servers = [\n        // Example servers array, replace with actual data\n        ['com', 'whois.verisign-grs.com', 'No match for domain'],\n        // Add more TLD servers as needed\n    ];\n    private $idn = []; // Initialize with necessary IDN characters if needed\n\n    public function __construct($domain) {\n        $this->domain = strtolower($domain);\n    }\n\n    /**\n     * Returns the base domain name\n     * @return string Base domain name\n     */\n    public function get_domain() {\n        $domainParts = explode(".", $this->domain);\n        return $domainParts[0];\n    }\n\n    /**\n     * Returns the full domain name\n     * @return string Full domain name\n     */\n    public function get_fulldomain() {\n        return $this->domain;\n    }\n\n    /**\n     * Returns the not found string for a given TLD\n     * @return string Not found string or null if not found\n     */\n    public function get_notfound_string() {\n        $tldName = $this->get_tld();\n        foreach ($this->servers as $server) {\n            if ($server[0] === $tldName) {\n                return $server[2];\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Checks if the domain is available\n     * @return bool True if domain is available, false otherwise\n     */\n    public function is_available() {\n        $whoisString = $this->info(); // Assuming this method exists and fetches WHOIS data\n        $notFoundString = $this->get_notfound_string();\n        $domain = preg_quote($this->domain, '/');\n\n        if (!$notFoundString) {\n            return false;\n        }\n\n        $trimmedWhois = preg_replace("/\s+/", " ", preg_replace("/" . $domain . "/", "", $whoisString));\n\n        $array = explode(":", $notFoundString);\n\n        if ($array[0] === "MAXCHARS") {\n            return strlen($trimmedWhois) <= (int)$array[1];\n        } else {\n            return preg_match("/^.*" . $notFoundString . ".*/i", $whoisString) > 0;\n        }\n    }\n\n    /**\n     * Checks if the domain name is valid\n     * @return bool True if domain is valid, false otherwise\n     */\n    public function is_valid() {\n        $domainParts = explode(".", $this->domain);\n\n        if (count($domainParts) == 3) {\n            $tld = $domainParts[1] . "." . $domainParts[2];\n            foreach ($this->servers as $server) {\n                if ($server[0] === $tld) {\n                    return true;\n                }\n            }\n            return false;\n        } elseif (count($domainParts) > 3) {\n            return false;\n        }\n\n        if ($this->get_tld() === "de") {\n            $idn = implode('', array_map('chr', $this->idn));\n            return preg_match("/^[a-z0-9" . $idn . "-]+$/i", $domainParts[0]);\n        } else {\n            return preg_match("/^[a-z0-9-]+\.[a-z]{2,}$/i", $this->domain);\n        }\n    }\n\n    /**\n     * Returns the TLD of the domain\n     * @return string Domain's TLD\n     */\n    private function get_tld() {\n        $domainParts = explode(".", $this->domain);\n        return end($domainParts);\n    }\n\n    // Placeholder for info method, replace with actual WHOIS data fetching logic\n    private function info() {\n        // Implement WHOIS data fetching logic here\n        return "Sample WHOIS data";\n    }\n}