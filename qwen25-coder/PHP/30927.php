// Step 1: Define a Data Transfer Object (DTO) for Scheduler Configuration\nclass SchedulerConfig {\n    public $type;\n    public $sendDateAndTime;\n    public $endBy;\n    public $occurencesLimit;\n    public $repeatEvery; // interval value (for daily, weekly, monthly)\n    public $weekDays; // specific to WeeklyScheduler\n\n    // Constructor and other methods can be added as needed\n    public function __construct($type, $sendDateAndTime, $endBy, $occurencesLimit, $repeatEvery, $weekDays = null) {\n        $this->type = $type;\n        $this->sendDateAndTime = $sendDateAndTime;\n        $this->endBy = $endBy; // Can be an object or a simple string\n        $this->occurencesLimit = $occurencesLimit;\n        $this->repeatEvery = $repeatEvery;\n        $this->weekDays = $weekDays;\n    }\n}\n\n// Step 2: Modify the SchedulerFactory to accept and use the DTO\nclass SchedulerFactory {\n    public function create(SchedulerConfig $config) {\n        switch ($config->type) {\n            case "monthly":\n                $scheduler = new MonthlyScheduler();\n                break;\n            case "weekly":\n                $scheduler = new WeeklyScheduler();\n                break;\n            case "daily":\n                $scheduler = new DailyScheduler();\n                break;\n            default:\n                throw new InvalidArgumentException("Unknown scheduler type: {$config->type}");\n        }\n\n        // Configure the newly created scheduler\n        $this->configure($scheduler, $config);\n        \n        return $scheduler;\n    }\n\n    private function configure(SchedulerInterface $scheduler, SchedulerConfig $config) {\n        $scheduler->setSendDateAndTime($config->sendDateAndTime);\n\n        if ($config->endBy === 'by_date') {\n            $scheduler->setEndByDate($config->endBy);\n        } elseif ($config->endBy === 'by_occurences_limit') {\n            $scheduler->setOccurencesLimit($config->occurencesLimit);\n        }\n\n        $scheduler->addTaskOccuringEvery($config->repeatEvery);\n\n        // Specific to WeeklyScheduler\n        if ($config->type === "weekly" && !is_null($config->weekDays)) {\n            $scheduler->setWeekDayForRepeating($config->weekDays);\n        }\n    }\n}\n\n// Usage Example:\n$schedulerConfig = new SchedulerConfig(\n    'weekly',\n    '01.01.2024 15:30', // sendDateAndTime\n    'by_date', // endBy\n    null, // occurencesLimit not applicable here since we're ending by date\n    7, // repeatEvery (every 7 days for weekly)\n    ['Mon', 'Fri'] // weekDays only needed for WeeklyScheduler\n);\n\n$schedulerFactory = new SchedulerFactory();\n$weeklyScheduler = $schedulerFactory->create($schedulerConfig);