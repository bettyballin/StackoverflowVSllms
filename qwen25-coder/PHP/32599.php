<?php\n\nclass PlagiarismChecker {\n    private $stopWords = ['the', 'a', 'an', 'and', 'or', 'but', 'if', 'then'];\n\n    public function preprocessText($text) {\n        // Convert to lowercase\n        $text = strtolower($text);\n        // Remove punctuation and split into words\n        $words = preg_split('/[^a-z0-9]+/', $text, -1, PREG_SPLIT_NO_EMPTY);\n        // Filter out stop words\n        return array_diff($words, $this->stopWords);\n    }\n\n    public function calculateSimilarity(array $tokens1, array $tokens2) {\n        $similarityIndex = 0;\n        $set1 = array_count_values($tokens1);\n        $set2 = array_count_values($tokens2);\n\n        // Calculate the intersection\n        $intersection = array_intersect_key($set1, $set2);\n        foreach ($intersection as $word => $count) {\n            $similarityIndex += min($set1[$word], $set2[$word]);\n        }\n\n        // Score based on unique words in both sets\n        $totalWords = count($tokens1) + count($tokens2);\n        if ($totalWords == 0) return 0; // Avoid division by zero\n\n        return ($similarityIndex * 2 / $totalWords) * 100;\n    }\n\n    public function checkPlagiarism(array $documents) {\n        $results = [];\n        foreach ($documents as $i => $doc1) {\n            foreach (array_slice($documents, $i + 1) as $j => $doc2) {\n                $similarity = $this->calculateSimilarity($this->preprocessText($doc1), $this->preprocessText($doc2));\n                if ($similarity > 50) { // Assuming a threshold of 50%\n                    $results[] = "Document " . ($i + 1) . " is similar to Document " . ($j + $i + 2) . ": " . number_format($similarity, 2) . "%";\n                }\n            }\n        }\n        return $results;\n    }\n}\n\n// Example usage\n$documents = [\n    "This is a sample text for testing.",\n    "Testing the sample text with some variations.",\n    "Another example to check plagiarism detection."\n];\n\n$plagiarismChecker = new PlagiarismChecker();\n$results = $plagiarismChecker->checkPlagiarism($documents);\n\nforeach ($results as $result) {\n    echo $result . "\n";\n}