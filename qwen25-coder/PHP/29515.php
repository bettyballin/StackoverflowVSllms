<?php\n\nclass ReportField {\n    private $key;\n    private $label;\n    private $accessLevel;\n    private $fieldSql;\n\n    // Private constructor to prevent instantiation outside the class\n    private function __construct($key, $label, $accessLevel, $fieldSql) {\n        $this->key = $key;\n        $this->label = $label;\n        $this->accessLevel = $accessLevel;\n        $this->fieldSql = $fieldSql;\n    }\n\n    // Static properties representing each field\n    public static $FIELDS = [];\n\n    /**\n     * Initialize the fields with predefined configurations.\n     */\n    public static function initialize() {\n        self::$FIELDS['foo'] = new ReportField('foo', 'Foo', 1, 'foo as my_foo');\n        // Add more fields here\n    }\n\n    /**\n     * Get a field by its key.\n     *\n     * @param string $key The key of the field to retrieve.\n     * @return ReportField|null The ReportField object or null if not found.\n     */\n    public static function getByKey($key) {\n        return self::$FIELDS[$key] ?? null;\n    }\n\n    // Getter methods\n    public function getFieldSql() {\n        return $this->fieldSql;\n    }\n}\n\n// Initialize the fields\nReportField::initialize();\n\n// Example usage\n$reportPrefs = [\n    (object)['field' => 'foo'],\n    // Add more report preferences here\n];\n\n$selectFields = [];\nforeach ($reportPrefs as $pref) {\n    if ($field = ReportField::getByKey($pref->field)) {\n        $selectFields[] = $field->getFieldSql();\n    }\n}\n\nprint_r($selectFields);\n?>