use Doctrine\ORM\EntityManager;\nuse Doctrine\ORM\Tools\SchemaTool;\nuse PHPUnit\Framework\TestCase;\n\nclass Tests_User extends TestCase\n{\n    /**\n     * @var EntityManager\n     */\n    private $em;\n\n    /**\n     * @var SchemaTool\n     */\n    private $schemaTool;\n\n    protected function setUp()\n    {\n        parent::setUp();\n\n        // Configure the Entity Manager\n        $config = \Doctrine\ORM\Tools\Setup::createAnnotationMetadataConfiguration(\n            [__DIR__ . "/../../application/models"], true);\n        $connectionOptions = [\n            'driver'   => 'pdo_mysql',\n            'user'     => 'user',\n            'password' => 'pass',\n            'dbname'   => 'testdb'\n        ];\n        $this->em = EntityManager::create($connectionOptions, $config);\n\n        // Create the SchemaTool and create schema\n        $this->schemaTool = new SchemaTool($this->em);\n        $classes = array(\n            $this->em->getClassMetadata('YourNamespace\Entity\User')\n        );\n        $this->schemaTool->dropSchema($classes);\n        $this->schemaTool->createSchema($classes);\n    }\n\n    protected function tearDown()\n    {\n        parent::tearDown();\n        \n        // Close the entity manager\n        if ($this->em instanceof EntityManager) {\n            foreach ($this->em->getUnitOfWork()->getIdentityMap() as $object) {\n                $this->em->detach($object);\n            }\n            $this->em->close();\n            $this->em = null; // Avoid memory leaks\n        }\n    }\n\n    public function testSavingWorks()\n    {\n        $user = new User();\n        $user->setUsername('john_doe');\n        $this->em->persist($user);\n        $this->em->flush();\n\n        $userFromDb = $this->em->find('YourNamespace\Entity\User', $user->getId());\n        $this->assertInstanceOf(User::class, $userFromDb);\n    }\n\n    public function testSavingWorksAgain()\n    {\n        $user = new User();\n        $user->setUsername('jane_doe');\n        $this->em->persist($user);\n        $this->em->flush();\n\n        $userFromDb = $this->em->find('YourNamespace\Entity\User', $user->getId());\n        $this->assertInstanceOf(User::class, $userFromDb);\n    }\n}