<?php\n$r_max = 256; // Rows\n$c_max = 384; // Columns\n\n// Create a string of binary data. Here, we'll just create dummy random bin data for demonstration.\n$binaryData = '';\nfor ($i = 0; $i < $r_max * $c_max * 3; ++$i) { // 3 bytes per pixel (RGB)\n    $binaryData .= chr(rand(0, 255)); // Generate a byte value from 0 to 255\n}\n\n// Start the image data with appropriate headers for PNG format.\n$imageData = 'data:image/png;base64,' . base64_encode(createPngFromBinary($binaryData, $r_max, $c_max));\n\n// Output an HTML element that displays the image.\necho '<img src="' . htmlspecialchars($imageData) . '" alt="Generated Image">';\n\n/**\n * Create a simple PNG image from binary data.\n *\n * @param string $binary Binary image data (RGB).\n * @param int    $width  Width of the image.\n * @param int    $height Height of the image.\n * @return bool|string Return false on error, or return raw PNG data on success.\n */\nfunction createPngFromBinary($binary, $width, $height) {\n    // Check binary length\n    if (strlen($binary) != $width * $height * 3) { // RGB = 3 bytes per pixel\n        return false;\n    }\n\n    // Initialize GD resource\n    $im = imagecreatetruecolor($width, $height);\n\n    for ($y = 0; $y < $height; $y++) {\n        for ($x = 0; $x < $width; $x++) {\n            // Calculate the position in binary data array.\n            $pos = ($y * $width + $x) * 3;\n            $r = ord($binary[$pos + 0]);\n            $g = ord($binary[$pos + 1]);\n            $b = ord($binary[$pos + 2]);\n\n            // Allocate color and set pixel\n            $color = imagecolorallocate($im, $r, $g, $b);\n            imagesetpixel($im, $x, $y, $color);\n        }\n    }\n\n    // Get PNG data as a string\n    ob_start();\n    imagepng($im);\n    $imageData = ob_get_contents();\n    ob_end_clean();\n\n    // Free memory\n    imagedestroy($im);\n\n    return $imageData;\n}\n?>