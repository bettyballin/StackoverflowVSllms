use PHPUnit\Framework\TestCase;\nuse Prophecy\Argument;\nuse Prophecy\PhpUnit\ProphecyTrait;\n\nclass YourClassTest extends TestCase\n{\n    use ProphecyTrait;\n\n    public function testSetSuspended()\n    {\n        // Mock the Propel connection\n        $mockConnection = $this->prophesize('PDO'); // or whatever type of connection you expect\n\n        // Mock Criteria\n        $criteria1Prophecy = $this->prophesize('Criteria');\n        $updateProphecy = $this->prophesize('Criteria');\n\n        // Mock static methods in Propel and BasePeer\n        $propelConnectionProphecy = $this->prophesize(Propel::class);\n        $propelConnectionProphecy::getConnection()->willReturn($mockConnection->reveal());\n\n        $basePeerProphecy = $this->prophesize(BasePeer::class);\n        $basePeerProphecy::doUpdate(\n            Argument::that(function($criteria) use ($criteria1Prophecy) {\n                return $criteria === $criteria1Prophecy->reveal();\n            }),\n            Argument::that(function($update) use ($updateProphecy) {\n                return $update === $updateProphecy->reveal();\n            }),\n            $mockConnection->reveal()\n        )->shouldBeCalled();\n\n        // Register the prophecy as a double for static methods\n        $_SERVER['test.setSuspended'] = true; // This is just to avoid calling actual class\n        self::setExpectedException(\TypeError::class);\n        YourClass::_setSuspended(true, 1); // Trigger the test\n        unset($_SERVER['test.setSuspended']);\n\n        $this->assertTrue($basePeerProphecy->doUpdate(\n            Argument::type('Criteria'),\n            Argument::type('Criteria'),\n            $mockConnection->reveal()\n        )->called());\n    }\n}\n\nclass YourClass\n{\n    static function _setSuspended($Suspended, $UserID)\n    {\n        try {\n            if (isset($_SERVER['test.setSuspended'])) {\n                throw new \TypeError("Test Mocking");\n            }\n\n            $con = Propel::getConnection();\n\n            $c1 = new Criteria();\n            $c1->add(DomainsPeer::USERID,$UserID);\n\n            $update = new Criteria();\n            $update->add(DomainsPeer::SUSPENDED,$Suspended);\n\n            BasePeer::doUpdate($c1, $update, $con);\n\n            return true;\n        } catch(\Exception $e) {\n            return $e->getMessage();\n        }\n    }\n}