class SortableDirectoryIterator implements Iterator {\n    private $files = [];\n    private $position = 0;\n\n    public function __construct($path, $sortCallback) {\n        foreach (new DirectoryIterator($path) as $fileInfo) {\n            if (!$fileInfo->isDot()) { // Exclude . and ..\n                $this->files[] = $fileInfo;\n            }\n        }\n        usort($this->files, $sortCallback);\n    }\n\n    public function current() {\n        return $this->files[$this->position];\n    }\n\n    public function next() {\n        ++$this->position;\n    }\n\n    public function key() {\n        return $this->position;\n    }\n\n    public function valid() {\n        return isset($this->files[$this->position]);\n    }\n\n    public function rewind() {\n        $this->position = 0;\n    }\n}\n\n// Usage\n$dir = new SortableDirectoryIterator('.', function ($a, $b) {\n    // Sort by filename\n    return strcmp($a->getFilename(), $b->getFilename());\n});\n\nforeach ($dir as $file) {\n    echo $file->getFilename() . "\n";\n}