class TimeService {\n    protected $currentTime;\n\n    public function __construct($currentTime = null) {\n        // If not specified, use the current system time.\n        $this->currentTime = $currentTime ?: time();\n    }\n\n    public function getCurrentTime() {\n        return $this->currentTime;\n    }\n}\n\nfunction isBusinessHours(TimeService $timeService) {\n    $currentTimestamp = $timeService->getCurrentTime();\n    $hour = date('G', $currentTimestamp);\n\n    // Assuming a working day is from 9am to 5pm\n    return $hour >= 9 && $hour < 17;\n}\n\nfunction getNextBusinessStart(TimeService $timeService) {\n    $currentTimestamp = $timeService->getCurrentTime();\n    $dayOfWeek = date('N', $currentTimestamp); // Monday is 1, Sunday is 7\n\n    // Calculate the timestamp for the next business start at 9am\n    if ($hour >= 17 || $dayOfWeek == 6) { // After 5pm or Saturday\n        $nextBusinessDayStart = strtotime('next monday 09:00', $currentTimestamp);\n    } elseif ($dayOfWeek == 7) {\n        $nextBusinessDayStart = strtotime('monday next week 09:00', $currentTimestamp);\n    } else {\n        $nextBusinessDayStart = strtotime('tomorrow 09:00', $currentTimestamp);\n    }\n\n    // Adjust for after midnight scenarios\n    if ($hour >= 17) {\n        $nextBusinessDayStart = strtotime('+1 day 09:00', $nextBusinessDayStart);\n    }\n\n    return $nextBusinessDayStart;\n}