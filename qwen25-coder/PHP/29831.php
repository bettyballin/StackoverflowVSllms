<?php\n\nclass Database {\n    private $host = 'localhost';\n    private $db_name = 'your_dbname';\n    private $username = 'root';\n    private $password = '';\n    protected $conn;\n\n    public function connect() {\n        $this->conn = null;\n        try {\n            $dsn = "mysql:host=" . $this->host . ";dbname=" . $this->db_name;\n            $this->conn = new PDO($dsn, $this->username, $this->password);\n            $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n        } catch(PDOException $e) {\n            echo "Connection Error: " . $e->getMessage();\n        }\n        return $this->conn;\n    }\n\n    public function create($table, $data) {\n        $columns = implode(', ', array_keys($data));\n        $values = ":" . implode(", :", array_keys($data));\n\n        $query = "INSERT INTO {$table} ({$columns}) VALUES ({$values})";\n        $stmt = $this->conn->prepare($query);\n\n        foreach ($data as $key => $val) {\n            $stmt->bindParam(":".$key, $data[$key]);\n        }\n\n        if($stmt->execute()) {\n            return true;\n        }\n        return false;\n    }\n\n    public function read($table, $where = null) {\n        $query = "SELECT * FROM {$table}";\n        if(!is_null($where)) {\n            $query .= ' WHERE 1=1 ';\n            foreach ($where as $key => $value) {\n                if(is_array($value)){\n                    list($value, $operator) = $value;\n                } else {\n                    $operator = '=';\n                }\n                $query .= " AND {$key} {$operator} :{$key}";\n            }\n        }\n\n        $stmt = $this->conn->prepare($query);\n        if(!is_null($where)) {\n            foreach ($where as $key => $value) {\n                if(is_array($value)){\n                    list($value, $operator) = $value;\n                }\n                $stmt->bindValue(":".$key, $value);\n            }\n        }\n\n        $stmt->execute();\n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    }\n\n    public function update($table, $data, $where) {\n        foreach ($data as $key => $val) {\n            $fields[] = "{$key} = :{$key}";\n        }\n        $field_list = implode(", ", $fields);\n\n        if(is_array($where)){\n            list($w_key,$w_value) = array_slice($where, 0, count($where));\n        } else {\n            $w_key = 'id';\n            $w_value = $where;\n        }\n\n        $query = "UPDATE {$table} SET {$field_list} WHERE {$w_key} = :{$w_key}";\n        $stmt = $this->conn->prepare($query);\n        $data[$w_key] = $w_value;\n\n        foreach ($data as $key => $val) {\n            $stmt->bindParam(":".$key, $val);\n        }\n\n        if($stmt->execute()) {\n            return true;\n        }\n        return false;\n    }\n\n    public function delete($table, $where) {\n        if(is_array($where)){\n            list($w_key,$w_value) = array_slice($where, 0, count($where));\n        } else {\n            $w_key = 'id';\n            $w_value = $where;\n        }\n  \n        $query = "DELETE FROM {$table} WHERE {$w_key} = :{$w_key}";\n        $stmt = $this->conn->prepare($query);\n        $stmt->bindParam(":". $w_key, $w_value);\n\n        if($stmt->execute()) {\n            return true;\n        }\n        return false;\n    }\n}