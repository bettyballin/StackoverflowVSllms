interface DatabaseInterface {\n    public function doInsert(string $sInsert);\n    public function runQuery(string $sUpdateQuery);\n}\n\nclass Database implements DatabaseInterface {\n    private $logger;\n\n    public function __construct(Log $logger) {\n        $this->logger = $logger;\n    }\n\n    public function doInsert(string $sInsert) {\n        // Insert logic here\n        $this->logger->logDatabaseQuery($sInsert);\n    }\n\n    public function runQuery(string $sUpdateQuery) {\n        // Query logic here\n        $this->logger->logDatabaseQuery($sUpdateQuery);\n    }\n}\n\ninterface LogInterface {\n    public function logMessage(string $message);\n    public function logDatabaseQuery(string $sQuery, DatabaseInterface $database);\n}\n\nclass Log implements LogInterface {\n    private $database;\n\n    public function __construct(DatabaseInterface $database) {\n        $this->database = $database;\n    }\n\n    public function logMessage(string $message) {\n        // Generic message logging logic\n    }\n\n    public function logDatabaseQuery(string $sQuery, DatabaseInterface $database) {\n        // Log to database\n        $database->doInsert("Logged query: " . $sQuery);\n    }\n}\n\n// Dependency Injection Container Example\nclass DIC {\n    private static $instance;\n    private $log;\n    private $database;\n\n    private function __construct() {}\n\n    public static function getInstance() {\n        if (self::$instance == null) {\n            self::$instance = new DIC();\n        }\n        return self::$instance;\n    }\n\n    public function getDatabase(): DatabaseInterface {\n        if ($this->database == null) {\n            $this->database = new Database($this->getLog());\n        }\n        return $this->database;\n    }\n\n    public function getLog(): LogInterface {\n        if ($this->log == null) {\n            $this->log = new Log($this->getDatabase());\n        }\n        return $this->log;\n    }\n}\n\n// Usage\n$dic = DIC::getInstance();\n$log = $dic->getLog();\n\n$log->logMessage("Starting application...");\n$db = $dic->getDatabase();\n$db->doInsert("INSERT INTO test (value) VALUES ('test');");