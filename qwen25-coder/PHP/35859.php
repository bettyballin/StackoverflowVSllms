interface EventInterface {\n    public function performAction();\n}\n\nclass EmailEvent implements EventInterface {\n    public function performAction() {\n        // Logic for sending an email event\n    }\n}\n\nclass CallEvent implements EventInterface {\n    public function performAction() {\n        // Logic for handling a call event\n    }\n}\n\nclass FaxEvent implements EventInterface {\n    public function performAction() {\n        // Logic for handling a fax event\n    }\n}\n\nclass EventFactory {\n    public static function createEvent($type) {\n        switch ($type) {\n            case 'email':\n                return new EmailEvent();\n            case 'call':\n                return new CallEvent();\n            case 'fax':\n                return new FaxEvent();\n            default:\n                throw new InvalidArgumentException("Invalid event type");\n        }\n    }\n}\n\n// Assuming you have a DataMapper class that fetches data\nclass EventDataMapper {\n    public function load($id) {\n        // Simulate fetching data from the database\n        $data = [\n            'id' => 1,\n            'type' => 'email'\n        ];\n        return $data;\n    }\n}\n\n// Usage\n$dataMapper = new EventDataMapper();\n$eventData = $dataMapper->load(1);\n$eventStrategy = EventFactory::createEvent($eventData['type']);\n$eventStrategy->performAction();