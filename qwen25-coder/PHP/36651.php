class Proxy implements Iterator {\n    private $data = array();\n    private $position = 0;\n\n    public function __set($name, $value) {\n        $this->data[$name] = $value;\n    }\n\n    public function __get($name) {\n        return isset($this->data[$name]) ? $this->data[$name] : null;\n    }\n\n    // Iterator methods\n    public function rewind() {\n        $this->position = 0;\n    }\n\n    public function current() {\n        foreach ($this->data as $key => $value) {\n            if (isset(array_keys($this->data)[$this->position])) {\n                return $this->data[array_keys($this->data)[$this->position]];\n            }\n        }\n        return null;\n    }\n\n    public function key() {\n        foreach ($this->data as $key => $value) {\n            if (isset(array_keys($this->data)[$this->position])) {\n                return array_keys($this->data)[$this->position];\n            }\n        }\n        return null;\n    }\n\n    public function next() {\n        ++$this->position;\n    }\n\n    public function valid() {\n        return isset(array_values($this->data)[array_keys($this->data)[$this->position]]);\n    }\n}\n\n// Usage example\n$myProxy = new Proxy();\n$myProxy->foo = 'bar';\n$myProxy->baz = 'qux';\n\nforeach ($myProxy as $key => $value) {\n    echo "$key: $value\n";\n}