class FunctionLoader {\n    public static function __callStatic($functionName, $arguments) {\n        // Determine which file might contain the function based on naming conventions.\n        $fileName = "functions/" . self::getFileNameFromFunction($functionName) . ".php";\n\n        if (file_exists($fileName)) {\n            include_once $fileName;\n        }\n\n        // After including the file, check if the function exists and call it.\n        if (function_exists($functionName)) {\n            return call_user_func_array($functionName, $arguments);\n        } else {\n            throw new Exception("Function {$functionName} not found.");\n        }\n    }\n\n    private static function getFileNameFromFunction($functionName) {\n        // Custom logic to determine the file name from the function name\n        // For example, if functions prefixes map to specific files.\n        $prefix = explode('_', $functionName)[0];\n        return $prefix . '_functions';\n    }\n}\n\n// Usage Example:\ntry {\n    echo FunctionLoader::html_insert_button('arg1', 'arg2');\n} catch (Exception $e) {\n    echo 'Caught exception: ',  $e->getMessage(), "\n";\n}