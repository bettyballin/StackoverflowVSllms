class FilteredRowset implements IteratorAggregate {\n    protected $rowset;\n    protected $filterCallback;\n\n    public function __construct(Zend_Db_Table_Rowset_Abstract $rowset, callable $filter) {\n        $this->rowset = $rowset;\n        $this->filterCallback = $filter;\n    }\n\n    public function getIterator() {\n        return new FilteredRowsetIterator($this->rowset, $this->filterCallback);\n    }\n}\n\nclass FilteredRowsetIterator implements Iterator {\n    protected $iterator;\n    protected $filter;\n    protected $valid;\n\n    public function __construct(Zend_Db_Table_Rowset_Abstract $rowset, callable $filter) {\n        $this->iterator = $rowset->getArrayCopy();\n        $this->filter = $filter;\n        $this->rewind();\n    }\n\n    public function current() {\n        return current($this->iterator);\n    }\n\n    public function next() {\n        do {\n            next($this->iterator);\n            $this->valid = isset($this->current()) && call_user_func_array($this->filter, [$this->current()]);\n        } while (!$this->valid);\n    }\n\n    public function key() {\n        return key($this->iterator);\n    }\n\n    public function rewind() {\n        reset($this->iterator);\n        $this->next();\n    }\n\n    public function valid() {\n        return $this->valid;\n    }\n}\n\n// Usage\n$rowset = ... // your Zend_Db_Table_Rowset object\n\n$filteredRowset = new FilteredRowset(\n    $rowset,\n    function(Zend_Db_Table_Row_Abstract $row) {\n        // Return true if this row should be included in the filtered set\n        return $row->column == 'expected_value';\n    }\n);\n\nforeach ($filteredRowset as $row) {\n    echo $row->id;\n}