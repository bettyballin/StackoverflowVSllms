function areMethodsEqual($obj1, $obj2) {\n    $reflection1 = new ReflectionClass(get_class($obj1));\n    $methods = $reflection1->getMethods(ReflectionMethod::IS_PUBLIC);\n    \n    foreach ($methods as $method) {\n        if ($method->getName() === '__construct') continue; // Skip the constructor\n        $result1 = $method->invoke($obj1);\n        $result2 = $method->invoke($obj2);\n        \n        if (!isDeepEqual($result1, $result2)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction isDeepEqual($a, $b) {\n    if (is_array($a) || is_array($b)) {\n        return serialize($a) === serialize($b);\n    } elseif (is_object($a) && is_object($b)) {\n        return areMethodsEqual($a, $b);\n    }\n    return $a === $b;\n}\n\n// Example usage:\nclass C {\n    private $data;\n\n    public function __construct($data) {\n        $this->data = $data;\n    }\n\n    public function getValue() {\n        return $this->data;\n    }\n}\n\n$c1 = new C(5);\n$c2 = new C(5);\n\nvar_dump(areMethodsEqual($c1, $c2)); // Outputs: bool(true)