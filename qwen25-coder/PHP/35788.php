require_once('phpQuery/phpQuery.php');\n\nhtml = '\n<style type="text/css">\na {\n    color: #a8a8a8;\n}\n</style>\n<a href="http://blah/blah/blah">click here</a>\n';\n\n// Parse the HTML content\n$doc = phpQuery::newDocument($html);\n\n// Extract CSS from <style> tags and apply them to elements\nforeach ($doc['style'] as $styleTag) {\n    // Get the CSS code\n    $cssCode = pq($styleTag)->text();\n    \n    // Create a simple CSS parser or use regex for simplicity (not robust enough for all cases)\n    preg_match_all('/([^{]+)\s*\{([^}]*)\}/', $cssCode, $matches);\n    \n    foreach ($matches[1] as $index => $selector) {\n        $rules = trim($matches[2][$index]);\n        $styleArray = [];\n        \n        // Split CSS rules into an array\n        foreach (explode(';', $rules) as $rule) {\n            list($property, $value) = explode(':', $rule);\n            if (isset($property)) {\n                $styleArray[trim($property)] = trim($value);\n            }\n        }\n        \n        // Apply styles to HTML elements matching the selector\n        foreach ($doc[$selector] as $element) {\n            // If there's already a style attribute, append the new styles\n            $existingStyle = pq($element)->attr('style');\n            \n            if (!empty($existingStyle)) {\n                $styleArrayExisting = [];\n                foreach (explode(';', $existingStyle) as $rule) {\n                    list($property, $value) = explode(':', $rule);\n                    if (isset($property)) {\n                        $styleArrayExisting[trim($property)] = trim($value);\n                    }\n                }\n                \n                // Merge existing styles with new ones\n                $styleArray = array_merge($styleArrayExisting, $styleArray);\n            }\n            \n            // Generate the style attribute string\n            $styleString = '';\n            foreach ($styleArray as $property => $value) {\n                $styleString .= "$property: $value; ";\n            }\n            \n            // Set the new style attribute to the element\n            pq($element)->attr('style', trim($styleString));\n        }\n    }\n}\n\n// Remove <style> tags after processing (optional)\n$doc['style']->remove();\n\n// Output the modified HTML\necho $doc->htmlOuter();