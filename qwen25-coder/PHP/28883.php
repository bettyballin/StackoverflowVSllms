class Email {\n    const PRIORITY_HIGH = 1;\n    const PRIORITY_NORMAL = 2;\n    const PRIORITY_LOW = 3;\n\n    public $to;\n    public $subject;\n    public $body;\n    public $priority;\n\n    public function __construct($to, $subject, $body, $priority) {\n        $this->to = $to;\n        $this->subject = $subject;\n        $this->body = $body;\n        $this->priority = $priority;\n    }\n}\n\nclass EmailQueue {\n    private $queue = [];\n\n    public function addEmail(Email $email) {\n        // Ensure the email is inserted in a position based on priority\n        $insertIndex = 0;\n        foreach ($this->queue as $i => $queuedEmail) {\n            if ($email->priority < $queuedEmail->priority) {\n                break;\n            }\n            $insertIndex++;\n        }\n        array_splice($this->queue, $insertIndex, 0, [$email]);\n    }\n\n    public function sendNext() {\n        if (!empty($this->queue)) {\n            $email = array_shift($this->queue);\n            // Logic to send email\n            echo "Sending email to: " . $email->to . "\n";\n        }\n    }\n}\n\n// Example usage:\n$queue = new EmailQueue();\n$queue->addEmail(new Email('user@example.com', 'Notification', 'Hello, this is a notification.', Email::PRIORITY_HIGH));\n$queue->addEmail(new Email('newsletter@example.com', 'Newsletter', 'Welcome to our newsletter!', Email::PRIORITY_LOW));\n\nwhile (!empty($queue->queue)) {\n    $queue->sendNext();\n}