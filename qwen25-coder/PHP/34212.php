function buildCombinations($array, $currentPath = '', &$result = array()) {\n    if (empty($array)) {\n        // Base case: no more elements to process\n        return;\n    }\n\n    $firstElement = current($array); // Get the first element of the array\n    $id = $firstElement['id'];\n    $options = $firstElement['options'];\n\n    foreach ($options as $option) {\n        $newPath = !empty($currentPath) ? $currentPath . '-' . "$id-$option" : "$id-$option";\n        if (count($array) == 1) {\n            // If this is the last element, add to result\n            $result[$newPath] = array();\n        } else {\n            // Else, recurse with the rest of the elements\n            buildCombinations(array_slice($array, 1), $newPath, $result);\n        }\n    }\n\n    return $result;\n}\n\n$arr = array(\n    array('id' => 10, 'options' => array(3, 5)),\n    array('id' => 15, 'options' => array(2, 4, 8, 9)),\n    array('id' => 20, 'options' => array(2, 6, 7))\n);\n\n$new = buildCombinations($arr);\nprint_r($new);