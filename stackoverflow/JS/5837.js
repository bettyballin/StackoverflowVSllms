function incrementallyProcess(workerCallback, data, chunkSize, timeout, completionCallback) {\n  var itemIndex = 0;\n  (function() {\n    var remainingDataLength = (data.length - itemIndex);\n    var currentChunkSize = (remainingDataLength >= chunkSize) ? chunkSize : remainingDataLength;\n    if(itemIndex < data.length) {\n      while(currentChunkSize--) {\n        workerCallback(data[itemIndex++]);\n      }\n      setTimeout(arguments.callee, timeout);\n    } else if(completionCallback) {\n      completionCallback();\n    }\n  })();\n}\n\n\n// here we are using the above function to take \n// a short break every time we load an image\nfunction init() {\n  incrementallyProcess(function(element) {\n    imageBuf[element] = new Image();\n    imageBuf[element].onload = function(){count()};\n    imageBuf[element].src = "thumbs/"+element;\n  }, imgList, 1, 250, function() { \n    alert("done loading"); \n  });\n}