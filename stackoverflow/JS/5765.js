function Tokenizer(input, tokenSpacer, tokenValueSpacer) {\n    this.Tokenizer = {};\n    this.TokenSpacer = tokenSpacer;\n    this.TokenValueSpacer = tokenValueSpacer;\n    if (input) {\n        var TokenizerParts = input.split(this.TokenSpacer);\n        var i, nv;\n        for (i = 0; i < TokenizerParts.length; i++) {\n            nv = TokenizerParts[i].split(this.TokenValueSpacer);\n            this.Tokenizer[nv[0]] = nv[1];\n        }\n    }\n}\n\nTokenizer.prototype.add = function(name, value) {\n    if (arguments.length == 1 && arguments[0].constructor == Object) {\n        this.addMany(arguments[0]);\n        return;\n    }\n    this.Tokenizer[name] = value;\n}\n\nTokenizer.prototype.addMany = function(newValues) {\n    for (nv in newValues) {\n        this.Tokenizer[nv] = newValues[nv];\n    }\n}\n\nTokenizer.prototype.remove = function(name) {\n    if (arguments.length == 1 && arguments[0].constructor == Array) {\n        this.removeMany(arguments[0]);\n        return;\n    }\n    delete this.Tokenizer[name];\n}\n\nTokenizer.prototype.removeMany = function(deleteNames) {\n    var i;\n    for (i = 0; i < deleteNames.length; i++) {\n        delete this.Tokenizer[deleteNames[i]];\n    }\n}\n\nTokenizer.prototype.MergeTokenizers = function(newTokenizer) {\n    this.addMany(newTokenizer.Tokenizer);\n}\n\nTokenizer.prototype.getTokenString = function() {\n    var nv, q = [];\n    for (nv in this.Tokenizer) {\n        q[q.length] = nv + this.TokenValueSpacer + this.Tokenizer[nv];\n    }\n    return q.join(this.TokenSpacer);\n}\n\nTokenizer.prototype.toString = Tokenizer.prototype.getTokenString;