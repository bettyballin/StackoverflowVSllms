// replacer object, containing strings and their replacements\nvar replacer = {\n  "quick": "nimble",\n  "brown": "black",\n  "fox": "cat"\n};\n\n// prepare regex cache\nvar replacer_re = (function ()\n  {\n    var replacer_re = {};\n    // certain characters are special to regex, they must be escaped\n    var re_specials = /[][/.*+?|(){}\\\\]/g; \n    var word;\n    for (word in replacer)\n    {\n      var escaped_word = word.replace(re_specials, "\\\1");\n      // add \b word boundary anchors to do whole-word replacing only\n      replacer_re[word] = new RegExp("\\b" + escaped_word + "\\b", "g");\n    }\n    return replacer_re;\n  }\n)();\n\n// replace function\nfunction ReplaceText(text)\n{\n  var word;\n  for (word in replacer)\n    text = text.replace(replacer_re[word], replacer[word]);\n  return text;\n}\n\n// DOM recursing function\nfunction ReplaceTextRecursive(element)\n{\n  if (element.childNodes)\n  {\n    var children = element.childNodes;\n    for (var i = children.length - 1; i >= 0; i--)\n      ReplaceTextRecursive(children[i]);\n  }    \n\n  if (element.nodeType == 3) // 3 == TEXT_NODE\n    element.nodeValue = ReplaceText(element.nodeValue);\n}\n\n// test it\nfunction test()\n{\n  ReplaceTextRecursive(document)\n}