grid.flexigrid({\n\n  ...other setup...\n\n  onSuccess: function() {\n       format();\n    });\n  }\n});\n\nfunction format() {\n    var gridContainer = this.Grid.closest('.flexigrid');\n    var headers = gridContainer.find('div.hDiv table tr:first th:not(:hidden)');\n    var drags = gridContainer.find('div.cDrag div');\n    var offset = 0;\n    var firstDataRow = this.Grid.find('tr:first td:not(:hidden)');\n    var columnWidths = new Array( firstDataRow.length );\n    this.Grid.find( 'tr' ).each( function() {\n        $(this).find('td:not(:hidden)').each( function(i) {\n            var colWidth = $(this).outerWidth();\n            if (!columnWidths[i] || columnWidths[i] < colWidth) {\n                columnWidths[i] = colWidth;\n            }\n        });\n    });\n    for (var i = 0; i < columnWidths.length; ++i) {\n        var bodyWidth = columnWidths[i];\n\n        var header = headers.eq(i);\n        var headerWidth = header.outerWidth();\n\n        var realWidth = bodyWidth > headerWidth ? bodyWidth : headerWidth;\n\n        firstDataRow.eq(i).css('width',realWidth);\n        header.css('width',realWidth);            \n        drags.eq(i).css('left',  offset + realWidth );\n        offset += realWidth;\n    }\n}