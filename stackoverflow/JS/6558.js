var editable = document.getElementById('editable'),\n    selection, range;\n\n// Populates selection and range variables\nvar captureSelection = function(e) {\n    // Don't capture selection outside editable region\n    var isOrContainsAnchor = false,\n        isOrContainsFocus = false,\n        sel = window.getSelection(),\n        parentAnchor = sel.anchorNode,\n        parentFocus = sel.focusNode;\n\n    while(parentAnchor && parentAnchor != document.documentElement) {\n        if(parentAnchor == editable) {\n            isOrContainsAnchor = true;\n        }\n        parentAnchor = parentAnchor.parentNode;\n    }\n\n    while(parentFocus && parentFocus != document.documentElement) {\n        if(parentFocus == editable) {\n            isOrContainsFocus = true;\n        }\n        parentFocus = parentFocus.parentNode;\n    }\n\n    if(!isOrContainsAnchor || !isOrContainsFocus) {\n        return;\n    }\n\n    selection = window.getSelection();\n\n    // Get range (standards)\n    if(selection.getRangeAt !== undefined) {\n        range = selection.getRangeAt(0);\n\n    // Get range (Safari 2)\n    } else if(\n        document.createRange &&\n        selection.anchorNode &&\n        selection.anchorOffset &&\n        selection.focusNode &&\n        selection.focusOffset\n    ) {\n        range = document.createRange();\n        range.setStart(selection.anchorNode, selection.anchorOffset);\n        range.setEnd(selection.focusNode, selection.focusOffset);\n    } else {\n        // Failure here, not handled by the rest of the script.\n        // Probably IE or some older browser\n    }\n};\n\n// Recalculate selection while typing\neditable.onkeyup = captureSelection;\n\n// Recalculate selection after clicking/drag-selecting\neditable.onmousedown = function(e) {\n    editable.className = editable.className + ' selecting';\n};\ndocument.onmouseup = function(e) {\n    if(editable.className.match(/\sselecting(\s|$)/)) {\n        editable.className = editable.className.replace(/ selecting(\s|$)/, '');\n        captureSelection();\n    }\n};\n\neditable.onblur = function(e) {\n    var cursorStart = document.createElement('span'),\n        collapsed = !!range.collapsed;\n\n    cursorStart.id = 'cursorStart';\n    cursorStart.appendChild(document.createTextNode('â€”'));\n\n    // Insert beginning cursor marker\n    range.insertNode(cursorStart);\n\n    // Insert end cursor marker if any text is selected\n    if(!collapsed) {\n        var cursorEnd = document.createElement('span');\n        cursorEnd.id = 'cursorEnd';\n        range.collapse();\n        range.insertNode(cursorEnd);\n    }\n};\n\n// Add callbacks to afterFocus to be called after cursor is replaced\n// if you like, this would be useful for styling buttons and so on\nvar afterFocus = [];\neditable.onfocus = function(e) {\n    // Slight delay will avoid the initial selection\n    // (at start or of contents depending on browser) being mistaken\n    setTimeout(function() {\n        var cursorStart = document.getElementById('cursorStart'),\n            cursorEnd = document.getElementById('cursorEnd');\n\n        // Don't do anything if user is creating a new selection\n        if(editable.className.match(/\sselecting(\s|$)/)) {\n            if(cursorStart) {\n                cursorStart.parentNode.removeChild(cursorStart);\n            }\n            if(cursorEnd) {\n                cursorEnd.parentNode.removeChild(cursorEnd);\n            }\n        } else if(cursorStart) {\n            captureSelection();\n            var range = document.createRange();\n\n            if(cursorEnd) {\n                range.setStartAfter(cursorStart);\n                range.setEndBefore(cursorEnd);\n\n                // Delete cursor markers\n                cursorStart.parentNode.removeChild(cursorStart);\n                cursorEnd.parentNode.removeChild(cursorEnd);\n\n                // Select range\n                selection.removeAllRanges();\n                selection.addRange(range);\n            } else {\n                range.selectNode(cursorStart);\n\n                // Select range\n                selection.removeAllRanges();\n                selection.addRange(range);\n\n                // Delete cursor marker\n                document.execCommand('delete', false, null);\n            }\n        }\n\n        // Call callbacks here\n        for(var i = 0; i < afterFocus.length; i++) {\n            afterFocus[i]();\n        }\n        afterFocus = [];\n\n        // Register selection again\n        captureSelection();\n    }, 10);\n};