\echo Rolling back schema change #35\n\nBEGIN;\n\nDELETE FROM schema_version WHERE schema_id = 35;\n\nDROP TABLE IF EXISTS location_coordinates;\nDROP FUNCTION IF EXISTS location_coordinates_populate();\n\nEND;\n\n\echo Applying schema change #35\n\nBEGIN;\n\nINSERT INTO schema_version(schema_id, description) VALUES(35, 'Add location_coordinates table');\n\nCREATE TABLE location_coordinates(\n location_id INT PRIMARY KEY REFERENCES location(location_id),\n latitude FLOAT NOT NULL,\n longitude FLOAT NOT NULL,\n earth_coordinates earth NOT NULL,\n box_10miles cube NOT NULL\n);\n\nGRANT SELECT, INSERT, UPDATE, DELETE ON location_coordinates TO ui;\n\nCREATE FUNCTION location_coordinates_populate() RETURNS TRIGGER LANGUAGE 'plpgsql' AS $$\nBEGIN\n  new.earth_coordinates := ll_to_earth(new.latitude, new.longitude);\n  new.box_10miles := earth_box(new.earth_coordinates, 10 * 1609.344);\n  RETURN new;\nEND\n$$;\n\nCREATE TRIGGER location_coordinates_populate BEFORE INSERT OR UPDATE ON location_coordinates\n FOR EACH ROW EXECUTE PROCEDURE location_coordinates_populate();\n\nINSERT INTO location_coordinates(location_id, latitude, longitude)\n SELECT location_id, latitude, longitude FROM location WHERE latitude IS NOT NULL AND longitude IS NOT NULL;\n\nCREATE INDEX location_coordinates_10miles ON location_coordinates USING gist (box_10miles);\n\nEND;\n\n\echo Done