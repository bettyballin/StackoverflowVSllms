-- Create pvt and pvtWeb as test tables\nCREATE TABLE [dbo].[pvt](\n   [VendorID] [int] NULL,\n   [Emp1] [int] NULL,\n   [Emp2] [int] NULL,\n   [Emp3] [int] NULL,\n   [Emp4] [int] NULL,\n   [Emp5] [int] NULL\n) ON [PRIMARY];\nGO\n\n\nCREATE TABLE [dbo].[pvtWeb](\n   [VendorID] [int] NULL,\n   [Emp1] [int] NULL,\n   [Emp2] [int] NULL,\n   [Emp3] [int] NULL,\n   [Emp4] [int] NULL,\n   [Emp5] [int] NULL\n) ON [PRIMARY];\nGO\n\n\nIF EXISTS(SELECT * FROM sys.triggers WHERE name = ‘ddl_trigger_pvt_alter’)\n   DROP TRIGGER ddl_trigger_pvt_alter ON DATABASE;\nGO\n\n-- Create a trigger that will trap ALTER TABLE events\nCREATE TRIGGER ddl_trigger_pvt_alter\nON DATABASE\nFOR ALTER_TABLE\nAS\n   DECLARE @data XML;\n   DECLARE @tableName NVARCHAR(255);\n   DECLARE @newTableName NVARCHAR(255);\n   DECLARE @sql NVARCHAR(MAX);\n\n   SET @sql = ”;\n   -- Store the event in an XML variable\n   SET @data = EVENTDATA();\n\n   -- Get the name of the table that is being modified\n   SELECT @tableName = @data.value(‘(/EVENT_INSTANCE/ObjectName)[1]‘, ‘NVARCHAR(255)’);\n   -- Get the actual SQL that was executed\n   SELECT @sql = @data.value(‘(/EVENT_INSTANCE/TSQLCommand/CommandText)[1]‘, ‘NVARCHAR(MAX)’);\n\n   -- Figure out the name of the new table\n   SET @newTableName = @tableName + ‘Web’;\n\n   -- Replace the original table name with the new table name\n   -- str_replace is from Robyn Page and Phil Factor’s delighful post on \n   -- string arrays in SQL. The other posts on string functions are indispensible\n   -- to handling string input\n   --\n   -- http://www.simple-talk.com/sql/t-sql-programming/tsql-string-array-workbench/\n   -- http://www.simple-talk.com/sql/t-sql-programming/sql-string-user-function-workbench-part-1/\n   --http://www.simple-talk.com/sql/t-sql-programming/sql-string-user-function-workbench-part-2/\n   SET @sql = dbo.str_replace(@tableName, @newTableName, @sql);\n\n   -- Debug the SQL if needed.\n   --PRINT @sql;\n\n   IF OBJECT_ID(@newTableName, N’U’) IS NOT NULL\n   BEGIN\n       BEGIN TRY\n           -- Now that the table name has been changed, execute the new SQL\n           EXEC sp_executesql @sql;\n       END TRY\n       BEGIN CATCH\n           -- Rollback any existing transactions and report the full nasty \n           -- error back to the user.\n           IF @@TRANCOUNT > 0\n               ROLLBACK TRANSACTION;\n\n           DECLARE\n               @ERROR_SEVERITY INT,\n               @ERROR_STATE    INT,\n               @ERROR_NUMBER   INT,\n               @ERROR_LINE     INT,\n               @ERROR_MESSAGE  NVARCHAR(4000);\n\n           SELECT\n               @ERROR_SEVERITY = ERROR_SEVERITY(),\n               @ERROR_STATE    = ERROR_STATE(),\n               @ERROR_NUMBER   = ERROR_NUMBER(),\n               @ERROR_LINE     = ERROR_LINE(),\n               @ERROR_MESSAGE  = ERROR_MESSAGE();\n\n           RAISERROR(‘Msg %d, Line %d, :%s’,\n               @ERROR_SEVERITY,\n               @ERROR_STATE,\n               @ERROR_NUMBER,\n               @ERROR_LINE,\n               @ERROR_MESSAGE);\n       END CATCH\n   END\nGO\n\n\n\n\nALTER TABLE pvt\nADD test INT NULL;\nGO\n\nEXEC sp_help pvt;\nGO\n\nALTER TABLE pvt\nDROP COLUMN test;\nGO\n\nEXEC sp_help pvt;\nGO