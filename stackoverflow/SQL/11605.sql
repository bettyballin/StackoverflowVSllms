call make_intervals('2009-01-01 00:00:00','2009-01-10 00:00:00',1,'DAY')\n.\nselect * from time_intervals  \n.\ninterval_start      interval_end        \n------------------- ------------------- \n2009-01-01 00:00:00 2009-01-01 23:59:59 \n2009-01-02 00:00:00 2009-01-02 23:59:59 \n2009-01-03 00:00:00 2009-01-03 23:59:59 \n2009-01-04 00:00:00 2009-01-04 23:59:59 \n2009-01-05 00:00:00 2009-01-05 23:59:59 \n2009-01-06 00:00:00 2009-01-06 23:59:59 \n2009-01-07 00:00:00 2009-01-07 23:59:59 \n2009-01-08 00:00:00 2009-01-08 23:59:59 \n2009-01-09 00:00:00 2009-01-09 23:59:59 \n.\ncall make_intervals('2009-01-01 00:00:00','2009-01-01 02:00:00',10,'MINUTE')\n. \nselect * from time_intervals\n.  \ninterval_start      interval_end        \n------------------- ------------------- \n2009-01-01 00:00:00 2009-01-01 00:09:59 \n2009-01-01 00:10:00 2009-01-01 00:19:59 \n2009-01-01 00:20:00 2009-01-01 00:29:59 \n2009-01-01 00:30:00 2009-01-01 00:39:59 \n2009-01-01 00:40:00 2009-01-01 00:49:59 \n2009-01-01 00:50:00 2009-01-01 00:59:59 \n2009-01-01 01:00:00 2009-01-01 01:09:59 \n2009-01-01 01:10:00 2009-01-01 01:19:59 \n2009-01-01 01:20:00 2009-01-01 01:29:59 \n2009-01-01 01:30:00 2009-01-01 01:39:59 \n2009-01-01 01:40:00 2009-01-01 01:49:59 \n2009-01-01 01:50:00 2009-01-01 01:59:59 \n.\nI specified an interval_start and interval_end so you can aggregate the \ndata timestamps with a "between interval_start and interval_end" type of JOIN.\n.\nCode for the proc:\n.\n-- drop procedure make_intervals\n.\nCREATE PROCEDURE make_intervals(startdate timestamp, enddate timestamp, intval integer, unitval varchar(10))\nBEGIN\n-- *************************************************************************\n-- Procedure: make_intervals()\n--    Author: Ron Savage\n--      Date: 02/03/2009\n--\n-- Description:\n-- This procedure creates a temporary table named time_intervals with the\n-- interval_start and interval_end fields specifed from the startdate and\n-- enddate arguments, at intervals of intval (unitval) size.\n-- *************************************************************************\n   declare thisDate timestamp;\n   declare nextDate timestamp;\n   set thisDate = startdate;\n\n   -- *************************************************************************\n   -- Drop / create the temp table\n   -- *************************************************************************\n   drop temporary table if exists time_intervals;\n   create temporary table if not exists time_intervals\n      (\n      interval_start timestamp,\n      interval_end timestamp\n      );\n\n   -- *************************************************************************\n   -- Loop through the startdate adding each intval interval until enddate\n   -- *************************************************************************\n   repeat\n      select\n         case unitval\n            when 'MICROSECOND' then timestampadd(MICROSECOND, intval, thisDate)\n            when 'SECOND'      then timestampadd(SECOND, intval, thisDate)\n            when 'MINUTE'      then timestampadd(MINUTE, intval, thisDate)\n            when 'HOUR'        then timestampadd(HOUR, intval, thisDate)\n            when 'DAY'         then timestampadd(DAY, intval, thisDate)\n            when 'WEEK'        then timestampadd(WEEK, intval, thisDate)\n            when 'MONTH'       then timestampadd(MONTH, intval, thisDate)\n            when 'QUARTER'     then timestampadd(QUARTER, intval, thisDate)\n            when 'YEAR'        then timestampadd(YEAR, intval, thisDate)\n         end into nextDate;\n\n      insert into time_intervals select thisDate, timestampadd(MICROSECOND, -1, nextDate);\n      set thisDate = nextDate;\n   until thisDate >= enddate\n   end repeat;\n\n END;