DECLARE @parentChild TABLE (Id INT NOT NULL, ParentId INT NULL);\nINSERT INTO @parentChild VALUES (1, NULL);\nINSERT INTO @parentChild VALUES (2, 1);\nINSERT INTO @parentChild VALUES (3, 1);\nINSERT INTO @parentChild VALUES (4, 2);\nINSERT INTO @parentChild VALUES (5, 2);\nINSERT INTO @parentChild VALUES (6, 3);\nINSERT INTO @parentChild VALUES (7, 3);\nINSERT INTO @parentChild VALUES (8, 7);\n\nDECLARE @ids TABLE (Id INT NOT NULL);\nINSERT INTO @ids VALUES (6);\nINSERT INTO @ids VALUES (7);\nINSERT INTO @ids VALUES (8);\n\nDECLARE @count INT;\nSELECT @count = COUNT(1) FROM @ids;\n\nWITH Nodes(Id, ParentId, Depth) AS\n(\n    -- Start from every node in the @ids collection.\n    SELECT pc.Id , pc.ParentId , 0 AS DEPTH\n    FROM @parentChild pc\n    JOIN @ids i ON pc.Id = i.Id\n\n    UNION ALL\n\n    -- Recursively find parent nodes for each starting node.\n    SELECT pc.Id , pc.ParentId , n.Depth - 1\n    FROM @parentChild pc\n    JOIN Nodes n ON pc.Id = n.ParentId\n)\nSELECT n.Id\nFROM Nodes n\nGROUP BY n.Id\nHAVING COUNT(n.Id) = @count\nORDER BY MIN(n.Depth) DESC