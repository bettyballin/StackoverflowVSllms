def update_mailchimp(optin)\n  # Create a Hominid object (A wrapper to the mailchimp api), and pass in a hash from the yaml file \n  # telling which mailing list id to update with subscribe/unsubscribe notifications)\n  @hominid = Hominid.new\n  client_site_list_id = YAML.load(File.read(RAILS_ROOT + "/config/mailchimp.yml"))\n\n  case optin  \n    when 'subscribe_newsletter'\n      logger.debug("subscribing to newsletter...")\n      "success!" if @hominid.subscribe(client_site_list_id['client_site_to_mailchimp_API_link'], email, {:FNAME => first_name, :LNAME => last_name}, 'html')\n    when 'unsubscribe_newsletter'\n      logger.debug("unsubscribing from newsletter...")\n      "success!" if @hominid.subscribe(client_site_list_id['client_site_to_mailchimp_API_link'], email, {:FNAME => first_name, :LNAME => last_name}, 'html')\n    when 'subscribe_monthly_update'\n      logger.debug("subscribing to monthly update...")\n      "success!" if @hominid.subscribe(client_site_list_id['monthly_update'], email, {:FNAME => first_name, :LNAME => last_name}, 'html')\n    when 'unsubscribe_monthly_update'\n      logger.debug("unsubscribing from monthly update...")\n      "success!" if @hominid.unsubscribe(client_site_list_id['monthly_update'], email, {:FNAME => first_name, :LNAME => last_name}, 'html')\n    end\nend\n\n# Keep the users in sync with mailchimp's own records - by only firing requests to the API if details on a user have changed after saving.\n\ndef check_against_mailchimp\n  logger.info("Checking if changes need to be sent to mailchimp...")\n  if newsletter_changed?\n    logger.info("Newsletter changed...")\n    newsletter ? update_mailchimp('subscribe_newsletter') : update_mailchimp('unsubscribe_newsletter')\n  end\n  if monthly_update_changed?\n    logger.info("update preferences changed...")\n    monthly_update ? update_mailchimp('subscribe_monthly_update') : update_mailchimp('unsubscribe_monthly_update')\n  end\nend