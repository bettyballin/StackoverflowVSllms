class Category < ActiveRecord::Base\n  acts_as_nested_set :dependent => :destroy\n\n  #=== Nested set methods ===\n\n  def save_with_place_in_set(parent_id = nil)\n    Category.transaction do\n      return false if !save_without_place_in_set\n      raise ActiveRecord::Rollback if !validate_move parent_id\n\n      place_in_nested_set parent_id\n      return true\n    end\n\n    return false\n  end\n\n  alias_method_chain :save, :place_in_set\n\n  def validate_move(parent_id)\n    raise ActiveRecord::RecordNotSaved, "record must be saved before moved into the nested set" if new_record?\n    return true if parent_id.nil?\n\n    parent_id = parent_id.to_i\n\n    if self.id == parent_id\n      @error = :cannot_be_child_of_self\n    elsif !Category.all.map(&:id).include?(parent_id)\n      @error = :given_parent_is_invalid\n    elsif descendants.map(&:id).include? parent_id\n      @error = :cannot_be_child_of_descendant\n    end\n\n    errors.add(:parent_id, @error) if @error\n    return @error.nil?\n  end\n\n  def place_in_nested_set(parent_id)\n    if parent_id.nil? || parent_id.blank?\n      move_to_root\n    else\n      move_to_child_of parent_id\n    end\n    return true\n  end\nend