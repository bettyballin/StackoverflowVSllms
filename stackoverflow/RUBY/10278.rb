class ActionController::Integration::Session\n  # Intercepts a request to a foreign domain.  Use this to stub\n  # a service which the user is bounced through, such as an\n  # OpenID provider.  The block should return a new URL to\n  # request.  This is the URL which the foreign service would\n  # redirect the browser to if we were really using it.\n  # \n  # Currently, the return URL can only be requested with a GET.\n  # \n  #   stub_request 'foreign.host.com' do |path|\n  #     return_from_bounce_url\n  #   end\n  def stub_request(host, &block)\n    @request_stubs ||= {}\n    @request_stubs[host] = block\n  end\n\n  def process_with_stubs(method, path, parameters = nil, headers = nil)\n    @request_stubs ||= {}\n\n    if @request_stubs.key? self.host\n      url = @request_stubs[host].call(path)\n      process_without_stubs(method, url, parameters, headers)\n    else\n      process_without_stubs(method, path, parameters, headers)\n    end\n  end\n  alias_method_chain :process, :stubs\nend