<?php\nclass MyProjCrypt {\n\n    private $td;\n    private $iv;\n    private $ks;\n    private $salt;\n    private $encStr;\n    private $decStr;\n\n\n    /**\n     *  The constructor initializes the cryptography library\n     * @param $salt string The encryption key\n     * @return void\n     */\n    function __construct($salt) {\n        $this->td = mcrypt_module_open('rijndael-256', '', 'ofb', ''); // algorithm\n        $this->ks = mcrypt_enc_get_key_size($this->td); // key size needed for the algorithm\n        $this->salt = substr(md5($salt), 0, $this->ks);\n    }\n\n    /**\n     * Generates a hex string of $src\n     * @param $src string String to be encrypted\n     * @return void\n     */\n    function encrypt($src) {\n        srand(( double) microtime() * 1000000); //for sake of MCRYPT_RAND\n        $this->iv = mcrypt_create_iv($this->ks, MCRYPT_RAND); \n        mcrypt_generic_init($this->td, $this->salt, $this->iv);\n        $tmpStr = mcrypt_generic($this->td, $src);\n        mcrypt_generic_deinit($this->td);\n        mcrypt_module_close($this->td);\n\n        //convert the encrypted binary string to hex\n        //$this->iv is needed to decrypt the string later. It has a fixed length and can easily \n        //be seperated out from the encrypted String\n        $this->encStr = bin2hex($this->iv.$tmpStr);\n\n    }\n\n    /**\n     * Decrypts a hex string    \n     * @param $src string String to be decrypted\n     * @return void\n     */\n    function decrypt($src) {\n        //convert the hex string to binary\n        $corrected = preg_replace("[^0-9a-fA-F]", "", $src);\n        $binenc = pack("H".strlen($corrected), $corrected);\n\n        //retrieve the iv from the encrypted string\n        $this->iv = substr($binenc, 0, $this->ks);\n\n        //retrieve the encrypted string alone(minus iv)\n        $binstr = substr($binenc, $this->ks);\n\n        /* Initialize encryption module for decryption */\n        mcrypt_generic_init($this->td, $this->salt, $this->iv);\n        /* Decrypt encrypted string */\n        $decrypted = mdecrypt_generic($this->td, $binstr);\n\n        /* Terminate decryption handle and close module */\n        mcrypt_generic_deinit($this->td);\n        mcrypt_module_close($this->td);\n        $this->decStr = trim($decrypted);\n\n    }\n}