<?php\n\nclass Zend_Validate_IdenticalField extends Zend_Validate_Abstract {\n  const NOT_MATCH = 'notMatch';\n  const MISSING_FIELD_NAME = 'missingFieldName';\n  const INVALID_FIELD_NAME = 'invalidFieldName';\n\n  /**\n   * @var array\n  */\n  protected $_messageTemplates = array(\n    self::MISSING_FIELD_NAME  =>\n      'DEVELOPMENT ERROR: Field name to match against was not provided.',\n    self::INVALID_FIELD_NAME  =>\n      'DEVELOPMENT ERROR: The field "%fieldName%" was not provided to match against.',\n    self::NOT_MATCH =>\n      'Does not match %fieldTitle%.'\n  );\n\n  /**\n   * @var array\n  */\n  protected $_messageVariables = array(\n    'fieldName' => '_fieldName',\n    'fieldTitle' => '_fieldTitle'\n  );\n\n  /**\n   * Name of the field as it appear in the $context array.\n   *\n   * @var string\n   */\n  protected $_fieldName;\n\n  /**\n   * Title of the field to display in an error message.\n   *\n   * If evaluates to false then will be set to $this->_fieldName.\n   *\n   * @var string\n  */\n  protected $_fieldTitle;\n\n  /**\n   * Sets validator options\n   *\n   * @param  string $fieldName\n   * @param  string $fieldTitle\n   * @return void\n  */\n  public function __construct($fieldName, $fieldTitle = null) {\n    $this->setFieldName($fieldName);\n    $this->setFieldTitle($fieldTitle);\n  }\n\n  /**\n   * Returns the field name.\n   *\n   * @return string\n  */\n  public function getFieldName() {\n    return $this->_fieldName;\n  }\n\n  /**\n   * Sets the field name.\n   *\n   * @param  string $fieldName\n   * @return Zend_Validate_IdenticalField Provides a fluent interface\n  */\n  public function setFieldName($fieldName) {\n    $this->_fieldName = $fieldName;\n    return $this;\n  }\n\n  /**\n   * Returns the field title.\n   *\n   * @return integer\n  */\n  public function getFieldTitle() {\n    return $this->_fieldTitle;\n  }\n\n  /**\n   * Sets the field title.\n   *\n   * @param  string:null $fieldTitle\n   * @return Zend_Validate_IdenticalField Provides a fluent interface\n  */\n  public function setFieldTitle($fieldTitle = null) {\n    $this->_fieldTitle = $fieldTitle ? $fieldTitle : $this->_fieldName;\n    return $this;\n  }\n\n  /**\n   * Defined by Zend_Validate_Interface\n   *\n   * Returns true if and only if a field name has been set, the field name is available in the\n   * context, and the value of that field name matches the provided value.\n   *\n   * @param  string $value\n   *\n   * @return boolean \n  */ \n  public function isValid($value, $context = null) {\n    $this->_setValue($value);\n    $field = $this->getFieldName();\n\n    if (empty($field)) {\n      $this->_error(self::MISSING_FIELD_NAME);\n      return false;\n    } elseif (!isset($context[$field])) {\n      $this->_error(self::INVALID_FIELD_NAME);\n      return false;\n    } elseif (is_array($context)) {\n      if ($value == $context[$field]) {\n        return true;\n      }\n    } elseif (is_string($context) && ($value == $context)) {\n      return true;\n    }\n    $this->_error(self::NOT_MATCH);\n    return false;\n  }\n}\n?>