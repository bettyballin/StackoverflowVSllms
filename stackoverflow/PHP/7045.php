# Split file into physical lines (records may span lines)\n$lines = explode("\n", $fileData);\n\n# Re-assemble records\n$records = array ();\n$record = '';\n$lineSep = '';\nforeach ($lines as $line) {\n  # Escape @ symbol so we can use it as a marker (as it does not conflict with\n  # any special CSV character.)\n  $line = str_replace('@', '@a', $line);\n\n  # Escape commas as we don't yet know which ones are separators\n  $line = str_replace(',', '@c', $line);\n\n  # Escape quotes in a form that uses no special characters\n  $line = str_replace("\\'", '@q', $line);\n  $line = str_replace('\\', '@b', $line);\n\n  $record .= $lineSep . $line;\n  $lineSep = "\n";\n\n  # Must have an even number of quotes in a complete record!\n  if (substr_count($record, "'") % 2 == 0) {\n    $records[] = $record;\n    $record = '';\n    $lineSep = '';\n  }\n}\nif (strlen($record) > 0) {\n  $records[] = $record;\n}\n\n$rows = array ();\n\nforeach ($records as $record) {\n  $chunks_in = explode("'", $record);\n  $chunks_out = array ();\n\n  # Decode escaped quotes/backslashes.\n  # Decode field-separating commas (unless quoted)\n  foreach ($chunks_in as $i => $chunk) {\n    # Unescape quotes & backslashes\n    $chunk = str_replace('@q', "'", $chunk);\n    $chunk = str_replace('@b', '\\', $chunk);\n    if ($i % 2 == 0) {\n      # Unescape commas\n      $chunk = str_replace('@c', ',', $chunk);\n    }\n    $chunks_out[] = $chunk;\n  }\n\n  # Join back together, discarding unescaped quotes\n  $record = join('', $chunks_out);\n\n  $chunks_in = explode(',', $record);\n  $row = array ();\n  foreach ($chunks_in as $chunk) {\n    $chunk = str_replace('@c', ',', $chunk);\n    $chunk = str_replace('@a', '@', $chunk);\n    $row[] = $chunk;\n  }\n  $rows[] = $row;\n}