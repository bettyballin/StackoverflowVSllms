abstract class Model_Abstract\n{\n    protected $_data;\n\n    // Private Data Members assigned to protected $_data\n    public function __construct($data = null)\n    {\n        // Makes it so that I can pass in an associative array as well as \n        // an StdObject.\n        if(!is_object($data)) {\n            $data = (object) $data;\n        }\n\n        $this->_data = $data;\n\n    }\n\n    public function __get($key)\n    {\n        if (method_exists($this, '_get' . ucfirst($key))) {\n            $method = '_get' . ucfirst($key);\n            return $this->$method();            \n        }\n        else {\n            return $this->_data->$key;\n        }   \n    }\n\n    public function __set($key, $val)\n    {\n        if ( method_exists( $this, '_set' . ucfirst($key) ) ) {\n            $method = '_set' . ucfirst($key);\n            return $this->$method($val);            \n        }\n        else {\n            $this->_data->$key = $val;\n            return $this->_data->$key;\n        }\n    }\n}\n\n\nclass Model_User extends Model_Abstract\n{\n    //Example overriding method for the property firstName in the $_data collection.\n    protected function _getFirstName()\n    {\n        // Do some special processing and then output the first name.\n    }\n}