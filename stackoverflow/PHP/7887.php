function toHierarchy($collection)\n{\n        // Trees mapped\n        $trees = array();\n        $l = 0;\n\n        if (count($collection) > 0) {\n                // Node Stack. Used to help building the hierarchy\n                $stack = array();\n\n                foreach ($collection as $node) {\n                        $item = $node;\n                        $item['children'] = array();\n\n                        // Number of stack items\n                        $l = count($stack);\n\n                        // Check if we're dealing with different levels\n                        while($l > 0 && $stack[$l - 1]['depth'] >= $item['depth']) {\n                                array_pop($stack);\n                                $l--;\n                        }\n\n                        // Stack is empty (we are inspecting the root)\n                        if ($l == 0) {\n                                // Assigning the root node\n                                $i = count($trees);\n                                $trees[$i] = $item;\n                                $stack[] = & $trees[$i];\n                        } else {\n                                // Add node to parent\n                                $i = count($stack[$l - 1]['children']);\n                                $stack[$l - 1]['children'][$i] = $item;\n                                $stack[] = & $stack[$l - 1]['children'][$i];\n                        }\n                }\n        }\n\n        return $trees;\n}