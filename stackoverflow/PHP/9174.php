/*\n    ================================================================================\n\n    EvalMath - PHP Class to safely evaluate math expressions\n    Copyright (C) 2005 Miles Kaufmann <http://www.twmagic.com/>\n\n    ================================================================================\n\n    NAME\n        EvalMath - safely evaluate math expressions\n\n    SYNOPSIS\n        <?\n          include('evalmath.class.php');\n          $m = new EvalMath;\n          // basic evaluation:\n          $result = $m->evaluate('2+2');\n          // supports: order of operation; parentheses; negation; built-in functions\n          $result = $m->evaluate('-8(5/2)^2*(1-sqrt(4))-8');\n          // create your own variables\n          $m->evaluate('a = e^(ln(pi))');\n          // or functions\n          $m->evaluate('f(x,y) = x^2 + y^2 - 2x*y + 1');\n          // and then use them\n          $result = $m->evaluate('3*f(42,a)');\n        ?>\n\n    DESCRIPTION\n        Use the EvalMath class when you want to evaluate mathematical expressions \n        from untrusted sources.  You can define your own variables and functions,\n        which are stored in the object.  Try it, it's fun!\n\n    METHODS\n        $m->evalute($expr)\n            Evaluates the expression and returns the result.  If an error occurs,\n            prints a warning and returns false.  If $expr is a function assignment,\n            returns true on success.\n\n        $m->e($expr)\n            A synonym for $m->evaluate().\n\n        $m->vars()\n            Returns an associative array of all user-defined variables and values.\n\n        $m->funcs()\n            Returns an array of all user-defined functions.\n\n    PARAMETERS\n        $m->suppress_errors\n            Set to true to turn off warnings when evaluating expressions\n\n        $m->last_error\n            If the last evaluation failed, contains a string describing the error.\n            (Useful when suppress_errors is on).\n\n    AUTHOR INFORMATION\n        Copyright 2005, Miles Kaufmann.\n\n    LICENSE\n        Redistribution and use in source and binary forms, with or without\n        modification, are permitted provided that the following conditions are\n        met:\n\n        1   Redistributions of source code must retain the above copyright\n            notice, this list of conditions and the following disclaimer.\n        2.  Redistributions in binary form must reproduce the above copyright\n            notice, this list of conditions and the following disclaimer in the\n            documentation and/or other materials provided with the distribution.\n        3.  The name of the author may not be used to endorse or promote\n            products derived from this software without specific prior written\n            permission.\n\n        THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n        IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n        WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n        DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\n        INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n        (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n        SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n        HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n        STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n        ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n        POSSIBILITY OF SUCH DAMAGE.\n\n    */\n\n    class EvalMath {\n\n        var $suppress_errors = false;\n        var $last_error = null;\n\n        var $v = array('e'=>2.71,'pi'=>3.14); // variables (and constants)\n        var $f = array(); // user-defined functions\n        var $vb = array('e', 'pi'); // constants\n        var $fb = array(  // built-in functions\n            'sin','sinh','arcsin','asin','arcsinh','asinh',\n            'cos','cosh','arccos','acos','arccosh','acosh',\n            'tan','tanh','arctan','atan','arctanh','atanh',\n            'sqrt','abs','ln','log');\n\n        function EvalMath() {\n            // make the variables a little more accurate\n            $this->v['pi'] = pi();\n            $this->v['e'] = exp(1);\n        }\n\n        function e($expr) {\n            return $this->evaluate($expr);\n        }\n\n        function evaluate($expr) {\n            $this->last_error = null;\n            $expr = trim($expr);\n            if (substr($expr, -1, 1) == ';') $expr = substr($expr, 0, strlen($expr)-1); // strip semicolons at the end\n            //===============\n            // is it a variable assignment?\n            if (preg_match('/^\s*([a-z]\w*)\s*=\s*(.+)$/', $expr, $matches)) {\n                if (in_array($matches[1], $this->vb)) { // make sure we're not assigning to a constant\n                    return $this->trigger("cannot assign to constant '$matches[1]'");\n                }\n                if (($tmp = $this->pfx($this->nfx($matches[2]))) === false) return false; // get the result and make sure it's good\n                $this->v[$matches[1]] = $tmp; // if so, stick it in the variable array\n                return $this->v[$matches[1]]; // and return the resulting value\n            //===============\n            // is it a function assignment?\n            } elseif (preg_match('/^\s*([a-z]\w*)\s*\(\s*([a-z]\w*(?:\s*,\s*[a-z]\w*)*)\s*\)\s*=\s*(.+)$/', $expr, $matches)) {\n                $fnn = $matches[1]; // get the function name\n                if (in_array($matches[1], $this->fb)) { // make sure it isn't built in\n                    return $this->trigger("cannot redefine built-in function '$matches[1]()'");\n                }\n                $args = explode(",", preg_replace("/\s+/", "", $matches[2])); // get the arguments\n                if (($stack = $this->nfx($matches[3])) === false) return false; // see if it can be converted to postfix\n                for ($i = 0; $i<count($stack); $i++) { // freeze the state of the non-argument variables\n                    $token = $stack[$i];\n                    if (preg_match('/^[a-z]\w*$/', $token) and !in_array($token, $args)) {\n                        if (array_key_exists($token, $this->v)) {\n                            $stack[$i] = $this->v[$token];\n                        } else {\n                            return $this->trigger("undefined variable '$token' in function definition");\n                        }\n                    }\n                }\n                $this->f[$fnn] = array('args'=>$args, 'func'=>$stack);\n                return true;\n            //===============\n            } else {\n                return $this->pfx($this->nfx($expr)); // straight up evaluation, woo\n            }\n        }\n\n        function vars() {\n            $output = $this->v;\n            unset($output['pi']);\n            unset($output['e']);\n            return $output;\n        }\n\n        function funcs() {\n            $output = array();\n            foreach ($this->f as $fnn=>$dat)\n                $output[] = $fnn . '(' . implode(',', $dat['args']) . ')';\n            return $output;\n        }\n\n        //===================== HERE BE INTERNAL METHODS ====================\\\n\n        // Convert infix to postfix notation\n        function nfx($expr) {\n\n            $index = 0;\n            $stack = new EvalMathStack;\n            $output = array(); // postfix form of expression, to be passed to pfx()\n            $expr = trim(strtolower($expr));\n\n            $ops   = array('+', '-', '*', '/', '^', '_');\n            $ops_r = array('+'=>0,'-'=>0,'*'=>0,'/'=>0,'^'=>1); // right-associative operator?  \n            $ops_p = array('+'=>0,'-'=>0,'*'=>1,'/'=>1,'_'=>1,'^'=>2); // operator precedence\n\n            $expecting_op = false; // we use this in syntax-checking the expression\n                                   // and determining when a - is a negation\n\n            if (preg_match("/[^\w\s+*^\/()\.,-]/", $expr, $matches)) { // make sure the characters are all good\n                return $this->trigger("illegal character '{$matches[0]}'");\n            }\n\n            while(1) { // 1 Infinite Loop ;)\n                $op = substr($expr, $index, 1); // get the first character at the current index\n                // find out if we're currently at the beginning of a number/variable/function/parenthesis/operand\n                $ex = preg_match('/^([a-z]\w*\(?|\d+(?:\.\d*)?|\.\d+|\()/', substr($expr, $index), $match);\n                //===============\n                if ($op == '-' and !$expecting_op) { // is it a negation instead of a minus?\n                    $stack->push('_'); // put a negation on the stack\n                    $index++;\n                } elseif ($op == '_') { // we have to explicitly deny this, because it's legal on the stack \n                    return $this->trigger("illegal character '_'"); // but not in the input expression\n                //===============\n                } elseif ((in_array($op, $ops) or $ex) and $expecting_op) { // are we putting an operator on the stack?\n                    if ($ex) { // are we expecting an operator but have a number/variable/function/opening parethesis?\n                        $op = '*'; $index--; // it's an implicit multiplication\n                    }\n                    // heart of the algorithm:\n                    while($stack->count > 0 and ($o2 = $stack->last()) and in_array($o2, $ops) and ($ops_r[$op] ? $ops_p[$op] < $ops_p[$o2] : $ops_p[$op] <= $ops_p[$o2])) {\n                        $output[] = $stack->pop(); // pop stuff off the stack into the output\n                    }\n                    // many thanks: http://en.wikipedia.org/wiki/Reverse_Polish_notation#The_algorithm_in_detail\n                    $stack->push($op); // finally put OUR operator onto the stack\n                    $index++;\n                    $expecting_op = false;\n                //===============\n                } elseif ($op == ')' and $expecting_op) { // ready to close a parenthesis?\n                    while (($o2 = $stack->pop()) != '(') { // pop off the stack back to the last (\n                        if (is_null($o2)) return $this->trigger("unexpected ')'");\n                        else $output[] = $o2;\n                    }\n                    if (preg_match("/^([a-z]\w*)\($/", $stack->last(2), $matches)) { // did we just close a function?\n                        $fnn = $matches[1]; // get the function name\n                        $arg_count = $stack->pop(); // see how many arguments there were (cleverly stored on the stack, thank you)\n                        $output[] = $stack->pop(); // pop the function and push onto the output\n                        if (in_array($fnn, $this->fb)) { // check the argument count\n                            if($arg_count > 1)\n                                return $this->trigger("too many arguments ($arg_count given, 1 expected)");\n                        } elseif (array_key_exists($fnn, $this->f)) {\n                            if ($arg_count != count($this->f[$fnn]['args']))\n                                return $this->trigger("wrong number of arguments ($arg_count given, " . count($this->f[$fnn]['args']) . " expected)");\n                        } else { // did we somehow push a non-function on the stack? this should never happen\n                            return $this->trigger("internal error");\n                        }\n                    }\n                    $index++;\n                //===============\n                } elseif ($op == ',' and $expecting_op) { // did we just finish a function argument?\n                    while (($o2 = $stack->pop()) != '(') { \n                        if (is_null($o2)) return $this->trigger("unexpected ','"); // oops, never had a (\n                        else $output[] = $o2; // pop the argument expression stuff and push onto the output\n                    }\n                    // make sure there was a function\n                    if (!preg_match("/^([a-z]\w*)\($/", $stack->last(2), $matches))\n                        return $this->trigger("unexpected ','");\n                    $stack->push($stack->pop()+1); // increment the argument count\n                    $stack->push('('); // put the ( back on, we'll need to pop back to it again\n                    $index++;\n                    $expecting_op = false;\n                //===============\n                } elseif ($op == '(' and !$expecting_op) {\n                    $stack->push('('); // that was easy\n                    $index++;\n                    $allow_neg = true;\n                //===============\n                } elseif ($ex and !$expecting_op) { // do we now have a function/variable/number?\n                    $expecting_op = true;\n                    $val = $match[1];\n                    if (preg_match("/^([a-z]\w*)\($/", $val, $matches)) { // may be func, or variable w/ implicit multiplication against parentheses...\n                        if (in_array($matches[1], $this->fb) or array_key_exists($matches[1], $this->f)) { // it's a func\n                            $stack->push($val);\n                            $stack->push(1);\n                            $stack->push('(');\n                            $expecting_op = false;\n                        } else { // it's a var w/ implicit multiplication\n                            $val = $matches[1];\n                            $output[] = $val;\n                        }\n                    } else { // it's a plain old var or num\n                        $output[] = $val;\n                    }\n                    $index += strlen($val);\n                //===============\n                } elseif ($op == ')') { // miscellaneous error checking\n                    return $this->trigger("unexpected ')'");\n                } elseif (in_array($op, $ops) and !$expecting_op) {\n                    return $this->trigger("unexpected operator '$op'");\n                } else { // I don't even want to know what you did to get here\n                    return $this->trigger("an unexpected error occured");\n                }\n                if ($index == strlen($expr)) {\n                    if (in_array($op, $ops)) { // did we end with an operator? bad.\n                        return $this->trigger("operator '$op' lacks operand");\n                    } else {\n                        break;\n                    }\n                }\n                while (substr($expr, $index, 1) == ' ') { // step the index past whitespace (pretty much turns whitespace \n                    $index++;                             // into implicit multiplication if no operator is there)\n                }\n\n            } \n            while (!is_null($op = $stack->pop())) { // pop everything off the stack and push onto output\n                if ($op == '(') return $this->trigger("expecting ')'"); // if there are (s on the stack, ()s were unbalanced\n                $output[] = $op;\n            }\n            return $output;\n        }\n\n        // evaluate postfix notation\n        function pfx($tokens, $vars = array()) {\n\n            if ($tokens == false) return false;\n\n            $stack = new EvalMathStack;\n\n            foreach ($tokens as $token) { // nice and easy\n                // if the token is a binary operator, pop two values off the stack, do the operation, and push the result back on\n                if (in_array($token, array('+', '-', '*', '/', '^'))) {\n                    if (is_null($op2 = $stack->pop())) return $this->trigger("internal error");\n                    if (is_null($op1 = $stack->pop())) return $this->trigger("internal error");\n                    switch ($token) {\n                        case '+':\n                            $stack->push($op1+$op2); break;\n                        case '-':\n                            $stack->push($op1-$op2); break;\n                        case '*':\n                            $stack->push($op1*$op2); break;\n                        case '/':\n                            if ($op2 == 0) return $this->trigger("division by zero");\n                            $stack->push($op1/$op2); break;\n                        case '^':\n                            $stack->push(pow($op1, $op2)); break;\n                    }\n                // if the token is a unary operator, pop one value off the stack, do the operation, and push it back on\n                } elseif ($token == "_") {\n                    $stack->push(-1*$stack->pop());\n                // if the token is a function, pop arguments off the stack, hand them to the function, and push the result back on\n                } elseif (preg_match("/^([a-z]\w*)\($/", $token, $matches)) { // it's a function!\n                    $fnn = $matches[1];\n                    if (in_array($fnn, $this->fb)) { // built-in function:\n                        if (is_null($op1 = $stack->pop())) return $this->trigger("internal error");\n                        $fnn = preg_replace("/^arc/", "a", $fnn); // for the 'arc' trig synonyms\n                        if ($fnn == 'ln') $fnn = 'log';\n                        eval('$stack->push(' . $fnn . '($op1));'); // perfectly safe eval()\n                    } elseif (array_key_exists($fnn, $this->f)) { // user function\n                        // get args\n                        $args = array();\n                        for ($i = count($this->f[$fnn]['args'])-1; $i >= 0; $i--) {\n                            if (is_null($args[$this->f[$fnn]['args'][$i]] = $stack->pop())) return $this->trigger("internal error");\n                        }\n                        $stack->push($this->pfx($this->f[$fnn]['func'], $args)); // yay... recursion!!!!\n                    }\n                // if the token is a number or variable, push it on the stack\n                } else {\n                    if (is_numeric($token)) {\n                        $stack->push($token);\n                    } elseif (array_key_exists($token, $this->v)) {\n                        $stack->push($this->v[$token]);\n                    } elseif (array_key_exists($token, $vars)) {\n                        $stack->push($vars[$token]);\n                    } else {\n                        return $this->trigger("undefined variable '$token'");\n                    }\n                }\n            }\n            // when we're out of tokens, the stack should have a single element, the final result\n            if ($stack->count != 1) return $this->trigger("internal error");\n            return $stack->pop();\n        }\n\n        // trigger an error, but nicely, if need be\n        function trigger($msg) {\n            $this->last_error = $msg;\n            if (!$this->suppress_errors) trigger_error($msg, E_USER_WARNING);\n            return false;\n        }\n    }\n\n    // for internal use\n    class EvalMathStack {\n\n        var $stack = array();\n        var $count = 0;\n\n        function push($val) {\n            $this->stack[$this->count] = $val;\n            $this->count++;\n        }\n\n        function pop() {\n            if ($this->count > 0) {\n                $this->count--;\n                return $this->stack[$this->count];\n            }\n            return null;\n        }\n\n        function last($n=1) {\n            return $this->stack[$this->count-$n];\n        }\n    }