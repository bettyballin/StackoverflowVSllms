<?php\n\nclass Resource {\n    protected $name;    // resource ID\n    protected $start;   // start timestamp\n    protected $finish;  // end timestamp\n    // resource available while $start <= current time < $end\n\n    function __construct($n, $sd, $st, $ed, $et) {\n        $this->name = $n;\n        $this->start = strtotime("$sd $st");\n        $this->finish = strtotime("$ed $et");\n    }\n\n    function getID() { return $this->name; }\n    function getStart() { return $this->start; }\n    function getEnd() { return $this->finish; }\n}\n\nclass Timeline {\n    protected $times;       // ordered list of start-times;\n    protected $resources;   // resources available in each timeslot\n    protected $offs;        // iterator offset\n\n    function __construct() {\n        $this->times = array();\n        $this->resources = array();\n        $this->offs = 0;\n    }\n\n    // binary search, insert if not found, return index\n    private function time_ins($time) {\n        // array is empty?\n        if (count($this->times) == 0) {\n            $this->times[0]= $time;\n            $this->resources[0] = array();\n            return 0;\n        }\n\n        $min = $lo = 0;\n        $max = $hi = count($this->times)-1;\n        // binary search\n        while($lo <= $hi) {\n            $mid = ($lo+$hi) >> 1;\n\n            if ($this->times[$mid] == $time) {\n                // already exists - return index\n                return $mid;\n            }\n            elseif ($this->times[$mid] < $time) {\n                // if value exists, is in upper half of array\n                $lo = $mid+1;\n\n                if ($lo > $max || $this->times[$lo] > $time) {\n                    // $lo points to first value greater than $time\n                    // insert new value at $lo\n                    array_splice($this->times, $lo, 0, $time);\n                    $t = isset($this->resources[$lo-1]) ? $this->resources[$lo-1] : array();\n                    array_splice($this->resources, $lo, 0, $t);\n                    return $lo;\n                }\n            }\n            else {\n                // if value exists, is in lower half of array\n                $hi = $mid-1;\n\n                if ($hi < $min || $this->times[$hi] < $time) {\n                    // $hi points to first value less than $time\n                    // insert new value at $hi+1\n                    array_splice($this->times, $hi+1, 0, $time);\n                    $t = isset($this->resources[$hi+1]) ? $this->resources[$hi+1] : array();\n                    array_splice($this->resources, $hi+1, 0, $t);\n                    return $hi+1;\n                }\n            }\n        }\n    }\n\n    function Add( $start, $end, $id ) {\n        $s = $this->time_ins($start);\n        $e = $this->time_ins($end);\n\n        for($i = $s; $i < $e; ++$i)\n            $this->resources[$i][]= $id;\n    }\n\n    function reset()    { $offs = 0; }\n    function isValid()  { return ($this->offs+1 < count($this->times)); }   // omit last time (is end-time only)\n    function next()     { $this->offs++; }\n    function resCount() { return count( $this->resources[ $this->offs ] ); }\n    function getStart() { return $this->times[$this->offs]; }\n    function getEnd()   { return $this->times[$this->offs + 1]; }\n    function getRes()   { return $this->resources[$this->offs]; }\n}\n\n\n$res = array();\n$res[]= new Resource('10', '2008-05-14', '08:00', '2008-05-14', '08:10');\n$res[]= new Resource('10', '2008-05-14', '08:10', '2008-05-14', '08:20');\n$res[]= new Resource('10', '2008-05-14', '08:20', '2008-05-14', '08:30');\n$res[]= new Resource('13', '2008-05-14', '08:00', '2008-05-14', '08:10');\n$res[]= new Resource('13', '2008-05-14', '08:10', '2008-05-14', '08:20');\n$res[]= new Resource('13', '2008-05-14', '08:30', '2008-05-14', '08:40');\n\n$tl = new Timeline();\nforeach($res as $R)\n    $tl->Add( $R->getStart(), $R->getEnd(), $R->getID() );\n\n$needed = 2;\n$_pre = "\n<p>";\n$_post = "</p>";\nfor( $tl->reset(); $tl->isValid(); $tl->next() ) {\n    $cnt = $tl->resCount();\n\n    if ($cnt >= $needed) {\n        $st = date("Y-m-d H:i", $tl->getStart());\n        $fn = date("Y-m-d H:i", $tl->getEnd());\n        $res = join(', ', $tl->getRes());\n\n        echo ($cnt == $needed\n            ? "{$_pre}Available from $st to $fn using resources ($res){$_post}"\n            : "{$_pre}Available from $st to $fn using any $needed of resources ($res){$_post}"\n        );\n    }\n}\n\n?>