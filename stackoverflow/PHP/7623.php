class LogWatch {\n    function __construct($class)    {\n        $this->obj  =   $class;\n    }\n\n    function __call($method, $args) {\n        if (in_array($method, get_class_methods($this->obj) ) ) {\n            Logger::logEntry();\n            Logger::info('Parameter '.implode(', ', $args) );\n\n            call_user_func_array(array($this->obj, $method), $args);\n\n            Logger::logExit();\n\n        } else {\n            throw new BadMethodCallException();\n        }\n    }\n}\n\n$test = new LogWatch(new TestClass() );\n$test->tester();\n\n// you can use instances of `LogWatch()` just like your watched class\n// including passing appropriate params:\n$test->tester($param1, $param2);