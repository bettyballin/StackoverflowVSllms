$tryme = new Extended_DateTime('2007-8-26');\n$newer = new Extended_DateTime('2008-9-1');\n\nprint 'Weekdays From '.$tryme->format('Y-m-d').' To '.$newer->format('Y-m-d').': '.$tryme -> find_WeekdaysFromThisTo($newer) ."\n";\n/*  Output:  Weekdays From 2007-08-26 To 2008-09-01: 265  */\nprint 'All Days From '.$tryme->format('Y-m-d').' To '.$newer->format('Y-m-d').': '.$tryme -> find_AllDaysFromThisTo($newer) ."\n";\n/*  Output:  All Days From 2007-08-26 To 2008-09-01: 371   */\n$timefrom = $tryme->find_TimeFromThisTo($newer);\nprint 'Between '.$tryme->format('Y-m-d').' and '.$newer->format('Y-m-d').' there are '.\n      $timefrom['years'].' years, '.$timefrom['months'].' months, and '.$timefrom['days'].\n      ' days.'."\n";\n/*  Output: Between 2007-08-26 and 2008-09-01 there are 1 years, 0 months, and 5 days. */\n\nclass Extended_DateTime extends DateTime {\n\n    public function find_TimeFromThisTo($newer) {\n        $timefrom = array('years'=>0,'months'=>0,'days'=>0);\n\n        // Clone because we're using modify(), which will destroy the object that was passed in by reference\n        $testnewer = clone $newer;\n\n        $timefrom['years'] = $this->find_YearsFromThisTo($testnewer);\n        $mod = '-'.$timefrom['years'].' years';\n        $testnewer -> modify($mod);\n\n        $timefrom['months'] = $this->find_MonthsFromThisTo($testnewer);\n        $mod = '-'.$timefrom['months'].' months';\n        $testnewer -> modify($mod);\n\n        $timefrom['days'] = $this->find_AllDaysFromThisTo($testnewer);\n        return $timefrom;\n    } // end function find_TimeFromThisTo\n\n\n    public function find_YearsFromThisTo($newer) {\n        /*\n        If the passed is:\n        not an object, not of class DateTime or one of its children,\n        or not larger (after) $this\n        return false\n        */\n        if (!is_object($newer) || !($newer instanceof DateTime) || $newer->format('U') < $this->format('U'))\n            return FALSE;\n        $count = 0;\n\n        // Clone because we're using modify(), which will destroy the object that was passed in by reference\n        $testnewer = clone $newer;\n\n        $testnewer -> modify ('-1 year');\n        while ( $this->format('U') < $testnewer->format('U')) {\n            $count ++;\n            $testnewer -> modify ('-1 year');\n        }\n        return $count;\n    } // end function find_YearsFromThisTo\n\n\n    public function find_MonthsFromThisTo($newer) {\n        /*\n        If the passed is:\n        not an object, not of class DateTime or one of its children,\n        or not larger (after) $this\n        return false\n        */\n        if (!is_object($newer) || !($newer instanceof DateTime) || $newer->format('U') < $this->format('U'))\n            return FALSE;\n\n        $count = 0;\n        // Clone because we're using modify(), which will destroy the object that was passed in by reference\n        $testnewer = clone $newer;\n        $testnewer -> modify ('-1 month');\n\n        while ( $this->format('U') < $testnewer->format('U')) {\n            $count ++;\n            $testnewer -> modify ('-1 month');\n        }\n        return $count;\n    } // end function find_MonthsFromThisTo\n\n\n    public function find_AllDaysFromThisTo($newer) {\n        /*\n        If the passed is:\n        not an object, not of class DateTime or one of its children,\n        or not larger (after) $this\n        return false\n        */\n        if (!is_object($newer) || !($newer instanceof DateTime) || $newer->format('U') < $this->format('U'))\n            return FALSE;\n\n        $count = 0;\n        // Clone because we're using modify(), which will destroy the object that was passed in by reference\n        $testnewer = clone $newer;\n        $testnewer -> modify ('-1 day');\n\n        while ( $this->format('U') < $testnewer->format('U')) {\n            $count ++;\n            $testnewer -> modify ('-1 day');\n        }\n        return $count;\n    } // end function find_AllDaysFromThisTo\n\n\n    public function find_WeekdaysFromThisTo($newer) {\n        /*\n        If the passed is:\n        not an object, not of class DateTime or one of its children,\n        or not larger (after) $this\n        return false\n        */\n        if (!is_object($newer) || !($newer instanceof DateTime) || $newer->format('U') < $this->format('U'))\n            return FALSE;\n\n        $count = 0;\n\n        // Clone because we're using modify(), which will destroy the object that was passed in by reference\n        $testnewer = clone $newer;\n        $testnewer -> modify ('-1 day');\n\n        while ( $this->format('U') < $testnewer->format('U')) {\n            // If the calculated day is not Sunday or Saturday, count this day\n            if ($testnewer->format('w') != '0' && $testnewer->format('w') != '6')\n                $count ++;\n            $testnewer -> modify ('-1 day');\n        }\n        return $count;\n    } // end function find_WeekdaysFromThisTo\n\n    public function set_Day($newday) {\n        if (is_int($newday) && $newday > 0 && $newday < 32 && checkdate($this->format('m'),$newday,$this->format('Y')))\n            $this->setDate($this->format('Y'),$this->format('m'),$newday);\n    } // end function set_Day\n\n\n    public function set_Month($newmonth) {\n        if (is_int($newmonth) && $newmonth > 0 && $newmonth < 13)\n            $this->setDate($this->format('Y'),$newmonth,$this->format('d'));\n    } // end function set_Month\n\n\n    public function set_Year($newyear) {\n        if (is_int($newyear) && $newyear > 0)\n            $this->setDate($newyear,$this->format('m'),$this->format('d'));\n    } // end function set_Year\n} // end class Extended_DateTime