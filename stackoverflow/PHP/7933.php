<?\n/**\n * Pork Formvalidator. validates fields by regexes and can sanatize them. Uses PHP filter_var built-in functions and extra regexes \n * @package pork\n */\n\n\n/**\n * Pork.FormValidator\n * Validates arrays or properties by setting up simple arrays\n * \n * @package pork\n * @author SchizoDuckie\n * @copyright SchizoDuckie 2009\n * @version 1.0\n * @access public\n */\nclass FormValidator\n{\n    public static $regexes = Array(\n            'date' => "^[0-9]{4}[-/][0-9]{1,2}[-/][0-9]{1,2}\$",\n            'amount' => "^[-]?[0-9]+\$",\n            'number' => "^[-]?[0-9,]+\$",\n            'alfanum' => "^[0-9a-zA-Z ,.-_\\s\?\!]+\$",\n            'not_empty' => "[a-z0-9A-Z]+",\n            'words' => "^[A-Za-z]+[A-Za-z \\s]*\$",\n            'phone' => "^[0-9]{10,11}\$",\n            'zipcode' => "^[1-9][0-9]{3}[a-zA-Z]{2}\$",\n            'plate' => "^([0-9a-zA-Z]{2}[-]){2}[0-9a-zA-Z]{2}\$",\n            'price' => "^[0-9.,]*(([.,][-])|([.,][0-9]{2}))?\$",\n            '2digitopt' => "^\d+(\,\d{2})?\$",\n            '2digitforce' => "^\d+\,\d\d\$",\n            'anything' => "^[\d\D]{1,}\$"\n    );\n    private $validations, $sanatations, $mandatories, $errors, $corrects, $fields;\n\n\n    public function __construct($validations=array(), $mandatories = array(), $sanatations = array())\n    {\n        $this->validations = $validations;\n        $this->sanatations = $sanatations;\n        $this->mandatories = $mandatories;\n        $this->errors = array();\n        $this->corrects = array();\n    }\n\n    /**\n     * Validates an array of items (if needed) and returns true or false\n     *\n     */\n    public function validate($items)\n    {\n        $this->fields = $items;\n        $havefailures = false;\n        foreach($items as $key=>$val)\n        {\n            if((strlen($val) == 0 || array_search($key, $this->validations) === false) && array_search($key, $this->mandatories) === false) \n            {\n                $this->corrects[] = $key;\n                continue;\n            }\n            $result = self::validateItem($val, $this->validations[$key]);\n            if($result === false) {\n                $havefailures = true;\n                $this->addError($key, $this->validations[$key]);\n            }\n            else\n            {\n                $this->corrects[] = $key;\n            }\n        }\n\n        return(!$havefailures);\n    }\n\n    /**\n     *\n     *  Adds unvalidated class to thos elements that are not validated. Removes them from classes that are.\n     */\n    public function getScript() {\n        if(!empty($this->errors))\n        {\n            $errors = array();\n            foreach($this->errors as $key=>$val) { $errors[] = "'INPUT[name={$key}]'"; }\n\n            $output = '$$('.implode(',', $errors).').addClass("unvalidated");'; \n            $output .= "alert('there are errors in the form');"; // or your nice validation here\n        }\n        if(!empty($this->corrects))\n        {\n            $corrects = array();\n            foreach($this->corrects as $key) { $corrects[] = "'INPUT[name={$key}]'"; }\n            $output .= '$$('.implode(',', $corrects).').removeClass("unvalidated");';   \n        }\n        $output = "<script type='text/javascript'>{$output} </script>";\n        return($output);\n    }\n\n\n    /**\n     *\n     * Sanatizes an array of items according to the $this->sanatations\n     * sanatations will be standard of type string, but can also be specified.\n     * For ease of use, this syntax is accepted:\n     * $sanatations = array('fieldname', 'otherfieldname'=>'float');\n     */\n    public function sanatize($items)\n    {\n        foreach($items as $key=>$val)\n        {\n            if(array_search($key, $this->sanatations) === false && !array_key_exists($key, $this->sanatations)) continue;\n            $items[$key] = self::sanatizeItem($val, $this->validations[$key]);\n        }\n        return($items);\n    }\n\n\n    /**\n     *\n     * Adds an error to the errors array.\n     */ \n    private function addError($field, $type='string')\n    {\n        $this->errors[$field] = $type;\n    }\n\n    /**\n     *\n     * Sanatize a single var according to $type.\n     * Allows for static calling to allow simple sanatization\n     */\n    public static function sanatizeItem($var, $type)\n    {\n        $flags = NULL;\n        switch($type)\n        {\n            case 'url':\n                $filter = FILTER_SANITIZE_URL;\n            break;\n            case 'int':\n                $filter = FILTER_SANITIZE_NUMBER_INT;\n            break;\n            case 'float':\n                $filter = FILTER_SANITIZE_NUMBER_FLOAT;\n                $flags = FILTER_FLAG_ALLOW_FRACTION | FILTER_FLAG_ALLOW_THOUSAND;\n            break;\n            case 'email':\n                $var = substr($var, 0, 254);\n                $filter = FILTER_SANITIZE_EMAIL;\n            break;\n            case 'string':\n            default:\n                $filter = FILTER_SANITIZE_STRING;\n                $flags = FILTER_FLAG_NO_ENCODE_QUOTES;\n            break;\n\n        }\n        $output = filter_var($var, $filter, $flags);        \n        return($output);\n    }\n\n    /** \n     *\n     * Validates a single var according to $type.\n     * Allows for static calling to allow simple validation.\n     *\n     */\n    public static function validateItem($var, $type)\n    {\n        if(array_key_exists($type, self::$regexes))\n        {\n            $returnval =  filter_var($var, FILTER_VALIDATE_REGEXP, array("options"=> array("regexp"=>'!'.self::$regexes[$type].'!i'))) !== false;\n            return($returnval);\n        }\n        $filter = false;\n        switch($type)\n        {\n            case 'email':\n                $var = substr($var, 0, 254);\n                $filter = FILTER_VALIDATE_EMAIL;    \n            break;\n            case 'int':\n                $filter = FILTER_VALIDATE_INT;\n            break;\n            case 'boolean':\n                $filter = FILTER_VALIDATE_BOOLEAN;\n            break;\n            case 'ip':\n                $filter = FILTER_VALIDATE_IP;\n            break;\n            case 'url':\n                $filter = FILTER_VALIDATE_URL;\n            break;\n        }\n        return ($filter === false) ? false : filter_var($var, $filter) !== false ? true : false;\n    }       \n\n\n\n}