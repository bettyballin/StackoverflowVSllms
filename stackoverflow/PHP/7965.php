<?php\n\nclass Parser \n{\n   /* Enclosing the parser in a class is not mandatory but it' clean */\n\n    function Parser()\n    {\n\n        /* data holder */\n        $this->date = '';\n        $this->parties = array();\n        $this->victim = array();\n        $this->items = array("Destroyed" => array(),\n                                            "Dropped" => array());\n\n        /* Map you states on actions. Sub states can be necessary (and sub parsers too :-) */                   \n        $this->states = array('Victim' => 'victim_parsing',\n                                             'Involved' => 'parties_parsing' ,\n                                             'items:' => "item_parsing");\n\n\n        $this->state = 'start';                      \n        $this->item_parsing_state = 'Destroyed';     \n        $this->partie_parsing_state = '';           \n        $this->parse_tools = array('start' => 'start_parsing',\n                                           'parties_parsing' =>'parties_parsing',\n                                           'item_parsing' => 'item_parsing',\n                                           'victim_parsing' => 'victim_parsing');\n\n\n    }\n\n    /* the magic job is done here */\n\n    function checkLine($line) \n    {\n        foreach ($this->states as $keyword => $state) \n            if (strpos($line, $keyword) !== False)\n                    $this->state = $this->states[$keyword];\n\n        return trim($line);\n    }\n\n    function parse($file)\n    {\n        $this->file = new SplFileObject($file);\n        foreach ($this->file as $line) \n            if ($line = $this->checkLine($line))\n                 $this->{$this->parse_tools[$this->state]}($line);\n    }\n\n\n    /* then here you can define as much as parsing rules as you want */\n\n    function victim_parsing($line) \n    {\n        $victim_caract = explode(': ', $line);\n        $this->victim[$victim_caract[0]] = $victim_caract[1];\n    }\n\n    function start_parsing($line)\n    {\n        $this->date = $line;\n    }\n\n    function item_parsing($line) \n    {\n        if (strpos($line, 'items:') !== False)\n        {\n            $item_state = explode(' ', $line);\n            $this->item_parsing_state = $item_state[0];\n        }   \n          else \n         {\n               $item_caract = explode(', Qty: ', $line);\n               $this->items[$this->item_parsing_state][$item_caract[0]] = array();\n               $item_infos =  explode(' ', $item_caract[1]);\n               $this->items[$this->item_parsing_state][$item_caract[0]] ['qty'] = empty($item_infos[0]) ? 1 : $item_infos[0];\n               $this->items[$this->item_parsing_state][$item_caract[0]] ['cargo'] = !empty( $item_infos[1]) ? "True":  "False";\n               if  (empty( $this->items[$this->item_parsing_state][$item_caract[0]] ['qty'] ))\n                print $line;\n         }\n    }\n\n    function parties_parsing($line) \n    {        \n\n        $partie_caract = explode(': ', $line);\n\n        if ($partie_caract[0] == "Name")\n        {\n            $this->partie_parsing_state = $partie_caract[1];\n            $this->parties[ $this->partie_parsing_state ] = array();\n        }\n        else\n            $this->parties[ $this->partie_parsing_state ][$partie_caract[0]] = $partie_caract[1];\n\n    }\n\n}\n\n/* a little test */\n\n$parser = new Parser();\n$parser->parse('test.txt');\n\necho "======== Fight report - ".$parser->date." ==========\n\n";\necho "Victim :\n\n";\nprint_r($parser->victim);\necho "Parties :\n\n";\nprint_r($parser->parties);\necho "Items: \n\n";\nprint_r($parser->items);\n\n?>