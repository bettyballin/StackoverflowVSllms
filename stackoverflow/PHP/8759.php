/**\n*   Prepares a query to be run, storing the data in $this->preparedTokens\n*   Use the following characters to indicate how the data is to be put into SQL statement\n*   ? -> escaped and quoted (with single quotes) before inserting\n*   ^ -> inserted as is\n*   & -> implodes the array escpaping each value\n*   @ -> implodes the array (no escaping)\n*\n*   @param      string      $sql        The SQL statement to prepare\n*\n*   @return     int         The key of prepare sql query to be passed to $this->Execute()\n*/\npublic function Prepare($sql) {\n    $tokens = preg_split('/((?<!\\\)[@&?^])/', $sql, -1, PREG_SPLIT_DELIM_CAPTURE);\n\n    // loop through removing any escaped values\n    foreach ($tokens as $key => $val) {\n        switch ($val) {\n            case '?' :\n            case '&' :\n            case '@' :\n                break;\n            default :\n                $tokens[$key] = preg_replace('/\\\([@&?^])/', "\\1", $val);\n                break;\n        } // switch\n    } // foreach\n\n    $this->preparedTokens[] = $tokens;\n    end($this->preparedTokens);\n    return key($this->preparedTokens);\n} // function Prepare\n\n/**\n*   Creates the SQL placing the data in the appropriate places and then runs the sql\n*\n*   @param      int         $preparedKey        The key of the prepared sql\n*   @param      array       $data               The array of data to put into the query (the count of this array must match that of the prepared query)\n*\n*   @return     object      false if the $preparedKey does not exist in $this->preparedTokens\n*                           false if count of needed values in sql statement does not equal the number of keys in the data array\n*                           otherwise, the result of $this->Query()\n*/\npublic function Execute($preparedKey, $data) {\n    if (isset($this->preparedTokens[$preparedKey])) {\n        $tokens = $this->preparedTokens[$preparedKey];\n        $query = '';\n        $dataKey = 0;\n        $count = 0;\n\n        // count the number of tokens we have\n        $validTokens = array('?', '^', '&', '@');\n        foreach ($tokens as $val) {\n            if (in_array($val, $validTokens)) {\n                ++$count;\n            } // if\n        } // foreach\n\n        // check to ensure we have the same number of tokens as data keys\n        if ($count != count($data)) {\n            trigger_error('Query Error: The number of values received in execute does not equal the number of values needed for the query', E_USER_ERROR);\n            return false;\n        } // if\n\n        // loop through the tokens creating the sql statement\n        foreach ($tokens as $val) {\n            switch ($val) {\n                case '?' :\n                    $query .= "'" . $this->EscapeString($data[$dataKey++]) . "'";\n                    break;\n                case '^' :\n                    $query .= $data[$dataKey++];\n                    break;\n                case '&' :\n                    $query .= $this->ImplodeEscape($data[$dataKey++]);\n                    break;\n                case '@' :\n                    $query .= implode(',', $data[$dataKey++]);\n                    break;\n                default :\n                    $query .= $val;\n                    break;\n            } // switch\n        } // foreach\n\n        return $this->Query($query);\n\n    } else {\n        return false;\n    } // if\n} // function Execute\n\n/**\n*   Runs $this->Prepare() then $this->Execute() for the sql and the data\n*   Use the following characters to indicate how the data is to be put into SQL statement\n*   ? -> escaped and quoted (with single quotes) before inserting\n*   ^ -> inserted as is\n*   & -> implodes the array escpaping each value\n*   @ -> implodes the array (no escaping)\n*\n*   @param      string      $sql        The SQL statement to prepare\n*   @param      array       $data       The array of data to put into the query (the count of this array must match that of the prepared query)\n*\n*   @return     object      returns value from $this->Query() if Execute was successful\n*                           otherwise it'll be false\n*/\npublic function PrepareExecute($sql, $data) {\n    return $this->Execute($this->Prepare($sql), $data);\n} // function PrepareExecute