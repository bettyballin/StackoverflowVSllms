$array = (\n    'key1' => 'value1',\n    'key2' => 'value2',\n    'key3' => 'value3'\n);\n\n// ext/DOM can also be used to create XML representation\n$xml = new XMLWriter();\n$xml->openMemory();\n$xml->startDocument('1.0', 'UTF-8');\n$xml->startElement('array');\n// simple one-dimensional array-traversal - depending on your array structure this can be much more complicated (e.g. recursion)\nforeach ($array as $key => $value) {\n        $xml->writeElement($key, $value);\n}\n$xml->endElement();\n\n/*\n * $xml will look like\n * <array>\n *      <key1>value1</key1>\n *      <key2>value2</key2>\n *      <key3>value3</key3>\n * </array>\n */\n\n// convert XMLWriter document into a DOM representation (can be skipped if XML is created with ext/DOM)\n$doc = DOMDocument::loadXML($xml->outputMemory());\n\n// Load XSL stylesheet\n$xsl = DOMDocument::load('stylesheet.xsl');\n\n// Fire-up XSLT processor\n$proc = new XSLTProcessor();\n$proc->importStyleSheet($xsl);\n\n// Output transformation\necho $proc->transformToXML($xml);