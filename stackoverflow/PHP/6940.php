<?php\n\n    // strip non-hex characters\n    function hexstring($str) {\n        $hex = array(\n            '0'=>'0',   '1'=>'1',   '2'=>'2',   '3'=>'3',   '4'=>'4',\n            '5'=>'5',   '6'=>'6',   '7'=>'7',   '8'=>'8',   '9'=>'9',\n            'a'=>'a',   'b'=>'b',   'c'=>'c',   'd'=>'d',   'e'=>'e',   'f'=>'f',\n            'A'=>'a',   'B'=>'b',   'C'=>'c',   'D'=>'d',   'E'=>'e',   'F'=>'f'\n        );\n\n        $t = '';\n        $len = strlen($str);\n        for ($i=0; $i<$len; ++$i) {\n            $ch = $str[$i];\n            if (isset($hex[$ch]))\n                $t .= $hex[$ch];\n        }\n\n        return $t;\n    }\n\n    // swap little-endian to big-endian\n    function flip_endian($str) {\n        // make sure #digits is even\n        if ( strlen($str) & 1 )\n            $str = '0' . $str;\n\n        $t = '';\n        for ($i = strlen($str)-2; $i >= 0; $i-=2)\n            $t .= substr($str, $i, 2);\n\n        return $t;\n    }\n\n    // convert hex string to BC-int\n    function hex_to_bcint($str) {\n        $hex = array(\n            '0'=>'0',   '1'=>'1',   '2'=>'2',   '3'=>'3',   '4'=>'4',\n            '5'=>'5',   '6'=>'6',   '7'=>'7',   '8'=>'8',   '9'=>'9',\n            'a'=>'10',  'b'=>'11',  'c'=>'12',  'd'=>'13',  'e'=>'14',  'f'=>'15',\n            'A'=>'10',  'B'=>'11',  'C'=>'12',  'D'=>'13',  'E'=>'14',  'F'=>'15'\n        );\n\n        $bci = '0';\n        $len = strlen($str);\n        for ($i=0; $i<$len; ++$i) {\n            $bci = bcmul($bci, '16');\n\n            $ch = $str[$i];\n            if (isset($hex[$ch]))\n                $bci = bcadd($bci, $hex[$ch]);\n        }\n\n        return $bci;\n    }\n\n    // WARNING! range clipping\n    //   Windows date time has range from 29000 BC to 29000 AD\n    //   Unix time only has range from 1901 AD to 2038 AD\n    // WARNING! loss of accuracy\n    //   Windows date time has accuracy to 0.0000001s\n    //   Unix time only has accuracy to 1.0s\n    function win64_to_unix($bci) {\n        // Unix epoch as a Windows file date-time value\n        $magicnum = '116444735995904000';\n\n        $t = bcsub($bci, $magicnum);    // Cast to Unix epoch\n        $t = bcdiv($t, '10000000', 0);  // Convert from ticks to seconds\n\n        return $t;\n    }\n\n// get input\n$dtval = isset($_GET["dt"]) ? strval($_GET["dt"]) : "0";\n$dtval = hexstring($dtval);         // strip non-hex chars\n\n// convert to quadword\n$dtval = substr($dtval, 0, 16);     // clip overlength string\n$dtval = str_pad($dtval, 16, '0');  // pad underlength string\n$quad = flip_endian($dtval);\n\n// convert to int\n$win64_datetime = hex_to_bcint($quad);\n\n// convert to Unix timestamp value\n$unix_datetime = win64_to_unix($win64_datetime);\n\n?><html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />\n<title>Windows datetime test code</title>\n</head>\n\n    <form method="get">\n        <label>Datetime value: <input name="dt" type="text" value="<?php echo $dtval; ?>"/></label>\n        <input type="submit" />\n    </form>\n    <hr />\n    Result:\n        Quad: <?php echo $quad; ?><br />\n        Int: <?php echo $win64_datetime; ?><br />\n        Unix timestamp: <?php echo $unix_datetime; ?><br />\n        Date: <?php echo date("D, d F Y H:i:s e", $unix_datetime); ?><br />\n<body>\n</body>\n</html>