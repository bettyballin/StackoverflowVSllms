<?\ndefine('WANT_PROCESSORS', 5);\ndefine('PROCESSOR_EXECUTABLE', '/path/to/your/processor');\nset_time_limit(0);\n$cycles = 0;\n$run = true;\n$reload = false;\ndeclare(ticks = 30);\n\nfunction signal_handler($signal) {\n    switch($signal) {\n    case SIGTERM :\n        global $run;\n        $run = false;\n        break;\n    case SIGHUP  :\n        global $reload;\n        $reload = true;\n        break;\n    }   \n}\n\npcntl_signal(SIGTERM, 'signal_handler');\npcntl_signal(SIGHUP, 'signal_handler');\n\nfunction spawn_processor() {\n    $pid = pcntl_fork();\n    if($pid) {\n        global $processors;\n        $processors[] = $pid;\n    } else {\n        if(posix_setsid() == -1)\n            die("Forked process could not detach from terminal\n");\n        fclose(stdin);\n        fclose(stdout);\n        fclose(stderr);\n        pcntl_exec(PROCESSOR_EXECUTABLE);\n        die('Failed to fork ' . PROCESSOR_EXECUTABLE . "\n");\n    }\n}\n\nfunction spawn_processors() {\n    global $processors;\n    if($processors)\n        kill_processors();\n    $processors = array();\n    for($ix = 0; $ix < WANT_PROCESSORS; $ix++)\n        spawn_processor();\n}\n\nfunction kill_processors() {\n    global $processors;\n    foreach($processors as $processor)\n        posix_kill($processor, SIGTERM);\n    foreach($processors as $processor)\n        pcntl_waitpid($processor);\n    unset($processors);\n}\n\nfunction check_processors() {\n    global $processors;\n    $valid = array();\n    foreach($processors as $processor) {\n        pcntl_waitpid($processor, $status, WNOHANG);\n        if(posix_getsid($processor))\n            $valid[] = $processor;\n    }\n    $processors = $valid;\n    if(count($processors) > WANT_PROCESSORS) {\n        for($ix = count($processors) - 1; $ix >= WANT_PROCESSORS; $ix--)\n            posix_kill($processors[$ix], SIGTERM);\n        for($ix = count($processors) - 1; $ix >= WANT_PROCESSORS; $ix--)\n            pcntl_waitpid($processors[$ix]);\n    } elseif(count($processors) < WANT_PROCESSORS) {\n        for($ix = count($processors); $ix < WANT_PROCESSORS; $ix++)\n            spawn_processor();\n    }\n}\n\nspawn_processors();\n\nwhile($run) {\n    $cycles++;\n    if($reload) {\n        $reload = false;\n        kill_processors();\n        spawn_processors();\n    } else {\n        check_processors();\n    }\n    usleep(150000);\n}\nkill_processors();\npcntl_wait();\n?>