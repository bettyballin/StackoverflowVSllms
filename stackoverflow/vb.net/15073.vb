Structure LimitedInt\n  Implements IComparable(Of LimitedInt)\n  Implements IEquatable(Of LimitedInt)\n\n  Private m_Value As Integer 'treat the default, 0 as being really 1'\n\n  Public ReadOnly Property Value() As Integer\n   Get\n     Return If(m_Value = 0, 1, m_Value)\n   End Get\n  End Property\n\n  Public Sub New(ByVal value As Integer)\n   If value < 1 Or value > 10 Then \n      Throw New ArgumentOutOfRangeException("value")\n   End If\n   m_Value = value\n  End Sub\n\n  Public Function CompareTo(ByVal other As LimitedInt) As Integer _\n      Implements System.IComparable(Of LimitedInt).CompareTo\n   Return Me.Value - other.Value\n  End Function\n\n  Public Overloads Function Equals(ByVal other As LimitedInt) As Boolean _\n     Implements System.IEquatable(Of LimitedInt).Equals\n   Return Me.Value = other.Value\n  End Function\n\n  Public Overrides Function GetHashCode() As Integer\n   Return Value.GetHashCode\n  End Function\n\n  Public Overrides Function Equals(ByVal obj As Object) As Boolean\n   If TypeOf obj Is LimitedInt Then Return CType(obj, LimitedInt) = Me\n  End Function\n\n  Public Shared Operator =(ByVal left As LimitedInt, _\n     ByVal right As LimitedInt) As Boolean\n   Return left.Equals(right)\n  End Operator\n\n  Public Shared Operator <>(ByVal left As LimitedInt, _\n     ByVal right As LimitedInt) As Boolean\n   Return Not (left = right)\n  End Operator\n\n  Public Shared Operator +(ByVal left As LimitedInt, _\n     ByVal right As LimitedInt) As LimitedInt\n   Dim temp As Integer = left.Value + right.Value\n   Select Case temp\n     Case 1 To 10 : Return New LimitedInt(temp)\n     Case Else : Throw New OverflowException\n   End Select\n  End Operator\n\n  Public Shared Operator -(ByVal left As LimitedInt, _\n     ByVal right As LimitedInt) As LimitedInt\n   Dim temp As Integer = left.Value - right.Value\n   Select Case temp\n     Case 1 To 10 : Return New LimitedInt(temp)\n     Case Else : Throw New OverflowException\n   End Select\n  End Operator\n\n  Public Shared Operator *(ByVal left As LimitedInt, _\n     ByVal right As LimitedInt) As LimitedInt\n   Dim temp As Integer = left.Value * right.Value\n   Select Case temp\n     Case 1 To 10 : Return New LimitedInt(temp)\n     Case Else : Throw New OverflowException\n   End Select\n  End Operator\n\n  Public Shared Operator /(ByVal left As LimitedInt, _\n     ByVal right As LimitedInt) As Double\n   Return left.Value / right.Value\n  End Operator\n\n  Public Shared Operator \(ByVal left As LimitedInt, _\n     ByVal right As LimitedInt) As LimitedInt\n   Dim temp As Integer = left.Value \ right.Value\n   Select Case temp\n     Case 1 To 10 : Return New LimitedInt(temp)\n     Case Else : Throw New OverflowException\n   End Select\n  End Operator\n\n  Public Shared Operator Mod(ByVal left As LimitedInt, _\n     ByVal right As LimitedInt) As LimitedInt\n   Dim temp As Integer = left.Value Mod right.Value\n   Select Case temp\n     Case 1 To 10 : Return New LimitedInt(temp)\n     Case Else : Throw New OverflowException\n   End Select\n  End Operator\n\n  Public Shared Operator And(ByVal left As LimitedInt, _\n     ByVal right As LimitedInt) As LimitedInt\n   Dim temp As Integer = left.Value And right.Value\n   Select Case temp\n     Case 1 To 10 : Return New LimitedInt(temp)\n     Case Else : Throw New OverflowException\n   End Select\n  End Operator\n\n  Public Shared Operator Or(ByVal left As LimitedInt, _\n     ByVal right As LimitedInt) As LimitedInt\n   Dim temp As Integer = left.Value Or right.Value\n   Select Case temp\n     Case 1 To 10 : Return New LimitedInt(temp)\n     Case Else : Throw New OverflowException\n   End Select\n  End Operator\n\n  Public Shared Operator Xor(ByVal left As LimitedInt, _\n     ByVal right As LimitedInt) As LimitedInt\n   Dim temp As Integer = left.Value Xor right.Value\n   Select Case temp\n     Case 1 To 10 : Return New LimitedInt(temp)\n     Case Else : Throw New OverflowException\n   End Select\n  End Operator\n\n  Public Shared Operator ^(ByVal left As LimitedInt, _\n     ByVal right As LimitedInt) As Double\n   Return left.Value ^ right.Value\n  End Operator\n\n  Public Shared Operator <(ByVal left As LimitedInt, _\n     ByVal right As LimitedInt) As Boolean\n   Return left.Value < right.Value\n  End Operator\n\n  Public Shared Operator >(ByVal left As LimitedInt, _\n     ByVal right As LimitedInt) As Boolean\n   Return left.Value > right.Value\n  End Operator\n\n  Public Shared Operator <=(ByVal left As LimitedInt, _\n     ByVal right As LimitedInt) As Boolean\n   Return left.Value <= right.Value\n  End Operator\n\n  Public Shared Operator >=(ByVal left As LimitedInt, _\n     ByVal right As LimitedInt) As Boolean\n   Return left.Value >= right.Value\n  End Operator\n\n  Public Shared Widening Operator CType(ByVal left As LimitedInt) As Integer\n   Return left.Value\n  End Operator\n\n  Public Shared Narrowing Operator CType(ByVal left As Integer) As LimitedInt\n   Return New LimitedInt(left)\n  End Operator\n\n\nEnd Structure