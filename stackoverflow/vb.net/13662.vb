Option Explicit On\nOption Strict On\n\nImports System.Drawing\nImports System.Drawing.Imaging\nImports System.Drawing.Bitmap\nImports System.Drawing.Graphics\nImports System.IO\n\nPartial Public Class Barcode\n    Inherits System.Web.UI.Page\n    'Sebastiaan Janssen - 20081001 - TINT-30584\n    'Most of the code is based on this example: \n    'http://www.atalasoft.com/cs/blogs/loufranco/archive/2008/04/25/writing-code-39-barcodes-with-javascript.aspx-generation.aspx\n    'With a bit of this thrown in:\n    'http://www.atalasoft.com/cs/blogs/loufranco/archive/2008/03/24/code-39-barcode\n\n    Private _encoding As Hashtable = New Hashtable\n    Private Const _wideBarWidth As Short = 8\n    Private Const _narrowBarWidth As Short = 2\n    Private Const _barHeight As Short = 100\n\n    Sub BarcodeCode39()\n        _encoding.Add("*", "bWbwBwBwb")\n        _encoding.Add("-", "bWbwbwBwB")\n        _encoding.Add("$", "bWbWbWbwb")\n        _encoding.Add("%", "bwbWbWbWb")\n        _encoding.Add(" ", "bWBwbwBwb")\n        _encoding.Add(".", "BWbwbwBwb")\n        _encoding.Add("/", "bWbWbwbWb")\n        _encoding.Add("+", "bWbwbWbWb")\n        _encoding.Add("0", "bwbWBwBwb")\n        _encoding.Add("1", "BwbWbwbwB")\n        _encoding.Add("2", "bwBWbwbwB")\n        _encoding.Add("3", "BwBWbwbwb")\n        _encoding.Add("4", "bwbWBwbwB")\n        _encoding.Add("5", "BwbWBwbwb")\n        _encoding.Add("6", "bwBWBwbwb")\n        _encoding.Add("7", "bwbWbwBwB")\n        _encoding.Add("8", "BwbWbwBwb")\n        _encoding.Add("9", "bwBWbwBwb")\n        _encoding.Add("A", "BwbwbWbwB")\n        _encoding.Add("B", "bwBwbWbwB")\n        _encoding.Add("C", "BwBwbWbwb")\n        _encoding.Add("D", "bwbwBWbwB")\n        _encoding.Add("E", "BwbwBWbwb")\n        _encoding.Add("F", "bwBwBWbwb")\n        _encoding.Add("G", "bwbwbWBwB")\n        _encoding.Add("H", "BwbwbWBwb")\n        _encoding.Add("I", "bwBwbWBwb")\n        _encoding.Add("J", "bwbwBWBwb")\n        _encoding.Add("K", "BwbwbwbWB")\n        _encoding.Add("L", "bwBwbwbWB")\n        _encoding.Add("M", "BwBwbwbWb")\n        _encoding.Add("N", "bwbwBwbWB")\n        _encoding.Add("O", "BwbwBwbWb")\n        _encoding.Add("P", "bwBwBwbWb")\n        _encoding.Add("Q", "bwbwbwBWB")\n        _encoding.Add("R", "BwbwbwBWb")\n        _encoding.Add("S", "bwBwbwBWb")\n        _encoding.Add("T", "bwbwBwBWb")\n        _encoding.Add("U", "BWbwbwbwB")\n        _encoding.Add("V", "bWBwbwbwB")\n        _encoding.Add("W", "BWBwbwbwb")\n        _encoding.Add("X", "bWbwBwbwB")\n        _encoding.Add("Y", "BWbwBwbwb")\n        _encoding.Add("Z", "bWBwBwbwb")\n    End Sub\n\n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load\n        BarcodeCode39()\n        Dim barcode As String = String.Empty\n        If Not IsNothing(Request("barcode")) AndAlso Not (Request("barcode").Length = 0) Then\n            barcode = Request("barcode")\n            Response.ContentType = "image/png"\n            Response.AddHeader("Content-Disposition", String.Format("attachment; filename=barcode_{0}.png", barcode))\n\n            'TODO: Depending on the length of the string, determine how wide the image will be\n            GenerateBarcodeImage(250, 140, barcode).WriteTo(Response.OutputStream)\n        End If\n    End Sub\n\n    Protected Function getBCSymbolColor(ByVal symbol As String) As System.Drawing.Brush\n        getBCSymbolColor = Brushes.Black\n        If symbol = "W" Or symbol = "w" Then\n            getBCSymbolColor = Brushes.White\n        End If\n    End Function\n\n    Protected Function getBCSymbolWidth(ByVal symbol As String) As Short\n        getBCSymbolWidth = _narrowBarWidth\n        If symbol = "B" Or symbol = "W" Then\n            getBCSymbolWidth = _wideBarWidth\n        End If\n    End Function\n\n    Protected Overridable Function GenerateBarcodeImage(ByVal imageWidth As Short, ByVal imageHeight As Short, ByVal Code As String) As MemoryStream\n        'create a new bitmap\n        Dim b As New Bitmap(imageWidth, imageHeight, Imaging.PixelFormat.Format32bppArgb)\n\n        'create a canvas to paint on\n        Dim canvas As New Rectangle(0, 0, imageWidth, imageHeight)\n\n        'draw a white background\n        Dim g As Graphics = Graphics.FromImage(b)\n        g.FillRectangle(Brushes.White, 0, 0, imageWidth, imageHeight)\n\n        'write the unaltered code at the bottom\n        'TODO: truely center this text\n        Dim textBrush As New SolidBrush(Color.Black)\n        g.DrawString(Code, New Font("Courier New", 12), textBrush, 100, 110)\n\n        'Code has to be surrounded by asterisks to make it a valid Code39 barcode\n        Dim UseCode As String = String.Format("{0}{1}{0}", "*", Code)\n\n        'Start drawing at 10, 10\n        Dim XPosition As Short = 10\n        Dim YPosition As Short = 10\n\n        Dim invalidCharacter As Boolean = False\n        Dim CurrentSymbol As String = String.Empty\n\n        For j As Short = 0 To CShort(UseCode.Length - 1)\n            CurrentSymbol = UseCode.Substring(j, 1)\n            'check if symbol can be used\n            If Not IsNothing(_encoding(CurrentSymbol)) Then\n                Dim EncodedSymbol As String = _encoding(CurrentSymbol).ToString\n\n                For i As Short = 0 To CShort(EncodedSymbol.Length - 1)\n                    Dim CurrentCode As String = EncodedSymbol.Substring(i, 1)\n                    g.FillRectangle(getBCSymbolColor(CurrentCode), XPosition, YPosition, getBCSymbolWidth(CurrentCode), _barHeight)\n                    XPosition = XPosition + getBCSymbolWidth(CurrentCode)\n                Next\n\n                'After each written full symbol we need a whitespace (narrow width)\n                g.FillRectangle(getBCSymbolColor("w"), XPosition, YPosition, getBCSymbolWidth("w"), _barHeight)\n                XPosition = XPosition + getBCSymbolWidth("w")\n            Else\n                invalidCharacter = True\n            End If\n        Next\n\n        'errorhandling when an invalidcharacter is found\n        If invalidCharacter Then\n            g.FillRectangle(Brushes.White, 0, 0, imageWidth, imageHeight)\n            g.DrawString("Invalid characters found,", New Font("Courier New", 8), textBrush, 0, 0)\n            g.DrawString("no barcode generated", New Font("Courier New", 8), textBrush, 0, 10)\n            g.DrawString("Input was: ", New Font("Courier New", 8), textBrush, 0, 30)\n            g.DrawString(Code, New Font("Courier New", 8), textBrush, 0, 40)\n        End If\n\n        'write the image into a memorystream\n        Dim ms As New MemoryStream\n\n        Dim encodingParams As New EncoderParameters\n        encodingParams.Param(0) = New EncoderParameter(Encoder.Quality, 100)\n\n        Dim encodingInfo As ImageCodecInfo = FindCodecInfo("PNG")\n\n        b.Save(ms, encodingInfo, encodingParams)\n\n        'dispose of the object we won't need any more\n        g.Dispose()\n        b.Dispose()\n\n        Return ms\n    End Function\n\n    Protected Overridable Function FindCodecInfo(ByVal codec As String) As ImageCodecInfo\n        Dim encoders As ImageCodecInfo() = ImageCodecInfo.GetImageEncoders\n        For Each e As ImageCodecInfo In encoders\n            If e.FormatDescription.Equals(codec) Then Return e\n        Next\n        Return Nothing\n    End Function\nEnd Class