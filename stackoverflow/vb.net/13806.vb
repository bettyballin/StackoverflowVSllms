Public Class UserImpersonation\n\n    Private Declare Auto Function LogonUser Lib "advapi32.dll" (ByVal lpszUsername As [String], _\n        ByVal lpszDomain As [String], ByVal lpszPassword As [String], _\n        ByVal dwLogonType As Integer, ByVal dwLogonProvider As Integer, _\n        ByRef phToken As IntPtr) As Boolean\n\n    <DllImport("kernel32.dll")> _\n    Private Shared Function FormatMessage(ByVal dwFlags As Integer, ByRef lpSource As IntPtr, _\n        ByVal dwMessageId As Integer, ByVal dwLanguageId As Integer, ByRef lpBuffer As [String], _\n        ByVal nSize As Integer, ByRef Arguments As IntPtr) As Integer\n\n    End Function\n\n    Private Declare Auto Function CloseHandle Lib "kernel32.dll" (ByVal handle As IntPtr) As Boolean\n\n    Private Declare Auto Function DuplicateToken Lib "advapi32.dll" (ByVal ExistingTokenHandle As IntPtr, _\n            ByVal SECURITY_IMPERSONATION_LEVEL As Integer, _\n            ByRef DuplicateTokenHandle As IntPtr) As Boolean\n\n    <PermissionSetAttribute(SecurityAction.Demand, Name:="FullTrust")> _\n    Public Shared Function ImpersonateUser(ByVal strDomain As String, ByVal strUserid As String, ByVal strPassword As String) As WindowsImpersonationContext\n\n        Dim tokenHandle As New IntPtr(0)\n        Dim dupeTokenHandle As New IntPtr(0)\n\n        Try\n            ' Get the user token for the specified user, domain, and password using the \n            ' unmanaged LogonUser method.  \n            ' The local machine name can be used for the domain name to impersonate a user on this machine.\n\n            Const LOGON32_PROVIDER_DEFAULT As Integer = 0\n            'This parameter causes LogonUser to create a primary token.\n            Const LOGON32_LOGON_INTERACTIVE As Integer = 2\n\n            tokenHandle = IntPtr.Zero\n\n            ' Call LogonUser to obtain a handle to an access token.\n            Dim returnValue As Boolean = LogonUser(strUserid, strDomain, strPassword, LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT, tokenHandle)\n\n            If returnValue = False Then\n                Dim ret As Integer = Marshal.GetLastWin32Error()\n                Throw New System.ComponentModel.Win32Exception(ret)\n            Else\n                ' Use the token handle returned by LogonUser.\n                Dim newId As New WindowsIdentity(tokenHandle)\n                Dim ImpersonatedUser As WindowsImpersonationContext = newId.Impersonate()\n\n                Return ImpersonatedUser\n            End If\n\n        Catch ex As Exception\n            Console.WriteLine("UserImpersonation.impersonateUser Exception Occurred: " + ex.Message)\n\n            Return Nothing\n        End Try\n\n        ' Free the tokens.\n        If Not System.IntPtr.op_Equality(tokenHandle, IntPtr.Zero) Then\n            CloseHandle(tokenHandle)\n        End If\n    End Function\n\n\n    Public Shared Function UndoImpersonate(ByVal WIC As WindowsImpersonationContext) As Boolean\n        Try\n            ' Stop impersonating the user.\n            WIC.Undo()\n\n            Return True\n        Catch ex As Exception\n            Console.WriteLine(("Exception occurred. " + ex.Message))\n\n            Return False\n        End Try\n\n    End Function\nEnd Class