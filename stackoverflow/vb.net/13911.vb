''' <summary>\n''' Pivots columnX as new columns for the X axis (must be unique values) and the remaining columns as \n''' the Y axis. Optionally can include columns to exclude from the Y axis.\n''' </summary>\n''' <param name="dt"></param>\n''' <param name="columnX"></param>\n''' <param name="columnsToIgnore"></param>\n''' <returns>DataTable</returns>\n''' <remarks></remarks>\nPublic Shared Function Pivot(ByVal dt As DataTable, ByVal columnX As String, ByVal ParamArray columnsToIgnore As String()) As DataTable\n\n    Dim dt2 As New DataTable()\n\n    If columnX = "" Then\n        columnX = dt.Columns(0).ColumnName\n    End If\n\n    'Add a Column at the beginning of the table \n    dt2.Columns.Add(columnX)\n\n    'Read all DISTINCT values from columnX Column in the provided DataTable \n    Dim columnXValues As New List(Of String)()\n\n    'Create the list of columns to ignore \n    Dim listColumnsToIgnore As New List(Of String)()\n    If columnsToIgnore.Length > 0 Then\n        listColumnsToIgnore.AddRange(columnsToIgnore)\n    End If\n\n    If Not listColumnsToIgnore.Contains(columnX) Then\n        listColumnsToIgnore.Add(columnX)\n    End If\n\n    ' Add the X axis columns\n    For Each dr As DataRow In dt.Rows\n        Dim columnXTemp As String = dr(columnX).ToString()\n        If Not columnXValues.Contains(columnXTemp) Then\n            columnXValues.Add(columnXTemp)\n            dt2.Columns.Add(columnXTemp)\n        Else\n            Throw New Exception("The inversion used must have unique values for column " + columnX)\n        End If\n    Next\n\n    'Add a row for each non-columnX of the DataTable \n    For Each dc As DataColumn In dt.Columns\n        If Not columnXValues.Contains(dc.ColumnName) AndAlso Not listColumnsToIgnore.Contains(dc.ColumnName) Then\n            Dim dr As DataRow = dt2.NewRow()\n            dr(0) = dc.ColumnName\n            dt2.Rows.Add(dr)\n        End If\n    Next\n\n    'Complete the datatable with the values \n    For i As Integer = 0 To dt2.Rows.Count - 1\n        For j As Integer = 1 To dt2.Columns.Count - 1\n            dt2.Rows(i)(j) = dt.Rows(j - 1)(dt2.Rows(i)(0).ToString()).ToString()\n        Next\n    Next\n\n    Return dt2\n\nEnd Function\n\n''' <summary>\n''' Can pivot any column as X, any column as Y, and any column as Z. Sort on X, sort on Y and optionally, the \n''' values at the intersection of x and y (Z axis) can be summed.\n''' </summary>\n''' <param name="dt"></param>\n''' <param name="columnX"></param>\n''' <param name="columnY"></param>\n''' <param name="columnZ"></param>\n''' <param name="nullValue"></param>\n''' <param name="sumValues"></param>\n''' <param name="xSort"></param>\n''' <param name="ySort"></param>\n''' <returns>DataTable</returns>\n''' <remarks></remarks>\nPublic Shared Function Pivot(ByVal dt As DataTable, ByVal columnX As String, ByVal columnY As String, ByVal columnZ As String, _\n    ByVal nullValue As String, ByVal sumValues As Boolean, ByVal xSort As Sort, ByVal ySort As Sort) As DataTable\n\n    Dim dt2 As New DataTable()\n    Dim tickList As List(Of Long) = Nothing\n\n    If columnX = "" Then\n        columnX = dt.Columns(0).ColumnName\n    End If\n\n    'Add a Column at the beginning of the table \n    dt2.Columns.Add(columnY)\n\n    'Read all DISTINCT values from columnX Column in the provided DataTable \n    Dim columnXValues As New List(Of String)()\n    Dim cols As Integer = 0\n\n    For Each dr As DataRow In dt.Rows\n        If dr(columnX).ToString.Contains("'") Then\n            dr(columnX) = dr(columnX).ToString.Replace("'", "")\n        End If\n        If Not columnXValues.Contains(dr(columnX).ToString) Then\n            'Read each row value, if it's different from others provided, \n            'add to the list of values and creates a new Column with its value. \n            columnXValues.Add(dr(columnX).ToString)\n        End If\n    Next\n\n    'Sort X if needed\n    If Not xSort = Sort.None Then\n        columnXValues = SortValues(columnXValues, xSort)\n    End If\n\n    'Add columnX\n    For Each s As String In columnXValues\n        dt2.Columns.Add(s)\n    Next\n\n    'Verify Y and Z Axis columns were provided \n    If columnY <> "" AndAlso columnZ <> "" Then\n        'Read DISTINCT Values for Y Axis Column \n        Dim columnYValues As New List(Of String)()\n\n        For Each dr As DataRow In dt.Rows\n            If dr(columnY).ToString.Contains("'") Then\n                dr(columnY) = dr(columnY).ToString.Replace("'", "")\n            End If\n            If Not columnYValues.Contains(dr(columnY).ToString()) Then\n                columnYValues.Add(dr(columnY).ToString())\n            End If\n        Next\n\n        ' Now we can sort the Y axis if needed. \n        If Not ySort = Sort.None Then\n            columnYValues = SortValues(columnYValues, ySort)\n        End If\n\n        'Loop all Distinct ColumnY Values\n        For Each columnYValue As String In columnYValues\n            'Create a new Row \n            Dim drReturn As DataRow = dt2.NewRow()\n            drReturn(0) = columnYValue\n            Dim rows As DataRow() = dt.[Select](columnY + "='" + columnYValue + "'")\n\n            'Read each row to fill the DataTable \n            For Each dr As DataRow In rows\n                Dim rowColumnTitle As String = dr(columnX).ToString()\n\n                'Read each column to fill the DataTable \n                For Each dc As DataColumn In dt2.Columns\n                    If dc.ColumnName = rowColumnTitle Then\n                        'If sumValues, try to perform a Sum \n                        'If sum is not possible due to value types, use the nullValue string\n                        If sumValues Then\n                            If IsNumeric(dr(columnZ).ToString) Then\n                                drReturn(rowColumnTitle) = Val(drReturn(rowColumnTitle).ToString) + Val(dr(columnZ).ToString)\n                            Else\n                                drReturn(rowColumnTitle) = nullValue\n                            End If\n                        Else\n                            drReturn(rowColumnTitle) = dr(columnZ).ToString\n                        End If\n                    End If\n                Next\n            Next\n\n            dt2.Rows.Add(drReturn)\n\n        Next\n    Else\n        Throw New Exception("The columns to perform inversion are not provided")\n    End If\n\n    'if nullValue param was provided, fill the datable with it \n    If nullValue <> "" Then\n        For Each dr As DataRow In dt2.Rows\n            For Each dc As DataColumn In dt2.Columns\n                If dr(dc.ColumnName).ToString() = "" Then\n                    dr(dc.ColumnName) = nullValue\n                End If\n            Next\n        Next\n    End If\n\n    Return dt2\n\nEnd Function\n\n''' <summary>\n''' Sorts a list of strings checking to see if they are numeric or date types.\n''' </summary>\n''' <param name="list"></param>\n''' <param name="srt"></param>\n''' <returns></returns>\n''' <remarks></remarks>\nPrivate Shared Function SortValues(ByVal list As List(Of String), ByVal srt As Sort) As List(Of String)\n\n    Dim tickList As List(Of Long) = Nothing\n    Dim dblList As List(Of Double) = Nothing\n\n    ' Figure out how to sort columnX\n    For Each s As String In list\n        Dim colDate As Date = Nothing\n        If Date.TryParse(s, colDate) Then\n            tickList = New List(Of Long)\n            Exit For\n        End If\n    Next\n\n    Dim dateTicks As Long\n\n    If Not tickList Is Nothing Then\n        For Each s As String In list\n            dateTicks = DateTime.Parse(s).Ticks\n            If Not tickList.Contains(dateTicks) Then\n                tickList.Add(dateTicks)\n            End If\n        Next\n\n        If srt = Sort.DESC Then\n            tickList.Sort()\n            tickList.Reverse()\n        ElseIf srt = Sort.ASC Then\n            tickList.Sort()\n        End If\n\n        list.Clear()\n        For Each lng As Long In tickList\n            list.Add(New Date(lng).ToString("G"))\n        Next\n    Else\n        Dim dbl As Double = Nothing\n\n        For Each s As String In list\n            If IsNumeric(s) Then\n                dblList = New List(Of Double)\n            End If\n        Next\n\n        If Not dblList Is Nothing Then\n            'Doubles or Integers\n            For Each s As String In list\n                dbl = Val(s)\n                If Not dblList.Contains(dbl) Then\n                    dblList.Add(dbl)\n                End If\n            Next\n\n            If srt = Sort.DESC Then\n                dblList.Sort()\n                dblList.Reverse()\n            ElseIf srt = Sort.ASC Then\n                dblList.Sort()\n            End If\n\n            list.Clear()\n            For Each d As Double In dblList\n                list.Add(d.ToString)\n            Next\n        Else\n            'Strings\n            If srt = Sort.DESC Then\n                list.Sort()\n                list.Reverse()\n            ElseIf srt = Sort.ASC Then\n                list.Sort()\n            End If\n        End If\n\n    End If\n\n    Return list\n\nEnd Functio