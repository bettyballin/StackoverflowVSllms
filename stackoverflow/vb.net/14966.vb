Public Class Randomizer(Of T)\n    Implements IComparer(Of T)\n\n    ''// Ensures different instances are sorted in different orders\n    Private Shared Salter As New Random() ''// only as random as your seed\n    Private Salt As Integer\n    Public Sub New()\n        Salt = Salter.Next(Integer.MinValue, Integer.MaxValue)\n    End Sub\n\n    Private Shared sha As New SHA1CryptoServiceProvider()\n    Private Function HashNSalt(ByVal x As Integer) As Integer\n      Dim b() As Byte = sha.ComputeHash(BitConverter.GetBytes(x))\n      Dim r As Integer = 0\n      For i As Integer = 0 To b.Length - 1 Step 4\n          r = r Xor BitConverter.ToInt32(b, i)\n      Next\n\n      Return r Xor Salt\n    End Function\n\n    Public Function Compare(x As T, y As T) As Integer _\n        Implements IComparer(Of T).Compare\n\n        Return HashNSalt(x.GetHashCode()).CompareTo(HashNSalt(y.GetHashCode()))\n    End Function\nEnd Class