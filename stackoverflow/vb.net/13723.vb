Class UserControl1 ' Parent\n   Protected Override Function OnBubbleEvent(sender as Object, e as EventArgs) as Boolean\n       Dim c as CommandEventArgs = TryCast(e, CommandEventArgs)\n       If c IsNot Nothing Then\n           RaiseEvent ItemEvent(sender, c)\n           Return True ' Cancel the bubbling, so it doesn't go up any further in the hierarchy\n       End If\n       Return False ' Couldn't handle, so let it bubble\n   End Function\n\n   Public Event ItemEvent as EventHandler(Of CommandEventArgs)\nEnd Class\n\nClass UserControlB ' Child\n    Protected Sub OnClicked(e as EventArgs)\n        ' Raise a direct event for any handlers attached directly\n        RaiseEvent Clicked(Me, e)\n        ' And raise a bubble event for parent control\n        RaiseBubbleEvent(Me, New CommandEventArgs("Clicked", Nothing))\n    End Sub\n\n    Protected Sub OnMoved(e as EventArgs)\n        ' Raise a direct event for any handlers attached directly\n        RaiseEvent Moved(Me, e)\n        ' And raise a bubble event for parent control\n        RaiseBubbleEvent(Me, New CommandEventArgs("Moved", Nothing))\n    End Sub\nEnd Class\n\nClass PageA\n    Sub UserControl1_ItemEvent(sender as Object, e as CommandEventArgs) Handles UserControl1.ItemEvent\n        Response.Write(sender.GetType().Name & " was " & e.CommandName)\n    End Sub\nEnd Class