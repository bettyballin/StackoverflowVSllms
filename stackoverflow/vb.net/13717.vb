Imports System.Collections.Generic\nImports System.Drawing\nImports System.Windows.Forms\n\nFriend Class ComboEditingControl\nInherits ComboBox\nImplements IDataGridViewEditingControl\n\nPrivate dataGridViewControl As DataGridView\nPrivate valueIsChanged As Boolean = False\nPrivate rowIndexNum As Integer\nPrivate ItemSelected As String\n\nPublic Sub New()\n    Me.DropDownStyle = ComboBoxStyle.DropDownList\nEnd Sub\n\n\nPublic Property EditingControlFormattedValue() As Object _\n    Implements IDataGridViewEditingControl.EditingControlFormattedValue\n\n    Get\n        Return ItemSelected\n    End Get\n\n    Set(ByVal value As Object)\n        If TypeOf value Is Decimal Then\n            Me.SelectedItem = value.ToString()\n        End If\n    End Set\nEnd Property\n\n\nPublic Function GetEditingControlFormattedValue(ByVal context As DataGridViewDataErrorContexts) As Object _\n    Implements IDataGridViewEditingControl.GetEditingControlFormattedValue\n    Return ItemSelected\nEnd Function\n\nPublic ReadOnly Property EditingControlCursor() As Cursor _\n    Implements IDataGridViewEditingControl.EditingPanelCursor\n    Get\n        Return MyBase.Cursor\n    End Get\nEnd Property\n\nPublic Sub ApplyCellStyleToEditingControl(ByVal dataGridViewCellStyle As DataGridViewCellStyle) _\n    Implements IDataGridViewEditingControl.ApplyCellStyleToEditingControl\n\n    Me.Font = dataGridViewCellStyle.Font\n    Me.ForeColor = dataGridViewCellStyle.ForeColor\n    Me.BackColor = dataGridViewCellStyle.BackColor\n\nEnd Sub\n\nPublic Property EditingControlRowIndex() As Integer _\n    Implements IDataGridViewEditingControl.EditingControlRowIndex\n\n    Get\n        Return rowIndexNum\n    End Get\n    Set(ByVal value As Integer)\n        rowIndexNum = value\n    End Set\n\nEnd Property\n\nPublic Function EditingControlWantsInputKey(ByVal key As Keys, ByVal dataGridViewWantsInputKey As Boolean) As Boolean _\n    Implements IDataGridViewEditingControl.EditingControlWantsInputKey\n\n    ' Let the DateTimePicker handle the keys listed.\n    Select Case key And Keys.KeyCode\n        Case Keys.Up, Keys.Down, Keys.Home, Keys.End, Keys.PageDown, Keys.PageUp\n            Return True\n        Case Else\n            Return False\n    End Select\nEnd Function\n\nPublic Sub PrepareEditingControlForEdit(ByVal selectAll As Boolean) _\n    Implements IDataGridViewEditingControl.PrepareEditingControlForEdit\n    ' No preparation needs to be done.\nEnd Sub\n\nPublic ReadOnly Property RepositionEditingControlOnValueChange() As Boolean Implements _\n    IDataGridViewEditingControl.RepositionEditingControlOnValueChange\n    Get\n        Return False\n    End Get\nEnd Property\n\nPublic Property EditingControlDataGridView() As DataGridView _\n    Implements IDataGridViewEditingControl.EditingControlDataGridView\n\n    Get\n        Return dataGridViewControl\n    End Get\n    Set(ByVal value As DataGridView)\n        dataGridViewControl = value\n    End Set\n\nEnd Property\n\nPublic Property EditingControlValueChanged() As Boolean _\n    Implements IDataGridViewEditingControl.EditingControlValueChanged\n\n    Get\n        Return valueIsChanged\n    End Get\n    Set(ByVal value As Boolean)\n        valueIsChanged = value\n    End Set\nEnd Property\n\n\n''' <summary>\n''' Notify the DataGridView that the contents of the cell have changed.\n''' </summary>\n''' <param name="eventargs"></param>\n''' <remarks></remarks>\nProtected Overrides Sub OnSelectedIndexChanged(ByVal eventargs As EventArgs)\n    valueIsChanged = True\n    dataGridViewControl.NotifyCurrentCellDirty(True)\n    MyBase.OnSelectedItemChanged(eventargs)\n    ItemSelected = SelectedItem.ToString()\nEnd Sub\nEnd Class