class AutoHandle\n{\n    HANDLE  mHandle;\npublic:\n    AutoHandle() : mHandle(NULL) { }\n    AutoHandle(HANDLE h) : mHandle(h) { }\n\n    HANDLE * operator & ()\n    {\n        return &mHandle;\n    }\n\n    operator HANDLE() const\n    {\n        return mHandle;\n    }\n\n    ~AutoHandle()\n    {\n        if (mHandle && mHandle != INVALID_HANDLE_VALUE)\n            ::CloseHandle(mHandle);\n    }\n};\n\n\nbool\nGetDiskPowerState(LPCTSTR disk, string & txt)\n{\n    AutoHandle hFile = CreateFile(disk, 0, FILE_SHARE_READ|FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);\n    if (hFile && hFile != INVALID_HANDLE_VALUE)\n    {\n        BOOL powerState = FALSE;\n        const BOOL result = GetDevicePowerState(hFile, &powerState);\n        const DWORD err = GetLastError();\n\n        if (result)\n        {\n            if (powerState)\n            {\n                txt += disk;\n                txt += " : powered up\r\n";\n            }\n            else\n            {\n                txt += disk;\n                txt += " : sleeping\r\n";\n            }\n            return true;\n        }\n        else\n        {\n            txt += "Cannot get drive ";\n            txt += disk;\n            txt += "status\r\n";\n            return false;\n        }\n    }\n\n    return false;\n}\n\nstring \nGetDiskPowerState()\n{\n    string text;\n    CString driveName;\n    bool result = true;\n    for (int idx= 0; result; idx++)\n    {\n        driveName.Format("\\\\.\\PhysicalDrive%d", idx);\n        result = GetDiskPowerState(driveName, text);\n    }\n    return text;\n}