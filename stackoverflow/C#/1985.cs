public interface IMyContractCallback\n{\n    [OperationContract]\n    void OnCallback();\n}\n\n[ServiceContract(CallbackContract = typeof(IMyContractCallback))]\npublic interface IMyContract\n{\n    [OperationContract]\n    void DoSomething();\n}\n\n[ServiceBehavior(ConcurrencyMode = ConcurrencyMode.Reentrant)]\npublic class MyService : IMyContract\n{\n    public void DoSomething()\n    {\n        Console.WriteLine("Hi from server!");\n        var callback = OperationContext.Current.GetCallbackChannel<IMyContractCallback>();\n        callback.OnCallback();\n    }\n}\n\npublic class MyContractClient : DuplexClientBase<IMyContract>\n{\n    public MyContractClient(object callbackInstance, Binding binding, EndpointAddress remoteAddress)\n        : base(callbackInstance, binding, remoteAddress) { }\n}\n\npublic class MyCallbackClient : IMyContractCallback\n{\n    public void OnCallback()\n    {\n        Console.WriteLine("Hi from client!");\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var uri = new Uri("net.tcp://localhost");\n        var binding = new NetTcpBinding();\n        var host = new ServiceHost(typeof(MyService), uri);\n        host.AddServiceEndpoint(typeof(IMyContract), binding, "");\n        host.Open();\n\n        var callback = new MyCallbackClient();\n        var client = new MyContractClient(callback, binding, new EndpointAddress(uri));\n        var proxy = client.ChannelFactory.CreateChannel();\n        proxy.DoSomething();\n        // Printed in console:\n        //  Hi from server!\n        //  Hi from client!\n\n        client.Close();\n        host.Close();\n    }\n}