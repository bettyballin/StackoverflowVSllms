using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Runtime.InteropServices;\nusing System.Security.Principal;\nusing System.Security.Permissions;\nusing System.Text;\n\nnamespace MyProject.Business.Web\n{\n    public class SecurityManager\n    {\n        #region DLL Imports\n        [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Unicode)]\n        public static extern bool LogonUser(String lpszUsername, String lpszDomain, String lpszPassword, int dwLogonType, int dwLogonProvider, ref IntPtr phToken);\n\n        [DllImport("kernel32.dll", CharSet = CharSet.Auto)]\n        public extern static bool CloseHandle(IntPtr handle);\n\n        [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]\n        public extern static bool DuplicateToken(IntPtr ExistingTokenHandle, int SECURITY_IMPERSONATION_LEVEL, ref IntPtr DuplicateTokenHandle);\n        #endregion\n\n        public string Domain { get; set; }\n        public string UserName { get; set; }\n        public string Password { get; set; }\n\n        private WindowsImpersonationContext m_CurrentImpersonationContext;\n\n        [PermissionSetAttribute(SecurityAction.Demand, Name = "FullTrust")]\n        public void StartImpersonation()\n        {\n            const int LOGON32_PROVIDER_DEFAULT = 0;\n            const int LOGON32_LOGON_INTERACTIVE = 2;\n\n            IntPtr tokenHandle = IntPtr.Zero;\n            IntPtr dupeTokenHandle = IntPtr.Zero;\n\n            // obtain a handle to an access token\n            bool wasLogonSuccessful = LogonUser(UserName, Domain, Password, LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT, ref tokenHandle);\n\n            if (!wasLogonSuccessful)\n                throw new Exception(String.Format("Logon failed with error number {0}", Marshal.GetLastWin32Error()));\n\n            // use the token handle to impersonate the user\n            WindowsIdentity newId = new WindowsIdentity(tokenHandle);\n            m_CurrentImpersonationContext = newId.Impersonate();\n\n            // free the tokens\n            if (tokenHandle != IntPtr.Zero)\n                CloseHandle(tokenHandle);\n        }\n        public void EndImpersonation()\n        {\n            m_CurrentImpersonationContext.Undo();\n        }\n    }\n}