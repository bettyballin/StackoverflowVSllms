enum LineComparisonMode\n{\n   ///<summary>the order of the line numbers matters, default</summary>\n   Ordered = 0, \n   ///<summary>the order of the line numbers doesn't matter\n   /// Has a higher cost to the default.\n   ///</summary>\n   Unordered = 1,\n} \n\nclass ListLineComparer : IEqualityComparer<List<Class>>\n{\n    class LineComparer : IEqualityComparer<Class>\n    {\n        public bool Equals(Class x, Class y)\n        {\n            return x.IDLinea == y.IDLinea;\n        }\n\n        public int GetHashCode(Class x)\n        {\n            return x.IDLinea;\n        }\n    }\n\n    private readonly LineComparer lines;\n    private readonly LineComparisonMode mode;\n\n    public ListLineComparer() {}\n\n    public ListLineComparer(LineComparisonMode mode)\n    { \n        this.mode = mode;\n    }\n\n    public bool Equals(List<Class> x, List<Class> y)\n    {\n        if (mode == LineComparisonMode.Ordered)\n            return x.SequenceEqual(y, lines);\n        else\n            return x.OrderBy<Class, int>(Line).SequenceEqual(y.OrderBy<Class, int>(Line), lines);\n    }\n\n    private static int Line(Class c)\n    {\n        return c.IDLinea;\n    }\n\n    public int GetHashCode(List<Class> x)\n    {\n        //this is not a good hash (though correct) \n        // but not relevant to current question\n        return x.Sum(c => c.IDLinea);\n    }\n}\n\n// assume List <List<Class>> L = new List<List<Class>>(); from question\nvar result = L.Distinct(new ListLineComparer()); 