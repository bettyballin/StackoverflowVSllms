using System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Linq;\nusing System.Text;\nusing DocumentFormat.OpenXml;\nusing DocumentFormat.OpenXml.Packaging;\nusing DocumentFormat.OpenXml.Spreadsheet;\nusing System.Xml;\nusing System.IO;\nusing System.Diagnostics;\n\nnamespace OpenXMLWindowsApp\n{\n    public class OpenXMLWindowsApp\n    {\n        public void UpdateSheet()\n        {\n            UpdateCell("Chart.xlsx", "20", 2, "B");\n            UpdateCell("Chart.xlsx", "80", 3, "B");\n            UpdateCell("Chart.xlsx", "80", 2, "C");\n            UpdateCell("Chart.xlsx", "20", 3, "C");\n\n            ProcessStartInfo startInfo = new ProcessStartInfo("Chart.xlsx");\n            startInfo.WindowStyle = ProcessWindowStyle.Normal;\n            Process.Start(startInfo);\n        }\n\n        public static void UpdateCell(string docName, string text,\n            uint rowIndex, string columnName)\n        {\n            // Open the document for editing.\n            using (SpreadsheetDocument spreadSheet = \n                     SpreadsheetDocument.Open(docName, true))\n            {\n                WorksheetPart worksheetPart = \n                      GetWorksheetPartByName(spreadSheet, "Sheet1");\n\n                if (worksheetPart != null)\n                {\n                    Cell cell = GetCell(worksheetPart.Worksheet, \n                                             columnName, rowIndex);\n\n                    cell.CellValue = new CellValue(text);\n                    cell.DataType = \n                        new EnumValue<CellValues>(CellValues.Number);\n\n                    // Save the worksheet.\n                    worksheetPart.Worksheet.Save();\n                }\n            }\n\n        }\n\n        private static WorksheetPart \n             GetWorksheetPartByName(SpreadsheetDocument document, \n             string sheetName)\n        {\n            IEnumerable<Sheet> sheets =\n               document.WorkbookPart.Workbook.GetFirstChild<Sheets>().\n               Elements<Sheet>().Where(s => s.Name == sheetName);\n\n            if (sheets.Count() == 0)\n            {\n                // The specified worksheet does not exist.\n\n                return null;\n            }\n\n            string relationshipId = sheets.First().Id.Value;\n            WorksheetPart worksheetPart = (WorksheetPart)\n                 document.WorkbookPart.GetPartById(relationshipId);\n            return worksheetPart;\n\n        }\n\n        // Given a worksheet, a column name, and a row index, \n        // gets the cell at the specified column and \n        private static Cell GetCell(Worksheet worksheet, \n                  string columnName, uint rowIndex)\n        {\n            Row row = GetRow(worksheet, rowIndex);\n\n            if (row == null)\n                return null;\n\n            return row.Elements<Cell>().Where(c => string.Compare\n                   (c.CellReference.Value, columnName + \n                   rowIndex, true) == 0).First();\n        }\n\n\n        // Given a worksheet and a row index, return the row.\n        private static Row GetRow(Worksheet worksheet, uint rowIndex)\n        {\n            return worksheet.GetFirstChild<SheetData>().\n              Elements<Row>().Where(r => r.RowIndex == rowIndex).First();\n        } \n    }\n}