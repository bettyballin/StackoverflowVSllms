\n   public partial class Form1 : Form\n   {\n      private SymmetricAlgorithm mEncryptionType;\n\n      public Form1()\n      {\n         mEncryptionType = new RijndaelManaged();\n         mEncryptionType.Padding = PaddingMode.PKCS7; //PaddingMode.None;\n         mEncryptionType.Mode = CipherMode.CBC;\n         mEncryptionType.BlockSize = 128; // 192; // 256; // Update byte array to IV when changed\n         mEncryptionType.KeySize = 128; // 192; // 256; // Update byte array to Key when changed\n         mEncryptionType.IV = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n                                           0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};\n         mEncryptionType.Key = new byte[] { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,\n                                           0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF };\n\n         int encrypted_size = CalculateEncryptedSize(new byte[] { 0x22, 0x23, 0x44 });\n         // Shows Theran's point about exact block size\n         encrypted_size = CalculateEncryptedSize(new byte[] { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,\n                                           0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF  });\n      }\n\n      /// <summary>\n      /// Calculate the encrypted size of input buffer\n      /// </summary>\n      /// <param name="inputBuffer">The input buffer</param>\n      /// <returns>Size of the encrypted buffer</returns>\n      public int CalculateEncryptedSize(byte[] inputBuffer)\n      {\n         int extra_padding = 0;\n         if (mEncryptionType.Padding != PaddingMode.None)\n         {\n            int padding_size = (mEncryptionType.BlockSize / 8);\n            extra_padding = (padding_size - (inputBuffer.Length % padding_size));\n         }\n         return inputBuffer.Length + extra_padding;\n      }\n   }