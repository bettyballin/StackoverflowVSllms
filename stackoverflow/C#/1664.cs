using System.Threading;\n\npublic sealed class QueuedLock\n{\n    private object innerLock;\n    private volatile int ticketsCount = 0;\n    private volatile int ticketToRide = 1;\n\n    public QueuedLock()\n    {\n        innerLock = new Object();\n    }\n\n    public void Enter()\n    {\n        int myTicket = Interlocked.Increment(ref ticketsCount);\n        Monitor.Enter(innerLock);\n        while (true)\n        {\n\n            if (myTicket == ticketToRide)\n            {\n                return;\n            }\n            else\n            {\n                Monitor.Wait(innerLock);\n            }\n        }\n    }\n\n    public void Exit()\n    {\n        Interlocked.Increment(ref ticketToRide);\n        Monitor.PulseAll(innerLock);\n        Monitor.Exit(innerLock);\n    }\n}