public static IEnumerable<KeyValuePair<int, int>> GetFrequenciesByOutcome(int nDice, int nSides)\n{\n    int maxOutcome = (nDice * nSides);\n    Dictionary<int, int> outcomeCounts = new Dictionary<int, int>();\n    for(int i = 0; i <= maxOutcome; i++)\n        outcomeCounts[i] = 0;\n\n    foreach(int possibleOutcome in GetAllOutcomes(0, nDice, nSides))\n        outcomeCounts[possibleOutcome] = outcomeCounts[possibleOutcome] + 1;\n\n    return outcomeCounts.Where(kvp => kvp.Value > 0);\n}\n\nprivate static IEnumerable<int> GetAllOutcomes(int currentTotal, int nDice, int nSides)\n{\n    if (nDice == 0) yield return currentTotal;\n    else\n    {\n        for (int i = 1; i <= nSides; i++)\n            foreach(int outcome in GetAllOutcomes(currentTotal + i, nDice - 1, nSides))\n                yield return outcome;\n    }\n}