public static IEnumerable<Range<T>> Collapse<T>(this IEnumerable<Range<T>> me, IComparer<T> comparer)\n    {\n        List<Range<T>> orderdList = me.OrderBy(r => r.Start).ToList();\n        List<Range<T>> newList = new List<Range<T>>();\n\n        T max = orderdList[0].End;\n        T min = orderdList[0].Start;\n\n        foreach (var item in orderdList.Skip(1))\n        {\n            if (comparer.Compare(item.End, max) > 0 && comparer.Compare(item.Start, max) > 0)\n            {\n                newList.Add(new Range<T> { Start = min, End = max });\n                min = item.Start;\n            }\n            max = comparer.Compare(max, item.End) > 0 ? max : item.End;\n        }\n        newList.Add(new Range<T>{Start=min,End=max});\n\n        return newList;\n    }