1: using System.ComponentModel.Composition;\n   2: using System.Reflection;\n   3: using Microsoft.VisualStudio.TestTools.UnitTesting;\n   4:  \n   5: namespace MVPwithMEF\n   6: {\n   7:     /// <summary>\n   8:     /// Summary description for MVPTriadFixture\n   9:     /// </summary>\n  10:     [TestClass]\n  11:     public class MVPTriadFixture\n  12:     {\n  13:         [TestMethod]\n  14:         public void MVPTriadShouldBeProperlyBuilt()\n  15:         {\n  16:             var catalog = new AttributedAssemblyPartCatalog(Assembly.GetExecutingAssembly());\n  17:             var container = new CompositionContainer(catalog.CreateResolver());\n  18:             var shell = container.GetExportedObject<Shell>();\n  19:             Assert.IsNotNull(shell);\n  20:             Assert.IsNotNull(shell.Presenter);\n  21:             Assert.IsNotNull(shell.Presenter.View);\n  22:             Assert.IsNotNull(shell.Presenter.Model);\n  23:         }\n  24:     }\n  25:  \n  26:     [Export]\n  27:     public class Shell\n  28:     {\n  29:         private IPresenter _presenter = null;\n  30:         \n  31:         public IPresenter Presenter\n  32:         {\n  33:             get { return _presenter; }\n  34:         }\n  35:  \n  36:         [ImportingConstructor]\n  37:         public Shell(IPresenter presenter)\n  38:         {\n  39:             _presenter = presenter;\n  40:         }\n  41:     }\n  42:  \n  43:     public interface IModel\n  44:     {\n  45:     }\n  46:  \n  47:     [Export(typeof(IModel))]\n  48:     public class Model : IModel\n  49:     {\n  50:         \n  51:     }\n  52:  \n  53:     public interface IView\n  54:     {\n  55:     }\n  56:  \n  57:     [Export(typeof(IView))]\n  58:     public class View : IView\n  59:     {\n  60:     }\n  61:  \n  62:     public interface IPresenter\n  63:     {\n  64:         IView View { get;}\n  65:         IModel Model { get; }\n  66:     }\n  67:  \n  68:     [Export(typeof(IPresenter))]\n  69:     public class Presenter : IPresenter\n  70:     {\n  71:  \n  72:         private IView _view;\n  73:         private IModel _model;\n  74:  \n  75:         [ImportingConstructor]\n  76:         public Presenter(IView view, IModel model)\n  77:         {\n  78:             _view = view;\n  79:             _model = model;\n  80:         }\n  81:  \n  82:         public IView View\n  83:         {\n  84:             get { return _view; }\n  85:         }\n  86:  \n  87:         public IModel Model\n  88:         {\n  89:             get { return _model; }\n  90:         }\n  91:  \n  92:     }\n  93: }