using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main()\n    {\n        HashSet<int> evenNumbers = new HashSet<int>();\n        HashSet<int> oddNumbers = new HashSet<int>();\n\n        for (int i = 0; i < 5; i++)\n        {\n            // Populate numbers with just even numbers.\n            evenNumbers.Add(i * 2);\n\n            // Populate oddNumbers with just odd numbers.\n            oddNumbers.Add((i * 2) + 1);\n        }\n\n        Console.Write("evenNumbers contains {0} elements: ", evenNumbers.Count);\n        DisplaySet(evenNumbers);\n\n        Console.Write("oddNumbers contains {0} elements: ", oddNumbers.Count);\n        DisplaySet(oddNumbers);\n\n        // Create a new HashSet populated with even numbers.\n        HashSet<int> numbers = new HashSet<int>(evenNumbers);\n        Console.WriteLine("numbers UnionWith oddNumbers...");\n        numbers.UnionWith(oddNumbers);\n\n        Console.Write("numbers contains {0} elements: ", numbers.Count);\n        DisplaySet(numbers);\n    }\n\n    private static void DisplaySet(HashSet<int> set)\n    {\n        Console.Write("{");\n        foreach (int i in set)\n        {\n            Console.Write(" {0}", i);\n        }\n        Console.WriteLine(" }");\n    }\n}\n\n/* This example produces output similar to the following:\n * evenNumbers contains 5 elements: { 0 2 4 6 8 }\n * oddNumbers contains 5 elements: { 1 3 5 7 9 }\n * numbers UnionWith oddNumbers...\n * numbers contains 10 elements: { 0 2 4 6 8 1 3 5 7 9 }\n */