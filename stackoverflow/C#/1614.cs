public enum Operation\n{\n    And,\n    Or\n}\n\npublic class QueryObject\n{\n    public string Value { get; set; }\n    public Type Type { get; set; }\n    public Operation Operation { get; set; }\n}\n\npublic override IEnumerable<T> SelectQuery(Dictionary<string, QueryObject> dictionary)\n{\n    string t = Convert.ToString(typeof(T).Name);\n    string criteria = string.Empty;\n    foreach (KeyValuePair<string, QueryObject> item in dictionary)\n    {\n        if (!string.IsNullOrEmpty(criteria))\n        {\n            switch (item.Value.Operation)\n            {\n                case Operation.And:\n                    criteria += " and ";\n                    break;\n                case Operation.Or:\n                    criteria += " or ";\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        if (item.Value.Type == typeof(int))\n        {\n            criteria += item.Key + " = " + item.Value + " ";    \n        }\n        else\n        {\n            criteria += item.Key + " = '" + item.Value + "'";\n        }\n    }\n\n    string query = " from " + t;\n\n    if (criteria != string.Empty)\n        query += " where " + criteria;\n\n    return FindByHql(query);\n}