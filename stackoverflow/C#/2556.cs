public class RangeValidatorEx : BaseValidator\n{\n\n    protected override void AddAttributesToRender(System.Web.UI.HtmlTextWriter writer)\n    {\n        base.AddAttributesToRender(writer);\n\n        if (base.RenderUplevel)\n        {\n            string clientId = this.ClientID;\n\n            // The attribute evaluation funciton holds the name of client-side js function.\n            Page.ClientScript.RegisterExpandoAttribute(clientId, "evaluationfunction", "RangeValidatorEx");\n\n            Page.ClientScript.RegisterExpandoAttribute(clientId, "Range1High", this.Range1High.ToString());\n            Page.ClientScript.RegisterExpandoAttribute(clientId, "Range2High", this.Range2High.ToString());\n            Page.ClientScript.RegisterExpandoAttribute(clientId, "Range1Low", this.Range1Low.ToString());\n            Page.ClientScript.RegisterExpandoAttribute(clientId, "Range2Low", this.Range2Low.ToString());\n\n        }\n    }\n\n    // Will be invoked to validate the parameters \n    protected override bool ControlPropertiesValid()\n    {\n        if ((Range1High <= 0) || (this.Range1Low <= 0) || (this.Range2High <= 0) || (this.Range2Low <= 0))\n            throw new HttpException("The range values cannot be less than zero");\n\n        return base.ControlPropertiesValid();\n    }\n\n    // used to validation on server-side\n    protected override bool EvaluateIsValid()\n    {\n        int code;\n        if (!Int32.TryParse(base.GetControlValidationValue(ControlToValidate), out code))\n            return false;\n\n        if ((code < this.Range1High && code > this.Range1Low) || (code < this.Range2High && code > this.Range2Low))\n            return true;\n        else\n            return false;\n    }\n\n    // inject the client-side script to page\n    protected override void OnPreRender(EventArgs e)\n    {\n           base.OnPreRender(e);\n\n           if (base.RenderUplevel)\n           {\n               this.Page.ClientScript.RegisterClientScriptBlock(this.GetType(), "RangeValidatorEx", RangeValidatorExJs(),true);\n           }\n    }\n\n\n    string RangeValidatorExJs()\n    {\n        string js;\n        // the validator will be rendered as a SPAN tag on the client-side and it will passed to the validation function.\n        js = "function RangeValidatorEx(val){ "\n        + " var code=document.getElementById(val.controltovalidate).value; "\n        + " if ((code < rangeValidatorCtrl.Range1High && code > rangeValidatorCtrl.Range1Low ) || (code < rangeValidatorCtrl.Range2High && code > rangeValidatorCtrl.Range2Low)) return true; else return false;}";\n        return js;\n    }\n\n\n    public int Range1Low\n    {\n        get {\n            object obj2 = this.ViewState["Range1Low"];\n\n            if (obj2 != null)\n                return System.Convert.ToInt32(obj2);\n\n            return 0;\n\n        }\n        set { this.ViewState["Range1Low"] = value; }\n    }\n\n    public int Range1High\n    {\n        get\n        {\n            object obj2 = this.ViewState["Range1High"];\n\n            if (obj2 != null)\n                return System.Convert.ToInt32(obj2);\n\n            return 0;\n\n        }\n        set { this.ViewState["Range1High"] = value; }\n    }\n    public int Range2Low\n    {\n        get\n        {\n            object obj2 = this.ViewState["Range2Low"];\n\n            if (obj2 != null)\n                return System.Convert.ToInt32(obj2);\n\n            return 0;\n\n        }\n        set { this.ViewState["Range2Low"] = value; }\n    }\n    public int Range2High\n    {\n        get\n        {\n            object obj2 = this.ViewState["Range2High"];\n\n            if (obj2 != null)\n                return System.Convert.ToInt32(obj2);\n\n            return 0;\n\n        }\n        set { this.ViewState["Range2High"] = value; }\n    }\n}