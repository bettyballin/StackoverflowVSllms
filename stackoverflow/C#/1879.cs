public static IEnumerable<T> Sort<T>(this IEnumerable<T> source, string sortExpression, bool desc)\n    {\n        var param = Expression.Parameter(typeof(T), string.Empty);\n        try\n        {\n            var fields = sortExpression.Split('.');\n            Expression property = null;\n            Expression parentParam = param;\n            foreach (var field in fields)\n            {\n                property = Expression.Property(parentParam, field);\n                parentParam = property;\n\n            }\n\n            var sortLambda = \n                Expression.Lambda<Func<T, object>>(\n                  Expression.Convert(property, typeof(object)), param);\n\n            if (desc)\n            {\n                return source.AsQueryable<T>().\n                     OrderByDescending<T, object>(sortLambda);\n            }\n\n            return source.AsQueryable<T>().\n                 OrderBy<T, object>(sortLambda);\n        }\n        catch (ArgumentException)\n        {\n            throw;\n        }\n    }