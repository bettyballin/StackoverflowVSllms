public static class XExtensions\n{\n    /// <summary>\n    /// Get the absolute XPath to a given XElement\n    /// (e.g. "/people/person[6]/name[1]/last[1]").\n    /// </summary>\n    public static string GetAbsoluteXPath(this XElement element)\n    {\n        if (element == null)\n        {\n            throw new ArgumentNullException("element");\n        }\n\n        Func<XElement, string> relativeXPath = e =>\n        {\n            int index = e.IndexPosition();\n            string name = e.Name.LocalName;\n\n            // If the element is the root, no index is required\n\n            return (index == -1) ? "/" + name : string.Format\n            (\n                "/{0}[{1}]",\n                name, \n                index.ToString()\n            );\n        };\n\n        var ancestors = from e in element.Ancestors()\n                        select relativeXPath(e);\n\n        return string.Concat(ancestors.Reverse().ToArray()) + \n               relativeXPath(element);\n    }\n\n    /// <summary>\n    /// Get the index of the given XElement relative to its\n    /// siblings with identical names. If the given element is\n    /// the root, -1 is returned.\n    /// </summary>\n    /// <param name="element">\n    /// The element to get the index of.\n    /// </param>\n    public static int IndexPosition(this XElement element)\n    {\n        if (element == null)\n        {\n            throw new ArgumentNullException("element");\n        }\n\n        if (element.Parent == null)\n        {\n            return -1;\n        }\n\n        int i = 1; // Indexes for nodes start at 1, not 0\n\n        foreach (var sibling in element.Parent.Elements(element.Name))\n        {\n            if (sibling == element)\n            {\n                return i;\n            }\n\n            i++;\n        }\n\n        throw new InvalidOperationException\n            ("element has been removed from its parent.");\n    }\n}