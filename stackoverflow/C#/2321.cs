class Program\n{\n    public class Node\n    {\n        private string _term;\n        private Dictionary<string, KeyValuePair<Node, Node>> _related = new Dictionary<string, KeyValuePair<Node, Node>>();\n\n        public Node(string term)\n        {\n            _term = term;\n        }\n\n        public void Add(string phrase, Node previous, string [] phraseRemainder, Dictionary<string,Node> existing)\n        {\n            Node next= null;\n            if (phraseRemainder.Length > 0)\n            {\n                if (!existing.TryGetValue(phraseRemainder[0], out next))\n                {\n                    existing[phraseRemainder[0]] = next = new Node(phraseRemainder[0]);\n                }\n                next.Add(phrase, this, phraseRemainder.Skip(1).ToArray(), existing);\n            }\n            _related.Add(phrase, new KeyValuePair<Node, Node>(previous, next));\n\n        }\n    }\n\n\n    static void Main(string[] args)\n    {\n        string [] sentences = \n            new string [] { \n                "The beautiful sky",\n                "Beautiful sky dream",\n                "beautiful dream"\n            };\n\n        Dictionary<string, Node> parsedSentences = new Dictionary<string,Node>();\n\n        foreach(string sentence in sentences)\n        {\n            string [] words = sentence.ToLowerInvariant().Split(' ');\n            Node startNode;\n            if (!parsedSentences.TryGetValue(words[0],out startNode))\n            {\n                parsedSentences[words[0]] = startNode = new Node(words[0]);\n            }\n            if (words.Length > 1)\n                startNode.Add(sentence,null,words.Skip(1).ToArray(),parsedSentences);\n        }\n    }\n}