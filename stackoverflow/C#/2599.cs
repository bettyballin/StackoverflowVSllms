private void LockUnlockBitsExample(PaintEventArgs e)\n{\n\n   // Create a new bitmap.\n   Bitmap bmp = new Bitmap("c:\\fakePhoto.jpg");\n\n   // Lock the bitmap's bits.  \n   Rectangle rect = new Rectangle(0, 0, bmp.Width, bmp.Height);\n   System.Drawing.Imaging.BitmapData bmpData =\n         bmp.LockBits(rect, System.Drawing.Imaging.ImageLockMode.ReadWrite,\n         bmp.PixelFormat);\n\n   // Get the address of the first line.\n   IntPtr ptr = bmpData.Scan0;\n\n   // Declare an array to hold the bytes of the bitmap.\n   int bytes  = bmpData.Stride * bmp.Height;\n   byte[] rgbValues = new byte[bytes];\n\n   // Copy the RGB values into the array.\n   System.Runtime.InteropServices.Marshal.Copy(ptr, rgbValues, 0, bytes);\n\n   // Set every third value to 255. A 24bpp bitmap will look red.  \n   for (int counter = 2; counter < rgbValues.Length; counter += 3)\n       rgbValues[counter] = 255;\n\n   // Copy the RGB values back to the bitmap\n   System.Runtime.InteropServices.Marshal.Copy(rgbValues, 0, ptr, bytes);\n\n   // Unlock the bits.\n   bmp.UnlockBits(bmpData);\n\n   // Draw the modified image.\n   e.Graphics.DrawImage(bmp, 0, 150);\n}