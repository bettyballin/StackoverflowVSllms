public class ResponseLoggerModule : IHttpModule\n{\n    private class ResponseCaptureStream : Stream\n    {\n        private readonly Stream _streamToCapture;\n        private readonly Encoding _responseEncoding;\n\n        private string _streamContent;\n        public string StreamContent\n        {\n            get { return _streamContent; }\n            private set\n            {\n                _streamContent = value;\n            }\n        }\n\n        public ResponseCaptureStream(Stream streamToCapture, Encoding responseEncoding)\n        {\n            _responseEncoding = responseEncoding;\n            _streamToCapture = streamToCapture;\n\n        }\n\n        public override bool CanRead\n        {\n            get { return _streamToCapture.CanRead; }\n        }\n\n        public override bool CanSeek\n        {\n            get { return _streamToCapture.CanSeek; }\n        }\n\n        public override bool CanWrite\n        {\n            get { return _streamToCapture.CanWrite; }\n        }\n\n        public override void Flush()\n        {\n            _streamToCapture.Flush();\n        }\n\n        public override long Length\n        {\n            get { return _streamToCapture.Length; }\n        }\n\n        public override long Position\n        {\n            get\n            {\n                return _streamToCapture.Position;\n            }\n            set\n            {\n                _streamToCapture.Position = value;\n            }\n        }\n\n        public override int Read(byte[] buffer, int offset, int count)\n        {\n            return _streamToCapture.Read(buffer, offset, count);\n        }\n\n        public override long Seek(long offset, SeekOrigin origin)\n        {\n            return _streamToCapture.Seek(offset, origin);\n        }\n\n        public override void SetLength(long value)\n        {\n            _streamToCapture.SetLength(value);\n        }\n\n        public override void Write(byte[] buffer, int offset, int count)\n        {\n            _streamContent += _responseEncoding.GetString(buffer);\n            _streamToCapture.Write(buffer, offset, count);\n        }\n\n        public override void Close()\n        {\n            _streamToCapture.Close();\n            base.Close();\n        }\n    }\n\n    #region IHttpModule Members\n\n    private HttpApplication _context;\n    public void Dispose()\n    {\n\n    }\n\n    public void Init(HttpApplication context)\n    {\n        _context = context;\n\n        context.PreRequestHandlerExecute += new EventHandler(context_PreRequestHandlerExecute);\n        context.PreSendRequestContent += new EventHandler(context_PreSendRequestContent);\n    }\n\n    void context_PreRequestHandlerExecute(object sender, EventArgs e)\n    {\n        _context.Response.Filter = new ResponseCaptureStream(_context.Response.Filter, _context.Response.ContentEncoding);\n    }\n\n    void context_PreSendRequestContent(object sender, EventArgs e)\n    {\n        ResponseCaptureStream filter = _context.Response.Filter as ResponseCaptureStream;\n\n        if (filter != null)\n        {\n            string responseText = filter.StreamContent;\n\n            // Logging logic here\n        }\n    }\n\n    #endregion\n}