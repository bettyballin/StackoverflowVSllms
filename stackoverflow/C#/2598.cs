/// <summary>\n        /// Encryps given file using PGP Public Key\n        /// </summary>\n        /// <param name="filename"></param>\n        public string Encrypt(string filename, bool isBinary, ref string outstr){\n\n            string outputfilename = filename;\n\n\n            //We use stringbuilder for performance considerations\n            StringBuilder sb = new StringBuilder();\n            sb.Append("/c ");\n            sb.Append("");\n            sb.Append(PGPLocation);\n            sb.Append(" +force -es ");\n            sb.Append("\"");\n            sb.Append(filename);\n            sb.Append("\" ");\n            sb.Append(ToUserName);\n            sb.Append(" -u ");\n            sb.Append(MyUserName);\n\n            sb.Append(" -z ");\n            sb.Append(PassPhrase);\n            sb.Append(" ");\n\n            // Use binary indicator because PGP produces different outputs for binary and plain text files\n            if (isBinary)\n                sb.Append("-a");\n\n            proc.StartInfo.Arguments = sb.ToString();\n\n\n            //proc.StartInfo.Arguments = "/c pgp +force -es "+filename+" cumacam -u bugra";\n\n\n            proc.Start();\n            if (WaitForInfinity)\n                proc.WaitForExit();\n            else\n                proc.WaitForExit(WaitTime);\n            //string res = proc.StandardOutput.ReadToEnd();\n\n            outstr = proc.StartInfo.Arguments;\n            if (proc.HasExited)\n            {\n                int ab = proc.ExitCode;\n                if (ab != 0)\n                {\n                    FireError(Convert.ToInt32(ErrorTypes.PGPEncryptError), "Erro No: " + ab.ToString() + "in PGP. Details: "+" "+proc.StandardOutput.ReadToEnd());\n                    return null;\n                }\n                else\n                    if (!isBinary)\n                        return outputfilename+".pgp";\n                return outputfilename + ".asc";\n            }\n\n            return null;\n        }