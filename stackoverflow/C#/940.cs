/// \n/// Server state holds current state of the client socket\n///\nclass AsyncServerState\n{\n   public byte[] Buffer = new byte[512]; //buffer for network i/o\n   public int DataSize = 0; //data size to be received by the server\n\n   //flag that indicates whether prefix was received\n   public bool DataSizeReceived = false;\n\n   public MemoryStream Data = new MemoryStream(); //place where data is stored\n   public SocketAsyncEventArgs ReadEventArgs = new SocketAsyncEventArgs();\n   public Socket Client;\n}\n\n/// \n/// Implements server receive logic\n/// \nprivate void ProcessReceive(SocketAsyncEventArgs e)\n{\n    //single message can be received using several receive operation\n    AsyncServerState state = e.UserToken as AsyncServerState;\n\n    if (e.BytesTransferred <= 0 || e.SocketError != SocketError.Success)\n    {\n        CloseConnection(e);\n    }\n\n    int dataRead = e.BytesTransferred;\n    int dataOffset = 0;\n    int restOfData = 0;\n\n    while (dataRead > 0)\n    {\n        if (!state.DataSizeReceived)\n        {\n            //there is already some data in the buffer\n            if (state.Data.Length > 0)\n            {\n                restOfData = PrefixSize - (int)state.Data.Length;\n                state.Data.Write(state.Buffer, dataOffset, restOfData);\n                dataRead -= restOfData;\n                dataOffset += restOfData;\n            }\n            else if (dataRead >= PrefixSize)\n            {   //store whole data size prefix\n                state.Data.Write(state.Buffer, dataOffset, PrefixSize);\n                dataRead -= PrefixSize;\n                dataOffset += PrefixSize;\n            }\n            else\n            {   // store only part of the size prefix\n                state.Data.Write(state.Buffer, dataOffset, dataRead);\n                dataOffset += dataRead;\n                dataRead = 0;\n            }\n\n            if (state.Data.Length == PrefixSize)\n            {   //we received data size prefix\n                state.DataSize = BitConverter.ToInt32(state.Data.GetBuffer(), 0);\n                state.DataSizeReceived = true;\n\n                state.Data.Position = 0;\n                state.Data.SetLength(0);\n            }\n            else\n            {   //we received just part of the headers information\n                //issue another read\n                if (!state.Client.ReceiveAsync(state.ReadEventArgs))\n                    ProcessReceive(state.ReadEventArgs);\n                    return;\n            }\n        }\n\n        //at this point we know the size of the pending data\n        if ((state.Data.Length + dataRead) >= state.DataSize)\n        {   //we have all the data for this message\n\n            restOfData = state.DataSize - (int)state.Data.Length;\n\n            state.Data.Write(state.Buffer, dataOffset, restOfData);\n            Console.WriteLine("Data message received. Size: {0}",\n                                  state.DataSize);\n\n            dataOffset += restOfData;\n            dataRead -= restOfData;\n\n            state.Data.SetLength(0);\n            state.Data.Position = 0;\n            state.DataSizeReceived = false;\n            state.DataSize = 0;\n\n            if (dataRead == 0)\n            {\n                if (!state.Client.ReceiveAsync(state.ReadEventArgs))\n                    ProcessReceive(state.ReadEventArgs);\n                    return;\n            }\n            else\n                continue;\n        }\n        else\n        {   //there is still data pending, store what we've\n            //received and issue another BeginReceive\n            state.Data.Write(state.Buffer, dataOffset, dataRead);\n\n            if (!state.Client.ReceiveAsync(state.ReadEventArgs))\n                ProcessReceive(state.ReadEventArgs);\n\n            dataRead = 0;\n        }\n    }\n}