/// <summary>\n/// Returns a list of all the Application Pools configured\n/// </summary>\n/// <returns></returns>\npublic ApplicationPool[] GetApplicationPools()\n{           \n    if (ServerType != WebServerTypes.IIS6 && ServerType != WebServerTypes.IIS7)\n        return null;\n\n    DirectoryEntry root = this.GetDirectoryEntry("IIS://" + this.DomainName + "/W3SVC/AppPools");\n      if (root == null)\n            return null;\n\n    List<ApplicationPool> Pools = new List<ApplicationPool>();\n\n    foreach (DirectoryEntry Entry in root.Children)\n    {\n        PropertyCollection Properties = Entry.Properties;\n\n        ApplicationPool Pool = new ApplicationPool();\n        Pool.Name = Entry.Name;\n\n        Pools.Add(Pool);\n    }\n\n    return Pools.ToArray();\n}\n\n/// <summary>\n/// Create a new Application Pool and return an instance of the entry\n/// </summary>\n/// <param name="AppPoolName"></param>\n/// <returns></returns>\npublic DirectoryEntry CreateApplicationPool(string AppPoolName)\n{\n    if (this.ServerType != WebServerTypes.IIS6 && this.ServerType != WebServerTypes.IIS7)\n        return null;\n\n    DirectoryEntry root = this.GetDirectoryEntry("IIS://" + this.DomainName + "/W3SVC/AppPools");\n    if (root == null)\n        return null;\n\n    DirectoryEntry AppPool = root.Invoke("Create", "IIsApplicationPool", AppPoolName) as DirectoryEntry;           \n    AppPool.CommitChanges();\n\n    return AppPool;\n}\n\n/// <summary>\n/// Returns an instance of an Application Pool\n/// </summary>\n/// <param name="AppPoolName"></param>\n/// <returns></returns>\npublic DirectoryEntry GetApplicationPool(string AppPoolName)\n{\n    DirectoryEntry root = this.GetDirectoryEntry("IIS://" + this.DomainName + "/W3SVC/AppPools/" + AppPoolName);\n    return root;\n}\n\n/// <summary>\n/// Retrieves an Adsi Node by its path. Abstracted for error handling\n/// </summary>\n/// <param name="Path">the ADSI path to retrieve: IIS://localhost/w3svc/root</param>\n/// <returns>node or null</returns>\nprivate DirectoryEntry GetDirectoryEntry(string Path)\n{\n\n    DirectoryEntry root = null;\n    try\n    {\n        root = new DirectoryEntry(Path);\n    }\n    catch\n    {\n        this.SetError("Couldn't access node");\n        return null;\n    }\n    if (root == null)\n    {\n        this.SetError("Couldn't access node");\n        return null;\n    }\n    return root;\n}