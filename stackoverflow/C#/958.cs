class MyObject\n{ // The actual object\n    public int ParentID { get; set; }\n    public int ID { get; set; }\n}\n\nclass Node\n{\n    public List<Node> Children = new List<Node>();\n    public Node Parent { get; set; }\n    public MyObject AssociatedObject { get; set; }\n}\n\nIEnumerable<Node> BuildTreeAndGetRoots(List<MyObject> actualObjects)\n{\n    Dictionary<int, Node> lookup = new Dictionary<int, Node>();\n    actualObjects.ForEach(x => lookup.Add(x.ID, new Node { AssociatedObject = x }));\n    foreach (var item in lookup.Values) {\n        Node proposedParent;\n        if (lookup.TryGetValue(item.AssociatedObject.ParentID, out proposedParent)) {\n            item.Parent = proposedParent;\n            proposedParent.Children.Add(item);\n        }\n    }\n    return lookup.Values.Where(x => x.Parent == null);\n}