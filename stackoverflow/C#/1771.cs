using System.Text.RegularExpressions;\n\nstring[] samples = {\n    @"Hellotoevryone<img height=""115"" width=""150"" alt="""" src=""/Content/Edt/image/b4976875-8dfb-444c-8b32-cc b47b2d81e0.jpg"" />Iamsogladtoseeall.",\n    "Testing123Hello.World",\n    @"Test<a href=""http://stackoverflow.com"">StackOverflow</a>",\n    @"Blah<a href=""http://stackoverflow.com"">StackOverflow</a>Blah<a href=""http://serverfault.com"">ServerFault</a>",\n    @"Test<a href=""http://serverfault.com"">Server Fault</a>", // has a space, not matched\n    "Stack Overflow" // has a space, not matched\n};\n\n// use these 2 lines if you don't want to use regex comments\n//string pattern = @"^((?:\S(?:\<[^>]+\>)?){1,10})+$";\n//Regex rx = new Regex(pattern);\n\n// regex comments spanning multiple lines requires use of RegexOptions.IgnorePatternWhitespace\nstring pattern = @"^(               # match line/string start, begin group\n                    (?:\S           # match (but don't capture) non-whitespace chars\n                    (?:\<[^>]+\>)?  # optionally match (doesn't capture) an html <...> tag\n                                    # to match img tags only change to (?:\<img[^>]+\>)?\n                    ){1,10}         # match upto 10 chars (tags don't count per your example)\n                    )+$             # match at least once, and match end of line/string\n                    ";\nRegex rx = new Regex(pattern, RegexOptions.IgnorePatternWhitespace);\n\nforeach (string sample in samples)\n{\n    if (rx.IsMatch(sample))\n    {\n        foreach (Match m in rx.Matches(sample))\n        {\n            // using group index 1, group 0 is the entire match which I'm not interested in\n            foreach (Capture c in m.Groups[1].Captures)\n            {\n                Console.WriteLine("Capture: {0} -- ({1})", c.Value, c.Value.Length);\n            }\n        }\n    }\n    else\n    {\n        Console.WriteLine("Not a match: {0}", sample);\n    }\n\n    Console.WriteLine();\n}