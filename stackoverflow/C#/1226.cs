public static class ListExtensions\n{\n    public static IEnumerable<T[]> Combinations<T>(this IEnumerable<T> elements, int k)\n    {\n        List<T[]> result = new List<T[]>();\n\n        if (k == 0)\n        {\n            // single combination: empty set\n            result.Add(new T[0]);\n        }\n        else\n        {\n            int current = 1;\n            foreach (T element in elements)\n            {\n                // combine each element with (k - 1)-combinations of subsequent elements\n                result.AddRange(elements\n                    .Skip(current++)\n                    .Combinations(k - 1)\n                    .Select(combination => (new T[] { element }).Concat(combination).ToArray())\n                    );\n            }\n        }\n\n        return result;\n    }\n}