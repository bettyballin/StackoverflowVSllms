using System;\nusing System.Runtime.InteropServices ;\nusing System.Threading;\n\nnamespace ExtremeMirror\n{\n    public class PinvokeWindowsNetworking\n    {\n        #region Consts\n        const int RESOURCE_CONNECTED = 0x00000001;\n        const int RESOURCE_GLOBALNET = 0x00000002;\n        const int RESOURCE_REMEMBERED = 0x00000003;\n\n        const int RESOURCETYPE_ANY = 0x00000000;\n        const int RESOURCETYPE_DISK = 0x00000001;\n        const int RESOURCETYPE_PRINT = 0x00000002;\n\n        const int RESOURCEDISPLAYTYPE_GENERIC = 0x00000000;\n        const int RESOURCEDISPLAYTYPE_DOMAIN = 0x00000001;\n        const int RESOURCEDISPLAYTYPE_SERVER = 0x00000002;\n        const int RESOURCEDISPLAYTYPE_SHARE = 0x00000003;\n        const int RESOURCEDISPLAYTYPE_FILE = 0x00000004;\n        const int RESOURCEDISPLAYTYPE_GROUP = 0x00000005;\n\n        const int RESOURCEUSAGE_CONNECTABLE = 0x00000001;\n        const int RESOURCEUSAGE_CONTAINER = 0x00000002;\n\n\n        const int CONNECT_INTERACTIVE = 0x00000008;\n        const int CONNECT_PROMPT = 0x00000010;\n        const int CONNECT_REDIRECT = 0x00000080;\n        const int CONNECT_UPDATE_PROFILE = 0x00000001;\n        const int CONNECT_COMMANDLINE = 0x00000800;\n        const int CONNECT_CMD_SAVECRED = 0x00001000;\n\n        const int CONNECT_LOCALDRIVE = 0x00000100;\n        #endregion\n\n        #region Errors\n        const int NO_ERROR = 0;\n\n        const int ERROR_ACCESS_DENIED = 5;\n        const int ERROR_ALREADY_ASSIGNED = 85;\n        const int ERROR_BAD_DEVICE = 1200;\n        const int ERROR_BAD_NET_NAME = 67;\n        const int ERROR_BAD_PROVIDER = 1204;\n        const int ERROR_CANCELLED = 1223;\n        const int ERROR_EXTENDED_ERROR = 1208;\n        const int ERROR_INVALID_ADDRESS = 487;\n        const int ERROR_INVALID_PARAMETER = 87;\n        const int ERROR_INVALID_PASSWORD = 1216;\n        const int ERROR_MORE_DATA = 234;\n        const int ERROR_NO_MORE_ITEMS = 259;\n        const int ERROR_NO_NET_OR_BAD_PATH = 1203;\n        const int ERROR_NO_NETWORK = 1222;\n\n        const int ERROR_BAD_PROFILE = 1206;\n        const int ERROR_CANNOT_OPEN_PROFILE = 1205;\n        const int ERROR_DEVICE_IN_USE = 2404;\n        const int ERROR_NOT_CONNECTED = 2250;\n        const int ERROR_OPEN_FILES  = 2401;\n\n        private struct ErrorClass \n        {\n            public int num;\n            public string message;\n            public ErrorClass(int num, string message) \n            {\n                this.num = num;\n                this.message = message;\n            }\n        }\n\n\n        // Created with excel formula:\n        // ="new ErrorClass("&A1&", """&PROPER(SUBSTITUTE(MID(A1,7,LEN(A1)-6), "_", " "))&"""), "\n        private static ErrorClass[] ERROR_LIST = new ErrorClass[] {\n            new ErrorClass(ERROR_ACCESS_DENIED, "Error: Access Denied"), \n            new ErrorClass(ERROR_ALREADY_ASSIGNED, "Error: Already Assigned"), \n            new ErrorClass(ERROR_BAD_DEVICE, "Error: Bad Device"), \n            new ErrorClass(ERROR_BAD_NET_NAME, "Error: Bad Net Name"), \n            new ErrorClass(ERROR_BAD_PROVIDER, "Error: Bad Provider"), \n            new ErrorClass(ERROR_CANCELLED, "Error: Cancelled"), \n            new ErrorClass(ERROR_EXTENDED_ERROR, "Error: Extended Error"), \n            new ErrorClass(ERROR_INVALID_ADDRESS, "Error: Invalid Address"), \n            new ErrorClass(ERROR_INVALID_PARAMETER, "Error: Invalid Parameter"), \n            new ErrorClass(ERROR_INVALID_PASSWORD, "Error: Invalid Password"), \n            new ErrorClass(ERROR_MORE_DATA, "Error: More Data"), \n            new ErrorClass(ERROR_NO_MORE_ITEMS, "Error: No More Items"), \n            new ErrorClass(ERROR_NO_NET_OR_BAD_PATH, "Error: No Net Or Bad Path"), \n            new ErrorClass(ERROR_NO_NETWORK, "Error: No Network"), \n            new ErrorClass(ERROR_BAD_PROFILE, "Error: Bad Profile"), \n            new ErrorClass(ERROR_CANNOT_OPEN_PROFILE, "Error: Cannot Open Profile"), \n            new ErrorClass(ERROR_DEVICE_IN_USE, "Error: Device In Use"), \n            new ErrorClass(ERROR_EXTENDED_ERROR, "Error: Extended Error"), \n            new ErrorClass(ERROR_NOT_CONNECTED, "Error: Not Connected"), \n            new ErrorClass(ERROR_OPEN_FILES, "Error: Open Files"), \n        };\n\n        private static string getErrorForNumber(int errNum) \n        {\n            foreach (ErrorClass er in ERROR_LIST) \n            {\n                if (er.num == errNum) return er.message;\n            }\n            return "Error: Unknown, " + errNum;\n        }\n        #endregion\n\n        [DllImport("Mpr.dll")] private static extern int WNetUseConnection(\n            IntPtr hwndOwner,\n            NETRESOURCE lpNetResource,\n            string lpPassword,\n            string lpUserID,\n            int dwFlags,\n            string lpAccessName,\n            string lpBufferSize,\n            string lpResult\n        );\n\n        [DllImport("Mpr.dll")] private static extern int WNetCancelConnection2(\n            string lpName,\n            int dwFlags,\n            bool fForce\n        );\n\n        [StructLayout(LayoutKind.Sequential)] private class NETRESOURCE\n        { \n            public int dwScope = 0;\n            public int dwType = 0;\n            public int dwDisplayType = 0;\n            public int dwUsage = 0;\n            public string lpLocalName = "";\n            public string lpRemoteName = "";\n            public string lpComment = "";\n            public string lpProvider = "";\n        }\n\n\n        public static string connectToRemote(string remoteUNC, string username, string password) \n        {\n            return connectToRemote(remoteUNC, username, password, false);\n        }\n\n        public static string connectToRemote(string remoteUNC, string username, string password, bool promptUser) \n        {\n            NETRESOURCE nr = new NETRESOURCE();\n            nr.dwType = RESOURCETYPE_DISK;\n            nr.lpRemoteName = remoteUNC;\n            //          nr.lpLocalName = "F:";\n\n            int ret;\n            if (promptUser) \n                ret = WNetUseConnection(IntPtr.Zero, nr, "", "", CONNECT_INTERACTIVE | CONNECT_PROMPT, null, null, null);\n            else \n                ret = WNetUseConnection(IntPtr.Zero, nr, password, username, 0, null, null, null);\n\n            if (ret == NO_ERROR) return null;\n            return getErrorForNumber(ret);\n        }\n\n        public static string disconnectRemote(string remoteUNC) \n        {\n            int ret = WNetCancelConnection2(remoteUNC, CONNECT_UPDATE_PROFILE, false);\n            if (ret == NO_ERROR) return null;\n            return getErrorForNumber(ret);\n        }\n    }\n}