public class xsltmanager\n{\n    /* constructor (singleton) which defines a file watcher for *.xsl in the path of your choice */\n\n    //just a mutex for thread safety\n    private object Mutex = new object();\n\n    //caching XslCompiledTransforms\n    private Dictionary<string, XslCompiledTransform> cTransforms = new Dictionary<string, XslCompiledTransform>();\n\n    public XslCompiledTransform fetch(string identifier)\n    {       \n        if (!this.cTransforms.ContainsKey(identifier))\n        {\n            lock (this.Mutex)\n            {\n                if (!this.cTransforms.ContainsKey(identifier))\n                {\n                    XslCompiledTransform xslDoc = new XslCompiledTransform();\n                    xslDoc.Load(/* file path based on identifier */);\n\n                    this.cTransforms.Add(identifier, xslDoc);\n                }\n            }\n        }\n        return this.cTransforms[identifier];\n    }\n\n    /* other util xslt methods - namespace wash, doc merge, whatever */\n}\n\npublic class myPage : System.Web.UI.Page\n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        //get source data\n        XPathDocument xPathDoc = myGetXMLMethod();\n\n        //transform params\n        XsltArgumentList oArgs = new XsltArgumentList();\n\n        /* add params as required */\n\n        //fetching and executing the transform directly to the Response here\n        xsltmanager.instance.get(@"foo\bar\baz").Transform(xPathDoc, oArgs, Response.OutputStream);\n    }\n}