/// <summary>\n/// This is a lable, in which you can set the text in any direction/angle\n/// </summary>\n\n#region Orientation\n\n//Orientation of the text\n\npublic enum Orientation\n{\n    Circle,\n    Arc,\n    Rotate\n}\n\npublic enum Direction\n{\n    Clockwise,\n    AntiClockwise\n}\n\n#endregion\n\npublic class OrientedTextLabel : System.Windows.Forms.Label\n{\n    #region Variables\n\n    private double rotationAngle;\n    private string text;\n    private Orientation textOrientation;\n    private Direction textDirection;\n\n    #endregion\n\n    #region Constructor\n\n    public OrientedTextLabel()\n    {\n        //Setting the initial condition.\n        rotationAngle = 0d;\n        textOrientation = Orientation.Rotate;\n        this.Size = new Size(105,12);\n    }\n\n    #endregion\n\n    #region Properties\n\n    [Description("Rotation Angle"),Category("Appearance")]\n    public double RotationAngle\n    {\n        get\n        {\n            return rotationAngle;\n        }\n        set\n        {\n            rotationAngle = value;\n            this.Invalidate();\n        }\n    }\n\n    [Description("Kind of Text Orientation"),Category("Appearance")]\n    public Orientation TextOrientation\n    {\n        get\n        {\n            return textOrientation;\n        }\n        set\n        {\n            textOrientation = value;\n            this.Invalidate();\n        }\n    }\n\n    [Description("Direction of the Text"),Category("Appearance")]\n    public Direction TextDirection\n    {\n        get\n        {\n            return textDirection;\n        }\n        set\n        {\n            textDirection = value;\n            this.Invalidate();\n        }\n    }\n\n    [Description("Display Text"),Category("Appearance")]\n    public override string Text\n    {\n        get\n        {\n            return text;\n        }\n        set\n        {\n            text = value;\n            this.Invalidate();\n        }\n    }\n\n    #endregion\n\n    #region Method\n\n    protected override void OnPaint(PaintEventArgs e)\n    {\n        Graphics graphics = e.Graphics;\n\n        StringFormat stringFormat = new StringFormat();\n        stringFormat.Alignment = StringAlignment.Center;\n        stringFormat.Trimming = StringTrimming.None;\n\n        Brush textBrush = new SolidBrush(this.ForeColor);\n\n        //Getting the width and height of the text, which we are going to write\n        float width = graphics.MeasureString(text,this.Font).Width;\n        float height = graphics.MeasureString(text,this.Font).Height;\n\n        //The radius is set to 0.9 of the width or height, b'cos not to\n        //hide and part of the text at any stage\n        float radius = 0f;\n        if (ClientRectangle.Width<ClientRectangle.Height)\n        {\n            radius = ClientRectangle.Width *0.9f/2;\n        }\n        else\n        {\n            radius = ClientRectangle.Height *0.9f/2;\n        }\n\n        //Setting the text according to the selection\n        switch (textOrientation)\n        {\n            case Orientation.Arc:\n            {\n                //Arc angle must be get from the length of the text.\n                float arcAngle = (2*width/radius)/text.Length;\n                if(textDirection == Direction.Clockwise)\n                {\n                    for (int i=0; i<text.Length; i++)\n                    {\n                        graphics.TranslateTransform(\n                            (float)(radius*(1 - Math.Cos(arcAngle*i + rotationAngle/180 * Math.PI))),\n                            (float)(radius*(1 - Math.Sin(arcAngle*i + rotationAngle/180*Math.PI))));\n                        graphics.RotateTransform((-90 + (float)rotationAngle + 180*arcAngle*i/(float)Math.PI));\n                        graphics.DrawString(text[i].ToString(), this.Font, textBrush, 0, 0);\n                        graphics.ResetTransform();\n                    }\n                }\n                else\n                {\n                    for (int i=0; i<text.Length; i++)\n                    {\n                        graphics.TranslateTransform(\n                            (float)(radius*(1 - Math.Cos(arcAngle*i + rotationAngle/180*Math.PI))),\n                            (float)(radius*(1 + Math.Sin(arcAngle*i + rotationAngle/180*Math.PI))));\n                        graphics.RotateTransform((-90 - (float)rotationAngle - 180*arcAngle*i/(float)Math.PI));\n                        graphics.DrawString(text[i].ToString(), this.Font, textBrush, 0, 0);\n                        graphics.ResetTransform();\n                    }\n                }\n                break;\n            }\n            case Orientation.Circle:\n            {\n                if (textDirection == Direction.Clockwise)\n                {\n                    for(int i=0;i<text.Length;i++)\n                    {\n                        graphics.TranslateTransform(\n                            (float)(radius*(1 - Math.Cos((2*Math.PI/text.Length)*i + rotationAngle/180*Math.PI))),\n                            (float)(radius*(1 - Math.Sin((2*Math.PI/text.Length)*i + rotationAngle/180*Math.PI))));\n                        graphics.RotateTransform(-90 + (float)rotationAngle + (360/text.Length)*i);\n                        graphics.DrawString(text[i].ToString(), this.Font, textBrush, 0, 0);\n                        graphics.ResetTransform();\n                    }\n                }\n                else\n                {\n                    for(int i=0;i<text.Length;i++)\n                    {\n                        graphics.TranslateTransform(\n                            (float)(radius*(1 - Math.Cos((2*Math.PI/text.Length)*i + rotationAngle/180*Math.PI))),\n                            (float)(radius*(1 + Math.Sin((2*Math.PI/text.Length)*i + rotationAngle/180*Math.PI))));\n                        graphics.RotateTransform(-90 - (float)rotationAngle - (360/text.Length)*i);\n                        graphics.DrawString(text[i].ToString(), this.Font, textBrush, 0, 0);\n                        graphics.ResetTransform();\n                    }\n\n                }\n                break;\n            }\n\n            case Orientation.Rotate:\n            {\n                //For rotation, who about rotation?\n                double angle = (rotationAngle/180)*Math.PI;\n                graphics.TranslateTransform(\n                    (ClientRectangle.Width+(float)(height*Math.Sin(angle))-(float)(width*Math.Cos(angle)))/2,\n                    (ClientRectangle.Height-(float)(height*Math.Cos(angle))-(float)(width*Math.Sin(angle)))/2);\n                graphics.RotateTransform((float)rotationAngle);\n                graphics.DrawString(text,this.Font,textBrush,0,0);\n                graphics.ResetTransform();\n\n                break;\n            }\n        }\n    }\n    #endregion\n}