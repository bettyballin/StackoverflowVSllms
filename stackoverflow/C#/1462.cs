[\nComVisible(true),\nGuidAttribute("..."),\nDescription("...")\n]\npublic interface IMyComVisibleClass\n{\n    // Text from the Description attribute will be exported to the COM type library.\n\n    [Description("...")]\n    MyResult MyMethod(...);\n\n    [Description("...")]\n    MyOtherResult MyArrayMethod([In] ref int[] ids,...);\n}\n...\n[\nComVisible(true),\nGuidAttribute("..."),\nProgId("..."),\nClassInterface(ClassInterfaceType.None),\nDescription("...")\n]\npublic class MyComVisibleClass : IMyComVisibleClass\n{\n    public MyResult MyMethod(...)\n    {\n        ... implementation without exception handling ...\n    }\n\n    public MyOtherResult MyArrayMethod(int[] ids,...)\n    {\n        ... input parameter does not use ref keyword for .NET clients ...\n        ... implementation without exception handling ...\n    }\n\n    MyResult IMyComVisibleClass.MyMethod(...)\n    {\n        // intended for COM clients only\n        try\n        {\n            return this.MyMethod(...);\n        }\n        catch(Exception ex)\n        {\n            ... log exception ...\n            throw;   // Optionally wrap in a custom exception type\n        }\n    }\n\n    MyOtherResult IMyComVisibleClass.MyArrayMethod(ref int[] ids, ...)\n    {\n        // intended for COM clients only\n        try\n        {\n            // Array is passed without ref keyword\n            return this.MyArrayMethod(ids, ...);\n        }\n        catch(Exception ex)\n        {\n            ... log exception ...\n            throw;   // Optionally wrap in a custom exception type\n        }\n    }\n\n}