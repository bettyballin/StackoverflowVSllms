int OverlappedStringLength(string s1, string s2) {\n        //Trim s1 so it isn't longer than s2\n        if (s1.Length > s2.Length) s1 = s1.Substring(s1.Length - s2.Length);\n\n        int[] T = ComputeBackTrackTable(s2); //O(n)\n\n        int m = 0;\n        int i = 0;\n        while (m + i < s1.Length) {\n            if (s2[i] == s1[m + i]) {\n                i += 1;\n                //<-- removed the return case here, because |s1| <= |s2|\n            } else {\n                m += i - T[i];\n                if (i > 0) i = T[i];\n            }\n        }\n\n        return i; //<-- changed the return here to return characters matched\n    }\n\n    int[] ComputeBackTrackTable(string s) {\n        var T = new int[s.Length];\n        int cnd = 0;\n        T[0] = -1;\n        T[1] = 0;\n        int pos = 2;\n        while (pos < s.Length) {\n            if (s[pos - 1] == s[cnd]) {\n                T[pos] = cnd + 1;\n                pos += 1;\n                cnd += 1;\n            } else if (cnd > 0) {\n                cnd = T[cnd];\n            } else {\n                T[pos] = 0;\n                pos += 1;\n            }\n        }\n\n        return T;\n    }