namespace Question651392\n{\n  public class First123 : I\n  {\n    public AbstractLetter P { get; set; }\n  }\n\n  public class Second123 : I\n  {\n    public AbstractLetter P { get; set; }\n  }\n\n  public class FirstABC : I\n  {\n    public AbstractLetter P { get; set; }\n  }\n\n  public class SecondABC : I\n  {\n    public AbstractLetter P { get; set; }\n  }\n\n  public interface I\n  {\n    AbstractLetter P { get; set; }\n  }\n\n  public abstract class AbstractLetter\n  {\n  }\n\n  public class B : AbstractLetter\n  {\n  }\n\n  public class A : AbstractLetter\n  {\n  }\n\n  public class RegistrationFacts\n  {\n    [Fact]\n    public void EnsureParametersCanBeSetWhenRegisteringComponentsInBulk()\n    {\n      WindsorContainer Container = new WindsorContainer();\n\n      Container.Register(Component.For<A>().Named("foo"));\n      Container.Register(Component.For<B>().Named("foobar"));\n\n      Container.Register(\n          AllTypes.Pick()\n          .FromAssembly(GetType().Assembly)\n          .If(t => t.Name.EndsWith("ABC"))\n          .Configure(c => c.LifeStyle.Is(LifestyleType.Transient))\n          .Configure(c=>c.Parameters(Parameter.ForKey("P").Eq("${foo}")))\n          .WithService.Select(new[] { typeof(I) })          \n      );\n\n      Container.Register(\n          AllTypes.Pick()\n          .FromAssembly(GetType().Assembly)\n          .If(t => t.Name.EndsWith("123"))\n          .Configure(c => c.LifeStyle.Is(LifestyleType.Transient))\n          .Configure(c => c.Parameters(Parameter.ForKey("P").Eq("${foobar}")))\n          .WithService.Select(new[] { typeof(I)})\n      );\n\n      var all = Container.ResolveAll<I>();\n\n      var firstABC = all.Single(i => i is FirstABC);\n      Assert.IsType(typeof(A), firstABC.P);\n\n      var first123 = all.Single(i => i is First123);\n      Assert.IsType(typeof (B), first123.P);\n\n      Assert.Equal(4, all.Count());\n    }\n  }\n}