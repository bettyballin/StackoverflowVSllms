using System;\nusing System.Linq;\nusing System.Collections;\nusing System.Collections.Generic;\npublic class Program\n{\n   public static void Main(string[] args)\n   {\n      /* Tree Structure\n\n         a\n          d\n           e   \n         b\n          f\n          i\n           j\n         c\n          g\n           h\n      */\n\n      var a = new Category("a", null);\n      var b = new Category("b", null);\n      var c = new Category("c", null);\n      var d = new Category("d", "a");\n      var e = new Category("e", "d");\n      var f = new Category("f", "b");\n      var g = new Category("g", "c");\n      var h = new Category("h", "g");\n      var i = new Category("i", "b");\n      var j = new Category("j", "i");\n      var k = new Category("k", "z");\n\n      var list = new CategoryCollection { k, j, i, h, g, f, e, d, c, b, a };\n      foreach (var category in list.SortForTree())\n      {\n         Console.WriteLine("Name: {0}; Parent: {1}", category.Name, category.ParentCategoryID);\n      }\n   }\n}\n\nclass Category\n{\n   public string ParentCategoryID { get; set; }\n   public string Name { get; set; }\n   public Category(string name, string parentCategoryID)\n   {\n      Name = name;\n      ParentCategoryID = parentCategoryID;\n   }\n}\n\nclass CategoryCollection : IEnumerable<Category>\n{\n   private List<Category> list = new List<Category>();\n\n   public void Add(Category category)\n   {\n      list.Add(category);\n   }\n\n   public IEnumerable<Category> SortForTree()\n   {\n      var target = new Dictionary<string, Category>();\n\n      SortForTree(list, target);\n\n      return target.Values;\n   }\n\n   private void SortForTree(List<Category> source, Dictionary<string, Category> target)\n   {\n      var temp = new List<Category>();\n\n      foreach (var c in source)\n      {\n         if (c.ParentCategoryID == null || (target.ContainsKey(c.ParentCategoryID) && !target.ContainsKey(c.Name)))\n         {\n            target.Add(c.Name, c);\n         }\n         else\n         {\n            if (source.Exists(o => o.Name == c.ParentCategoryID))\n            {\n               temp.Add(c);\n            }\n         }\n      }\n\n      if (temp.Count > 0) SortForTree(temp, target);\n   }\n\n   #region IEnumerable<Category> Members\n\n   public IEnumerator<Category> GetEnumerator()\n   {\n      return list.GetEnumerator();\n   }\n\n   #endregion\n\n   #region IEnumerable Members\n\n   IEnumerator IEnumerable.GetEnumerator()\n   {\n      return list.GetEnumerator();\n   }\n\n   #endregion\n}