public class Solver {\n\n    private List<List<decimal>> mResults;\n\n    public List<List<decimal>> Solve(decimal goal, decimal[] elements) {\n\n        mResults = new List<List<decimal>>();\n        RecursiveSolve(goal, 0.0m, \n            new List<decimal>(), new List<decimal>(elements), 0);\n        return mResults; \n    }\n\n    private void RecursiveSolve(decimal goal, decimal currentSum, \n        List<decimal> included, List<decimal> notIncluded, int startIndex) {\n\n        for (int index = startIndex; index < notIncluded.Count; index++) {\n\n            decimal nextValue = notIncluded[index];\n            if (currentSum + nextValue == goal) {\n                List<decimal> newResult = new List<decimal>(included);\n                newResult.Add(nextValue);\n                mResults.Add(newResult);\n            }\n            else if (currentSum + nextValue < goal) {\n                List<decimal> nextIncluded = new List<decimal>(included);\n                nextIncluded.Add(nextValue);\n                List<decimal> nextNotIncluded = new List<decimal>(notIncluded);\n                nextNotIncluded.Remove(nextValue);\n                RecursiveSolve(goal, currentSum + nextValue,\n                    nextIncluded, nextNotIncluded, startIndex++);\n            }\n        }\n    }\n}