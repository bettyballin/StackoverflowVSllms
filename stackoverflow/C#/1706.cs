public static Int32 BinarySearchIndexOf<T>(this IList<T> list, T value, IComparer<T> comparer = null)\n{\n    if (list == null)\n        throw new ArgumentNullException(nameof(list));\n\n    comparer = comparer ?? Comparer<T>.Default;\n\n    Int32 lower = 0;\n    Int32 upper = list.Count - 1;\n\n    while (lower <= upper)\n    {\n        Int32 middle = lower + (upper - lower) / 2;\n        Int32 comparisonResult = comparer.Compare(value, list[middle]);\n        if (comparisonResult == 0)\n            return middle;\n        else if (comparisonResult < 0)\n            upper = middle - 1;\n        else\n            lower = middle + 1;\n    }\n\n    return ~lower;\n}