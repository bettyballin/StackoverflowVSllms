public static class SqlResource\n{\n    private static Dictionary<string,SqlQuery> dictionary;\n\n    public static void Initialize(string file)\n    {\n        List<SqlQuery> list;\n\n        // deserialize the xml file\n        using (StreamReader streamReader = new StreamReader(file))\n        {\n            XmlSerializer deserializer = new XmlSerializer(typeof(List<SqlQuery>));\n            list = (List<SqlQuery>)deserializer.Deserialize(streamReader);\n        }\n        dictionary = new Dictionary<string,SqlQuery>();\n        foreach(var item in list )\n        {\n            dictionary.Add(item.Name,item);\n        }\n    }\n    public static SqlQuery GetQueryByName(string name)\n    {\n        SqlQuery query = dictionary[name];\n\n        if( query == null )\n            throw new ArgumentException("The query '" + name + "' is not valid.");\n\n        if( query.IsObsolete )\n        {\n           // TODO - log this.\n        }\n        return query;\n\n    }\n}\n\npublic sealed class SqlQuery\n{\n    [XmlAttributeAttribute("name")]\n    public bool Name { get; set; }\n\n    [XmlElement("Sql")]\n    public bool Sql { get; set; }\n\n    [XmlAttributeAttribute("obsolete")]\n    public bool IsObsolete { get; set; }\n\n    [XmlIgnore]\n    public TimeSpan Timeout { get; set;}\n\n    /// <summary>\n    /// Serialization only - XmlSerializer can't serialize normally\n    /// </summary>\n    [XmlAttribute("timeout")]\n    public string Timeout_String \n    {\n        get { return Timeout.ToString();  }\n        set { Timeout = TimeSpan.Parse(value); } \n    }\n}