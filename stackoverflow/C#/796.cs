/// <summary>\n    /// object interface to the JIRA API\n    /// </summary>\n    private readonly JiraSoapServiceClient _JiraService;\n\n    /// <summary>\n    /// authentication token returned by the login method \n    /// that can be used on all other SOAP methods\n    /// </summary>\n    private readonly string _Token;\n\n    /// <summary>\n    /// name of the RemoteProjectRole "Developers"\n    /// </summary>\n    private const string DEVELOPER_ROLE = "Developers";\n\n    /// <summary>\n    /// id of the RemoteProjectRole "Developers"\n    /// </summary>\n    private static long? _DeveloperId;\n\n    /// <summary>\n    /// return the list of the names of all the users who have\n    /// the role "Developers" in a project\n    /// </summary>\n    /// <param name="project"></param>\n    /// <returns></returns>\n    public List<string> GetUsersForProject(string project)\n    {\n        List<string> users = new List<string>();\n        try\n        {\n            // get the RemoteProject\n            RemoteProject rp = _JiraService.getProjectByKey(_Token, project);\n\n            // get the "Developers" Prject Role\n            RemoteProjectRole developerRole = getDeveloperRole();\n\n            if (developerRole != null)\n            {\n                // we can use this method only if the user logged in is an administrator\n                RemoteRoleActors actors = _JiraService.getProjectRoleActors(_Token, developerRole, rp);\n                foreach (RemoteRoleActor actor in actors.roleActors)\n                {\n                    foreach (RemoteUser user in actor.users)\n                    {\n                        users.Add(user.name);\n                    }\n                }\n            }\n        }\n        catch (Exception ex)\n        {\n            // TODO log the error\n\n            users.Clear();\n        }\n        users.Sort();\n        return users;\n    }\n\n    /// <summary>\n    /// return the RemoteProjectRole "Developers"\n    /// </summary>\n    /// <returns></returns>\n    private RemoteProjectRole getDeveloperRole()\n    {\n        RemoteProjectRole developerRole = null;\n        if (_DeveloperId == null)\n        {\n            // the first time we call this function we don't know the id of this role\n            // that's why we are obliged to find it with a foreach on all the project roles\n            foreach (RemoteProjectRole role in _JiraService.getProjectRoles(_Token))\n            {\n                if (role.name == DEVELOPER_ROLE)\n                {\n                    developerRole = role;\n                    _DeveloperId = role.id;\n                    break;\n                }\n            }\n        }\n        else\n        {\n            // we have the id so we can get directly the RemoteProjectRole from the JIRA SOAP API\n            developerRole = _JiraService.getProjectRole(_Token, (long)_DeveloperId);\n        }\n\n        return developerRole;\n    }