grid = "fxie amlo ewbx astu".split()\nnrows, ncols = len(grid), len(grid[0])\n\n# A dictionary word that could be a solution must use only the grid's\n# letters and have length >= 3. (With a case-insensitive match.)\nimport re\nalphabet = ''.join(set(''.join(grid)))\nbogglable = re.compile('[' + alphabet + ']{3,}$', re.I).match\n\nwords = set(word.rstrip('\n') for word in open('words') if bogglable(word))\nprefixes = set(word[:i] for word in words\n               for i in range(2, len(word)+1))\n\ndef solve():\n    for y, row in enumerate(grid):\n        for x, letter in enumerate(row):\n            for result in extending(letter, ((x, y),)):\n                yield result\n\ndef extending(prefix, path):\n    if prefix in words:\n        yield (prefix, path)\n    for (nx, ny) in neighbors(path[-1]):\n        if (nx, ny) not in path:\n            prefix1 = prefix + grid[ny][nx]\n            if prefix1 in prefixes:\n                for result in extending(prefix1, path + ((nx, ny),)):\n                    yield result\n\ndef neighbors((x, y)):\n    for nx in range(max(0, x-1), min(x+2, ncols)):\n        for ny in range(max(0, y-1), min(y+2, nrows)):\n            yield (nx, ny)