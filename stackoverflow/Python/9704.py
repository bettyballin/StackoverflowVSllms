def team(t):\n    iterations = range(2, len(t)/2+1)\n\n    totalscore = sum(t)\n    halftotalscore = totalscore/2.0\n\n    oldmoves = {}\n\n    for p in t:\n        people_left = t[:]\n        people_left.remove(p)\n        oldmoves[p] = people_left\n\n    if iterations == []:\n        solution = min(map(lambda i: (abs(float(i)-halftotalscore), i), oldmoves.keys()))\n        return (solution[1], sum(oldmoves[solution[1]]), oldmoves[solution[1]])\n\n    for n in iterations:\n        newmoves = {}\n        for total, roster in oldmoves.iteritems():\n            for p in roster:\n                people_left = roster[:]\n                people_left.remove(p)\n                newtotal = total+p\n                if newtotal > halftotalscore: continue\n                newmoves[newtotal] = people_left\n        oldmoves = newmoves\n\n    solution = min(map(lambda i: (abs(float(i)-halftotalscore), i), oldmoves.keys()))\n    return (solution[1], sum(oldmoves[solution[1]]), oldmoves[solution[1]])\n\nprint team([90,200,100])\nprint team([2,3,10,5,8,9,7,3,5,2])\nprint team([1,1,1,1,1,1,1,1,1,9])\nprint team([87,100,28,67,68,41,67,1])\nprint team([1, 1, 50, 50, 50, 1000])\n\n#output\n#(200, 190, [90, 100])\n#(27, 27, [3, 9, 7, 3, 5])\n#(5, 13, [1, 1, 1, 1, 9])\n#(229, 230, [28, 67, 68, 67])\n#(150, 1002, [1, 1, 1000])