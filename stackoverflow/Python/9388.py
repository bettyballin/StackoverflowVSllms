from twisted.internet import reactor, protocol, task\n\nclass MyProtocol(protocol.Protocol):\n    def connectionMade(self):\n        self.factory.clientConnectionMade(self)\n    def connectionLost(self, reason):\n        self.factory.clientConnectionLost(self)\n\nclass MyFactory(protocol.Factory):\n    protocol = MyProtocol\n    def __init__(self):\n        self.clients = []\n        self.lc = task.LoopingCall(self.announce)\n        self.lc.start(10)\n\n    def announce(self):\n        for client in self.clients:\n            client.transport.write("10 seconds has passed\n")\n\n    def clientConnectionMade(self, client):\n        self.clients.append(client)\n\n    def clientConnectionLost(self, client):\n        self.clients.remove(client)\n\nmyfactory = MyFactory()\nreactor.listenTCP(9000, myfactory)\nreactor.run()