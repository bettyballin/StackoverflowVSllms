import sys\nimport codecs\nimport chardet\nfrom chardet.universaldetector import UniversalDetector\n\n""" Detects encoding\n\nReturns chardet result"""\ndef DetectEncoding(fileHdl):\ndetector = UniversalDetector()\nfor line in fileHdl:\n    detector.feed(line)\n    if detector.done: break\ndetector.close()\nreturn detector.result\n\n\n""" Reencode file to UTF-8\n"""\ndef ReencodeFileToUtf8(fileName, encoding):\n    #TODO: This is dangerous ^^||, would need a backup option :)\n    #NOTE: Use 'replace' option which tolerates errorneous characters\n    data = codecs.open(fileName, 'rb', encoding, 'replace').read()\n    open(fileName, 'wb').write(data.encode('utf-8', 'replace'))\n\n""" Main function\n"""\nif __name__=='__main__':\n    # Check for arguments first\n    if len(sys.argv) <> 2:\n    sys.exit("Invalid arguments supplied")\n\n    fileName = sys.argv[1]\n    try:\n        # Open file and detect encoding\n        fileHdl = open(fileName, 'rb')\n        encResult = DetectEncoding(fileHdl)\n        fileHdl.close()\n\n        # Was it an empty file?\n        if encResult['confidence'] == 0 and encResult['encoding'] == None:\n            sys.exit("Possible empty file")\n\n        # Only attempt to reencode file if we are confident about the\n        # encoding and if it's not UTF-8\n        encoding = encResult['encoding'].lower()\n        if encResult['confidence'] >= 0.7:\n            if encoding != 'utf-8':\n                ReencodeFileToUtf8(fileName, encoding)\n        else:\n            # TODO: Probably you could make a default guess and try to encode, or\n            #       just simply make it fail\n\n        except IOError:\n            sys.exit('An IOError occured')