## Algorithm written in Python ##\n## CodePad.org has a Python interpreter\n\nGroup1 = [1,2,3] ## Within itself, each group must be composed of unique numbers\nGroup2 = [2,3,4]\nGroup3 = [3,4,5]\nGroups = [Group1,Group2,Group3] ## Must contain at least one Group\n\nPermutations = [] ## List of valid permutations\n\ndef getPermutations(group, permSoFar, nextGroupIndex):\n  for num in group:\n    nextPermSoFar = list(permSoFar) ## Make a copy of the permSoFar list\n\n    ## Only proceed if num isn't a repeat in nextPermSoFar\n    if nextPermSoFar.count(num) == 0: \n      nextPermSoFar.append(num)  ## Add num to this copy of nextPermSoFar\n\n      if nextGroupIndex != len(Groups): ## Call next group if there is one...\n        getPermutations(Groups[nextGroupIndex], nextPermSoFar, nextGroupIndex + 1)\n      else: ## ...or add the valid permutation to the list of permutations\n        Permutations.append(nextPermSoFar)\n\n## Call getPermutations with:\n##  * the first group from the list of Groups\n##  * an empty list\n##  * the index of the second group\ngetPermutations(Groups[0], [], 1)\n\n## print results of getPermutations\nprint 'There are', len(Permutations), 'valid permutations:'\nprint Permutations