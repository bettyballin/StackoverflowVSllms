using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class SamlAssertion\n{\n    public string Issuer { get; set; }\n    public string Subject { get; set; }\n    public DateTime NotBefore { get; set; }\n    public DateTime NotOnOrAfter { get; set; }\n    public string Audience { get; set; }\n\n    public string GenerateAssertion()\n    {\n        var xml = new StringBuilder();\n        xml.Append("<saml:Assertion xmlns:saml='urn:oasis:names:tc:SAML:2.0:assertion'>");\n        xml.Append("<saml:Issuer>" + Issuer + "</saml:Issuer>");\n        xml.Append("<saml:Subject>");\n        xml.Append("<saml:NameID>" + Subject + "</saml:NameID>");\n        xml.Append("</saml:Subject>");\n        xml.Append("<saml:Conditions NotBefore='" + NotBefore.ToString("o") + "' NotOnOrAfter='" + NotOnOrAfter.ToString("o") + "'>");\n        xml.Append("<saml:AudienceRestriction>");\n        xml.Append("<saml:Audience>" + Audience + "</saml:Audience>");\n        xml.Append("</saml:AudienceRestriction>");\n        xml.Append("</saml:Conditions>");\n        xml.Append("</saml:Assertion>");\n\n        var assertion = xml.ToString();\n        var certificate = new X509Certificate2("path_to_your_certificate.pfx", "password");\n        var privateKey = certificate.PrivateKey;\n        var signature = Sign(assertion, privateKey);\n        return assertion + "<Signature xmlns='http://www.w3.org/2000/09/xmldsig#'>" + signature + "</Signature>";\n    }\n\n    private string Sign(string data, AsymmetricAlgorithm key)\n    {\n        var signatureFormatter = new RSAPKCS1SignatureFormatter(key);\n        var hash = new SHA1Managed().ComputeHash(Encoding.UTF8.GetBytes(data));\n        var signature = signatureFormatter.CreateSignature(hash);\n        return Convert.ToBase64String(signature);\n    }\n}