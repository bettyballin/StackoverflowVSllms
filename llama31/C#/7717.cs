using System;\nusing System.Collections.Generic;\nusing System.Runtime.InteropServices;\nusing System.Security;\n\nnamespace CallGraphProfiler\n{\n    [ComVisible(true)]\n    [ClassInterface(ClassInterfaceType.AutoDispatch)]\n    public class CallGraphProfiler : ICorProfiler\n    {\n        private List<MethodCall> _methodCalls = new List<MethodCall>();\n\n        public void JITCompilationStarted(IntPtr methodId, IntPtr methodHandle)\n        {\n            // Instrument the method with a call to our logging function\n            var method = GetMethodFromHandle(methodHandle);\n            var loggingMethod = typeof(CallGraphProfiler).GetMethod("LogMethodCall");\n            method.Invoke(loggingMethod);\n        }\n\n        public void LogMethodCall(MethodBase caller, MethodBase callee)\n        {\n            _methodCalls.Add(new MethodCall { Caller = caller, Callee = callee });\n        }\n\n        public void Shutdown()\n        {\n            // Create a call graph from the recorded data\n            var graph = new Graph();\n            foreach (var methodCall in _methodCalls)\n            {\n                graph.AddEdge(methodCall.Caller.Name, methodCall.Callee.Name);\n            }\n\n            // Visualize the graph using Graphviz\n            graph.ToDotFile("callgraph.dot");\n        }\n\n        private MethodBase GetMethodFromHandle(IntPtr methodHandle)\n        {\n            // Implementation omitted for brevity\n        }\n    }\n\n    public class MethodCall\n    {\n        public MethodBase Caller { get; set; }\n        public MethodBase Callee { get; set; }\n    }\n\n    public class Graph\n    {\n        private Dictionary<string, Node> _nodes = new Dictionary<string, Node>();\n\n        public void AddEdge(string caller, string callee)\n        {\n            var callerNode = GetOrCreateNode(caller);\n            var calleeNode = GetOrCreateNode(callee);\n            callerNode.Edges.Add(calleeNode);\n        }\n\n        public void ToDotFile(string filename)\n        {\n            using (var writer = File.CreateText(filename))\n            {\n                writer.WriteLine("digraph callgraph {");\n                foreach (var node in _nodes.Values)\n                {\n                    writer.WriteLine($"  {node.Name} -> {{");\n                    foreach (var edge in node.Edges)\n                    {\n                        writer.WriteLine($"    {edge.Name};");\n                    }\n                    writer.WriteLine("  }");\n                }\n                writer.WriteLine("}");\n            }\n        }\n\n        private Node GetOrCreateNode(string name)\n        {\n            if (!_nodes.TryGetValue(name, out var node))\n            {\n                node = new Node { Name = name };\n                _nodes.Add(name, node);\n            }\n            return node;\n        }\n    }\n\n    public class Node\n    {\n        public string Name { get; set; }\n        public List<Node> Edges { get; } = new List<Node>();\n    }\n}