using Microsoft.Win32;\nusing System;\nusing System.Security.Permissions;\n\npublic class RegistryWatcher\n{\n    private const string REGISTRY_KEY = "HKEY_CURRENT_USER\\YourKey";\n\n    [PermissionSet(SecurityAction.Demand, Name = "FullTrust")]\n    public RegistryWatcher()\n    {\n        RegistryKey key = Registry.CurrentUser.OpenSubKey(REGISTRY_KEY);\n        if (key != null)\n        {\n            key.Changed += new EventHandler(OnChanged);\n        }\n    }\n\n    private void OnChanged(object sender, EventArgs e)\n    {\n        RegistryKey key = (RegistryKey)sender;\n        string[] values = key.GetValueNames();\n        foreach (string value in values)\n        {\n            object oldValue = null;\n            object newValue = key.GetValue(value);\n            // Fire an event with the old and new value\n            RegistryValueChangedEventArgs args = new RegistryValueChangedEventArgs(value, oldValue, newValue);\n            OnRegistryValueChanged(args);\n        }\n    }\n\n    public event EventHandler<RegistryValueChangedEventArgs> RegistryValueChanged;\n\n    protected virtual void OnRegistryValueChanged(RegistryValueChangedEventArgs e)\n    {\n        RegistryValueChanged?.Invoke(this, e);\n    }\n}\n\npublic class RegistryValueChangedEventArgs : EventArgs\n{\n    public string ValueName { get; private set; }\n    public object OldValue { get; private set; }\n    public object NewValue { get; private set; }\n\n    public RegistryValueChangedEventArgs(string valueName, object oldValue, object newValue)\n    {\n        ValueName = valueName;\n        OldValue = oldValue;\n        NewValue = newValue;\n    }\n}