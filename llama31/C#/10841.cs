public class EntityConverter<TSource, TTarget> \n    where TSource : class \n    where TTarget : class\n{\n    public TTarget Convert(TSource source)\n    {\n        TTarget target = Activator.CreateInstance<TTarget>();\n\n        // Map basic properties\n        foreach (PropertyInfo sourceProperty in source.GetType().GetProperties())\n        {\n            PropertyInfo targetProperty = target.GetType().GetProperty(sourceProperty.Name);\n            if (targetProperty != null)\n            {\n                targetProperty.SetValue(target, sourceProperty.GetValue(source, null), null);\n            }\n        }\n\n        // Map associations\n        foreach (PropertyInfo sourceProperty in source.GetType().GetProperties())\n        {\n            if (sourceProperty.PropertyType.IsGenericType && sourceProperty.PropertyType.GetGenericTypeDefinition() == typeof(EntitySet<>))\n            {\n                // Get the associated entities\n                EntitySet<object> sourceEntities = (EntitySet<object>)sourceProperty.GetValue(source, null);\n\n                // Create a new list to hold the converted entities\n                IList<object> targetEntities = new List<object>();\n\n                // Convert each associated entity\n                foreach (object sourceEntity in sourceEntities)\n                {\n                    object targetEntity = ConvertEntity(sourceEntity);\n                    targetEntities.Add(targetEntity);\n                }\n\n                // Set the associated entities on the target\n                PropertyInfo targetProperty = target.GetType().GetProperty(sourceProperty.Name);\n                targetProperty.SetValue(target, targetEntities, null);\n            }\n        }\n\n        return target;\n    }\n\n    private object ConvertEntity(object sourceEntity)\n    {\n        // You can implement this method to convert the associated entity\n        // using the same approach as the Convert method\n    }\n}