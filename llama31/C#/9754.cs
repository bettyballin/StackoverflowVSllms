public sealed class AlphaImage : IDisposable {\n    IImage _image;\n    Size _size;\n    IntPtr _bufferPtr;\n\n    public static AlphaImage CreateFromBuffer(byte[] buffer, long size) {\n        AlphaImage instance = new AlphaImage();\n        IImage img;\n        instance._bufferPtr = Marshal.AllocHGlobal((int)size);\n        Marshal.Copy(buffer, 0, instance._bufferPtr, (int)size);\n        GetIImagingFactory().CreateImageFromBuffer(instance._bufferPtr, (uint)size, BufferDisposalFlag.BufferDisposalFlagGlobalFree, out img);\n        instance.SetImage(img);\n        return instance;\n    }\n\n    void SetImage(IImage image) {\n        _image = image;\n        ImageInfo imgInfo;\n        _image.GetImageInfo(out imgInfo);\n        _size = new Size((int)imgInfo.Width, (int)imgInfo.Height);\n    }\n\n    ~AlphaImage() {\n        Dispose(false);\n    }\n\n    public void Dispose() {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    void Dispose(bool disposing) {\n        if (disposing) {\n            // Dispose managed resources\n        }\n        Marshal.FinalReleaseComObject(_image);\n        Marshal.FreeHGlobal(_bufferPtr);\n    }\n}