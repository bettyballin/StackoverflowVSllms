public static Bitmap CropWhitespace(Bitmap bitmap)\n{\n    int top = bitmap.Height;\n    int left = bitmap.Width;\n    int right = 0;\n    int bottom = 0;\n\n    BitmapData data = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadOnly, PixelFormat.Format32bppArgb);\n    try\n    {\n        unsafe\n        {\n            byte* pData0 = (byte*)data.Scan0.ToPointer();\n            for (int y = 0; y < bitmap.Height; y++)\n            {\n                byte* pData = pData0 + (y * data.Stride);\n                for (int x = 0; x < bitmap.Width; x++)\n                {\n                    byte* xyData = pData + (x * 4);\n                    byte xyAlpha = xyData[3];\n                    byte xyBlue = xyData[0];\n                    byte xyGreen = xyData[1];\n                    byte xyRed = xyData[2];\n\n                    if ((xyAlpha > 0) || (xyRed != 255 && xyGreen != 255 && xyBlue != 255))\n                    {\n                        if (y < top) top = y;\n                        if (y > bottom) bottom = y;\n                        if (x < left) left = x;\n                        if (x > right) right = x;\n                    }\n                }\n            }\n        }\n    }\n    finally\n    {\n        bitmap.UnlockBits(data);\n    }\n\n    int cropWidth = right - left + 1;\n    int cropHeight = bottom - top + 1;\n    int cropX = left;\n    int cropY = top;\n\n    var cacheBitmap = new Bitmap(cropWidth, cropHeight, PixelFormat.Format32bppArgb);\n    using (var cacheGraphics = Graphics.FromImage(cacheBitmap))\n    {\n        cacheGraphics.DrawImage(bitmap, new Rectangle(0, 0, cropWidth, cropHeight), cropX, cropY, cropWidth, cropHeight, GraphicsUnit.Pixel);\n    }\n\n    return cacheBitmap;\n}