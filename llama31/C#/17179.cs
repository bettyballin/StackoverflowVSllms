using System;\nusing System.IO;\nusing System.Runtime.InteropServices;\nusing System.Security.AccessControl;\n\npublic class AlternateDataStream\n{\n    [DllImport("kernel32.dll", CharSet = CharSet.Unicode)]\n    private static extern IntPtr CreateFile(\n        string lpFileName,\n        uint dwDesiredAccess,\n        uint dwShareMode,\n        IntPtr lpSecurityAttributes,\n        uint dwCreationDisposition,\n        uint dwFlagsAndAttributes,\n        IntPtr hTemplateFile\n    );\n\n    [DllImport("kernel32.dll")]\n    private static extern bool ReadFile(\n        IntPtr hFile,\n        byte[] lpBuffer,\n        uint nNumberOfBytesToRead,\n        out uint lpNumberOfBytesRead,\n        IntPtr lpOverlapped\n    );\n\n    [DllImport("kernel32.dll")]\n    private static extern bool WriteFile(\n        IntPtr hFile,\n        byte[] lpBuffer,\n        uint nNumberOfBytesToWrite,\n        out uint lpNumberOfBytesWritten,\n        IntPtr lpOverlapped\n    );\n\n    [DllImport("kernel32.dll")]\n    private static extern bool CloseHandle(IntPtr hObject);\n\n    private const uint GENERIC_READ = 0x80000000;\n    private const uint GENERIC_WRITE = 0x40000000;\n    private const uint FILE_SHARE_READ = 0x00000001;\n    private const uint FILE_SHARE_WRITE = 0x00000002;\n    private const uint CREATE_ALWAYS = 2;\n    private const uint OPEN_EXISTING = 3;\n    private const uint FILE_ATTRIBUTE_NORMAL = 0x00000080;\n\n    public static void ReadAlternateDataStream(string filePath, string streamName)\n    {\n        string streamPath = $"{filePath}:{streamName}";\n        IntPtr hFile = CreateFile(streamPath, GENERIC_READ, FILE_SHARE_READ, IntPtr.Zero, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, IntPtr.Zero);\n        if (hFile != IntPtr.Zero)\n        {\n            byte[] buffer = new byte[1024];\n            uint bytesRead;\n            while (ReadFile(hFile, buffer, (uint)buffer.Length, out bytesRead, IntPtr.Zero))\n            {\n                Console.Write(System.Text.Encoding.UTF8.GetString(buffer, 0, (int)bytesRead));\n            }\n            CloseHandle(hFile);\n        }\n    }\n\n    public static void WriteAlternateDataStream(string filePath, string streamName, byte[] data)\n    {\n        string streamPath = $"{filePath}:{streamName}";\n        IntPtr hFile = CreateFile(streamPath, GENERIC_WRITE, FILE_SHARE_WRITE, IntPtr.Zero, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, IntPtr.Zero);\n        if (hFile != IntPtr.Zero)\n        {\n            uint bytesWritten;\n            WriteFile(hFile, data, (uint)data.Length, out bytesWritten, IntPtr.Zero);\n            CloseHandle(hFile);\n        }\n    }\n}