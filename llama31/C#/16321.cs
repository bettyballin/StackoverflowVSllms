using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class PasswordRecoveryService\n{\n    private readonly string _connectionString;\n\n    public PasswordRecoveryService(string connectionString)\n    {\n        _connectionString = connectionString;\n    }\n\n    public string GenerateToken(int memberId)\n    {\n        // Generate a cryptographically secure random string\n        var token = Convert.ToBase64String(RandomNumberGenerator.GetBytes(32));\n\n        // Store the token in the database\n        using (var connection = new SqlConnection(_connectionString))\n        {\n            connection.Open();\n            var command = new SqlCommand("INSERT INTO PasswordRecoveryTokens (MemberId, Token, ExpirationDate) VALUES (@MemberId, @Token, @ExpirationDate)", connection);\n            command.Parameters.AddWithValue("@MemberId", memberId);\n            command.Parameters.AddWithValue("@Token", token);\n            command.Parameters.AddWithValue("@ExpirationDate", DateTime.UtcNow.AddHours(1));\n            command.ExecuteNonQuery();\n        }\n\n        return token;\n    }\n\n    public bool ValidateToken(string token)\n    {\n        using (var connection = new SqlConnection(_connectionString))\n        {\n            connection.Open();\n            var command = new SqlCommand("SELECT MemberId FROM PasswordRecoveryTokens WHERE Token = @Token AND ExpirationDate > @CurrentDate", connection);\n            command.Parameters.AddWithValue("@Token", token);\n            command.Parameters.AddWithValue("@CurrentDate", DateTime.UtcNow);\n            var memberId = command.ExecuteScalar();\n\n            if (memberId != null)\n            {\n                // Token is valid, allow password reset\n                return true;\n            }\n        }\n\n        return false;\n    }\n}