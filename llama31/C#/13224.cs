public static DataSet FillDataSet<T>(T dataSet, string storedProcedureName, Dictionary<string, string> parameters) \n    where T : DataSet\n{\n    // Create a new instance of the SqlDataAdapter\n    using (SqlDataAdapter adapter = new SqlDataAdapter(storedProcedureName, connectionString))\n    {\n        // Add the parameters to the command\n        foreach (var parameter in parameters)\n        {\n            adapter.SelectCommand.Parameters.AddWithValue(parameter.Key, parameter.Value);\n        }\n\n        // Create a new DataSetMappingFactory\n        var mappingFactory = new DataSetMappingFactory();\n\n        // Get the mappings for the dataset\n        var mappings = mappingFactory.GetMapping(dataSet);\n\n        // Fill the dataset\n        adapter.Fill(dataSet);\n\n        // Map the tables\n        foreach (var mapping in mappings)\n        {\n            dataSet.Tables[mapping.Key].TableName = mapping.Value;\n        }\n    }\n\n    return dataSet;\n}\n\npublic class DataSetMappingFactory\n{\n    private Dictionary<Type, Dictionary<string, string>> mappings = new Dictionary<Type, Dictionary<string, string>>();\n\n    public Dictionary<string, string> GetMapping(object dataSet)\n    {\n        var type = dataSet.GetType();\n\n        if (mappings.ContainsKey(type))\n        {\n            return mappings[type];\n        }\n\n        // Add a new mapping for the dataset\n        var mapping = new Dictionary<string, string>();\n\n        // You can use reflection or other methods to determine the mappings\n        // For example:\n        var tables = dataSet.GetType().GetProperties().Where(p => p.PropertyType == typeof(DataTable));\n\n        foreach (var table in tables)\n        {\n            mapping.Add(table.Name, table.Name);\n        }\n\n        mappings.Add(type, mapping);\n\n        return mapping;\n    }\n}