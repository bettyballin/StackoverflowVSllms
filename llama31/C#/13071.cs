using System;\nusing System.Runtime.InteropServices;\nusing System.Security.Principal;\n\npublic class MutexOwner\n{\n    [DllImport("kernel32", SetLastError = true)]\n    private static extern bool GetMutexSecurity(IntPtr handle, int requestedInformation, out IntPtr securityDescriptor, int length, out int lengthNeeded);\n\n    [DllImport("advapi32", SetLastError = true)]\n    private static extern bool LookupAccountSid(string lpSystemName, IntPtr Sid, StringBuilder lpName, ref int cchName, StringBuilder lpReferencedDomainName, ref int cchReferencedDomainName, out int peUse);\n\n    public static string GetMutexOwner(IntPtr mutexHandle)\n    {\n        IntPtr securityDescriptor;\n        int length = 0;\n        int lengthNeeded = 0;\n\n        if (!GetMutexSecurity(mutexHandle, 1, out securityDescriptor, length, out lengthNeeded))\n        {\n            throw new Win32Exception(Marshal.GetLastWin32Error());\n        }\n\n        IntPtr sid = Marshal.ReadIntPtr(securityDescriptor);\n        StringBuilder name = new StringBuilder(256);\n        StringBuilder domainName = new StringBuilder(256);\n        int cchName = 256;\n        int cchDomainName = 256;\n        int peUse;\n\n        if (!LookupAccountSid(null, sid, name, ref cchName, domainName, ref cchDomainName, out peUse))\n        {\n            throw new Win32Exception(Marshal.GetLastWin32Error());\n        }\n\n        return name.ToString();\n    }\n}