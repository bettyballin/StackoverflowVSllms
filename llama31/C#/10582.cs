using Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing Confluent.Kafka;\nusing Confluent.Kafka.Client;\n\nnamespace MyMicroservice\n{\n    public class MyMicroservice : IHostedService\n    {\n        private readonly ILogger _logger;\n        private readonly string _kafkaBootstrapServers;\n\n        public MyMicroservice(ILogger<MyMicroservice> logger, string kafkaBootstrapServers)\n        {\n            _logger = logger;\n            _kafkaBootstrapServers = kafkaBootstrapServers;\n        }\n\n        public Task StartAsync(CancellationToken cancellationToken)\n        {\n            var config = new ConsumerConfig\n            {\n                BootstrapServers = _kafkaBootstrapServers,\n                GroupId = "my-group",\n                AutoOffsetReset = AutoOffsetReset.Latest\n            };\n\n            using var consumer = new Consumer<string>(config);\n            consumer.Subscribe("my-topic");\n\n            while (!cancellationToken.IsCancellationRequested)\n            {\n                var message = consumer.Consume(cancellationToken);\n                // Process message here\n                _logger.LogInformation($"Received message: {message.Value}");\n            }\n\n            return Task.CompletedTask;\n        }\n\n        public Task StopAsync(CancellationToken cancellationToken)\n        {\n            return Task.CompletedTask;\n        }\n    }\n}