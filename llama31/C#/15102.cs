using System;\nusing System.Text.RegularExpressions;\n\npublic class UninstallStringParser\n{\n    public static void ParseUninstallString(string uninstallString)\n    {\n        // Check if the string is empty\n        if (string.IsNullOrEmpty(uninstallString))\n        {\n            Console.WriteLine("UninstallString is empty.");\n            return;\n        }\n\n        // Identify if the uninstall command is an MSI, EXE, or other type\n        if (uninstallString.Contains("msiexec"))\n        {\n            // MSI uninstall command\n            // Example: MsiExec.exe /I{12345678-1234-1234-1234-123456789012}\n            var msiRegex = new Regex("/I\\{([A-F0-9-]+)\\}", RegexOptions.IgnoreCase);\n            var match = msiRegex.Match(uninstallString);\n            if (match.Success)\n            {\n                var productCode = match.Groups[1].Value;\n                Console.WriteLine($"MSI Product Code: {productCode}");\n                // You can use this product code to uninstall the MSI package\n            }\n        }\n        else if (uninstallString.EndsWith(".exe"))\n        {\n            // EXE uninstall command\n            // Example: C:\Program Files\Example\uninstall.exe\n            var exePath = uninstallString.Trim('"');\n            Console.WriteLine($"EXE Uninstall Path: {exePath}");\n            // You can execute this path to run the uninstaller\n        }\n        else\n        {\n            // Other types or custom uninstall commands\n            Console.WriteLine("Unknown or custom uninstall command.");\n            // Handling these cases might require additional logic or manual intervention\n        }\n    }\n}