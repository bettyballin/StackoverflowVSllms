using System;\nusing System.Security.Cryptography;\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Generate a public-private key pair\n        using (var rsa = RSA.Create())\n        {\n            rsa.KeySize = 2048;\n\n            // Get the private key (equivalent to hKey)\n            var privateKey = rsa.ExportParameters(true);\n\n            // Get the public key (equivalent to hPublicKey)\n            var publicKey = rsa.ExportParameters(false);\n\n            // Encrypt the private key using the public key (equivalent to CryptExportKey)\n            var encryptedKey = EncryptPrivateKey(privateKey, publicKey);\n\n            // Print the encrypted key\n            Console.WriteLine(Convert.ToBase64String(encryptedKey));\n        }\n    }\n\n    static byte[] EncryptPrivateKey(RSAParameters privateKey, RSAParameters publicKey)\n    {\n        using (var rsa = RSA.Create())\n        {\n            rsa.ImportParameters(publicKey);\n\n            // Create an RSAPKCS1KeyExchangeFormatter object\n            var formatter = new RSAPKCS1KeyExchangeFormatter(rsa);\n\n            // Encrypt the private key using the public key\n            return formatter.CreateKeyExchange(privateKey.GetRsaPrivateKeyBytes());\n        }\n    }\n}\n\npublic static class RsaExtensions\n{\n    public static byte[] GetRsaPrivateKeyBytes(this RSAParameters rsaParameters)\n    {\n        var bytes = new byte[rsaParameters.Modulus.Length + rsaParameters.Exponent.Length + rsaParameters.D.Length + rsaParameters.P.Length + rsaParameters.Q.Length + rsaParameters.DP.Length + rsaParameters.DQ.Length + rsaParameters.InverseQ.Length];\n        var offset = 0;\n\n        // Copy the modulus\n        Array.Copy(rsaParameters.Modulus, 0, bytes, offset, rsaParameters.Modulus.Length);\n        offset += rsaParameters.Modulus.Length;\n\n        // Copy the exponent\n        Array.Copy(rsaParameters.Exponent, 0, bytes, offset, rsaParameters.Exponent.Length);\n        offset += rsaParameters.Exponent.Length;\n\n        // Copy the D\n        Array.Copy(rsaParameters.D, 0, bytes, offset, rsaParameters.D.Length);\n        offset += rsaParameters.D.Length;\n\n        // Copy the P\n        Array.Copy(rsaParameters.P, 0, bytes, offset, rsaParameters.P.Length);\n        offset += rsaParameters.P.Length;\n\n        // Copy the Q\n        Array.Copy(rsaParameters.Q, 0, bytes, offset, rsaParameters.Q.Length);\n        offset += rsaParameters.Q.Length;\n\n        // Copy the DP\n        Array.Copy(rsaParameters.DP, 0, bytes, offset, rsaParameters.DP.Length);\n        offset += rsaParameters.DP.Length;\n\n        // Copy the DQ\n        Array.Copy(rsaParameters.DQ, 0, bytes, offset, rsaParameters.DQ.Length);\n        offset += rsaParameters.DQ.Length;\n\n        // Copy the InverseQ\n        Array.Copy(rsaParameters.InverseQ, 0, bytes, offset, rsaParameters.InverseQ.Length);\n\n        return bytes;\n    }\n}