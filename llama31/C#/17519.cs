using System;\nusing System.Collections.Generic;\n\npublic class Rectangle\n{\n    public double X0 { get; set; }\n    public double Y0 { get; set; }\n    public double X1 { get; set; }\n    public double Y1 { get; set; }\n}\n\npublic class RectangleOverlapDetector\n{\n    public static double CalculateOverlapArea(List<Rectangle> rectangles)\n    {\n        // Create a grid to store the overlap counts\n        int gridSize = 1000; // adjust this based on your rectangle sizes\n        int[,] grid = new int[gridSize, gridSize];\n\n        // Iterate through each rectangle\n        foreach (var rectangle in rectangles)\n        {\n            // Calculate the grid coordinates for the rectangle\n            int x0 = (int)(rectangle.X0 * gridSize);\n            int y0 = (int)(rectangle.Y0 * gridSize);\n            int x1 = (int)(rectangle.X1 * gridSize);\n            int y1 = (int)(rectangle.Y1 * gridSize);\n\n            // Increment the overlap count for each grid cell inside the rectangle\n            for (int x = x0; x < x1; x++)\n            {\n                for (int y = y0; y < y1; y++)\n                {\n                    grid[x, y]++;\n                }\n            }\n        }\n\n        // Calculate the total overlap area\n        double overlapArea = 0;\n        for (int x = 0; x < gridSize; x++)\n        {\n            for (int y = 0; y < gridSize; y++)\n            {\n                if (grid[x, y] > 1)\n                {\n                    overlapArea += 1.0 / (gridSize * gridSize);\n                }\n            }\n        }\n\n        return overlapArea;\n    }\n}