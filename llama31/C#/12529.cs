public class FloorList : IBindingList<Floor>\n{\n    private List<Floor> _floors = new List<Floor>();\n\n    public event ListChangedEventHandler ListChanged;\n\n    public void Add(Floor floor)\n    {\n        _floors.Add(floor);\n        UpdateElevations();\n        OnListChanged(new ListChangedEventArgs(ListChangedType.ItemAdded, _floors.Count - 1));\n    }\n\n    public void Remove(Floor floor)\n    {\n        int index = _floors.IndexOf(floor);\n        if (index >= 0)\n        {\n            _floors.RemoveAt(index);\n            UpdateElevations();\n            OnListChanged(new ListChangedEventArgs(ListChangedType.ItemDeleted, index));\n        }\n    }\n\n    public void Move(int oldIndex, int newIndex)\n    {\n        Floor floor = _floors[oldIndex];\n        _floors.RemoveAt(oldIndex);\n        _floors.Insert(newIndex, floor);\n        UpdateElevations();\n        OnListChanged(new ListChangedEventArgs(ListChangedType.ItemMoved, newIndex));\n    }\n\n    private void UpdateElevations()\n    {\n        // Update the elevations of the floors\n        for (int i = 0; i < _floors.Count; i++)\n        {\n            _floors[i].Elevation = CalculateElevation(i);\n        }\n    }\n\n    private double CalculateElevation(int index)\n    {\n        // Calculate the elevation of the floor at the given index\n        double elevation = 0;\n        for (int i = 0; i < index; i++)\n        {\n            elevation += _floors[i].Height;\n        }\n        return elevation;\n    }\n\n    protected virtual void OnListChanged(ListChangedEventArgs e)\n    {\n        ListChanged?.Invoke(this, e);\n    }\n\n    // Implement the rest of the IBindingList methods...\n}