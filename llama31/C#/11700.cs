using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class SmtpPasswordEncryption\n{\n    private static readonly byte[] _salt = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };\n\n    public static string EncryptPassword(string password)\n    {\n        // Generate a secret key\n        byte[] secretKey = GenerateSecretKey();\n\n        // Encrypt the password\n        byte[] encryptedPassword = Encrypt(password, secretKey);\n\n        // Return the encrypted password and secret key as a base64-encoded string\n        return Convert.ToBase64String(encryptedPassword) + ":" + Convert.ToBase64String(secretKey);\n    }\n\n    public static string DecryptPassword(string encryptedPassword)\n    {\n        // Split the encrypted password and secret key\n        string[] parts = encryptedPassword.Split(':');\n        byte[] encryptedPasswordBytes = Convert.FromBase64String(parts[0]);\n        byte[] secretKeyBytes = Convert.FromBase64String(parts[1]);\n\n        // Decrypt the password\n        string decryptedPassword = Decrypt(encryptedPasswordBytes, secretKeyBytes);\n\n        return decryptedPassword;\n    }\n\n    private static byte[] GenerateSecretKey()\n    {\n        using (var rng = RandomNumberGenerator.Create())\n        {\n            byte[] secretKey = new byte[32]; // 256-bit key\n            rng.GetBytes(secretKey);\n            return secretKey;\n        }\n    }\n\n    private static byte[] Encrypt(string plaintext, byte[] key)\n    {\n        using (var aes = Aes.Create())\n        {\n            aes.Key = key;\n            aes.IV = _salt;\n            aes.Mode = CipherMode.CBC;\n            aes.Padding = PaddingMode.PKCS7;\n\n            using (var ms = new MemoryStream())\n            {\n                using (var cs = new CryptoStream(ms, aes.CreateEncryptor(), CryptoStreamMode.Write))\n                {\n                    using (var sw = new StreamWriter(cs))\n                    {\n                        sw.Write(plaintext);\n                    }\n                }\n\n                return ms.ToArray();\n            }\n        }\n    }\n\n    private static string Decrypt(byte[] ciphertext, byte[] key)\n    {\n        using (var aes = Aes.Create())\n        {\n            aes.Key = key;\n            aes.IV = _salt;\n            aes.Mode = CipherMode.CBC;\n            aes.Padding = PaddingMode.PKCS7;\n\n            using (var ms = new MemoryStream(ciphertext))\n            {\n                using (var cs = new CryptoStream(ms, aes.CreateDecryptor(), CryptoStreamMode.Read))\n                {\n                    using (var sr = new StreamReader(cs))\n                    {\n                        return sr.ReadToEnd();\n                    }\n                }\n            }\n        }\n    }\n}