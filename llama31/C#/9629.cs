using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class PasswordHasher\n{\n    private const int SaltSize = 16;\n    private const int HashSize = 32;\n\n    public static byte[] HashPassword(string password)\n    {\n        var salt = new byte[SaltSize];\n        using (var rng = new RNGCryptoServiceProvider())\n        {\n            rng.GetBytes(salt);\n        }\n\n        using (var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 100000))\n        {\n            var hash = pbkdf2.GetBytes(HashSize);\n            var result = new byte[SaltSize + HashSize];\n            Array.Copy(salt, 0, result, 0, SaltSize);\n            Array.Copy(hash, 0, result, SaltSize, HashSize);\n            return result;\n        }\n    }\n\n    public static bool VerifyPassword(string password, byte[] storedHash)\n    {\n        var salt = new byte[SaltSize];\n        Array.Copy(storedHash, 0, salt, 0, SaltSize);\n\n        using (var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 100000))\n        {\n            var hash = pbkdf2.GetBytes(HashSize);\n            for (int i = 0; i < HashSize; i++)\n            {\n                if (hash[i] != storedHash[SaltSize + i])\n                {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n}