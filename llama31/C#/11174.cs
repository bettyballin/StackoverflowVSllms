using System.Collections.Concurrent;\n\npublic interface IWriteOnlyQueue<T>\n{\n    void Enqueue(T item);\n}\n\ninternal class WriteOnlyQueue<T> : IWriteOnlyQueue<T>\n{\n    private readonly ConcurrentQueue<T> _queue = new ConcurrentQueue<T>();\n\n    public void Enqueue(T item)\n    {\n        _queue.Enqueue(item);\n    }\n\n    // Optional method to allow the trusted side to dequeue items\n    internal T TryDequeue(out bool success)\n    {\n        return _queue.TryDequeue(out success);\n    }\n}\n\npublic class GameClient\n{\n    private readonly IWriteOnlyQueue<IGameAction> _actionQueue;\n\n    public GameClient(IWriteOnlyQueue<IGameAction> actionQueue)\n    {\n        _actionQueue = actionQueue;\n    }\n\n    public void HandleStateChange(IGameState gameState)\n    {\n        // Example usage\n        _actionQueue.Enqueue(new GameAction());\n    }\n}