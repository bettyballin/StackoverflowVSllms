public class CachedTokenBehavior : IEndpointBehavior\n{\n    private readonly SecurityToken _token;\n\n    public CachedTokenBehavior(SecurityToken token)\n    {\n        _token = token;\n    }\n\n    public void AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters)\n    {\n    }\n\n    public void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime)\n    {\n        clientRuntime.InnerChannel.Session.SecurityContext.SecurityToken = _token;\n    }\n\n    public void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher)\n    {\n    }\n\n    public void Validate(ServiceEndpoint endpoint)\n    {\n    }\n}\n\n// Authenticate and cache the security context token\nvar client = new ProductServiceClient("wsHttpProductService");\nclient.ClientCredentials.UserName.UserName = "foo";\nclient.ClientCredentials.UserName.Password = "bar";\nclient.Open(); // Authenticate and establish the security context\n\n// Get the security context token\nvar token = client.InnerChannel.Session.SecurityContext.SecurityToken;\n\n// Create a custom behavior with the cached token\nvar cachedTokenBehavior = new CachedTokenBehavior(token);\n\n// Create a new client instance with the custom behavior\nvar newClient = new ProductServiceClient("wsHttpProductService");\nnewClient.Endpoint.Behaviors.Add(cachedTokenBehavior);\n\n// Make subsequent calls without re-authenticating\nvar productList = newClient.GetProducts();