using Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.CSharp;\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\n\n// Load the current document\nvar workspace = new AdhocWorkspace();\nvar solution = workspace.LoadSolution("YourSolution.sln");\nvar document = solution.Projects.First().Documents.First();\n\n// Get the syntax tree\nvar tree = CSharpSyntaxTree.ParseText(document.GetTextAsync().Result);\n\n// Find all regions, subs, functions, and member variables\nvar regions = tree.GetRoot().DescendantNodes().OfType<RegionDirectiveTriviaSyntax>();\nvar subs = tree.GetRoot().DescendantNodes().OfType<MethodDeclarationSyntax>();\nvar functions = tree.GetRoot().DescendantNodes().OfType<MethodDeclarationSyntax>();\nvar memberVars = tree.GetRoot().DescendantNodes().OfType<FieldDeclarationSyntax>();\n\n// Create a list of code elements\nvar codeElements = new List<CodeElement>();\nforeach (var region in regions) codeElements.Add(new CodeElement { Kind = CodeElementKind.Region, Name = region.ToString() });\nforeach (var sub in subs) codeElements.Add(new CodeElement { Kind = CodeElementKind.Sub, Name = sub.Identifier.Text });\nforeach (var function in functions) codeElements.Add(new CodeElement { Kind = CodeElementKind.Function, Name = function.Identifier.Text });\nforeach (var memberVar in memberVars) codeElements.Add(new CodeElement { Kind = CodeElementKind.MemberVariable, Name = memberVar.Declaration.Variables.First().Identifier.Text });\n\n// Now you can create a UI to rearrange the code elements