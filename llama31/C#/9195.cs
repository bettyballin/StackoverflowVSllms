using Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.CSharp;\nusing Microsoft.CodeAnalysis.Diagnostics;\n\nnamespace NamespaceRenamer\n{\n    [DiagnosticAnalyzer(LanguageNames.CSharp)]\n    public class NamespaceRenamerAnalyzer : DiagnosticAnalyzer\n    {\n        private static readonly DiagnosticDescriptor Rule = new DiagnosticDescriptor(\n            id: "NSR001",\n            title: "Replace old namespace with new one",\n            messageFormat: "Replace '{0}' with '{1}'",\n            category: "Namespace",\n            defaultSeverity: DiagnosticSeverity.Warning,\n            isEnabledByDefault: true);\n\n        public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics { get { return ImmutableArray.Create(Rule); } }\n\n        public override void Initialize(AnalysisContext context)\n        {\n            context.RegisterSyntaxNodeAction(AnalyzeNode, SyntaxKind.UsingDirective);\n            context.RegisterSyntaxNodeAction(AnalyzeNode, SyntaxKind.QualifiedName);\n        }\n\n        private void AnalyzeNode(SyntaxNodeAnalysisContext context)\n        {\n            var node = context.Node;\n            var oldNamespace = "OldNamespace";\n            var newNamespace = "NewNamespace";\n\n            if (node is UsingDirectiveSyntax usingDirective)\n            {\n                if (usingDirective.Name.ToString() == oldNamespace)\n                {\n                    var diagnostic = Diagnostic.Create(Rule, node.GetLocation(), oldNamespace, newNamespace);\n                    context.ReportDiagnostic(diagnostic);\n                }\n            }\n            else if (node is QualifiedNameSyntax qualifiedName)\n            {\n                if (qualifiedName.Left.ToString() == oldNamespace)\n                {\n                    var diagnostic = Diagnostic.Create(Rule, node.GetLocation(), oldNamespace, newNamespace);\n                    context.ReportDiagnostic(diagnostic);\n                }\n            }\n        }\n    }\n}