using System;\nusing System.Linq.Expressions;\n\npublic class Rule\n{\n    public Expression<Func<bool>> Condition { get; set; }\n    public Expression<Func<bool>> Action { get; set; }\n}\n\npublic class RuleEngine\n{\n    public bool Evaluate(Rule rule, object context)\n    {\n        var condition = rule.Condition.Compile();\n        var action = rule.Action.Compile();\n\n        if (condition(context))\n        {\n            return action(context);\n        }\n        return false;\n    }\n}\n\npublic class TestA\n{\n    public bool B { get; set; }\n    public bool C { get; set; }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var testA = new TestA { B = true, C = false };\n\n        var rule = new Rule\n        {\n            Condition = Expression.Lambda<Func<bool>>(Expression.And(\n                Expression.Property(Expression.Constant(testA), "B"),\n                Expression.Property(Expression.Constant(testA), "C"))),\n            Action = Expression.Lambda<Func<bool>>(Expression.Constant(true))\n        };\n\n        var engine = new RuleEngine();\n        var result = engine.Evaluate(rule, testA);\n\n        Console.WriteLine(result); // Output: False\n    }\n}