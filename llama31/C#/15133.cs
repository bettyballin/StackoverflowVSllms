using System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\n\npublic class CachedHttpClient\n{\n    private readonly HttpClient _httpClient;\n    private readonly ICache _cache;\n\n    public CachedHttpClient(ICache cache)\n    {\n        _cache = cache;\n        _httpClient = new HttpClient();\n    }\n\n    public HttpResponseMessage Get(string url)\n    {\n        // Check if the response is cached\n        var cachedResponse = _cache.Get(url);\n        if (cachedResponse != null)\n        {\n            var cachedHeaders = cachedResponse.Headers;\n            var ifNoneMatchHeader = cachedHeaders.IfNoneMatch;\n            if (ifNoneMatchHeader != null)\n            {\n                // Add the If-None-Match header to the request\n                _httpClient.DefaultRequestHeaders.IfNoneMatch.Add(ifNoneMatchHeader);\n            }\n        }\n\n        var response = _httpClient.GetAsync(url).Result;\n\n        // Handle 304 Not Modified response\n        if (response.StatusCode == HttpStatusCode.NotModified)\n        {\n            // Return the cached response\n            return cachedResponse;\n        }\n        else\n        {\n            // Cache the new response\n            _cache.Add(url, response);\n            return response;\n        }\n    }\n}\n\npublic interface ICache\n{\n    HttpResponseMessage Get(string url);\n    void Add(string url, HttpResponseMessage response);\n}