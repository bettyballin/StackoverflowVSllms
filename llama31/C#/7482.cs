using System;\nusing System.Diagnostics;\nusing System.Security.Principal;\n\nclass ProcessOwner\n{\n    static void Main()\n    {\n        Process[] processes = Process.GetProcessesByName("MyApp");\n\n        foreach (Process process in processes)\n        {\n            try\n            {\n                NTAccount owner = GetProcessOwner(process);\n                Console.WriteLine($"Process {process.Id} is owned by {owner.Value}");\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"Error getting owner for process {process.Id}: {ex.Message}");\n            }\n        }\n    }\n\n    static NTAccount GetProcessOwner(Process process)\n    {\n        IntPtr processHandle = IntPtr.Zero;\n        try\n        {\n            OpenProcessToken(process.Handle, 8, out processHandle);\n            string sid = GetSidFromProcessHandle(processHandle);\n            return new NTAccount(sid);\n        }\n        finally\n        {\n            if (processHandle != IntPtr.Zero)\n            {\n                CloseHandle(processHandle);\n            }\n        }\n    }\n\n    [DllImport("advapi32.dll", SetLastError = true)]\n    static extern bool OpenProcessToken(IntPtr ProcessHandle, uint DesiredAccess, out IntPtr TokenHandle);\n\n    [DllImport("kernel32.dll", SetLastError = true)]\n    static extern bool CloseHandle(IntPtr hObject);\n\n    static string GetSidFromProcessHandle(IntPtr processHandle)\n    {\n        string sid = null;\n        try\n        {\n            IntPtr sidPtr;\n            uint length = 0;\n            if (GetTokenInformation(processHandle, 8, IntPtr.Zero, 0, out length))\n            {\n                sidPtr = Marshal.AllocHGlobal((int)length);\n                if (GetTokenInformation(processHandle, 8, sidPtr, length, out length))\n                {\n                    sid = Marshal.PtrToStringAuto(sidPtr);\n                }\n                Marshal.FreeHGlobal(sidPtr);\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($"Error getting SID for process handle {processHandle}: {ex.Message}");\n        }\n        return sid;\n    }\n\n    [DllImport("advapi32.dll", SetLastError = true)]\n    static extern bool GetTokenInformation(IntPtr TokenHandle, uint TokenInfoClass, IntPtr TokenInformation, uint TokenInformationLength, out uint ReturnLength);\n}