using System;\nusing System.Web.Services.Protocols;\n\npublic class SoapLogger : SoapExtension\n{\n    private Stream _originalStream;\n    private Stream _logStream;\n\n    public override object GetInitializer(Type serviceType)\n    {\n        return null;\n    }\n\n    public override object GetInitializer(LogicalMethodInfo methodInfo, SoapExtensionAttribute attribute)\n    {\n        return null;\n    }\n\n    public override void Initialize(object initializer)\n    {\n    }\n\n    public override Stream ChainStream(Stream stream)\n    {\n        _originalStream = stream;\n        _logStream = new MemoryStream();\n        return _logStream;\n    }\n\n    public override void ProcessMessage(SoapMessage message)\n    {\n        switch (message.Stage)\n        {\n            case SoapMessageStage.BeforeSerialize:\n                break;\n            case SoapMessageStage.AfterSerialize:\n                LogMessage(message, _logStream);\n                CopyStream(_logStream, _originalStream);\n                break;\n            case SoapMessageStage.BeforeDeserialize:\n                CopyStream(_originalStream, _logStream);\n                LogMessage(message, _logStream);\n                break;\n            case SoapMessageStage.AfterDeserialize:\n                break;\n        }\n    }\n\n    private void LogMessage(SoapMessage message, Stream stream)\n    {\n        stream.Position = 0;\n        string soapMessage = new StreamReader(stream).ReadToEnd();\n        // Log the SOAP message here\n        Console.WriteLine(soapMessage);\n    }\n\n    private void CopyStream(Stream source, Stream target)\n    {\n        byte[] buffer = new byte[1024];\n        int bytesRead = source.Read(buffer, 0, buffer.Length);\n        while (bytesRead > 0)\n        {\n            target.Write(buffer, 0, bytesRead);\n            bytesRead = source.Read(buffer, 0, buffer.Length);\n        }\n    }\n}