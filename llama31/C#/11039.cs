public enum Language\n{\n    English = 1,\n    French = 2,\n    Spanish = 3,\n    // ...\n}\n\npublic class LanguageUserType : IUserType\n{\n    public new bool Equals(object x, object y)\n    {\n        if (x == null || y == null) return false;\n        return x.ToString() == y.ToString();\n    }\n\n    public int GetHashCode(object x)\n    {\n        return x.ToString().GetHashCode();\n    }\n\n    public object NullSafeGet(IDataReader rs, string[] names, object owner)\n    {\n        var value = rs[names[0]];\n        if (value == DBNull.Value) return null;\n        return (Language)Enum.Parse(typeof(Language), value.ToString());\n    }\n\n    public void NullSafeSet(IDbCommand cmd, object value, int index)\n    {\n        if (value == null)\n        {\n            cmd.Parameters[index].Value = DBNull.Value;\n        }\n        else\n        {\n            cmd.Parameters[index].Value = ((Language)value).ToString();\n        }\n    }\n\n    public object DeepCopy(object value)\n    {\n        return value;\n    }\n\n    public object Replace(object original, object target, object owner)\n    {\n        return original;\n    }\n\n    public object Assemble(object cached, object owner)\n    {\n        return cached;\n    }\n\n    public object Disassemble(object value)\n    {\n        return value;\n    }\n\n    public SqlType[] SqlTypes\n    {\n        get { return new[] { new SqlType(DbType.String) }; }\n    }\n\n    public Type ReturnedType\n    {\n        get { return typeof(Language); }\n    }\n\n    public bool IsMutable\n    {\n        get { return false; }\n    }\n}