using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class RememberMeService\n{\n    private readonly byte[] _key;\n    private readonly RandomNumberGenerator _rng;\n\n    public RememberMeService(byte[] key)\n    {\n        _key = key;\n        _rng = RandomNumberGenerator.Create();\n    }\n\n    public string GenerateTicket(Guid userId)\n    {\n        byte[] iv = new byte[16];\n        _rng.GetBytes(iv);\n\n        using (var aes = Aes.Create())\n        {\n            aes.Key = _key;\n            aes.IV = iv;\n            aes.Mode = CipherMode.CBC;\n            aes.Padding = PaddingMode.PKCS7;\n\n            byte[] encryptedUserId = aes.EncryptCbc(userId.ToByteArray(), iv);\n\n            return Convert.ToBase64String(iv.Concat(encryptedUserId).ToArray());\n        }\n    }\n\n    public Guid ValidateTicket(string ticket)\n    {\n        byte[] ticketBytes = Convert.FromBase64String(ticket);\n\n        byte[] iv = new byte[16];\n        Array.Copy(ticketBytes, iv, 16);\n\n        using (var aes = Aes.Create())\n        {\n            aes.Key = _key;\n            aes.IV = iv;\n            aes.Mode = CipherMode.CBC;\n            aes.Padding = PaddingMode.PKCS7;\n\n            byte[] encryptedUserId = new byte[ticketBytes.Length - 16];\n            Array.Copy(ticketBytes, 16, encryptedUserId, 0, encryptedUserId.Length);\n\n            byte[] decryptedUserId = aes.DecryptCbc(encryptedUserId, iv);\n\n            return new Guid(decryptedUserId);\n        }\n    }\n}