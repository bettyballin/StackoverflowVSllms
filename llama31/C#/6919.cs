using System;\nusing System.Runtime.InteropServices;\n\nclass DiskStatus\n{\n    [DllImport("kernel32.dll")]\n    static extern bool GetDevicePowerState(IntPtr hDevice, out DEVICE_POWER_STATE DeviceState);\n\n    [DllImport("kernel32.dll")]\n    static extern IntPtr CreateFile(string lpFileName, uint dwDesiredAccess, uint dwShareMode, IntPtr lpSecurityAttributes, uint dwCreationDisposition, uint dwFlagsAndAttributes, IntPtr hTemplateFile);\n\n    const uint GENERIC_READ = 0x80000000;\n    const uint FILE_SHARE_READ = 0x00000001;\n    const uint OPEN_EXISTING = 0x00000003;\n    const uint FILE_ATTRIBUTE_NORMAL = 0x00000080;\n\n    [Flags]\n    enum DEVICE_POWER_STATE\n    {\n        PowerDeviceUnspecified = 0,\n        PowerDeviceD0 = 1,\n        PowerDeviceD1 = 2,\n        PowerDeviceD2 = 3,\n        PowerDeviceD3 = 4,\n        PowerDeviceMaximum = 5\n    }\n\n    static void Main()\n    {\n        string diskPath = @"\\.\PhysicalDrive0"; // Replace with the desired disk path\n        IntPtr hDevice = CreateFile(diskPath, GENERIC_READ, FILE_SHARE_READ, IntPtr.Zero, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, IntPtr.Zero);\n        if (hDevice != IntPtr.Zero)\n        {\n            DEVICE_POWER_STATE state;\n            if (GetDevicePowerState(hDevice, out state))\n            {\n                Console.WriteLine("Disk power state: " + state);\n            }\n            else\n            {\n                Console.WriteLine("Failed to get disk power state");\n            }\n            CloseHandle(hDevice);\n        }\n        else\n        {\n            Console.WriteLine("Failed to open disk device");\n        }\n    }\n\n    [DllImport("kernel32.dll")]\n    static extern bool CloseHandle(IntPtr hObject);\n}