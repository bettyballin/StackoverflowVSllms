public class AuditInterceptor : IInterceptor\n{\n    public void OnFlushDirty(object entity, object id, object[] currentState, object[] previousState, string[] propertyNames, IType[] types)\n    {\n        // Log changes to entity properties\n        foreach (var propertyName in propertyNames)\n        {\n            var currentValue = currentState[Array.IndexOf(propertyNames, propertyName)];\n            var previousValue = previousState[Array.IndexOf(propertyNames, propertyName)];\n\n            if (currentValue != previousValue)\n            {\n                // Log the change\n                LogAuditChange(entity, propertyName, previousValue, currentValue);\n            }\n        }\n    }\n\n    private void LogAuditChange(object entity, string propertyName, object previousValue, object currentValue)\n    {\n        // Implement logging logic here\n        // e.g., save to a separate audit log table or file\n    }\n}