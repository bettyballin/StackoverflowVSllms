using System;\nusing System.ComponentModel;\nusing System.Windows.Forms;\n\n[TypeConverter(typeof(StateConverter))]\npublic class State\n{\n    public enum EnumVisibility { Visible, NonVisible }\n    public enum EnumEventManagement { Automatic, Manual }\n\n    private EnumVisibility visibility;\n    private EnumEventManagement eventManagement;\n\n    [Category("State")]\n    [Browsable(true)]\n    public EnumVisibility Visibility\n    {\n        get { return visibility; }\n        set { visibility = value; }\n    }\n\n    [Category("State")]\n    [Browsable(true)]\n    public EnumEventManagement EventManagement\n    {\n        get { return eventManagement; }\n        set { eventManagement = value; }\n    }\n}\n\npublic class StateConverter : TypeConverter\n{\n    public override bool GetPropertiesSupported(ITypeDescriptorContext context)\n    {\n        return true;\n    }\n\n    public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)\n    {\n        PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(typeof(State));\n        return properties;\n    }\n}\n\npublic class MyCustomControl : Control\n{\n    private State state;\n\n    public MyCustomControl()\n    {\n        state = new State();\n    }\n\n    [Category("State")]\n    [Browsable(true)]\n    public State State\n    {\n        get { return state; }\n        set { state = value; }\n    }\n}