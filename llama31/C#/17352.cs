using System.Configuration;\n\npublic class CustomSettingsProvider : SettingsProvider\n{\n    public override string ApplicationName\n    {\n        get { return "YourDllName"; }\n    }\n\n    public override string GetSettings(string settingsName)\n    {\n        // Open the configuration file manually\n        Configuration config = ConfigurationManager.OpenExeConfiguration("YourDllName.dll");\n\n        // Get the setting value from the configuration file\n        string settingValue = config.AppSettings.Settings[settingsName].Value;\n\n        return settingValue;\n    }\n}\n\npublic class form : System.Windows.Forms.Form\n{\n    public form()\n    {\n        // This call is required by the Windows Form Designer.\n        InitializeComponent();\n\n        // Use the custom settings provider\n        Settings1.Default.Providers.Add(new CustomSettingsProvider());\n\n        IP = IPAddress.Parse(Settings1.Default.IPAddress);\n    }\n}