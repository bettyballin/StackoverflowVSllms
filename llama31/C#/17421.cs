using System.Threading;\n\npublic class MyService : ServiceBase\n{\n    private Mutex _mutex;\n\n    public MyService()\n    {\n        ServiceName = "MyService";\n    }\n\n    protected override void OnStart(string[] args)\n    {\n        try\n        {\n            // Try to create a named mutex. If it already exists, this call will throw an exception.\n            _mutex = new Mutex(false, "MyServiceMutex");\n        }\n        catch (UnauthorizedAccessException)\n        {\n            // If the mutex already exists, an UnauthorizedAccessException will be thrown.\n            // In this case, we know another instance of the service is running, so we exit.\n            Log.Error("Another instance of the service is running. Exiting.");\n            Stop();\n            return;\n        }\n\n        // Rest of your OnStart code here.\n    }\n\n    protected override void OnStop()\n    {\n        Log.Info("STOPPING SERVICE");\n\n        // Wait for working threads to finish\n        _Worker.Die();\n\n        // Kill inner processes still running (sometimes some processes hang up and is the only way to kill them...\n        ProcessUtility.KillTree(System.Diagnostics.Process.GetCurrentProcess().Id);\n\n        // Release the mutex so another instance can start\n        _mutex.ReleaseMutex();\n\n        // Call parent's class Stop\n        base.OnStop();\n    }\n}