public interface ITimer\n{\n    void Start(TimeSpan interval);\n    void Stop();\n    event Action Tick;\n}\n\npublic class Timer : ITimer\n{\n    private Timer _timer;\n\n    public event Action Tick;\n\n    public void Start(TimeSpan interval)\n    {\n        _timer = new Timer(interval.TotalMilliseconds);\n        _timer.Elapsed += (sender, e) => Tick?.Invoke();\n        _timer.Start();\n    }\n\n    public void Stop()\n    {\n        _timer.Stop();\n    }\n}\n\npublic class SystemAvailabilityMonitor\n{\n    private readonly ITimer _timer;\n\n    public SystemAvailabilityMonitor(ITimer timer, TimeSpan bufferBeforeRaisingEvent)\n    {\n        _timer = timer;\n        //...\n    }\n\n    public void SystemUnavailable()\n    {\n        //...\n        _timer.Start(bufferBeforeRaisingEvent);\n    }\n\n    //...\n}