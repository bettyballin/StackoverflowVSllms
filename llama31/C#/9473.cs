using System;\nusing System.Reflection;\nusing System.Windows.Forms;\n\npublic class Validator\n{\n    public bool Validate(Control control)\n    {\n        foreach (PropertyInfo property in control.GetType().GetProperties())\n        {\n            var value = property.GetValue(control);\n            var validationAttributes = property.GetCustomAttributes(typeof(ValidationAttribute), true);\n            foreach (ValidationAttribute attribute in validationAttributes)\n            {\n                if (!attribute.IsValid(value))\n                {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n\n[AttributeUsage(AttributeTargets.Property)]\npublic abstract class ValidationAttribute : Attribute\n{\n    public abstract bool IsValid(object value);\n}\n\npublic class RequiredAttribute : ValidationAttribute\n{\n    public override bool IsValid(object value)\n    {\n        return value != null && !string.IsNullOrEmpty(value.ToString());\n    }\n}\n\npublic class RegexAttribute : ValidationAttribute\n{\n    private readonly string _pattern;\n\n    public RegexAttribute(string pattern)\n    {\n        _pattern = pattern;\n    }\n\n    public override bool IsValid(object value)\n    {\n        return System.Text.RegularExpressions.Regex.IsMatch(value.ToString(), _pattern);\n    }\n}