using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass HelloWorld\n{\n    static void Main(string[] args)\n    {\n        // Create a dynamic assembly\n        AssemblyName name = new AssemblyName("HelloWorld");\n        AssemblyBuilder assembly = AppDomain.CurrentDomain.DefineDynamicAssembly(name, AssemblyBuilderAccess.Run);\n\n        // Create a dynamic module\n        ModuleBuilder module = assembly.DefineDynamicModule("HelloWorld");\n\n        // Create a type builder\n        TypeBuilder type = module.DefineType("HelloWorld", TypeAttributes.Public);\n\n        // Create a method builder\n        MethodBuilder method = type.DefineMethod("Main", MethodAttributes.Public | MethodAttributes.Static, typeof(void), new Type[] { typeof(string[]) });\n\n        // Generate MSIL code\n        ILGenerator il = method.GetILGenerator();\n        il.Emit(OpCodes.Ldstr, "Hello, World!");\n        il.Emit(OpCodes.Call, typeof(Console).GetMethod("WriteLine", new Type[] { typeof(string) }));\n        il.Emit(OpCodes.Ret);\n\n        // Create the type\n        Type helloWorldType = type.CreateType();\n\n        // Invoke the method\n        MethodInfo mainMethod = helloWorldType.GetMethod("Main");\n        mainMethod.Invoke(null, new object[] { new string[] { } });\n    }\n}