using System;\nusing System.Collections.Generic;\nusing System.Reflection;\n\npublic class PermutationGenerator\n{\n    public static IEnumerable<object> GetPermutations(Type type)\n    {\n        if (type.IsPrimitive || type == typeof(string))\n        {\n            return GetPrimitivePermutations(type);\n        }\n        else\n        {\n            return GetComplexPermutations(type);\n        }\n    }\n\n    private static IEnumerable<object> GetPrimitivePermutations(Type type)\n    {\n        if (type == typeof(int))\n        {\n            yield return -1;\n            yield return 0;\n            yield return 1;\n        }\n        else if (type == typeof(string))\n        {\n            yield return null;\n            yield return string.Empty;\n            yield return "Hello World";\n        }\n        // Add more primitive types as needed\n    }\n\n    private static IEnumerable<object> GetComplexPermutations(Type type)\n    {\n        var properties = type.GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.SetProperty);\n\n        var permutations = new List<object>();\n\n        foreach (var property in properties)\n        {\n            var propertyType = property.PropertyType;\n            var propertyPermutations = GetPermutations(propertyType);\n\n            foreach (var propertyPermutation in propertyPermutations)\n            {\n                var instance = Activator.CreateInstance(type);\n                property.SetValue(instance, propertyPermutation);\n                permutations.Add(instance);\n            }\n        }\n\n        return permutations;\n    }\n}