public class ExternalSystemService\n{\n    private readonly CircuitBreaker _circuitBreaker;\n    private readonly IQueue _queue;\n\n    public ExternalSystemService(CircuitBreaker circuitBreaker, IQueue queue)\n    {\n        _circuitBreaker = circuitBreaker;\n        _queue = queue;\n    }\n\n    public async Task PerformWorkAsync(WorkItem item)\n    {\n        if (!_circuitBreaker.IsClosed())\n        {\n            await _queue.EnqueueAsync(item);\n            return;\n        }\n\n        try\n        {\n            // Call external system\n        }\n        catch (Exception ex)\n        {\n            _circuitBreaker.Trip(ex);\n            await _queue.EnqueueAsync(item);\n        }\n    }\n}\n\npublic class CircuitBreaker\n{\n    private readonly SemaphoreSlim _semaphore;\n    private readonly TimeSpan _timeout;\n    private DateTime _lastFailure;\n    private int _failureCount;\n\n    public CircuitBreaker(int threshold, TimeSpan timeout)\n    {\n        _semaphore = new SemaphoreSlim(threshold);\n        _timeout = timeout;\n    }\n\n    public bool IsClosed()\n    {\n        return _semaphore.CurrentCount > 0;\n    }\n\n    public void Trip(Exception ex)\n    {\n        _lastFailure = DateTime.Now;\n        _failureCount++;\n\n        if (_failureCount >= _semaphore.CurrentCount)\n        {\n            _semaphore.Wait(_timeout);\n        }\n    }\n\n    public void Reset()\n    {\n        if (DateTime.Now - _lastFailure > _timeout)\n        {\n            _failureCount = 0;\n            _semaphore.Release();\n        }\n    }\n}