using System;\nusing System.Security.Cryptography;\nusing System.Collections.Generic;\n\npublic class ShamirsSecretSharing\n{\n    private int _threshold;\n    private int _numShares;\n    private List<Share> _shares;\n\n    public ShamirsSecretSharing(int threshold, int numShares)\n    {\n        _threshold = threshold;\n        _numShares = numShares;\n        _shares = new List<Share>();\n    }\n\n    public void SplitSecret(byte[] secret)\n    {\n        using (var rng = new RNGCryptoServiceProvider())\n        {\n            var coefficients = new byte[_threshold - 1][];\n\n            for (int i = 0; i < _threshold - 1; i++)\n            {\n                coefficients[i] = new byte[secret.Length];\n                rng.GetBytes(coefficients[i]);\n            }\n\n            for (int i = 1; i <= _numShares; i++)\n            {\n                var share = new Share(i, GetShare(secret, coefficients, i));\n                _shares.Add(share);\n            }\n        }\n    }\n\n    private byte[] GetShare(byte[] secret, byte[][] coefficients, int shareNumber)\n    {\n        var result = new byte[secret.Length];\n\n        for (int i = 0; i < secret.Length; i++)\n        {\n            var value = (int)secret[i];\n\n            for (int j = 0; j < coefficients.Length; j++)\n            {\n                value += (int)coefficients[j][i] * (int)Math.Pow(shareNumber, j + 1);\n            }\n\n            result[i] = (byte)value;\n        }\n\n        return result;\n    }\n\n    public byte[] ReconstructSecret(List<Share> shares)\n    {\n        if (shares.Count < _threshold)\n        {\n            throw new ArgumentException("Not enough shares to reconstruct the secret.");\n        }\n\n        var secret = new byte[shares[0].Value.Length];\n\n        for (int i = 0; i < secret.Length; i++)\n        {\n            var value = 0;\n\n            foreach (var share in shares)\n            {\n                var lagrangeCoefficient = GetLagrangeCoefficient(share, shares);\n                value += (int)share.Value[i] * lagrangeCoefficient;\n            }\n\n            secret[i] = (byte)value;\n        }\n\n        return secret;\n    }\n\n    private int GetLagrangeCoefficient(Share share, List<Share> shares)\n    {\n        var coefficient = 1;\n\n        foreach (var otherShare in shares)\n        {\n            if (otherShare.Number != share.Number)\n            {\n                coefficient *= (int)otherShare.Number / (int)(otherShare.Number - share.Number);\n            }\n        }\n\n        return coefficient;\n    }\n\n    public class Share\n    {\n        public int Number { get; set; }\n        public byte[] Value { get; set; }\n\n        public Share(int number, byte[] value)\n        {\n            Number = number;\n            Value = value;\n        }\n    }\n}