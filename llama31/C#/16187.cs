using System;\nusing System.Runtime.Remoting.Proxies;\n\npublic class VehicleProxy : RealProxy\n{\n    private IVehicle _vehicle;\n    private int _callCount;\n\n    public VehicleProxy(IVehicle vehicle) : base(typeof(IVehicle))\n    {\n        _vehicle = vehicle;\n    }\n\n    public override IMessage Invoke(IMessage msg)\n    {\n        _callCount++;\n        return new ReturnMessage(_vehicle.GetType().GetMethod(msg.MethodName).Invoke(_vehicle, msg.Args), null, 0, null, null);\n    }\n\n    public int GetCallCount()\n    {\n        return _callCount;\n    }\n}\n\npublic class Car : IVehicle\n{\n    // implementation of IVehicle\n}\n\npublic interface IVehicle\n{\n    // methods of IVehicle\n}\n\n// usage\nCar car = new Car();\nVehicleProxy proxy = new VehicleProxy(car);\nIVehicle vehicle = (IVehicle)proxy.GetTransparentProxy();\n\n// call methods on vehicle\nvehicle.Method1();\nvehicle.Method2();\n\nConsole.WriteLine(proxy.GetCallCount()); // outputs 2