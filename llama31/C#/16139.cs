public class EncyptDecrypt\n{\n    static System.Security.Cryptography.TripleDESCryptoServiceProvider keyProv = new System.Security.Cryptography.TripleDESCryptoServiceProvider();\n\n    public static System.Security.Cryptography.TripleDESCryptoServiceProvider KeyProvider\n    {\n        get\n        {\n            keyProv.Key = new byte[] { /* redacted with prejudice */ };\n            return keyProv;\n        }\n    }\n\n    public static string Encrypt(string text, SymmetricAlgorithm key)\n    {\n        if (text.Equals(string.Empty)) return text;\n\n        // Create a memory stream.\n        MemoryStream ms = new MemoryStream();\n\n        // Generate a random IV\n        byte[] iv = new byte[key.BlockSize / 8];\n        using (var rng = new RNGCryptoServiceProvider())\n        {\n            rng.GetBytes(iv);\n        }\n\n        // Create a CryptoStream using the memory stream, key, and IV.\n        CryptoStream encStream = new CryptoStream(ms, key.CreateEncryptor(key.Key, iv), CryptoStreamMode.Write);\n\n        // Create a StreamWriter to write a string\n        // to the stream.\n        StreamWriter sw = new StreamWriter(encStream);\n\n        // Write the plaintext to the stream.\n        sw.WriteLine(text);\n\n        // Close the StreamWriter and CryptoStream.\n        sw.Close();\n        encStream.Close();\n\n        // Get an array of bytes that represents\n        // the memory stream.\n        byte[] buffer = ms.ToArray();\n\n        // Prepend the IV to the encrypted data\n        byte[] result = new byte[iv.Length + buffer.Length];\n        Array.Copy(iv, 0, result, 0, iv.Length);\n        Array.Copy(buffer, 0, result, iv.Length, buffer.Length);\n\n        // Close the memory stream.\n        ms.Close();\n\n        // Return the encrypted byte array.\n        return System.Convert.ToBase64String(result);\n    }\n\n    // Decrypt the byte array.\n    public static string Decrypt(string cypherText, SymmetricAlgorithm key)\n    {\n        if (cypherText.Equals(string.Empty)) return cypherText;\n\n        string val;\n\n        try\n        {\n            // Convert the base64 string to a byte array\n            byte[] buffer = System.Convert.FromBase64String(cypherText);\n\n            // Extract the IV from the buffer\n            byte[] iv = new byte[key.BlockSize / 8];\n            Array.Copy(buffer, 0, iv, 0, iv.Length);\n\n            // Create a memory stream to the passed buffer (without IV).\n            MemoryStream ms = new MemoryStream(buffer, iv.Length, buffer.Length - iv.Length);\n\n            // Create a CryptoStream using the memory stream, key, and IV.\n            CryptoStream encStream = new CryptoStream(ms, key.CreateDecryptor(key.Key, iv), CryptoStreamMode.Read);\n\n            // Create a StreamReader for reading the stream.\n            StreamReader sr = new StreamReader(encStream);\n\n            // Read the stream as a string.\n            val = sr.ReadLine();\n\n            // Close the streams.\n            sr.Close();\n            encStream.Close();\n            ms.Close();\n        }\n        catch (System.Exception)\n        {\n            return string.Empty;\n        }\n\n        return val;\n    }\n}