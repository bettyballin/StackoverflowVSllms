using System;\nusing System.Web;\n\npublic class LoginAttemptTracker\n{\n    private const int MaxAttempts = 5;\n    private const int TimeWindow = 10; // minutes\n    private const int BlockTime = 60; // minutes\n\n    private readonly IHttpContextAccessor _httpContextAccessor;\n    private readonly IRepository<LoginAttempt> _repository;\n\n    public LoginAttemptTracker(IHttpContextAccessor httpContextAccessor, IRepository<LoginAttempt> repository)\n    {\n        _httpContextAccessor = httpContextAccessor;\n        _repository = repository;\n    }\n\n    public bool IsLoginAllowed(string username, string ipAddress)\n    {\n        var now = DateTime.UtcNow;\n        var attempts = _repository.GetLoginAttempts(username, ipAddress, now.AddMinutes(-TimeWindow));\n\n        if (attempts.Count >= MaxAttempts)\n        {\n            var lastAttempt = attempts.OrderByDescending(a => a.Timestamp).First();\n            if (lastAttempt.Timestamp.AddMinutes(BlockTime) > now)\n            {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public void RecordLoginAttempt(string username, string ipAddress, bool success)\n    {\n        var attempt = new LoginAttempt\n        {\n            Username = username,\n            IpAddress = ipAddress,\n            Timestamp = DateTime.UtcNow,\n            Success = success\n        };\n\n        _repository.SaveLoginAttempt(attempt);\n    }\n}\n\npublic class LoginAttempt\n{\n    public string Username { get; set; }\n    public string IpAddress { get; set; }\n    public DateTime Timestamp { get; set; }\n    public bool Success { get; set; }\n}