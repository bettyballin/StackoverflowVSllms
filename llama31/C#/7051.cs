// On each page's submission, validate the data and store the results in session\nprotected void Page_Load(object sender, EventArgs e)\n{\n    // Validate the data on this page\n    ValidatePage();\n\n    // Store the validation results in session\n    Session["ValidationResults"] = GetValidationResults();\n}\n\n// On the last page, retrieve the validation results from session and display the summary\nprotected void Page_Load(object sender, EventArgs e)\n{\n    // Retrieve the validation results from session\n    Dictionary<string, bool> validationResults = (Dictionary<string, bool>)Session["ValidationResults"];\n\n    // Display the validation summary\n    DisplayValidationSummary(validationResults);\n}\n\n// Validate the data on each page\nprivate void ValidatePage()\n{\n    // Iterate through all the validation controls on this page\n    foreach (BaseValidator validator in Validators)\n    {\n        // If the validator is a required field validator, don't fire it yet\n        if (validator is RequiredFieldValidator)\n        {\n            (validator as RequiredFieldValidator).Enabled = false;\n        }\n        else\n        {\n            // Fire the validator\n            validator.Validate();\n        }\n    }\n}\n\n// Get the validation results for each page\nprivate Dictionary<string, bool> GetValidationResults()\n{\n    Dictionary<string, bool> validationResults = new Dictionary<string, bool>();\n\n    // Iterate through all the validation controls on this page\n    foreach (BaseValidator validator in Validators)\n    {\n        // Store the validation result in the dictionary\n        validationResults.Add(validator.ControlToValidate, validator.IsValid);\n    }\n\n    return validationResults;\n}\n\n// Display the validation summary\nprivate void DisplayValidationSummary(Dictionary<string, bool> validationResults)\n{\n    // Create a custom control to display the validation summary\n    ValidationSummaryControl summaryControl = new ValidationSummaryControl();\n\n    // Iterate through the validation results and display the summary\n    foreach (KeyValuePair<string, bool> result in validationResults)\n    {\n        if (!result.Value)\n        {\n            // Display the required field that is incomplete\n            summaryControl.AddSummaryItem(result.Key);\n        }\n    }\n\n    // Add the summary control to the page\n    Page.Controls.Add(summaryControl);\n}\n\n// Custom control to display the validation summary\npublic class ValidationSummaryControl : WebControl\n{\n    private List<string> summaryItems = new List<string>();\n\n    public void AddSummaryItem(string controlId)\n    {\n        summaryItems.Add(controlId);\n    }\n\n    protected override void Render(HtmlTextWriter writer)\n    {\n        writer.RenderBeginTag(HtmlTextWriterTag.Div);\n\n        // Display the summary items\n        foreach (string item in summaryItems)\n        {\n            writer.Write(item + " is required. <a href='#" + item + "'>Go to field</a><br />");\n        }\n\n        writer.RenderEndTag();\n    }\n}