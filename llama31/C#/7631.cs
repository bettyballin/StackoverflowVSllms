using System;\nusing System.Runtime.InteropServices;\n\npublic class UserSession\n{\n    [DllImport("Wtsapi32.dll")]\n    private static extern bool WTSQuerySessionInformation(IntPtr hServer, int sessionId, WTS_INFO_CLASS wtsInfoClass, out IntPtr ppBuffer, out int pBytesReturned);\n    [DllImport("Wtsapi32.dll")]\n    private static extern void WTSFreeMemory(IntPtr pMemory);\n\n    enum WTS_INFO_CLASS\n    {\n        WTSInitialProgram,\n        WTSApplicationName,\n        WTSWorkingDirectory,\n        WTSOEMId,\n        WTSSessionId,\n        WTSUserName,\n        WTSWinStationName,\n        WTSDomainName,\n        WTSConnectState,\n        WTSClientBuildNumber,\n        WTSClientName,\n        WTSClientDirectory,\n        WTSClientProductId,\n        WTSClientHardwareId,\n        WTSClientAddress,\n        WTSClientDisplay,\n        WTSClientProtocolType\n    }\n\n    public static IntPtr GetWTSUserSessionInformation(int sessionId)\n    {\n        IntPtr p = IntPtr.Zero;\n        int bytes = 0;\n        bool result = WTSQuerySessionInformation(IntPtr.Zero, sessionId, WTS_INFO_CLASS.WTSUserName, out p, out bytes);\n        return p;\n    }\n\n    public static void FreeWTSUserSessionInformation(IntPtr p)\n    {\n        WTSFreeMemory(p);\n    }\n\n    public static string GetWTSUserName(int sessionId)\n    {\n        IntPtr p = GetWTSUserSessionInformation(sessionId);\n        string userName = Marshal.PtrToStringAnsi(p);\n        FreeWTSUserSessionInformation(p);\n        return userName;\n    }\n\n    public static int GetSessionId()\n    {\n        return Process.GetCurrentProcess().SessionId;\n    }\n\n    public static void Main()\n    {\n        int sessionId = GetSessionId();\n        string userName = GetWTSUserName(sessionId);\n        Console.WriteLine("User: " + userName + " with SessionId: " + sessionId);\n    }\n}