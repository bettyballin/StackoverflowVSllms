using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class MyCustomObj\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n\npublic class SortOrderManager\n{\n    private Dictionary<int, MyCustomObj> _sortOrder = new Dictionary<int, MyCustomObj>();\n    private IList<MyCustomObj> _items;\n\n    public SortOrderManager(IList<MyCustomObj> items)\n    {\n        _items = items;\n        InitializeSortOrder();\n    }\n\n    private void InitializeSortOrder()\n    {\n        int sortOrder = 0;\n        foreach (var item in _items)\n        {\n            _sortOrder.Add(sortOrder, item);\n            sortOrder++;\n        }\n    }\n\n    public void MoveUp(int itemId)\n    {\n        var item = _items.FirstOrDefault(i => i.Id == itemId);\n        if (item == null) return;\n\n        int currentSortOrder = GetSortOrder(item);\n        if (currentSortOrder == 0) return; // already at the top\n\n        var newItemSortOrder = currentSortOrder - 1;\n        if (_sortOrder.ContainsKey(newItemSortOrder))\n        {\n            // Swap items\n            var itemToSwap = _sortOrder[newItemSortOrder];\n            _sortOrder[newItemSortOrder] = item;\n            _sortOrder[currentSortOrder] = itemToSwap;\n        }\n        else\n        {\n            // Move item to the new position, leaving a gap\n            _sortOrder.Remove(currentSortOrder);\n            _sortOrder.Add(newItemSortOrder, item);\n        }\n    }\n\n    public void MoveDown(int itemId)\n    {\n        var item = _items.FirstOrDefault(i => i.Id == itemId);\n        if (item == null) return;\n\n        int currentSortOrder = GetSortOrder(item);\n        if (currentSortOrder == _sortOrder.Count - 1) return; // already at the bottom\n\n        var newItemSortOrder = currentSortOrder + 1;\n        if (_sortOrder.ContainsKey(newItemSortOrder))\n        {\n            // Swap items\n            var itemToSwap = _sortOrder[newItemSortOrder];\n            _sortOrder[newItemSortOrder] = item;\n            _sortOrder[currentSortOrder] = itemToSwap;\n        }\n        else\n        {\n            // Move item to the new position, leaving a gap\n            _sortOrder.Remove(currentSortOrder);\n            _sortOrder.Add(newItemSortOrder, item);\n        }\n    }\n\n    private int GetSortOrder(MyCustomObj item)\n    {\n        return _sortOrder.FirstOrDefault(kvp => kvp.Value == item).Key;\n    }\n}