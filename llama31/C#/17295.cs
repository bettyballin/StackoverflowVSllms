public interface IValidatable\n{\n    bool IsValid { get; }\n    IEnumerable<RuleViolation> GetRuleViolations();\n    void OnValidate(ChangeAction action);\n}\n\npublic static class ValidationExtensions\n{\n    public static void Validate(this IValidatable model, ChangeAction action)\n    {\n        if (!model.IsValid)\n        {\n            throw new ApplicationException("Rule violations prevent saving");\n        }\n    }\n}\n\npublic partial class Foo : IValidatable\n{\n    public bool IsValid => GetRuleViolations().Count() == 0;\n\n    public IEnumerable<RuleViolation> GetRuleViolations()\n    {\n        yield break;\n    }\n\n    partial void OnValidate(ChangeAction action)\n    {\n        this.Validate(action);\n    }\n}\n\npublic partial class Bar : IValidatable\n{\n    public bool IsValid => GetRuleViolations().Count() == 0;\n\n    public IEnumerable<RuleViolation> GetRuleViolations()\n    {\n        yield break;\n    }\n\n    partial void OnValidate(ChangeAction action)\n    {\n        this.Validate(action);\n    }\n}