public struct LimitedInt\n{\n    private int _value;\n\n    public LimitedInt(int value)\n    {\n        if (value < 1 || value > 10)\n        {\n            throw new ArgumentOutOfRangeException(nameof(value), "Value must be between 1 and 10.");\n        }\n        _value = value;\n    }\n\n    public static implicit operator int(LimitedInt limitedInt) => limitedInt._value;\n\n    public static explicit operator LimitedInt(int value) => new LimitedInt(value);\n\n    public static LimitedInt operator +(LimitedInt a, LimitedInt b)\n    {\n        int result = a._value + b._value;\n        if (result < 1 || result > 10)\n        {\n            throw new OverflowException("Result is outside the valid range.");\n        }\n        return new LimitedInt(result);\n    }\n\n    public static LimitedInt operator -(LimitedInt a, LimitedInt b)\n    {\n        int result = a._value - b._value;\n        if (result < 1 || result > 10)\n        {\n            throw new OverflowException("Result is outside the valid range.");\n        }\n        return new LimitedInt(result);\n    }\n\n    // Implement other operators as needed (e.g., *, /, ==, !=, <, >, etc.)\n\n    public override string ToString() => _value.ToString();\n}