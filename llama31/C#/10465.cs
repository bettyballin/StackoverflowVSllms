using System.Security.Cryptography;\nusing System.Text;\n\npublic class PasswordHasher\n{\n    private const int Iterations = 10000;\n    private const int SaltSize = 16;\n    private const int HashSize = 32;\n\n    public byte[] HashPassword(string password)\n    {\n        var salt = new byte[SaltSize];\n        using (var rng = RandomNumberGenerator.Create())\n        {\n            rng.GetBytes(salt);\n        }\n\n        using (var pbkdf2 = new Rfc2898DeriveBytes(password, salt, Iterations))\n        {\n            var hash = pbkdf2.GetBytes(HashSize);\n            var result = new byte[SaltSize + HashSize];\n            Array.Copy(salt, 0, result, 0, SaltSize);\n            Array.Copy(hash, 0, result, SaltSize, HashSize);\n            return result;\n        }\n    }\n\n    public bool VerifyPassword(string password, byte[] storedHash)\n    {\n        var salt = new byte[SaltSize];\n        Array.Copy(storedHash, 0, salt, 0, SaltSize);\n\n        using (var pbkdf2 = new Rfc2898DeriveBytes(password, salt, Iterations))\n        {\n            var hash = pbkdf2.GetBytes(HashSize);\n            var result = new byte[HashSize];\n            Array.Copy(storedHash, SaltSize, result, 0, HashSize);\n            return hash.SequenceEqual(result);\n        }\n    }\n}