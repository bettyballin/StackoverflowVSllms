// Define the GisObject class\npublic class GisObject\n{\n    public virtual int Id { get; set; }\n    public virtual string Description { get; set; }\n    // ...\n}\n\n// Define the interceptor\npublic class DynamicTableInterceptor : IInterceptor\n{\n    private string _tableName;\n\n    public DynamicTableInterceptor(string tableName)\n    {\n        _tableName = tableName;\n    }\n\n    public override void OnLoad(object entity, object id, object[] state, string[] propertyNames, IType[] types)\n    {\n        // Set the table name dynamically\n        ((GisObject)entity).Table = _tableName;\n    }\n}\n\n// Configure NHibernate\nvar cfg = new Configuration();\ncfg.AddAssembly(typeof(GisObject).Assembly);\n\n// Create a session factory with the custom interceptor\nvar sessionFactory = cfg.BuildSessionFactory(new DynamicTableInterceptor("my_table_name"));\n\n// Use the session factory to retrieve GisObject instances\nusing (var session = sessionFactory.OpenSession())\n{\n    var gisObjects = session.CreateCriteria<GisObject>().List<GisObject>();\n    // ...\n}