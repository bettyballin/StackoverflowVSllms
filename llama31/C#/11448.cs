using System.ComponentModel.Composition;\nusing System.ComponentModel.Composition.Hosting;\nusing System.IO;\nusing System.Linq;\n\n// Assume this is your IFilter interface\npublic interface IFilter\n{\n    string Name { get; }\n}\n\npublic class FilterLoader\n{\n    [Import]\n    public IEnumerable<IFilter> Filters { get; set; }\n\n    private CompositionContainer _container;\n\n    public void LoadFilters(string directoryPath)\n    {\n        var catalog = new AggregateCatalog();\n        catalog.Catalogs.Add(new DirectoryCatalog(directoryPath));\n\n        _container = new CompositionContainer(catalog);\n        _container.ComposeParts(this);\n    }\n\n    public void UnloadFilter(string filterName)\n    {\n        var filterToRemove = Filters.FirstOrDefault(f => f.Name == filterName);\n        if (filterToRemove != null)\n        {\n            var batch = new CompositionBatch();\n            batch.RemovePart(filterToRemove);\n            _container.Compose(batch);\n        }\n    }\n}