[ServiceContract]\npublic interface ICacheService\n{\n    [OperationContract]\n    void Add(string key, object value);\n\n    [OperationContract]\n    object Get(string key);\n\n    [OperationContract]\n    void Remove(string key);\n}\n\n[ServiceBehavior(InstanceContextMode = InstanceContextMode.Single)]\npublic class CacheService : ICacheService\n{\n    private readonly ConcurrentDictionary<string, object> cache = new ConcurrentDictionary<string, object>();\n\n    public void Add(string key, object value)\n    {\n        cache.TryAdd(key, value);\n    }\n\n    public object Get(string key)\n    {\n        return cache[key];\n    }\n\n    public void Remove(string key)\n    {\n        cache.TryRemove(key, out object value);\n    }\n}