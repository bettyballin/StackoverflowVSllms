using System;\nusing System.Runtime.InteropServices;\n\npublic class Program\n{\n    [DllImport("kernel32", CharSet = CharSet.Auto, SetLastError = true)]\n    public static extern IntPtr GetStdHandle(int nStdHandle);\n\n    [DllImport("kernel32", CharSet = CharSet.Auto, SetLastError = true)]\n    public static extern bool WriteConsoleInput(IntPtr hConsoleInput, INPUT_RECORD[] lpBuffer, int nLength, out int lpNumberOfEventsWritten);\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct INPUT_RECORD\n    {\n        public short EventType;\n        public KEY_EVENT_RECORD Event;\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct KEY_EVENT_RECORD\n    {\n        public short KeyValue;\n        public short MakeCode;\n        public short Flags;\n        public short Reserved;\n        public short ExtraInfo;\n    }\n\n    public static void Main()\n    {\n        IntPtr hConsoleInput = GetStdHandle(-10); // STD_INPUT_HANDLE\n\n        INPUT_RECORD[] lpBuffer = new INPUT_RECORD[2];\n\n        lpBuffer[0].EventType = 1; // KEY_EVENT\n        lpBuffer[0].Event.KeyValue = 0x41; // A\n        lpBuffer[0].Event.MakeCode = 0;\n        lpBuffer[0].Event.Flags = 0;\n        lpBuffer[0].Event.Reserved = 0;\n        lpBuffer[0].Event.ExtraInfo = 0;\n\n        lpBuffer[1].EventType = 1; // KEY_EVENT\n        lpBuffer[1].Event.KeyValue = 0x5A; // Z\n        lpBuffer[1].Event.MakeCode = 0;\n        lpBuffer[1].Event.Flags = 0;\n        lpBuffer[1].Event.Reserved = 0;\n        lpBuffer[1].Event.ExtraInfo = 0;\n\n        int nLength = lpBuffer.Length;\n        int lpNumberOfEventsWritten;\n\n        if (!WriteConsoleInput(hConsoleInput, lpBuffer, nLength, out lpNumberOfEventsWritten))\n        {\n            Console.WriteLine("Error: {0}", Marshal.GetLastWin32Error());\n        }\n\n        Console.Write("Input something: ");\n        string input = Console.ReadLine();\n        Console.WriteLine("input = {0}", input);\n    }\n}