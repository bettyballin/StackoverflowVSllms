using System;\nusing System.Collections.Generic;\nusing iTextSharp.text;\nusing iTextSharp.text.pdf;\n\npublic class PdfIndexGenerator\n{\n    public void GenerateIndex(string inputFile, string outputFile)\n    {\n        // Read the input PDF file\n        PdfReader reader = new PdfReader(inputFile);\n\n        // Create a new PDF document\n        Document document = new Document();\n        PdfWriter writer = PdfWriter.GetInstance(document, new FileStream(outputFile, FileMode.Create));\n\n        // Get the list of words from the input PDF file\n        List<string> words = GetWordsFromPdf(reader);\n\n        // Create an index\n        Dictionary<string, List<int>> index = CreateIndex(words, reader);\n\n        // Add the index to the new PDF document\n        document.Open();\n        foreach (var entry in index)\n        {\n            document.Add(new Paragraph(entry.Key));\n            foreach (int page in entry.Value)\n            {\n                document.Add(new Paragraph("Page " + page));\n            }\n        }\n        document.Close();\n\n        // Append the new PDF document to the original PDF file\n        PdfCopy copy = new PdfCopy(writer, reader);\n        for (int i = 1; i <= reader.NumberOfPages; i++)\n        {\n            copy.AddPage(copy.GetImportedPage(reader, i));\n        }\n        copy.Close();\n    }\n\n    private List<string> GetWordsFromPdf(PdfReader reader)\n    {\n        List<string> words = new List<string>();\n        for (int i = 1; i <= reader.NumberOfPages; i++)\n        {\n            string text = PdfTextExtractor.GetTextFromPage(reader, i);\n            string[] tokens = text.Split(new char[] { ' ', '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);\n            foreach (string token in tokens)\n            {\n                words.Add(token.ToLower());\n            }\n        }\n        return words;\n    }\n\n    private Dictionary<string, List<int>> CreateIndex(List<string> words, PdfReader reader)\n    {\n        Dictionary<string, List<int>> index = new Dictionary<string, List<int>>();\n        for (int i = 0; i < words.Count; i++)\n        {\n            string word = words[i];\n            if (!index.ContainsKey(word))\n            {\n                index[word] = new List<int>();\n            }\n            int page = i / 100 + 1; // assume 100 words per page\n            if (!index[word].Contains(page))\n            {\n                index[word].Add(page);\n            }\n        }\n        return index;\n    }\n}