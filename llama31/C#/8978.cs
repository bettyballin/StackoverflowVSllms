using System;\nusing System.IO;\nusing System.Security.Cryptography;\n\npublic class FileEncryptor\n{\n    public static void EncryptFile(string filePath, string password)\n    {\n        // Create a new Aes object\n        using (Aes aes = Aes.Create())\n        {\n            // Set the encryption key and initialization vector\n            aes.Key = GetKey(password);\n            aes.IV = GetIV();\n\n            // Create a file stream to read the file\n            using (FileStream fileStream = new FileStream(filePath, FileMode.Open))\n            {\n                // Create a crypto stream to encrypt the file\n                using (CryptoStream cryptoStream = new CryptoStream(fileStream, aes.CreateEncryptor(), CryptoStreamMode.Read))\n                {\n                    // Create a new file stream to write the encrypted file\n                    using (FileStream encryptedFileStream = new FileStream(filePath + ".enc", FileMode.Create))\n                    {\n                        // Copy the encrypted data to the new file\n                        cryptoStream.CopyTo(encryptedFileStream);\n                    }\n                }\n            }\n        }\n    }\n\n    private static byte[] GetKey(string password)\n    {\n        // Use a password-based key derivation function to generate a key\n        using (Rfc2898DeriveBytes deriveBytes = new Rfc2898DeriveBytes(password, new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 1000))\n        {\n            return deriveBytes.GetBytes(32);\n        }\n    }\n\n    private static byte[] GetIV()\n    {\n        // Generate a random initialization vector\n        using (Aes aes = Aes.Create())\n        {\n            aes.GenerateIV();\n            return aes.IV;\n        }\n    }\n}