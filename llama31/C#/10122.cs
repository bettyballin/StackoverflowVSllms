using System;\nusing System.Collections.Generic;\n\npublic class Graph\n{\n    private Dictionary<string, List<string>> adjacencyList;\n\n    public Graph()\n    {\n        adjacencyList = new Dictionary<string, List<string>>();\n    }\n\n    public void AddEdge(string from, string to)\n    {\n        if (!adjacencyList.ContainsKey(from))\n            adjacencyList[from] = new List<string>();\n\n        adjacencyList[from].Add(to);\n    }\n\n    public List<string> GetPath(string start, string end)\n    {\n        var queue = new Queue<string>();\n        var visited = new HashSet<string>();\n        var path = new List<string>();\n\n        queue.Enqueue(start);\n        visited.Add(start);\n\n        while (queue.Count > 0)\n        {\n            var node = queue.Dequeue();\n            path.Add(node);\n\n            if (node == end)\n                return path;\n\n            foreach (var neighbor in adjacencyList[node])\n            {\n                if (!visited.Contains(neighbor))\n                {\n                    queue.Enqueue(neighbor);\n                    visited.Add(neighbor);\n                }\n            }\n        }\n\n        return null; // no path found\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        var graph = new Graph();\n\n        // add edges (Table 21 -> Table 12, Table 12 -> Table 9, etc.)\n        graph.AddEdge("Table 21", "Table 12");\n        graph.AddEdge("Table 12", "Table 9");\n        graph.AddEdge("Table 9", "Table 6");\n        graph.AddEdge("Table 6", "Table 8");\n\n        var path = graph.GetPath("Table 21", "Table 8");\n\n        if (path != null)\n            Console.WriteLine(string.Join(" -> ", path));\n        else\n            Console.WriteLine("No path found.");\n    }\n}