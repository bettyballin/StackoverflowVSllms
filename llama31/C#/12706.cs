public class DynamicProxy<T> : RealProxy\n{\n    private readonly InvocationHandler _invocationHandler;\n\n    public DynamicProxy(InvocationHandler invocationHandler) \n        : base(typeof(T))\n    {\n        _invocationHandler = invocationHandler;\n    }\n\n    public override IMessage Invoke(IMessage msg)\n    {\n        var methodCall = msg as IMethodCallMessage;\n        if (methodCall != null)\n        {\n            var result = _invocationHandler.Invoke(\n                methodCall.MethodBase,\n                methodCall.InArgs);\n            return new ReturnMessage(result, null, 0, methodCall.LogicalCallContext, methodCall);\n        }\n\n        throw new NotSupportedException();\n    }\n}\n\npublic interface InvocationHandler\n{\n    object Invoke(MethodBase method, object[] args);\n}\n\npublic static class ProxyFactory\n{\n    public static T CreateProxy<T>(InvocationHandler invocationHandler)\n    {\n        var proxy = new DynamicProxy<T>(invocationHandler);\n        return (T)proxy.GetTransparentProxy();\n    }\n}