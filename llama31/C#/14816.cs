using System;\nusing System.Net;\nusing System.Net.Mail;\nusing System.Net.Sockets;\n\npublic class SmtpValidator\n{\n    public bool ValidateEmail(string email)\n    {\n        var host = email.Split('@')[1];\n        var mxRecords = GetMxRecords(host);\n\n        foreach (var mxRecord in mxRecords)\n        {\n            try\n            {\n                using (var smtpClient = new SmtpClient(mxRecord))\n                {\n                    smtpClient.EnableSsl = true;\n                    smtpClient.Timeout = 10000; // 10 seconds\n                    var response = smtpClient.SendMailAsync(new MailMessage { From = new MailAddress("test@example.com"), To = { email } }, new CancellationToken()).Result;\n                    if (response.StatusCode == SmtpStatusCode.Ok)\n                    {\n                        return true;\n                    }\n                }\n            }\n            catch (SmtpException ex)\n            {\n                if (ex.StatusCode == SmtpStatusCode.MailboxUnavailable)\n                {\n                    return false;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    private string[] GetMxRecords(string host)\n    {\n        var dns = new DnsClient();\n        var response = dns.Query(host, QueryType.MX);\n        var mxRecords = response.Answers\n            .OfType<MxRecordBase>()\n            .Select(r => r.Exchange.ToString())\n            .ToArray();\n\n        return mxRecords;\n    }\n}\n\npublic class DnsClient\n{\n    public DnsResponse Query(string host, QueryType type)\n    {\n        var dnsRequest = new DnsRequest(host, type);\n        var dnsResponse = dnsRequest.GetResponse();\n\n        return dnsResponse;\n    }\n}\n\npublic enum QueryType\n{\n    MX = 15\n}\n\npublic class MxRecordBase\n{\n    public string Exchange { get; set; }\n}\n\npublic class DnsRequest\n{\n    private readonly string _host;\n    private readonly QueryType _type;\n\n    public DnsRequest(string host, QueryType type)\n    {\n        _host = host;\n        _type = type;\n    }\n\n    public DnsResponse GetResponse()\n    {\n        var dnsServer = "8.8.8.8"; // Google public DNS\n        var dnsPort = 53;\n\n        using (var udpClient = new UdpClient(dnsServer, dnsPort))\n        {\n            var dnsQuery = BuildDnsQuery();\n            udpClient.Send(dnsQuery, dnsQuery.Length);\n\n            var dnsResponse = udpClient.Receive(ref dnsServer);\n            return ParseDnsResponse(dnsResponse);\n        }\n    }\n\n    private byte[] BuildDnsQuery()\n    {\n        var dnsQuery = new byte[12 + _host.Length + 4];\n\n        // Header\n        dnsQuery[0] = 0x00;\n        dnsQuery[1] = 0x01; // ID\n        dnsQuery[2] = 0x01;\n        dnsQuery[3] = 0x00; // Flags\n        dnsQuery[4] = 0x00;\n        dnsQuery[5] = 0x01; // QDCOUNT\n\n        // Question\n        dnsQuery[12] = 0x00; // QNAME\n        Array.Copy(Encoding.ASCII.GetBytes(_host), 0, dnsQuery, 13, _host.Length);\n        dnsQuery[13 + _host.Length] = 0x00; // QNAME\n        dnsQuery[14 + _host.Length] = 0x00; // QTYPE\n        dnsQuery[15 + _host.Length] = 0x0f; // QCLASS\n\n        return dnsQuery;\n    }\n\n    private DnsResponse ParseDnsResponse(byte[] response)\n    {\n        var dnsResponse = new DnsResponse();\n\n        // Header\n        var id = (ushort)(response[0] << 8 | response[1]);\n        var flags = (ushort)(response[2] << 8 | response[3]);\n\n        // Answer\n        var answerCount = (ushort)(response[6] << 8 | response[7]);\n        var answers = new List<MxRecordBase>();\n\n        var offset = 12;\n        for (int i = 0; i < answerCount; i++)\n        {\n            var name = ReadLabel(response, ref offset);\n            var type = (ushort)(response[offset] << 8 | response[offset + 1]);\n            var class_ = (ushort)(response[offset + 2] << 8 | response[offset + 3]);\n            var ttl = (uint)(response[offset + 4] << 24 | response[offset + 5] << 16 | response[offset + 6] << 8 | response[offset + 7]);\n            var rdlength = (ushort)(response[offset + 8] << 8 | response[offset + 9]);\n            var rdata = new byte[rdlength];\n\n            Array.Copy(response, offset + 10, rdata, 0, rdlength);\n\n            if (type == 15) // MX\n            {\n                var exchange = ReadLabel(rdata, ref offset);\n                answers.Add(new MxRecordBase { Exchange = exchange });\n            }\n\n            offset += 10 + rdlength;\n        }\n\n        dnsResponse.Answers = answers;\n\n        return dnsResponse;\n    }\n\n    private string ReadLabel(byte[] data, ref int offset)\n    {\n        var label = new StringBuilder();\n\n        while (data[offset] != 0x00)\n        {\n            var length = data[offset];\n            offset++;\n\n            for (int i = 0; i < length; i++)\n            {\n                label.Append((char)data[offset]);\n                offset++;\n            }\n\n            if (data[offset] != 0x00)\n            {\n                label.Append('.');\n            }\n        }\n\n        offset++;\n\n        return label.ToString();\n    }\n}\n\npublic class DnsResponse\n{\n    public List<MxRecordBase> Answers { get; set; }\n}