// Repository Layer\npublic class PersonRepository : IPersonRepository\n{\n    private readonly IDataAccess _dataAccess;\n\n    public PersonRepository(IDataAccess dataAccess)\n    {\n        _dataAccess = dataAccess;\n    }\n\n    public Person GetPerson(int id)\n    {\n        // Load person entity\n        Person person = _dataAccess.GetPerson(id);\n\n        // Create a proxy for the Addresses collection\n        person.Addresses = new LazyLoadedCollection<Address>(() =>\n        {\n            // Load addresses for the person when the collection is accessed\n            return _dataAccess.GetAddressesForPerson(person.Id);\n        });\n\n        return person;\n    }\n}\n\n// Business Entity\npublic class Person\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public LazyLoadedCollection<Address> Addresses { get; set; }\n}\n\n// Lazy Loaded Collection\npublic class LazyLoadedCollection<T> : ICollection<T>\n{\n    private readonly Func<IEnumerable<T>> _loadFunction;\n    private IEnumerable<T> _items;\n\n    public LazyLoadedCollection(Func<IEnumerable<T>> loadFunction)\n    {\n        _loadFunction = loadFunction;\n    }\n\n    public IEnumerator<T> GetEnumerator()\n    {\n        if (_items == null)\n        {\n            _items = _loadFunction();\n        }\n        return _items.GetEnumerator();\n    }\n}