using System;\nusing System.ComponentModel;\nusing System.Reflection;\n\npublic class GuidToByteArrayConverter : TypeConverter\n{\n    private readonly TypeConverter _originalConverter;\n\n    public GuidToByteArrayConverter(TypeConverter originalConverter)\n    {\n        _originalConverter = originalConverter;\n    }\n\n    public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)\n    {\n        if (destinationType == typeof(byte[]))\n        {\n            return true;\n        }\n        return _originalConverter.CanConvertTo(context, destinationType);\n    }\n\n    public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)\n    {\n        if (destinationType == typeof(byte[]))\n        {\n            Guid guid = (Guid)value;\n            return guid.ToByteArray();\n        }\n        return _originalConverter.ConvertTo(context, culture, value, destinationType);\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Register the custom converter\n        TypeDescriptor.AddAttributes(typeof(Guid), new TypeConverterAttribute(typeof(GuidToByteArrayConverter)));\n\n        Guid g = new Guid();\n        object o1 = g;\n        byte[] b = (byte[])Convert.ChangeType(o1, typeof(byte[])); // should work now\n    }\n}