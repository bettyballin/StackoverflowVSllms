public class Comment\n{\n    public int Id { get; set; }\n    public int? ParentId { get; set; }\n    public string Text { get; set; }\n    public List<Comment> Children { get; set; }\n\n    public Comment()\n    {\n        Children = new List<Comment>();\n    }\n}\n\npublic List<Comment> GetThreadedComments(List<Comment> comments)\n{\n    var threadedComments = new List<Comment>();\n\n    foreach (var comment in comments)\n    {\n        if (comment.ParentId == null)\n        {\n            threadedComments.Add(comment);\n        }\n        else\n        {\n            var parent = comments.FirstOrDefault(c => c.Id == comment.ParentId);\n            if (parent != null)\n            {\n                parent.Children.Add(comment);\n            }\n        }\n    }\n\n    return threadedComments;\n}\n\n// Example usage:\nvar comments = new List<Comment>\n{\n    new Comment { Id = 1, Text = "Blah" },\n    new Comment { Id = 2, ParentId = 1, Text = "Blah Blah" },\n    new Comment { Id = 3, ParentId = 2, Text = "Blah Blah Blah" },\n    new Comment { Id = 4, ParentId = 3, Text = "Blah Blah Blah Blah" },\n    new Comment { Id = 5, ParentId = 2, Text = "Blah Blah Blah" },\n    new Comment { Id = 6, ParentId = 1, Text = "Blah Blah" },\n};\n\nvar threadedComments = GetThreadedComments(comments);\n\n// Print threaded comments:\nforeach (var comment in threadedComments)\n{\n    PrintComment(comment, 0);\n}\n\nvoid PrintComment(Comment comment, int level)\n{\n    Console.WriteLine(new string('-', level * 3) + comment.Text);\n    foreach (var child in comment.Children)\n    {\n        PrintComment(child, level + 1);\n    }\n}