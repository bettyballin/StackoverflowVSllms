// Define a contract for a Core component\npublic interface ICoreComponent\n{\n    void DoSomething();\n}\n\n// Implement the Core component\n[Export(typeof(ICoreComponent))]\npublic class CoreComponent : ICoreComponent\n{\n    public void DoSomething() { /* implementation */ }\n}\n\n// Define a Product component that extends the Core component\n[Export(typeof(ICoreComponent))]\npublic class ProductComponent : CoreComponent\n{\n    public override void DoSomething() { /* override implementation */ }\n}\n\n// Create a composition container\nvar container = new CompositionContainer();\n\n// Add the Core and Product components to the container\ncontainer.ComposeParts(new CoreComponent(), new ProductComponent());\n\n// Get an instance of the Product component\nvar productComponent = container.GetExport<ICoreComponent>();\n\n// Use the Product component\nproductComponent.DoSomething();