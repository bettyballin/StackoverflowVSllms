// Presentation layer\npublic class ConsolePresenter\n{\n    private readonly ICommandHandler _commandHandler;\n\n    public ConsolePresenter(ICommandHandler commandHandler)\n    {\n        _commandHandler = commandHandler;\n    }\n\n    public void Run()\n    {\n        while (true)\n        {\n            Console.Write("> ");\n            string input = Console.ReadLine();\n            ICommand command = new Command(input);\n            _commandHandler.Handle(command);\n        }\n    }\n}\n\n// Command pattern\npublic interface ICommand\n{\n    string Name { get; }\n    void Execute();\n}\n\npublic class Command : ICommand\n{\n    private readonly string _name;\n\n    public Command(string name)\n    {\n        _name = name;\n    }\n\n    public string Name => _name;\n\n    public void Execute()\n    {\n        // Execute the command's logic\n    }\n}\n\n// Business Logic layer\npublic interface ICommandHandler\n{\n    void Handle(ICommand command);\n}\n\npublic class CommandHandler : ICommandHandler\n{\n    private readonly IDictionary<string, ICommand> _commands;\n\n    public CommandHandler()\n    {\n        _commands = new Dictionary<string, ICommand>();\n        // Register commands here\n    }\n\n    public void Handle(ICommand command)\n    {\n        if (_commands.TryGetValue(command.Name, out ICommand registeredCommand))\n        {\n            registeredCommand.Execute();\n        }\n        else\n        {\n            Console.WriteLine("Unknown command");\n        }\n    }\n}\n\n// Data Access layer\npublic interface IDataAccess\n{\n    void SaveData(string data);\n}\n\npublic class DataAccess : IDataAccess\n{\n    public void SaveData(string data)\n    {\n        // Save data to storage\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        ICommandHandler commandHandler = new CommandHandler();\n        ConsolePresenter presenter = new ConsolePresenter(commandHandler);\n        presenter.Run();\n    }\n}