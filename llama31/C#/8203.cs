// Define the custom type\n[ComVisible(true)]\n[Serializable]\npublic class Statistics : IStatistics\n{\n    public double Mean { get; set; }\n    public double StdDev { get; set; }\n}\n\n// Define the interface\n[ComVisible(true)]\npublic interface IStatistics\n{\n    double Mean { get; set; }\n    double StdDev { get; set; }\n}\n\n// Create a SAFEARRAY of the custom type\nSAFEARRAY *pEquationsStatistics;\nSAFEARRAYBOUND dimensions[1];\ndimensions[0].cElements = 2;\ndimensions[0].lLbound = 0;\n\npEquationsStatistics = SafeArrayCreate(VT_RECORD, 1, dimensions);\n\n// Initialize the SAFEARRAY with the custom type\nIStatisticsPtr pIStatistics(__uuidof(Statistics));\nfor (long i = 0; i < dimensions[0].cElements; i++)\n{\n    long indices[1];\n    indices[0] = i;\n\n    // Create a new instance of the custom type\n    pIStatistics.CreateInstance(__uuidof(Statistics));\n\n    // Set the properties of the custom type\n    pIStatistics->PutMean(1.0);\n    pIStatistics->PutStdDev(2.0);\n\n    // Add the custom type to the SAFEARRAY\n    HRESULT result = SafeArrayPutElement(pEquationsStatistics, indices, pIStatistics);\n    if (FAILED(result))\n    {\n        // Handle the error\n    }\n}\n\n// Pass the SAFEARRAY to the managed code\n// ...\n\n// In the managed code, you can access the SAFEARRAY like this:\nobject[] statistics = (object[])Marshal.GetObjectForNativeData(pEquationsStatistics);\nforeach (Statistics stat in statistics)\n{\n    Console.WriteLine(stat.Mean);\n    Console.WriteLine(stat.StdDev);\n}