using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing System.ServiceModel.Description;\n\npublic class EncryptedDataContractSerializerOperationBehavior : DataContractSerializerOperationBehavior\n{\n    private readonly string encryptionKey;\n\n    public EncryptedDataContractSerializerOperationBehavior(OperationDescription operation) \n        : base(operation)\n    {\n        // Load encryption key from secure storage\n        encryptionKey = LoadEncryptionKey();\n    }\n\n    public override XmlObjectSerializer CreateSerializer(Type type, string name, string ns, IList<Type> knownTypes)\n    {\n        return new EncryptedDataContractSerializer(type, name, ns, knownTypes, encryptionKey);\n    }\n\n    public override XmlObjectSerializer CreateSerializer(Type type, XmlDictionaryString name, XmlDictionaryString ns, IList<Type> knownTypes)\n    {\n        return new EncryptedDataContractSerializer(type, name, ns, knownTypes, encryptionKey);\n    }\n}\n\npublic class EncryptedDataContractSerializer : DataContractSerializer\n{\n    private readonly string encryptionKey;\n\n    public EncryptedDataContractSerializer(Type type, string name, string ns, IList<Type> knownTypes, string encryptionKey) \n        : base(type, name, ns, knownTypes)\n    {\n        this.encryptionKey = encryptionKey;\n    }\n\n    public EncryptedDataContractSerializer(Type type, XmlDictionaryString name, XmlDictionaryString ns, IList<Type> knownTypes, string encryptionKey) \n        : base(type, name, ns, knownTypes)\n    {\n        this.encryptionKey = encryptionKey;\n    }\n\n    public override object ReadObject(XmlDictionaryReader reader, bool verifyObjectName)\n    {\n        // Decrypt XML data\n        using (var ms = new MemoryStream())\n        {\n            using (var cryptoStream = new CryptoStream(ms, GetDecryptor(), CryptoStreamMode.Write))\n            {\n                using (var writer = XmlDictionaryWriter.CreateDictionaryWriter(XmlWriter.Create(cryptoStream)))\n                {\n                    reader.ReadStartElement();\n                    writer.WriteNode(reader, false);\n                    writer.Flush();\n                }\n            }\n            ms.Position = 0;\n            return base.ReadObject(XmlDictionaryReader.CreateTextReader(ms, XmlDictionaryReaderQuotas.Max), verifyObjectName);\n        }\n    }\n\n    public override void WriteObject(XmlDictionaryWriter writer, object graph)\n    {\n        // Encrypt XML data\n        using (var ms = new MemoryStream())\n        {\n            using (var cryptoStream = new CryptoStream(ms, GetEncryptor(), CryptoStreamMode.Write))\n            {\n                using (var innerWriter = XmlDictionaryWriter.CreateDictionaryWriter(XmlWriter.Create(cryptoStream)))\n                {\n                    base.WriteObject(innerWriter, graph);\n                    innerWriter.Flush();\n                }\n            }\n            ms.Position = 0;\n            writer.WriteNode(XmlDictionaryReader.CreateTextReader(ms, XmlDictionaryReaderQuotas.Max), false);\n        }\n    }\n\n    private ICryptoTransform GetEncryptor()\n    {\n        using (var aes = Aes.Create())\n        {\n            aes.Key = Convert.FromBase64String(encryptionKey);\n            aes.GenerateIV();\n            return aes.CreateEncryptor(aes.Key, aes.IV);\n        }\n    }\n\n    private ICryptoTransform GetDecryptor()\n    {\n        using (var aes = Aes.Create())\n        {\n            aes.Key = Convert.FromBase64String(encryptionKey);\n            aes.GenerateIV();\n            return aes.CreateDecryptor(aes.Key, aes.IV);\n        }\n    }\n}