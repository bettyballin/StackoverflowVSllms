using System;\nusing System.Data.SQLite;\nusing Microsoft.EntityFrameworkCore;\nusing RabbitMQ.Client;\n\n// Client-side SQLite database\npublic class ClientDbContext : DbContext\n{\n    public DbSet<DataLog> DataLogs { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        optionsBuilder.UseSqlite("Data Source=client.db");\n    }\n}\n\n// Server-side SQL Server database\npublic class ServerDbContext : DbContext\n{\n    public DbSet<DataLog> DataLogs { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        optionsBuilder.UseSqlServer("Server=myserver;Database=mydatabase;User Id=myuser;Password=mypassword;");\n    }\n}\n\n// Data replication service\npublic class DataReplicationService\n{\n    private readonly ClientDbContext _clientDbContext;\n    private readonly ServerDbContext _serverDbContext;\n    private readonly IConnection _rabbitMqConnection;\n\n    public DataReplicationService(ClientDbContext clientDbContext, ServerDbContext serverDbContext, IConnection rabbitMqConnection)\n    {\n        _clientDbContext = clientDbContext;\n        _serverDbContext = serverDbContext;\n        _rabbitMqConnection = rabbitMqConnection;\n    }\n\n    public void SynchronizeData()\n    {\n        // Read changes from client database\n        var changes = _clientDbContext.DataLogs.Where(x => x.ROWID > _lastSyncRowId).ToList();\n\n        // Send changes to server via message queue\n        var body = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(changes));\n        var properties = new BasicProperties\n        {\n            Persistence = true,\n            Type = "text/json"\n        };\n        _rabbitMqConnection.BasicPublish(exchange: "", routingKey: "data_sync", body: body, properties: properties);\n\n        // Update last sync ROWID\n        _lastSyncRowId = changes.Max(x => x.ROWID);\n    }\n}