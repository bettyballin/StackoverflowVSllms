using System;\nusing System.Runtime.InteropServices;\n\npublic class RegistryMonitor\n{\n    [DllImport("advapi32.dll", SetLastError = true)]\n    private static extern int RegNotifyChangeKeyValue(IntPtr hKey, bool watchSubtree, int notifyFilter, IntPtr hEvent, bool asynchronous);\n\n    [DllImport("advapi32.dll", SetLastError = true)]\n    private static extern IntPtr RegOpenKeyEx(IntPtr hKey, string lpSubKey, int ulOptions, int samDesired, out IntPtr phkResult);\n\n    [DllImport("advapi32.dll", SetLastError = true)]\n    private static extern int RegCloseKey(IntPtr hKey);\n\n    private const int REG_NOTIFY_CHANGE_NAME = 0x00000001;\n    private const int REG_NOTIFY_CHANGE_ATTRIBUTES = 0x00000002;\n    private const int REG_NOTIFY_CHANGE_LAST_SET = 0x00000004;\n    private const int REG_NOTIFY_CHANGE_SECURITY = 0x00000008;\n\n    public void MonitorRegistry()\n    {\n        IntPtr hKey;\n        IntPtr hEvent = new IntPtr(0);\n\n        // Open the registry key\n        if (RegOpenKeyEx(new IntPtr(0x80000002), "SOFTWARE", 0, 0x20019, out hKey) != 0)\n        {\n            throw new Exception("Failed to open registry key");\n        }\n\n        // Set up the notification\n        if (RegNotifyChangeKeyValue(hKey, true, REG_NOTIFY_CHANGE_NAME | REG_NOTIFY_CHANGE_ATTRIBUTES | REG_NOTIFY_CHANGE_LAST_SET | REG_NOTIFY_CHANGE_SECURITY, hEvent, true) != 0)\n        {\n            throw new Exception("Failed to set up registry notification");\n        }\n\n        // Wait for notifications\n        while (true)\n        {\n            if (WaitForSingleObject(hEvent, 1000) == 0)\n            {\n                Console.WriteLine("Registry change detected");\n            }\n        }\n\n        // Clean up\n        RegCloseKey(hKey);\n    }\n\n    [DllImport("kernel32.dll")]\n    private static extern int WaitForSingleObject(IntPtr hHandle, int dwMilliseconds);\n}