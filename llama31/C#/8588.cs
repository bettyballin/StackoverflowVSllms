using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text;\n\npublic class MarkovTextGenerator\n{\n    private static readonly Random _random = new Random();\n\n    public static string GenerateText(int length, string[] words)\n    {\n        var markovChain = new Dictionary<string, List<string>>();\n\n        foreach (var word in words)\n        {\n            var nextWords = new List<string>();\n\n            for (int i = 0; i < word.Length - 1; i++)\n            {\n                var currentWord = word.Substring(i, 2);\n                var nextWord = word.Substring(i + 1, 1);\n\n                if (!markovChain.TryGetValue(currentWord, out var list))\n                {\n                    list = new List<string>();\n                    markovChain[currentWord] = list;\n                }\n\n                list.Add(nextWord);\n            }\n        }\n\n        var text = new StringBuilder();\n\n        var currentWord = words[_random.Next(words.Length)];\n\n        for (int i = 0; i < length; i++)\n        {\n            text.Append(currentWord);\n\n            if (markovChain.TryGetValue(currentWord, out var list))\n            {\n                currentWord = list[_random.Next(list.Count)];\n            }\n            else\n            {\n                currentWord = words[_random.Next(words.Length)];\n            }\n        }\n\n        return text.ToString();\n    }\n\n    public static void Main()\n    {\n        var words = new[] { "Lorem", "ipsum", "dolor", "sit", "amet" };\n\n        var text = GenerateText(1000000, words);\n\n        using (var writer = new StreamWriter("output.txt"))\n        {\n            writer.Write(text);\n        }\n    }\n}