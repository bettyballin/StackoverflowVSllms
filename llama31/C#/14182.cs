using System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Linq;\n\npublic class DataRowEqualityComparer : IEqualityComparer<DataRow>\n{\n    private readonly DataTable _table;\n\n    public DataRowEqualityComparer(DataTable table)\n    {\n        _table = table;\n    }\n\n    public bool Equals(DataRow x, DataRow y)\n    {\n        if (x == null && y == null) return true;\n        if (x == null || y == null) return false;\n\n        for (int i = 0; i < _table.Columns.Count; i++)\n        {\n            if (!object.Equals(x[i], y[i]))\n                return false;\n        }\n\n        return true;\n    }\n\n    public int GetHashCode(DataRow obj)\n    {\n        unchecked\n        {\n            int hash = 17;\n            foreach (DataColumn column in _table.Columns)\n            {\n                hash = hash * 23 + (obj[column] == null ? 0 : obj[column].GetHashCode());\n            }\n            return hash;\n        }\n    }\n}\n\npublic class DuplicateFinder\n{\n    public static IEnumerable<DataRow> FindDuplicates(DataTable table)\n    {\n        var comparer = new DataRowEqualityComparer(table);\n        return table.Rows.Cast<DataRow>()\n            .GroupBy(row => row, comparer)\n            .Where(g => g.Count() > 1)\n            .SelectMany(g => g);\n    }\n}