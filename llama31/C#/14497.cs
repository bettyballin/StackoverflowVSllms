using System.IdentityModel.Tokens.Jwt;\nusing System.Security.Claims;\nusing Microsoft.AspNetCore.Authentication;\n\n// Generate token on login\n[HttpPost]\npublic IActionResult Login(LoginModel model)\n{\n    // Authenticate user\n    var user = AuthenticateUser(model.Username, model.Password);\n    if (user != null)\n    {\n        // Generate JWT token\n        var token = GenerateToken(user);\n        // Store token securely on client-side\n        Response.Cookies.Append("authToken", token, new CookieOptions\n        {\n            Secure = true,\n            HttpOnly = true,\n            Expires = DateTime.UtcNow.AddMonths(1)\n        });\n        return RedirectToAction("Index", "Home");\n    }\n    return View(model);\n}\n\n// Re-authenticate using token\n[Authorize]\npublic IActionResult Index()\n{\n    // Check if token is valid\n    var token = Request.Cookies["authToken"];\n    if (token != null)\n    {\n        var principal = ValidateToken(token);\n        if (principal != null)\n        {\n            // Create new session\n            var session = HttpContext.Session;\n            session.SetString("username", principal.Identity.Name);\n            // Populate session with necessary data\n            // ...\n            return View();\n        }\n    }\n    return RedirectToAction("Login", "Account");\n}\n\n// Generate JWT token\nprivate string GenerateToken(ClaimsIdentity identity)\n{\n    var tokenHandler = new JwtSecurityTokenHandler();\n    var tokenDescriptor = new SecurityTokenDescriptor\n    {\n        Subject = identity,\n        Expires = DateTime.UtcNow.AddMonths(1),\n        SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(Encoding.UTF8.GetBytes("your_secret_key")), SecurityAlgorithms.HmacSha256)\n    };\n    var token = tokenHandler.CreateToken(tokenDescriptor);\n    return tokenHandler.WriteToken(token);\n}\n\n// Validate JWT token\nprivate ClaimsPrincipal ValidateToken(string token)\n{\n    var tokenHandler = new JwtSecurityTokenHandler();\n    try\n    {\n        var principal = tokenHandler.ValidateToken(token, new TokenValidationParameters\n        {\n            ValidateIssuerSigningKey = true,\n            ValidateIssuer = true,\n            ValidateAudience = true,\n            ValidateLifetime = true,\n            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes("your_secret_key"))\n        }, out var validatedToken);\n        return principal;\n    }\n    catch (SecurityTokenException)\n    {\n        return null;\n    }\n}