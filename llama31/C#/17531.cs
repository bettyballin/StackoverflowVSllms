public abstract class Repository<T> : IRepository<T> where T : class\n{\n    protected Table<T> _table;\n\n    public Repository(Table<T> t)\n    {\n        _table = t;\n    }\n\n    protected abstract Expression<Func<T, bool>> GetPrimaryKeyExpression(int id);\n\n    public T Get(int id)\n    {\n        return _table.SingleOrDefault(GetPrimaryKeyExpression(id));\n    }\n\n    public void Update(T item)\n    {\n        var errors = item.GetRuleViolations();\n        if (errors.Count > 0)\n            throw new RuleException(errors);\n\n        T dbItem = Get(item.GetId());\n        Map(dbItem, item);\n\n        _table.Context.SubmitChanges();\n    }\n\n    protected abstract void Map(T dbItem, T item);\n}\n\npublic class NewsRepository : Repository<News>\n{\n    private Table<News> _newsTable;\n\n    public NewsRepository(string connectionString)\n    {\n        _newsTable = new DataContext(connectionString).GetTable<News>();\n    }\n\n    protected override Expression<Func<News, bool>> GetPrimaryKeyExpression(int id)\n    {\n        return n => n.NewsId == id;\n    }\n\n    protected override void Map(News dbItem, News item)\n    {\n        dbItem.Title = item.Title;\n        dbItem.Article = item.Article;\n    }\n}