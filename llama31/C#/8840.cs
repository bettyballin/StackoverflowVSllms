using System;\nusing System.Net.Http;\nusing System.Text;\nusing Newtonsoft.Json;\n\npublic class JsonRpcClient\n{\n    private readonly HttpClient _httpClient;\n\n    public JsonRpcClient(string endpointUrl)\n    {\n        _httpClient = new HttpClient { BaseAddress = new Uri(endpointUrl) };\n    }\n\n    public async Task<string> InvokeAsync(string methodName, params object[] parameters)\n    {\n        var request = new JsonRpcRequest\n        {\n            Method = methodName,\n            Params = parameters,\n            Id = Guid.NewGuid().ToString()\n        };\n\n        var json = JsonConvert.SerializeObject(request);\n        var content = new StringContent(json, Encoding.UTF8, "application/json");\n\n        var response = await _httpClient.PostAsync("", content);\n        response.EnsureSuccessStatusCode();\n\n        var responseBody = await response.Content.ReadAsStringAsync();\n        var result = JsonConvert.DeserializeObject<JsonRpcResponse>(responseBody);\n\n        if (result.Error != null)\n        {\n            throw new Exception(result.Error.Message);\n        }\n\n        return result.Result.ToString();\n    }\n}\n\npublic class JsonRpcRequest\n{\n    public string Method { get; set; }\n    public object[] Params { get; set; }\n    public string Id { get; set; }\n}\n\npublic class JsonRpcResponse\n{\n    public string Result { get; set; }\n    public JsonRpcError Error { get; set; }\n}\n\npublic class JsonRpcError\n{\n    public string Message { get; set; }\n}