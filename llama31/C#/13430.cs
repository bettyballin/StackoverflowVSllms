public string Encrypt(byte[] PlainTextBytes, byte[] KeyBytes, string InitialVector)\n{\n    byte[] InitialVectorBytes = Encoding.UTF8.GetBytes(InitialVector);\n    RijndaelManaged SymmetricKey = new RijndaelManaged();\n    SymmetricKey.Mode = CipherMode.CBC;\n    SymmetricKey.Padding = PaddingMode.None; // Set padding to none\n    ICryptoTransform Encryptor = SymmetricKey.CreateEncryptor(KeyBytes, InitialVectorBytes);\n    MemoryStream MemStream = new MemoryStream();\n    CryptoStream CryptoStream = new CryptoStream(MemStream, Encryptor, CryptoStreamMode.Write);\n    \n    // Add PKCS5 padding manually\n    int blockSize = 8;\n    int paddingSize = blockSize - (PlainTextBytes.Length % blockSize);\n    byte[] paddedPlainText = new byte[PlainTextBytes.Length + paddingSize];\n    Array.Copy(PlainTextBytes, 0, paddedPlainText, 0, PlainTextBytes.Length);\n    for (int i = PlainTextBytes.Length; i < paddedPlainText.Length; i++)\n    {\n        paddedPlainText[i] = (byte)paddingSize;\n    }\n    \n    CryptoStream.Write(paddedPlainText, 0, paddedPlainText.Length);\n    CryptoStream.FlushFinalBlock();\n    byte[] CipherTextBytes = MemStream.ToArray();\n    MemStream.Close();\n    CryptoStream.Close();\n    return ByteToHexConversion(CipherTextBytes);\n}