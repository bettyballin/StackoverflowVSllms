// Define Security Zones\npublic enum SecurityZone { Financials, Sales, Management }\n\n// Custom Attribute for Security Zone\n[AttributeUsage(AttributeTargets.Class)]\npublic class SecurityZoneAttribute : Attribute\n{\n    public SecurityZone Zone { get; set; }\n    public SecurityZoneAttribute(SecurityZone zone) => Zone = zone;\n}\n\n// Base Class for Pages with Security Check\npublic class BasePage : Page\n{\n    protected override void OnInit(EventArgs e)\n    {\n        base.OnInit(e);\n        // Check if page has SecurityZone attribute\n        var zoneAttribute = (SecurityZoneAttribute)Attribute.GetCustomAttribute(GetType(), typeof(SecurityZoneAttribute));\n        if (zoneAttribute != null)\n        {\n            SecurityZone requiredZone = zoneAttribute.Zone;\n            // Assuming you have a method to check user access based on zone\n            if (!HasUserAccessToZone(HttpContext.Current.User.Identity.Name, requiredZone))\n            {\n                // Handle unauthorized access, e.g., redirect to an error page or login page\n                Response.Redirect("/Unauthorized.aspx");\n            }\n        }\n    }\n\n    // Stub method to check user access. Implement actual logic based on your ACL mechanism.\n    private bool HasUserAccessToZone(string userId, SecurityZone zone)\n    {\n        // Implement actual logic here based on your ACL\n        return true; // Stub for demonstration\n    }\n}\n\n// Example usage on a page\n[SecurityZone(SecurityZone.Financials)]\npublic partial class FinancialsPage : BasePage\n{\n    // Page code here\n}