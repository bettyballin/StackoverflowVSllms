using System;\nusing System.Runtime.InteropServices;\nusing System.Windows.Forms;\n\npublic class KeyboardHook\n{\n    private const int WM_KEYDOWN = 0x100;\n    private const int WM_SYSKEYDOWN = 0x104;\n    private const int WM_INPUT = 0xFF;\n\n    [DllImport("user32.dll")]\n    private static extern IntPtr SetWindowsHookEx(int idHook, KeyboardProc callback, IntPtr hInstance, uint threadId);\n\n    [DllImport("user32.dll")]\n    private static extern bool UnhookWindowsHookEx(IntPtr hInstance);\n\n    [DllImport("user32.dll")]\n    private static extern IntPtr CallNextHookEx(IntPtr idHook, int nCode, IntPtr wParam, IntPtr lParam);\n\n    [DllImport("user32.dll")]\n    private static extern uint GetRawInputData(IntPtr hRawInput, uint uiCommand, IntPtr pData, ref uint pcbSize, uint cbSizeHeader);\n\n    private delegate IntPtr KeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);\n\n    private KeyboardProc _proc;\n    private IntPtr _hook;\n\n    public KeyboardHook()\n    {\n        _proc = HookCallback;\n        _hook = SetWindowsHookEx(13, _proc, IntPtr.Zero, 0);\n    }\n\n    ~KeyboardHook()\n    {\n        UnhookWindowsHookEx(_hook);\n    }\n\n    private IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)\n    {\n        if (nCode >= 0 && wParam == (IntPtr)WM_KEYDOWN || wParam == (IntPtr)WM_SYSKEYDOWN)\n        {\n            uint dwSize = 40;\n            uint dwSizeHeader = 24;\n            IntPtr pData = Marshal.AllocHGlobal((int)dwSize);\n            uint result = GetRawInputData(lParam, 0x10000003, pData, ref dwSize, dwSizeHeader);\n            if (result != 0xFFFFFFFF)\n            {\n                RAWINPUT* raw = (RAWINPUT*)pData;\n                // Use raw->header.hDevice to identify the device\n                Console.WriteLine("Device handle: " + raw->header.hDevice);\n            }\n            Marshal.FreeHGlobal(pData);\n        }\n        return CallNextHookEx(_hook, nCode, wParam, lParam);\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct RAWINPUT\n    {\n        public RAWINPUTHEADER header;\n        public RAWMOUSE mouse;\n        public RAWKEYBOARD keyboard;\n        public RAWHID hid;\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct RAWINPUTHEADER\n    {\n        public uint dwType;\n        public uint dwSize;\n        public IntPtr hDevice;\n        public IntPtr wParam;\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct RAWMOUSE\n    {\n        public ushort usFlags;\n        public uint ulButtons;\n        public ushort usButtonFlags;\n        public ushort usButtonData;\n        public uint ulRawButtons;\n        public int lLastX;\n        public int lLastY;\n        public uint ulExtraInformation;\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct RAWKEYBOARD\n    {\n        public ushort usFlags;\n        public ushort makeCode;\n        public ushort breakCode;\n        public ushort usVKey;\n        public ushort usMessage;\n        public uint ulExtraInformation;\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct RAWHID\n    {\n        public uint dwSize;\n        public IntPtr dwCount;\n    }\n}