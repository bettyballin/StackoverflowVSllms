using MathNet.Symbolics;\nusing System;\nusing System.Collections.Generic;\n\npublic class MathExpressionEvaluator\n{\n    private readonly Dictionary<string, Func<double[], double>> _compiledExpressions\n        = new Dictionary<string, Func<double[], double>>();\n\n    public double Evaluate(string expression, double[] variables)\n    {\n        if (!_compiledExpressions.TryGetValue(expression, out Func<double[], double> compiledFunc))\n        {\n            // Parse the expression and generate the AST\n            var expr = Infix.ParseOrThrow(expression);\n\n            // Compile the AST to machine code\n            compiledFunc = expr.Compile(variables.Length);\n\n            // Store the compiled function for future use\n            _compiledExpressions.Add(expression, compiledFunc);\n        }\n\n        // Evaluate the expression using the compiled function\n        return compiledFunc(variables);\n    }\n}