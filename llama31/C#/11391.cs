using System;\nusing System.IO;\nusing System.Net.Security;\nusing System.Net.Sockets;\nusing System.Security.Cryptography.X509Certificates;\n\npublic class CertificateChainDownloader\n{\n    public static void DownloadCertificateChain(string serverName, int port)\n    {\n        using (var tcpClient = new TcpClient())\n        {\n            tcpClient.Connect(serverName, port);\n\n            using (var sslStream = new SslStream(tcpClient.GetStream(), false, ValidateServerCertificate, null))\n            {\n                sslStream.AuthenticateAsClient(serverName);\n\n                var remoteCertificate = sslStream.RemoteCertificate;\n                var certificateChain = new X509Certificate2(remoteCertificate).GetCertificateChain();\n\n                for (int i = 0; i < certificateChain.ChainElements.Count; i++)\n                {\n                    var element = certificateChain.ChainElements[i];\n                    var certificate = element.Certificate;\n\n                    var fileName = $"{serverName}_{i}_{certificate.Subject}.cer";\n                    File.WriteAllBytes(fileName, certificate.Export(X509ContentType.Cert));\n\n                    Console.WriteLine($"Saved certificate {i} to {fileName}");\n                }\n            }\n        }\n    }\n\n    private static bool ValidateServerCertificate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)\n    {\n        return true; // Always validate, we want to retrieve the certificate chain\n    }\n}