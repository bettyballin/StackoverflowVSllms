using System;\nusing System.IO;\nusing System.Diagnostics;\n\nclass FileWatcher {\n    static void Main(string[] args) {\n        FileSystemWatcher watcher = new FileSystemWatcher("C:\\WINNT\\Temp");\n        watcher.Filter = "*.*";\n        watcher.NotifyFilter = NotifyFilters.FileName;\n        watcher.Created += new FileSystemEventHandler(OnCreated);\n        watcher.EnableRaisingEvents = true;\n\n        Console.ReadLine();\n    }\n\n    static void OnCreated(object sender, FileSystemEventArgs e) {\n        Process[] processes = Process.GetProcesses();\n        foreach (Process process in processes) {\n            if (process.Id == GetProcessId(e.FullPath)) {\n                Console.WriteLine(process.ProcessName);\n                break;\n            }\n        }\n    }\n\n    static int GetProcessId(string filePath) {\n        IntPtr handle = CreateFile(filePath, GENERIC_READ, FILE_SHARE_READ, IntPtr.Zero, OPEN_EXISTING, 0, IntPtr.Zero);\n        if (handle == IntPtr.Zero) {\n            // Handle error\n        }\n\n        int processId = 0;\n        IntPtr processHandle = IntPtr.Zero;\n        GetFileInformationByHandle(handle, FileNameInfo, ref processHandle, sizeof(IntPtr));\n        processId = GetProcessId(processHandle);\n        CloseHandle(handle);\n        return processId;\n    }\n\n    [DllImport("kernel32.dll")]\n    static extern IntPtr CreateFile(string lpFileName, uint dwDesiredAccess, uint dwShareMode, IntPtr lpSecurityAttributes, uint dwCreationDisposition, uint dwFlagsAndAttributes, IntPtr hTemplateFile);\n\n    [DllImport("kernel32.dll")]\n    static extern bool GetFileInformationByHandle(IntPtr hFile, uint dwFileInformationClass, ref IntPtr lpFileInformation, uint dwBufferSize);\n\n    [DllImport("kernel32.dll")]\n    static extern uint GetProcessId(IntPtr hProcess);\n\n    [DllImport("kernel32.dll")]\n    static extern bool CloseHandle(IntPtr hObject);\n}