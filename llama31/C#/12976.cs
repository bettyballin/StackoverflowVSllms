using System;\nusing System.Runtime.InteropServices;\n\n[StructLayout(LayoutKind.Sequential)]\npublic class BarClass\n{\n    public int X;\n    public int Y;\n    public int Z;\n\n    public BarClass(int x, int y, int z)\n    {\n        X = x;\n        Y = y;\n        Z = z;\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        byte[] foo = new byte[Marshal.SizeOf(typeof(BarClass))];\n        BarClass bar = new BarClass(1, 2, 3);\n\n        // Pin the byte array in memory\n        GCHandle handle = GCHandle.Alloc(foo, GCHandleType.Pinned);\n\n        try\n        {\n            // Get the address of the byte array\n            IntPtr ptr = handle.AddrOfPinnedObject();\n\n            // Copy the BarClass instance to the byte array\n            Marshal.StructureToPtr(bar, ptr, true);\n        }\n        finally\n        {\n            // Release the pinned handle\n            handle.Free();\n        }\n    }\n}