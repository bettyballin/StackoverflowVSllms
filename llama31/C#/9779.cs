using System;\nusing System.Collections.Concurrent;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class IpHitCount : IHttpModule\n{\n    private static readonly ConcurrentDictionary<string, int> _ipCounts = new ConcurrentDictionary<string, int>();\n    private static readonly SemaphoreSlim _semaphore = new SemaphoreSlim(1, 1);\n\n    public void Dispose() { }\n\n    public void Init(HttpApplication context)\n    {\n        context.PreRequestHandlerExecute += CheckHitCount;\n        _semaphore.Release();\n    }\n\n    private async Task CheckHitCount(object sender, EventArgs e)\n    {\n        var app = (HttpApplication)sender;\n        var ip = app.Request.UserHostAddress;\n\n        if (_ipCounts.TryGetValue(ip, out int count))\n        {\n            if (count > 4)\n            {\n                app.Response.Redirect("HitCountExceeded.htm", true);\n            }\n            else\n            {\n                _ipCounts[ip] = count + 1;\n            }\n        }\n        else\n        {\n            _ipCounts[ip] = 1;\n        }\n    }\n\n    private async Task CleanUpOldEntries()\n    {\n        while (true)\n        {\n            await Task.Delay(TimeSpan.FromMinutes(5));\n            foreach (var ip in _ipCounts.Keys)\n            {\n                if (_ipCounts[ip] == 0)\n                {\n                    _ipCounts.TryRemove(ip, out _);\n                }\n            }\n        }\n    }\n}