// Instead of a concrete implementation\npublic class PaymentProcessor {\n    public void ProcessPayment(Payment payment) {\n        // implementation details\n    }\n}\n\n// Use an interface\npublic interface IPaymentProcessor {\n    void ProcessPayment(Payment payment);\n}\n\n// Implement the interface\npublic class PayPalPaymentProcessor : IPaymentProcessor {\n    public void ProcessPayment(Payment payment) {\n        // implementation details\n    }\n}\n\n// Use dependency injection\npublic class PaymentService {\n    private readonly IPaymentProcessor _paymentProcessor;\n\n    public PaymentService(IPaymentProcessor paymentProcessor) {\n        _paymentProcessor = paymentProcessor;\n    }\n\n    public void ProcessPayment(Payment payment) {\n        _paymentProcessor.ProcessPayment(payment);\n    }\n}