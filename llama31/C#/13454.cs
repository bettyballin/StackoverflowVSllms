using System;\nusing System.Runtime.InteropServices;\n\npublic class ServiceHelper\n{\n    [DllImport("advapi32.dll", SetLastError = true)]\n    private static extern bool ChangeServiceConfig(\n        IntPtr hService,\n        uint dwServiceType,\n        uint dwStartType,\n        uint dwErrorControl,\n        string lpBinaryPathName,\n        string lpLoadOrderGroup,\n        IntPtr lpdwTagId,\n        string lpDependencies,\n        string lpServiceStartName,\n        string lpPassword,\n        string lpDisplayName,\n        uint dwStartFlags\n    );\n\n    public static bool SetCanStop(string serviceName, bool canStop)\n    {\n        IntPtr hService = GetServiceHandle(serviceName);\n        if (hService == IntPtr.Zero)\n        {\n            return false;\n        }\n\n        try\n        {\n            uint dwServiceType = 0;\n            uint dwStartType = 0;\n            uint dwErrorControl = 0;\n            string lpBinaryPathName = null;\n            string lpLoadOrderGroup = null;\n            IntPtr lpdwTagId = IntPtr.Zero;\n            string lpDependencies = null;\n            string lpServiceStartName = null;\n            string lpPassword = null;\n            string lpDisplayName = null;\n            uint dwStartFlags = 0;\n\n            // Get the current service configuration\n            GetServiceConfig(hService, ref dwServiceType, ref dwStartType, ref dwErrorControl, ref lpBinaryPathName,\n                ref lpLoadOrderGroup, ref lpdwTagId, ref lpDependencies, ref lpServiceStartName, ref lpPassword,\n                ref lpDisplayName, ref dwStartFlags);\n\n            // Modify the CanStop property\n            dwStartFlags = canStop ? 0 : 0x10; // 0x10 = SERVICE_NO_STOP\n\n            // Save the changes\n            return ChangeServiceConfig(hService, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName,\n                lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword, lpDisplayName,\n                dwStartFlags);\n        }\n        finally\n        {\n            CloseServiceHandle(hService);\n        }\n    }\n\n    private static IntPtr GetServiceHandle(string serviceName)\n    {\n        IntPtr hSCManager = OpenSCManager(null, null, 0);\n        if (hSCManager == IntPtr.Zero)\n        {\n            return IntPtr.Zero;\n        }\n\n        try\n        {\n            IntPtr hService = OpenService(hSCManager, serviceName, 0x100); // 0x100 = SERVICE_CHANGE_CONFIG\n            if (hService == IntPtr.Zero)\n            {\n                return IntPtr.Zero;\n            }\n\n            return hService;\n        }\n        finally\n        {\n            CloseServiceHandle(hSCManager);\n        }\n    }\n\n    [DllImport("advapi32.dll", SetLastError = true)]\n    private static extern IntPtr OpenSCManager(string lpMachineName, string lpDatabaseName, uint dwDesiredAccess);\n\n    [DllImport("advapi32.dll", SetLastError = true)]\n    private static extern IntPtr OpenService(IntPtr hSCManager, string lpServiceName, uint dwDesiredAccess);\n\n    [DllImport("advapi32.dll", SetLastError = true)]\n    private static extern bool CloseServiceHandle(IntPtr hSCObject);\n\n    [DllImport("advapi32.dll", SetLastError = true)]\n    private static extern bool GetServiceConfig(IntPtr hService, ref uint dwServiceType, ref uint dwStartType,\n        ref uint dwErrorControl, ref string lpBinaryPathName, ref string lpLoadOrderGroup, ref IntPtr lpdwTagId,\n        ref string lpDependencies, ref string lpServiceStartName, ref string lpPassword, ref string lpDisplayName,\n        ref uint dwStartFlags);\n}