// ITaxService interface\npublic interface ITaxService\n{\n    decimal CalculateTax(decimal amount);\n}\n\n// Concrete tax services (by region)\npublic class TaxServiceUS : ITaxService\n{\n    public decimal CalculateTax(decimal amount) => amount * 0.08m;\n}\n\npublic class TaxServiceEU : ITaxService\n{\n    public decimal CalculateTax(decimal amount) => amount * 0.20m;\n}\n\n// Customer class with a factory method to resolve the tax service\npublic class Customer\n{\n    public string Region { get; set; }\n    public ITaxService TaxService { get; set; }\n\n    public Customer(string region)\n    {\n        Region = region;\n        TaxService = WindsorContainer.Resolve<ITaxService>(region);\n    }\n}\n\n// Windsor container configuration\npublic class WindsorContainer : IWindsorContainer\n{\n    public WindsorContainer()\n    {\n        Register(Component.For<ITaxService>()\n            .ImplementedBy<TaxServiceUS>()\n            .Named("US"));\n        Register(Component.For<ITaxService>()\n            .ImplementedBy<TaxServiceEU>()\n            .Named("EU"));\n    }\n}