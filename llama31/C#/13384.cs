using System;\nusing System.Net;\n\npublic static class IPv4AddressHelper\n{\n    public static IPAddress GetBroadcastAddress(IPAddress address, IPAddress netmask)\n    {\n        byte[] addressBytes = address.GetAddressBytes();\n        byte[] netmaskBytes = netmask.GetAddressBytes();\n\n        byte[] broadcastBytes = new byte[4];\n        for (int i = 0; i < 4; i++)\n        {\n            broadcastBytes[i] = (byte)(addressBytes[i] | ~netmaskBytes[i]);\n        }\n\n        return new IPAddress(broadcastBytes);\n    }\n\n    public static IPAddress GetBroadcastAddress(IPAddress address, int netmaskBits)\n    {\n        byte[] addressBytes = address.GetAddressBytes();\n        byte[] netmaskBytes = GetNetmaskBytes(netmaskBits);\n\n        byte[] broadcastBytes = new byte[4];\n        for (int i = 0; i < 4; i++)\n        {\n            broadcastBytes[i] = (byte)(addressBytes[i] | ~netmaskBytes[i]);\n        }\n\n        return new IPAddress(broadcastBytes);\n    }\n\n    private static byte[] GetNetmaskBytes(int netmaskBits)\n    {\n        byte[] netmaskBytes = new byte[4];\n        int remainingBits = netmaskBits;\n\n        for (int i = 0; i < 4; i++)\n        {\n            if (remainingBits >= 8)\n            {\n                netmaskBytes[i] = 0xFF;\n                remainingBits -= 8;\n            }\n            else\n            {\n                netmaskBytes[i] = (byte)((0xFF << (8 - remainingBits)) & 0xFF);\n                remainingBits = 0;\n            }\n        }\n\n        return netmaskBytes;\n    }\n}