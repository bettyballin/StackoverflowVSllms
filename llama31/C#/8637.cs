// GenerateWrapperClass method\nprivate string GenerateWrapperClass(string procedureName, SqlDataReader parameterReader)\n{\n    StringBuilder wrapperClass = new StringBuilder();\n\n    wrapperClass.AppendLine("public class " + procedureName + "Wrapper");\n    wrapperClass.AppendLine("{");\n\n    // Generate the method signature\n    wrapperClass.AppendLine("    public DataTable Execute(");\n\n    // Add the method parameters\n    while (parameterReader.Read())\n    {\n        string parameterName = parameterReader["parameter_name"].ToString();\n        string dataType = parameterReader["data_type"].ToString();\n\n        wrapperClass.AppendLine("        " + dataType + " " + parameterName + ",");\n    }\n\n    // Remove the last comma\n    wrapperClass.Length -= 1;\n\n    wrapperClass.AppendLine("    )");\n    wrapperClass.AppendLine("    {");\n\n    // Generate the method body\n    wrapperClass.AppendLine("        SqlConnection connection = new SqlConnection(Your connection string);");\n    wrapperClass.AppendLine("        SqlCommand command = new SqlCommand(\"" + procedureName + "\", connection);");\n    wrapperClass.AppendLine("        command.CommandType = CommandType.StoredProcedure;");\n\n    // Add the method parameters\n    parameterReader.Reset();\n    while (parameterReader.Read())\n    {\n        string parameterName = parameterReader["parameter_name"].ToString();\n\n        wrapperClass.AppendLine("        command.Parameters.AddWithValue(\"@" + parameterName + "\", " + parameterName + ");");\n    }\n\n    wrapperClass.AppendLine("        connection.Open();");\n    wrapperClass.AppendLine("        DataTable table = new DataTable();");\n    wrapperClass.AppendLine("        table.Load(command.ExecuteReader());");\n    wrapperClass.AppendLine("        connection.Close();");\n    wrapperClass.AppendLine("        return table;");\n    wrapperClass.AppendLine("    }");\n    wrapperClass.AppendLine("}");\n\n    return wrapperClass.ToString();\n}