using Castle.DynamicProxy;\n\npublic class MyPoco\n{\n    public virtual string Name { get; set; }\n}\n\npublic class MyInterceptor : IInterceptor\n{\n    public void Intercept(IInvocation invocation)\n    {\n        // Do something before the invocation\n        invocation.Proceed();\n        // Do something after the invocation\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var generator = new ProxyGenerator();\n        var poco = new MyPoco();\n        var interceptor = new MyInterceptor();\n\n        var proxy = generator.CreateClassProxyWithTarget(poco, interceptor);\n\n        // Use the proxy as you would the original poco\n        proxy.Name = "John";\n    }\n}