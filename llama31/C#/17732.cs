// Show how to define a simple, connected domain model\npublic class Channel {\n    public virtual int Id { get; set; }\n    public virtual string Name { get; set; }\n    public virtual ICollection<Program> Programs { get; set; }\n}\n\npublic class Program {\n    public virtual int Id { get; set; }\n    public virtual string Name { get; set; }\n    public virtual Channel Channel { get; set; }\n}\n\n// Illustrate how to use Fluent NHibernate to map the domain model\npublic class ChannelMap : ClassMap<Channel> {\n    public ChannelMap() {\n        Id(x => x.Id);\n        Map(x => x.Name);\n        HasMany(x => x.Programs);\n    }\n}\n\n// Demonstrate how to use NHibernate's repository pattern implementation\npublic class ChannelRepository : IRepository<Channel> {\n    private readonly ISession _session;\n\n    public ChannelRepository(ISession session) {\n        _session = session;\n    }\n\n    public Channel GetById(int id) {\n        return _session.Get<Channel>(id);\n    }\n\n    public ICollection<Channel> GetAll() {\n        return _session.CreateCriteria<Channel>().List<Channel>();\n    }\n}