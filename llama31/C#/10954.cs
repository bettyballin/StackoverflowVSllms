using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class StringEncryptor\n{\n    private readonly byte[] _key;\n    private readonly byte[] _iv;\n\n    public StringEncryptor(string password)\n    {\n        // Derive a key from the password using PBKDF2\n        using var deriveBytes = new Rfc2898DeriveBytes(password, Salt, 10000);\n        _key = deriveBytes.GetBytes(32); // 256-bit key\n        _iv = deriveBytes.GetBytes(16); // 128-bit IV\n    }\n\n    public string Encrypt(string plaintext)\n    {\n        using var aes = Aes.Create();\n        aes.Key = _key;\n        aes.IV = _iv;\n\n        using var ms = new MemoryStream();\n        using var cs = new CryptoStream(ms, aes.CreateEncryptor(), CryptoStreamMode.Write);\n        using var sw = new StreamWriter(cs);\n        sw.Write(plaintext);\n        sw.Flush();\n        cs.FlushFinalBlock();\n\n        return Convert.ToBase64String(ms.ToArray());\n    }\n\n    public string Decrypt(string ciphertext)\n    {\n        using var aes = Aes.Create();\n        aes.Key = _key;\n        aes.IV = _iv;\n\n        using var ms = new MemoryStream(Convert.FromBase64String(ciphertext));\n        using var cs = new CryptoStream(ms, aes.CreateDecryptor(), CryptoStreamMode.Read);\n        using var sr = new StreamReader(cs);\n        return sr.ReadToEnd();\n    }\n\n    private static readonly byte[] Salt = new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 };\n}