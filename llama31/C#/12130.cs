// Define a contract for the modules\npublic interface IModule\n{\n    void Initialize();\n}\n\n// Create a module that implements the contract\npublic class MyModule : IModule\n{\n    public void Initialize()\n    {\n        // Initialize the module\n    }\n}\n\n// Create a host application that loads the modules\npublic class HostApplication\n{\n    [ImportMany(typeof(IModule))]\n    public IEnumerable<IModule> Modules { get; set; }\n\n    public HostApplication()\n    {\n        // Create a composition container\n        var container = new CompositionContainer(new ApplicationCatalog());\n\n        // Load the modules\n        container.ComposeParts(this);\n    }\n\n    public void Run()\n    {\n        // Initialize the modules\n        foreach (var module in Modules)\n        {\n            module.Initialize();\n        }\n    }\n}