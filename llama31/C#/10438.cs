using System;\nusing System.Security.Cryptography;\nusing System.Text;\nusing Microsoft.AspNetCore.Http;\n\npublic class SecureTokenGenerator\n{\n    private readonly byte[] _key;\n\n    public SecureTokenGenerator(byte[] key)\n    {\n        _key = key;\n    }\n\n    public string GenerateToken(string username, string password)\n    {\n        var credentials = $"{username}:{password}";\n        var encryptedBytes = Encrypt(credentials, _key);\n        return Convert.ToBase64String(encryptedBytes);\n    }\n\n    private byte[] Encrypt(string plainText, byte[] key)\n    {\n        using var aes = Aes.Create();\n        aes.Key = key;\n        aes.GenerateIV();\n        var iv = aes.IV;\n        using var ms = new MemoryStream();\n        using var cs = new CryptoStream(ms, aes.CreateEncryptor(), CryptoStreamMode.Write);\n        using var sw = new StreamWriter(cs);\n        sw.Write(plainText);\n        sw.Flush();\n        cs.FlushFinalBlock();\n        return ms.ToArray().Concat(iv).ToArray();\n    }\n}\n\npublic class SecureTokenCookie\n{\n    private readonly IHttpContextAccessor _httpContextAccessor;\n\n    public SecureTokenCookie(IHttpContextAccessor httpContextAccessor)\n    {\n        _httpContextAccessor = httpContextAccessor;\n    }\n\n    public void SetToken(string token)\n    {\n        var options = new CookieOptions\n        {\n            HttpOnly = true,\n            Secure = true,\n            SameSite = SameSiteMode.Strict\n        };\n        _httpContextAccessor.HttpContext.Response.Cookies.Append("SecureToken", token, options);\n    }\n\n    public string GetToken()\n    {\n        return _httpContextAccessor.HttpContext.Request.Cookies["SecureToken"];\n    }\n}