using Microsoft.FxCop.Sdk;\n\npublic class NullableIntegerNothingCheck : BaseIntrospectionRule\n{\n    public NullableIntegerNothingCheck() : base("NullableIntegerNothingCheck", "CustomRules.Neutral", typeof(NullableIntegerNothingCheck).Assembly) { }\n\n    public override ProblemCollection Check(Member member)\n    {\n        var method = member as Method;\n        if (method != null)\n        {\n            var instructions = method.Instructions;\n            for (int i = 0; i < instructions.Count; i++)\n            {\n                var instruction = instructions[i];\n                if (instruction.OpCode == OpCode.Ceq && instruction.Value != null)\n                {\n                    var operand = instruction.Value as Local;\n                    if (operand != null && operand.LocalType.IsNullable && operand.LocalType.UnderlyingType == typeof(int))\n                    {\n                        if (instruction.Next.OpCode == OpCode.Brfalse_S)\n                        {\n                            var nextInstruction = instruction.Next.Next;\n                            if (nextInstruction.OpCode == OpCode.Ldnull)\n                            {\n                                var resolution = GetResolution(member);\n                                Problems.Add(new Problem(resolution));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return Problems;\n    }\n\n    private Resolution GetResolution(Member member)\n    {\n        return new Resolution("Use 'Is Nothing' instead of '= Nothing' when checking for null.", member);\n    }\n}