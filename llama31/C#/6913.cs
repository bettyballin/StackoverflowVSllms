using System;\nusing System.ComponentModel;\nusing System.Collections.Generic;\n\npublic class CustomClass : ICustomTypeDescriptor\n{\n    private Dictionary<string, string> _items = new Dictionary<string, string>();\n\n    public string Item(string key)\n    {\n        if (_items.ContainsKey(key))\n        {\n            return _items[key];\n        }\n        else\n        {\n            return string.Empty;\n        }\n    }\n\n    public void AddItem(string key, string value)\n    {\n        _items.Add(key, value);\n    }\n\n    #region ICustomTypeDescriptor Members\n\n    public AttributeCollection GetAttributes()\n    {\n        return new AttributeCollection();\n    }\n\n    public string GetClassName()\n    {\n        return typeof(CustomClass).Name;\n    }\n\n    public string GetComponentName()\n    {\n        return string.Empty;\n    }\n\n    public TypeConverter GetConverter()\n    {\n        return new TypeConverter();\n    }\n\n    public EventDescriptor GetDefaultEvent()\n    {\n        return null;\n    }\n\n    public PropertyDescriptor GetDefaultProperty()\n    {\n        return null;\n    }\n\n    public object GetEditor(Type editorBaseType)\n    {\n        return null;\n    }\n\n    public EventDescriptorCollection GetEvents()\n    {\n        return new EventDescriptorCollection();\n    }\n\n    public EventDescriptorCollection GetEvents(Attribute[] attributes)\n    {\n        return new EventDescriptorCollection();\n    }\n\n    public PropertyDescriptorCollection GetProperties()\n    {\n        PropertyDescriptorCollection props = new PropertyDescriptorCollection();\n        foreach (string key in _items.Keys)\n        {\n            props.Add(new CustomPropertyDescriptor(key, typeof(string)));\n        }\n        return props;\n    }\n\n    public PropertyDescriptorCollection GetProperties(Attribute[] attributes)\n    {\n        return GetProperties();\n    }\n\n    public object GetPropertyOwner(PropertyDescriptor pd)\n    {\n        return this;\n    }\n\n    #endregion\n}\n\npublic class CustomPropertyDescriptor : PropertyDescriptor\n{\n    private string _name;\n\n    public CustomPropertyDescriptor(string name, Type type) : base(name, new Attribute[] { })\n    {\n        _name = name;\n    }\n\n    public override bool CanResetValue(object component)\n    {\n        return false;\n    }\n\n    public override Type ComponentType\n    {\n        get { return typeof(CustomClass); }\n    }\n\n    public override object GetValue(object component)\n    {\n        CustomClass customClass = (CustomClass)component;\n        return customClass.Item(_name);\n    }\n\n    public override bool IsReadOnly\n    {\n        get { return true; }\n    }\n\n    public override Type PropertyType\n    {\n        get { return typeof(string); }\n    }\n\n    public override void ResetValue(object component)\n    {\n        throw new NotImplementedException();\n    }\n\n    public override void SetValue(object component, object value)\n    {\n        throw new NotImplementedException();\n    }\n}