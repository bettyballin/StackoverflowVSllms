using System;\nusing System.Collections.Generic;\n\npublic class SubsetSum\n{\n    public static List<int> FindSubset(int[] transactions, int targetSum)\n    {\n        bool[,] dp = new bool[transactions.Length + 1, targetSum + 1];\n\n        // Initialize dp array\n        for (int i = 0; i <= transactions.Length; i++)\n            dp[i, 0] = true;\n\n        for (int i = 1; i <= transactions.Length; i++)\n        {\n            for (int j = 1; j <= targetSum; j++)\n            {\n                if (transactions[i - 1] > j)\n                    dp[i, j] = dp[i - 1, j];\n                else\n                    dp[i, j] = dp[i - 1, j] || dp[i - 1, j - transactions[i - 1]];\n            }\n        }\n\n        // Reconstruct the subset\n        List<int> subset = new List<int>();\n        int i = transactions.Length, j = targetSum;\n        while (i > 0 && j > 0)\n        {\n            if (dp[i, j] != dp[i - 1, j])\n            {\n                subset.Add(transactions[i - 1]);\n                j -= transactions[i - 1];\n            }\n            i--;\n        }\n\n        return subset;\n    }\n\n    public static void Main()\n    {\n        int[] transactions = { 2, 4, 5, 7 };\n        int targetSum = 13;\n\n        List<int> subset = FindSubset(transactions, targetSum);\n\n        Console.WriteLine("Result Set:");\n        foreach (int num in subset)\n            Console.WriteLine(num);\n    }\n}