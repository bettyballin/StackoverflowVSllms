using Microsoft.SqlServer.Management.Smo;\n\npublic class DatabaseRestore\n{\n    public void RestoreDatabase(string serverName, string databaseName, string backupFile)\n    {\n        Server server = new Server(serverName);\n        string defaultDataPath = server.Settings.DefaultFile;\n        string defaultLogPath = server.Settings.DefaultLog;\n\n        if (string.IsNullOrEmpty(defaultDataPath) || string.IsNullOrEmpty(defaultLogPath))\n        {\n            // Fallback to using the server's master database paths\n            Database masterDb = server.Databases["master"];\n            defaultDataPath = Path.GetDirectoryName(masterDb.PrimaryFilePath);\n            defaultLogPath = Path.GetDirectoryName(masterDb.LogFiles[0].FileName);\n        }\n\n        string dataFile = Path.Combine(defaultDataPath, $"{databaseName}.mdf");\n        string logFile = Path.Combine(defaultLogPath, $"{databaseName}_log.ldf");\n\n        Restore restore = new Restore();\n        restore.Database = databaseName;\n        restore.Action = RestoreActionType.Database;\n        restore.Devices.AddDevice(backupFile, DeviceType.File);\n\n        RelocateFile dataRelocate = new RelocateFile(databaseName, dataFile);\n        RelocateFile logRelocate = new RelocateFile($"{databaseName}_log", logFile);\n\n        restore.RelocateFiles.Add(dataRelocate);\n        restore.RelocateFiles.Add(logRelocate);\n\n        server.ConnectionContext.SqlConnectionInfo.ConnectionTimeout = 60; // Set timeout to 1 minute\n        server.ConnectionContext.Connect();\n\n        restore.SqlRestore(server);\n\n        server.ConnectionContext.Disconnect();\n    }\n}