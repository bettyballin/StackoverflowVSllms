public class ThunderdomeActionInvoker : IActionInvoker\n{\n    public bool InvokeAction(ControllerContext controllerContext, string actionName)\n    {\n        // Get the controller and action method\n        var controller = controllerContext.Controller;\n        var methodInfo = controller.GetType().GetMethod(actionName);\n\n        // Get the ViewModel from the request\n        var viewModel = GetViewModelFromRequest(controllerContext);\n\n        // Invoke the action method with the ViewModel\n        var result = methodInfo.Invoke(controller, new[] { viewModel });\n\n        // Return the result as a ViewModel\n        return new ViewModelResult((ViewModel)result);\n    }\n\n    private ViewModel GetViewModelFromRequest(ControllerContext controllerContext)\n    {\n        // This is where you would map the HttpContext to your ViewModel\n        // For example, using a library like AutoMapper\n        var mapper = new Mapper();\n        var viewModel = mapper.Map<ViewModel>(controllerContext.Request);\n        return viewModel;\n    }\n}\n\npublic class ViewModelResult : ActionResult\n{\n    private readonly ViewModel _viewModel;\n\n    public ViewModelResult(ViewModel viewModel)\n    {\n        _viewModel = viewModel;\n    }\n\n    public override void ExecuteResult(ControllerContext context)\n    {\n        // Simply return the ViewModel\n        context.HttpContext.Response.Write(_viewModel.ToString());\n    }\n}