using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class TaskManager\n{\n    private readonly SemaphoreSlim _semaphoreSlim;\n    private readonly CancellationTokenSource _cts;\n\n    public TaskManager(int maxConcurrentTasks)\n    {\n        _semaphoreSlim = new SemaphoreSlim(maxConcurrentTasks);\n        _cts = new CancellationTokenSource();\n    }\n\n    public async Task RunTaskAsync(Func<CancellationToken, Task> taskFunc)\n    {\n        if (_cts.IsCancellationRequested)\n        {\n            // Handle cancellation if needed\n        }\n\n        await _semaphoreSlim.WaitAsync(_cts.Token);\n\n        try\n        {\n            await taskFunc(_cts.Token);\n        }\n        finally\n        {\n            _semaphoreSlim.Release();\n        }\n    }\n\n    public void StopAllTasks()\n    {\n        _cts.Cancel();\n    }\n}\n\npublic class Program\n{\n    private static TaskManager _taskManager = new TaskManager(1); // Only allow one concurrent task\n\n    public static async Task Main(string[] args)\n    {\n        // Example usage\n        await _taskManager.RunTaskAsync(async (token) =>\n        {\n            // Your task implementation here\n            await Task.Delay(1000, token); // Simulate work\n        });\n    }\n}