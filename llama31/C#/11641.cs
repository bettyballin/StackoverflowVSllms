using System;\nusing System.Net;\nusing System.Net.Http;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class HttpInterceptor : DelegatingHandler\n{\n    public HttpInterceptor(HttpMessageHandler innerHandler) : base(innerHandler) { }\n\n    protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\n    {\n        // Inspect or modify the request\n        Console.WriteLine($"Request: {request.Method} {request.RequestUri}");\n\n        // Cancel the request if needed\n        if (request.RequestUri.AbsoluteUri.Contains("example.com"))\n        {\n            return new HttpResponseMessage(HttpStatusCode.Forbidden);\n        }\n\n        // Send the request to the original handler\n        return await base.SendAsync(request, cancellationToken);\n    }\n}\n\nclass Program\n{\n    static async Task Main()\n    {\n        var handler = new HttpInterceptor(new HttpClientHandler());\n        var client = new HttpClient(handler);\n\n        var response = await client.GetAsync("https://example.com");\n        Console.WriteLine($"Response: {response.StatusCode}");\n    }\n}