using System;\nusing System.Runtime.InteropServices;\nusing System.Security;\n\nclass RunAsNetOnly\n{\n    [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Unicode)]\n    static extern bool CreateProcessWithLogonW(\n        string lpUsername,\n        string lpDomain,\n        string lpPassword,\n        int dwLogonFlags,\n        string lpApplicationName,\n        string lpCommandLine,\n        int dwCreationFlags,\n        IntPtr lpEnvironment,\n        string lpCurrentDirectory,\n        ref STARTUPINFO lpStartupInfo,\n        out PROCESS_INFORMATION lpProcessInformation);\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct STARTUPINFO\n    {\n        public int cb;\n        public string lpReserved;\n        public string lpDesktop;\n        public string lpTitle;\n        public int dwX;\n        public int dwY;\n        public int dwXSize;\n        public int dwYSize;\n        public int dwXCountChars;\n        public int dwYCountChars;\n        public int dwFillAttribute;\n        public int dwFlags;\n        public short wShowWindow;\n        public short cbReserved2;\n        public IntPtr lpReserved2;\n        public IntPtr hStdInput;\n        public IntPtr hStdOutput;\n        public IntPtr hStdError;\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct PROCESS_INFORMATION\n    {\n        public IntPtr hProcess;\n        public IntPtr hThread;\n        public int dwProcessId;\n        public int dwThreadId;\n    }\n\n    const int LOGON_NETCREDENTIALS_ONLY = 2;\n\n    public static void RunAsNetOnly(string username, string domain, string password, string applicationName)\n    {\n        STARTUPINFO startupInfo = new STARTUPINFO();\n        startupInfo.cb = Marshal.SizeOf(startupInfo);\n\n        PROCESS_INFORMATION processInfo;\n\n        bool result = CreateProcessWithLogonW(\n            username,\n            domain,\n            password,\n            LOGON_NETCREDENTIALS_ONLY,\n            applicationName,\n            null,\n            0,\n            IntPtr.Zero,\n            null,\n            ref startupInfo,\n            out processInfo);\n\n        if (!result)\n        {\n            int errorCode = Marshal.GetLastWin32Error();\n            throw new Win32Exception(errorCode);\n        }\n    }\n}