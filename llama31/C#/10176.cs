public class Node\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public int? ParentId { get; set; }\n}\n\npublic static IEnumerable<Node> SortHierarchy(IEnumerable<Node> nodes)\n{\n    var lookup = nodes.ToDictionary(n => n.Id);\n    var sorted = new List<Node>();\n\n    void Traverse(int? parentId)\n    {\n        if (parentId.HasValue)\n        {\n            var parent = lookup[parentId.Value];\n            sorted.Add(parent);\n\n            foreach (var child in nodes.Where(n => n.ParentId == parent.Id))\n            {\n                Traverse(child.Id);\n            }\n        }\n        else\n        {\n            // Root nodes (with no parent)\n            foreach (var root in nodes.Where(n => !n.ParentId.HasValue))\n            {\n                sorted.Add(root);\n                Traverse(root.Id);\n            }\n        }\n    }\n\n    Traverse(null); // Start with root nodes\n    return sorted;\n}