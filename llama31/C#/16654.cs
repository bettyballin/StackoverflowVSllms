using System.Reflection;\nusing System.Data.SqlClient;\n\npublic class SqlHelper\n{\n    public static SqlCommand[] GetSqlCommands(object adaptor)\n    {\n        SqlCommand[] commands = null;\n\n        if (adaptor is System.Data.SqlClient.SqlDataAdapter)\n        {\n            SqlDataAdapter sqlDataAdapter = (SqlDataAdapter)adaptor;\n            commands = GetSqlCommandsFromSqlDataAdapter(sqlDataAdapter);\n        }\n        else if (adaptor is System.ComponentModel.Component)\n        {\n            // TableAdaptor\n            commands = GetSqlCommandsFromTableAdaptor(adaptor);\n        }\n\n        return commands;\n    }\n\n    private static SqlCommand[] GetSqlCommandsFromSqlDataAdapter(SqlDataAdapter adapter)\n    {\n        SqlCommand[] commands = new SqlCommand[4];\n\n        // Use reflection to get the private fields\n        commands[0] = (SqlCommand)adapter.GetType().GetField("_selectCommand", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(adapter);\n        commands[1] = (SqlCommand)adapter.GetType().GetField("_insertCommand", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(adapter);\n        commands[2] = (SqlCommand)adapter.GetType().GetField("_updateCommand", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(adapter);\n        commands[3] = (SqlCommand)adapter.GetType().GetField("_deleteCommand", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(adapter);\n\n        return commands;\n    }\n\n    private static SqlCommand[] GetSqlCommandsFromTableAdaptor(object adaptor)\n    {\n        SqlCommand[] commands = new SqlCommand[4];\n\n        // Use reflection to get the private fields\n        PropertyInfo[] properties = adaptor.GetType().GetProperties(BindingFlags.Instance | BindingFlags.NonPublic);\n        foreach (PropertyInfo property in properties)\n        {\n            if (property.PropertyType == typeof(SqlCommand))\n            {\n                SqlCommand command = (SqlCommand)property.GetValue(adaptor, null);\n                if (command != null)\n                {\n                    if (command.CommandText.Contains("SELECT"))\n                    {\n                        commands[0] = command;\n                    }\n                    else if (command.CommandText.Contains("INSERT"))\n                    {\n                        commands[1] = command;\n                    }\n                    else if (command.CommandText.Contains("UPDATE"))\n                    {\n                        commands[2] = command;\n                    }\n                    else if (command.CommandText.Contains("DELETE"))\n                    {\n                        commands[3] = command;\n                    }\n                }\n            }\n        }\n\n        return commands;\n    }\n}