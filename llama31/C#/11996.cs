using System;\nusing System.Reflection;\n\npublic class Test\n{\n    public void TestMessage()\n    {\n        // Set up array\n        string[] arrTest = new string[] { "Hello", "World" };\n\n        // Get extra values from all available plugins\n        string[] arrExtras = CMS.InvokeHook("HelloTest");\n\n        // Merge arrays\n        string[] arrTests = new string[arrTest.Length + arrExtras.Length];\n        arrTest.CopyTo(arrTests, 0);\n        arrExtras.CopyTo(arrTests, arrTest.Length);\n    }\n}\n\npublic class CMS\n{\n    public static string[] InvokeHook(string methodName)\n    {\n        // Get all plugins (assuming they're in the same assembly)\n        Assembly assembly = Assembly.GetExecutingAssembly();\n        Type[] pluginTypes = assembly.GetTypes();\n\n        // Initialize result array\n        string[] values = new string[0];\n\n        foreach (Type pluginType in pluginTypes)\n        {\n            // Check if the plugin has the called method\n            MethodInfo method = pluginType.GetMethod(methodName);\n            if (method != null)\n            {\n                // Create an instance of the plugin\n                object pluginInstance = Activator.CreateInstance(pluginType);\n\n                // Call the method and add the result to the array\n                string result = (string)method.Invoke(pluginInstance, null);\n                values = AddToArray(values, result);\n            }\n        }\n\n        return values;\n    }\n\n    private static string[] AddToArray(string[] original, string newValue)\n    {\n        string[] newArray = new string[original.Length + 1];\n        original.CopyTo(newArray, 0);\n        newArray[original.Length] = newValue;\n        return newArray;\n    }\n}\n\npublic class FooTest\n{\n    public string HelloTest()\n    {\n        return "Foo";\n    }\n}\n\npublic class BarTest\n{\n    public string HelloTest()\n    {\n        return "Bar";\n    }\n}