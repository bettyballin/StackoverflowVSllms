using System.Security.Cryptography;\nusing System.Text;\n\npublic class PasswordHasher\n{\n    public string HashPassword(string password)\n    {\n        // Generate a random salt\n        var salt = new byte[16];\n        using (var rng = RandomNumberGenerator.Create())\n        {\n            rng.GetBytes(salt);\n        }\n\n        // Hash the password with PBKDF2\n        using (var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 10000))\n        {\n            var hash = pbkdf2.GetBytes(20);\n            var hashBytes = new byte[36];\n            Array.Copy(salt, 0, hashBytes, 0, 16);\n            Array.Copy(hash, 0, hashBytes, 16, 20);\n            return Convert.ToBase64String(hashBytes);\n        }\n    }\n\n    public bool VerifyPassword(string password, string hashedPassword)\n    {\n        // Extract the salt from the hashed password\n        var salt = new byte[16];\n        var hashBytes = Convert.FromBase64String(hashedPassword);\n        Array.Copy(hashBytes, 0, salt, 0, 16);\n\n        // Hash the provided password with the same salt\n        using (var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 10000))\n        {\n            var hash = pbkdf2.GetBytes(20);\n            var hashedPasswordBytes = new byte[36];\n            Array.Copy(salt, 0, hashedPasswordBytes, 0, 16);\n            Array.Copy(hash, 0, hashedPasswordBytes, 16, 20);\n            return hashedPasswordBytes.SequenceEqual(hashBytes);\n        }\n    }\n}