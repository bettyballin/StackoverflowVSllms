// Common interface for plug-in modules\npublic interface IPlugin\n{\n    string Name { get; }\n    void Initialize();\n}\n\n// Plug-in loader class\npublic class PluginLoader\n{\n    private string _pluginDirectory;\n\n    public PluginLoader(string pluginDirectory)\n    {\n        _pluginDirectory = pluginDirectory;\n    }\n\n    public void LoadPlugins()\n    {\n        // Scan the directory for assemblies\n        foreach (string file in Directory.GetFiles(_pluginDirectory, "*.dll"))\n        {\n            // Load the assembly\n            Assembly assembly = Assembly.LoadFrom(file);\n\n            // Get the types that implement the IPlugin interface\n            Type[] pluginTypes = assembly.GetTypes().Where(t => t.GetInterfaces().Contains(typeof(IPlugin))).ToArray();\n\n            // Instantiate the plug-in classes\n            foreach (Type pluginType in pluginTypes)\n            {\n                IPlugin plugin = (IPlugin)Activator.CreateInstance(pluginType);\n                plugin.Initialize();\n            }\n        }\n    }\n}