// DataProviderFactory.cs\npublic static class DataProviderFactory\n{\n    public static IDataProvider CreateDataProvider(string providerType)\n    {\n        switch (providerType)\n        {\n            case "SqlServer":\n                return new SqlServerDataProvider();\n            case "Oracle":\n                return new OracleDataProvider();\n            case "Xml":\n                return new XmlDataProvider();\n            default:\n                throw new ArgumentException("Invalid provider type");\n        }\n    }\n}\n\n// IDataProvider.cs\npublic interface IDataProvider\n{\n    void SaveData(Data data);\n    Data GetData();\n}\n\n// Concrete data providers (e.g., SqlServerDataProvider.cs)\npublic class SqlServerDataProvider : IDataProvider\n{\n    private readonly string _connectionString;\n\n    public SqlServerDataProvider(string connectionString)\n    {\n        _connectionString = connectionString;\n    }\n\n    public void SaveData(Data data)\n    {\n        // Implement SQL Server-specific save logic\n    }\n\n    public Data GetData()\n    {\n        // Implement SQL Server-specific retrieve logic\n    }\n}