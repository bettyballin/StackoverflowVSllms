using System.Collections.Concurrent;\nusing System.Threading.Tasks;\n\n// ...\n\nusing (SqlDataReader reader = command.ExecuteReader())\n{\n    var queue = new ConcurrentQueue<object[]>(); // queue to hold rows\n\n    // producer task: read rows and enqueue them\n    Task producerTask = Task.Run(() =>\n    {\n        while (reader.Read())\n        {\n            object[] row = new object[reader.FieldCount];\n            reader.GetValues(row);\n            queue.Enqueue(row);\n        }\n    });\n\n    // consumer tasks: process rows in parallel\n    int numConsumers = 2; // adjust to desired number of threads\n    Task[] consumerTasks = new Task[numConsumers];\n    for (int i = 0; i < numConsumers; i++)\n    {\n        consumerTasks[i] = Task.Run(() =>\n        {\n            while (queue.TryDequeue(out object[] row))\n            {\n                // process row\n            }\n        });\n    }\n\n    // wait for all tasks to complete\n    producerTask.Wait();\n    Task.WaitAll(consumerTasks);\n}