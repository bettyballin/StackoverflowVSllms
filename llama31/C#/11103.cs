using System;\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Security.Claims;\nusing Microsoft.IdentityModel.Tokens;\n\n// Generate token in Application A\nvar token = GenerateToken(userId);\n\n// Redirect to Application B with token\nResponse.Redirect($"https://www.anotherapplicationsite.com/somesuburl?token={token}");\n\n// Generate token method\nstring GenerateToken(string userId)\n{\n    var secretKey = "your_secret_key_here";\n    var expires = DateTime.UtcNow.AddMinutes(5);\n    var token = new JwtSecurityToken(\n        claims: new[] { new Claim("userId", userId) },\n        expires: expires,\n        signingCredentials: new SigningCredentials(new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey)), SecurityAlgorithms.HmacSha256)\n    );\n    return new JwtSecurityTokenHandler().WriteToken(token);\n}\n\n// Verify token in Application B\n[HttpGet]\npublic IActionResult Somesuburl(string token)\n{\n    if (VerifyToken(token, out string userId))\n    {\n        // Token is valid, proceed with the request\n        // ...\n    }\n    else\n    {\n        // Token is invalid or expired, handle the error\n        // ...\n    }\n}\n\n// Verify token method\nbool VerifyToken(string token, out string userId)\n{\n    var secretKey = "your_secret_key_here";\n    try\n    {\n        var tokenHandler = new JwtSecurityTokenHandler();\n        var principal = tokenHandler.ValidateToken(token, new TokenValidationParameters\n        {\n            ValidateIssuer = false,\n            ValidateAudience = false,\n            ValidateLifetime = true,\n            ValidateIssuerSigningKey = true,\n            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey))\n        }, out SecurityToken validatedToken);\n        userId = principal.FindFirstValue("userId");\n        return true;\n    }\n    catch (SecurityTokenException)\n    {\n        userId = null;\n        return false;\n    }\n}