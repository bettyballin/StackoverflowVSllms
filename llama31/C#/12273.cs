using System.Web.Http;\n\npublic class BooksController : ApiController\n{\n    private readonly IBookRepository _repository;\n\n    public BooksController(IBookRepository repository)\n    {\n        _repository = repository;\n    }\n\n    // GET api/books\n    [HttpGet]\n    public IHttpActionResult GetAllBooks()\n    {\n        return Ok(_repository.GetAllBooks());\n    }\n\n    // GET api/books/1\n    [HttpGet]\n    public IHttpActionResult GetBook(int id)\n    {\n        var book = _repository.GetBook(id);\n        if (book == null)\n        {\n            return NotFound();\n        }\n        return Ok(book);\n    }\n\n    // POST api/books\n    [HttpPost]\n    public IHttpActionResult CreateBook(Book book)\n    {\n        _repository.CreateBook(book);\n        return CreatedAtRoute("DefaultApi", new { id = book.Id }, book);\n    }\n\n    // PUT api/books/1\n    [HttpPut]\n    public IHttpActionResult UpdateBook(int id, Book book)\n    {\n        var existingBook = _repository.GetBook(id);\n        if (existingBook == null)\n        {\n            return NotFound();\n        }\n        existingBook.Title = book.Title;\n        _repository.UpdateBook(existingBook);\n        return Ok(existingBook);\n    }\n\n    // DELETE api/books/1\n    [HttpDelete]\n    public IHttpActionResult DeleteBook(int id)\n    {\n        var book = _repository.GetBook(id);\n        if (book == null)\n        {\n            return NotFound();\n        }\n        _repository.DeleteBook(book);\n        return Ok();\n    }\n}