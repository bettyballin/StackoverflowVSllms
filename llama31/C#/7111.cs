// Custom membership provider for other AD\npublic class OtherADMembershipProvider : MembershipProvider\n{\n    public override bool ValidateUser(string username, string password)\n    {\n        // Query the other AD using System.DirectoryServices\n        // ...\n        return true; // or false, depending on the result\n    }\n}\n\n// Custom login page for other AD users\npublic partial class OtherADLogin : Page\n{\n    protected void LoginButton_Click(object sender, EventArgs e)\n    {\n        string username = UsernameTextBox.Text;\n        string password = PasswordTextBox.Text;\n        if (OtherADMembershipProvider.ValidateUser(username, password))\n        {\n            FormsAuthentication.SetAuthCookie(username, true);\n            Response.Redirect("~/default.aspx");\n        }\n        else\n        {\n            // Handle invalid credentials\n        }\n    }\n}\n\n// Web.config configuration\n<system.web>\n    <authentication mode="Windows"/>\n    <membership defaultProvider="OtherADMembershipProvider">\n        <providers>\n            <add name="OtherADMembershipProvider" type="YourNamespace.OtherADMembershipProvider"/>\n            <add name="SqlMembershipProvider" type="System.Web.Security.SqlMembershipProvider"/>\n        </providers>\n    </membership>\n    <roleManager enabled="true" defaultProvider="SqlRoleProvider">\n        <providers>\n            <add name="SqlRoleProvider" type="System.Web.Security.SqlRoleProvider"/>\n        </providers>\n    </roleManager>\n</system.web>