using System;\nusing System.Runtime.InteropServices;\n\npublic class CredentialManager\n{\n    [DllImport("advapi32.dll", SetLastError = true)]\n    static extern bool CredWrite([In] Credential credential, [In] int flags);\n\n    [DllImport("advapi32.dll", SetLastError = true)]\n    static extern bool CredRead([In] string targetName, [In] int type, [In] int flags, [Out] out Credential credential);\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct Credential\n    {\n        public int Flags;\n        public int Type;\n        public string TargetName;\n        public string Comment;\n        public DateTime LastWritten;\n        public int CredentialBlobSize;\n        public IntPtr CredentialBlob;\n        public int Persist;\n        public int AttributeCount;\n        public IntPtr Attributes;\n        public string TargetAlias;\n        public string UserName;\n    }\n\n    public static void StoreCredential(string targetName, string userName, string password)\n    {\n        Credential credential = new Credential\n        {\n            Type = 1, // CRED_TYPE_GENERIC\n            TargetName = targetName,\n            UserName = userName,\n            CredentialBlobSize = password.Length,\n            CredentialBlob = Marshal.StringToCoTaskMemUni(password)\n        };\n\n        if (!CredWrite(credential, 0))\n        {\n            throw new Exception("Failed to write credential");\n        }\n    }\n\n    public static string RetrieveCredential(string targetName)\n    {\n        Credential credential;\n        if (!CredRead(targetName, 1, 0, out credential))\n        {\n            throw new Exception("Failed to read credential");\n        }\n\n        string password = Marshal.PtrToStringUni(credential.CredentialBlob);\n        return password;\n    }\n}