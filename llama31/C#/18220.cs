[DllImport("TestDLL.dll", EntryPoint = "Initkey", ExactSpelling = true, CallingConvention = CallingConvention.Cdecl)]\npublic static extern void Initkey(IntPtr key);\n\n[DllImport("TestDLL.dll", EntryPoint = "encode", ExactSpelling = true, CallingConvention = CallingConvention.Cdecl)]\npublic static extern void encode(IntPtr stream);\n\n// ...\n\nUInt32[] keyarray = new UInt32[2];\n// some code\n\nIntPtr keyPtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UInt32)) * keyarray.Length);\nfor (int i = 0; i < keyarray.Length; i++)\n{\n    Marshal.WriteInt32(keyPtr, i * Marshal.SizeOf(typeof(UInt32)), (int)keyarray[i]);\n}\n\nExtern.Initkey(keyPtr);\n\n// Don't forget to free the memory!\nMarshal.FreeHGlobal(keyPtr);\n\n// ...\n\nUInt32[] keyarray2 = new UInt32[2];\n// some code\n\nIntPtr keyPtr2 = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(UInt32)) * keyarray2.Length);\nfor (int i = 0; i < keyarray2.Length; i++)\n{\n    Marshal.WriteInt32(keyPtr2, i * Marshal.SizeOf(typeof(UInt32)), (int)keyarray2[i]);\n}\n\nunsafe\n{\n    Extern.encode(keyPtr2);\n}\n\n// Don't forget to free the memory!\nMarshal.FreeHGlobal(keyPtr2);