using HtmlAgilityPack;\nusing System.Text.RegularExpressions;\n\npublic static void FindAndReplace(string productName, string search, string replace)\n{\n    // Normalize the text by removing HTML tags and converting to lowercase\n    var doc = new HtmlDocument();\n    doc.LoadHtml(productName);\n    var text = doc.DocumentNode.InnerText.ToLower();\n\n    // Use a fuzzy search algorithm (e.g., Levenshtein distance)\n    var levenshteinDistance = LevenshteinDistance(text, search.ToLower());\n    if (levenshteinDistance <= 2) // adjust the threshold as needed\n    {\n        // Perform the replace\n        text = text.Replace(search, replace);\n    }\n\n    // Convert the text back to HTML\n    doc.LoadHtml(text);\n    productName = doc.DocumentNode.OuterHtml;\n}\n\npublic static int LevenshteinDistance(string s1, string s2)\n{\n    var m = s1.Length;\n    var n = s2.Length;\n    var d = new int[m + 1, n + 1];\n\n    for (var i = 0; i <= m; i++)\n        d[i, 0] = i;\n\n    for (var j = 0; j <= n; j++)\n        d[0, j] = j;\n\n    for (var i = 1; i <= m; i++)\n    {\n        for (var j = 1; j <= n; j++)\n        {\n            var cost = (s1[i - 1] == s2[j - 1]) ? 0 : 1;\n            d[i, j] = Math.Min(Math.Min(d[i - 1, j] + 1, d[i, j - 1] + 1), d[i - 1, j - 1] + cost);\n        }\n    }\n\n    return d[m, n];\n}