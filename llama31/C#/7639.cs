using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        // Use the Task Parallel Library (TPL) to run a task in parallel\n        Task task = Task.Run(() =>\n        {\n            // Use SynchronizationContext to marshal calls to the UI thread\n            SynchronizationContext context = SynchronizationContext.Current;\n            context.Post((s) => Console.WriteLine("Task completed"), null);\n        });\n\n        // Use lock statements to protect critical sections of code\n        object lockObj = new object();\n        lock (lockObj)\n        {\n            // Critical section of code\n        }\n\n        // Use try-finally blocks to ensure that resources are released\n        try\n        {\n            // Acquire a resource\n        }\n        finally\n        {\n            // Release the resource\n        }\n    }\n}