using System;\nusing System.IO;\nusing System.Security.Cryptography;\n\nnamespace CryptographyExample\n{\n class Program\n {\n static void Main(string[] args)\n {\n string originalFile = "original.txt";\n string encryptedFile = "encrypted.enc";\n string password = "password";\n\n byte[] bytesToBeEncrypted = File.ReadAllBytes(originalFile);\n byte[] passwordBytes = Encoding.UTF8.GetBytes(password);\n\n passwordBytes = SHA256.Create().ComputeHash(passwordBytes);\n\n byte[] bytesEncrypted = AES_Encrypt(bytesToBeEncrypted, passwordBytes);\n\n File.WriteAllBytes(encryptedFile, bytesEncrypted);\n\n byte[] bytesDecrypted = AES_Decrypt(bytesEncrypted, passwordBytes);\n\n string fileContent = Encoding.UTF8.GetString(bytesDecrypted);\n\n Console.WriteLine(fileContent);\n }\n\n public static byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)\n {\n byte[] encryptedBytes = null;\n\n using (MemoryStream ms = new MemoryStream())\n {\n using (RijndaelManaged AES = new RijndaelManaged())\n {\n AES.KeySize = 256;\n AES.BlockSize = 128;\n\n Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(passwordBytes, new byte[] \n {\n 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76\n });\n\n AES.Key = key.GetBytes(AES.KeySize / 8);\n AES.IV = key.GetBytes(AES.BlockSize / 8);\n\n AES.Mode = CipherMode.CFB;\n\n using (CryptoStream cs = new CryptoStream(ms, AES.CreateEncryptor(), CryptoStreamMode.Write))\n {\n cs.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);\n encryptedBytes = ms.ToArray();\n }\n }\n }\n\n return encryptedBytes;\n }\n\n public static byte[] AES_Decrypt(byte[] bytesToBeDecrypted, byte[] passwordBytes)\n {\n byte[] decryptedBytes = null;\n\n using (MemoryStream ms = new MemoryStream())\n {\n using (RijndaelManaged AES = new RijndaelManaged())\n {\n AES.KeySize = 256;\n AES.BlockSize = 128;\n\n Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(passwordBytes, new byte[] \n {\n 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76\n });\n\n AES.Key = key.GetBytes(AES.KeySize / 8);\n AES.IV = key.GetBytes(AES.BlockSize / 8);\n\n AES.Mode = CipherMode.CFB;\n\n using (CryptoStream cs = new CryptoStream(ms, AES.CreateDecryptor(), CryptoStreamMode.Write))\n {\n cs.Write(bytesToBeDecrypted, 0, bytesToBeDecrypted.Length);\n decryptedBytes = ms.ToArray();\n }\n }\n }\n\n return decryptedBytes;\n }\n }\n}