using Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.CSharp;\nusing System;\nusing System.Linq;\n\nclass PropertyAssignmentFinder : SyntaxWalker\n{\n    private string _propertyName;\n\n    public PropertyAssignmentFinder(string propertyName)\n    {\n        _propertyName = propertyName;\n    }\n\n    public override void VisitAssignmentExpression(AssignmentExpressionSyntax node)\n    {\n        if (node.Left is IdentifierNameSyntax identifier && identifier.Identifier.Text == _propertyName)\n        {\n            Console.WriteLine($"Assignment to {_propertyName} found at {node.GetLocation()}");\n        }\n\n        base.VisitAssignmentExpression(node);\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var code = "class Foo { public int Bar { get; set; } } class Baz { void Qux() { new Foo().Bar = 42; } }";\n        var tree = CSharpSyntaxTree.ParseText(code);\n\n        var finder = new PropertyAssignmentFinder("Bar");\n        finder.Visit(tree.GetRoot());\n\n        Console.ReadLine();\n    }\n}