using Microsoft.EntityFrameworkCore;\nusing System.Data.SqlClient;\n\npublic class MyDbContext : DbContext\n{\n    public DbSet<MyEntity> MyEntities { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<MyEntity>().ToTable("MyTable");\n    }\n}\n\npublic class MyEntity\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n\npublic class MyRepository\n{\n    private readonly MyDbContext _context;\n\n    public MyRepository(MyDbContext context)\n    {\n        _context = context;\n    }\n\n    public async Task<MyEntity> GetMyEntityAsync(int id)\n    {\n        // Using LINQ to query the database\n        return await _context.MyEntities.FindAsync(id);\n    }\n\n    public async Task<MyEntity> GetMyEntityUsingStoredProcedureAsync(int id)\n    {\n        // Using a stored procedure to query the database\n        var sqlCommand = new SqlCommand("EXEC GetMyEntity @Id", _context.Database.GetDbConnection());\n        sqlCommand.Parameters.AddWithValue("@Id", id);\n\n        var result = await sqlCommand.ExecuteReaderAsync();\n        while (await result.ReadAsync())\n        {\n            return new MyEntity { Id = result.GetInt32(0), Name = result.GetString(1) };\n        }\n\n        return null;\n    }\n}