using System;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\nusing System.Threading;\n\nclass AsyncSocketServer\n{\n    private TcpListener _listener;\n\n    public AsyncSocketServer(int port)\n    {\n        _listener = new TcpListener(IPAddress.Any, port);\n    }\n\n    public void Start()\n    {\n        _listener.Start();\n        Console.WriteLine("Server started. Waiting for connections...");\n\n        while (true)\n        {\n            _listener.BeginAcceptTcpClient(AcceptClient, null);\n        }\n    }\n\n    private void AcceptClient(IAsyncResult ar)\n    {\n        TcpClient client = _listener.EndAcceptTcpClient(ar);\n        Console.WriteLine("Client connected: " + client.Client.RemoteEndPoint);\n\n        // Process client request\n        byte[] buffer = new byte[4096];\n        client.GetStream().BeginRead(buffer, 0, buffer.Length, ReadClientData, client);\n    }\n\n    private void ReadClientData(IAsyncResult ar)\n    {\n        TcpClient client = (TcpClient)ar.AsyncState;\n        byte[] buffer = new byte[4096];\n        int bytesRead = client.GetStream().EndRead(ar);\n\n        // Process client data\n        string clientData = Encoding.ASCII.GetString(buffer, 0, bytesRead);\n        Console.WriteLine("Client data: " + clientData);\n\n        // Send response back to client\n        byte[] response = Encoding.ASCII.GetBytes("Hello, client!");\n        client.GetStream().BeginWrite(response, 0, response.Length, WriteResponse, client);\n    }\n\n    private void WriteResponse(IAsyncResult ar)\n    {\n        TcpClient client = (TcpClient)ar.AsyncState;\n        client.GetStream().EndWrite(ar);\n        client.Close();\n    }\n}