// Domain object with rich behavior\npublic class Account {\n    public void mergeWith(Account otherAccount) {\n        // implementation\n    }\n}\n\n// Repository that encapsulates data access and manipulation logic\npublic class AccountRepository {\n    public void save(Account account) {\n        // implementation\n    }\n\n    public void delete(Account account) {\n        // implementation\n    }\n}\n\n// Service layer that uses domain objects and repository\npublic class AccountService {\n    private AccountRepository repository;\n\n    public void mergeAccounts(Account mainAccount, Account lesserAccount) {\n        mainAccount.mergeWith(lesserAccount);\n        repository.save(mainAccount);\n        repository.delete(lesserAccount);\n    }\n}