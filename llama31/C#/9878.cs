public class IPAddressFilterBehavior : IEndpointBehavior\n{\n    private readonly string[] _allowedIps;\n\n    public IPAddressFilterBehavior(string[] allowedIps)\n    {\n        _allowedIps = allowedIps;\n    }\n\n    public void AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters)\n    {\n    }\n\n    public void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime)\n    {\n    }\n\n    public void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher)\n    {\n        endpointDispatcher.DispatchRuntime.MessageInspectors.Add(new IPAddressFilterInspector(_allowedIps));\n    }\n\n    public void Validate(ServiceEndpoint endpoint)\n    {\n    }\n}\n\npublic class IPAddressFilterInspector : IDispatchMessageInspector\n{\n    private readonly string[] _allowedIps;\n\n    public IPAddressFilterInspector(string[] allowedIps)\n    {\n        _allowedIps = allowedIps;\n    }\n\n    public object AfterReceiveRequest(ref Message request, IClientChannel channel, InstanceContext instanceContext)\n    {\n        var remoteAddress = OperationContext.Current.IncomingMessageHeaders.To;\n        var ip = remoteAddress.Uri.Host;\n\n        if (!_allowedIps.Contains(ip))\n        {\n            throw new FaultException("Access denied: Your IP address is not allowed");\n        }\n\n        return null;\n    }\n\n    public void BeforeSendReply(ref Message reply, object correlationState)\n    {\n    }\n}