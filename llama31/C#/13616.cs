using System;\nusing System.ComponentModel.Composition;\nusing System.Dynamic;\n\npublic class DuckTypingExportFactory<T> : ExportFactory<T>\n{\n    private readonly Type _contractType;\n\n    public DuckTypingExportFactory(Type contractType)\n    {\n        _contractType = contractType;\n    }\n\n    protected override T CreateExport()\n    {\n        // Get the exported value from the container\n        var exportedValue = container.GetExportedValue<object>("sword");\n\n        // Create a proxy object that implements the contract type\n        var proxy = new ExpandoObject();\n        foreach (var property in _contractType.GetProperties())\n        {\n            ((IDictionary<string, object>)proxy).Add(property.Name, property.GetValue(exportedValue));\n        }\n\n        return (T)proxy;\n    }\n}