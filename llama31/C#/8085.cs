using System.Runtime.InteropServices;\n\n[DllImport("user32")]\nprivate static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);\n\n// ...\n\nforeach (var process in Process.GetProcesses())\n{\n    if (process.ProcessName.ToLower() == "iexplore")\n    {\n        IntPtr hWnd = process.MainWindowHandle;\n        if (hWnd == IntPtr.Zero)\n        {\n            // Try to get the first window handle of the process\n            hWnd = GetWindowHandle(process.Id);\n        }\n\n        if (hWnd != IntPtr.Zero)\n        {\n            ShowWindow(hWnd, 1); // SW_NORMAL\n        }\n    }\n}\n\n// Helper function to get the first window handle of a process\nprivate static IntPtr GetWindowHandle(int processId)\n{\n    IntPtr hWnd = IntPtr.Zero;\n    foreach (ProcessThread thread in Process.GetProcessById(processId).Threads)\n    {\n        hWnd = GetWindowHandleForThread(thread.Id);\n        if (hWnd != IntPtr.Zero)\n            break;\n    }\n    return hWnd;\n}\n\nprivate static IntPtr GetWindowHandleForThread(int threadId)\n{\n    IntPtr hWnd = IntPtr.Zero;\n    EnumWindows((wnd, param) =>\n    {\n        if (GetWindowThreadProcessId(wnd, out IntPtr processId) && processId.ToInt32() == threadId)\n        {\n            hWnd = wnd;\n            return false; // stop enumerating\n        }\n        return true; // continue enumerating\n    }, IntPtr.Zero);\n    return hWnd;\n}\n\n[DllImport("user32")]\nprivate static extern bool EnumWindows(EnumWindowsProc enumProc, IntPtr lParam);\n\nprivate delegate bool EnumWindowsProc(IntPtr hWnd, IntPtr lParam);\n\n[DllImport("user32")]\nprivate static extern bool GetWindowThreadProcessId(IntPtr hWnd, out IntPtr processId);