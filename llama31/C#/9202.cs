public interface IUnitOfWork : IDisposable\n{\n    void Commit();\n    void Rollback();\n}\n\npublic class UnitOfWork : IUnitOfWork\n{\n    private readonly IDbConnection _connection;\n    private readonly IDbTransaction _transaction;\n\n    public UnitOfWork(string connectionString)\n    {\n        _connection = new SqlConnection(connectionString);\n        _connection.Open();\n        _transaction = _connection.BeginTransaction();\n    }\n\n    public void Commit()\n    {\n        _transaction.Commit();\n    }\n\n    public void Rollback()\n    {\n        _transaction.Rollback();\n    }\n\n    public void Dispose()\n    {\n        _transaction.Dispose();\n        _connection.Dispose();\n    }\n}\n\npublic interface IRepository<T>\n{\n    void Insert(T entity);\n}\n\npublic class Repository<T> : IRepository<T>\n{\n    private readonly IUnitOfWork _unitOfWork;\n    private readonly IDbCommand _command;\n\n    public Repository(IUnitOfWork unitOfWork)\n    {\n        _unitOfWork = unitOfWork;\n        _command = unitOfWork.Connection.CreateCommand();\n    }\n\n    public void Insert(T entity)\n    {\n        // Use _command to execute the insert query\n    }\n}\n\npublic class MyService\n{\n    private readonly IUnitOfWork _unitOfWork;\n    private readonly IRepository<MyEntity> _myEntityRepository;\n    private readonly IRepository<MyOtherEntity> _myOtherEntityRepository;\n\n    public MyService(IUnitOfWork unitOfWork)\n    {\n        _unitOfWork = unitOfWork;\n        _myEntityRepository = new Repository<MyEntity>(unitOfWork);\n        _myOtherEntityRepository = new Repository<MyOtherEntity>(unitOfWork);\n    }\n\n    public void DoWork()\n    {\n        try\n        {\n            _myEntityRepository.Insert(new MyEntity());\n            _myOtherEntityRepository.Insert(new MyOtherEntity());\n            _unitOfWork.Commit();\n        }\n        catch (Exception)\n        {\n            _unitOfWork.Rollback();\n            throw;\n        }\n    }\n}