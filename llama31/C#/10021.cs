using LinFu.DynamicProxy;\nusing System;\nusing System.Collections.Generic;\n\npublic interface IMyInterface\n{\n    string Property1 { get; }\n    int Property2 { get; }\n}\n\npublic class DynamicProxyFactory\n{\n    public static T CreateProxy<T>(Dictionary<string, object> values)\n        where T : class\n    {\n        var proxy = new DynamicProxy(typeof(T));\n        proxy.Intercept(typeof(T), (target, method, args) =>\n        {\n            if (method.Name.StartsWith("get_"))\n            {\n                var propertyName = method.Name.Substring(4);\n                if (values.ContainsKey(propertyName))\n                {\n                    return values[propertyName];\n                }\n            }\n            throw new NotImplementedException();\n        });\n        return (T)proxy.CreateProxy();\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        var values = new Dictionary<string, object>\n        {\n            {"Property1", "Hello"},\n            {"Property2", 42}\n        };\n        var proxy = DynamicProxyFactory.CreateProxy<IMyInterface>(values);\n        Console.WriteLine(proxy.Property1); // prints "Hello"\n        Console.WriteLine(proxy.Property2); // prints 42\n    }\n}