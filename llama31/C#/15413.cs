using System;\nusing System.ComponentModel;\nusing System.Threading;\n\nclass Program\n{\n    private static BackgroundWorker _worker;\n\n    static void Main(string[] args)\n    {\n        _worker = new BackgroundWorker();\n        _worker.DoWork += worker_DoWork;\n        _worker.WorkerSupportsCancellation = true;\n        _worker.RunWorkerCompleted += worker_RunWorkerCompleted;\n\n        Console.CancelKeyPress += (sender, e) => \n        {\n            if (_worker.IsBusy)\n            {\n                _worker.CancelAsync();\n                e.Cancel = true; // prevent the process from terminating immediately\n            }\n        };\n\n        _worker.RunWorkerAsync();\n\n        while (_worker.IsBusy)\n        {\n            Thread.Sleep(100);\n        }\n    }\n\n    private static void worker_DoWork(object sender, DoWorkEventArgs e)\n    {\n        while (!e.Cancel)\n        {\n            // do your work here\n            if (_worker.CancellationPending)\n            {\n                e.Cancel = true;\n                break;\n            }\n        }\n    }\n\n    private static void worker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)\n    {\n        Console.WriteLine("Worker completed");\n    }\n}