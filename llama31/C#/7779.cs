using System;\nusing System.DirectoryServices;\nusing System.DirectoryServices.Protocols;\n\n// Custom DLL to enforce uniqueness\npublic class UniqueIdEnforcer : IDisposable\n{\n    private readonly DirectoryContext _context;\n\n    public UniqueIdEnforcer(DirectoryContext context)\n    {\n        _context = context;\n    }\n\n    public bool CreateObject(DirectoryEntry entry)\n    {\n        // Generate a uniqueId value\n        string uniqueId = Guid.NewGuid().ToString();\n\n        // Check if an object with the same uniqueId already exists\n        DirectorySearcher searcher = new DirectorySearcher(entry);\n        searcher.Filter = $"(uniqueId={uniqueId})";\n        SearchResult result = searcher.FindOne();\n\n        if (result != null)\n        {\n            // Object with same uniqueId already exists, reject creation\n            return false;\n        }\n\n        // Create the object\n        entry.Properties["uniqueId"].Value = uniqueId;\n        entry.CommitChanges();\n\n        return true;\n    }\n\n    public void Dispose()\n    {\n        _context.Dispose();\n    }\n}