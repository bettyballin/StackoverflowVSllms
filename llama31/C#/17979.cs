using System;\nusing System.Runtime.InteropServices;\nusing System.Security.Principal;\nusing System.Diagnostics;\n\npublic class ProcessLauncher\n{\n    [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Unicode)]\n    static extern bool CreateProcessAsUser(\n        IntPtr hToken,\n        string lpApplicationName,\n        string lpCommandLine,\n        IntPtr lpProcessAttributes,\n        IntPtr lpThreadAttributes,\n        bool bInheritHandles,\n        uint dwCreationFlags,\n        IntPtr lpEnvironment,\n        string lpCurrentDirectory,\n        ref STARTUPINFO lpStartupInfo,\n        out PROCESS_INFORMATION lpProcessInformation);\n\n    [DllImport("advapi32.dll", SetLastError = true)]\n    static extern bool OpenProcessToken(IntPtr ProcessHandle, uint DesiredAccess, out IntPtr TokenHandle);\n\n    [DllImport("kernel32.dll", SetLastError = true)]\n    static extern bool CloseHandle(IntPtr hObject);\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct STARTUPINFO\n    {\n        public int cb;\n        public string lpReserved;\n        public string lpDesktop;\n        public string lpTitle;\n        public uint dwX;\n        public uint dwY;\n        public uint dwXSize;\n        public uint dwYSize;\n        public uint dwXCountChars;\n        public uint dwYCountChars;\n        public uint dwFillAttribute;\n        public uint dwFlags;\n        public short wShowWindow;\n        public short cbReserved2;\n        public IntPtr lpReserved2;\n        public IntPtr hStdInput;\n        public IntPtr hStdOutput;\n        public IntPtr hStdError;\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct PROCESS_INFORMATION\n    {\n        public IntPtr hProcess;\n        public IntPtr hThread;\n        public uint dwProcessId;\n        public uint dwThreadId;\n    }\n\n    public static void LaunchProcess(string appName, string args, string username, string password)\n    {\n        IntPtr token = IntPtr.Zero;\n        IntPtr processHandle = IntPtr.Zero;\n\n        try\n        {\n            // Logon the user\n            bool result = LogonUser(username, null, password, 3, 0, out token);\n            if (!result)\n            {\n                throw new Win32Exception(Marshal.GetLastWin32Error());\n            }\n\n            // Create the process\n            STARTUPINFO si = new STARTUPINFO();\n            si.cb = Marshal.SizeOf(si);\n            si.dwFlags = 0x00000001; // STARTF_USESTDHANDLES\n            si.wShowWindow = 0; // SW_HIDE\n            si.hStdInput = IntPtr.Zero;\n            si.hStdOutput = IntPtr.Zero;\n            si.hStdError = IntPtr.Zero;\n\n            PROCESS_INFORMATION pi = new PROCESS_INFORMATION();\n\n            result = CreateProcessAsUser(token, appName, args, IntPtr.Zero, IntPtr.Zero, false, 0, IntPtr.Zero, null, ref si, out pi);\n            if (!result)\n            {\n                throw new Win32Exception(Marshal.GetLastWin32Error());\n            }\n\n            // Get the process handle\n            processHandle = pi.hProcess;\n\n            // Capture the output\n            using (StreamReader reader = new StreamReader(new FileStream(new SafeFileHandle(processHandle, true), FileAccess.Read)))\n            {\n                string output = reader.ReadToEnd();\n                Console.WriteLine(output);\n            }\n\n            // Wait for the process to exit\n            WaitForSingleObject(processHandle, -1);\n\n            // Get the exit code\n            uint exitCode;\n            GetExitCodeProcess(processHandle, out exitCode);\n            Console.WriteLine("Exit code: " + exitCode);\n        }\n        finally\n        {\n            if (token != IntPtr.Zero)\n            {\n                CloseHandle(token);\n            }\n            if (processHandle != IntPtr.Zero)\n            {\n                CloseHandle(processHandle);\n            }\n        }\n    }\n\n    [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Unicode)]\n    static extern bool LogonUser(string lpszUsername, string lpszDomain, string lpszPassword, int dwLogonType, int dwLogonProvider, out IntPtr phToken);\n\n    [DllImport("kernel32.dll", SetLastError = true)]\n    static extern uint WaitForSingleObject(IntPtr hHandle, int dwMilliseconds);\n\n    [DllImport("kernel32.dll", SetLastError = true)]\n    static extern bool GetExitCodeProcess(IntPtr hProcess, out uint lpExitCode);\n}