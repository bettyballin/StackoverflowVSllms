public class InterfaceExportProvider : ExportProvider\n{\n    private readonly Type _interfaceType;\n\n    public InterfaceExportProvider(Type interfaceType)\n    {\n        _interfaceType = interfaceType;\n    }\n\n    protected override IEnumerable<Export> GetExportsCore(ImportDefinition definition, AtomicComposition atomicComposition)\n    {\n        var implementingTypes = AppDomain.CurrentDomain.GetAssemblies()\n            .SelectMany(a => a.GetTypes())\n            .Where(t => _interfaceType.IsAssignableFrom(t) && !t.IsInterface);\n\n        foreach (var type in implementingTypes)\n        {\n            yield return new Export(definition.ContractName, () => Activator.CreateInstance(type));\n        }\n    }\n}