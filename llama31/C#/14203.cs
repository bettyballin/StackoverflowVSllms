using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Xml;\n\npublic class XmlEncryption\n{\n    private const string Password = "hello world";\n    private const string Salt = "my salt"; // optional, but recommended for added security\n    private const int Iterations = 1000; // optional, but recommended for added security\n\n    public static void EncryptXmlFile(string inputFile, string outputFile)\n    {\n        // Load the XML file\n        XmlDocument xmlDoc = new XmlDocument();\n        xmlDoc.Load(inputFile);\n\n        // Create a new Aes object\n        using (Aes aes = Aes.Create())\n        {\n            // Set the key and IV from the password and salt\n            aes.Key = GetKeyFromPassword(Password, Salt, Iterations);\n            aes.IV = GetIVFromPassword(Password, Salt, Iterations);\n\n            // Create an encryptor object\n            ICryptoTransform encryptor = aes.CreateEncryptor(aes.Key, aes.IV);\n\n            // Create a MemoryStream to hold the encrypted data\n            using (MemoryStream ms = new MemoryStream())\n            {\n                // Create a CryptoStream to encrypt the data\n                using (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))\n                {\n                    // Write the XML data to the CryptoStream\n                    xmlDoc.Save(cs);\n                }\n\n                // Save the encrypted data to the output file\n                byte[] encryptedData = ms.ToArray();\n                File.WriteAllBytes(outputFile, encryptedData);\n            }\n        }\n    }\n\n    public static void DecryptXmlFile(string inputFile, string outputFile)\n    {\n        // Load the encrypted data from the input file\n        byte[] encryptedData = File.ReadAllBytes(inputFile);\n\n        // Create a new Aes object\n        using (Aes aes = Aes.Create())\n        {\n            // Set the key and IV from the password and salt\n            aes.Key = GetKeyFromPassword(Password, Salt, Iterations);\n            aes.IV = GetIVFromPassword(Password, Salt, Iterations);\n\n            // Create a decryptor object\n            ICryptoTransform decryptor = aes.CreateDecryptor(aes.Key, aes.IV);\n\n            // Create a MemoryStream to hold the decrypted data\n            using (MemoryStream ms = new MemoryStream(encryptedData))\n            {\n                // Create a CryptoStream to decrypt the data\n                using (CryptoStream cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read))\n                {\n                    // Create an XmlDocument to load the decrypted data\n                    XmlDocument xmlDoc = new XmlDocument();\n                    xmlDoc.Load(cs);\n\n                    // Save the decrypted XML data to the output file\n                    xmlDoc.Save(outputFile);\n                }\n            }\n        }\n    }\n\n    private static byte[] GetKeyFromPassword(string password, string salt, int iterations)\n    {\n        // Use PBKDF2 to derive a key from the password\n        using (Rfc2898DeriveBytes deriveBytes = new Rfc2898DeriveBytes(password, Encoding.UTF8.GetBytes(salt), iterations))\n        {\n            return deriveBytes.GetBytes(32); // 32 bytes for AES-256\n        }\n    }\n\n    private static byte[] GetIVFromPassword(string password, string salt, int iterations)\n    {\n        // Use PBKDF2 to derive an IV from the password\n        using (Rfc2898DeriveBytes deriveBytes = new Rfc2898DeriveBytes(password, Encoding.UTF8.GetBytes(salt), iterations))\n        {\n            return deriveBytes.GetBytes(16); // 16 bytes for AES-128\n        }\n    }\n}