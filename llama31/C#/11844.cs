using System;\nusing System.DirectoryServices;\nusing Novell.Directory.Ldap;\n\npublic class NovellAuthenticator\n{\n    private string _novellServer;\n    private string _novellPort;\n    private string _searchBase;\n\n    public NovellAuthenticator(string novellServer, string novellPort, string searchBase)\n    {\n        _novellServer = novellServer;\n        _novellPort = novellPort;\n        _searchBase = searchBase;\n    }\n\n    public string GetUsername(string authHeader)\n    {\n        // Parse the authorization header\n        string[] authParts = authHeader.Split(' ');\n        if (authParts.Length != 2 || authParts[0] != "Basic")\n        {\n            return null;\n        }\n\n        // Decode the credentials\n        string credentials = Encoding.UTF8.GetString(Convert.FromBase64String(authParts[1]));\n        string[] credentialParts = credentials.Split(':');\n        if (credentialParts.Length != 2)\n        {\n            return null;\n        }\n\n        // Authenticate the user using Novell LDAP\n        LdapConnection conn = new LdapConnection();\n        conn.Connect(_novellServer, int.Parse(_novellPort));\n        conn.Bind(credentialParts[0], credentialParts[1]);\n\n        // Search for the user's DN\n        string userDN = null;\n        string filter = $"(&(objectClass=Person)(uid={credentialParts[0]}))";\n        LdapSearchResults results = conn.Search(_searchBase, LdapConnection.SCOPE_SUB, filter, null, false);\n        if (results.hasMore())\n        {\n            LdapEntry entry = results.next();\n            userDN = entry.getDN();\n        }\n\n        // Return the username\n        return userDN != null ? credentialParts[0] : null;\n    }\n}