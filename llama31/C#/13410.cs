// Modular CRUD components\npublic interface ICommandHandler<T> where T : class\n{\n    void Handle(T command);\n}\n\npublic class CreateCommandHandler<T> : ICommandHandler<T> where T : class\n{\n    // Implementation for creating an entity\n}\n\npublic class DeleteCommandHandler<T> : ICommandHandler<T> where T : class\n{\n    // Implementation for deleting an entity\n}\n\n// Entity-specific controllers\npublic class UserController : Controller\n{\n    private readonly ICommandHandler<User> _createHandler;\n    private readonly ICommandHandler<User> _deleteHandler;\n\n    public UserController(ICommandHandler<User> createHandler, ICommandHandler<User> deleteHandler)\n    {\n        _createHandler = createHandler;\n        _deleteHandler = deleteHandler;\n    }\n\n    [HttpPost]\n    public ActionResult Create(User user)\n    {\n        _createHandler.Handle(user);\n        // ...\n    }\n\n    [HttpDelete]\n    public ActionResult Delete(int id)\n    {\n        _deleteHandler.Handle(new User { Id = id });\n        // ...\n    }\n}