public class DynamicWrapper : IDynamicMetaObjectProvider\n{\n    private readonly object _target;\n\n    public DynamicWrapper(object target)\n    {\n        _target = target;\n    }\n\n    public DynamicMetaObject GetMetaObject(Expression parameter)\n    {\n        return new DynamicWrapperMetaObject(parameter, _target);\n    }\n\n    private class DynamicWrapperMetaObject : DynamicMetaObject\n    {\n        private readonly object _target;\n\n        public DynamicWrapperMetaObject(Expression parameter, object target)\n            : base(parameter, BindingRestrictions.Empty, null)\n        {\n            _target = target;\n        }\n\n        public override DynamicMetaObject BindInvokeMember(InvokeMemberBinder binder, DynamicMetaObject[] args)\n        {\n            try\n            {\n                // Try to invoke the member\n                return binder.Bind(_target, args);\n            }\n            catch (RuntimeBinderException)\n            {\n                // If the member doesn't exist, call MethodMissing\n                return new DynamicMetaObject(\n                    Expression.Call(\n                        Expression.Constant(new MethodMissingInterceptor()),\n                        "MethodMissing",\n                        Expression.Constant(binder.Name),\n                        Expression.NewArrayInit(args.Select(a => a.Expression))\n                    ),\n                    BindingRestrictions.Empty\n                );\n            }\n        }\n    }\n}