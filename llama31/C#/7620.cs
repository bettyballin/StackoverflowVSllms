using SuperSocket.SocketBase;\nusing SuperSocket.SocketBase.Protocol;\n\npublic class MyServer : SocketServer\n{\n    public MyServer() : base(new DefaultReceiveFilterFactory<ReceiveFilter, MySession>()) { }\n\n    public override void OnStarted()\n    {\n        Console.WriteLine("Server started!");\n    }\n\n    public override void OnClosed()\n    {\n        Console.WriteLine("Server closed!");\n    }\n}\n\npublic class ReceiveFilter : FixedHeaderReceiveFilter<BinaryRequestInfo>\n{\n    public ReceiveFilter() : base(4) { } // 4-byte header\n\n    protected override int GetBodyLengthFromHeader(byte[] header, int offset, int length)\n    {\n        return BitConverter.ToInt32(header, offset);\n    }\n}\n\npublic class MySession : SocketSession\n{\n    public override void OnConnected()\n    {\n        Console.WriteLine("Client connected!");\n    }\n\n    public override void OnClosed()\n    {\n        Console.WriteLine("Client closed!");\n    }\n\n    public override void OnMessage(BinaryRequestInfo requestInfo)\n    {\n        Console.WriteLine("Received message: {0}", requestInfo.Body);\n    }\n}