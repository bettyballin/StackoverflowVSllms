using System;\nusing System.IO;\nusing System.Runtime.InteropServices;\n\npublic class FileIcon\n{\n    [StructLayout(LayoutKind.Sequential)]\n    public struct SHFILEINFO\n    {\n        public IntPtr hIcon;\n        public int iIcon;\n        public uint dwAttributes;\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]\n        public string szDisplayName;\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 80)]\n        public string szTypeName;\n    }\n\n    [DllImport("shell32.dll")]\n    public static extern IntPtr SHGetFileInfo(string pszPath, uint dwFileAttributes, ref SHFILEINFO psfi, uint cbFileInfo, uint uFlags);\n\n    public static IntPtr GetFileIcon(string filePath)\n    {\n        SHFILEINFO info = new SHFILEINFO();\n        uint flags = 0x100 | 0x00000800; // SHGFI_ICON | SHGFI_USEFILEATTRIBUTES\n        IntPtr result = SHGetFileInfo(filePath, 0, ref info, (uint)Marshal.SizeOf(info), flags);\n        return info.hIcon;\n    }\n\n    public static void Main(string[] args)\n    {\n        string filePath = @"C:\path\to\your\file.txt";\n        IntPtr iconHandle = GetFileIcon(filePath);\n        // Use the icon handle\n    }\n}