using System;\nusing System.Web.Mvc;\nusing System.Web.SessionState;\n\npublic class CustomAuthorizeAttribute : AuthorizeAttribute\n{\n    protected override bool AuthorizeCore(HttpContextBase httpContext)\n    {\n        // Get the user object from the session\n        var user = httpContext.Session["User"] as User;\n\n        // Check if the user object exists and the IP addresses match\n        if (user == null || user.IPAddress != httpContext.Request.UserHostAddress)\n        {\n            return false;\n        }\n\n        // Check if the user has access to the specific area\n        var area = httpContext.Request.RequestContext.RouteData.DataTokens["area"];\n        if (!user.HasAccessToArea(area.ToString()))\n        {\n            return false;\n        }\n\n        return true;\n    }\n\n    protected override void HandleUnauthorizedRequest(AuthorizationContext filterContext)\n    {\n        // Redirect to the sign-in view if the user is not authorized\n        filterContext.Result = new RedirectToRouteResult(new RouteValueDictionary { { "controller", "Account" }, { "action", "Login" } });\n    }\n}