[RestRoot("/user")]\npublic interface IUserInterface\n{\n    [RestGet("/get/{id}")]\n    User Get(int id);\n}\n\npublic class UserApi : IUserInterface\n{\n    private readonly ITokenValidator _tokenValidator;\n\n    public UserApi(ITokenValidator tokenValidator)\n    {\n        _tokenValidator = tokenValidator;\n    }\n\n    public User Get(int id)\n    {\n        var token = HttpContext.Current.Request.Headers["Authorization"];\n        if (!_tokenValidator.ValidateToken(token))\n        {\n            throw new UnauthorizedAccessException();\n        }\n\n        // Return the user data\n    }\n}\n\npublic interface ITokenValidator\n{\n    bool ValidateToken(string token);\n}\n\npublic class TokenValidator : ITokenValidator\n{\n    public bool ValidateToken(string token)\n    {\n        // Verify the token using your preferred method (e.g., JWT validation)\n        // Return true if the token is valid, false otherwise\n    }\n}