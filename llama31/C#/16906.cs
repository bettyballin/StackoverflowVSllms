public static Range[] LongestContiguousSubsequence(Range[] ranges)\n{\n    if (ranges.Length == 0) return new Range[0];\n\n    int longestStart = 0, longestLength = 1;\n    int currentStart = 0, currentLength = 1;\n\n    for (int i = 1; i < ranges.Length; i++)\n    {\n        if (ranges[i].Offset == ranges[i - 1].Offset + ranges[i - 1].Length)\n        {\n            currentLength++;\n        }\n        else\n        {\n            if (currentLength > longestLength)\n            {\n                longestStart = currentStart;\n                longestLength = currentLength;\n            }\n            currentStart = i;\n            currentLength = 1;\n        }\n    }\n\n    if (currentLength > longestLength)\n    {\n        longestStart = currentStart;\n        longestLength = currentLength;\n    }\n\n    Range[] longestSubsequence = new Range[longestLength];\n    Array.Copy(ranges, longestStart, longestSubsequence, 0, longestLength);\n    return longestSubsequence;\n}