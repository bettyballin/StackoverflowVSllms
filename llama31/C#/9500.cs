using Org.BouncyCastle.Crypto;\nusing Org.BouncyCastle.Crypto.Parameters;\nusing Org.BouncyCastle.Security;\n\npublic class ECCExample\n{\n    public static void Main()\n    {\n        // Create a new instance of the ECDSA algorithm\n        ECDSA ecdsa = new ECDSA();\n\n        // Generate a new key pair\n        KeyPair keyPair = GenerateKeyPair(ecdsa, "P-384");\n\n        // Sign some data\n        byte[] data = Encoding.UTF8.GetBytes("Hello, World!");\n        byte[] signature = SignData(ecdsa, keyPair.Private, data);\n\n        // Verify the signature\n        bool isValid = VerifyData(ecdsa, keyPair.Public, data, signature);\n        Console.WriteLine($"Signature is valid: {isValid}");\n    }\n\n    private static KeyPair GenerateKeyPair(ECDSA ecdsa, string curveName)\n    {\n        // Create a new instance of the ECDSA key pair generator\n        ECKeyPairGenerator generator = new ECKeyPairGenerator(ecdsa);\n\n        // Initialize the generator with the curve\n        generator.Init(new ECKeyGenerationParameters(new X9ECParameters(curveName), new SecureRandom()));\n\n        // Generate the key pair\n        return generator.GenerateKeyPair();\n    }\n\n    private static byte[] SignData(ECDSA ecdsa, ECPrivateKey privateKey, byte[] data)\n    {\n        // Create a new instance of the ECDSA signer\n        ECDSASigner signer = new ECDSASigner(ecdsa);\n\n        // Initialize the signer with the private key\n        signer.Init(true, privateKey);\n\n        // Sign the data\n        return signer.GenerateSignature(data);\n    }\n\n    private static bool VerifyData(ECDSA ecdsa, ECPublicKey publicKey, byte[] data, byte[] signature)\n    {\n        // Create a new instance of the ECDSA verifier\n        ECDSASigner verifier = new ECDSASigner(ecdsa);\n\n        // Initialize the verifier with the public key\n        verifier.Init(false, publicKey);\n\n        // Verify the signature\n        return verifier.VerifySignature(data, signature);\n    }\n}