public static class IListExtensions\n{\n    public static int BinarySearch<T>(this IList<T> list, T value)\n    {\n        int left = 0;\n        int right = list.Count - 1;\n        \n        while (left <= right)\n        {\n            int mid = left + (right - left) / 2;\n            \n            int compareResult = Comparer<T>.Default.Compare(list[mid], value);\n            \n            if (compareResult == 0)\n                return mid;\n            else if (compareResult < 0)\n                left = mid + 1;\n            else\n                right = mid - 1;\n        }\n        \n        return -1;  // Value not found\n    }\n}