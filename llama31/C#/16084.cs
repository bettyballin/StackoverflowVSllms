using System;\nusing System.Runtime.InteropServices;\nusing Cudafy;\n\nnamespace AesGpu\n{\n    [StructLayout(LayoutKind.Sequential)]\n    public struct AesBlock\n    {\n        public byte[] data;\n    }\n\n    public class AesGpu\n    {\n        private readonly CudafyModule _module;\n        private readonly CudafyDevice _device;\n\n        public AesGpu()\n        {\n            _module = CudafyModule.TryDeserialize(typeof(AesGpu).Assembly, "AesGpu.cdfy");\n            _device = CudafyDevice.GetDevice();\n        }\n\n        public void Encrypt(byte[] data, byte[] key)\n        {\n            var blockSize = 16;\n            var numBlocks = data.Length / blockSize;\n\n            var dData = _device.AllocateMemory(data.Length);\n            var dKey = _device.AllocateMemory(key.Length);\n\n            _device.CopyToDevice(data, dData);\n            _device.CopyToDevice(key, dKey);\n\n            var kernel = _module.GetKernel("AesEncrypt");\n            kernel.GridDimensions = new dim3(numBlocks, 1, 1);\n            kernel.BlockDimensions = new dim3(256, 1, 1);\n\n            kernel.Run(dData, dKey);\n\n            _device.CopyFromDevice(dData, data);\n\n            _device.FreeMemory(dData);\n            _device.FreeMemory(dKey);\n        }\n    }\n}