[ComVisible(true)]\n[ClassInterface(ClassInterfaceType.None)]\npublic class AddInUtilities : IConnectionPointContainer\n{\n    // Event field. This is what a COM client will hook up\n    // their sink to.\n    public event SomeEventHandler SomeEvent;\n\n    private IConnectionPoint _connectionPoint;\n\n    public AddInUtilities()\n    {\n        _connectionPoint = new ConnectionPoint(this);\n    }\n\n    #region IConnectionPointContainer Members\n\n    public IEnumConnectionPoints EnumConnectionPoints()\n    {\n        return new EnumConnectionPoints(_connectionPoint);\n    }\n\n    public IConnectionPoint FindConnectionPoint(ref Guid riid)\n    {\n        if (riid == typeof(IAddInEvents).GUID)\n        {\n            return _connectionPoint;\n        }\n        return null;\n    }\n\n    #endregion\n\n    private class ConnectionPoint : IConnectionPoint\n    {\n        private AddInUtilities _parent;\n        private List<IAddInEvents> _sinks;\n\n        public ConnectionPoint(AddInUtilities parent)\n        {\n            _parent = parent;\n            _sinks = new List<IAddInEvents>();\n        }\n\n        #region IConnectionPoint Members\n\n        public void Advise(object pUnkSink, out int pdwCookie)\n        {\n            IAddInEvents sink = pUnkSink as IAddInEvents;\n            if (sink != null)\n            {\n                _sinks.Add(sink);\n                pdwCookie = _sinks.Count - 1;\n            }\n            else\n            {\n                pdwCookie = -1;\n            }\n        }\n\n        public void Unadvise(int dwCookie)\n        {\n            if (dwCookie >= 0 && dwCookie < _sinks.Count)\n            {\n                _sinks.RemoveAt(dwCookie);\n            }\n        }\n\n        public void EnumConnections(out IEnumConnections ppEnum)\n        {\n            ppEnum = new EnumConnections(_sinks);\n        }\n\n        public void GetConnectionInterface(out Guid pIID)\n        {\n            pIID = typeof(IAddInEvents).GUID;\n        }\n\n        public void GetConnectionPointContainer(out IConnectionPointContainer ppCPC)\n        {\n            ppCPC = _parent;\n        }\n\n        #endregion\n    }\n\n    private class EnumConnectionPoints : IEnumConnectionPoints\n    {\n        private IConnectionPoint _connectionPoint;\n\n        public EnumConnectionPoints(IConnectionPoint connectionPoint)\n        {\n            _connectionPoint = connectionPoint;\n        }\n\n        #region IEnumConnectionPoints Members\n\n        public int Next(int celt, IConnectionPoint[] rgelt, out int pceltFetched)\n        {\n            if (celt > 0)\n            {\n                rgelt[0] = _connectionPoint;\n                pceltFetched = 1;\n                return 0;\n            }\n            pceltFetched = 0;\n            return 1;\n        }\n\n        public int Skip(int celt)\n        {\n            return 1;\n        }\n\n        public int Reset()\n        {\n            return 0;\n        }\n\n        public IEnumConnectionPoints Clone()\n        {\n            return this;\n        }\n\n        #endregion\n    }\n\n    private class EnumConnections : IEnumConnections\n    {\n        private List<IAddInEvents> _sinks;\n\n        public EnumConnections(List<IAddInEvents> sinks)\n        {\n            _sinks = sinks;\n        }\n\n        #region IEnumConnections Members\n\n        public int Next(int celt, IAddInEvents[] rgelt, out int pceltFetched)\n        {\n            if (celt > 0)\n            {\n                rgelt[0] = _sinks[0];\n                pceltFetched = 1;\n                return 0;\n            }\n            pceltFetched = 0;\n            return 1;\n        }\n\n        public int Skip(int celt)\n        {\n            return 1;\n        }\n\n        public int Reset()\n        {\n            return 0;\n        }\n\n        public IEnumConnections Clone()\n        {\n            return this;\n        }\n\n        #endregion\n    }\n}