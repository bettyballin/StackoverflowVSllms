using System;\nusing System.Security.Cryptography;\nusing System.Xml;\n\npublic class RSAKeyGenerator\n{\n    public static void GenerateAndStoreKeys(string publicKeyPath, string privateKeyPath)\n    {\n        // Generate RSA keys\n        using (var rsa = RSA.Create())\n        {\n            // Export public key\n            var publicKey = rsa.ExportParameters(false);\n            var publicKeyXml = GetXmlPublicKey(publicKey);\n            File.WriteAllText(publicKeyPath, publicKeyXml);\n\n            // Export private key\n            var privateKey = rsa.ExportParameters(true);\n            var privateKeyXml = GetXmlPrivateKey(privateKey);\n            File.WriteAllText(privateKeyPath, privateKeyXml);\n        }\n    }\n\n    private static string GetXmlPublicKey(RSAParameters publicKey)\n    {\n        var xmlDoc = new XmlDocument();\n        var rsaKey = xmlDoc.CreateElement("RSAKey");\n        xmlDoc.AppendChild(rsaKey);\n\n        var modulus = xmlDoc.CreateElement("Modulus");\n        modulus.InnerText = Convert.ToBase64String(publicKey.Modulus);\n        rsaKey.AppendChild(modulus);\n\n        var exponent = xmlDoc.CreateElement("Exponent");\n        exponent.InnerText = Convert.ToBase64String(publicKey.Exponent);\n        rsaKey.AppendChild(exponent);\n\n        return xmlDoc.OuterXml;\n    }\n\n    private static string GetXmlPrivateKey(RSAParameters privateKey)\n    {\n        var xmlDoc = new XmlDocument();\n        var rsaKey = xmlDoc.CreateElement("RSAKey");\n        xmlDoc.AppendChild(rsaKey);\n\n        var modulus = xmlDoc.CreateElement("Modulus");\n        modulus.InnerText = Convert.ToBase64String(privateKey.Modulus);\n        rsaKey.AppendChild(modulus);\n\n        var exponent = xmlDoc.CreateElement("Exponent");\n        exponent.InnerText = Convert.ToBase64String(privateKey.Exponent);\n        rsaKey.AppendChild(exponent);\n\n        var d = xmlDoc.CreateElement("D");\n        d.InnerText = Convert.ToBase64String(privateKey.D);\n        rsaKey.AppendChild(d);\n\n        var p = xmlDoc.CreateElement("P");\n        p.InnerText = Convert.ToBase64String(privateKey.P);\n        rsaKey.AppendChild(p);\n\n        var q = xmlDoc.CreateElement("Q");\n        q.InnerText = Convert.ToBase64String(privateKey.Q);\n        rsaKey.AppendChild(q);\n\n        var dp = xmlDoc.CreateElement("DP");\n        dp.InnerText = Convert.ToBase64String(privateKey.DP);\n        rsaKey.AppendChild(dp);\n\n        var dq = xmlDoc.CreateElement("DQ");\n        dq.InnerText = Convert.ToBase64String(privateKey.DQ);\n        rsaKey.AppendChild(dq);\n\n        var inverseQ = xmlDoc.CreateElement("InverseQ");\n        inverseQ.InnerText = Convert.ToBase64String(privateKey.InverseQ);\n        rsaKey.AppendChild(inverseQ);\n\n        return xmlDoc.OuterXml;\n    }\n}