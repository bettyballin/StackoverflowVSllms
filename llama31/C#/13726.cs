using System;\nusing System.Text;\nusing System.IO;\nusing System.Security.Cryptography;\n\npublic class ViewStateDecoder\n{\n    public static string DecodeViewState(string viewState)\n    {\n        byte[] viewStateBytes = Convert.FromBase64String(viewState);\n        string decodedViewState = Encoding.UTF8.GetString(viewStateBytes);\n\n        // If ViewState is encrypted, you'll need to decrypt it first\n        if (IsEncrypted(viewStateBytes))\n        {\n            byte[] decryptedBytes = DecryptViewState(viewStateBytes);\n            decodedViewState = Encoding.UTF8.GetString(decryptedBytes);\n        }\n\n        return decodedViewState;\n    }\n\n    private static bool IsEncrypted(byte[] viewStateBytes)\n    {\n        // Check if the ViewState is encrypted by checking the first byte\n        return viewStateBytes[0] == 0xFF;\n    }\n\n    private static byte[] DecryptViewState(byte[] viewStateBytes)\n    {\n        // You'll need to obtain the encryption key from the ASP.NET application's configuration\n        string encryptionKey = "your_encryption_key_here";\n\n        using (var des = new DESCryptoServiceProvider())\n        {\n            des.Key = Encoding.UTF8.GetBytes(encryptionKey);\n            des.IV = new byte[8];\n\n            using (var ms = new MemoryStream(viewStateBytes))\n            {\n                using (var cs = new CryptoStream(ms, des.CreateDecryptor(), CryptoStreamMode.Read))\n                {\n                    byte[] decryptedBytes = new byte[viewStateBytes.Length];\n                    cs.Read(decryptedBytes, 0, decryptedBytes.Length);\n                    return decryptedBytes;\n                }\n            }\n        }\n    }\n}