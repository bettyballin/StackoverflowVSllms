using System;\nusing System.Runtime.InteropServices;\nusing System.Diagnostics;\n\nclass Monitor\n{\n    [DllImport("kernel32.dll")]\n    private static extern IntPtr GetProcAddress(IntPtr hModule, string procName);\n\n    [DllImport("kernel32.dll")]\n    private static extern IntPtr LoadLibrary(string lpFileName);\n\n    [DllImport("kernel32.dll")]\n    private static extern bool FreeLibrary(IntPtr hModule);\n\n    public static void Main()\n    {\n        // Load the .NET runtime\n        IntPtr runtimeHandle = LoadLibrary("mscoree.dll");\n\n        // Get the function pointer for the profiling API\n        IntPtr profilingApiHandle = GetProcAddress(runtimeHandle, "CLRCreateInstance");\n\n        // Create a new profiler\n        ICorProfilerCallback profiler = new MyProfiler();\n\n        // Initialize the profiler\n        profiler.Initialize();\n\n        // Start monitoring\n        Console.WriteLine("Monitoring started. Press any key to stop.");\n        Console.ReadKey();\n\n        // Stop monitoring\n        profiler.Shutdown();\n    }\n}\n\nclass MyProfiler : ICorProfilerCallback\n{\n    public void Initialize()\n    {\n        // Set up the profiling API\n        ICorProfilerInfo profilerInfo = (ICorProfilerInfo)RuntimeEnvironment.GetRuntime().GetInterface(typeof(ICorProfilerInfo).GUID);\n        profilerInfo.SetEventMask(CorPrfMonitor.COR_PRF_MONITOR_ENTERLEAVE);\n    }\n\n    public void Shutdown()\n    {\n        // Clean up\n    }\n\n    public void FunctionEnter(FunctionID functionId)\n    {\n        // Get the method name\n        string methodName = GetMethodName(functionId);\n\n        // Log the method call\n        Console.WriteLine($"Method {methodName} was called.");\n    }\n\n    private string GetMethodName(FunctionID functionId)\n    {\n        // Use the ICorProfilerInfo interface to get the method name\n        ICorProfilerInfo profilerInfo = (ICorProfilerInfo)RuntimeEnvironment.GetRuntime().GetInterface(typeof(ICorProfilerInfo).GUID);\n        return profilerInfo.GetFunctionInfo(functionId, IntPtr.Zero, out string methodName, IntPtr.Zero, IntPtr.Zero);\n    }\n}