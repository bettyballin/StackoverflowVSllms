public class QueryableCollection<T> : IQueryable<T>\n{\n    private readonly List<T> _collection = new List<T>();\n\n    public void Add(T item)\n    {\n        _collection.Add(item);\n    }\n\n    public IEnumerator<T> GetEnumerator()\n    {\n        return _collection.GetEnumerator();\n    }\n\n    IEnumerator IEnumerable.GetEnumerator()\n    {\n        return GetEnumerator();\n    }\n\n    public Type ElementType\n    {\n        get { return typeof(T); }\n    }\n\n    public Expression Expression\n    {\n        get { return Expression.Constant(this); }\n    }\n\n    public IQueryProvider Provider\n    {\n        get { return new QueryProvider<T>(_collection); }\n    }\n}\n\npublic class QueryProvider<T> : IQueryProvider\n{\n    private readonly List<T> _collection;\n\n    public QueryProvider(List<T> collection)\n    {\n        _collection = collection;\n    }\n\n    public IQueryable<TElement> CreateQuery<TElement>(Expression expression)\n    {\n        return new QueryableCollection<TElement>();\n    }\n\n    public TResult Execute<TResult>(Expression expression)\n    {\n        // implement query execution logic here\n        return default(TResult);\n    }\n}