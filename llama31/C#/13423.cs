using Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\nusing Microsoft.CodeAnalysis.Diagnostics;\n\n[DiagnosticAnalyzer(LanguageNames.CSharp)]\npublic class MyAnalyzer : DiagnosticAnalyzer\n{\n    private static readonly DiagnosticDescriptor Rule = new DiagnosticDescriptor(\n        id: "MY001",\n        title: "My custom warning",\n        messageFormat: "{0}",\n        category: "MyCategory",\n        defaultSeverity: DiagnosticSeverity.Warning,\n        isEnabledByDefault: true);\n\n    public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics { get { return ImmutableArray.Create(Rule); } }\n\n    public override void Initialize(AnalysisContext context)\n    {\n        context.RegisterSyntaxNodeAction(AnalyzeMethod, SyntaxKind.MethodDeclaration);\n    }\n\n    private void AnalyzeMethod(SyntaxNodeAnalysisContext context)\n    {\n        var method = context.Node as MethodDeclarationSyntax;\n        if (method == null) return;\n\n        var attribute = method.AttributeLists\n            .SelectMany(al => al.Attributes)\n            .FirstOrDefault(a => a.Name.ToString() == "MyAttribute");\n\n        if (attribute != null)\n        {\n            var message = attribute.ArgumentList?.Arguments.FirstOrDefault()?.Expression?.ToString();\n            if (!string.IsNullOrEmpty(message))\n            {\n                context.ReportDiagnostic(Diagnostic.Create(Rule, method.GetLocation(), message));\n            }\n        }\n    }\n}