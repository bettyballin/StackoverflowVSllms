using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class FIPSAES\n{\n    private static readonly byte[] salt = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };\n\n    public static string Encrypt(string plainText, string password)\n    {\n        // create a new AES object\n        // with the specified key and IV.\n        using (Aes aes = Aes.Create())\n        {\n            aes.Key = GetKey(password, salt);\n            aes.IV = GetIV(password, salt);\n\n            // Create a decryptor to perform the stream transform.\n            ICryptoTransform encryptor = aes.CreateEncryptor(aes.Key, aes.IV);\n\n            // Create the streams used for encryption.\n            using (MemoryStream msEncrypt = new MemoryStream())\n            {\n                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                {\n                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))\n                    {\n                        //Write all data to the stream.\n                        swEncrypt.Write(plainText);\n                    }\n                    return Convert.ToBase64String(msEncrypt.ToArray());\n                }\n            }\n        }\n\n    }\n\n    public static string Decrypt(string encryptedText, string password)\n    {\n        // create a new AES object\n        // with the specified key and IV.\n        using (Aes aes = Aes.Create())\n        {\n            aes.Key = GetKey(password, salt);\n            aes.IV = GetIV(password, salt);\n\n            // Create a decryptor to perform the stream transform.\n            ICryptoTransform decryptor = aes.CreateDecryptor(aes.Key, aes.IV);\n\n            // Create the streams used for decryption.\n            using (MemoryStream msDecrypt = new MemoryStream(Convert.FromBase64String(encryptedText)))\n            {\n                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n                {\n                    using (StreamReader srDecrypt = new StreamReader(csDecrypt))\n                    {\n                        // Read the decrypted bytes from the decrypting stream\n                        // and place them in a string.\n                        return srDecrypt.ReadToEnd();\n                    }\n                }\n            }\n        }\n    }\n\n    static byte[] GetKey(string password, byte[] salt)\n    {\n        // Derive a key based on the password\n        using (Rfc2898DeriveBytes deriveBytes = new Rfc2898DeriveBytes(password, salt, 1000))\n        {\n            return deriveBytes.GetBytes(32);\n        }\n    }\n\n    static byte[] GetIV(string password, byte[] salt)\n    {\n        // Derive a key based on the password\n        using (Rfc2898DeriveBytes deriveBytes = new Rfc2898DeriveBytes(password, salt, 1000))\n        {\n            return deriveBytes.GetBytes(16);\n        }\n    }\n}