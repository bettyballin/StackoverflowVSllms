using System;\nusing System.Security;\nusing System.Security.Permissions;\n\n[UIPermission(SecurityAction.InheritanceDemand, Window = UIPermissionWindow.AllWindows)]\npublic class PrintData\n{\n    protected string Data = "secret value";\n\n    public virtual void PrintString()\n    {\n        Console.WriteLine(Data);\n    }\n}\n\n// Custom permission set with no UIPermission\nprivate static PermissionSet CreateCustomPermissionSet()\n{\n    var permissionSet = new PermissionSet(PermissionState.None);\n    // Add other necessary permissions if needed\n    return permissionSet;\n}\n\npublic class CustomPrintData : PrintData\n{\n    public override void PrintString()\n    {\n        base.PrintString();\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        try\n        {\n            var customPermissionSet = CreateCustomPermissionSet();\n            var assert = new PermissionSet(PermissionState.Unrestricted);\n            assert.AddPermission(new UIPermission(UIPermissionWindow.AllWindows));\n            assert.Assert();\n\n            // Try invoking the PrintString method on CustomPrintData instance\n            var customPrintData = new CustomPrintData();\n            customPrintData.PrintString();\n        }\n        catch (SecurityException ex)\n        {\n            Console.WriteLine("Security exception caught: " + ex.Message);\n        }\n        finally\n        {\n            CodeAccessPermission.RevertAssert();\n        }\n\n        try\n        {\n            var customPermissionSet = CreateCustomPermissionSet();\n            customPermissionSet.Assert();\n\n            // Try creating CustomPrintData instance\n            var customPrintData = new CustomPrintData();\n        }\n        catch (SecurityException ex)\n        {\n            Console.WriteLine("Security exception caught: " + ex.Message);\n        }\n        finally\n        {\n            CodeAccessPermission.RevertAssert();\n        }\n    }\n}