public class Memoizer<T>\n{\n    private readonly Dictionary<object[], T> cache = new Dictionary<object[], T>();\n\n    public T Memoize(Func<object[], T> func, params object[] args)\n    {\n        if (cache.TryGetValue(args, out T result))\n        {\n            return result;\n        }\n\n        result = func(args);\n        cache[args] = result;\n        return result;\n    }\n}\n\npublic class MyClass\n{\n    private readonly Memoizer<string> memoizer = new Memoizer<string>();\n\n    public string ComputeStuff(int arg1, int arg2)\n    {\n        return memoizer.Memoize(args =>\n        {\n            // Do lots of CPU-intensive computation here\n            return $"Result for {arg1} and {arg2}";\n        }, arg1, arg2);\n    }\n}