using System;\nusing System.Collections.Generic;\nusing QuickGraph;\n\npublic class FlightGraph\n{\n    private readonly AdjacencyGraph<string, Edge<string>> _graph;\n\n    public FlightGraph(List<Flight> flights)\n    {\n        _graph = new AdjacencyGraph<string, Edge<string>>();\n\n        foreach (var flight in flights)\n        {\n            var edge = new Edge<string>(flight.DepartureCity, flight.ArrivalCity);\n            edge.Weight = CalculateWeight(flight);\n            _graph.AddEdge(edge);\n        }\n    }\n\n    public List<string> FindBestRoute(string departureCity, string arrivalCity)\n    {\n        var shortestPath = _graph.ShortestPath(departureCity, arrivalCity);\n        return shortestPath.ToList();\n    }\n\n    private double CalculateWeight(Flight flight)\n    {\n        // Calculate weight based on layover time and number of stopovers\n        // ...\n    }\n}\n\npublic class Flight\n{\n    public string DepartureCity { get; set; }\n    public string ArrivalCity { get; set; }\n    public DateTime DepartureTime { get; set; }\n    public DateTime ArrivalTime { get; set; }\n}