using System;\nusing System.Runtime.InteropServices;\n\npublic class WirelessNetwork\n{\n    [DllImport("wlanapi.dll")]\n    private static extern int WlanOpenHandle(\n        [MarshalAs(UnmanagedType.U4)] int dwClientVersion,\n        IntPtr pReserved,\n        out IntPtr phClientHandle,\n        [MarshalAs(UnmanagedType.LPWStr)] StringBuilder pstrError);\n\n    [DllImport("wlanapi.dll")]\n    private static extern int WlanEnumInterfaces(\n        IntPtr hClientHandle,\n        IntPtr pReserved,\n        out IntPtr ppInterfaceList);\n\n    [DllImport("wlanapi.dll")]\n    private static extern int WlanFreeMemory(IntPtr pMemory);\n\n    [DllImport("wlanapi.dll")]\n    private static extern int WlanSetInterface(\n        IntPtr hClientHandle,\n        IntPtr pInterfaceGuid,\n        ref WlanInterfaceState wlanInterfaceState,\n        IntPtr pReserved);\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct WlanInterfaceInfo\n    {\n        public Guid InterfaceGuid;\n        [MarshalAs(UnmanagedType.LPWStr)]\n        public string strInterfaceDescription;\n        public WlanInterfaceState isState;\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct WlanInterfaceState\n    {\n        public int wlanInterfaceState;\n    }\n\n    public static void Main()\n    {\n        IntPtr clientHandle = IntPtr.Zero;\n        IntPtr interfaceListPtr = IntPtr.Zero;\n\n        try\n        {\n            WlanOpenHandle(2, IntPtr.Zero, out clientHandle, null);\n\n            WlanEnumInterfaces(clientHandle, IntPtr.Zero, out interfaceListPtr);\n\n            WlanInterfaceInfoListHeader header = (WlanInterfaceInfoListHeader)Marshal.PtrToStructure(interfaceListPtr, typeof(WlanInterfaceInfoListHeader));\n\n            WlanInterfaceInfo[] wlanInterfaceInfos = new WlanInterfaceInfo[header.dwNumberOfItems];\n            for (int i = 0; i < header.dwNumberOfItems; i++)\n            {\n                wlanInterfaceInfos[i] = (WlanInterfaceInfo)Marshal.PtrToStructure(new IntPtr(interfaceListPtr.ToInt64() + Marshal.SizeOf(header) + i * Marshal.SizeOf(typeof(WlanInterfaceInfo))), typeof(WlanInterfaceInfo));\n            }\n\n            foreach (var wlanInterfaceInfo in wlanInterfaceInfos)\n            {\n                // Display the SSID\n                Console.WriteLine(wlanInterfaceInfo.strInterfaceDescription);\n            }\n        }\n        catch (Exception)\n        {\n            // Handle exceptions\n        }\n        finally\n        {\n            WlanFreeMemory(interfaceListPtr);\n            WlanFreeMemory(clientHandle);\n        }\n    }\n}\n\n[StructLayout(LayoutKind.Sequential)]\npublic struct WlanInterfaceInfoListHeader\n{\n    public int dwNumberOfItems;\n    public int dwIndex;\n}