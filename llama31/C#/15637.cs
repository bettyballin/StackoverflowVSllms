using System;\nusing System.Linq.Expressions;\n\npublic class Rule\n{\n    public string Field { get; set; }\n    public string Operator { get; set; }\n    public object Value { get; set; }\n}\n\npublic class Item\n{\n    public object this[string propertyName]\n    {\n        get { return GetType().GetProperty(propertyName).GetValue(this); }\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var items = new[] { new Item { Foo = "bar" }, new Item { Foo = "baz" } };\n        var rules = new[] { new Rule { Field = "Foo", Operator = "==", Value = "bar" } };\n\n        foreach (var item in items)\n        {\n            foreach (var rule in rules)\n            {\n                var parameter = Expression.Parameter(typeof(Item));\n                var property = Expression.Property(parameter, rule.Field);\n                var value = Expression.Constant(rule.Value);\n                var operatorExpression = GetOperatorExpression(rule.Operator, property, value);\n\n                var expression = Expression.Lambda<Func<Item, bool>>(operatorExpression, parameter);\n                var compiledExpression = expression.Compile();\n\n                if (compiledExpression(item))\n                {\n                    Console.WriteLine($"Item matches rule: {item.Foo}");\n                }\n            }\n        }\n    }\n\n    private static Expression GetOperatorExpression(string @operator, Expression property, Expression value)\n    {\n        switch (@operator)\n        {\n            case "==":\n                return Expression.Equal(property, value);\n            case "!=":\n                return Expression.NotEqual(property, value);\n            // add more operators as needed\n            default:\n                throw new NotSupportedException($"Unsupported operator: {@operator}");\n        }\n    }\n}