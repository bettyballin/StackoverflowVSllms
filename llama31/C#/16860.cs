using System;\nusing System.Transactions;\nusing System.Runtime.InteropServices;\n\npublic class TxFileManager : IEnlistmentNotification, IDisposable\n{\n    [DllImport("ktmw32.dll")]\n    static extern IntPtr CreateTransaction(IntPtr hTransaction, out IntPtr hTx);\n\n    [DllImport("ktmw32.dll")]\n    static extern bool CommitTransaction(IntPtr hTx);\n\n    [DllImport("ktmw32.dll")]\n    static extern bool RollbackTransaction(IntPtr hTx);\n\n    private IntPtr _hTx;\n    private Transaction _transaction;\n\n    public TxFileManager(Transaction transaction)\n    {\n        _transaction = transaction;\n        _hTx = CreateTransaction(IntPtr.Zero, out _hTx);\n        transaction.EnlistVolatile(this, EnlistmentOptions.None);\n    }\n\n    public void WriteFile(string filePath, byte[] data)\n    {\n        using (var fileStream = new FileStream(filePath, FileMode.Create, FileAccess.Write, FileShare.None, 4096, FileOptions.WriteThrough))\n        {\n            fileStream.Write(data, 0, data.Length);\n        }\n    }\n\n    public void Commit()\n    {\n        CommitTransaction(_hTx);\n    }\n\n    public void Rollback()\n    {\n        RollbackTransaction(_hTx);\n    }\n\n    void IEnlistmentNotification.Commit(Enlistment enlistment)\n    {\n        Commit();\n    }\n\n    void IEnlistmentNotification.Rollback(Enlistment enlistment)\n    {\n        Rollback();\n    }\n\n    void IEnlistmentNotification.Prepare(PreparingEnlistment preparingEnlistment)\n    {\n        // Prepare to commit or rollback\n    }\n\n    void IDisposable.Dispose()\n    {\n        if (_hTx != IntPtr.Zero)\n        {\n            RollbackTransaction(_hTx);\n            _hTx = IntPtr.Zero;\n        }\n    }\n}