using System;\nusing System.Collections.Generic;\n\npublic class AhoCorasick\n{\n    private readonly Trie _trie;\n\n    public AhoCorasick(IEnumerable<string> patterns)\n    {\n        _trie = new Trie();\n        foreach (var pattern in patterns)\n        {\n            _trie.AddPattern(pattern);\n        }\n        _trie.BuildFailureLinks();\n    }\n\n    public IEnumerable<string> Search(string text)\n    {\n        var matches = new List<string>();\n        var state = _trie.Root;\n        foreach (var c in text)\n        {\n            state = _trie.NextState(state, c);\n            if (state.IsMatch)\n            {\n                matches.Add(state.Pattern);\n            }\n        }\n        return matches;\n    }\n}\n\npublic class Trie\n{\n    public readonly Node Root;\n\n    public Trie()\n    {\n        Root = new Node();\n    }\n\n    public void AddPattern(string pattern)\n    {\n        var node = Root;\n        foreach (var c in pattern)\n        {\n            node = node.GetChild(c);\n        }\n        node.IsMatch = true;\n        node.Pattern = pattern;\n    }\n\n    public void BuildFailureLinks()\n    {\n        var queue = new Queue<Node>();\n        queue.Enqueue(Root);\n        while (queue.Count > 0)\n        {\n            var node = queue.Dequeue();\n            foreach (var child in node.Children.Values)\n            {\n                if (child != node)\n                {\n                    child.FailureLink = node.FailureLink?.GetChild(child.Char);\n                    queue.Enqueue(child);\n                }\n            }\n        }\n    }\n\n    public Node NextState(Node state, char c)\n    {\n        while (state != null)\n        {\n            var nextState = state.GetChild(c);\n            if (nextState != null)\n            {\n                return nextState;\n            }\n            state = state.FailureLink;\n        }\n        return Root;\n    }\n}\n\npublic class Node\n{\n    public readonly Dictionary<char, Node> Children = new Dictionary<char, Node>();\n    public Node FailureLink { get; set; }\n    public bool IsMatch { get; set; }\n    public string Pattern { get; set; }\n    public char Char { get; set; }\n\n    public Node GetChild(char c)\n    {\n        if (Children.TryGetValue(c, out var child))\n        {\n            return child;\n        }\n        var newNode = new Node { Char = c };\n        Children[c] = newNode;\n        return newNode;\n    }\n}