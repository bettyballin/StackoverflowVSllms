// Service side (IDispatchMessageInspector)\npublic class DatasetExtendedPropertiesInspector : IDispatchMessageInspector\n{\n    public object AfterReceiveRequest(ref Message request, IClientChannel channel, InstanceContext instanceContext)\n    {\n        // Not needed for this scenario\n        return null;\n    }\n\n    public void BeforeSendReply(ref Message reply, object correlationState)\n    {\n        if (reply.Body.GetType() == typeof(DataSet))\n        {\n            var dataset = (DataSet)reply.Body;\n            // Use your custom XML serializer to serialize the ExtendedProperties\n            var xmlSerializer = new YourCustomXmlSerializer();\n            var extendedPropertiesXml = xmlSerializer.Serialize(dataset.Tables[0].ExtendedProperties);\n            // Replace the original ExtendedProperties with the serialized XML\n            dataset.Tables[0].ExtendedProperties = extendedPropertiesXml;\n        }\n    }\n}\n\n// Client side (IClientMessageInspector)\npublic class DatasetExtendedPropertiesInspector : IClientMessageInspector\n{\n    public void AfterReceiveReply(ref Message reply, object correlationState)\n    {\n        if (reply.Body.GetType() == typeof(DataSet))\n        {\n            var dataset = (DataSet)reply.Body;\n            // Use your custom XML serializer to deserialize the ExtendedProperties\n            var xmlSerializer = new YourCustomXmlSerializer();\n            var extendedProperties = xmlSerializer.Deserialize(dataset.Tables[0].ExtendedProperties);\n            // Replace the original ExtendedProperties with the deserialized object\n            dataset.Tables[0].ExtendedProperties = extendedProperties;\n        }\n    }\n\n    public object BeforeSendRequest(ref Message request, IClientChannel channel)\n    {\n        // Not needed for this scenario\n        return null;\n    }\n}