using System.Linq;\nusing SD.LLBLGen.Pro.ORMSupportClasses;\n\npublic IQueryable CreateDynamicQuery(string entityName, string[] fieldNames)\n{\n    // Get the entity type from the LLBLGen Data Access Adapter\n    var entityType = DataAccessAdapter.GetType(entityName);\n\n    // Create an IQueryable instance for the entity type\n    var query = DataAccessAdapter.GetQueryable(entityType);\n\n    // Create a new expression for the select clause\n    var selectExpression = CreateSelectExpression(fieldNames, entityType);\n\n    // Use the Queryable.Select method to apply the select expression\n    query = query.Select(selectExpression);\n\n    return query;\n}\n\nprivate Expression<Func<object, object>> CreateSelectExpression(string[] fieldNames, Type entityType)\n{\n    // Create a parameter expression for the entity type\n    var parameter = Expression.Parameter(entityType);\n\n    // Create a new expression for the select clause\n    var selectExpression = Expression.New(\n        typeof(object).GetConstructor(Type.EmptyTypes),\n        fieldNames.Select(fieldName => CreateFieldExpression(parameter, fieldName))\n    );\n\n    return Expression.Lambda<Func<object, object>>(selectExpression, parameter);\n}\n\nprivate Expression CreateFieldExpression(ParameterExpression parameter, string fieldName)\n{\n    // Use reflection to get the property info for the field\n    var propertyInfo = parameter.Type.GetProperty(fieldName);\n\n    // Create a member expression for the field\n    var fieldExpression = Expression.MakeMemberAccess(parameter, propertyInfo);\n\n    return fieldExpression;\n}