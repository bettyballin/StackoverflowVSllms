using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\n// Generate a key encryption key (KEK)\nbyte[] kek = GenerateKeyEncryptionKey();\n\n// Encrypt the symmetric encryption key using the KEK\nbyte[] encryptedSymmetricKey = EncryptSymmetricKey(kek, symmetricKey);\n\n// Encrypt the configuration values using the symmetric encryption key\nbyte[] encryptedConfig = EncryptConfig(symmetricKey, configValues);\n\n// Store the encrypted configuration and KEK securely\nStoreEncryptedConfig(encryptedConfig, kek);\n\n// To decrypt the configuration values on another machine\nbyte[] decryptedConfig = DecryptConfig(encryptedConfig, kek);\n\n// Helper functions\nbyte[] GenerateKeyEncryptionKey()\n{\n    // Generate a random KEK using a secure random number generator\n    using (var rng = RandomNumberGenerator.Create())\n    {\n        byte[] kek = new byte[32];\n        rng.GetBytes(kek);\n        return kek;\n    }\n}\n\nbyte[] EncryptSymmetricKey(byte[] kek, byte[] symmetricKey)\n{\n    // Encrypt the symmetric key using the KEK\n    using (var aes = Aes.Create())\n    {\n        aes.Key = kek;\n        aes.Mode = CipherMode.CBC;\n        aes.Padding = PaddingMode.PKCS7;\n\n        using (var ms = new MemoryStream())\n        {\n            using (var cs = new CryptoStream(ms, aes.CreateEncryptor(), CryptoStreamMode.Write))\n            {\n                cs.Write(symmetricKey, 0, symmetricKey.Length);\n            }\n            return ms.ToArray();\n        }\n    }\n}\n\nbyte[] EncryptConfig(byte[] symmetricKey, string configValues)\n{\n    // Encrypt the configuration values using the symmetric key\n    using (var aes = Aes.Create())\n    {\n        aes.Key = symmetricKey;\n        aes.Mode = CipherMode.CBC;\n        aes.Padding = PaddingMode.PKCS7;\n\n        using (var ms = new MemoryStream())\n        {\n            using (var cs = new CryptoStream(ms, aes.CreateEncryptor(), CryptoStreamMode.Write))\n            {\n                byte[] configBytes = Encoding.UTF8.GetBytes(configValues);\n                cs.Write(configBytes, 0, configBytes.Length);\n            }\n            return ms.ToArray();\n        }\n    }\n}\n\nbyte[] DecryptConfig(byte[] encryptedConfig, byte[] kek)\n{\n    // Decrypt the symmetric key using the KEK\n    byte[] symmetricKey = DecryptSymmetricKey(kek, encryptedConfig);\n\n    // Decrypt the configuration values using the symmetric key\n    using (var aes = Aes.Create())\n    {\n        aes.Key = symmetricKey;\n        aes.Mode = CipherMode.CBC;\n        aes.Padding = PaddingMode.PKCS7;\n\n        using (var ms = new MemoryStream(encryptedConfig))\n        {\n            using (var cs = new CryptoStream(ms, aes.CreateDecryptor(), CryptoStreamMode.Read))\n            {\n                byte[] configBytes = new byte[encryptedConfig.Length];\n                cs.Read(configBytes, 0, configBytes.Length);\n                return configBytes;\n            }\n        }\n    }\n}