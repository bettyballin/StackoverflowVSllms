public class EnumerableWrapper<T> : IEnumerable<T>\n{\n    private readonly IEnumerable<T> _innerEnumerable;\n    private bool _isEnumerating = false;\n\n    public EnumerableWrapper(IEnumerable<T> innerEnumerable)\n    {\n        _innerEnumerable = innerEnumerable;\n    }\n\n    public IEnumerator<T> GetEnumerator()\n    {\n        _isEnumerating = true;\n        return new EnumeratorWrapper(_innerEnumerable.GetEnumerator(), () => _isEnumerating = false);\n    }\n\n    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();\n\n    public bool IsEnumerating => _isEnumerating;\n\n    private class EnumeratorWrapper : IEnumerator<T>\n    {\n        private readonly IEnumerator<T> _innerEnumerator;\n        private readonly Action _onDispose;\n\n        public EnumeratorWrapper(IEnumerator<T> innerEnumerator, Action onDispose)\n        {\n            _innerEnumerator = innerEnumerator;\n            _onDispose = onDispose;\n        }\n\n        public T Current => _innerEnumerator.Current;\n\n        object IEnumerator.Current => Current;\n\n        public void Dispose()\n        {\n            _innerEnumerator.Dispose();\n            _onDispose();\n        }\n\n        public bool MoveNext() => _innerEnumerator.MoveNext();\n\n        public void Reset() => _innerEnumerator.Reset();\n    }\n}