using System;\nusing System.Runtime.InteropServices;\nusing System.Collections.Generic;\n\npublic class VideoCodecEnumerator\n{\n    [DllImport("ole32.dll")]\n    private static extern int CoCreateInstance(ref Guid clsid, [MarshalAs(UnmanagedType.IUnknown)] object punkOuter, \n        int context, ref Guid iid, out IntPtr punk);\n\n    [DllImport("ole32.dll")]\n    private static extern int CoInitialize(IntPtr pvReserved);\n\n    [DllImport("ole32.dll")]\n    private static extern void CoUninitialize();\n\n    [DllImport("ole32.dll")]\n    private static extern int CoTaskMemFree(IntPtr pv);\n\n    private const int CLSCTX_INPROC_SERVER = 1;\n\n    private static readonly Guid CLSID_SystemDeviceEnum = new Guid("62BE5D10-60EB-11d0-BD3B-00A0C911CE86");\n    private static readonly Guid IID_ICreateDevEnum = new Guid("29840822-5B84-11D0-BD3B-00A0C911CE86");\n    private static readonly Guid IID_IEnumMoniker = new Guid("00000102-0000-0000-C000-000000000046");\n    private static readonly Guid IID_IMoniker = new Guid("0000000f-0000-0000-C000-000000000046");\n\n    public static List<string> EnumerateVideoCodecs()\n    {\n        List<string> codecs = new List<string>();\n\n        IntPtr pDevEnum = IntPtr.Zero;\n        IntPtr pEnum = IntPtr.Zero;\n        IntPtr pMoniker = IntPtr.Zero;\n\n        try\n        {\n            CoInitialize(IntPtr.Zero);\n\n            int hr = CoCreateInstance(ref CLSID_SystemDeviceEnum, null, CLSCTX_INPROC_SERVER, ref IID_ICreateDevEnum, out pDevEnum);\n            if (hr != 0)\n                return codecs;\n\n            hr = Marshal.QueryInterface(pDevEnum, ref IID_IEnumMoniker, out pEnum);\n            if (hr != 0)\n                return codecs;\n\n            while (true)\n            {\n                hr = Marshal.QueryInterface(pEnum, ref IID_IMoniker, out pMoniker);\n                if (hr != 0)\n                    break;\n\n                string displayName;\n                hr = GetMonikerDisplayName(pMoniker, out displayName);\n                if (hr == 0)\n                    codecs.Add(displayName);\n\n                Marshal.Release(pMoniker);\n            }\n        }\n        finally\n        {\n            if (pMoniker != IntPtr.Zero)\n                Marshal.Release(pMoniker);\n            if (pEnum != IntPtr.Zero)\n                Marshal.Release(pEnum);\n            if (pDevEnum != IntPtr.Zero)\n                Marshal.Release(pDevEnum);\n\n            CoUninitialize();\n        }\n\n        return codecs;\n    }\n\n    private static int GetMonikerDisplayName(IntPtr pMoniker, out string displayName)\n    {\n        displayName = null;\n\n        IntPtr pPropertyBag = IntPtr.Zero;\n        try\n        {\n            int hr = Marshal.QueryInterface(pMoniker, ref IID_IPropertyBag, out pPropertyBag);\n            if (hr != 0)\n                return hr;\n\n            IntPtr pstr = IntPtr.Zero;\n            hr = Marshal.QueryInterface(pPropertyBag, ref IID_IPropertyBag2, out pstr);\n            if (hr != 0)\n                return hr;\n\n            string[] properties = new string[] { "FriendlyName" };\n            hr = Marshal.QueryInterface(pstr, ref IID_IPropertyBag2, out pstr);\n            if (hr != 0)\n                return hr;\n\n            uint celtFetched;\n            hr = Marshal.QueryInterface(pstr, ref IID_IPropertyBag2, out pstr);\n            if (hr != 0)\n                return hr;\n\n            displayName = Marshal.PtrToStringBSTR(pstr);\n            return 0;\n        }\n        finally\n        {\n            if (pPropertyBag != IntPtr.Zero)\n                Marshal.Release(pPropertyBag);\n        }\n    }\n}