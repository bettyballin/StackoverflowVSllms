using System;\nusing System.IO;\nusing System.Text;\nusing System.Xml;\n\npublic class SanitizingTextReader : TextReader\n{\n    private readonly TextReader _reader;\n    private readonly Encoding _encoding;\n\n    public SanitizingTextReader(TextReader reader, Encoding encoding)\n    {\n        _reader = reader;\n        _encoding = encoding;\n    }\n\n    public override int Read()\n    {\n        int c = _reader.Read();\n        if (c == -1) return -1;\n\n        // Check if the character is a hexadecimal character\n        if (c == '&')\n        {\n            string hexString = "";\n            while ((c = _reader.Read()) != -1 && c != ';')\n            {\n                hexString += (char)c;\n            }\n            if (c == ';')\n            {\n                try\n                {\n                    // Try to parse the hexadecimal string\n                    int codePoint = int.Parse(hexString, NumberStyles.HexNumber);\n                    // If it's a valid hexadecimal character, return it\n                    return codePoint;\n                }\n                catch (FormatException)\n                {\n                    // If it's not a valid hexadecimal character, skip it\n                    return Read();\n                }\n            }\n            else\n            {\n                // If we didn't find a semicolon, return the original character\n                return '&';\n            }\n        }\n\n        return c;\n    }\n\n    public override void Close()\n    {\n        _reader.Close();\n    }\n}\n\npublic class XmlSanitizer\n{\n    public static XmlReader CreateSanitizingXmlReader(Stream xmlStream, Encoding encoding)\n    {\n        var textReader = new StreamReader(xmlStream, encoding);\n        var sanitizingTextReader = new SanitizingTextReader(textReader, encoding);\n        var xmlReaderSettings = new XmlReaderSettings { CheckCharacters = false };\n        return XmlReader.Create(sanitizingTextReader, xmlReaderSettings);\n    }\n}