using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\n// ...\n\n// Encrypt data with password verification tag\npublic byte[] EncryptData(byte[] data, string password)\n{\n    // Generate random salt\n    byte[] salt = new byte[16];\n    using (var rng = RandomNumberGenerator.Create())\n    {\n        rng.GetBytes(salt);\n    }\n\n    // Hash password with salt\n    byte[] passwordHash;\n    using (var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 100000))\n    {\n        passwordHash = pbkdf2.GetBytes(32);\n    }\n\n    // Encrypt data\n    byte[] encryptedData;\n    using (var aes = Aes.Create())\n    {\n        aes.Key = passwordHash;\n        aes.IV = new byte[16]; // Use a random IV in production\n        using (var ms = new MemoryStream())\n        {\n            using (var cs = new CryptoStream(ms, aes.CreateEncryptor(), CryptoStreamMode.Write))\n            {\n                cs.Write(data, 0, data.Length);\n            }\n            encryptedData = ms.ToArray();\n        }\n    }\n\n    // Store salt and password hash alongside encrypted data\n    byte[] result = new byte[salt.Length + passwordHash.Length + encryptedData.Length];\n    Array.Copy(salt, 0, result, 0, salt.Length);\n    Array.Copy(passwordHash, 0, result, salt.Length, passwordHash.Length);\n    Array.Copy(encryptedData, 0, result, salt.Length + passwordHash.Length, encryptedData.Length);\n    return result;\n}\n\n// Verify password before decryption\npublic bool VerifyPassword(byte[] encryptedData, string password)\n{\n    // Read stored salt and password hash\n    byte[] salt = new byte[16];\n    byte[] passwordHash = new byte[32];\n    Array.Copy(encryptedData, 0, salt, 0, salt.Length);\n    Array.Copy(encryptedData, salt.Length, passwordHash, 0, passwordHash.Length);\n\n    // Hash user-provided password with salt\n    byte[] userPasswordHash;\n    using (var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 100000))\n    {\n        userPasswordHash = pbkdf2.GetBytes(32);\n    }\n\n    // Compare password hashes\n    return CryptographicOperations.FixedTimeEquals(passwordHash, userPasswordHash);\n}