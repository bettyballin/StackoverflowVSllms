using System;\nusing System.Text.RegularExpressions;\n\npublic class FormatStringValidator\n{\n    private static readonly Regex PlaceholderRegex = new Regex(@"\{(\d+)(?:,(\d+))?(?::(.*?))?\}");\n\n    public bool IsValidFormatString(string formatString, Type[] argumentTypes)\n    {\n        var matches = PlaceholderRegex.Matches(formatString);\n\n        foreach (Match match in matches)\n        {\n            int index = int.Parse(match.Groups[1].Value);\n            if (index >= argumentTypes.Length)\n            {\n                return false; // Index out of range\n            }\n\n            Type argumentType = argumentTypes[index];\n            string formatSpecifier = match.Groups[3].Value;\n\n            if (!IsValidFormatSpecifier(argumentType, formatSpecifier))\n            {\n                return false; // Invalid format specifier\n            }\n        }\n\n        return true;\n    }\n\n    private bool IsValidFormatSpecifier(Type type, string formatSpecifier)\n    {\n        if (type == typeof(string))\n        {\n            // String type can have any format specifier\n            return true;\n        }\n\n        if (type == typeof(int) || type == typeof(long) || type == typeof(double) || type == typeof(float))\n        {\n            // Numeric types can have numeric format specifiers (e.g. "D", "F", "N")\n            return IsNumericFormatSpecifier(formatSpecifier);\n        }\n\n        if (type == typeof(DateTime))\n        {\n            // DateTime type can have date and time format specifiers (e.g. "d", "t", "yyyy-MM-dd")\n            return IsDateTimeFormatSpecifier(formatSpecifier);\n        }\n\n        // Add more type-specific checks as needed\n\n        return false; // Unknown type or invalid format specifier\n    }\n\n    private bool IsNumericFormatSpecifier(string formatSpecifier)\n    {\n        // Implement numeric format specifier validation logic here\n        // For example:\n        return formatSpecifier.ToUpper() == "D" || formatSpecifier.ToUpper() == "F" || formatSpecifier.ToUpper() == "N";\n    }\n\n    private bool IsDateTimeFormatSpecifier(string formatSpecifier)\n    {\n        // Implement date and time format specifier validation logic here\n        // For example:\n        return formatSpecifier.ToLower() == "d" || formatSpecifier.ToLower() == "t" || formatSpecifier.ToLower() == "yyyy-mm-dd";\n    }\n}