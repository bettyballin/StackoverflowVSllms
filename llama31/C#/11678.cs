using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.Composition;\nusing System.ComponentModel.Composition.Hosting;\nusing System.IO;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        // Example folders\n        string[] folders = new string[] { "Test1Parts", "Test2Parts" };\n\n        // Create an AggregatingCatalog to hold all parts\n        var aggregateCatalog = new AggregateCatalog();\n\n        // Iterate over each folder, creating a DirectoryCatalog for each\n        foreach (var folder in folders)\n        {\n            var directoryCatalog = new DirectoryCatalog(folder);\n            aggregateCatalog.Catalogs.Add(directoryCatalog);\n        }\n\n        // Create a CompositionContainer with the parts from the catalog\n        var container = new CompositionContainer(aggregateCatalog);\n\n        // Get all exports that implement a specific contract\n        // Here, assuming "IPart" is your contract interface\n        var parts = container.GetExports<IPart>();\n\n        // Dynamically figure out where to place parts\n        foreach (var part in parts)\n        {\n            // Since the part itself doesn't carry the folder information directly,\n            // you would need a way to map or infer this. One approach is to use\n            // the configuration file approach you mentioned or maintain a separate\n            // mapping database/logic.\n\n            // Example of using a hypothetical mapping logic\n            var partName = part.Value.GetType().Name;\n            var targetSection = DetermineSectionForPart(partName); // Implement DetermineSectionForPart logic elsewhere\n\n            // Place the part in the appropriate section of the application\n            PlacePartInApplication(targetSection, part);\n        }\n    }\n\n    // Placeholder methods for demonstration\n    static string DetermineSectionForPart(string partName)\n    {\n        // Logic to determine where a part goes based on its name, a config file, etc.\n        return "Test1"; // Example logic\n    }\n\n    static void PlacePartInApplication(string section, Lazy<IPart> part)\n    {\n        // Logic to place the part in the right section of the app\n    }\n}