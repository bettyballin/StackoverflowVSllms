using System.Security.Cryptography;\n\n// Generate keys\nusing (var rsa = new RSACryptoServiceProvider(2048))\n{\n    // Sign data\n    byte[] data = Encoding.UTF8.GetBytes("Hello, World!");\n    byte[] signature = rsa.SignData(data, HashAlgorithmName.SHA256, RSASignaturePadding.Pkcs1);\n\n    // Encrypt signed data\n    byte[] encryptedData;\n    using (var recipientRSA = new RSACryptoServiceProvider(2048))\n    {\n        recipientRSA.ImportParameters(rsa.ExportParameters(false));\n        encryptedData = recipientRSA.Encrypt(signature, RSAEncryptionPadding.OaepSHA256);\n    }\n\n    // Send encrypted data and signature\n    // ...\n}\n\n// Verify and decrypt\nusing (var rsa = new RSACryptoServiceProvider(2048))\n{\n    // Import recipient's public key\n    rsa.ImportParameters(recipientRSA.ExportParameters(false));\n\n    // Decrypt data\n    byte[] decryptedData = rsa.Decrypt(encryptedData, RSAEncryptionPadding.OaepSHA256);\n\n    // Verify signature\n    byte[] originalData = Encoding.UTF8.GetBytes("Hello, World!");\n    bool isValid = rsa.VerifyData(originalData, decryptedData, HashAlgorithmName.SHA256, RSASignaturePadding.Pkcs1);\n    if (!isValid)\n    {\n        throw new InvalidOperationException("Invalid signature");\n    }\n}