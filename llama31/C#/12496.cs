using Microsoft.EntityFrameworkCore;\nusing System;\n\npublic class MyEntity\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n\npublic class MyDbContext : DbContext\n{\n    public DbSet<MyEntity> MyEntities { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        optionsBuilder.UseSqlServer(@"Data Source=(localdb)\mssqllocaldb;Initial Catalog=MyDatabase;Integrated Security=True");\n    }\n}\n\npublic class MyRepository\n{\n    private readonly MyDbContext _context;\n\n    public MyRepository(MyDbContext context)\n    {\n        _context = context;\n    }\n\n    public async Task<MyEntity> Create(MyEntity entity)\n    {\n        _context.MyEntities.Add(entity);\n        await _context.SaveChangesAsync();\n        return entity;\n    }\n\n    public async Task<MyEntity> Read(int id)\n    {\n        return await _context.MyEntities.FindAsync(id);\n    }\n\n    public async Task Update(MyEntity entity)\n    {\n        _context.MyEntities.Update(entity);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task Delete(int id)\n    {\n        var entity = await _context.MyEntities.FindAsync(id);\n        if (entity != null)\n        {\n            _context.MyEntities.Remove(entity);\n            await _context.SaveChangesAsync();\n        }\n    }\n}