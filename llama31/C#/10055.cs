public interface IVC\n{\n    int f();\n    int Count { get; }\n}\n\npublic class VC : IVC\n{\n    public int f() { return 2; }\n    public int Count { get { return 200; } }\n}\n\npublic class C\n{\n    public int f() { return 2; }\n    public int Count { get { return 200; } }\n}\n\nprivate static void DoOne()\n{\n    C a = new C();\n    int s = 0;\n    for (int j = 0; j < 100000; j++)\n    {\n        for (int c = 0; c < a.Count; c++) s += a.f();\n    }\n}\n\nprivate static void DoTwo()\n{\n    IVC a = new VC();\n    int s = 0;\n    for (int j = 0; j < 100000; j++)\n    {\n        VC concreteVC = (VC)a; // cast to concrete class type\n        for (int c = 0; c < concreteVC.Count; c++) s += concreteVC.f();\n    }\n}