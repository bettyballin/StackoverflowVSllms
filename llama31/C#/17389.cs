using System;\nusing System.ComponentModel;\nusing System.Reflection;\n\npublic class ConditionalBrowsableAttribute : Attribute\n{\n    public string PropertyName { get; set; }\n    public object PropertyValue { get; set; }\n}\n\npublic class CustomPropertyDescriptor : PropertyDescriptor\n{\n    private PropertyDescriptor _baseDescriptor;\n    private object _component;\n\n    public CustomPropertyDescriptor(PropertyDescriptor baseDescriptor, object component)\n        : base(baseDescriptor.Name, baseDescriptor.Attributes)\n    {\n        _baseDescriptor = baseDescriptor;\n        _component = component;\n    }\n\n    public override bool IsBrowsable\n    {\n        get\n        {\n            var attribute = (ConditionalBrowsableAttribute)_baseDescriptor.Attributes[typeof(ConditionalBrowsableAttribute)];\n            if (attribute != null)\n            {\n                var propertyValue = _component.GetType().GetProperty(attribute.PropertyName).GetValue(_component);\n                return propertyValue.Equals(attribute.PropertyValue);\n            }\n            return true;\n        }\n    }\n}\n\npublic class MyTypeConverter : TypeConverter\n{\n    public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)\n    {\n        var properties = base.GetProperties(context, value, attributes);\n        var descriptors = new PropertyDescriptorCollection(null);\n\n        foreach (PropertyDescriptor prop in properties)\n        {\n            descriptors.Add(new CustomPropertyDescriptor(prop, value));\n        }\n\n        return descriptors;\n    }\n}