using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class NumberEncryptor\n{\n    private static readonly byte[] Key = new byte[32] // 256 bits, 32 bytes\n    {\n        0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,\n        0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,\n        0x17, 0x18, 0x19, 0x20, 0x21, 0x22, 0x23, 0x24,\n        0x25, 0x26, 0x27, 0x28, 0x29, 0x30, 0x31, 0x32\n    };\n\n    private static readonly byte[] IV = new byte[16] // 128 bits, 16 bytes\n    {\n        0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,\n        0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16\n    };\n\n    public static string EncryptNumber(long number)\n    {\n        using (Aes aes = Aes.Create())\n        {\n            aes.Key = Key;\n            aes.IV = IV;\n            aes.Mode = CipherMode.CBC;\n            aes.Padding = PaddingMode.PKCS7;\n\n            byte[] numberBytes = BitConverter.GetBytes(number);\n            byte[] encryptedBytes = aes.CreateEncryptor().TransformFinalBlock(numberBytes, 0, numberBytes.Length);\n\n            return Convert.ToBase64String(encryptedBytes);\n        }\n    }\n\n    public static long DecryptNumber(string encryptedString)\n    {\n        using (Aes aes = Aes.Create())\n        {\n            aes.Key = Key;\n            aes.IV = IV;\n            aes.Mode = CipherMode.CBC;\n            aes.Padding = PaddingMode.PKCS7;\n\n            byte[] encryptedBytes = Convert.FromBase64String(encryptedString);\n            byte[] decryptedBytes = aes.CreateDecryptor().TransformFinalBlock(encryptedBytes, 0, encryptedBytes.Length);\n\n            return BitConverter.ToInt64(decryptedBytes, 0);\n        }\n    }\n}