using System;\nusing System.Data;\n\n// Abstract database factory\npublic abstract class DatabaseFactory\n{\n    public abstract IDbConnection CreateConnection();\n    public abstract IDbCommand CreateCommand();\n}\n\n// Concrete database factories\npublic class SqlServerFactory : DatabaseFactory\n{\n    public override IDbConnection CreateConnection()\n    {\n        return new SqlConnection();\n    }\n\n    public override IDbCommand CreateCommand()\n    {\n        return new SqlCommand();\n    }\n}\n\npublic class OracleFactory : DatabaseFactory\n{\n    public override IDbConnection CreateConnection()\n    {\n        return new OracleConnection();\n    }\n\n    public override IDbCommand CreateCommand()\n    {\n        return new OracleCommand();\n    }\n}\n\n// MySQL and DB2 factories would be implemented similarly\n\n// Repository class\npublic class Repository\n{\n    private readonly DatabaseFactory _factory;\n\n    public Repository(DatabaseFactory factory)\n    {\n        _factory = factory;\n    }\n\n    public DataTable ExecuteQuery(string query)\n    {\n        using (var connection = _factory.CreateConnection())\n        {\n            connection.Open();\n\n            using (var command = _factory.CreateCommand())\n            {\n                command.Connection = connection;\n                command.CommandText = query;\n\n                using (var adapter = new DbDataAdapter(command))\n                {\n                    var table = new DataTable();\n                    adapter.Fill(table);\n                    return table;\n                }\n            }\n        }\n    }\n\n    public int ExecuteNonQuery(string query, params IDataParameter[] parameters)\n    {\n        using (var connection = _factory.CreateConnection())\n        {\n            connection.Open();\n\n            using (var command = _factory.CreateCommand())\n            {\n                command.Connection = connection;\n                command.CommandText = query;\n\n                foreach (var parameter in parameters)\n                {\n                    command.Parameters.Add(parameter);\n                }\n\n                return command.ExecuteNonQuery();\n            }\n        }\n    }\n}