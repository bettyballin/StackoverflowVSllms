using System;\nusing System.Configuration;\n\nclass ConnectionStringEncryption\n{\n    static void Main(string[] args)\n    {\n        // Encrypt the connection string\n        string connectionString = ConfigurationManager.ConnectionStrings["MyConnection"].ConnectionString;\n        string encryptedConnectionString = EncryptConnectionString(connectionString);\n\n        // Decrypt the connection string\n        string decryptedConnectionString = DecryptConnectionString(encryptedConnectionString);\n\n        Console.WriteLine("Encrypted Connection String: " + encryptedConnectionString);\n        Console.WriteLine("Decrypted Connection String: " + decryptedConnectionString);\n    }\n\n    static string EncryptConnectionString(string connectionString)\n    {\n        // Use the aspnet_regiis tool to encrypt the connection string\n        string encryptedConnectionString = RunAspNetRegiis($"-pef {connectionString} CustomProvider");\n        return encryptedConnectionString;\n    }\n\n    static string DecryptConnectionString(string encryptedConnectionString)\n    {\n        // Use the aspnet_regiis tool to decrypt the connection string\n        string decryptedConnectionString = RunAspNetRegiis($"-pdf {encryptedConnectionString} CustomProvider");\n        return decryptedConnectionString;\n    }\n\n    static string RunAspNetRegiis(string arguments)\n    {\n        // Run the aspnet_regiis tool with the specified arguments\n        Process process = new Process();\n        process.StartInfo.FileName = "aspnet_regiis.exe";\n        process.StartInfo.Arguments = arguments;\n        process.StartInfo.UseShellExecute = false;\n        process.StartInfo.RedirectStandardOutput = true;\n        process.Start();\n\n        string output = process.StandardOutput.ReadToEnd();\n        process.WaitForExit();\n\n        return output;\n    }\n}