using System;\nusing System.Runtime.InteropServices;\n\nclass ProcessWatcher\n{\n    [DllImport("user32.dll")]\n    private static extern IntPtr SetWindowsHookEx(int idHook, HookProc lpfn, IntPtr hmod, uint dwThreadId);\n\n    [DllImport("user32.dll")]\n    private static extern bool UnhookWindowsHookEx(IntPtr hhk);\n\n    [DllImport("user32.dll")]\n    private static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);\n\n    private const int WH_SHELL = 10;\n    private const int HSHELL_WINDOWCREATED = 1;\n\n    private delegate int HookProc(int nCode, IntPtr wParam, IntPtr lParam);\n\n    private IntPtr hookHandle;\n\n    public ProcessWatcher()\n    {\n        hookHandle = SetWindowsHookEx(WH_SHELL, ShellHookProc, IntPtr.Zero, 0);\n    }\n\n    ~ProcessWatcher()\n    {\n        UnhookWindowsHookEx(hookHandle);\n    }\n\n    private int ShellHookProc(int nCode, IntPtr wParam, IntPtr lParam)\n    {\n        if (nCode == HSHELL_WINDOWCREATED)\n        {\n            IntPtr hWnd = wParam;\n            uint pid;\n            GetWindowThreadProcessId(hWnd, out pid);\n            Process p = Process.GetProcessById((int)pid);\n            // Do something with the new process\n            Console.WriteLine($"New process created: {p.ProcessName}");\n        }\n        return CallNextHookEx(hookHandle, nCode, wParam, lParam);\n    }\n\n    [DllImport("user32.dll")]\n    private static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint pid);\n}