using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class EmailValidationTokenGenerator\n{\n    private static readonly RNGCryptoServiceProvider _rng = new RNGCryptoServiceProvider();\n    private static readonly byte[] _secretKey = new byte[32]; // 256-bit secret key\n\n    static EmailValidationTokenGenerator()\n    {\n        _rng.GetBytes(_secretKey);\n    }\n\n    public static string GenerateToken(int userId)\n    {\n        byte[] tokenBytes = new byte[32]; // 256-bit token\n        _rng.GetBytes(tokenBytes);\n\n        // Create a digital signature using HMACSHA256\n        using (HMACSHA256 hmac = new HMACSHA256(_secretKey))\n        {\n            byte[] signatureBytes = hmac.ComputeHash(tokenBytes);\n            string token = Convert.ToBase64String(tokenBytes.Concat(signatureBytes).ToArray());\n\n            // Include the user ID in the token\n            string encodedUserId = Convert.ToBase64String(Encoding.UTF8.GetBytes(userId.ToString()));\n            return $"http://www.foo.bar/validation?code={token}&uid={encodedUserId}";\n        }\n    }\n\n    public static bool ValidateToken(string token, int userId)\n    {\n        // Extract the token bytes and signature bytes\n        byte[] tokenBytes = Convert.FromBase64String(token.Substring(0, token.IndexOf('&')));\n        byte[] signatureBytes = tokenBytes.Skip(32).ToArray();\n\n        // Verify the digital signature\n        using (HMACSHA256 hmac = new HMACSHA256(_secretKey))\n        {\n            byte[] expectedSignatureBytes = hmac.ComputeHash(tokenBytes.Take(32).ToArray());\n            if (!signatureBytes.SequenceEqual(expectedSignatureBytes))\n            {\n                return false;\n            }\n        }\n\n        // Verify the user ID\n        string encodedUserId = token.Substring(token.IndexOf('&') + 5);\n        int decodedUserId = int.Parse(Encoding.UTF8.GetString(Convert.FromBase64String(encodedUserId)));\n        return decodedUserId == userId;\n    }\n}