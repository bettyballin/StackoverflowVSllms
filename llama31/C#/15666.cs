using Org.BouncyCastle.Crypto;\nusing Org.BouncyCastle.Crypto.Engines;\nusing Org.BouncyCastle.Crypto.Modes;\nusing Org.BouncyCastle.Crypto.Parameters;\nusing System.Text;\n\npublic class EncryptionHelper\n{\n    public static string Encrypt(string data, string key)\n    {\n        byte[] keyBytes = Encoding.UTF8.GetBytes(key);\n        byte[] dataBytes = Encoding.UTF8.GetBytes(data);\n        PaddedBufferedBlockCipher cipher = new PaddedBufferedBlockCipher(new CbcBlockCipher(new AesEngine()));\n        cipher.Init(true, new ParametersWithIV(new KeyParameter(keyBytes), new byte[16]));\n        byte[] encryptedBytes = new byte[cipher.GetOutputSize(dataBytes.Length)];\n        int len = cipher.ProcessBytes(dataBytes, 0, dataBytes.Length, encryptedBytes, 0);\n        cipher.DoFinal(encryptedBytes, len);\n        return Convert.ToBase64String(encryptedBytes);\n    }\n\n    public static string Decrypt(string encryptedData, string key)\n    {\n        byte[] keyBytes = Encoding.UTF8.GetBytes(key);\n        byte[] encryptedBytes = Convert.FromBase64String(encryptedData);\n        PaddedBufferedBlockCipher cipher = new PaddedBufferedBlockCipher(new CbcBlockCipher(new AesEngine()));\n        cipher.Init(false, new ParametersWithIV(new KeyParameter(keyBytes), new byte[16]));\n        byte[] decryptedBytes = new byte[cipher.GetOutputSize(encryptedBytes.Length)];\n        int len = cipher.ProcessBytes(encryptedBytes, 0, encryptedBytes.Length, decryptedBytes, 0);\n        cipher.DoFinal(decryptedBytes, len);\n        return Encoding.UTF8.GetString(decryptedBytes);\n    }\n}