using CsvHelper;\nusing CsvHelper.Configuration;\nusing System;\nusing System.IO;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\npublic class ContactImporter\n{\n    public void ImportContacts(string filePath)\n    {\n        // Read the first line to detect the delimiter\n        string firstLine = File.ReadLines(filePath).FirstOrDefault();\n        char detectedDelimiter = DetectDelimiter(firstLine);\n\n        // Read the CSV file\n        var config = new CsvConfiguration(CultureInfo.InvariantCulture)\n        {\n            Delimiter = detectedDelimiter.ToString(),\n            MissingFieldFound = null // Optional, to avoid exceptions on missing fields\n        };\n\n        using (var reader = new StreamReader(filePath))\n        using (var csv = new CsvReader(reader, config))\n        {\n            // Read all records\n            var records = csv.GetRecords<dynamic>();\n\n            // Find the email column\n            int emailColumnIndex = FindEmailColumn(records.FirstOrDefault());\n\n            // Process each record\n            foreach (var record in records)\n            {\n                // Extract email and name (if possible)\n                string email = record[emailColumnIndex].ToString();\n                // Additional logic for extracting names goes here\n            }\n        }\n    }\n\n    private char DetectDelimiter(string line)\n    {\n        // Simple heuristic: count commas and tabs, return the one with the higher count\n        int commas = line.Count(c => c == ',');\n        int tabs = line.Count(c => c == '\t');\n        return commas > tabs ? ',' : '\t';\n    }\n\n    private int FindEmailColumn(dynamic record)\n    {\n        // Iterate through the properties (columns) of the dynamic record\n        for (int i = 0; i < record.Properties.Count; i++)\n        {\n            string propertyValue = record[i].ToString();\n            if (Regex.IsMatch(propertyValue, @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"))\n            {\n                return i; // Found an email, assume this is the email column\n            }\n        }\n        throw new Exception("No email column found.");\n    }\n}