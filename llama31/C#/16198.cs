using System;\nusing System.Security.Cryptography;\nusing System.Xml;\n\npublic class RSAKeyRetriever\n{\n    public static RSAParameters GetPublicKey(string publicKeyPath)\n    {\n        var xmlDoc = new XmlDocument();\n        xmlDoc.Load(publicKeyPath);\n\n        var modulus = Convert.FromBase64String(xmlDoc.SelectSingleNode("/RSAKey/Modulus").InnerText);\n        var exponent = Convert.FromBase64String(xmlDoc.SelectSingleNode("/RSAKey/Exponent").InnerText);\n\n        return new RSAParameters\n        {\n            Modulus = modulus,\n            Exponent = exponent\n        };\n    }\n\n    public static RSAParameters GetPrivateKey(string privateKeyPath)\n    {\n        var xmlDoc = new XmlDocument();\n        xmlDoc.Load(privateKeyPath);\n\n        var modulus = Convert.FromBase64String(xmlDoc.SelectSingleNode("/RSAKey/Modulus").InnerText);\n        var exponent = Convert.FromBase64String(xmlDoc.SelectSingleNode("/RSAKey/Exponent").InnerText);\n        var d = Convert.FromBase64String(xmlDoc.SelectSingleNode("/RSAKey/D").InnerText);\n        var p = Convert.FromBase64String(xmlDoc.SelectSingleNode("/RSAKey/P").InnerText);\n        var q = Convert.FromBase64String(xmlDoc.SelectSingleNode("/RSAKey/Q").InnerText);\n        var dp = Convert.FromBase64String(xmlDoc.SelectSingleNode("/RSAKey/DP").InnerText);\n        var dq = Convert.FromBase64String(xmlDoc.SelectSingleNode("/RSAKey/DQ").InnerText);\n        var inverseQ = Convert.FromBase64String(xmlDoc.SelectSingleNode("/RSAKey/InverseQ").InnerText);\n\n        return new RSAParameters\n        {\n            Modulus = modulus,\n            Exponent = exponent,\n            D = d,\n            P = p,\n            Q = q,\n            DP = dp,\n            DQ = dq,\n            InverseQ = inverseQ\n        };\n    }\n}