// Assuming you have multiple repositories like this:\npublic class PropertyTypeRepository : IPropertyTypeRepository { ... }\npublic class AddressRepository : IAddressRepository { ... }\npublic class OpeningTimeRepository : IOpeningTimeRepository { ... }\n\n// Create a factory method that resolves the dependencies:\npublic class SearchControllerFactory : IWindsorInstaller\n{\n    public void Install(IWindsorContainer container, IConfigurationStore store)\n    {\n        container.Register(Component.For<ISearchController>()\n            .ImplementedBy<SearchController>()\n            .LifestyleTransient()\n            .DependsOn(Dependency.OnComponent<IPropertyTypeRepository>(),\n                        Dependency.OnComponent<IAddressRepository>(),\n                        Dependency.OnComponent<IOpeningTimeRepository>()));\n    }\n}\n\n// Your SearchController constructor would then look like this:\npublic class SearchController : Controller\n{\n    private readonly IPropertyTypeRepository _propertyTypeRepository;\n    private readonly IAddressRepository _addressRepository;\n    private readonly IOpeningTimeRepository _openingTimeRepository;\n\n    public SearchController(IPropertyTypeRepository propertyTypeRepository,\n                            IAddressRepository addressRepository,\n                            IOpeningTimeRepository openingTimeRepository)\n    {\n        _propertyTypeRepository = propertyTypeRepository;\n        _addressRepository = addressRepository;\n        _openingTimeRepository = openingTimeRepository;\n    }\n}