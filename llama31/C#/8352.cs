using System.Runtime.InteropServices;\n\npublic class PresenceDetector\n{\n    [DllImport("user32.dll")]\n    static extern IntPtr SetWindowsHookEx(int idHook, HookProc callback, IntPtr hInstance, uint threadId);\n\n    [DllImport("user32.dll")]\n    static extern bool UnhookWindowsHookEx(IntPtr hInstance);\n\n    public delegate int HookProc(int nCode, IntPtr wParam, IntPtr lParam);\n\n    public static bool IsUserPresent(int thresholdMinutes)\n    {\n        // Install mouse and keyboard hooks\n        IntPtr mouseHook = SetWindowsHookEx(14, MouseHookProc, IntPtr.Zero, 0);\n        IntPtr keyboardHook = SetWindowsHookEx(13, KeyboardHookProc, IntPtr.Zero, 0);\n\n        // Monitor activity\n        bool activityDetected = false;\n        DateTime startTime = DateTime.Now;\n        while (DateTime.Now - startTime < TimeSpan.FromMinutes(thresholdMinutes))\n        {\n            if (activityDetected)\n            {\n                break;\n            }\n            System.Threading.Thread.Sleep(1000);\n        }\n\n        // Uninstall hooks\n        UnhookWindowsHookEx(mouseHook);\n        UnhookWindowsHookEx(keyboardHook);\n\n        return activityDetected;\n    }\n\n    private static int MouseHookProc(int nCode, IntPtr wParam, IntPtr lParam)\n    {\n        activityDetected = true;\n        return 0;\n    }\n\n    private static int KeyboardHookProc(int nCode, IntPtr wParam, IntPtr lParam)\n    {\n        activityDetected = true;\n        return 0;\n    }\n}