using System;\nusing System.Collections.Generic;\n\npublic class TrieNode\n{\n    public Dictionary<string, TrieNode> Children { get; set; }\n    public bool IsValid { get; set; }\n}\n\npublic class Trie\n{\n    private TrieNode root;\n\n    public Trie()\n    {\n        root = new TrieNode();\n    }\n\n    public void AddInstance(string c1, string c2, string c3, string c4)\n    {\n        var node = root;\n        node.Children[c1] = node.Children.ContainsKey(c1) ? node.Children[c1] : new TrieNode();\n        node = node.Children[c1];\n        node.Children[c2] = node.Children.ContainsKey(c2) ? node.Children[c2] : new TrieNode();\n        node = node.Children[c2];\n        node.Children[c3] = node.Children.ContainsKey(c3) ? node.Children[c3] : new TrieNode();\n        node = node.Children[c3];\n        node.Children[c4] = node.Children.ContainsKey(c4) ? node.Children[c4] : new TrieNode();\n        node.Children[c4].IsValid = true;\n    }\n\n    public bool IsValidCombination(string c1, string c2, string c3, string c4)\n    {\n        var node = root;\n        if (!node.Children.ContainsKey(c1)) return false;\n        node = node.Children[c1];\n        if (!node.Children.ContainsKey(c2)) return false;\n        node = node.Children[c2];\n        if (!node.Children.ContainsKey(c3)) return false;\n        node = node.Children[c3];\n        if (!node.Children.ContainsKey(c4)) return false;\n        return node.Children[c4].IsValid;\n    }\n}