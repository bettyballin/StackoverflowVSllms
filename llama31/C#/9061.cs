private readonly SemaphoreSlim _semaphore = new SemaphoreSlim(1, 1);\nprivate readonly ConcurrentQueue<Task> _taskQueue = new ConcurrentQueue<Task>();\n\nprivate async void InsertBasicVaraibles(object param)\n{\n    var task = new Task(() =>\n    {\n        try\n        {\n            // Insert into DB\n        }\n        catch (Exception ex)\n        {\n            // Handle\n        }\n    });\n\n    _taskQueue.Enqueue(task);\n\n    if (_semaphore.CurrentCount > 0)\n    {\n        await ExecuteNextTask();\n    }\n}\n\nprivate async Task ExecuteNextTask()\n{\n    await _semaphore.WaitAsync();\n\n    if (_taskQueue.TryDequeue(out var task))\n    {\n        await task;\n    }\n\n    _semaphore.Release();\n\n    if (_taskQueue.Count > 0)\n    {\n        await ExecuteNextTask();\n    }\n}