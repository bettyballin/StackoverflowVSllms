using Moq;\nusing System.Management;\n\npublic class LogicalDiskRetriever\n{\n    private readonly ManagementScope _scope;\n\n    public LogicalDiskRetriever(ManagementScope scope)\n    {\n        _scope = scope;\n    }\n\n    public ManagementObjectCollection GetLogicalDisks(string serverName)\n    {\n        var query = "SELECT * FROM Win32_LogicalDisk";\n        var searcher = new ManagementObjectSearcher(_scope, new ObjectQuery(query));\n        return searcher.Get();\n    }\n}\n\n[TestClass]\npublic class LogicalDiskRetrieverTests\n{\n    [TestMethod]\n    public void GetLogicalDisks_ReturnsDisks()\n    {\n        // Create a mock scope\n        var mockScope = new Mock<ManagementScope>();\n\n        // Create a mock searcher\n        var mockSearcher = new Mock<ManagementObjectSearcher>();\n        mockSearcher.Setup(s => s.Get()).Returns(new ManagementObjectCollection());\n\n        // Create a mock object\n        var mockObject = new Mock<ManagementObject>();\n        mockObject.Setup(o => o["DeviceID"]).Returns("C:");\n\n        // Add the mock object to the collection\n        var collection = new ManagementObjectCollection();\n        collection.Add(mockObject.Object);\n\n        // Set up the mock searcher to return the collection\n        mockSearcher.Setup(s => s.Get()).Returns(collection);\n\n        // Create the retriever\n        var retriever = new LogicalDiskRetriever(mockScope.Object);\n\n        // Call the method\n        var disks = retriever.GetLogicalDisks("serverName");\n\n        // Assert\n        Assert.IsNotNull(disks);\n        Assert.AreEqual(1, disks.Count);\n        Assert.AreEqual("C:", disks[0]["DeviceID"]);\n    }\n}