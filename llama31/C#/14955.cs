using Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.CSharp;\nusing Microsoft.CodeAnalysis.Diagnostics;\n\nnamespace CustomAnalyzer\n{\n    [DiagnosticAnalyzer(LanguageNames.CSharp)]\n    public class DoEventsAnalyzer : DiagnosticAnalyzer\n    {\n        private static readonly DiagnosticDescriptor Rule = new DiagnosticDescriptor(\n            id: "DoEvents",\n            title: "Avoid using Application.DoEvents()",\n            messageFormat: "Application.DoEvents() can cause re-entrancy issues and should be avoided.",\n            category: "Performance",\n            defaultSeverity: DiagnosticSeverity.Error,\n            isEnabledByDefault: true);\n\n        public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics { get { return ImmutableArray.Create(Rule); } }\n\n        public override void Initialize(AnalysisContext context)\n        {\n            context.RegisterSyntaxNodeAction(AnalyzeInvocation, SyntaxKind.InvocationExpression);\n        }\n\n        private void AnalyzeInvocation(SyntaxNodeAnalysisContext context)\n        {\n            var invocation = context.Node as InvocationExpressionSyntax;\n            if (invocation?.Expression is MemberAccessExpressionSyntax memberAccess)\n            {\n                if (memberAccess.Name.Identifier.Text == "DoEvents" &&\n                    memberAccess.Expression is IdentifierNameSyntax identifier &&\n                    identifier.Identifier.Text == "Application")\n                {\n                    context.ReportDiagnostic(Diagnostic.Create(Rule, invocation.GetLocation()));\n                }\n            }\n        }\n    }\n}