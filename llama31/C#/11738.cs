using System;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Runtime.InteropServices;\n\npublic class FileLocker\n{\n    [DllImport("kernel32.dll")]\n    private static extern uint GetFileInformationByHandle(IntPtr hFile, int dwFileInformationClass, out uint lpFileInformation, uint dwBufferSize);\n\n    [DllImport("kernel32.dll")]\n    private static extern IntPtr OpenProcess(int dwDesiredAccess, bool bInheritHandle, int dwProcessId);\n\n    [DllImport("kernel32.dll")]\n    private static extern bool CloseHandle(IntPtr hObject);\n\n    public static int GetLockingProcessId(string filePath)\n    {\n        int pid = -1;\n\n        if (File.Exists(filePath))\n        {\n            using (FileStream stream = File.OpenRead(filePath))\n            {\n                IntPtr handle = stream.SafeFileHandle.DangerousGetHandle();\n\n                uint fileInformationClass = 24; // FileNameInfo\n                uint lpFileInformation = 0;\n                uint dwBufferSize = 1024;\n\n                GetFileInformationByHandle(handle, (int)fileInformationClass, out lpFileInformation, dwBufferSize);\n\n                IntPtr processHandle = OpenProcess(0x0400, false, (int)lpFileInformation);\n                pid = (int)Process.GetCurrentProcess().Id;\n\n                CloseHandle(processHandle);\n            }\n        }\n\n        return pid;\n    }\n}