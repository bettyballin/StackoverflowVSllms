public interface IMathOperations<T>\n{\n    T Add(T a, T b);\n    T Subtract(T a, T b);\n}\n\npublic class IntMathOperations : IMathOperations<int>\n{\n    public int Add(int a, int b) => a + b;\n    public int Subtract(int a, int b) => a - b;\n}\n\npublic class DoubleMathOperations : IMathOperations<double>\n{\n    public double Add(double a, double b) => a + b;\n    public double Subtract(double a, double b) => a - b;\n}\n\npublic class MathCollection<T, TOperations> where TOperations : IMathOperations<T>\n{\n    private readonly TOperations operations;\n\n    public MathCollection(TOperations operations)\n    {\n        this.operations = operations;\n    }\n\n    public T Add(T a, T b) => operations.Add(a, b);\n    public T Subtract(T a, T b) => operations.Subtract(a, b);\n}