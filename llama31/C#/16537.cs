using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class AesEncryption\n{\n    private static readonly byte[] Salt = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 };\n\n    public static byte[] Encrypt(byte[] data, string password)\n    {\n        using (var aes = Aes.Create())\n        {\n            aes.KeySize = 256; // Match the key size used in your JavaScript library\n            aes.BlockSize = 128; // Match the block size used in your JavaScript library\n            aes.Mode = CipherMode.CBC; // Match the mode used in your JavaScript library\n            aes.Padding = PaddingMode.PKCS7; // Match the padding used in your JavaScript library\n\n            var key = GetKey(password, Salt);\n            aes.Key = key;\n\n            using (var ms = new MemoryStream())\n            {\n                using (var cs = new CryptoStream(ms, aes.CreateEncryptor(), CryptoStreamMode.Write))\n                {\n                    cs.Write(data, 0, data.Length);\n                }\n\n                return ms.ToArray();\n            }\n        }\n    }\n\n    public static byte[] Decrypt(byte[] data, string password)\n    {\n        using (var aes = Aes.Create())\n        {\n            aes.KeySize = 256; // Match the key size used in your JavaScript library\n            aes.BlockSize = 128; // Match the block size used in your JavaScript library\n            aes.Mode = CipherMode.CBC; // Match the mode used in your JavaScript library\n            aes.Padding = PaddingMode.PKCS7; // Match the padding used in your JavaScript library\n\n            var key = GetKey(password, Salt);\n            aes.Key = key;\n\n            using (var ms = new MemoryStream(data))\n            {\n                using (var cs = new CryptoStream(ms, aes.CreateDecryptor(), CryptoStreamMode.Read))\n                {\n                    var decrypted = new byte[data.Length];\n                    cs.Read(decrypted, 0, decrypted.Length);\n\n                    return decrypted;\n                }\n            }\n        }\n    }\n\n    private static byte[] GetKey(string password, byte[] salt)\n    {\n        using (var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 1000))\n        {\n            return pbkdf2.GetBytes(32); // 32 bytes for a 256-bit key\n        }\n    }\n}