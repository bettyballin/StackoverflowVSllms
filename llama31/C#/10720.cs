public class DefaultingMap<TKey, TValue>\n{\n    private class Node\n    {\n        public TValue Value { get; set; }\n        public Dictionary<TKey, Node> Children { get; set; }\n        public int Priority { get; set; }\n\n        public Node()\n        {\n            Children = new Dictionary<TKey, Node>();\n        }\n    }\n\n    private Node root;\n    private int[] keyPriorities;\n\n    public DefaultingMap(int[] keyPriorities)\n    {\n        this.keyPriorities = keyPriorities;\n        root = new Node();\n    }\n\n    public void Add(TKey[] keys, TValue value)\n    {\n        Node current = root;\n        for (int i = 0; i < keys.Length; i++)\n        {\n            if (!current.Children.TryGetValue(keys[i], out Node child))\n            {\n                child = new Node { Priority = keyPriorities[i] };\n                current.Children.Add(keys[i], child);\n            }\n            current = child;\n        }\n        current.Value = value;\n    }\n\n    public TValue Get(TKey[] keys)\n    {\n        Node current = root;\n        TValue bestValue = default(TValue);\n        int bestPriority = 0;\n\n        for (int i = 0; i < keys.Length; i++)\n        {\n            if (current.Children.TryGetValue(keys[i], out Node child))\n            {\n                current = child;\n                if (child.Value != null && child.Priority > bestPriority)\n                {\n                    bestValue = child.Value;\n                    bestPriority = child.Priority;\n                }\n            }\n            else\n            {\n                break;\n            }\n        }\n        return bestValue;\n    }\n}