using System;\nusing System.IO;\nusing System.Security.Cryptography;\n\npublic class CreditCardEncryptor\n{\n    private static readonly byte[] salt = new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 };\n\n    public static string EncryptCreditCard(string creditCardNumber)\n    {\n        using (Aes aes = Aes.Create())\n        {\n            aes.Key = GetKey();\n            aes.IV = GetIV();\n\n            ICryptoTransform encryptor = aes.CreateEncryptor(aes.Key, aes.IV);\n\n            byte[] inputBuffer = Encoding.UTF8.GetBytes(creditCardNumber);\n            byte[] outputBuffer = encryptor.TransformFinalBlock(inputBuffer, 0, inputBuffer.Length);\n\n            return Convert.ToBase64String(outputBuffer);\n        }\n    }\n\n    private static byte[] GetKey()\n    {\n        // Generate a key based on a password or a secure random number generator\n        // For demonstration purposes, we'll use a hardcoded password\n        string password = "my_secret_password";\n        byte[] key = new byte[32];\n        using (Rfc2898DeriveBytes deriveBytes = new Rfc2898DeriveBytes(password, salt, 1000))\n        {\n            deriveBytes.GetBytes(key);\n        }\n        return key;\n    }\n\n    private static byte[] GetIV()\n    {\n        // Generate a random initialization vector (IV)\n        byte[] iv = new byte[16];\n        using (RandomNumberGenerator rng = RandomNumberGenerator.Create())\n        {\n            rng.GetBytes(iv);\n        }\n        return iv;\n    }\n}