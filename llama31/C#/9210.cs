using System.ServiceModel;\nusing System.ServiceModel.Channels;\n\n// Create a WCF client instance\npublic class ChatServiceClient : DuplexClientBase<IChatService>\n{\n    public ChatServiceClient(InstanceContext instanceContext, string endpointAddress)\n        : base(instanceContext, endpointAddress)\n    {\n    }\n}\n\n// In your ASP.NET application\npublic class ChatController : Controller\n{\n    private readonly ChatServiceClient _client;\n\n    public ChatController()\n    {\n        // Create a new client instance per request\n        _client = new ChatServiceClient(new InstanceContext(this), "net.tcp://localhost:8080/ChatService");\n    }\n\n    public ActionResult SendMessage(string message)\n    {\n        // Use the client instance to send a message\n        _client.Send(message);\n        return Json(true);\n    }\n}\n\n// To keep the connection open until the application unloads\npublic class ChatServiceHost : ServiceHost\n{\n    public ChatServiceHost(Type serviceType, params Uri[] baseAddresses)\n        : base(serviceType, baseAddresses)\n    {\n    }\n\n    protected override void OnOpen(TimeSpan timeout)\n    {\n        base.OnOpen(timeout);\n        // Keep the connection open until the application unloads\n        this.Description.Behaviors.Add(new ServiceThrottlingBehavior\n        {\n            MaxConcurrentCalls = 1,\n            MaxConcurrentSessions = 1,\n            MaxConcurrentInstances = 1\n        });\n    }\n}