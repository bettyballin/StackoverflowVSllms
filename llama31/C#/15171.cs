public class RestrictedProxy : Test\n{\n    private readonly Test _target;\n\n    public RestrictedProxy(Test target)\n    {\n        _target = target;\n    }\n\n    public override void DoSomething()\n    {\n        var restrictedAttribute = (RestrictedAttribute)typeof(Test)\n            .GetMethod("DoSomething")\n            .GetCustomAttributes(typeof(RestrictedAttribute), true)\n            .FirstOrDefault();\n\n        if (restrictedAttribute != null)\n        {\n            // validate if member is in role, else throw exception\n            if (!IsUserInRole(restrictedAttribute.RequiredRole))\n            {\n                throw new MemberNotInRoleException(restrictedAttribute.RequiredRole);\n            }\n        }\n\n        _target.DoSomething();\n    }\n\n    private bool IsUserInRole(string requiredRole)\n    {\n        // implement your role validation logic here\n        return true; // or false\n    }\n}