public decimal[][] Solve(decimal goal, decimal[] elements)\n{\n    Array.Sort(elements);\n    var dp = new bool[elements.Length + 1, (int)goal + 1];\n    dp[0, 0] = true;\n\n    for (int i = 1; i <= elements.Length; i++)\n    {\n        for (int j = 0; j <= (int)goal; j++)\n        {\n            if (j < elements[i - 1])\n            {\n                dp[i, j] = dp[i - 1, j];\n            }\n            else\n            {\n                dp[i, j] = dp[i - 1, j] || dp[i - 1, j - (int)elements[i - 1]];\n            }\n        }\n    }\n\n    var result = new List<decimal[]>();\n    Backtrack(dp, elements, goal, elements.Length, new List<decimal>(), result);\n    return result.ToArray();\n}\n\nprivate void Backtrack(bool[,] dp, decimal[] elements, decimal goal, int i, List<decimal> current, List<decimal[]> result)\n{\n    if (goal == 0)\n    {\n        result.Add(current.ToArray());\n    }\n    else if (i > 0 && goal > 0)\n    {\n        if (dp[i, (int)goal])\n        {\n            Backtrack(dp, elements, goal, i - 1, current, result);\n        }\n        if (goal >= elements[i - 1] && dp[i - 1, (int)(goal - elements[i - 1])])\n        {\n            current.Add(elements[i - 1]);\n            Backtrack(dp, elements, goal - elements[i - 1], i - 1, current, result);\n            current.RemoveAt(current.Count - 1);\n        }\n    }\n}