using NHibernate.Type;\nusing NHibernate.UserTypes;\n\npublic class Char6Type : IUserType\n{\n    public object Assemble(object cached, object owner)\n    {\n        return cached;\n    }\n\n    public object DeepCopy(object value)\n    {\n        return value;\n    }\n\n    public object Disassemble(object value)\n    {\n        return value;\n    }\n\n    public int GetHashCode(object x)\n    {\n        return x.GetHashCode();\n    }\n\n    public bool IsMutable\n    {\n        get { return false; }\n    }\n\n    public object NullSafeGet(IDataReader rs, string[] names, object owner)\n    {\n        string value = rs.GetString(0);\n        if (string.IsNullOrEmpty(value))\n            return null;\n        return value.Trim();\n    }\n\n    public void NullSafeSet(IDbCommand cmd, object value, int index)\n    {\n        if (value == null)\n            cmd.Parameters[index].Value = DBNull.Value;\n        else\n            cmd.Parameters[index].Value = ((string)value).PadRight(6);\n    }\n\n    public object Replace(object original, object target, object owner)\n    {\n        return original;\n    }\n\n    public Type ReturnedType\n    {\n        get { return typeof(string); }\n    }\n\n    public SqlType[] SqlTypes\n    {\n        get { return new[] { NHibernateUtil.String.SqlType }; }\n    }\n}