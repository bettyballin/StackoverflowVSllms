public string GuidToBase64(Guid guid)\n{\n    return Convert.ToBase64String(guid.ToByteArray(), Base64FormattingOptions.UrlTokenEncode);\n}\n\npublic Guid Base64ToGuid(string base64)\n{\n    if (base64.Length != 22)\n    {\n        throw new ArgumentException("Invalid base64-encoded GUID length", nameof(base64));\n    }\n\n    if (!IsValidBase64String(base64))\n    {\n        throw new ArgumentException("Invalid base64-encoded GUID", nameof(base64));\n    }\n\n    try\n    {\n        var bytes = Convert.FromBase64String(base64 + "==");\n        return new Guid(bytes);\n    }\n    catch (Exception ex)\n    {\n        throw new Exception("Bad Base64 conversion to GUID", ex);\n    }\n}\n\nprivate bool IsValidBase64String(string s)\n{\n    return s.All(c => Char.IsLetterOrDigit(c) || c == '-' || c == '_');\n}