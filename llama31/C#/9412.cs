using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Xml;\nusing System.Xml.Linq;\n\npublic class XmlEncryption\n{\n    private static readonly byte[] salt = new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 };\n\n    public static void WriteEncryptedXml(string xmlFile, XDocument xmlDocument, string password)\n    {\n        using (Aes aes = Aes.Create())\n        {\n            aes.Key = GetKey(password, salt);\n            aes.IV = GetIV(password, salt);\n\n            using (FileStream fs = new FileStream(xmlFile, FileMode.Create))\n            {\n                using (CryptoStream cs = new CryptoStream(fs, aes.CreateEncryptor(), CryptoStreamMode.Write))\n                {\n                    xmlDocument.Save(cs);\n                }\n            }\n        }\n    }\n\n    public static XDocument ReadEncryptedXml(string xmlFile, string password)\n    {\n        using (Aes aes = Aes.Create())\n        {\n            aes.Key = GetKey(password, salt);\n            aes.IV = GetIV(password, salt);\n\n            using (FileStream fs = new FileStream(xmlFile, FileMode.Open))\n            {\n                using (CryptoStream cs = new CryptoStream(fs, aes.CreateDecryptor(), CryptoStreamMode.Read))\n                {\n                    return XDocument.Load(cs);\n                }\n            }\n        }\n    }\n\n    private static byte[] GetKey(string password, byte[] salt)\n    {\n        using (Rfc2898DeriveBytes deriveBytes = new Rfc2898DeriveBytes(password, salt, 1000))\n        {\n            return deriveBytes.GetBytes(32);\n        }\n    }\n\n    private static byte[] GetIV(string password, byte[] salt)\n    {\n        using (Rfc2898DeriveBytes deriveBytes = new Rfc2898DeriveBytes(password, salt, 1000))\n        {\n            return deriveBytes.GetBytes(16);\n        }\n    }\n}