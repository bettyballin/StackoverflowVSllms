private void CaptureCanvas(object sender, MouseButtonEventArgs e)\n{\n    // Get the canvas and the rectangle bounding the capture area\n    Canvas canvas = (Canvas)sender;\n    Rect rect = GetCaptureRect(e.GetPosition(canvas));\n\n    // Create a RenderTargetBitmap with the desired dimensions\n    RenderTargetBitmap rtb = new RenderTargetBitmap((int)rect.Width, (int)rect.Height, 96, 96, PixelFormats.Default);\n\n    // Render the canvas to the RenderTargetBitmap\n    rtb.Render(canvas);\n\n    // Crop the RenderTargetBitmap to the capture area\n    CroppedBitmap cropped = new CroppedBitmap(rtb, new Int32Rect((int)rect.X, (int)rect.Y, (int)rect.Width, (int)rect.Height));\n\n    // Save the cropped image to a file\n    using (var fileStream = new FileStream("capture.bmp", FileMode.Create))\n    {\n        BitmapEncoder encoder = new BmpBitmapEncoder();\n        encoder.Frames.Add(BitmapFrame.Create(cropped));\n        encoder.Save(fileStream);\n    }\n}\n\nprivate Rect GetCaptureRect(Point position)\n{\n    // Implement your logic to determine the capture rectangle\n    // For example, you could use the mouse position to determine the top-left corner\n    // and then add a fixed width and height to get the bottom-right corner\n    Rect rect = new Rect(position.X, position.Y, 200, 200);\n    return rect;\n}