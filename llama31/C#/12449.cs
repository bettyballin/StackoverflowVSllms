// Generate token on MVC website after OpenID authentication\nstring token = GenerateToken(openIdClaimedIdentifier);\n\n// Include token in SOAP header\nusing (var client = new MyWebServiceClient())\n{\n    client.ClientCredentials.UserName.UserName = openIdClaimedIdentifier;\n    client.ClientCredentials.UserName.Password = token;\n    // Make service call\n}\n\n// Verify token on WebService side\nstring token = GetTokenFromSOAPHeader();\nif (ValidateToken(token, openIdClaimedIdentifier))\n{\n    // Token is valid, proceed with service call\n}\n\n// Example token generation and validation methods\nstring GenerateToken(string openIdClaimedIdentifier)\n{\n    // Use a CSPRNG to generate a unique token\n    byte[] tokenBytes = new byte[32];\n    using (var rng = RandomNumberGenerator.Create())\n    {\n        rng.GetBytes(tokenBytes);\n    }\n    return Convert.ToBase64String(tokenBytes);\n}\n\nbool ValidateToken(string token, string openIdClaimedIdentifier)\n{\n    // Check token expiration, validity, and association with OpenID Claimed Identifier\n    // Return true if token is valid, false otherwise\n}