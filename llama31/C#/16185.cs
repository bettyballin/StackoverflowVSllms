using Castle.DynamicProxy;\n\npublic class VehicleProxy : IInterceptor\n{\n    private IVehicle _vehicle;\n    private int _callCount;\n\n    public VehicleProxy(IVehicle vehicle)\n    {\n        _vehicle = vehicle;\n    }\n\n    public void Intercept(IInvocation invocation)\n    {\n        _callCount++;\n        invocation.Proceed();\n    }\n\n    public int GetCallCount()\n    {\n        return _callCount;\n    }\n}\n\n// usage\nCar car = new Car();\nVehicleProxy proxy = new VehicleProxy(car);\nIVehicle vehicle = (IVehicle)ProxyGenerator.CreateClassProxyWithTarget<IVehicle>(car, proxy);\n\n// call methods on vehicle\nvehicle.Method1();\nvehicle.Method2();\n\nConsole.WriteLine(proxy.GetCallCount()); // outputs 2