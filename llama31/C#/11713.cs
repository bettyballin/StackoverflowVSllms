using System;\nusing System.Runtime.InteropServices;\n\npublic class ShellIconOverlay\n{\n    [DllImport("shell32.dll")]\n    static extern void SHChangeNotify(uint wEventId, uint uFlags, IntPtr dwItem1, IntPtr dwItem2);\n\n    [DllImport("shell32.dll")]\n    static extern int SHSetFileInfo(string pszPath, uint dwFileAttributes, ref SHFILEINFO psfi, uint cbFileInfo);\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct SHFILEINFO\n    {\n        public IntPtr hIcon;\n        public int iIcon;\n        public uint dwAttributes;\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]\n        public string szDisplayName;\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 80)]\n        public string szTypeName;\n    }\n\n    public const uint FILE_ATTRIBUTE_NORMAL = 0x80;\n    public const uint SHCNE_ASSOCCHANGED = 0x08000000;\n    public const uint SHCNF_IDLIST = 0x00000001;\n\n    public static void SetIconOverlay(string path, IntPtr iconHandle)\n    {\n        SHFILEINFO shfi = new SHFILEINFO();\n        shfi.hIcon = iconHandle;\n        shfi.iIcon = 0;\n        shfi.dwAttributes = FILE_ATTRIBUTE_NORMAL;\n\n        SHSetFileInfo(path, FILE_ATTRIBUTE_NORMAL, ref shfi, (uint)Marshal.SizeOf(shfi));\n\n        SHChangeNotify(SHCNE_ASSOCCHANGED, SHCNF_IDLIST, IntPtr.Zero, IntPtr.Zero);\n    }\n}