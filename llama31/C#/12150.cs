public class RopeNode\n{\n    public RopeNode Parent { get; set; }\n    public RopeNode Left { get; set; }\n    public RopeNode Right { get; set; }\n    public string Text { get; set; }\n    public int Length { get; set; }\n\n    public RopeNode(string text)\n    {\n        Text = text;\n        Length = text.Length;\n    }\n}\n\npublic class Rope\n{\n    private RopeNode root;\n\n    public Rope(string text)\n    {\n        root = new RopeNode(text);\n    }\n\n    public void Insert(int offset, string text)\n    {\n        // Find the node that contains the offset\n        RopeNode node = FindNode(offset);\n\n        // Split the node into two segments\n        RopeNode left = new RopeNode(node.Text.Substring(0, offset));\n        RopeNode right = new RopeNode(node.Text.Substring(offset));\n\n        // Insert the new text between the two segments\n        RopeNode newNode = new RopeNode(text);\n        left.Right = newNode;\n        newNode.Left = left;\n        newNode.Right = right;\n        right.Left = newNode;\n\n        // Update the tree structure\n        node.Parent.Left = left;\n        left.Parent = node.Parent;\n        right.Parent = newNode;\n    }\n\n    public void Delete(int offset, int length)\n    {\n        // Find the node that contains the offset\n        RopeNode node = FindNode(offset);\n\n        // Remove the text segment\n        node.Text = node.Text.Substring(0, offset) + node.Text.Substring(offset + length);\n\n        // Update the tree structure\n        node.Length -= length;\n        node.Right.Length -= length;\n    }\n\n    private RopeNode FindNode(int offset)\n    {\n        // Traverse the tree to find the node that contains the offset\n        RopeNode node = root;\n        while (node != null)\n        {\n            if (offset < node.Length)\n            {\n                return node;\n            }\n            node = node.Right;\n        }\n        return null;\n    }\n}