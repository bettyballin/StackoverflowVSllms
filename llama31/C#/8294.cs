// Define a common interface for data access\npublic interface IDataRepository\n{\n    IEnumerable<MyData> GetAllData();\n    MyData GetDataById(int id);\n    void CreateData(MyData data);\n    void UpdateData(MyData data);\n    void DeleteData(int id);\n}\n\n// Implement the interface for SQL Server using Entity Framework\npublic class SqlServerDataRepository : IDataRepository\n{\n    private readonly DbContext _context;\n\n    public SqlServerDataRepository(DbContext context)\n    {\n        _context = context;\n    }\n\n    public IEnumerable<MyData> GetAllData()\n    {\n        return _context.MyData.ToList();\n    }\n\n    // Implement other CRUD operations\n}\n\n// Implement the interface for SQL Data Services (e.g., Azure Table Storage)\npublic class SqlDataServicesRepository : IDataRepository\n{\n    private readonly CloudTableClient _tableClient;\n\n    public SqlDataServicesRepository(CloudTableClient tableClient)\n    {\n        _tableClient = tableClient;\n    }\n\n    public IEnumerable<MyData> GetAllData()\n    {\n        return _tableClient.GetTableReference("MyData").ExecuteQuery<MyData>();\n    }\n\n    // Implement other CRUD operations\n}\n\n// Implement the interface for Amazon S3\npublic class AmazonS3Repository : IDataRepository\n{\n    private readonly AmazonS3Client _s3Client;\n\n    public AmazonS3Repository(AmazonS3Client s3Client)\n    {\n        _s3Client = s3Client;\n    }\n\n    public IEnumerable<MyData> GetAllData()\n    {\n        return _s3Client.ListObjects("my-bucket").Select(o => o.Metadata["MyData"]);\n    }\n\n    // Implement other CRUD operations\n}\n\n// Use dependency injection to switch between implementations\npublic class MyService\n{\n    private readonly IDataRepository _dataRepository;\n\n    public MyService(IDataRepository dataRepository)\n    {\n        _dataRepository = dataRepository;\n    }\n\n    public IEnumerable<MyData> GetData()\n    {\n        return _dataRepository.GetAllData();\n    }\n}\n\n// Configure the dependency injection framework to use the desired implementation\ncontainer.RegisterType<IDataRepository, SqlServerDataRepository>(); // or SqlDataServicesRepository or AmazonS3Repository