using System;\nusing System.Runtime.InteropServices;\n\nclass InputSender\n{\n    [DllImport("user32.dll")]\n    static extern uint SendInput(uint cInputs, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 0)] INPUT[] pInputs, int cbSize);\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct INPUT\n    {\n        public uint type;\n        public MOUSEINPUT mi;\n        public KEYBDINPUT ki;\n        public HARDWAREINPUT hi;\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct MOUSEINPUT\n    {\n        public int dx;\n        public int dy;\n        public int mouseData;\n        public int dwFlags;\n        public uint time;\n        public IntPtr dwExtraInfo;\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct KEYBDINPUT\n    {\n        public ushort wVk;\n        public ushort wScan;\n        public uint dwFlags;\n        public int time;\n        public IntPtr dwExtraInfo;\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct HARDWAREINPUT\n    {\n        public int uMsg;\n        public short wParamL;\n        public short wParamH;\n    }\n\n    public void SendKeyDown(ushort keyCode)\n    {\n        INPUT[] inputs = new INPUT[] {\n            new INPUT {\n                type = 1, // INPUT_KEYBOARD\n                ki = new KEYBDINPUT {\n                    wVk = keyCode,\n                    wScan = 0,\n                    dwFlags = 0,\n                    time = 0,\n                    dwExtraInfo = IntPtr.Zero\n                }\n            }\n        };\n        SendInput(1, inputs, Marshal.SizeOf(typeof(INPUT)));\n    }\n\n    public void SendMouseMove(int x, int y)\n    {\n        INPUT[] inputs = new INPUT[] {\n            new INPUT {\n                type = 0, // INPUT_MOUSE\n                mi = new MOUSEINPUT {\n                    dx = x,\n                    dy = y,\n                    mouseData = 0,\n                    dwFlags = 1, // MOUSEEVENTF_MOVE\n                    time = 0,\n                    dwExtraInfo = IntPtr.Zero\n                }\n            }\n        };\n        SendInput(1, inputs, Marshal.SizeOf(typeof(INPUT)));\n    }\n}