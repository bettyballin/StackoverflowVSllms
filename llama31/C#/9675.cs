using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\n\npublic class AutocompleteListManager\n{\n    private const string FILE_NAME = "autocomplete_list.json";\n    private const string ENCRYPTION_KEY = "your_secret_key_here"; // Replace with a secure key\n\n    public void SaveAutocompleteList(List<string> list)\n    {\n        var json = JsonSerializer.Serialize(list);\n        var encrypted = Encrypt(json, ENCRYPTION_KEY);\n        File.WriteAllBytes(GetFilePath(), encrypted);\n    }\n\n    public List<string> LoadAutocompleteList()\n    {\n        var filePath = GetFilePath();\n        if (File.Exists(filePath))\n        {\n            var encrypted = File.ReadAllBytes(filePath);\n            var json = Decrypt(encrypted, ENCRYPTION_KEY);\n            return JsonSerializer.Deserialize<List<string>>(json);\n        }\n        return new List<string>();\n    }\n\n    private string GetFilePath()\n    {\n        var appDataDir = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);\n        var yourAppDir = Path.Combine(appDataDir, "YourApp");\n        return Path.Combine(yourAppDir, FILE_NAME);\n    }\n\n    private byte[] Encrypt(string plainText, string key)\n    {\n        using var aes = Aes.Create();\n        aes.Key = Encoding.UTF8.GetBytes(key);\n        aes.GenerateIV();\n        var encryptor = aes.CreateEncryptor(aes.Key, aes.IV);\n        using var ms = new MemoryStream();\n        using var cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write);\n        using var sw = new StreamWriter(cs);\n        sw.Write(plainText);\n        sw.Flush();\n        cs.FlushFinalBlock();\n        return ms.ToArray();\n    }\n\n    private string Decrypt(byte[] cipherText, string key)\n    {\n        using var aes = Aes.Create();\n        aes.Key = Encoding.UTF8.GetBytes(key);\n        aes.GenerateIV();\n        var decryptor = aes.CreateDecryptor(aes.Key, aes.IV);\n        using var ms = new MemoryStream(cipherText);\n        using var cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read);\n        using var sr = new StreamReader(cs);\n        return sr.ReadToEnd();\n    }\n}