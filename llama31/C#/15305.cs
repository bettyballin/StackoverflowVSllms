using System;\nusing System.Reflection;\nusing System.CodeDom.Compiler;\n\nclass SharpConsole\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine("SharpConsole - Type 'go' to execute commands");\n        string input = "";\n        while (true)\n        {\n            Console.Write("> ");\n            input = Console.ReadLine();\n            if (input.ToLower() == "go")\n            {\n                ExecuteCode(input);\n            }\n            else\n            {\n                Console.WriteLine("Enter 'go' to execute commands");\n            }\n        }\n    }\n\n    static void ExecuteCode(string code)\n    {\n        // Create a new compiler instance\n        var compiler = new CSharpCodeProvider().CreateCompiler();\n\n        // Set up compiler parameters\n        var compilerParams = new CompilerParameters();\n        compilerParams.GenerateInMemory = true;\n        compilerParams.GenerateExecutable = false;\n\n        // Compile the code\n        var results = compiler.CompileAssemblyFromSource(compilerParams, code);\n\n        // Check for compilation errors\n        if (results.Errors.Count > 0)\n        {\n            Console.WriteLine("Compilation errors:");\n            foreach (var error in results.Errors)\n            {\n                Console.WriteLine(error);\n            }\n            return;\n        }\n\n        // Execute the compiled code\n        var assembly = results.CompiledAssembly;\n        var programType = assembly.GetType("Program");\n        var mainMethod = programType.GetMethod("Main");\n\n        try\n        {\n            mainMethod.Invoke(null, null);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine("Execution error: " + ex.Message);\n        }\n    }\n}