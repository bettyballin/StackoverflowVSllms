using System;\nusing System.Security.Cryptography;\nusing System.Text;\nusing Microsoft.Azure.KeyVault;\nusing Microsoft.Azure.KeyVault.Models;\n\npublic class SecureDataStore\n{\n    private readonly KeyVaultClient _keyVaultClient;\n\n    public SecureDataStore(string keyVaultUrl, string clientId, string clientSecret)\n    {\n        _keyVaultClient = new KeyVaultClient(new DefaultAzureCredential());\n    }\n\n    public string EncryptData(string data)\n    {\n        // Retrieve the encryption key from Key Vault\n        var keyBundle = _keyVaultClient.GetSecretAsync("my-encryption-key").Result;\n        var encryptionKey = keyBundle.Value;\n\n        // Encrypt the data using the encryption key\n        using var aes = Aes.Create();\n        aes.Key = Convert.FromBase64String(encryptionKey);\n        aes.GenerateIV();\n        var encryptedData = aes.EncryptCbc(data, aes.IV);\n\n        return Convert.ToBase64String(encryptedData);\n    }\n\n    public string DecryptData(string encryptedData)\n    {\n        // Retrieve the encryption key from Key Vault\n        var keyBundle = _keyVaultClient.GetSecretAsync("my-encryption-key").Result;\n        var encryptionKey = keyBundle.Value;\n\n        // Decrypt the data using the encryption key\n        using var aes = Aes.Create();\n        aes.Key = Convert.FromBase64String(encryptionKey);\n        aes.GenerateIV();\n        var decryptedData = aes.DecryptCbc(encryptedData, aes.IV);\n\n        return Encoding.UTF8.GetString(decryptedData);\n    }\n}