public class DateTimeRangeType : IUserType\n{\n    public object Assemble(object cached, object owner)\n    {\n        return cached;\n    }\n\n    public object DeepCopy(object value)\n    {\n        if (value == null) return null;\n        var dateTimeRange = (DateTimeRange)value;\n        return new DateTimeRange(dateTimeRange.FromTime, dateTimeRange.ToTime);\n    }\n\n    public object Disassemble(object value)\n    {\n        return value;\n    }\n\n    public bool Equals(object x, object y)\n    {\n        if (x == null && y == null) return true;\n        if (x == null || y == null) return false;\n        var xDateTimeRange = (DateTimeRange)x;\n        var yDateTimeRange = (DateTimeRange)y;\n        return xDateTimeRange.FromTime == yDateTimeRange.FromTime && xDateTimeRange.ToTime == yDateTimeRange.ToTime;\n    }\n\n    public int GetHashCode(object x)\n    {\n        return x.GetHashCode();\n    }\n\n    public bool IsMutable\n    {\n        get { return true; }\n    }\n\n    public object NullSafeGet(IDataReader rs, string[] names, object owner)\n    {\n        var dateString = (string)NHibernateUtil.String.NullSafeGet(rs, names[0]);\n        if (string.IsNullOrEmpty(dateString)) return null;\n        var dates = dateString.Split('-');\n        var fromTime = DateTime.ParseExact(dates[0], "yyyy/MM/dd", CultureInfo.InvariantCulture);\n        var toTime = DateTime.ParseExact(dates[1], "yyyy/MM/dd", CultureInfo.InvariantCulture);\n        return new DateTimeRange(fromTime, toTime);\n    }\n\n    public void NullSafeSet(IDbCommand cmd, object value, int index)\n    {\n        var dateTimeRange = (DateTimeRange)value;\n        var dateString = string.Format("{0:yyyy/MM/dd}-{1:yyyy/MM/dd}", dateTimeRange.FromTime, dateTimeRange.ToTime);\n        NHibernateUtil.String.NullSafeSet(cmd, dateString, index);\n    }\n\n    public object Replace(object original, object target, object owner)\n    {\n        return original;\n    }\n\n    public Type ReturnedType\n    {\n        get { return typeof(DateTimeRange); }\n    }\n\n    public SqlType[] SqlTypes\n    {\n        get { return new[] { NHibernateUtil.String.SqlType }; }\n    }\n}