using System;\nusing System.Reflection;\nusing System.Security;\n\npublic class StrongNameValidator\n{\n    public static bool IsValidCallingAssembly()\n    {\n        // Get the calling assembly\n        Assembly callingAssembly = Assembly.GetCallingAssembly();\n\n        // Get the current assembly's strong name\n        StrongName currentStrongName = GetStrongName(Assembly.GetExecutingAssembly());\n\n        // Get the calling assembly's strong name\n        StrongName callingStrongName = GetStrongName(callingAssembly);\n\n        // Compare the strong names\n        return currentStrongName.PublicKey == callingStrongName.PublicKey && currentStrongName.Name == callingStrongName.Name;\n    }\n\n    private static StrongName GetStrongName(Assembly assembly)\n    {\n        if (assembly == null)\n        {\n            throw new ArgumentNullException(nameof(assembly));\n        }\n\n        Evidence evidence = assembly.Evidence;\n\n        StrongName strongName = evidence.GetHostEvidence<StrongName>();\n\n        if (strongName == null)\n        {\n            throw new SecurityException("Assembly does not have a strong name.");\n        }\n\n        return strongName;\n    }\n}\n\n// Example usage:\npublic class YourClass\n{\n    public void YourMethod()\n    {\n        if (!StrongNameValidator.IsValidCallingAssembly())\n        {\n            throw new SecurityException("Access denied. Calling assembly does not have the correct strong name.");\n        }\n\n        // Method implementation here.\n    }\n}