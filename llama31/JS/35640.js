// Get the spans and their positions\nconst spans = document.querySelectorAll('span');\nconst spanPositions = {};\nspans.forEach((span) => {\n  const rect = span.getBoundingClientRect();\n  spanPositions[span.id] = {\n    x: rect.left + window.pageXOffset,\n    y: rect.top + window.pageYOffset,\n  };\n});\n\n// Draw the arrows\nconst svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\nsvg.style.position = 'absolute';\nsvg.style.top = '0';\nsvg.style.left = '0';\nsvg.style.width = '100%';\nsvg.style.height = '100%';\ndocument.body.appendChild(svg);\n\n// Function to draw an arrow from span1 to span2\nfunction drawArrow(span1Id, span2Id) {\n  const span1Pos = spanPositions[span1Id];\n  const span2Pos = spanPositions[span2Id];\n  const x1 = span1Pos.x + (span1Pos.width || 0) / 2;\n  const y1 = span1Pos.y + (span1Pos.height || 0) / 2;\n  const x2 = span2Pos.x + (span2Pos.width || 0) / 2;\n  const y2 = span2Pos.y + (span2Pos.height || 0) / 2;\n  const angle = Math.atan2(y2 - y1, x2 - x1);\n  const arrowLength = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n  const arrowHeadSize = 10;\n  const arrowHeadAngle = Math.PI / 6;\n  const arrowPath = `\n    M ${x1} ${y1}\n    L ${x2} ${y2}\n    L ${x2 + arrowHeadSize * Math.cos(angle + arrowHeadAngle)} ${y2 + arrowHeadSize * Math.sin(angle + arrowHeadAngle)}\n    L ${x2 + arrowHeadSize * Math.cos(angle - arrowHeadAngle)} ${y2 + arrowHeadSize * Math.sin(angle - arrowHeadAngle)}\n    Z\n  `;\n  const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n  path.setAttribute('d', arrowPath);\n  path.style.stroke = 'black';\n  path.style.fill = 'none';\n  svg.appendChild(path);\n}\n\n// Draw arrows for the example spans\ndrawArrow('T2', 'T34');\ndrawArrow('T3', 'T34');