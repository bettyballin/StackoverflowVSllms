// Assume you have a WebRTC peer connection and data channel established\nconst peerConnection = new RTCPeerConnection();\nconst dataChannel = peerConnection.createDataChannel('my_channel');\n\n// Send an offer to the other peer\npeerConnection.createOffer().then((offer) => {\n    // Send the offer to the signaling server\n    socket.send(JSON.stringify({ type: 'offer', target: 'other_peer_id', data: offer }));\n});\n\n// Handle incoming messages from the signaling server\nsocket.onmessage = (event) => {\n    const data = JSON.parse(event.data);\n    if (data.type === 'offer') {\n        // Handle incoming offer from the other peer\n        peerConnection.setRemoteDescription(new RTCSessionDescription({ type: 'offer', sdp: data.data }));\n        peerConnection.createAnswer().then((answer) => {\n            // Send the answer to the signaling server\n            socket.send(JSON.stringify({ type: 'answer', target: 'other_peer_id', data: answer }));\n        });\n    } elseif (data.type === 'answer') {\n        // Handle incoming answer from the other peer\n        peerConnection.setRemoteDescription(new RTCSessionDescription({ type: 'answer', sdp: data.data }));\n    }\n};