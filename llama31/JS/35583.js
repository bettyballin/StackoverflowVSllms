// Define the grid size and image paths\nconst gridSize = 10;\nconst imagePaths = [\n  'image1.png', 'image2.png', 'image3.png', // ... add more images\n];\n\n// Define a function to get the adjacent images for a given image\nfunction getAdjacentImages(imageIndex) {\n  const adjacentImages = [];\n  const directions = [-1, 0, 1]; // left, center, right\n  for (let i = 0; i < directions.length; i++) {\n    for (let j = 0; j < directions.length; j++) {\n      const x = imageIndex % gridSize + directions[i];\n      const y = Math.floor(imageIndex / gridSize) + directions[j];\n      if (x >= 0 && x < gridSize && y >= 0 && y < gridSize) {\n        adjacentImages.push(imagePaths[y * gridSize + x]);\n      }\n    }\n  }\n  return adjacentImages;\n}\n\n// Define a function to generate the map\nfunction generateMap() {\n  const map = [];\n  for (let i = 0; i < gridSize * gridSize; i++) {\n    const image = imagePaths[i];\n    const adjacentImages = getAdjacentImages(i);\n    // Randomly select an adjacent image that matches the current image\n    const matchingImage = adjacentImages[Math.floor(Math.random() * adjacentImages.length)];\n    map.push({ image, matchingImage });\n  }\n  return map;\n}\n\n// Use the generateMap function to create a new map\nconst map = generateMap();\n// Use the map to stitch the images together