// Set cookie name and expiration time (in days)\nconst COOKIE_NAME = 'recently_viewed';\nconst EXPIRATION_DAYS = 30;\n\n// Function to set cookie\nfunction setCookie(name, value, days) {\n  const expires = new Date(Date.now() + days * 86400 * 1000).toUTCString();\n  document.cookie = `${name}=${value}; expires=${expires}; path=/`;\n}\n\n// Function to get cookie\nfunction getCookie(name) {\n  const regex = new RegExp(`${name}=([^;]*)`);\n  const match = document.cookie.match(regex);\n  return match && match[1];\n}\n\n// Function to update recently viewed div\nfunction updateRecentlyViewed(title, url) {\n  const recentlyViewedDiv = $('#recently-viewed');\n  const existingItems = recentlyViewedDiv.html().split('<br>');\n\n  // Add new item to the list\n  existingItems.push(`<a href="${url}">${title}</a>`);\n  recentlyViewedDiv.html(existingItems.join('<br>'));\n}\n\n// Listen for hashchange event\nwindow.addEventListener('hashchange', () => {\n  const title = document.title;\n  const url = window.location.href;\n  const cookieValue = getCookie(COOKIE_NAME);\n\n  // If cookie exists, append new item to the list\n  if (cookieValue) {\n    const existingItems = cookieValue.split('|');\n    existingItems.push(`${title}|${url}`);\n    setCookie(COOKIE_NAME, existingItems.join('|'), EXPIRATION_DAYS);\n  } else {\n    // If cookie doesn't exist, set it with the new item\n    setCookie(COOKIE_NAME, `${title}|${url}`, EXPIRATION_DAYS);\n  }\n\n  updateRecentlyViewed(title, url);\n});\n\n// Initialize recently viewed div on page load\n$(document).ready(() => {\n  const cookieValue = getCookie(COOKIE_NAME);\n  if (cookieValue) {\n    const existingItems = cookieValue.split('|');\n    existingItems.forEach((item) => {\n      const [title, url] = item.split('|');\n      updateRecentlyViewed(title, url);\n    });\n  }\n});