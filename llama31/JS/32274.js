function timsort(arr) {\n  const minRun = 32;\n  const n = arr.length;\n\n  for (let i = 0; i < n; i += minRun) {\n    insertionSort(arr, i, Math.min(i + minRun - 1, n - 1));\n  }\n\n  for (let size = minRun; size < n; size *= 2) {\n    for (let start = 0; start < n; start += size * 2) {\n      const mid = start + size - 1;\n      const end = Math.min(start + size * 2 - 1, n - 1);\n      merge(arr, start, mid, end);\n    }\n  }\n\n  return arr;\n}\n\nfunction insertionSort(arr, start, end) {\n  for (let i = start + 1; i <= end; i++) {\n    const key = arr[i];\n    let j = i - 1;\n    while (j >= start && arr[j] > key) {\n      arr[j + 1] = arr[j];\n      j--;\n    }\n    arr[j + 1] = key;\n  }\n}\n\nfunction merge(arr, start, mid, end) {\n  const left = arr.slice(start, mid + 1);\n  const right = arr.slice(mid + 1, end + 1);\n  let i = 0;\n  let j = 0;\n  let k = start;\n\n  while (i < left.length && j < right.length) {\n    if (left[i] <= right[j]) {\n      arr[k] = left[i];\n      i++;\n    } else {\n      arr[k] = right[j];\n      j++;\n    }\n    k++;\n  }\n\n  while (i < left.length) {\n    arr[k] = left[i];\n    i++;\n    k++;\n  }\n\n  while (j < right.length) {\n    arr[k] = right[j];\n    j++;\n    k++;\n  }\n}