// Function to download file and display progress bar\nfunction downloadFile(url) {\n  const progressBar = document.getElementById('progress-bar');\n  const progressText = document.getElementById('progress-text');\n\n  fetch(url)\n    .then(response => {\n      const totalSize = response.headers.get('content-length');\n      const reader = response.body.getReader();\n      let received = 0;\n\n      return new Promise((resolve, reject) => {\n        reader.read().then(function processResult(result) {\n          if (result.done) {\n            resolve();\n          } else {\n            received += result.value.length;\n            const progress = (received / totalSize) * 100;\n            progressBar.value = progress;\n            progressText.textContent = `Downloading... ${progress.toFixed(2)}%`;\n\n            // Append the chunk to the file\n            const chunk = result.value;\n            const blob = new Blob([chunk], { type: 'application/octet-stream' });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = 'file.txt';\n            a.click();\n\n            reader.read().then(processResult);\n          }\n        });\n      });\n    })\n    .catch(error => {\n      console.error('Error downloading file:', error);\n    });\n}\n\n// Example usage:\nconst url = 'https://example.com/largefile.zip';\ndownloadFile(url);