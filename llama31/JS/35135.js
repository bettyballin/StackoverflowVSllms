// Degree elevation\nfunction elevateDegree(curve: N-Ary B-Spline, targetDegree: int): N-Ary B-Spline {\n  // Implement degree elevation algorithm\n  // (e.g., using the "Degree Elevation of B-Spline Curves" paper by Prautzsch)\n}\n\n// Split curve using de Casteljau's algorithm\nfunction splitCurve(curve: N-Ary B-Spline, numSegments: int): N-Ary B-Spline[] {\n  // Implement de Casteljau's algorithm to split the curve\n  // (e.g., using the "De Casteljau's Algorithm" paper by De Casteljau)\n}\n\n// Convert N-Ary B-Spline to Bezier curve using Cox-De Boor recursion\nfunction convertToBezier(curve: N-Ary B-Spline): BezierCurve {\n  // Implement Cox-De Boor recursion formula\n  // (e.g., using the "Cox-De Boor recursion" paper by Cox and De Boor)\n}\n\n// Convert Bezier curve to Quadratic/Cubic B-Spline\nfunction convertBezierToBSpline(curve: BezierCurve, targetDegree: int): Quadratic/Cubic B-Spline {\n  // Implement Bezier-to-B-Spline conversion algorithm\n  // (e.g., using the "Bezier-to-B-Spline Conversion" paper by Hoschek and Lasser)\n}\n\n// Main function\nfunction convertNAryBSpline(curve: N-Ary B-Spline, targetDegree: int): Quadratic/Cubic B-Spline[] {\n  curve = elevateDegree(curve, targetDegree);\n  segments = splitCurve(curve, numSegments);\n  beziers = [];\n  for (segment in segments) {\n    beziers.push(convertToBezier(segment));\n  }\n  bsplines = [];\n  for (bezier in beziers) {\n    bsplines.push(convertBezierToBSpline(bezier, targetDegree));\n  }\n  return bsplines;\n}