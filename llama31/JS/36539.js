const express = require('express');\nconst crypto = require('crypto');\nconst app = express();\n\n// Secret key for HMAC\nconst secretKey = 'your_secret_key_here';\n\n// Generate a new session\napp.post('/login', (req, res) => {\n  const sessionId = crypto.randomBytes(16).toString('hex');\n  const nonce = crypto.randomBytes(16).toString('hex');\n  const sessionData = { /* user data */ };\n  const mac = crypto.createHmac('sha256', secretKey).update(sessionData).digest('hex');\n\n  // Store session data in database\n  db.storeSession(sessionId, nonce, mac, sessionData);\n\n  res.json({ sessionId, nonce });\n});\n\n// Verify session on subsequent requests\napp.use((req, res, next) => {\n  const sessionId = req.headers['session-id'];\n  const nonce = req.headers['nonce'];\n  const mac = req.headers['mac'];\n\n  // Verify MAC and nonce\n  if (!verifyMac(sessionId, nonce, mac)) {\n    // Flag session as compromised and create a new session\n    const newSessionId = crypto.randomBytes(16).toString('hex');\n    db.createSession(newSessionId, /* copy session data */);\n    res.json({ sessionId: newSessionId });\n  } else {\n    next();\n  }\n});\n\nfunction verifyMac(sessionId, nonce, mac) {\n  const sessionData = db.getSessionData(sessionId);\n  const expectedMac = crypto.createHmac('sha256', secretKey).update(sessionData).digest('hex');\n  return expectedMac === mac;\n}