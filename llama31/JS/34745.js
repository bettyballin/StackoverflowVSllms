const AWS = require('aws-sdk');\n\nconst cloudwatch = new AWS.CloudWatch({ region: 'your-region' });\nconst lambda = new AWS.Lambda({ region: 'your-region' });\n\nconst scalingConfig = {\n  // Define your scaling configuration here\n  // (e.g., instance types, min/max instances, etc.)\n};\n\nexports.handler = async (event) => {\n  const metricName = 'CPUUtilization';\n  const namespace = 'AWS/EC2';\n  const threshold = 50; // Scale up when CPU utilization exceeds 50%\n\n  const metric = await cloudwatch.getMetricStatistics({\n    MetricQueries: [\n      {\n        MetricName: metricName,\n        Namespace: namespace,\n        Statistic: 'Average',\n        Unit: 'Percent',\n      },\n    ],\n  }).promise();\n\n  const currentValue = metric.Datapoints[0].Average;\n  if (currentValue > threshold) {\n    // Scale up!\n    const instances = await lambda.invoke({\n      FunctionName: 'your-lambda-function-name',\n      InvocationType: 'Event',\n      Payload: JSON.stringify({\n        instanceType: scalingConfig.instanceType,\n        minInstances: scalingConfig.minInstances,\n        maxInstances: scalingConfig.maxInstances,\n      }),\n    }).promise();\n  } else {\n    // Scale down!\n    // ...\n  }\n};