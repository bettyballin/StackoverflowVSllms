class Quadtree {\n  // Initialize quadtree bounds and shapes\n  constructor(bounds, shapes) {\n    this.bounds = bounds;\n    this.shapes = shapes;\n    this.divided = false;\n    this.northWest = null;\n    this.northEast = null;\n    this.southWest = null;\n    this.southEast = null;\n  }\n\n  // Query shapes that overlap with a point\n  query(point) {\n    if (!this.bounds.contains(point)) {\n      return [];\n    }\n\n    if (!this.divided) {\n      return this.shapes;\n    }\n\n    const results = [];\n    if (this.northWest) results.push(...this.northWest.query(point));\n    if (this.northEast) results.push(...this.northEast.query(point));\n    if (this.southWest) results.push(...this.southWest.query(point));\n    if (this.southEast) results.push(...this.southEast.query(point));\n\n    return results;\n  }\n\n  // Subdivide the quadtree\n  subdivide() {\n    if (this.divided) return;\n\n    const x = this.bounds.x;\n    const y = this.bounds.y;\n    const width = this.bounds.width;\n    const height = this.bounds.height;\n\n    this.northWest = new Quadtree({\n      x: x,\n      y: y,\n      width: width / 2,\n      height: height / 2,\n    }, this.shapes);\n\n    this.northEast = new Quadtree({\n      x: x + width / 2,\n      y: y,\n      width: width / 2,\n      height: height / 2,\n    }, this.shapes);\n\n    this.southWest = new Quadtree({\n      x: x,\n      y: y + height / 2,\n      width: width / 2,\n      height: height / 2,\n    }, this.shapes);\n\n    this.southEast = new Quadtree({\n      x: x + width / 2,\n      y: y + height / 2,\n      width: width / 2,\n      height: height / 2,\n    }, this.shapes);\n\n    this.divided = true;\n  }\n}\n\n// Example usage:\nconst shapes = [\n  { x: 10, y: 10, width: 20, height: 20 }, // Rectangle\n  { x: 30, y: 30, radius: 10 }, // Circle\n];\n\nconst quadtree = new Quadtree({\n  x: 0,\n  y: 0,\n  width: 100,\n  height: 100,\n}, shapes);\n\nquadtree.subdivide();\n\nconst clickPoint = { x: 35, y: 35 };\nconst overlappingShapes = quadtree.query(clickPoint);\n\n// Perform precise collision checks for each overlapping shape\noverlappingShapes.forEach((shape) => {\n  if (isPointInsideShape(clickPoint, shape)) {\n    console.log(`Clicked on shape: ${shape}`);\n  }\n});