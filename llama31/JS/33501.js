function gaussianElimination(matrix) {\n  const numVars = matrix[0].length - 1;\n  const numEqs = matrix.length;\n\n  for (let i = 0; i < numVars; i++) {\n    // Search for maximum in this column\n    let maxEl = 0;\n    let maxRow = 0;\n    for (let k = i; k < numEqs; k++) {\n      if (matrix[k][i] === 1) {\n        maxEl = 1;\n        maxRow = k;\n        break;\n      }\n    }\n\n    // Swap maximum row with current row\n    [matrix[i], matrix[maxRow]] = [matrix[maxRow], matrix[i]];\n\n    // Make all rows below this one 0 in current column\n    for (let k = i + 1; k < numEqs; k++) {\n      if (matrix[k][i] === 1) {\n        matrix[k] = addRows(matrix[k], matrix[i]);\n      }\n    }\n  }\n\n  // Solve equation Ax=b for an upper triangular matrix A\n  const solution = new Array(numVars).fill(0);\n  for (let i = numVars - 1; i >= 0; i--) {\n    solution[i] = matrix[i][numVars];\n    for (let k = i - 1; k >= 0; k--) {\n      matrix[k][numVars] = add(matrix[k][numVars], mul(matrix[k][i], solution[i]));\n    }\n  }\n\n  return solution;\n}\n\n// Custom addition\nfunction add(a, b) {\n  return (a + b) % 2;\n}\n\n// Custom multiplication\nfunction mul(a, b) {\n  return (a * b) % 2;\n}\n\n// Add two rows\nfunction addRows(row1, row2) {\n  return row1.map((_, i) => add(row1[i], row2[i]));\n}