import mmh3\nfrom bitarray import bitarray\n\nclass BloomFilter:\n    def __init__(self, size, hash_functions):\n        self.size = size\n        self.hash_functions = hash_functions\n        self.bit_array = bitarray(size)\n        self.bit_array.setall(0)\n\n    def add(self, item):\n        for seed in range(self.hash_functions):\n            result = mmh3.hash(item, seed) % self.size\n            self.bit_array[result] = 1\n\n    def lookup(self, item):\n        for seed in range(self.hash_functions):\n            result = mmh3.hash(item, seed) % self.size\n            if self.bit_array[result] == 0:\n                return False\n        return True\n\n# Example usage:\nbf1 = BloomFilter(1000, 5)\nbf2 = BloomFilter(1000, 5)\n\n# Add objects to bf1\nbf1.add("obj1")\nbf1.add("obj2")\nbf1.add("obj3")\n\n# Add objects to bf2\nbf2.add("obj2")\nbf2.add("obj3")\nbf2.add("obj4")\n\n# Exchange Bloom filters\nbf1_received = bf2\nbf2_received = bf1\n\n# Identify missing objects\nmissing_objs1 = [obj for obj in ["obj1", "obj2", "obj3", "obj4"] if not bf1_received.lookup(obj)]\nmissing_objs2 = [obj for obj in ["obj1", "obj2", "obj3", "obj4"] if not bf2_received.lookup(obj)]\n\nprint(missing_objs1)  # Output: ["obj1", "obj4"]\nprint(missing_objs2)  # Output: ["obj2", "obj3"]