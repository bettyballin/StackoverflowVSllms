from pulp import LpMaximize, LpProblem, lpSum, LpVariable\n\n# Define the problem parameters\nstandard_length = 6  # standard length of the tubes\ndemands = [(1, 10), (2.5, 20)]  # (length, quantity) of tubes to be cut\n\n# Create the ILP problem\nprob = LpProblem("Cutting_Stock_Problem", LpMaximize)\n\n# Define the variables\nx = LpVariable.dicts("x", range(len(demands)), lowBound=0, cat="Integer")\n\n# Objective function: minimize waste\nprob += lpSum([x[i] * demands[i][0] for i in range(len(demands))])\n\n# Constraints: meet demand for each tube length\nfor i in range(len(demands)):\n    prob += lpSum([x[j] * (standard_length // demands[j][0]) for j in range(len(demands)) if j != i]) >= demands[i][1]\n\n# Solve the problem\nprob.solve()\n\n# Print the solution\nfor i in range(len(demands)):\n    print(f"Cut {x[i].varValue} tubes of length {demands[i][0]}m")