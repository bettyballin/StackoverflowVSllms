import numpy as np\n\ndef get_contours(heightmap, contour_height):\n    rows, cols = heightmap.shape\n    contour_lines = []\n\n    # Define the 8 neighboring cell offsets\n    offsets = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n\n    for row in range(rows):\n        for col in range(cols):\n            # Determine contour status for this cell\n            if heightmap[row, col] >= contour_height:\n                inside = True\n            else:\n                inside = False\n\n            # Examine neighboring cells\n            for offset in offsets:\n                neighbor_row = row + offset[0]\n                neighbor_col = col + offset[1]\n\n                # Check if neighbor is within bounds\n                if (0 <= neighbor_row < rows) and (0 <= neighbor_col < cols):\n                    # Check if contour edge passes through midpoint\n                    if inside != (heightmap[neighbor_row, neighbor_col] >= contour_height):\n                        # Calculate midpoint of contour edge\n                        midpoint_row = (row + neighbor_row) / 2.0\n                        midpoint_col = (col + neighbor_col) / 2.0\n\n                        # Add line segment to contour lines\n                        contour_lines.append([(midpoint_col, midpoint_row), (midpoint_col + 1, midpoint_row)])\n\n    return contour_lines\n\n# Example usage:\nheightmap = np.random.rand(512, 512)  # Replace with your actual heightmap data\ncontour_height = 0.5  # Replace with your desired contour height\ncontour_lines = get_contours(heightmap, contour_height)