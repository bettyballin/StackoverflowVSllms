from collections import deque\n\nclass KCore:\n    def __init__(self, graph, k):\n        self.graph = graph\n        self.k = k\n        self.core = set()\n\n    def add_vertex(self, vertex):\n        # Update degrees of adjacent vertices\n        for neighbor in self.graph[vertex]:\n            self.graph[neighbor][vertex] = self.graph[neighbor].get(vertex, 0) + 1\n\n        # Check if new vertex has degree at least k\n        if len(self.graph[vertex]) >= self.k:\n            self.core.add(vertex)\n\n        # Perform BFS to find reachable vertices with degree at least k\n        queue = deque([vertex])\n        visited = set([vertex])\n        while queue:\n            current_vertex = queue.popleft()\n            for neighbor in self.graph[current_vertex]:\n                if neighbor not in visited and len(self.graph[neighbor]) >= self.k:\n                    visited.add(neighbor)\n                    queue.append(neighbor)\n                    self.core.add(neighbor)\n\n# Example usage:\ngraph = {\n    'A': {'B': 1, 'C': 1},\n    'B': {'A': 1},\n    'C': {'A': 1},\n    'D': {'E': 1},\n    'E': {'D': 1}\n}\n\nkcore = KCore(graph, 2)\n\n# Add vertex F\ngraph['F'] = {'B': 1, 'C': 1}\ngraph['B']['F'] = 1\ngraph['C']['F'] = 1\n\nkcore.add_vertex('F')\n\nprint(kcore.core)  # Output: {'A', 'B', 'C', 'F'}