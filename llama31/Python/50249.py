import numpy as np\n\ndef shortest_distance(p1, p2, p3, p4):\n    """\n    Calculate the shortest distance between two line segments in 3D.\n\n    Parameters:\n    p1 (numpy.array): Start point of first line segment (X1, Y1, Z1)\n    p2 (numpy.array): End point of first line segment (X2, Y2, Z2)\n    p3 (numpy.array): Start point of second line segment (X3, Y3, Z3)\n    p4 (numpy.array): End point of second line segment (X4, Y4, Z4)\n\n    Returns:\n    float: Shortest distance between the two line segments\n    """\n    u = p2 - p1\n    v = p4 - p3\n    w = p1 - p3\n\n    a = np.dot(u, u)\n    b = np.dot(u, v)\n    c = np.dot(v, v)\n    d = np.dot(u, w)\n    e = np.dot(v, w)\n\n    D = a * c - b * b\n    sc = D\n    sN = D\n    sD = D\n    tc = D\n    tN = D\n    tD = D\n\n    if D < 1e-6:  # the lines are almost parallel\n        sN = 0.0\n        sD = 1.0\n        tN = e\n        tD = c\n    else:\n        sN = b * e - c * d\n        tN = a * e - b * d\n        if sN < 0.0:  # sc < 0 => the s=0 edge is visible\n            sN = 0.0\n            tN = e\n            tD = c\n        elif sN > sD:  # sc > 1  => the s=1 edge is visible\n            sN = sD\n            tN = e + b\n            tD = c\n\n    if tN < 0.0:  # tc < 0 => the t=0 edge is visible\n        tN = 0.0\n        # recompute sc for this edge\n        if -d < 0.0:\n            sN = 0.0\n        elif -d > a:\n            sN = sD\n        else:\n            sN = -d\n            sD = a\n    elif tN > tD:  # tc > 1  => the t=1 edge is visible\n        tN = tD\n        # recompute sc for this edge\n        if (-d + b) < 0.0:\n            sN = 0\n        elif (-d + b) > a:\n            sN = sD\n        else:\n            sN = -d + b\n            sD = a\n\n    # finally do the division to get sc and tc\n    sc = 0.0 if np.fabs(sN) < 1e-6 else sN / sD\n    tc = 0.0 if np.fabs(tN) < 1e-6 else tN / tD\n\n    # get the difference of the two closest points\n    dP = w + (sc * u) - (tc * v)\n\n    return np.linalg.norm(dP)