from collections import defaultdict, deque\n\ndef topological_sort(relations):\n    graph = defaultdict(list)\n    indegree = defaultdict(int)\n\n    for relation in relations:\n        for i in range(len(relation) - 1):\n            graph[relation[i]].append(relation[i + 1])\n            indegree[relation[i + 1]] += 1\n\n    queue = deque([node for node in graph if indegree[node] == 0])\n\n    result = []\n    while queue:\n        node = queue.popleft()\n        result.append(node)\n        for neighbor in graph[node]:\n            indegree[neighbor] -= 1\n            if indegree[neighbor] == 0:\n                queue.append(neighbor)\n\n    return result\n\nrelations = [["A", "B", "C"], ["A", "P", "Q"]]\nprint(topological_sort(relations))