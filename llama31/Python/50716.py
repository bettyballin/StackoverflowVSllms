import re\nfrom functools import reduce\n\ndef regexp_to_fa(pattern):\n    # Convert regular expression to finite automaton (FA)\n    fa = []\n    for state in range(len(pattern) + 1):\n        transitions = {}\n        for char in 'abcdefghijklmnopqrstuvwxyz':\n            next_state = state\n            if state < len(pattern) and pattern[state] == char:\n                next_state += 1\n            transitions[char] = next_state\n        fa.append(transitions)\n    return fa\n\ndef fa_intersection(fa1, fa2):\n    # Compute intersection of two finite automata using Cartesian product\n    intersection_fa = []\n    for state1 in fa1:\n        for state2 in fa2:\n            transitions = {}\n            for char in 'abcdefghijklmnopqrstuvwxyz':\n                next_state1 = state1[char]\n                next_state2 = state2[char]\n                transitions[char] = (next_state1, next_state2)\n            intersection_fa.append(transitions)\n    return intersection_fa\n\ndef is_fa_empty(fa):\n    # Check if finite automaton is empty\n    for state in fa:\n        for char in 'abcdefghijklmnopqrstuvwxyz':\n            if state[char] != 0:\n                return False\n    return True\n\ndef regexp_intersect(pattern1, pattern2):\n    fa1 = regexp_to_fa(pattern1)\n    fa2 = regexp_to_fa(pattern2)\n    intersection_fa = fa_intersection(fa1, fa2)\n    return not is_fa_empty(intersection_fa)\n\n# Example usage:\npattern1 = 'abc'\npattern2 = 'ab.'\nprint(regexp_intersect(pattern1, pattern2))  # Output: True