import re\n\nclass ConfigParser:\n    def __init__(self):\n        self.states = {\n            'STATE_GLOBAL': self.parse_global,\n            'STATE_SECTION': self.parse_section,\n            'STATE_NESTED_SECTION': self.parse_nested_section,\n            'STATE_KEY_VALUE': self.parse_key_value,\n        }\n        self.stack = []\n        self.data = {}\n\n    def parse(self, text):\n        lines = text.splitlines()\n        for line in lines:\n            self.states[self.current_state](line)\n\n    def parse_global(self, line):\n        # Handle global section\n        if re.match(r'^BeginSection:(\w+)$', line):\n            self.stack.append(self.current_state)\n            self.current_state = 'STATE_SECTION'\n            self.section_name = re.group(1)\n        elif re.match(r'^(\w+)\s*=\s*(.*)$', line):\n            key, value = re.groups()\n            self.data[key] = value\n\n    def parse_section(self, line):\n        # Handle section\n        if re.match(r'^(\s*)BeginSection:(\w+)$', line):\n            self.stack.append(self.current_state)\n            self.current_state = 'STATE_NESTED_SECTION'\n            self.nested_section_name = re.group(2)\n            self.indentation_level = len(re.group(1))\n        elif re.match(r'^(\w+)\s*=\s*(.*)$', line):\n            key, value = re.groups()\n            self.data[self.section_name][key] = value\n\n    def parse_nested_section(self, line):\n        # Handle nested section\n        if re.match(r'^(\s*)EndSection$', line):\n            self.current_state = self.stack.pop()\n        elif re.match(r'^(\w+)\s*=\s*(.*)$', line):\n            key, value = re.groups()\n            self.data[self.section_name][self.nested_section_name][key] = value\n\n    def parse_key_value(self, line):\n        # Handle key-value pair\n        key, value = re.match(r'^(\w+)\s*=\s*(.*)$', line).groups()\n        self.data[key] = value