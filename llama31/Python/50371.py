import cv2\nimport numpy as np\n\n# Define the regular grid size\ngrid_size = (3, 5)\n\n# Define the distorted rectangle's corners\ncorners = np.array([[100, 100], [300, 100], [300, 300], [100, 300]])\n\n# Define the homography matrix\nH = cv2.getPerspectiveTransform(corners, np.array([[0, 0], [grid_size[0], 0], [grid_size[0], grid_size[1]], [0, grid_size[1]]]))\n\n# Create a grid of points\ngrid_points = np.meshgrid(np.arange(grid_size[0]), np.arange(grid_size[1]))\ngrid_points = np.reshape(grid_points, (2, -1))\n\n# Apply the homography to the grid points\nwarped_grid_points = cv2.perspectiveTransform(grid_points, H)\n\n# Draw the grid lines\nfor i in range(grid_size[0]):\n    for j in range(grid_size[1]):\n        if i < grid_size[0] - 1:\n            cv2.line(image, warped_grid_points[:, i + j * grid_size[0]], warped_grid_points[:, i + 1 + j * grid_size[0]], (0, 255, 0))\n        if j < grid_size[1] - 1:\n            cv2.line(image, warped_grid_points[:, i + j * grid_size[0]], warped_grid_points[:, i + (j + 1) * grid_size[0]], (0, 255, 0))