def is_prime(n):  # P: polynomial time\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n\ndef is_sudoku_solution(board):  # NP: verification in polynomial time\n    # assume a 9x9 Sudoku board\n    for row in range(9):\n        for col in range(9):\n            if board[row][col] < 1 or board[row][col] > 9:\n                return False\n            # check row, column, and 3x3 box constraints\n    return True\n\n# Example usage:\nn = 25\nprint(is_prime(n))  # P: fast\n\nboard = [[5, 3, 4, 6, 7, 8, 9, 1, 2],\n         [6, 7, 2, 1, 9, 5, 3, 4, 8],\n         [1, 9, 8, 3, 4, 2, 5, 6, 7],\n         [8, 5, 9, 7, 6, 1, 4, 2, 3],\n         [4, 2, 6, 8, 5, 3, 7, 9, 1],\n         [7, 1, 3, 9, 2, 4, 8, 5, 6],\n         [9, 6, 1, 5, 3, 7, 2, 8, 4],\n         [2, 8, 7, 4, 1, 9, 6, 3, 5],\n         [3, 4, 5, 2, 8, 6, 1, 7, 9]]\nprint(is_sudoku_solution(board))  # NP: fast verificatio