class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_word = True\n\n    def find(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return node.is_word\n\ndef pack_words(words):\n    trie = Trie()\n    buffer = ""\n    positions = {}\n\n    # Sort words by length in descending order\n    words.sort(key=len, reverse=True)\n\n    for word in words:\n        if trie.find(word):\n            # Word is already in the Trie, find its position in the buffer\n            pos = buffer.find(word)\n            positions[word] = (pos, len(word))\n        else:\n            # Add word to the Trie and append it to the buffer\n            trie.insert(word)\n            positions[word] = (len(buffer), len(word))\n            buffer += word\n\n    return buffer, positions\n\n# Example usage\nwords = ["doll", "dollhouse", "house", "ragdoll"]\nbuffer, positions = pack_words(words)\nprint("Packed buffer:", buffer)\nprint("Word positions:", positions)