import numpy as np\n\ndef simplex(c, A, b):\n    # Find an initial basic feasible solution\n    basic_vars = np.where(A == 1)[1]\n    non_basic_vars = np.setdiff1d(np.arange(len(c)), basic_vars)\n\n    while True:\n        # Compute the reduced cost of each non-basic variable\n        reduced_costs = c[non_basic_vars] - np.dot(A[:, non_basic_vars].T, b)\n\n        # If all reduced costs are non-negative, we have an optimal solution\n        if np.all(reduced_costs >= 0):\n            break\n\n        # Choose the non-basic variable with the most negative reduced cost\n        entering_var = non_basic_vars[np.argmin(reduced_costs)]\n\n        # Compute the minimum ratio of the basic variables\n        ratios = b / A[:, entering_var]\n        leaving_var = basic_vars[np.argmin(ratios)]\n\n        # Swap the entering and leaving variables\n        basic_vars = np.setdiff1d(basic_vars, leaving_var)\n        non_basic_vars = np.setdiff1d(non_basic_vars, entering_var)\n        basic_vars = np.append(basic_vars, entering_var)\n        non_basic_vars = np.append(non_basic_vars, leaving_var)\n\n    # Compute the optimal solution\n    x = np.zeros(len(c))\n    x[basic_vars] = b\n    return x