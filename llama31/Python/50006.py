import time\nimport bisect\n\nclass MedianSpeedCalculator:\n    def __init__(self, buffer_size=1000):\n        self.buffer = [(0, 0)] * buffer_size  # (timestamp, chunk_size)\n        self.buffer_size = buffer_size\n\n    def add_sample(self, chunk_size):\n        timestamp = time.time()\n        self.buffer.append((timestamp, chunk_size))\n        if len(self.buffer) > self.buffer_size:\n            self.buffer.pop(0)\n\n    def calculate_median_speed(self):\n        rates = []\n        for i in range(len(self.buffer)):\n            timestamp, chunk_size = self.buffer[i]\n            if i > 0:\n                prev_timestamp, _ = self.buffer[i-1]\n                rate = chunk_size / (timestamp - prev_timestamp)\n                rates.append(rate)\n        rates.sort()\n        mid = len(rates) // 2\n        if len(rates) % 2 == 1:\n            return rates[mid]\n        else:\n            return (rates[mid-1] + rates[mid]) / 2\n\n# Usage:\ncalculator = MedianSpeedCalculator()\nwhile True:\n    chunk_size = random.randint(100, 10000)  # simulate random chunk sizes\n    calculator.add_sample(chunk_size)\n    median_speed = calculator.calculate_median_speed()\n    print(f"Median speed: {median_speed:.2f} bytes/sec")\n    time.sleep(0.001)  # simulate high-frequency OnRecv() calls