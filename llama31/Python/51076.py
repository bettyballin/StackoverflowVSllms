def calculate_relationship(individual_id1, individual_id2, child_relationships):\n    """\n    Calculate the family relationship between two individuals.\n\n    Args:\n        individual_id1 (int): ID of the first individual.\n        individual_id2 (int): ID of the second individual.\n        child_relationships (dict): Dictionary of child relationships, where each key is a child ID and the value is a tuple of (father_id, mother_id).\n\n    Returns:\n        str: The family relationship between the two individuals (e.g. "cousin", "great grand uncle", etc.).\n    """\n\n    def get_parents(child_id):\n        return child_relationships.get(child_id, (None, None))\n\n    def get_common_ancestor(individual_id1, individual_id2):\n        ancestors1 = set()\n        ancestors2 = set()\n\n        def add_ancestors(individual_id, ancestors):\n            parents = get_parents(individual_id)\n            if parents[0] is not None:\n                ancestors.add(parents[0])\n                add_ancestors(parents[0], ancestors)\n            if parents[1] is not None:\n                ancestors.add(parents[1])\n                add_ancestors(parents[1], ancestors)\n\n        add_ancestors(individual_id1, ancestors1)\n        add_ancestors(individual_id2, ancestors2)\n\n        common_ancestors = ancestors1 & ancestors2\n        if common_ancestors:\n            return next(iter(common_ancestors))\n        return None\n\n    common_ancestor = get_common_ancestor(individual_id1, individual_id2)\n    if common_ancestor is None:\n        return "No common ancestor found"\n\n    def get_relationship(individual_id, common_ancestor):\n        parents = get_parents(individual_id)\n        if parents[0] == common_ancestor:\n            return "father"\n        elif parents[1] == common_ancestor:\n            return "mother"\n        else:\n            relationship = get_relationship(parents[0], common_ancestor)\n            if relationship:\n                return "grand " + relationship\n            relationship = get_relationship(parents[1], common_ancestor)\n            if relationship:\n                return "grand " + relationship\n            return None\n\n    relationship1 = get_relationship(individual_id1, common_ancestor)\n    relationship2 = get_relationship(individual_id2, common_ancestor)\n\n    if relationship1 == relationship2:\n        return "sibling"\n    elif relationship1 and relationship2:\n        return relationship1 + " of " + relationship2\n    else:\n        return "No relationship found"\n\n# Example usage:\nchild_relationships = {\n    1: (2, 3),  # child 1 has father 2 and mother 3\n    2: (4, 5),  # child 2 has father 4 and mother 5\n    3: (6, 7),  # child 3 has father 6 and mother 7\n    4: (8, 9),  # child 4 has father 8 and mother 9\n    5: (10, 11),  # child 5 has father 10 and mother 11\n}\n\nprint(calculate_relationship(1, 2, child_relationships))  # Output: "sibling"\nprint(calculate_relationship(1, 4, child_relationships))  # Output: "grand father"\nprint(calculate_relationship(1, 6, child_relationships))  # Output: "grand mother"