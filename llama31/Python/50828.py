def find_multiplication_chain(power_of_2, stopping_constant, count):\n    # Special case for count = 1\n    if count == 1:\n        return (stopping_constant, 1)\n\n    # Compute the multiplicative order of 2 modulo power_of_2\n    order = 1\n    while (2 ** order) % power_of_2 != 1:\n        order += 1\n\n    # Find a generator of the multiplicative group\n    generator = 3\n    while (generator ** order) % power_of_2 != 1:\n        generator += 2\n\n    # Compute the discrete logarithm of stopping_constant modulo power_of_2\n    discrete_log = 0\n    while (generator ** discrete_log) % power_of_2 != stopping_constant:\n        discrete_log += 1\n\n    # Compute the start value\n    start = (generator ** (discrete_log - count + 1)) % power_of_2\n\n    # Compute the multiplier\n    multiplier = (generator ** (order - 1)) % power_of_2\n\n    return (start, multiplier)