import random\nimport numpy as np\n\ndef fitness(path, maze):\n    """Calculate the fitness of a path."""\n    values = set()\n    for x, y in path:\n        values.add(maze[x, y])\n    return len(values)\n\ndef mutate(path, maze):\n    """Mutate a path by swapping two random nodes."""\n    x1, y1 = random.choice(path)\n    x2, y2 = random.choice(path)\n    path.remove((x1, y1))\n    path.remove((x2, y2))\n    path.append((x2, y1))\n    path.append((x1, y2))\n    return path\n\ndef genetic_algorithm(maze, population_size=100, generations=1000):\n    """Find a path using a genetic algorithm."""\n    population = []\n    for _ in range(population_size):\n        path = [(0, i) for i in range(len(maze[0]))]\n        population.append(path)\n\n    for _ in range(generations):\n        fitnesses = [fitness(path, maze) for path in population]\n        fittest_path = population[np.argmax(fitnesses)]\n        if fitness(fittest_path, maze) == len(maze):\n            return fittest_path\n\n        new_population = []\n        for _ in range(population_size):\n            path = mutate(fittest_path[:], maze)\n            new_population.append(path)\n        population = new_population\n\n    return None\n\n# Example usage:\nmaze = np.array([\n    [1, 2, 5, 5, 4],\n    [1, 5, 1, 3, 5],\n    [4, 1, 2, 3, 2],\n    [5, 5, 4, 4, 3],\n    [4, 2, 1, 2, 4]\n])\n\npath = genetic_algorithm(maze)\nif path:\n    print("Solution found:", path)\nelse:\n    print("No solution found.")