import math\n\ndef orientation(p, q, r):\n    """Find the orientation of an ordered triplet (p, q, r).\n    Returns:\n    0 --> p, q and r are colinear\n    1 --> Clockwise\n    2 --> Counterclockwise\n    """\n    val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])\n    if val == 0:\n        return 0  # colinear\n    return 1 if val > 0 else 2  # clock or counterclock wise\n\ndef convex_hull(points):\n    """Computes the Convex Hull of a set of 2D points using the Graham Scan"""\n    n = len(points)\n    if n < 3:\n        raise ValueError("Convex hull requires at least 3 points")\n\n    hull = []\n    l = 0\n    for i in range(1, n):\n        if points[i][0] < points[l][0]:\n            l = i\n\n    p = l\n    q = 0\n    while True:\n        hull.append(points[p])\n        q = (p + 1) % n\n\n        for i in range(n):\n            if orientation(points[p], points[i], points[q]) == 2:\n                q = i\n\n        p = q\n\n        if p == l:\n            break\n\n    return hull\n\ndef distance(p1, p2):\n    """Euclidean distance between two points."""\n    return math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2)\n\ndef rotating_calipers(points):\n    """Find the Greatest Linear Dimension of a polygon using Rotating Calipers."""\n    hull = convex_hull(points)\n    n = len(hull)\n    max_dist = 0\n\n    if n == 0:\n        return max_dist\n\n    for i in range(n):\n        p = hull[i]\n        q = hull[(i + 1) % n]\n        for j in range(i + 2, n):\n            r = hull[j]\n            dist = distance(p, r)\n            max_dist = max(max_dist, dist)\n\n    return max_dist\n\n# Example usage\npoints = [(0, 0), (5, 0), (6, 4), (2, 4)]\nprint(rotating_calipers(points))