import mmh3\nimport bitarray\n\nclass BloomFilter:\n    def __init__(self, size, hash_functions):\n        self.size = size\n        self.hash_functions = hash_functions\n        self.bit_array = bitarray.bitarray(size)\n        self.bit_array.setall(0)\n\n    def add(self, word):\n        for seed in self.hash_functions:\n            index = mmh3.hash(word, seed) % self.size\n            self.bit_array[index] = 1\n\n    def lookup(self, word):\n        for seed in self.hash_functions:\n            index = mmh3.hash(word, seed) % self.size\n            if self.bit_array[index] == 0:\n                return False\n        return True\n\n# Create a Bloom filter with 100,000 words and 7 hash functions\nbf = BloomFilter(100000, [1, 2, 3, 4, 5, 6, 7])\n\n# Add words to the filter\nwords = ["apple", "banana", "orange", ...]\nfor word in words:\n    bf.add(word)\n\n# Test for membership\ntest_word = "apple"\nif bf.lookup(test_word):\n    print(f"{test_word} is probably in the dictionary")\nelse:\n    print(f"{test_word} is definitely not in the dictionary")