import bisect\n\nclass IntervalTree:\n    def __init__(self):\n        self.intervals = []\n\n    def insert(self, start, end):\n        bisect.insort(self.intervals, (start, end))\n\n    def find_overlaps(self, start, end):\n        idx = bisect.bisect_left(self.intervals, (start, end))\n        overlaps = []\n        while idx < len(self.intervals):\n            interval = self.intervals[idx]\n            if interval[0] <= end and interval[1] >= start:\n                overlaps.append(interval)\n            else:\n                break\n            idx += 1\n        return overlaps\n\ndef sweep_line(edited_schedule, original_schedule):\n    interval_tree = IntervalTree()\n    for interval in original_schedule:\n        interval_tree.insert(interval[0], interval[1])\n\n    for interval in edited_schedule:\n        overlaps = interval_tree.find_overlaps(interval[0], interval[1])\n        # Update data structures based on overlaps\n        # ...