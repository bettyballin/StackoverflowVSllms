class Node:\n    def __init__(self, id):\n        self.id = id\n        self.children = []\n        self.visited = False\n\nclass DAG:\n    def __init__(self):\n        self.nodes = {}\n\n    def add_node(self, id):\n        if id not in self.nodes:\n            self.nodes[id] = Node(id)\n\n    def add_edge(self, from_id, to_id):\n        if from_id not in self.nodes or to_id not in self.nodes:\n            raise ValueError("Both nodes must exist in the graph")\n\n        from_node = self.nodes[from_id]\n        to_node = self.nodes[to_id]\n\n        # Perform DFS to detect potential cycles\n        if self.has_cycle(from_node, to_node):\n            raise ValueError("Adding this edge would create a cycle")\n\n        from_node.children.append(to_node)\n\n    def has_cycle(self, from_node, to_node):\n        if to_node.visited:\n            return True\n\n        to_node.visited = True\n\n        for child in to_node.children:\n            if child == from_node or self.has_cycle(from_node, child):\n                return True\n\n        to_node.visited = False\n        return False