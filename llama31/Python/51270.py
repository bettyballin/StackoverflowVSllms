import numpy as np\n\ndef hungarian_algorithm(cost_matrix):\n    n = cost_matrix.shape[0]\n    row_ind, col_ind = np.arange(n), np.arange(n)\n    cost_matrix = cost_matrix.copy()\n\n    # Step 1: Initialize the cost matrix\n    for i in range(n):\n        min_val = np.min(cost_matrix[i, :])\n        cost_matrix[i, :] -= min_val\n\n    # Step 2: Find the maximum number of zeros in the matrix\n    max_zeros = 0\n    while True:\n        zeros = np.argwhere(cost_matrix == 0)\n        if zeros.size > max_zeros:\n            max_zeros = zeros.size\n            row_ind, col_ind = zeros[:, 0], zeros[:, 1]\n        else:\n            break\n\n        # Step 3: Cover all zeros\n        for i in range(n):\n            if row_ind[i] != -1:\n                cost_matrix[row_ind[i], :] += np.inf\n                cost_matrix[:, col_ind[i]] += np.inf\n\n        # Step 4: Find the smallest uncovered value\n        min_val = np.inf\n        for i in range(n):\n            if row_ind[i] == -1:\n                for j in range(n):\n                    if col_ind[j] == -1:\n                        min_val = min(min_val, cost_matrix[i, j])\n\n        # Step 5: Augment the path\n        for i in range(n):\n            if row_ind[i] == -1:\n                for j in range(n):\n                    if col_ind[j] == -1:\n                        cost_matrix[i, j] -= min_val\n                        cost_matrix[row_ind[j], j] += min_val\n\n    return row_ind, col_ind\n\n# Example usage:\ncost_matrix = np.array([[4, 1, 3], [2, 5, 2], [3, 2, 1]])\nrow_ind, col_ind = hungarian_algorithm(cost_matrix)\nprint("Optimal assignment:")\nfor i in range(len(row_ind)):\n    print(f"Point {row_ind[i]} -> Point {col_ind[i]}")