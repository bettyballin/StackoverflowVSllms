def levenshtein_distance(phrase1, phrase2):\n    m, n = len(phrase1), len(phrase2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        dp[i][0] = i\n    for j in range(n + 1):\n        dp[0][j] = j\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            cost = 0 if phrase1[i - 1] == phrase2[j - 1] else 1\n            dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + cost)\n    return dp[m][n]\n\ndef similarity(phrase1, phrase2):\n    distance = levenshtein_distance(phrase1, phrase2)\n    similarity = 1 - distance / max(len(phrase1), len(phrase2))\n    return similarity