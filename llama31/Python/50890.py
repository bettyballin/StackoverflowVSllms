def evaluate_bsp_tree(bsp_tree):\n    # Calculate tree balance\n    max_depth = max(node.depth for node in bsp_tree.nodes)\n    min_depth = min(node.depth for node in bsp_tree.nodes)\n    balance_ratio = max_depth / min_depth\n\n    # Calculate split ratio\n    num_splits = sum(1 for node in bsp_tree.nodes if node.is_split)\n    num_triangles = len(bsp_tree.triangles)\n    split_ratio = num_splits / num_triangles\n\n    # Calculate leaf node distribution\n    leaf_nodes = [node for node in bsp_tree.nodes if node.is_leaf]\n    leaf_triangle_counts = [len(node.triangles) for node in leaf_nodes]\n    avg_leaf_triangles = sum(leaf_triangle_counts) / len(leaf_triangle_counts)\n    std_dev_leaf_triangles = (sum((x - avg_leaf_triangles) ** 2 for x in leaf_triangle_counts) / len(leaf_triangle_counts)) ** 0.5\n\n    return balance_ratio, split_ratio, avg_leaf_triangles, std_dev_leaf_triangles