def find_unlit_nodes(graph, sources, removed_edge):\n    # Mark all reachable nodes as lit\n    lit_nodes = set()\n    for source in sources:\n        dfs(graph, source, lit_nodes)\n\n    # Remove the edge\n    graph.remove_edge(removed_edge)\n\n    # Find nodes that were previously lit but are no longer reachable\n    unlit_nodes = set()\n    for source in sources:\n        dfs(graph, source, unlit_nodes, lit_nodes)\n\n    return unlit_nodes\n\ndef dfs(graph, node, visited, lit_nodes=None):\n    visited.add(node)\n    if lit_nodes is not None and node in lit_nodes:\n        lit_nodes.remove(node)\n    for neighbor in graph.neighbors(node):\n        if neighbor not in visited:\n            dfs(graph, neighbor, visited, lit_nodes)