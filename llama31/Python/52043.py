def find_breaking_floor(floors, coconuts):\n    low, high = 1, floors\n    while low < high and coconuts > 1:\n        mid = (low + high) // 2\n        # Simulate throwing a coconut from the mid floor\n        if is_coconut_broken(mid):  # Assume this function checks if the coconut breaks\n            high = mid\n            coconuts -= 1\n        else:\n            low = mid + 1\n\n    # If we have one coconut left, perform a linear search from the last known safe floor\n    while coconuts > 0 and low <= floors:\n        if is_coconut_broken(low):\n            return low\n        low += 1\n        coconuts -= 1\n\n    # If we run out of coconuts, return the last known safe floor\n    return low - 1\n\ndef is_coconut_broken(floor):\n    # Simulate the coconut breaking or not based on the floor\n    # For demonstration purposes, assume the coconut breaks on floor 10\n    return floor >= 10\n\n# Example usage:\nfloors = 100\ncoconuts = 2\nprint(find_breaking_floor(floors, coconuts))