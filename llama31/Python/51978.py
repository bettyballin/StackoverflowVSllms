import heapq\n\nclass CellSwapRequest:\n    def __init__(self, cell_a, cell_b, priority):\n        self.cell_a = cell_a\n        self.cell_b = cell_b\n        self.priority = priority\n\n    def __lt__(self, other):\n        return self.priority < other.priority\n\nclass CellSwapManager:\n    def __init__(self):\n        self.requests = []\n\n    def add_request(self, cell_a, cell_b, priority):\n        # Ensure (A to B) == (B to A)\n        if cell_a > cell_b:\n            cell_a, cell_b = cell_b, cell_a\n        request = CellSwapRequest(cell_a, cell_b, priority)\n        heapq.heappush(self.requests, request)\n\n    def process_requests(self):\n        while self.requests:\n            request = heapq.heappop(self.requests)\n            # Process the request here\n            print(f"Swapping cells {request.cell_a} and {request.cell_b}")\n\n# Example usage\nmanager = CellSwapManager()\nmanager.add_request("A", "B", 3)\nmanager.add_request("B", "A", 3)  # This will be ignored\nmanager.add_request("C", "D", 1)\nmanager.add_request("D", "C", 1)  # This will be ignored\nmanager.process_requests()