import time\n\nclass TokenBucket:\n    def __init__(self, rate, capacity):\n        self.rate = rate  # tokens per second\n        self.capacity = capacity  # maximum tokens in the bucket\n        self.tokens = capacity\n        self.last_update = time.time()\n\n    def allow(self):\n        current_time = time.time()\n        elapsed_time = current_time - self.last_update\n        self.last_update = current_time\n\n        # Add tokens to the bucket based on elapsed time\n        self.tokens = min(self.capacity, self.tokens + elapsed_time * self.rate)\n\n        if self.tokens >= 1:\n            self.tokens -= 1\n            return True\n        return False\n\n# Example usage\nbucket = TokenBucket(rate=5/8, capacity=5)  # 5 messages per 8 seconds\n\nwhile True:\n    if bucket.allow():\n        print("Message sent!")\n    else:\n        print("Rate limit exceeded. Waiting...")\n        time.sleep(1)