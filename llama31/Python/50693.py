import paramiko\nimport threading\nimport time\n\nclass SSHCommandRunner:\n    def __init__(self, host, username, password, command):\n        self.host = host\n        self.username = username\n        self.password = password\n        self.command = command\n        self.output = []\n        self.session = None\n        self.channel = None\n\n    def connect(self):\n        self.session = paramiko.SSHClient()\n        self.session.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n        self.session.connect(self.host, username=self.username, password=self.password)\n        self.channel = self.session.get_transport().open_session()\n        self.channel.get_pty()\n\n    def run_command(self):\n        self.channel.exec_command(self.command)\n        threading.Thread(target=self.read_output).start()\n\n    def read_output(self):\n        while True:\n            try:\n                line = self.channel.readline()\n                if line:\n                    self.output.append(line.strip())\n                else:\n                    break\n            except Exception as e:\n                print(f"Error reading output: {e}")\n                break\n\n    def stop_command(self):\n        if self.channel is not None:\n            self.channel.close()\n        if self.session is not None:\n            self.session.close()\n\n    def get_output(self):\n        return self.output\n\n# Example usage\nrunner = SSHCommandRunner('localhost', 'username', 'password', 'tail -f /var/log/syslog')\nrunner.connect()\nrunner.run_command()\ntime.sleep(10)  # Let it run for 10 seconds\nrunner.stop_command()\nfor line in runner.get_output():\n    print(line)