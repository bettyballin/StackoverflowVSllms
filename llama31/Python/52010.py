class IntervalTreeNode:\n    def __init__(self, interval):\n        self.interval = interval\n        self.max_end = interval[1]\n        self.left = None\n        self.right = None\n\nclass IntervalTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, interval):\n        self.root = self._insert(self.root, interval)\n\n    def _insert(self, node, interval):\n        if node is None:\n            return IntervalTreeNode(interval)\n\n        if interval[0] < node.interval[0]:\n            node.left = self._insert(node.left, interval)\n        else:\n            node.right = self._insert(node.right, interval)\n\n        node.max_end = max(node.max_end, interval[1])\n        return node\n\n    def search(self, test_number):\n        intervals = []\n        self._search(self.root, test_number, intervals)\n        return intervals\n\n    def _search(self, node, test_number, intervals):\n        if node is None:\n            return\n\n        if test_number < node.interval[0]:\n            self._search(node.left, test_number, intervals)\n        elif test_number > node.max_end:\n            self._search(node.right, test_number, intervals)\n        else:\n            if node.interval[0] <= test_number <= node.interval[1]:\n                intervals.append(node.interval)\n            self._search(node.left, test_number, intervals)\n            self._search(node.right, test_number, intervals)\n\n# Example usage\ntree = IntervalTree()\ntree.insert([0, 5])\ntree.insert([10, 20])\ntree.insert([7, 13])\ntree.insert([-1, 37])\n\ntest_number = 12\nintervals = tree.search(test_number)\nprint(intervals)  # Output: [[7, 13], [10, 20]]