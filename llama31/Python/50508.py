import time\n\n# Instruction execution times (in seconds)\ninstruction_times = {\n    'ADD': 0.5,\n    'SUB': 0.3,\n    'MUL': 1.2,\n    # ...\n}\n\nclass Processor:\n    def __init__(self, clock_speed):\n        self.clock_speed = clock_speed\n        self.instruction_completion_flag = True\n\n    def execute_instruction(self, instruction):\n        # Set the instruction completion flag to False\n        self.instruction_completion_flag = False\n\n        # Execute the instruction\n        execution_time = instruction_times[instruction]\n        time.sleep(execution_time)\n\n        # Set the instruction completion flag to True\n        self.instruction_completion_flag = True\n\n    def run(self):\n        while True:\n            # Check if the previous instruction has completed\n            if not self.instruction_completion_flag:\n                continue\n\n            # Fetch the next instruction\n            instruction = fetch_instruction()\n\n            # Execute the instruction\n            self.execute_instruction(instruction)\n\n            # Wait for the clock speed to ensure synchronization\n            time.sleep(self.clock_speed)\n\n# Set the clock speed to accommodate the longest instruction\nclock_speed = max(instruction_times.values())\n\n# Create a processor instance\nprocessor = Processor(clock_speed)\n\n# Run the processor\nprocessor.run()