def guillotine_bin_packing(dimensions, max_width, max_height):\n    # Sort dimensions by height in descending order\n    dimensions.sort(key=lambda x: x[1], reverse=True)\n\n    # Initialize the bin ( sprite sheet )\n    bin_width = max_width\n    bin_height = 0\n    x, y = 0, 0\n\n    for w, h in dimensions:\n        if x + w > bin_width:\n            x = 0\n            y += bin_height\n            bin_height = 0\n\n        # Place the rectangle at the current position\n        bin_height = max(bin_height, h)\n        x += w\n\n    return bin_width, y + bin_height\n\n# Example usage:\ndimensions = [(10, 20), (30, 15), (20, 10), (15, 25)]\nmax_width = 100\nmax_height = 100\n\nsprite_sheet_width, sprite_sheet_height = guillotine_bin_packing(dimensions, max_width, max_height)\nprint(f"Sprite sheet dimensions: {sprite_sheet_width}x{sprite_sheet_height}")