import hmac\nimport hashlib\nfrom django.conf import settings\nfrom django.utils import timezone\nfrom django.urls import reverse\n\ndef generate_validation_link(user):\n    # Create a timestamp to make the link expire after a certain period\n    timestamp = int(timezone.now().timestamp())\n\n    # Create a message to sign, using the user's details and the timestamp\n    message = f"{user.id}{user.email}{timestamp}"\n\n    # Sign the message using the secret key (in this case, the Django secret key)\n    signature = hmac.new(settings.SECRET_KEY.encode(), message.encode(), hashlib.sha256).hexdigest()\n\n    # Create the validation link\n    validation_link = reverse('validate_user', args=[user.id, timestamp, signature])\n\n    return validation_link\n\ndef validate_user(request, user_id, timestamp, signature):\n    # Get the user from the database\n    user = User.objects.get(id=user_id)\n\n    # Create the message to verify\n    message = f"{user.id}{user.email}{timestamp}"\n\n    # Verify the signature\n    expected_signature = hmac.new(settings.SECRET_KEY.encode(), message.encode(), hashlib.sha256).hexdigest()\n\n    if signature != expected_signature:\n        # If the signature doesn't match, the link is invalid\n        return HttpResponse("Invalid link", status=400)\n\n    # If the signature matches, activate the user\n    user.is_active = True\n    user.save()\n\n    return HttpResponse("User activated!")