import socket\nimport select\n\nclass Peer:\n    def __init__(self, ip, port):\n        self.ip = ip\n        self.port = port\n        self.peers = []\n\n    def connect(self, peer):\n        # Establish a connection to the peer\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.connect((peer.ip, peer.port))\n        self.peers.append(peer)\n\n    def exchange_peers(self, peer):\n        # Send a list of known peers to the connected peer\n        peer_list = [(p.ip, p.port) for p in self.peers]\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.connect((peer.ip, peer.port))\n        sock.sendall(b'\x01' + b''.join([p[0].encode() + b':' + str(p[1]).encode() for p in peer_list]))\n\ndef main():\n    # Create a peer and start listening for incoming connections\n    peer = Peer('localhost', 8080)\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.bind(('localhost', 8080))\n    sock.listen(1)\n\n    while True:\n        readable, _, _ = select.select([sock], [], [], 0)\n        for s in readable:\n            if s is sock:\n                # Handle incoming connection\n                conn, addr = sock.accept()\n                peer.connect(Peer(addr[0], addr[1]))\n\nif __name__ == '__main__':\n    main()