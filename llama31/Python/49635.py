class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end_of_prefix = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, prefix):\n        node = self.root\n        for bit in prefix:\n            if bit not in node.children:\n                node.children[bit] = TrieNode()\n            node = node.children[bit]\n        node.is_end_of_prefix = True\n\n    def longest_prefix_match(self, ip):\n        node = self.root\n        longest_match = 0\n        for bit in ip:\n            if bit in node.children:\n                node = node.children[bit]\n                longest_match += 1\n            else:\n                break\n        return longest_match\n\n# Example usage:\ntrie = Trie()\ntrie.insert("11010011")  # Insert a prefix\n\nip = "1101001101010101"  # IPv6 address (simplified for demonstration)\nlongest_match = trie.longest_prefix_match(ip)\nprint("Longest matching prefix length:", longest_match)