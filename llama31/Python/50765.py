# A classic TSP example using the Nearest Neighbor algorithm\nimport numpy as np\n\ndef nearest_neighbor(points, start_point):\n    """\n    Find the nearest neighbor of a point.\n\n    Args:\n    points (list): A list of points, where each point is a tuple of coordinates.\n    start_point (tuple): The starting point.\n\n    Returns:\n    list: A list of points in the order they should be visited.\n    """\n    visited = [start_point]\n    current_point = start_point\n\n    while len(visited) < len(points):\n        distances = [np.linalg.norm(np.array(current_point) - np.array(point)) for point in points if point not in visited]\n        next_point_index = np.argmin(distances)\n        next_point = [point for point in points if point not in visited][next_point_index]\n        visited.append(next_point)\n        current_point = next_point\n\n    return visited\n\n# Example usage\npoints = [(0, 0), (0, 10), (10, 10), (10, 0), (5, 5)]\nstart_point = points[0]\npath = nearest_neighbor(points, start_point)\nprint(path)