import mmh3\nfrom bitarray import bitarray\n\nclass BloomFilter:\n    def __init__(self, size, hash_functions):\n        self.size = size\n        self.hash_functions = hash_functions\n        self.bit_array = bitarray(size)\n        self.bit_array.setall(0)\n\n    def add(self, word):\n        for seed in self.hash_functions:\n            index = mmh3.hash(word, seed) % self.size\n            self.bit_array[index] = 1\n\n    def lookup(self, word):\n        for seed in self.hash_functions:\n            index = mmh3.hash(word, seed) % self.size\n            if self.bit_array[index] == 0:\n                return False\n        return True\n\nbloom_filter = BloomFilter(size, hash_functions)\nfor word in words:\n    bloom_filter.add(word)\n\nmatches = []\nfor word in words:\n    if bloom_filter.lookup(word):\n        # perform a more expensive search to confirm presence\n        if word in text:\n            matches.append(word)