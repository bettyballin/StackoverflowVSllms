import struct\nimport numpy as np\n\n# String to signed integers\ndef string_to_int8(s):\n    return int(s, 10) if s.lstrip('-').isdigit() else None\n\ndef string_to_int16(s):\n    return int(s, 10) if s.lstrip('-').isdigit() else None\n\ndef string_to_int32(s):\n    return int(s, 10) if s.lstrip('-').isdigit() else None\n\ndef string_to_int64(s):\n    return int(s, 10) if s.lstrip('-').isdigit() else None\n\n# String to unsigned integers\ndef string_to_uint8(s):\n    return int(s, 10) if s.isdigit() else None\n\ndef string_to_uint16(s):\n    return int(s, 10) if s.isdigit() else None\n\ndef string_to_uint32(s):\n    return int(s, 10) if s.isdigit() else None\n\ndef string_to_uint64(s):\n    return int(s, 10) if s.isdigit() else None\n\n# String to floats and doubles\ndef string_to_float(s):\n    return float(s)\n\ndef string_to_double(s):\n    return float(s)\n\n# Using struct library for precise typecasting\ndef string_to_int8_struct(s):\n    return struct.unpack('b', bytes([int(s)]))[0]\n\ndef string_to_uint8_struct(s):\n    return struct.unpack('B', bytes([int(s)]))[0]\n\ndef string_to_int16_struct(s):\n    return struct.unpack('h', bytes([int(s) >> 8, int(s) & 0xFF]))[0]\n\ndef string_to_uint16_struct(s):\n    return struct.unpack('H', bytes([int(s) >> 8, int(s) & 0xFF]))[0]\n\ndef string_to_int32_struct(s):\n    return struct.unpack('i', bytes([int(s) >> 24, (int(s) >> 16) & 0xFF, (int(s) >> 8) & 0xFF, int(s) & 0xFF]))[0]\n\ndef string_to_uint32_struct(s):\n    return struct.unpack('I', bytes([int(s) >> 24, (int(s) >> 16) & 0xFF, (int(s) >> 8) & 0xFF, int(s) & 0xFF]))[0]\n\ndef string_to_int64_struct(s):\n    return struct.unpack('q', bytes([int(s) >> 56, (int(s) >> 48) & 0xFF, (int(s) >> 40) & 0xFF, (int(s) >> 32) & 0xFF, (int(s) >> 24) & 0xFF, (int(s) >> 16) & 0xFF, (int(s) >> 8) & 0xFF, int(s) & 0xFF]))[0]\n\ndef string_to_uint64_struct(s):\n    return struct.unpack('Q', bytes([int(s) >> 56, (int(s) >> 48) & 0xFF, (int(s) >> 40) & 0xFF, (int(s) >> 32) & 0xFF, (int(s) >> 24) & 0xFF, (int(s) >> 16) & 0xFF, (int(s) >> 8) & 0xFF, int(s) & 0xFF]))[0]\n\n# Using numpy library for typecasting\ndef string_to_int8_numpy(s):\n    return np.int8(s)\n\ndef string_to_uint8_numpy(s):\n    return np.uint8(s)\n\ndef string_to_int16_numpy(s):\n    return np.int16(s)\n\ndef string_to_uint16_numpy(s):\n    return np.uint16(s)\n\ndef string_to_int32_numpy(s):\n    return np.int32(s)\n\ndef string_to_uint32_numpy(s):\n    return np.uint32(s)\n\ndef string_to_int64_numpy(s):\n    return np.int64(s)\n\ndef string_to_uint64_numpy(s):\n    return np.uint64(s)\n\ndef string_to_float_numpy(s):\n    return np.float32(s)\n\ndef string_to_double_numpy(s):\n    return np.float64(s)