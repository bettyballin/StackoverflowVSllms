import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.decomposition import NMF\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\n# Load data\ndf = pd.read_csv('netflix_data.csv')\n\n# Preprocess data\ndf = df.dropna()  # remove missing values\ndf['rating'] = df['rating'] / 5  # normalize ratings\n\n# Split data\ntrain_df, test_df = train_test_split(df, test_size=0.2, random_state=42)\n\n# Extract features\nuser_features = train_df[['user_id', 'avg_rating', 'std_rating', 'num_ratings']]\nmovie_features = train_df[['movie_id', 'avg_rating', 'std_rating', 'num_ratings']]\n\n# Train matrix factorization model\nnmf_model = NMF(n_components=10)\nnmf_model.fit(train_df['rating'])\n\n# Train neural network model\nmlp_model = MLPRegressor(hidden_layer_sizes=(10, 10), activation='relu', solver='adam')\nmlp_model.fit(user_features, movie_features, train_df['rating'])\n\n# Train ensemble model\nbagging_model = BaggingRegressor(base_estimator=mlp_model, n_estimators=10)\nbagging_model.fit(user_features, movie_features, train_df['rating'])\n\n# Evaluate models\ny_pred_nmf = nmf_model.predict(test_df['rating'])\ny_pred_mlp = mlp_model.predict(test_df['rating'])\ny_pred_bagging = bagging_model.predict(test_df['rating'])\n\nprint('RMSE (NMF):', mean_squared_error(test_df['rating'], y_pred_nmf))\nprint('RMSE (MLP):', mean_squared_error(test_df['rating'], y_pred_mlp))\nprint('RMSE (Bagging):', mean_squared_error(test_df['rating'], y_pred_bagging))