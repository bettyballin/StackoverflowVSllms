# Pseudo-code for Ray-Polygon Intersection\nfunction rayPolygonIntersection(rayOrigin, rayDirection, polygonVertices):\n    // Convert ray direction to a unit vector for normalization\n    rayDirection = normalize(rayDirection)\n    \n    // Initialize intersection point and distance\n    intersectionPoint = null\n    intersectionDistance = Infinity\n    \n    // Loop through each edge of the polygon\n    for i = 0 to polygonVertices.length - 1:\n        // Get current and next vertices (wrap around for last edge)\n        vertex1 = polygonVertices[i]\n        vertex2 = polygonVertices[(i + 1) % polygonVertices.length]\n        \n        // Calculate the edge vector\n        edgeVector = vertex2 - vertex1\n        \n        // Compute the determinant for intersection (using Cramer's rule approach)\n        determinant = rayDirection.x * edgeVector.y - rayDirection.y * edgeVector.x\n        \n        // If determinant is zero, ray is parallel to edge, so skip\n        if determinant == 0:\n            continue\n        \n        // Compute the t value for the ray parameter\n        t = ((vertex1.x - rayOrigin.x) * edgeVector.y - (vertex1.y - rayOrigin.y) * edgeVector.x) / determinant\n        \n        // If t is negative, intersection is behind the ray origin, so skip\n        if t < 0:\n            continue\n        \n        // Compute the u value for the intersection point on the edge\n        u = ((vertex1.x - rayOrigin.x) * rayDirection.y - (vertex1.y - rayOrigin.y) * rayDirection.x) / determinant\n        \n        // If u is outside the range [0,1], intersection is not within the edge, so skip\n        if u < 0 or u > 1:\n            continue\n        \n        // Check if this intersection is closer than previous ones\n        if t < intersectionDistance:\n            intersectionDistance = t\n            intersectionPoint = rayOrigin + rayDirection * t\n    \n    // Check if the intersection point is actually inside the polygon\n    if intersectionPoint is not null and not pointInPolygon(intersectionPoint, polygonVertices):\n        intersectionPoint = null\n    \n    return intersectionPoint\n\n// Helper function to check if a point is inside a polygon using the point-in-polygon test\nfunction pointInPolygon(point, polygonVertices):\n    inside = false\n    for i = 0 to polygonVertices.length - 1:\n        vertex1 = polygonVertices[i]\n        vertex2 = polygonVertices[(i + 1) % polygonVertices.length]\n        \n        // Check if the ray to the right intersects this edge\n        if (vertex1.y > point.y) != (vertex2.y > point.y) and point.x < (vertex2.x - vertex1.x) * (point.y - vertex1.y) / (vertex2.y - vertex1.y) + vertex1.x:\n            inside = !inside\n    \n    return inside