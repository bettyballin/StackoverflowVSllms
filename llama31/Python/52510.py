def power_of_three(k, memo={}):\n    if k == 0:\n        return 1\n    elif k in memo:\n        return memo[k]\n    else:\n        # Calculate the highest power of 3 less than or equal to k\n        n = 0\n        while 3 ** (n + 1) <= k:\n            n += 1\n        \n        # Calculate the remaining power needed\n        remaining_power = k - 3 ** n\n        \n        # Recursive call for the remaining power, utilizing memoization\n        result = (3 ** n) * power_of_three(remaining_power, memo)\n        \n        # Store the result for future use\n        memo[k] = result\n        \n        return result\n\n# Test the function\nk = 10  # Example input\nresult = power_of_three(k)\nprint(f"3^{k} = {result}")