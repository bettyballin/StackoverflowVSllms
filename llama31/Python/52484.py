from cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import padding\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.backends import default_backend\n\n# Generate a private key for user C\nprivate_key = rsa.generate_private_key(\n    public_exponent=65537,\n    key_size=2048,\n    backend=default_backend()\n)\n\n# Sign a file using the private key\ndef sign_file(file_path, private_key):\n    with open(file_path, 'rb') as f:\n        file_data = f.read()\n    signature = private_key.sign(\n        file_data,\n        padding.PSS(\n            mgf=padding.MGF1(hashes.SHA256()),\n            salt_length=padding.PSS.MAX_LENGTH\n        ),\n        hashes.SHA256()\n    )\n    return signature\n\n# Verify a file using the public key and signature\ndef verify_file(file_path, public_key, signature):\n    with open(file_path, 'rb') as f:\n        file_data = f.read()\n    public_key.verify(\n        signature,\n        file_data,\n        padding.PSS(\n            mgf=padding.MGF1(hashes.SHA256()),\n            salt_length=padding.PSS.MAX_LENGTH\n        ),\n        hashes.SHA256()\n    )\n\n# Example usage:\nfile_path = 'example.txt'\nsignature = sign_file(file_path, private_key)\n\n# Save the signature to a separate file\nwith open(file_path + '.sig', 'wb') as f:\n    f.write(signature)\n\n# Load the public key for verification\npublic_key = private_key.public_key()\n\n# User A or B can verify the file using the public key and signature\nverify_file(file_path, public_key, signature)