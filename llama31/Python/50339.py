from PIL import Image\n\ndef resize_image(original_image_path, target_width, target_height):\n    # Open the original image\n    img = Image.open(original_image_path)\n    original_width, original_height = img.size\n\n    # Calculate scaling factors\n    scale_width = original_width / target_width\n    scale_height = original_height / target_height\n\n    # Choose the smaller scaling factor\n    scale_factor = min(scale_width, scale_height)\n\n    # Resize the image based on the chosen scaling factor\n    new_width = int(original_width / scale_factor)\n    new_height = int(original_height / scale_factor)\n\n    # Resize the image\n    img = img.resize((new_width, new_height))\n\n    # Determine if cropping or padding is needed\n    if new_width > target_width:\n        # Crop horizontally\n        left = (new_width - target_width) // 2\n        right = (new_width + target_width) // 2\n        img = img.crop((left, 0, right, new_height))\n    elif new_height > target_height:\n        # Crop vertically\n        top = (new_height - target_height) // 2\n        bottom = (new_height + target_height) // 2\n        img = img.crop((0, top, new_width, bottom))\n\n    # If padding is needed, it would be handled differently, often by pasting the image onto a new background\n    # of the target size, positioning it to leave even space around it.\n\n    # Save the result\n    img.save("resized_image.jpg")\n\n# Example usage\nresize_image("path/to/your/image.jpg", 210, 150)