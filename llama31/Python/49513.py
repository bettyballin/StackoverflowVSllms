import numpy as np\n\ndef hungarian_algorithm(cost_matrix):\n    n = cost_matrix.shape[0]\n    m = cost_matrix.shape[1]\n\n    # Step 1: Initialize the matrix\n    cost_matrix = cost_matrix - np.min(cost_matrix, axis=0)\n    cost_matrix = cost_matrix - np.min(cost_matrix, axis=1)[:, np.newaxis]\n\n    # Step 2-4: Cover zeros and update matrix\n    covered_rows = np.zeros(n, dtype=np.bool)\n    covered_cols = np.zeros(m, dtype=np.bool)\n    while True:\n        # Find uncovered zeros\n        zeros = np.argwhere((cost_matrix == 0) & ~covered_rows[:, np.newaxis] & ~covered_cols[np.newaxis, :])\n\n        # Cover zeros\n        if len(zeros) == 0:\n            break\n        for row, col in zeros:\n            covered_rows[row] = True\n            covered_cols[col] = True\n\n        # Update matrix\n        min_uncovered = np.min(cost_matrix[~covered_rows[:, np.newaxis] & ~covered_cols[np.newaxis, :]])\n        cost_matrix[~covered_rows[:, np.newaxis] & ~covered_cols[np.newaxis, :]] -= min_uncovered\n        cost_matrix[covered_rows[:, np.newaxis] & covered_cols[np.newaxis, :]] += min_uncovered\n\n    # Read off assignment from matrix\n    assignment = np.zeros(n, dtype=np.int)\n    for i in range(n):\n        assignment[i] = np.argmin(cost_matrix[i, :])\n\n    return assignment\n\n# Example usage\ncost_matrix = np.array([[10, 5, 8], [6, 8, 9], [4, 7, 6]])\nassignment = hungarian_algorithm(cost_matrix)\nprint(assignment)