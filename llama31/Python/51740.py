import math\n\ndef circle_line_collision(circle_x, circle_y, radius, line_x1, line_y1, line_x2, line_y2):\n    # Calculate vectors\n    ax = line_x1 - circle_x\n    ay = line_y1 - circle_y\n    bx = line_x2 - circle_x\n    by = line_y2 - circle_y\n\n    # Calculate dot product\n    dot_product = ax * bx + ay * by\n\n    # Calculate squared length of line segment\n    line_length_squared = (line_x2 - line_x1) ** 2 + (line_y2 - line_y1) ** 2\n\n    # Calculate squared distance from circle center to line segment\n    distance_squared = (ax ** 2 + ay ** 2) - (dot_product ** 2 / line_length_squared)\n\n    # Check for intersection\n    if distance_squared <= radius ** 2:\n        # Calculate collision point\n        collision_x = circle_x + (radius * (ax * bx + ay * by)) / math.sqrt(ax ** 2 + ay ** 2)\n        collision_y = circle_y + (radius * (ax * by - ay * bx)) / math.sqrt(ax ** 2 + ay ** 2)\n        return True, collision_x, collision_y\n    else:\n        return False, None, None\n\n# Example usage:\ncircle_x = 0\ncircle_y = 0\nradius = 5\nline_x1 = -10\nline_y1 = 0\nline_x2 = 10\nline_y2 = 0\n\ncollision, collision_x, collision_y = circle_line_collision(circle_x, circle_y, radius, line_x1, line_y1, line_x2, line_y2)\n\nif collision:\n    print("Collision detected at ({}, {})".format(collision_x, collision_y))\nelse:\n    print("No collision detected.")