import random\n\ndef generate_keypair(p, q):\n    n = p * q\n    phi = (p-1) * (q-1)\n    e = random.randint(1, phi)\n    while gcd(e, phi) != 1:\n        e = random.randint(1, phi)\n    d = mod_inverse(e, phi)\n    return ((e, n), (d, n))\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef mod_inverse(a, m):\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        else:\n            gcd, x, y = extended_gcd(b % a, a)\n            return gcd, y - (b // a) * x, x\n\n    gcd, x, y = extended_gcd(a, m)\n    if gcd != 1:\n        return None\n    else:\n        return x % m\n\n# Example usage:\np = 61\nq = 53\npublic_key, private_key = generate_keypair(p, q)\nprint("Public Key:", public_key)\nprint("Private Key:", private_key)