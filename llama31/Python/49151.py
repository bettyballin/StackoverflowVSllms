def calculate_ownership(revisions):\n    # Initialize a dictionary to store the edit count for each user\n    edit_count = {}\n\n    # Iterate over the revisions\n    for i in range(len(revisions)):\n        # Get the current revision and the previous revision\n        current_revision = revisions[i]\n        previous_revision = revisions[i-1] if i > 0 else None\n\n        # Calculate the edit count for the current revision\n        if previous_revision is None:\n            # First revision, give the author a bonus\n            edit_count[current_revision['user_id']] = len(current_revision['text'].splitlines()) * 2\n        else:\n            # Calculate the diff between the current and previous revisions\n            diff = difflib.Differ()\n            diff_lines = diff.compare(previous_revision['text'].splitlines(), current_revision['text'].splitlines())\n\n            # Count the insertions and deletions\n            insertions = sum(1 for line in diff_lines if line.startswith('+ '))\n            deletions = sum(1 for line in diff_lines if line.startswith('- '))\n\n            # Update the edit count for the current user\n            edit_count[current_revision['user_id']] = edit_count.get(current_revision['user_id'], 0) + insertions + deletions\n\n    # Calculate the total edit count\n    total_edit_count = sum(edit_count.values())\n\n    # Calculate the ownership percentage for each user\n    ownership = {user: (edit_count[user] / total_edit_count) * 100 for user in edit_count}\n\n    # Return the user with the highest ownership percentage\n    return max(ownership, key=ownership.get)\n\n# Example usage:\nrevisions = [\n    {'user_id': 12, 'text': 'The quick brown fox jumps over the lazy dog.'},\n    {'user_id': 27, 'text': 'The quick brown fox jumps, sometimes.'},\n    {'user_id': 30, 'text': 'I always see the speedy brown fox jumping over the lazy dog.'}\n]\n\nprint(calculate_ownership(revisions))