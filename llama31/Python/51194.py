from collections import defaultdict\n\ndef edmonds(graph):\n    # Initialize variables\n    n = len(graph)\n    matching = {}\n    for i in range(n):\n        matching[i] = None\n\n    # Loop until no augmenting path is found\n    while True:\n        # Find an augmenting path using BFS\n        path = bfs(graph, matching)\n        if not path:\n            break\n\n        # Augment the matching along the path\n        for i in range(len(path) - 1):\n            matching[path[i]] = path[i + 1]\n            matching[path[i + 1]] = path[i]\n\n    return matching\n\ndef bfs(graph, matching):\n    # Create a queue for BFS\n    queue = []\n\n    # Add all unmatched vertices to the queue\n    for i in range(len(graph)):\n        if matching[i] is None:\n            queue.append((i, [i]))\n\n    # Perform BFS\n    while queue:\n        (v, path) = queue.pop(0)\n        for u in graph[v]:\n            if matching[u] is None:\n                # Found an augmenting path\n                return path + [u]\n            elif matching[u] != v and matching[u] not in path:\n                # Add the neighbor to the queue\n                queue.append((u, path + [u, matching[u]]))\n\n    # No augmenting path found\n    return None\n\n# Example usage\ngraph = defaultdict(list)\ngraph[0].append(1)\ngraph[0].append(2)\ngraph[1].append(0)\ngraph[1].append(2)\ngraph[2].append(0)\ngraph[2].append(1)\n\nmatching = edmonds(graph)\nprint("Matching:", matching)