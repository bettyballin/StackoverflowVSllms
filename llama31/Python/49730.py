import re\n\ndef fill_pattern(hex_file, pattern):\n    # Read the hex file\n    with open(hex_file, 'r') as f:\n        hex_data = f.read()\n\n    # Split the hex data into lines\n    lines = hex_data.split('\n')\n\n    # Iterate over each line\n    for i, line in enumerate(lines):\n        # Check if the line is a data line (starts with ':')\n        if line.startswith(':'):\n            # Extract the address and data from the line\n            addr, data = line[1:].split(' ', 1)\n\n            # Convert the data to bytes\n            data_bytes = bytes.fromhex(data)\n\n            # Check if the data needs to be filled\n            if len(data_bytes) < 16:  # assuming 16 bytes per line\n                # Fill the data with the pattern\n                fill_bytes = (pattern * (16 - len(data_bytes)))[:16 - len(data_bytes)]\n                data_bytes += fill_bytes\n\n            # Convert the filled data back to hex\n            filled_data = data_bytes.hex()\n\n            # Update the line with the filled data\n            lines[i] = f':{addr} {filled_data}'\n\n    # Join the updated lines back into a single string\n    filled_hex_data = '\n'.join(lines)\n\n    # Write the filled hex data to a new file\n    with open('filled_' + hex_file, 'w') as f:\n        f.write(filled_hex_data)\n\n# Example usage\nfill_pattern('example.hex', b'\xC2\xAF\x00')