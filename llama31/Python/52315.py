import suffix_trees\n\ndef find_common_patterns(strings):\n    # Preprocessing: remove whitespace\n    strings = [s.replace(" ", "") for s in strings]\n\n    # Suffix Tree Construction\n    tree = suffix_trees.STree(strings)\n\n    # Pattern Extraction\n    patterns = {}\n    for node in tree.traverse():\n        if node.is_leaf():\n            continue\n        pattern = node.string\n        if len(pattern) >= 2:\n            patterns[pattern] = [i for i, s in enumerate(strings) if pattern in s]\n\n    # Filter patterns that appear in less than 2 strings\n    patterns = {k: v for k, v in patterns.items() if len(v) >= 2}\n\n    return patterns\n\n# Example usage\nstrings = ["0000abcde0000", "0000abcd00000", "000abc0000000", "00abc000de000"]\npatterns = find_common_patterns(strings)\nfor pattern, indices in patterns.items():\n    print(f"{pattern} was used in {', '.join(map(str, indices))}")