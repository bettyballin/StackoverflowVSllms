from collections import defaultdict\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n\n    def add_edge(self, u, v):\n        self.graph[u].append(v)\n\n    def is_cyclic_util(self, v, visited, rec_stack):\n        visited[v] = True\n        rec_stack[v] = True\n\n        for neighbor in self.graph[v]:\n            if visited[neighbor] == False:\n                if self.is_cyclic_util(neighbor, visited, rec_stack) == True:\n                    return True\n            elif rec_stack[neighbor] == True:\n                return True\n\n        rec_stack[v] = False\n        return False\n\n    def is_cyclic(self):\n        visited = defaultdict(bool)\n        rec_stack = defaultdict(bool)\n        for node in self.graph:\n            if visited[node] == False:\n                if self.is_cyclic_util(node, visited, rec_stack) == True:\n                    return True\n        return False\n\n    def has_dead_end(self, start, end):\n        visited = set()\n        stack = [start]\n\n        while stack:\n            node = stack.pop()\n            if node == end:\n                continue\n            if node in visited:\n                continue\n            visited.add(node)\n            if node not in self.graph:\n                return True\n            stack.extend(self.graph[node])\n\n        return False\n\n\n# Create a graph\ng = Graph()\ng.add_edge('start', 'n1')\ng.add_edge('n1', 'n2')\ng.add_edge('n2', 'n3')\ng.add_edge('n3', 'n4')\ng.add_edge('n4', 'end')\ng.add_edge('n1', 'n5')\ng.add_edge('n5', 'n8')\ng.add_edge('n8', 'n9')\ng.add_edge('n9', 'n10')\ng.add_edge('n10', 'n11')\ng.add_edge('n2', 'n6')\ng.add_edge('n6', 'n7')\n\n# Check for cycles\nif g.is_cyclic():\n    print("Graph contains cycle")\nelse:\n    print("Graph doesn't contain cycle")\n\n# Check for dead ends\nif g.has_dead_end('start', 'end'):\n    print("Graph has a dead end")\nelse:\n    print("Graph doesn't have a dead end")