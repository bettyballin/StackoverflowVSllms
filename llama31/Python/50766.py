import numpy as np\n\ndef grid_cluster(entities, cell_size):\n    """\n    Group entities into cells based on their location.\n    """\n    grid = {}\n    for entity in entities:\n        x, y = entity.location\n        cell_x, cell_y = int(x / cell_size), int(y / cell_size)\n        if (cell_x, cell_y) not in grid:\n            grid[(cell_x, cell_y)] = []\n        grid[(cell_x, cell_y)].append(entity)\n    return grid\n\ndef calculate_centroid(entities):\n    """\n    Calculate the centroid of a list of entities.\n    """\n    x_coords, y_coords = zip(*[entity.location for entity in entities])\n    centroid_x = np.mean(x_coords)\n    centroid_y = np.mean(y_coords)\n    return (centroid_x, centroid_y)\n\n# Example usage:\nentities = [...]  # list of entities with location attribute\ncell_size = 100  # adjust based on zoom level\ngrid = grid_cluster(entities, cell_size)\nfor cell, entities_in_cell in grid.items():\n    centroid = calculate_centroid(entities_in_cell)\n    # Render the centroid as the representative location\n    print(centroid)