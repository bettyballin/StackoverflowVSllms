import threading\nimport queue\nimport time\n\nclass Client:\n    def __init__(self):\n        self.queue = queue.Queue(maxsize=10)\n        self.server = Server(self)\n\n    def start(self):\n        threading.Thread(target=self.process_queue).start()\n\n    def process_queue(self):\n        while True:\n            try:\n                message = self.queue.get(timeout=1)\n                # Process the message\n                print(f"Processed message: {message}")\n                self.queue.task_done()\n            except queue.Empty:\n                # Queue is empty, do nothing\n                pass\n\n    def send_notification(self, message):\n        try:\n            self.queue.put(message, block=False)\n        except queue.Full:\n            # Queue is full, notify the server\n            self.server.queue_full()\n\nclass Server:\n    def __init__(self, client):\n        self.client = client\n        self.pause_notifications = False\n\n    def queue_full(self):\n        self.pause_notifications = True\n        print("Client queue is full, pausing notifications")\n\n    def send_notification(self, message):\n        if not self.pause_notifications:\n            self.client.send_notification(message)\n        else:\n            print("Notifications paused, not sending message")\n\n# Example usage:\nclient = Client()\nclient.start()\n\nserver = client.server\n\n# Simulate sending notifications\nfor i in range(20):\n    server.send_notification(f"Notification {i}")\n    time.sleep(0.1)