import numpy as np\nfrom scipy.spatial import Voronoi\n\ndef voronoi_sphere(points):\n    # Convert points to 3D Cartesian coordinates\n    points_3d = np.array([point_to_3d(point) for point in points])\n\n    # Compute Voronoi diagram\n    vor = Voronoi(points_3d)\n\n    # Convert Voronoi vertices back to spherical coordinates\n    vertices_sphere = np.array([point_to_sphere(point) for point in vor.vertices])\n\n    # Convert Voronoi regions to spherical polygons\n    regions_sphere = []\n    for region in vor.regions:\n        if len(region) > 0 and -1 not in region:\n            polygon = vertices_sphere[region]\n            regions_sphere.append(polygon)\n\n    return regions_sphere\n\ndef point_to_3d(point):\n    # Convert spherical coordinates (theta, phi) to 3D Cartesian coordinates (x, y, z)\n    theta, phi = point\n    x = np.sin(theta) * np.cos(phi)\n    y = np.sin(theta) * np.sin(phi)\n    z = np.cos(theta)\n    return np.array([x, y, z])\n\ndef point_to_sphere(point):\n    # Convert 3D Cartesian coordinates (x, y, z) to spherical coordinates (theta, phi)\n    x, y, z = point\n    theta = np.arccos(z)\n    phi = np.arctan2(y, x)\n    return np.array([theta, phi])\n\n# Example usage\npoints = np.random.rand(10, 2)  # 10 random points on the sphere\nregions = voronoi_sphere(points)\nfor region in regions:\n    print(region)