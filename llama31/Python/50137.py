import dill\nimport inspect\nimport contextlib\n\ndef is_dumpable(obj):\n    try:\n        dill.dumps(obj)\n        return True\n    except:\n        return False\n\ndef get_function_key(f):\n    return inspect.getmodule(f).__name__ + '.' + f.__name__\n\n@contextlib.contextmanager\ndef open_frz_file():\n    try:\n        with open(".frz", "r") as f:\n            yield f\n    except FileNotFoundError:\n        with open(".frz", "w") as f:\n            yield f\n\ndef freeze_behavior(*args, **kwargs):\n    def decorator(f):\n        f_key = get_function_key(f)\n        with open_frz_file() as frz_file:\n            try:\n                past_records = dill.load(frz_file)\n            except EOFError:\n                past_records = {}\n            if f_key not in past_records:\n                past_records[f_key] = []\n            for arg in args:\n                if is_dumpable(arg):\n                    past_records[f_key].append((arg, f(arg)))\n                else:\n                    print(f"Cannot dump argument {arg}")\n            dill.dump(past_records, frz_file)\n        return f\n    return decorator