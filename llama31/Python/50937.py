import random\n\nclass NDFSM:\n    def __init__(self, states, alphabet, transitions):\n        self.states = states\n        self.alphabet = alphabet\n        self.transitions = transitions\n\n    def next_state(self, current_state, input_symbol):\n        possible_next_states = self.transitions[current_state][input_symbol]\n        return random.choice(possible_next_states)\n\n# Define the NDFSM\nstates = ['q0', 'q1', 'q2']\nalphabet = ['a', 'b']\ntransitions = {\n    'q0': {'a': ['q1', 'q2'], 'b': ['q0']},\n    'q1': {'a': ['q2'], 'b': ['q0', 'q1']},\n    'q2': {'a': ['q2'], 'b': ['q1']}\n}\n\n# Create an instance of the NDFSM\nndfsm = NDFSM(states, alphabet, transitions)\n\n# Run the NDFSM\ncurrent_state = 'q0'\ninput_string = 'abba'\nfor symbol in input_string:\n    current_state = ndfsm.next_state(current_state, symbol)\n    print(f"Current state: {current_state}")