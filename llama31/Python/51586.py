def remove_cycles(graph, start_node):\n    visited = set()\n    recursion_stack = set()\n    edges_to_remove = set()\n\n    def dfs(node):\n        visited.add(node)\n        recursion_stack.add(node)\n        \n        for neighbor, is_fixed in graph[node]:\n            if neighbor not in visited:\n                dfs(neighbor)\n            elif neighbor in recursion_stack:\n                if not is_fixed:\n                    edges_to_remove.add((node, neighbor))\n        \n        recursion_stack.remove(node)\n\n    dfs(start_node)\n\n    # Remove edges that create cycles\n    for edge in edges_to_remove:\n        graph[edge[0]] = [(n, f) for n, f in graph[edge[0]] if (n, f) != (edge[1], False)]\n\n    return graph\n\n# Example usage\nif __name__ == "__main__":\n    graph = {\n        'A': [('B', False), ('C', True)],\n        'B': [('D', False), ('A', False)],\n        'C': [('D', True)],\n        'D': [('E', False)],\n        'E': [('B', False)]\n    }\n    \n    start_node = 'A'\n    graph_without_cycles = remove_cycles(graph, start_node)\n    print("Graph without cycles:", graph_without_cycles)