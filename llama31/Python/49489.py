import numpy as np\n\nclass ProbDict:\n    def __init__(self, keys_weights_values={}):\n        self.keys = list(keys_weights_values.keys())\n        self.weights = [v[0] for v in keys_weights_values.values()]\n        self.values = [v[1] for v in keys_weights_values.values()]\n        self._normalize_weights()\n\n    def _normalize_weights(self):\n        self.weights = np.array(self.weights) / sum(self.weights)\n\n    def select_key(self):\n        return np.random.choice(self.keys, p=self.weights)\n\n    def update_weight(self, key, new_weight):\n        idx = self.keys.index(key)\n        self.weights[idx] = new_weight\n        self._normalize_weights()\n\n    def remove_key(self, key):\n        idx = self.keys.index(key)\n        self.keys.pop(idx)\n        self.weights = np.delete(self.weights, idx)\n        self.values.pop(idx)\n        self._normalize_weights()\n\n    def add_key(self, key, weight, value):\n        self.keys.append(key)\n        self.weights = np.append(self.weights, weight)\n        self.values.append(value)\n        self._normalize_weights()\n\n# Example usage\nprob_dict = ProbDict({'one': [20, 'value1'], 'two': [2, 'value2'], 'three': [50, 'value3']})\nselected_key = prob_dict.select_key()\nprint(selected_key)\n\nprob_dict.update_weight('one', 30)\nprob_dict.remove_key('two')\nprob_dict.add_key('four', 10, 'value4')