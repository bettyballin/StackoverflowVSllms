import time\n\nclass TransferEstimator:\n    def __init__(self, alpha=0.1):\n        self.alpha = alpha\n        self.prev_transfer_rate = 0\n        self.prev_estimate = 0\n\n    def update(self, bytes_transferred, time_elapsed):\n        # Calculate the current transfer rate\n        transfer_rate = bytes_transferred / time_elapsed\n\n        # Update the estimated transfer rate using exponential smoothing\n        self.prev_transfer_rate = (1 - self.alpha) * self.prev_transfer_rate + self.alpha * transfer_rate\n\n        # Calculate the estimated time remaining\n        estimated_time_remaining = (total_bytes - bytes_transferred) / self.prev_transfer_rate\n\n        return estimated_time_remaining\n\n# Example usage:\nestimator = TransferEstimator()\ntotal_bytes = 1000000  # Total bytes to transfer\nbytes_transferred = 0\ntime_elapsed = 0\n\nwhile bytes_transferred < total_bytes:\n    # Simulate some transfer progress\n    bytes_transferred += 10000\n    time_elapsed += 1\n\n    # Update the estimator\n    estimated_time_remaining = estimator.update(bytes_transferred, time_elapsed)\n\n    print(f"Estimated time remaining: {estimated_time_remaining:.2f} seconds")