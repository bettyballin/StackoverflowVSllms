import ast\n\ndef validate_code(code):\n    try:\n        tree = ast.parse(code)\n    except SyntaxError:\n        raise ValueError("Invalid code")\n\n    allowed_nodes = set([\n        ast.Module,\n        ast.Expr,\n        ast.Assignment,\n        ast.Num,\n        ast.Str,\n        ast.Name,\n        ast.Load,\n        ast.Store,\n    ])\n\n    class Validator(ast.NodeVisitor):\n        def generic_visit(self, node):\n            if type(node) not in allowed_nodes:\n                raise ValueError("Forbidden node type: {}".format(type(node).__name__))\n            super().generic_visit(node)\n\n    validator = Validator()\n    validator.visit(tree)\n\n# usage\ncode = """\nx = 1\ny = 'hello'\nprint(x)\n"""\n\ntry:\n    validate_code(code)\nexcept ValueError as e:\n    print("Invalid code:", e)\nelse:\n    exec(code)