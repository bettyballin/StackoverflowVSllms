import networkx as nx\n\ndef find_vertices_with_smaller_degree(G):\n    # Compute the degree of each vertex\n    degrees = dict(G.degree())\n\n    # Initialize a set to store the vertices with smaller degree\n    smaller_degree_vertices = set()\n\n    # Iterate through the edges\n    for u, v in G.edges():\n        # Compare the degrees of adjacent vertices\n        if degrees[u] < degrees[v]:\n            smaller_degree_vertices.add(u)\n        elif degrees[v] < degrees[u]:\n            smaller_degree_vertices.add(v)\n\n    return smaller_degree_vertices\n\n# Example usage\nG = nx.Graph()\nG.add_edges_from([(1, 2), (2, 3), (3, 4), (4, 5), (5, 1)])\n\nprint(find_vertices_with_smaller_degree(G))