def add_parentheses(expression):\n    precedence = {\n        '.': 3,\n        '*': 2,\n        '=': 1\n    }\n\n    output = []\n    operator_stack = []\n\n    for token in expression:\n        if token.isalpha():\n            output.append(token)\n        elif token in precedence:\n            while (operator_stack and \n                   precedence[operator_stack[-1]] >= precedence[token]):\n                output.append(operator_stack.pop())\n            operator_stack.append(token)\n        elif token == '(':\n            operator_stack.append(token)\n        elif token == ')':\n            while operator_stack[-1] != '(':\n                output.append(operator_stack.pop())\n            operator_stack.pop()\n\n    while operator_stack:\n        output.append(operator_stack.pop())\n\n    def add_parentheses_recursive(output, precedence):\n        if len(output) == 1:\n            return output\n        elif output[0] in precedence:\n            return ['('] + add_parentheses_recursive(output[1:], precedence) + [')']\n        else:\n            return [output[0]] + add_parentheses_recursive(output[1:], precedence)\n\n    return ''.join(add_parentheses_recursive(output, precedence))\n\nprint(add_parentheses('*a.x++ = *b.x++'))