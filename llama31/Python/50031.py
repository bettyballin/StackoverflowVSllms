def a_star(graph, start, goal, heuristic):\n    open_list = []\n    closed_list = set()\n    came_from = {}\n    cost_so_far = {start: 0}\n\n    open_list.append(start)\n\n    while open_list:\n        current = open_list.pop(0)\n        if current == goal:\n            break\n\n        for neighbor in graph[current]:\n            new_cost = cost_so_far[current] + graph[current][neighbor]\n            if neighbor not in cost_so_far or new_cost < cost_so_far[neighbor]:\n                cost_so_far[neighbor] = new_cost\n                priority = new_cost + heuristic(neighbor, goal)\n                open_list.append(neighbor)\n                came_from[neighbor] = current\n\n        closed_list.add(current)\n\n    # reconstruct path\n    path = []\n    current = goal\n    while current != start:\n        path.append(current)\n        current = came_from[current]\n    path.append(start)\n    return path[::-1]