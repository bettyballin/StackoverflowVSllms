def calculate_lighting(map, light_source):\n    lit_tiles = []\n    for x in range(len(map)):\n        for y in range(len(map[0])):\n            if map[x][y] == 'L':  # light source\n                continue\n            line_of_sight = bresenham_line(light_source, (x, y))\n            blocked = False\n            for tile in line_of_sight:\n                if map[tile[0]][tile[1]] == 'X':  # blocking tile\n                    blocked = True\n                    break\n            if not blocked:\n                distance = math.sqrt((x - light_source[0]) ** 2 + (y - light_source[1]) ** 2)\n                light_intensity = 1 / distance ** 2\n                lit_tiles.append((x, y, light_intensity))\n    return lit_tiles\n\ndef bresenham_line(p1, p2):\n    x1, y1 = p1\n    x2, y2 = p2\n    dx = x2 - x1\n    dy = y2 - y1\n    steps = max(abs(dx), abs(dy))\n    for i in range(steps):\n        x = x1 + i * dx // steps\n        y = y1 + i * dy // steps\n        yield (x, y)