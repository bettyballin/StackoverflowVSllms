import os\nimport secrets\nfrom cryptography.hazmat.primitives import padding\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\n\ndef generate_key(size=256):\n    return secrets.token_bytes(size // 8)\n\ndef encrypt_file(key, file_path):\n    cipher = Cipher(algorithms.AES(key), modes.CBC(b'\0' * 16))\n    encryptor = cipher.encryptor()\n    with open(file_path, 'rb') as f:\n        data = f.read()\n    padder = padding.PKCS7(128).padder()\n    padded_data = padder.update(data) + padder.finalize()\n    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()\n    with open(file_path, 'wb') as f:\n        f.write(encrypted_data)\n\ndef decrypt_file(key, file_path):\n    cipher = Cipher(algorithms.AES(key), modes.CBC(b'\0' * 16))\n    decryptor = cipher.decryptor()\n    with open(file_path, 'rb') as f:\n        encrypted_data = f.read()\n    decrypted_padded_data = decryptor.update(encrypted_data) + decryptor.finalize()\n    unpadder = padding.PKCS7(128).unpadder()\n    data = unpadder.update(decrypted_padded_data) + unpadder.finalize()\n    with open(file_path, 'wb') as f:\n        f.write(data)\n\nkey = generate_key()\nfile_path = 'path/to/your/file.txt'\nencrypt_file(key, file_path)\n# ...\ndecrypt_file(key, file_path)