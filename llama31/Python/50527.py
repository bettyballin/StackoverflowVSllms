import heapq\n\ndef single_linkage_clustering(things, num_clusters):\n    # Initialize clusters as individual objects\n    clusters = [{thing} for thing in things]\n\n    # Calculate distances between all pairs of clusters\n    distances = []\n    for i, cluster1 in enumerate(clusters):\n        for j, cluster2 in enumerate(clusters[i+1:], i+1):\n            distance = min(thing1.DistanceTo(thing2) for thing1 in cluster1 for thing2 in cluster2)\n            heapq.heappush(distances, (distance, i, j))\n\n    # Merge closest clusters until reaching desired number of clusters\n    while len(clusters) > num_clusters:\n        distance, i, j = heapq.heappop(distances)\n        cluster1, cluster2 = clusters[i], clusters[j]\n        new_cluster = cluster1.union(cluster2)\n        clusters[i] = new_cluster\n        del clusters[j]\n\n    return clusters