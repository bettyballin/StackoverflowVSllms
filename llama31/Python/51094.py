from math import gcd\nfrom functools import reduce\n\ndef lcm(a, b):\n    """Compute the lowest common multiple of a and b"""\n    return a * b // gcd(a, b)\n\ndef find_lcm(intervals):\n    """Find the LCM of all intervals"""\n    return reduce(lcm, intervals)\n\ndef next_tasks(intervals, last_tasks):\n    """Determine the next set of tasks based on the last execution"""\n    lcm_value = find_lcm(intervals)\n    next_time = min([last_tasks[i] + intervals[i] for i in range(len(intervals))])\n    tasks_to_execute = [i for i in range(len(intervals)) if (next_time - last_tasks[i]) % intervals[i] == 0]\n    return next_time, tasks_to_execute\n\n# Example usage:\nintervals = [500, 1000, 1500]  # Task intervals\nlast_tasks = [1000, 1000, 0]   # Last execution time for each task\n\nnext_time, tasks_to_execute = next_tasks(intervals, last_tasks)\nprint("Next tasks to execute at time", next_time, ":", [f"{i+1}A" for i in tasks_to_execute])