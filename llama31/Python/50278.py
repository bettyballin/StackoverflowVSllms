def lcp(seed, a, c, m, n):\n    """\n    Linear Congruential Permutation\n\n    Parameters:\n        seed (int): Initial seed\n        a (int): Multiplier\n        c (int): Increment\n        m (int): Modulus\n        n (int): Sequence length\n\n    Returns:\n        int: Next element in the permutation\n    """\n    x = seed\n    for _ in range(n):\n        x = (a * x + c) % m\n        yield x\n\n# Example usage:\nseed = 12345\na = 1103515245\nc = 12345\nm = 2**32  # 2^32 is a common modulus\nn = 8\n\nsequence = [10 + i for i in range(n)]\npermutation = lcp(seed, a, c, m, n)\n\nfor i, x in enumerate(permutation):\n    print(f"f({i+1}) = {sequence[x % n]}")