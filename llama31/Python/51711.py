from http.server import BaseHTTPRequestHandler, HTTPServer\nimport requests\n\nclass RequestHandler(BaseHTTPRequestHandler):\n    def do_request(self):\n        # Insert your static header here\n        headers = {'Your-Static-Header': 'header-value'}\n\n        # Get the original request headers\n        original_headers = {}\n        for key, value in self.headers.items():\n            original_headers[key] = value\n\n        # Merge the original headers with your static header\n        merged_headers = {**original_headers, **headers}\n\n        # Make the request to the target server\n        req = requests.Request(self.command, self.path, headers=merged_headers)\n        prepared = req.prepare()\n        s = requests.Session()\n        response = s.send(prepared)\n\n        # Send the response back to the client\n        self.send_response(response.status_code)\n        for key, value in response.headers.items():\n            self.send_header(key, value)\n        self.end_headers()\n        self.wfile.write(response.content)\n\n    do_GET = do_request\n    do_POST = do_request\n    do_PUT = do_request\n    do_DELETE = do_request\n\ndef run_proxy(server_class=HTTPServer, handler_class=RequestHandler):\n    server_address = ('', 8000)\n    httpd = server_class(server_address, handler_class)\n    print('Starting proxy on port 8000...')\n    httpd.serve_forever()\n\nif __name__ == "__main__":\n    run_proxy()