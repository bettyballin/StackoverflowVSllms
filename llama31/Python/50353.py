import re\n\n# Lexical analysis\ndef tokenize(code):\n    return re.findall(r'\w+|[^\w\s]', code)\n\n# Syntax analysis\ndef parse(tokens):\n    # Simplified parser for demonstration purposes only\n    if tokens[0] == '(':\n        return ['lambda', tokens[1], parse(tokens[2:-1])]\n    elif tokens[0] == 'define':\n        return ['define', tokens[1], parse(tokens[2:])]\n    else:\n        return ['atom', tokens[0]]\n\n# Execution\ndef eval(ast, env):\n    if ast[0] == 'lambda':\n        # Create a new closure\n        return lambda x: eval(ast[2], env + [(ast[1], x)])\n    elif ast[0] == 'define':\n        # Bind a variable to a value\n        env.append((ast[1], eval(ast[2], env)))\n        return None\n    else:\n        # Evaluate an atom (e.g., a variable or a literal)\n        return ast[1]\n\n# Example usage\ncode = "(define x 5) (lambda (x) (+ x x))"\ntokens = tokenize(code)\nast = parse(tokens)\nresult = eval(ast, [])\nprint(result)  # Output: 10