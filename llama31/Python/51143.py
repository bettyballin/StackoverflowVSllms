import re\n\n# Tokenize the input string\ndef tokenize(expression):\n    tokens = re.findall(r'\d+|\+|-|\*|/|\(|\)', expression)\n    return tokens\n\n# Parse the tokens into an AST\ndef parse(tokens):\n    ast = []\n    stack = []\n    for token in tokens:\n        if token.isdigit():\n            ast.append(int(token))\n        elif token in '+-*/':\n            while stack and stack[-1] in '+-*/' and precedence(token) <= precedence(stack[-1]):\n                ast.append(stack.pop())\n            stack.append(token)\n        elif token == '(':\n            stack.append(token)\n        elif token == ')':\n            while stack and stack[-1] != '(':\n                ast.append(stack.pop())\n            stack.pop()  # Remove the '('\n    while stack:\n        ast.append(stack.pop())\n    return ast\n\n# Simplify the AST by removing unnecessary parentheses\ndef simplify(ast):\n    new_ast = []\n    for node in ast:\n        if isinstance(node, list):  # Subexpression\n            new_ast.append(simplify(node))\n        elif node == '(':\n            # Remove unnecessary parentheses\n            if new_ast and new_ast[-1] in '+-*/':\n                new_ast.pop()\n            else:\n                new_ast.append(node)\n        elif node == ')':\n            # Remove unnecessary parentheses\n            if new_ast and new_ast[-1] in '+-*/':\n                new_ast.pop()\n            else:\n                new_ast.append(node)\n        else:\n            new_ast.append(node)\n    return new_ast\n\n# Reconstruct the simplified expression from the AST\ndef reconstruct(ast):\n    expression = ''\n    for node in ast:\n        if isinstance(node, list):\n            expression += '(' + reconstruct(node) + ')'\n        else:\n            expression += str(node)\n    return expression\n\n# Define operator precedence\ndef precedence(operator):\n    if operator in '+-':\n        return 1\n    elif operator in '*/':\n        return 2\n    return 0\n\n# Test the implementation\nexpression = "((2 + 3) * 4) + (5 * 6)"\ntokens = tokenize(expression)\nast = parse(tokens)\nsimplified_ast = simplify(ast)\nsimplified_expression = reconstruct(simplified_ast)\nprint(simplified_expression)  # Output: "2 + 3 * 4 + 5 * 6"