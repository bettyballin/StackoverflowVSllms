def build_tree(data):\n    # Create a dictionary to store the children of each node\n    children = {}\n    for row in data:\n        parent_id = row['ParentId']\n        if parent_id not in children:\n            children[parent_id] = []\n        children[parent_id].append(row)\n\n    # Define a recursive function to build the tree\n    def build_node(node, level=0):\n        html = '<div style="margin-left: {}px">'.format(level * 20)\n        html += '<span>{} - {}</span>'.format(node['Id'], node['Name'])\n        if node['Id'] in children:\n            for child in children[node['Id']]:\n                html += build_node(child, level + 1)\n        html += '</div>'\n        return html\n\n    # Find the root nodes (nodes with ParentId = 0)\n    root_nodes = [row for row in data if row['ParentId'] == 0]\n\n    # Build the tree\n    tree_html = ''\n    for node in root_nodes:\n        tree_html += build_node(node)\n\n    return tree_html\n\n# Example usage\ndata = [\n    {'Id': 1, 'Name': 'Node 1', 'ParentId': 0, 'Order': 10},\n    {'Id': 2, 'Name': 'Node 1.1', 'ParentId': 1, 'Order': 10},\n    {'Id': 3, 'Name': 'Node 2', 'ParentId': 0, 'Order': 20},\n    {'Id': 4, 'Name': 'Node 1.1.1', 'ParentId': 2, 'Order': 10},\n    {'Id': 5, 'Name': 'Node 2.1', 'ParentId': 3, 'Order': 10},\n    {'Id': 6, 'Name': 'Node 1.2', 'ParentId': 1, 'Order': 20},\n]\n\ntree_html = build_tree(data)\nprint(tree_html)