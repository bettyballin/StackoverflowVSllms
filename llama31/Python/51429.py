class Node:\n    def __init__(self, value, children=None):\n        self.value = value\n        self.children = children if children else []\n\ndef tree_edit_distance(t1, t2):\n    # Create a 2D array to store the edit distances between subtrees\n    m = len(t1.children) + 1\n    n = len(t2.children) + 1\n    dp = [[0] * n for _ in range(m)]\n\n    # Initialize the base cases\n    for i in range(m):\n        dp[i][0] = i\n    for j in range(n):\n        dp[0][j] = j\n\n    # Fill in the rest of the table\n    for i in range(1, m):\n        for j in range(1, n):\n            # Calculate the cost of substitution\n            substitution_cost = 0 if t1.children[i-1].value == t2.children[j-1].value else 1\n\n            # Calculate the edit distance\n            dp[i][j] = min(\n                dp[i-1][j] + 1,  # Deletion\n                dp[i][j-1] + 1,  # Insertion\n                dp[i-1][j-1] + substitution_cost  # Substitution\n            )\n\n    # The edit distance is stored in the bottom-right corner of the table\n    return dp[m-1][n-1]\n\n# Example usage:\n# Create two trees\nt1 = Node("A", [Node("B"), Node("C")])\nt2 = Node("A", [Node("B"), Node("D")])\n\n# Calculate the edit distance\ndistance = tree_edit_distance(t1, t2)\nprint(distance)  # Output: 1