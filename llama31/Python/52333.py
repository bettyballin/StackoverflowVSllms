def generate_strings(length, max_ones, max_neg_ones):\n    alphabet = [-1, 0, 1]\n    def backtrack(current_string, ones, neg_ones):\n        if len(current_string) == length:\n            yield current_string\n        else:\n            for char in alphabet:\n                if char == 1 and ones < max_ones:\n                    yield from backtrack(current_string + [char], ones + 1, neg_ones)\n                elif char == -1 and neg_ones < max_neg_ones:\n                    yield from backtrack(current_string + [char], ones, neg_ones + 1)\n                elif char == 0:\n                    yield from backtrack(current_string + [char], ones, neg_ones)\n\n    return list(backtrack([], 0, 0))\n\n# Example usage:\nlength = 24\nmax_ones = 8\nmax_neg_ones = 8\nresult = generate_strings(length, max_ones, max_neg_ones)\nprint(len(result))  # Should print approximately 128,000