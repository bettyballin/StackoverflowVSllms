def multiply_long_ints(a, b):\n    # Split the input numbers into 64-bit chunks\n    a_chunks = [int(a[i:i+16], 16) for i in range(0, len(a), 16)]\n    b_chunks = [int(b[i:i+16], 16) for i in range(0, len(b), 16)]\n\n    # Initialize the result\n    result = [0] * (len(a_chunks) + len(b_chunks))\n\n    # Multiply each chunk and accumulate the result\n    for i in range(len(a_chunks)):\n        for j in range(len(b_chunks)):\n            mul = a_chunks[i] * b_chunks[j]\n            result[i + j] += mul & 0xFFFFFFFFFFFFFFFF\n            if mul > 0xFFFFFFFFFFFFFFFF:\n                result[i + j + 1] += mul >> 64\n\n    # Propagate any carry-overs\n    for i in range(len(result) - 1):\n        result[i + 1] += result[i] >> 64\n        result[i] &= 0xFFFFFFFFFFFFFFFF\n\n    # Convert the result back to a string\n    result_str = ''\n    for chunk in result[::-1]:\n        result_str += format(chunk, '016x')\n    return result_str.lstrip('0')