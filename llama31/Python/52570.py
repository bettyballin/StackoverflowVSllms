from cryptography.hazmat.primitives import padding\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.backends import default_backend\n\ndef encrypt_email(email, key):\n    # Generate a random initialization vector (IV)\n    iv = os.urandom(16)\n\n    # Create a new AES-256 cipher object\n    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())\n\n    # Pad the email address to the block size\n    padder = padding.PKCS7(128).padder()\n    padded_email = padder.update(email.encode('utf-8')) + padder.finalize()\n\n    # Encrypt the padded email address\n    encryptor = cipher.encryptor()\n    ct = encryptor.update(padded_email) + encryptor.finalize()\n\n    # Return the IV and the encrypted email address\n    return iv + ct\n\ndef decrypt_email(encrypted_email, key):\n    # Extract the IV and the encrypted email address\n    iv = encrypted_email[:16]\n    ct = encrypted_email[16:]\n\n    # Create a new AES-256 cipher object\n    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())\n\n    # Decrypt the email address\n    decryptor = cipher.decryptor()\n    padded_email = decryptor.update(ct) + decryptor.finalize()\n\n    # Unpad the decrypted email address\n    unpadder = padding.PKCS7(128).unpadder()\n    email = unpadder.update(padded_email) + unpadder.finalize()\n\n    # Return the decrypted email address\n    return email.decode('utf-8')