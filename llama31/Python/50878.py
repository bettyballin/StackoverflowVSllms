class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_word = True\n\n    def search(self, text):\n        node = self.root\n        matches = []\n        for i in range(len(text)):\n            char = text[i]\n            if char in node.children:\n                node = node.children[char]\n                if node.is_word:\n                    matches.append((i - len(word) + 1, word))\n            else:\n                node = self.root\n        return matches\n\ntrie = Trie()\nfor word in words:\n    trie.insert(word)\n\nmatches = trie.search(text)