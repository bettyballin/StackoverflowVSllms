import socket\nimport threading\n\n# Multicast address and port for discovery\nMCAST_GRP = '224.1.1.1'\nMCAST_PORT = 5007\n\n# UDP port for messaging\nUDP_PORT = 5008\n\ndef announce_presence():\n    # Create a multicast socket\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)\n    sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 32)\n    \n    # Join the multicast group\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    sock.bind(('', MCAST_PORT))\n    mreq = socket.inet_aton(MCAST_GRP) + socket.inet_aton('0.0.0.0')\n    sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)\n    \n    # Announce presence\n    sock.sendto(b'Hello, I\'m here!', (MCAST_GRP, MCAST_PORT))\n\ndef listen_for_announcements():\n    # Create a multicast socket\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)\n    sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 32)\n    \n    # Join the multicast group\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    sock.bind(('', MCAST_PORT))\n    mreq = socket.inet_aton(MCAST_GRP) + socket.inet_aton('0.0.0.0')\n    sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)\n    \n    while True:\n        data, addr = sock.recvfrom(1024)\n        print(f'Received announcement from {addr}: {data.decode()}')\n\ndef listen_for_messages():\n    # Create a UDP socket\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    sock.bind(('', UDP_PORT))\n    \n    while True:\n        data, addr = sock.recvfrom(1024)\n        print(f'Received message from {addr}: {data.decode()}')\n\ndef send_message(addr, message):\n    # Create a UDP socket\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    sock.sendto(message.encode(), (addr, UDP_PORT))\n\n# Start announcing presence and listening for announcements\nannounce_thread = threading.Thread(target=announce_presence)\nannounce_thread.start()\n\nlisten_announce_thread = threading.Thread(target=listen_for_announcements)\nlisten_announce_thread.start()\n\n# Start listening for messages\nlisten_message_thread = threading.Thread(target=listen_for_messages)\nlisten_message_thread.start()\n\n# Example usage: send a message to another node\nsend_message('192.168.1.100', 'Hello, how are you?')