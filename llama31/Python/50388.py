def calculate_word_complexity(word):\n    # Define the keyboard layout\n    keyboard_layout = [\n        ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n        ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'],\n        ['z', 'x', 'c', 'v', 'b', 'n', 'm']\n    ]\n\n    # Define the finger assignments\n    finger_assignments = {\n        'index': ['f', 'j'],\n        'middle': ['d', 'k'],\n        'ring': ['s', 'l'],\n        'little': ['a', 'z', 'q', 'x']\n    }\n\n    # Define the base difficulty scores\n    base_difficulty_scores = {\n        'index': 1,\n        'middle': 2,\n        'ring': 3,\n        'little': 4\n    }\n\n    # Calculate the difficulty score for each key in the word\n    difficulty_score = 0\n    for char in word:\n        # Determine the finger used to press the key\n        finger = None\n        for finger_name, keys in finger_assignments.items():\n            if char.lower() in keys:\n                finger = finger_name\n                break\n\n        # Calculate the base difficulty score\n        base_score = base_difficulty_scores[finger]\n\n        # Add a penalty for moving fingers from their home row\n        row_penalty = 0\n        if finger == 'index':\n            if char.isupper():\n                row_penalty = 1\n        elif finger == 'middle':\n            if char.isupper():\n                row_penalty = 1\n        elif finger == 'ring':\n            if char.isupper():\n                row_penalty = 2\n        elif finger == 'little':\n            if char.isupper():\n                row_penalty = 2\n\n        # Add a penalty for using the shift key\n        shift_penalty = 0\n        if char.isupper():\n            shift_penalty = 2\n\n        # Calculate the total difficulty score for the key\n        key_difficulty_score = base_score + row_penalty + shift_penalty\n\n        # Add the key difficulty score to the total difficulty score\n        difficulty_score += key_difficulty_score\n\n    return difficulty_score