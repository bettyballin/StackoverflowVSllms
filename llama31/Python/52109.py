class TrieNode:\n    def __init__(self, prefix):\n        self.prefix = prefix\n        self.children = {}\n        self.is_end_of_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode("")\n\n    def insert(self, word):\n        node = self.root\n        prefix = ""\n        for char in word:\n            prefix += char\n            if char not in node.children:\n                node.children[char] = TrieNode(prefix)\n            node = node.children[char]\n        node.is_end_of_word = True\n\n    def find(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return node.is_end_of_word\n\n    def _split_node(self, node, prefix):\n        # split node into two nodes at the given prefix\n        new_node = TrieNode(prefix)\n        node.children = {k: v for k, v in node.children.items() if k.startswith(prefix)}\n        new_node.children = {k: v for k, v in node.children.items() if not k.startswith(prefix)}\n        node.children = {prefix: new_node}\n        return new_node\n\n    def _rearrange_nodes(self, node, word):\n        # rearrange nodes locally at the given node\n        prefix = node.prefix\n        if word == prefix:\n            # case 1: word is identical to prefix\n            return\n        elif word.startswith(prefix):\n            # case 2: word is a proper prefix of prefix\n            self._split_node(node, word)\n        elif prefix.startswith(word):\n            # case 3: prefix is a proper prefix of word\n            new_node = TrieNode(word)\n            node.children = {k: v for k, v in node.children.items() if k.startswith(word)}\n            new_node.children = {k: v for k, v in node.children.items() if not k.startswith(word)}\n            node.children = {word: new_node}\n        else:\n            # case 4: word and prefix share some common prefix\n            common_prefix = ""\n            for i in range(min(len(word), len(prefix))):\n                if word[i] == prefix[i]:\n                    common_prefix += word[i]\n                else:\n                    break\n            self._split_node(node, common_prefix)\n            new_node = TrieNode(word)\n            node.children[common_prefix].children = {k: v for k, v in node.children.items() if k.startswith(common_prefix)}\n            node.children[common_prefix].children[word] = new_node\n\n    def insert_with_rearrangement(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode(node.prefix + char)\n            node = node.children[char]\n        self._rearrange_nodes(node, word)\n        node.is_end_of_word = True