import hashlib\nimport hmac\n\ndef encrypt_value(value, key):\n    # Simplified encryption for demonstration purposes\n    return hmac.new(key, value.encode(), hashlib.sha256).hexdigest()\n\ndef create_index(value, key):\n    # Create an index for partial matching\n    index = []\n    for i in range(len(value)):\n        for j in range(i + 1, len(value) + 1):\n            substring = value[i:j]\n            index.append(encrypt_value(substring, key))\n    return index\n\n# Example usage:\nkey = b'my_secret_key'\nvalue = '4th Street'\n\nencrypted_value = encrypt_value(value, key)\nindex = create_index(value, key)\n\n# Store the encrypted value and index in your database\n\n# To search for a partial match:\nsearch_term = 'Street'\nsearch_index = create_index(search_term, key)\n\n# Query your database for matches\nmatches = [encrypted_value for encrypted_value, index in db_data if any(search_term in index for search_term in search_index)]