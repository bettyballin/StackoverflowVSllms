import heapq\n\nclass DuplicateFilter:\n    def __init__(self):\n        self.queue = []\n        self.unique_values = set()\n\n    def add_value(self, value, timestamp):\n        # Add the value to the queue\n        heapq.heappush(self.queue, (timestamp, value))\n\n        # Check if the value is already in the unique_values set\n        if value not in self.unique_values:\n            self.unique_values.add(value)\n            # Process the value (e.g., insert into database)\n            process_value(value, timestamp)\n\n        # Remove any duplicate values from the queue\n        while self.queue and self.queue[0][1] in self.unique_values:\n            heapq.heappop(self.queue)\n\ndef process_value(value, timestamp):\n    # Insert the value into the database\n    print(f"Inserting value {value} at timestamp {timestamp}")\n\n# Example usage:\nfilter = DuplicateFilter()\nfilter.add_value('1', 1643723400)\nfilter.add_value('0', 1643723405)\nfilter.add_value('1', 1643723410)\nfilter.add_value('1', 1643723402)  # Duplicate value, ignored\nfilter.add_value('0', 1643723415)