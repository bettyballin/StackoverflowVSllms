import random\n\nclass AntColony:\n    def __init__(self, num_ants, num_cities):\n        self.num_ants = num_ants\n        self.num_cities = num_cities\n        self.pheromone_matrix = [[1 for _ in range(num_cities)] for _ in range(num_cities)]\n\n    def run(self):\n        # Initialize ants\n        ants = [Ant(self.num_cities) for _ in range(self.num_ants)]\n\n        # Iterate over generations\n        for gen in range(100):\n            # Move ants\n            for ant in ants:\n                ant.move(self.pheromone_matrix)\n\n            # Update pheromone matrix\n            self.update_pheromone_matrix(ants)\n\n        # Return best solution\n        return min(ants, key=lambda ant: ant.fitness).solution\n\nclass Ant:\n    def __init__(self, num_cities):\n        self.num_cities = num_cities\n        self.solution = []\n        self.fitness = 0\n\n    def move(self, pheromone_matrix):\n        # Choose next city based on pheromone trails\n        next_city = random.choices(range(self.num_cities), weights=[pheromone_matrix[self.solution[-1]][i] for i in range(self.num_cities)])[0]\n        self.solution.append(next_city)\n\n    def update_fitness(self):\n        # Calculate fitness (e.g., total distance)\n        self.fitness = sum([distance(self.solution[i], self.solution[i+1]) for i in range(len(self.solution)-1)])\n\ndef update_pheromone_matrix(ants):\n    # Update pheromone matrix based on ant solutions\n    for ant in ants:\n        for i in range(len(ant.solution)-1):\n            pheromone_matrix[ant.solution[i]][ant.solution[i+1]] += 1 / ant.fitness\n\n# Example usage:\nnum_ants = 10\nnum_cities = 5\nant_colony = AntColony(num_ants, num_cities)\nbest_solution = ant_colony.run()\nprint("Best solution:", best_solution)