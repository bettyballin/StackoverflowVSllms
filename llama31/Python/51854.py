import math\n\ndef error(x, y):\n    # Your expensive error function goes here\n    # This is just a placeholder\n    return (x - 2) ** 2 + (y - 3) ** 2\n\ndef integer_coordinate_descent(x0, y0, max_iter):\n    x, y = x0, y0\n    best_x, best_y = x, y\n    best_error = error(x, y)\n\n    for _ in range(max_iter):\n        # Line search in x direction\n        for dx in [-1, 1]:\n            new_x = x + dx\n            new_error = error(new_x, y)\n            if new_error < best_error:\n                best_x, best_y = new_x, y\n                best_error = new_error\n\n        # Line search in y direction\n        for dy in [-1, 1]:\n            new_y = y + dy\n            new_error = error(x, new_y)\n            if new_error < best_error:\n                best_x, best_y = x, new_y\n                best_error = new_error\n\n        # Update current point\n        x, y = best_x, best_y\n\n    return best_x, best_y\n\n# Example usage\nx0, y0 = 0, 0  # Initial point\nmax_iter = 100\nbest_x, best_y = integer_coordinate_descent(x0, y0, max_iter)\nprint("Minimum error:", error(best_x, best_y))\nprint("Optimal point:", (best_x, best_y))