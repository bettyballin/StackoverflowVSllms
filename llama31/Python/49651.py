def find_highest_floor(total_floors):\n    # Initialize the first marble's drop floor\n    drop_floor = 1\n\n    # Loop until we find the highest floor\n    while drop_floor < total_floors:\n        # Drop the first marble from the current floor\n        # If it breaks, move to the linear search phase\n        if marble_breaks(drop_floor):\n            # Find the exact floor using the second marble\n            return linear_search(drop_floor // 2, drop_floor)\n\n        # If the marble doesn't break, move to the next exponential floor\n        drop_floor *= 2\n\n    # If we reach the top floor without breaking, return it\n    return total_floors\n\ndef marble_breaks(floor):\n    # Simulate the marble breaking (replace with actual logic)\n    return floor >= 50  # Replace with actual breaking floor\n\ndef linear_search(start, end):\n    # Perform a linear search between start and end floors\n    for floor in range(start, end + 1):\n        if marble_breaks(floor):\n            return floor - 1\n    return end