import numpy as np\n\ndef hungarian_algorithm(cost_matrix):\n    # Initialize the cost matrix\n    cost_matrix = np.array(cost_matrix)\n\n    # Step 1: Initialize the labels\n    labels = np.zeros((cost_matrix.shape[0],))\n\n    # Step 2: Find the maximum number of zeros in the matrix\n    max_zeros = 0\n    max_zero_row = -1\n    for i in range(cost_matrix.shape[0]):\n        zeros = np.count_nonzero(cost_matrix[i, :] == 0)\n        if zeros > max_zeros:\n            max_zeros = zeros\n            max_zero_row = i\n\n    # Step 3: Cover all zeros in the matrix\n    covered_cols = np.zeros((cost_matrix.shape[1],), dtype='bool')\n    covered_rows = np.zeros((cost_matrix.shape[0],), dtype='bool')\n    for i in range(cost_matrix.shape[0]):\n        for j in range(cost_matrix.shape[1]):\n            if cost_matrix[i, j] == 0 and not covered_cols[j]:\n                covered_cols[j] = True\n                covered_rows[i] = True\n\n    # Step 4: Find the smallest uncovered value\n    min_uncovered = np.inf\n    for i in range(cost_matrix.shape[0]):\n        if not covered_rows[i]:\n            for j in range(cost_matrix.shape[1]):\n                if not covered_cols[j]:\n                    min_uncovered = min(min_uncovered, cost_matrix[i, j])\n\n    # Step 5: Update the labels and the cost matrix\n    for i in range(cost_matrix.shape[0]):\n        if not covered_rows[i]:\n            labels[i] += min_uncovered\n    for j in range(cost_matrix.shape[1]):\n        if covered_cols[j]:\n            cost_matrix[:, j] -= min_uncovered\n\n    # Repeat steps 2-5 until all zeros are covered\n    while not np.all(covered_cols):\n        # Find an uncovered zero\n        uncovered_zero = np.where((cost_matrix == 0) & ~covered_cols & ~covered_rows)\n        if uncovered_zero[0].size == 0:\n            break\n\n        # Cover the uncovered zero\n        covered_cols[uncovered_zero[1][0]] = True\n        covered_rows[uncovered_zero[0][0]] = True\n\n    # The labels now contain the assignment\n    return labels