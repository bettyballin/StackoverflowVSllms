def closest_string(S, L):\n    # Preprocessing\n    T = Trie(L)\n    V_L = [char_freq_vector(s) for s in L]\n\n    # Search\n    V_S = char_freq_vector(S)\n    max_score = 0\n    closest_string = None\n\n    traverse(T, V_S, max_score, closest_string)\n\ndef traverse(node, V_S, max_score, closest_string):\n    if node.is_leaf():\n        score = dot_product(V_S, V_L[node.string_index])\n        if score > max_score:\n            max_score = score\n            closest_string = node.string\n    else:\n        for child in node.children:\n            traverse(child, V_S, max_score, closest_string)\n\ndef char_freq_vector(s):\n    # Create a frequency vector of size 256\n    V = [0] * 256\n    for c in s:\n        V[ord(c)] += 1\n    return V\n\ndef dot_product(V1, V2):\n    return sum(V1[i] * V2[i] for i in range(256))