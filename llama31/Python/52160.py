import click\n\n# Define the command vocabulary\nCOMMANDS = {\n    'login': {'description': 'Log in to the system'},\n    'logout': {'description': 'Log out of the system'},\n    'list_users': {'description': 'List all users'}\n}\n\n# Define the state machine/context object\nclass AppState:\n    def __init__(self):\n        self.logged_in = False\n\n    def get_available_commands(self):\n        if self.logged_in:\n            return ['logout', 'list_users']\n        else:\n            return ['login']\n\n# Define the base Command class\nclass Command:\n    def execute(self, app_state):\n        raise NotImplementedError\n\n    def get_available_commands(self, app_state):\n        raise NotImplementedError\n\n# Define concrete command classes\nclass LoginCommand(Command):\n    def execute(self, app_state):\n        # Login logic here\n        app_state.logged_in = True\n\n    def get_available_commands(self, app_state):\n        return ['logout', 'list_users']\n\nclass LogoutCommand(Command):\n    def execute(self, app_state):\n        # Logout logic here\n        app_state.logged_in = False\n\n    def get_available_commands(self, app_state):\n        return ['login']\n\n# Create the CLI application\n@click.group()\ndef cli():\n    pass\n\n@cli.command()\ndef login():\n    app_state = AppState()\n    cmd = LoginCommand()\n    cmd.execute(app_state)\n    print("Logged in!")\n\n@cli.command()\ndef logout():\n    app_state = AppState()\n    cmd = LogoutCommand()\n    cmd.execute(app_state)\n    print("Logged out!")\n\nif __name__ == '__main__':\n    cli()