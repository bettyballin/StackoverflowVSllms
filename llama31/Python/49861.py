from collections import deque\n\ndef bfs(graph, start, end):\n    queue = deque([[start]])\n    paths = []\n\n    while queue:\n        path = queue.popleft()\n        node = path[-1]\n\n        if node == end:\n            paths.append(path)\n        else:\n            for neighbor in graph.get(node, []):\n                if neighbor not in path:\n                    queue.append(path + [neighbor])\n\n    return paths\n\n# Define the graph\ngraph = {\n    1: [2],\n    2: [3, 5],\n    3: [6],\n    4: [2],\n    5: [6, 11],\n    6: [7, 8],\n    7: [],\n    8: [9, 10],\n    9: [],\n    10: [],\n    11: [12],\n    12: []\n}\n\nstart_node = 1\nend_node = 7\n\npaths = bfs(graph, start_node, end_node)\nprint("Paths from {} to {}: {}".format(start_node, end_node, len(paths)))\nfor path in paths:\n    print(path)