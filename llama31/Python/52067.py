import ssl\nimport socket\n\nclass IRCClient:\n    def __init__(self, host, port, nickname, channel, ssl=True):\n        self.host = host\n        self.port = port\n        self.nickname = nickname\n        self.channel = channel\n        self.ssl = ssl\n        self.socket = None\n\n    def connect(self):\n        # Create socket\n        self.socket = socket.socket(socket.AF_INET)\n        \n        if self.ssl:\n            # Wrap socket with SSL context\n            context = ssl.create_default_context()\n            self.socket = context.wrap_socket(self.socket, server_hostname=self.host)\n\n        # Connect to server\n        self.socket.connect((self.host, self.port))\n\n        # Send initial commands to server\n        self.send_command(f"USER {self.nickname} {self.nickname} bla :{self.nickname}")\n        self.send_command(f"NICK {self.nickname}")\n        self.send_command(f"JOIN {self.channel}")\n\n    def send_command(self, command):\n        self.socket.send((command + "\r\n").encode("utf-8"))\n\n    def receive_data(self):\n        return self.socket.recv(2048).decode("utf-8")\n\n    def close(self):\n        self.socket.close()\n\n# Example usage:\nif __name__ == "__main__":\n    host = "irc.example.com"\n    port = 6697  # Common SSL port for IRC\n    nickname = "exampleUser"\n    channel = "#exampleChannel"\n\n    client = IRCClient(host, port, nickname, channel)\n    client.connect()\n\n    while True:\n        data = client.receive_data()\n        print(data)\n\n        # Simple example to respond to ping to avoid being disconnected\n        if "PING" in data:\n            client.send_command("PONG :pingis")\n\n    client.close()