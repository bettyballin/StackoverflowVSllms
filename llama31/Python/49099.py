class SegmentNode:\n    def __init__(self, value, is_match):\n        self.value = value\n        self.is_match = is_match\n        self.children = []\n\ndef split_string(input_string, patterns):\n    root = SegmentNode(input_string, False)\n    for pattern in patterns:\n        split_node(root, pattern)\n    return flatten_tree(root)\n\ndef split_node(node, pattern):\n    if node.is_match:\n        return\n    segments = re.split(pattern, node.value)\n    for segment in segments:\n        child = SegmentNode(segment, False)\n        node.children.append(child)\n        if re.search(pattern, segment):\n            child.is_match = True\n            split_node(child, pattern)\n\ndef flatten_tree(node):\n    result = []\n    if node.is_match:\n        result.append(node.value)\n    else:\n        for child in node.children:\n            result.extend(flatten_tree(child))\n    return result