import numpy as np\n\ndef pack_items(items, bin_dimensions):\n    """\n    Pack items into bins using the First-Fit Decreasing Height (FFDH) algorithm.\n\n    Parameters:\n    items (list): List of items, where each item is a tuple of (weight, length, width, height)\n    bin_dimensions (tuple): Tuple of (max_length, max_width, max_height, max_weight)\n\n    Returns:\n    list: List of bins, where each bin is a list of items\n    """\n    # Sort items by height in descending order\n    items.sort(key=lambda x: x[3], reverse=True)\n\n    # Initialize bins\n    bins = []\n\n    # Iterate over items\n    for item in items:\n        # Find the first bin that can accommodate the item\n        for bin in bins:\n            if can_fit(item, bin, bin_dimensions):\n                # Add item to bin\n                bin.append(item)\n                break\n        else:\n            # Create a new bin\n            bins.append([item])\n\n    return bins\n\ndef can_fit(item, bin, bin_dimensions):\n    """\n    Check if an item can fit in a bin.\n\n    Parameters:\n    item (tuple): Tuple of (weight, length, width, height)\n    bin (list): List of items in the bin\n    bin_dimensions (tuple): Tuple of (max_length, max_width, max_height, max_weight)\n\n    Returns:\n    bool: True if the item can fit, False otherwise\n    """\n    # Calculate the total volume of the bin\n    bin_volume = sum(item[1] * item[2] * item[3] for item in bin)\n\n    # Calculate the remaining volume in the bin\n    remaining_volume = bin_dimensions[0] * bin_dimensions[1] * bin_dimensions[2] - bin_volume\n\n    # Check if the item can fit in the remaining volume\n    return item[1] * item[2] * item[3] <= remaining_volume\n\n# Example usage\nitems = [\n    (1, 10, 5, 5),\n    (2, 15, 10, 10),\n    (3, 8, 8, 8),\n    (4, 12, 12, 12),\n]\n\nbin_dimensions = (100, 50, 50, 20)\n\nbins = pack_items(items, bin_dimensions)\n\nprint(bins)