from collections import defaultdict\n\ndef find_redundant_edges(graph):\n    visited = set()\n    rec_stack = set()\n    redundant_edges = []\n\n    def dfs(node, parent):\n        visited.add(node)\n        rec_stack.add(node)\n\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                if dfs(neighbor, node):\n                    redundant_edges.append((node, neighbor))\n            elif neighbor in rec_stack:\n                # Cycle detected, remove edge\n                redundant_edges.append((node, neighbor))\n                return True\n\n        rec_stack.remove(node)\n        return False\n\n    for node in graph:\n        if node not in visited:\n            dfs(node, None)\n\n    return redundant_edges\n\n# Example usage:\ngraph = {\n    'a': ['b', 'c', 'd', 'e'],\n    'b': ['a', 'c'],\n    'c': ['a', 'b', 'd'],\n    'd': ['a', 'c'],\n    'e': ['a']\n}\n\nredundant_edges = find_redundant_edges(graph)\nprint(redundant_edges)  # Output: [('a', 'd'), ('a', 'e')]