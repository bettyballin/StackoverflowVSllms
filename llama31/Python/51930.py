class ETA:\n    def __init__(self, smoothing_factor=0.1):\n        self.smoothing_factor = smoothing_factor\n        self.previous_estimate = None\n        self.previous_progress = None\n        self.previous_time = None\n\n    def estimate(self, progress, time):\n        if self.previous_progress is None or self.previous_time is None:\n            self.previous_progress = progress\n            self.previous_time = time\n            return None\n\n        # Calculate the time difference\n        time_diff = time - self.previous_time\n\n        # Calculate the progress rate\n        progress_rate = (progress - self.previous_progress) / time_diff\n\n        # Calculate the estimated time of completion\n        estimate = (1 - progress) / progress_rate\n\n        # Apply smoothing to the estimate\n        if self.previous_estimate is not None:\n            estimate = self.smoothing_factor * estimate + (1 - self.smoothing_factor) * self.previous_estimate\n\n        # Update the previous values\n        self.previous_estimate = estimate\n        self.previous_progress = progress\n        self.previous_time = time\n\n        return estimate\n\n# Example usage\neta = ETA()\n\n# Simulate some progress\nfor i in range(10):\n    progress = i / 10.0\n    time = i  # Assuming time is in seconds\n    estimate = eta.estimate(progress, time)\n    print(f"Progress: {progress:.2f}, ETA: {estimate:.2f} seconds")