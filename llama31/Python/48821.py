import numpy as np\n\ndef greedy_dense_submatrix(matrix, k):\n    num_rows, num_cols = matrix.shape\n    row_counts = np.sum(matrix, axis=1)\n    col_counts = np.sum(matrix, axis=0)\n\n    # Initialize the submatrix with the top-k rows and columns\n    submatrix = matrix[np.argsort(row_counts)[-k:], np.argsort(col_counts)[-k:]]\n\n    while True:\n        # Find the row that maximizes the density of the submatrix\n        max_row_idx = np.argmax(np.sum(submatrix, axis=1))\n        max_row = matrix[max_row_idx, :]\n\n        # Find the column that maximizes the density of the submatrix\n        max_col_idx = np.argmax(np.sum(submatrix, axis=0))\n        max_col = matrix[:, max_col_idx]\n\n        # Add the row and column to the submatrix if they increase the density\n        if np.sum(max_row) + np.sum(max_col) > np.sum(submatrix):\n            submatrix = np.vstack((submatrix, max_row))\n            submatrix = np.hstack((submatrix, max_col[:, None]))\n\n        else:\n            break\n\n    return submatrix