def calculate_final_scores(previous_scores, rankings):\n    """\n    Calculate final scores based on previous scores and rankings.\n\n    Args:\n        previous_scores (list): Previous scores of all players.\n        rankings (list): Rankings of players in the current game (1-based index).\n\n    Returns:\n        list: Final scores of all players.\n    """\n    # Define the K-factor (adjust to control rating changes)\n    k_factor = 32\n\n    # Calculate expected scores\n    expected_scores = []\n    for i, score in enumerate(previous_scores):\n        expected_score = 1 / (1 + 10 ** ((score - previous_scores[i]) / 400))\n        expected_scores.append(expected_score)\n\n    # Calculate final scores\n    final_scores = []\n    for i, ranking in enumerate(rankings):\n        actual_score = 1 if ranking == 1 else 0\n        score_change = k_factor * (actual_score - expected_scores[i])\n        final_score = previous_scores[i] + score_change\n        final_scores.append(final_score)\n\n    return final_scores\n\n# Example usage:\nprevious_scores = [1000, 500]  # Player A has twice the score of Player B\nrankings = [1, 2]  # Player A finishes first, Player B finishes last\n\nfinal_scores = calculate_final_scores(previous_scores, rankings)\nprint(final_scores)