from cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\nfrom cryptography.hazmat.primitives import padding\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.backends import default_backend\n\ndef derive_key(password, salt):\n    kdf = PBKDF2HMAC(\n        algorithm=hashes.SHA256(),\n        length=32,\n        salt=salt,\n        iterations=100000,\n        backend=default_backend()\n    )\n    return kdf.derive(password)\n\ndef encrypt_data(data, user_password, company_password):\n    # Generate a random symmetric key\n    symmetric_key = os.urandom(32)\n\n    # Wrap the symmetric key with the user's password\n    user_wrapped_key = encrypt_wrapped_key(symmetric_key, user_password)\n\n    # Wrap the symmetric key with the company's password\n    company_wrapped_key = encrypt_wrapped_key(symmetric_key, company_password)\n\n    # Encrypt the data with the symmetric key\n    encrypted_data = encrypt(symmetric_key, data)\n\n    return user_wrapped_key, company_wrapped_key, encrypted_data\n\ndef encrypt_wrapped_key(key, password):\n    # Derive a key from the password\n    derived_key = derive_key(password, b"salt")\n\n    # Wrap the key using AES-KW\n    cipher = Cipher(algorithms.AES(derived_key), modes.EAX(), backend=default_backend())\n    encryptor = cipher.encryptor()\n    wrapped_key = encryptor.update(key) + encryptor.finalize()\n\n    return wrapped_key\n\ndef decrypt(data, wrapped_key, password):\n    # Derive a key from the password\n    derived_key = derive_key(password, b"salt")\n\n    # Unwrap the key using AES-KW\n    cipher = Cipher(algorithms.AES(derived_key), modes.EAX(), backend=default_backend())\n    decryptor = cipher.decryptor()\n    symmetric_key = decryptor.update(wrapped_key) + decryptor.finalize()\n\n    # Decrypt the data with the symmetric key\n    return decrypt(symmetric_key, data)\n\n# Example usage:\nuser_password = b"user_password"\ncompany_password = b"company_password"\ndata = b"Hello, World!"\n\nuser_wrapped_key, company_wrapped_key, encrypted_data = encrypt_data(data, user_password, company_password)\n\n# Decrypt using the user's password\ndecrypted_data = decrypt(encrypted_data, user_wrapped_key, user_password)\nprint(decrypted_data)  # b"Hello, World!"\n\n# Decrypt using the company's password\ndecrypted_data = decrypt(encrypted_data, company_wrapped_key, company_password)\nprint(decrypted_data)  # b"Hello, World!"