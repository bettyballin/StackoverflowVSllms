import os\nimport signal\nimport threading\n\n# Web server (webserver.py)\ndef SendStream(data, pipe):\n    try:\n        # Use 'w' mode to truncate the file, preventing leftover data\n        with open(pipe, 'w') as f:\n            for i in data:\n                f.write(i + '\n')\n                f.flush()\n    finally:\n        # Unlink the pipe file after writing to it\n        os.unlink(pipe)\n\ndef Serve():\n    threading.Thread(target=SendStream, args=(data, pipe)).start()\n\n# xinetd.d server (spitter.py)\ndef Serve():\n    if not os.path.exists(PIPE_FILE):\n        os.mkfifo(PIPE_FILE)\n    os.kill(server_pid, signal.SIGUSR1)\n    # Use 'r' mode to read from the pipe, and close it when done\n    with open(PIPE_FILE, 'r') as f:\n        for i in f:\n            print i,