import networkx as nx\n\ndef min_payments(debts):\n    G = nx.DiGraph()\n    for debtor, creditor, amount in debts:\n        G.add_edge(debtor, creditor, capacity=amount)\n    \n    # Add source and sink nodes\n    G.add_node('source')\n    G.add_node('sink')\n    \n    # Connect source to debtors and creditors to sink\n    for node in G.nodes():\n        if G.in_degree(node) > G.out_degree(node):\n            G.add_edge('source', node, capacity=float('inf'))\n        elif G.out_degree(node) > G.in_degree(node):\n            G.add_edge(node, 'sink', capacity=float('inf'))\n    \n    # Compute maximum flow\n    flow_value, flow_dict = nx.maximum_flow(G, 'source', 'sink')\n    \n    # Extract minimum payments from flow dictionary\n    payments = []\n    for debtor, creditor in flow_dict:\n        if debtor != 'source' and creditor != 'sink':\n            payments.append((debtor, creditor, flow_dict[(debtor, creditor)]))\n    \n    return payments\n\n# Example usage\ndebts = [('Mike', 'John', 100), ('John', 'Rachel', 200), ('Mike', 'Rachel', 400)]\nmin_payments(debts)