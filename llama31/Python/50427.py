import random\nimport math\n\ndef simulated_annealing(nurses, shifts, days, constraints):\n    # Initialize random assignments\n    assignments = [[random.choice(shifts) for _ in range(days)] for _ in range(nurses)]\n\n    # Define the fitness function\n    def fitness(assignments):\n        # Calculate the fitness value for each nurse and day\n        nurse_fitness = [sum(constraints[nurse][day][shift] for day, shift in enumerate(row)) for nurse, row in enumerate(assignments)]\n        day_fitness = [sum(constraints[nurse][day][shift] for nurse, shift in enumerate(column)) for day, column in enumerate(zip(*assignments))]\n\n        # Return the minimum fitness value\n        return min(nurse_fitness + day_fitness)\n\n    # Define the simulated annealing algorithm\n    def anneal(assignments, temperature, cooling_rate):\n        current_fitness = fitness(assignments)\n        best_assignments = assignments\n        best_fitness = current_fitness\n\n        while temperature > 1:\n            # Select a random nurse and day\n            nurse = random.randint(0, nurses - 1)\n            day = random.randint(0, days - 1)\n\n            # Select a random new shift\n            new_shift = random.choice(shifts)\n\n            # Create a new assignment with the changed shift\n            new_assignments = [row[:] for row in assignments]\n            new_assignments[nurse][day] = new_shift\n\n            # Calculate the new fitness value\n            new_fitness = fitness(new_assignments)\n\n            # If the new fitness value is better, accept the new assignment\n            if new_fitness > current_fitness:\n                assignments = new_assignments\n                current_fitness = new_fitness\n\n                # If the new fitness value is the best so far, update the best assignment\n                if new_fitness > best_fitness:\n                    best_assignments = new_assignments\n                    best_fitness = new_fitness\n\n            # If the new fitness value is not better, accept the new assignment with a probability based on the current temperature\n            else:\n                probability = math.exp((new_fitness - current_fitness) / temperature)\n                if random.random() < probability:\n                    assignments = new_assignments\n                    current_fitness = new_fitness\n\n            # Decrease the temperature\n            temperature *= cooling_rate\n\n        return best_assignments\n\n    # Run the simulated annealing algorithm\n    temperature = 100\n    cooling_rate = 0.99\n    best_assignments = anneal(assignments, temperature, cooling_rate)\n\n    return best_assignments\n\n# Example usage:\nnurses = 20\nshifts = ['early', 'late', 'night']\ndays = 30\nconstraints = [[[random.randint(0, 1) for _ in range(len(shifts))] for _ in range(days)] for _ in range(nurses)]\n\nbest_assignments = simulated_annealing(nurses, shifts, days, constraints)\nprint(best_assignments)