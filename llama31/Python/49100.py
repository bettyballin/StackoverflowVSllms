def generate_crossword(words):\n    # Sort words by length, longest first\n    words.sort(key=len, reverse=True)\n\n    # Create an empty grid with dimensions based on the longest word\n    grid_width = len(words[0])\n    grid_height = len(words)\n    grid = [['_' for _ in range(grid_width)] for _ in range(grid_height)]\n\n    # Place the first word horizontally in the top-left corner of the grid\n    grid[0] = list(words[0])\n\n    # Place subsequent words\n    for word in words[1:]:\n        placed = False\n        for i in range(grid_height):\n            for j in range(grid_width):\n                # Check if the word can be placed horizontally or vertically\n                if can_place_word(grid, word, i, j, 'h') or can_place_word(grid, word, i, j, 'v'):\n                    place_word(grid, word, i, j, 'h' if can_place_word(grid, word, i, j, 'h') else 'v')\n                    placed = True\n                    break\n            if placed:\n                break\n        if not placed:\n            # Backtrack and try a different placement\n            grid = backtrack(grid, words)\n\n    return grid\n\ndef can_place_word(grid, word, row, col, direction):\n    if direction == 'h':\n        if col + len(word) > len(grid[0]):\n            return False\n        for i, char in enumerate(word):\n            if grid[row][col + i] != '_' and grid[row][col + i] != char:\n                return False\n    elif direction == 'v':\n        if row + len(word) > len(grid):\n            return False\n        for i, char in enumerate(word):\n            if grid[row + i][col] != '_' and grid[row + i][col] != char:\n                return False\n    return True\n\ndef place_word(grid, word, row, col, direction):\n    if direction == 'h':\n        for i, char in enumerate(word):\n            grid[row][col + i] = char\n    elif direction == 'v':\n        for i, char in enumerate(word):\n            grid[row + i][col] = char\n\ndef backtrack(grid, words):\n    # Remove the last word placed and try again\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] != '_':\n                grid[i][j] = '_'\n                return grid\n    return grid