from collections import defaultdict\n\ndef topological_sort(graph):\n    in_degree = defaultdict(int)\n    for node in graph:\n        for neighbor in graph[node]:\n            in_degree[neighbor] += 1\n\n    queue = [node for node in graph if in_degree[node] == 0]\n    sorted_nodes = []\n\n    while queue:\n        node = queue.pop(0)\n        sorted_nodes.append(node)\n        for neighbor in graph[node]:\n            in_degree[neighbor] -= 1\n            if in_degree[neighbor] == 0:\n                queue.append(neighbor)\n\n    return sorted_nodes\n\ndef transitive_reduction(graph):\n    sorted_nodes = topological_sort(graph)\n\n    for i, node in enumerate(sorted_nodes):\n        for j in range(i+1, len(sorted_nodes)):\n            neighbor = sorted_nodes[j]\n            if neighbor in graph[node]:\n                for k in range(j+1, len(sorted_nodes)):\n                    implied_neighbor = sorted_nodes[k]\n                    if implied_neighbor in graph[neighbor]:\n                        graph[node].remove(implied_neighbor)\n\n    return graph\n\n# Example usage:\ngraph = {\n    'a': ['b', 'c', 'd'],\n    'b': ['d'],\n    'c': ['d'],\n    'd': []\n}\n\nreduced_graph = transitive_reduction(graph)\nprint(reduced_graph)  # {'a': ['b', 'c'], 'b': ['d'], 'c': ['d'], 'd': []}