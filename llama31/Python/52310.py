import numpy as np\n\nclass BallTree:\n    def __init__(self, points, radius):\n        self.points = points\n        self.radius = radius\n        self.tree = self.build_tree()\n\n    def build_tree(self):\n        tree = []\n        for point in self.points:\n            ball = self.create_ball(point, self.radius)\n            tree.append(ball)\n        return tree\n\n    def create_ball(self, point, radius):\n        return {"center": point, "radius": radius}\n\n    def search(self, query_point):\n        results = []\n        for ball in self.tree:\n            if self.distance(query_point, ball["center"]) <= ball["radius"]:\n                results.append(ball["center"])\n        return results\n\n    def distance(self, point1, point2):\n        # Implement your metric space distance function here\n        return np.linalg.norm(np.array(point1) - np.array(point2))