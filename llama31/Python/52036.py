import gi\ngi.require_version('Gtk', '3.0')\nfrom gi.repository import Gtk\n\nclass UndoableTextView(Gtk.TextView):\n    def __init__(self):\n        super(UndoableTextView, self).__init__()\n        self.undo_stack = []\n        self.redo_stack = []\n        self.buffer.connect('begin-user-action', self.begin_user_action)\n        self.buffer.connect('end-user-action', self.end_user_action)\n\n    def begin_user_action(self, buffer):\n        self.undo_stack.append(buffer.get_text(buffer.get_start_iter(), buffer.get_end_iter(), False))\n\n    def end_user_action(self, buffer):\n        self.redo_stack.clear()\n\n    def undo(self):\n        if len(self.undo_stack) > 1:\n            self.redo_stack.append(self.undo_stack.pop())\n            self.buffer.set_text(self.undo_stack[-1])\n\n    def redo(self):\n        if self.redo_stack:\n            self.undo_stack.append(self.redo_stack.pop())\n            self.buffer.set_text(self.undo_stack[-1])\n\n# Example usage:\nwin = Gtk.Window()\nwin.connect('destroy', Gtk.main_quit)\n\ntv = UndoableTextView()\nwin.add(tv)\n\nbutton_box = Gtk.ButtonBox(Gtk.Orientation.HORIZONTAL, 0)\nwin.add(button_box)\n\nundo_button = Gtk.Button(label='Undo')\nundo_button.connect('clicked', lambda _: tv.undo())\nbutton_box.pack_start(undo_button, True, True, 0)\n\nredo_button = Gtk.Button(label='Redo')\nredo_button.connect('clicked', lambda _: tv.redo())\nbutton_box.pack_start(redo_button, True, True, 0)\n\nwin.show_all()\nGtk.main()