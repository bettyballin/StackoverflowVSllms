def guillotine(rectangles):\n    # Sort rectangles by height in decreasing order\n    rectangles.sort(key=lambda x: x[1], reverse=True)\n\n    # Initialize the bin\n    bin_width = sum(rectangle[0] for rectangle in rectangles)\n    bin_height = 0\n    bin_rectangles = []\n\n    for rectangle in rectangles:\n        # Check if the rectangle fits in the current bin\n        if bin_height + rectangle[1] <= bin_height:\n            # Place the rectangle at the bottom-left corner of the bin\n            bin_rectangles.append((0, bin_height, rectangle[0], rectangle[1]))\n            bin_height += rectangle[1]\n        else:\n            # Perform a Guillotine split\n            new_bin_width = bin_width\n            new_bin_height = rectangle[1]\n            new_bin_rectangles = [(0, 0, rectangle[0], rectangle[1])]\n\n            # Update the original bin\n            bin_height -= new_bin_height\n            bin_rectangles.append((0, bin_height, new_bin_width, bin_height))\n\n            # Add the new bin\n            bin_width = new_bin_width\n            bin_height = new_bin_height\n            bin_rectangles.extend(new_bin_rectangles)\n\n    return bin_rectangles