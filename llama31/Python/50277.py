def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef totient(n):\n    result = n\n    p = 2\n    while p * p <= n:\n        if n % p == 0:\n            while n % p == 0:\n                n //= p\n            result -= result // p\n        p += 1\n    if n > 1:\n        result -= result // n\n    return result\n\ndef chain_length(n):\n    length = 0\n    while n > 1:\n        n = totient(n)\n        length += 1\n    return length\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for p in range(2, int(n**0.5) + 1):\n        if n % p == 0:\n            return False\n    return True\n\n# Find all primes less than 40,000,000 that generate a chain of length 25\nprimes = []\nfor n in range(2, 40000000):\n    if is_prime(n) and chain_length(n) == 25:\n        primes.append(n)\n\nprint(sum(primes))