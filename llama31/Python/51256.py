from cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import padding\n\n# Generate PGP keys\nprivate_key = rsa.generate_private_key(\n    public_exponent=65537,\n    key_size=2048,\n)\npublic_key = private_key.public_key()\n\n# Serialize the keys\nprivate_key_bytes = private_key.private_bytes(\n    encoding=serialization.Encoding.PEM,\n    format=serialization.PrivateFormat.PKCS8,\n    encryption_algorithm=serialization.NoEncryption()\n)\npublic_key_bytes = public_key.public_bytes(\n    encoding=serialization.Encoding.OpenSSH,\n    format=serialization.PublicFormat.OpenSSH\n)\n\n# Encrypt a file\nwith open("file.txt", "rb") as f:\n    data = f.read()\nencrypted_data = public_key.encrypt(\n    data,\n    padding.OAEP(\n        mgf=padding.MGF1(algorithm=hashes.SHA256()),\n        algorithm=hashes.SHA256(),\n        label=None\n    )\n)\n\n# Decrypt a file\ndecrypted_data = private_key.decrypt(\n    encrypted_data,\n    padding.OAEP(\n        mgf=padding.MGF1(algorithm=hashes.SHA256()),\n        algorithm=hashes.SHA256(),\n        label=None\n    )\n)