Imports System.Security.Cryptography\nImports System.IO\n\nPublic Class AESCrypt\n    Private key As Byte()\n\n    Public Sub New(key As String)\n        Me.key = System.Text.Encoding.UTF8.GetBytes(key)\n    End Sub\n\n    Public Function Encrypt(data As String) As String\n        Using aes As New AesManaged()\n            aes.Key = key\n            aes.Mode = CipherMode.ECB\n            aes.Padding = PaddingMode.PKCS7\n\n            Dim encryptor As ICryptoTransform = aes.CreateEncryptor()\n            Dim inputData As Byte() = System.Text.Encoding.UTF8.GetBytes(data)\n            Dim outputData As Byte() = encryptor.TransformFinalBlock(inputData, 0, inputData.Length)\n\n            Return BitConverter.ToString(outputData).Replace("-", "").ToUpper()\n        End Using\n    End Function\n\n    Public Function Decrypt(data As String) As String\n        Using aes As New AesManaged()\n            aes.Key = key\n            aes.Mode = CipherMode.ECB\n            aes.Padding = PaddingMode.PKCS7\n\n            Dim decryptor As ICryptoTransform = aes.CreateDecryptor()\n            Dim inputData As Byte() = HexToByteArray(data)\n            Dim outputData As Byte() = decryptor.TransformFinalBlock(inputData, 0, inputData.Length)\n\n            Return System.Text.Encoding.UTF8.GetString(outputData)\n        End Using\n    End Function\n\n    Private Function HexToByteArray(hex As String) As Byte()\n        Dim result As Byte() = New Byte(hex.Length / 2 - 1) {}\n        For i As Integer = 0 To hex.Length - 1 Step 2\n            result(i / 2) = Convert.ToByte(hex.Substring(i, 2), 16)\n        Next\n        Return result\n    End Function\nEnd Class