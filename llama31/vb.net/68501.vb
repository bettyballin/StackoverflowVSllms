Imports System\n\nModule SimulatedAnnealing\n    Public Function SimulatedAnnealing.optimize(f As Func(Of Double, Double), bounds As Tuple(Of Double, Double), maxIter As Integer, stepSize As Double, initialTemperature As Double) As Double\n        Dim currentSolution As Double = bounds.Item1 + (bounds.Item2 - bounds.Item1) * Rnd()\n        Dim bestSolution As Double = currentSolution\n        Dim bestFitness As Double = f(bestSolution)\n\n        Dim temperature As Double = initialTemperature\n\n        For i As Integer = 0 To maxIter - 1\n            Dim newSolution As Double = currentSolution + (Rnd() * 2 - 1) * stepSize\n            newSolution = Math.Max(bounds.Item1, Math.Min(newSolution, bounds.Item2))\n            Dim newFitness As Double = f(newSolution)\n\n            If newFitness < bestFitness Then\n                bestSolution = newSolution\n                bestFitness = newFitness\n            End If\n\n            Dim delta As Double = newFitness - f(currentSolution)\n            If delta < 0 OrElse Math.Exp(-delta / temperature) > Rnd() Then\n                currentSolution = newSolution\n            End If\n\n            temperature *= 0.99\n        Next\n\n        Return bestSolution\n    End Function\nEnd Module