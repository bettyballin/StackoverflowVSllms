Imports System.Net.Sockets\nImports System.Text\n\nPublic Class BoggleServer\n    Private ReadOnly _listener As TcpListener\n    Private ReadOnly _clients As New List(Of TcpClient)\n\n    Public Sub New()\n        _listener = New TcpListener(IPAddress.Any, 8080)\n        _listener.Start()\n    End Sub\n\n    Public Sub Start()\n        While True\n            Dim client As TcpClient = _listener.AcceptTcpClient()\n            _clients.Add(client)\n            HandleClient(client)\n        End While\n    End Sub\n\n    Private Sub HandleClient(client As TcpClient)\n        Dim stream As NetworkStream = client.GetStream()\n        Dim buffer(1024) As Byte\n\n        While True\n            Dim bytesRead As Integer = stream.Read(buffer, 0, buffer.Length)\n            If bytesRead = 0 Then\n                ' Client disconnected\n                _clients.Remove(client)\n                client.Close()\n                Exit While\n            End If\n\n            Dim message As String = Encoding.ASCII.GetString(buffer, 0, bytesRead)\n            If message.StartsWith("join") Then\n                ' Handle join message\n                Console.WriteLine($"Client joined: {client.Client.RemoteEndPoint}")\n            ElseIf message.StartsWith("score") Then\n                ' Handle score update message\n                Console.WriteLine($"Score update from {client.Client.RemoteEndPoint}: {message.Substring(6)}")\n            End If\n        End While\n    End Sub\n\n    Public Sub SendLetters(letters() As Char)\n        For Each client As TcpClient In _clients\n            Dim stream As NetworkStream = client.GetStream()\n            Dim buffer() As Byte = Encoding.ASCII.GetBytes(New String(letters))\n            stream.Write(buffer, 0, buffer.Length)\n        Next\n    End Sub\nEnd Class