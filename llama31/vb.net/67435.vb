Imports System.Collections.Generic\n\nPublic Class PropertyMapper\n    Private mappings As Dictionary(Of String, Dictionary(Of String, String))\n\n    Public Sub New()\n        mappings = New Dictionary(Of String, Dictionary(Of String, String))\n        mappings.Add("column1", New Dictionary(Of String, String))\n        mappings.Add("column2", New Dictionary(Of String, String))\n        mappings.Add("column3", New Dictionary(Of String, String))\n        mappings.Add("column4", New Dictionary(Of String, String))\n\n        ' Define the mappings\n        mappings("column1").Add("Textbox1", "Name")\n        mappings("column1").Add("Textbox2", "Type")\n        mappings("column1").Add("Textbox3", "Speed")\n\n        mappings("column2").Add("Textbox4", "Name")\n        mappings("column2").Add("Textbox5", "Type")\n        mappings("column2").Add("Textbox6", "Speed")\n\n        ' ...\n    End Sub\n\n    Public Sub Map(sender As Object, e As EventArgs)\n        Dim parentTag As String = sender.Parent.Tag.ToString()\n        Dim textboxTag As String = sender.Tag.ToString()\n\n        If mappings.ContainsKey(parentTag) AndAlso mappings(parentTag).ContainsKey(textboxTag) Then\n            Dim objectToMapTo As Object = GetObjectToMapTo(parentTag)\n            Dim propertyName As String = mappings(parentTag)(textboxTag)\n\n            ' Use reflection to set the property value\n            objectToMapTo.GetType().GetProperty(propertyName).SetValue(objectToMapTo, sender.Text, Nothing)\n        End If\n    End Sub\n\n    Private Function GetObjectToMapTo(parentTag As String) As Object\n        ' Return the object to map to based on the parent tag\n        Select Case parentTag\n            Case "column1"\n                Return myObject1\n            Case "column2"\n                Return myObject2\n            Case "column3"\n                Return myObject3\n            Case "column4"\n                Return myObject4\n            ' ...\n        End Select\n    End Function\nEnd Class