' ICalculationSet interface\nPublic Interface ICalculationSet\n    Function Calculate(numbers As List(Of Double)) As Double\nEnd Interface\n\n' Base class for calculation sets\nPublic MustInherit Class CalculationSetBase\n    Implements ICalculationSet\n\n    Public MustOverride Function Calculate(numbers As List(Of Double)) As Double Implements ICalculationSet.Calculate\nEnd Class\n\n' Sample calculation set class\nPublic Class MyCalculationSet\n    Inherits CalculationSetBase\n\n    Public Overrides Function Calculate(numbers As List(Of Double)) As Double\n        ' implementation of the calculation\n    End Function\nEnd Class\n\n' Factory class for calculation sets\nPublic Class CalculationSetFactory\n    Private Shared _calculationSets As Dictionary(Of String, ICalculationSet)\n\n    Public Shared Function GetCalculationSet(name As String) As ICalculationSet\n        If _calculationSets Is Nothing Then\n            _calculationSets = New Dictionary(Of String, ICalculationSet)\n            ' load calculation sets from database and instantiate them using reflection\n        End If\n        Return _calculationSets(name)\n    End Function\nEnd Class