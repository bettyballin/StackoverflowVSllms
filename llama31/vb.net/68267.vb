Imports System.Runtime.InteropServices\n\nPublic Class ScreenColorAdjuster\n    <DllImport("gdi32.dll")>\n    Private Shared Function SetDeviceGammaRamp(hdc As IntPtr, ramp As IntPtr) As Boolean\n    End Function\n\n    Public Shared Sub AdjustScreenColor(hue As Single, saturation As Single, brightness As Single)\n        Dim hdc As IntPtr = IntPtr.Zero\n        hdc = CreateDC("DISPLAY", Nothing, Nothing, IntPtr.Zero)\n\n        Dim ramp As New Byte(768 - 1) {}\n        For i As Integer = 0 To 255\n            Dim r As Byte = CByte(Math.Min(255, Math.Max(0, i * (1 + brightness))))\n            Dim g As Byte = CByte(Math.Min(255, Math.Max(0, i * (1 + brightness))))\n            Dim b As Byte = CByte(Math.Min(255, Math.Max(0, i * (1 + brightness))))\n\n            ' Apply hue and saturation\n            Dim h As Single = hue * 6.283185307179586476925286766559\n            Dim s As Single = saturation\n            Dim v As Single = i / 255.0F\n            Dim hi As Integer = CInt(Math.Floor(h / 6.283185307179586476925286766559))\n            Dim f As Single = h / 6.283185307179586476925286766559 - hi\n            Dim p As Single = v * (1 - s)\n            Dim q As Single = v * (1 - f * s)\n            Dim t As Single = v * (1 - (1 - f) * s)\n\n            Select Case hi\n                Case 0\n                    r = CByte(Math.Min(255, Math.Max(0, v * 255)))\n                    g = CByte(Math.Min(255, Math.Max(0, t * 255)))\n                    b = CByte(Math.Min(255, Math.Max(0, p * 255)))\n                Case 1\n                    r = CByte(Math.Min(255, Math.Max(0, q * 255)))\n                    g = CByte(Math.Min(255, Math.Max(0, v * 255)))\n                    b = CByte(Math.Min(255, Math.Max(0, p * 255)))\n                Case 2\n                    r = CByte(Math.Min(255, Math.Max(0, p * 255)))\n                    g = CByte(Math.Min(255, Math.Max(0, v * 255)))\n                    b = CByte(Math.Min(255, Math.Max(0, t * 255)))\n                Case 3\n                    r = CByte(Math.Min(255, Math.Max(0, p * 255)))\n                    g = CByte(Math.Min(255, Math.Max(0, q * 255)))\n                    b = CByte(Math.Min(255, Math.Max(0, v * 255)))\n                Case 4\n                    r = CByte(Math.Min(255, Math.Max(0, t * 255)))\n                    g = CByte(Math.Min(255, Math.Max(0, p * 255)))\n                    b = CByte(Math.Min(255, Math.Max(0, v * 255)))\n                Case 5\n                    r = CByte(Math.Min(255, Math.Max(0, v * 255)))\n                    g = CByte(Math.Min(255, Math.Max(0, p * 255)))\n                    b = CByte(Math.Min(255, Math.Max(0, q * 255)))\n            End Select\n\n            ramp(i * 3) = r\n            ramp(i * 3 + 1) = g\n            ramp(i * 3 + 2) = b\n        Next\n\n        Dim ptr As IntPtr = Marshal.AllocHGlobal(ramp.Length)\n        Marshal.Copy(ramp, 0, ptr, ramp.Length)\n\n        SetDeviceGammaRamp(hdc, ptr)\n\n        Marshal.FreeHGlobal(ptr)\n    End Sub\n\n    <DllImport("gdi32.dll")>\n    Private Shared Function CreateDC(lpszDriver As String, lpszDevice As String, lpszOutput As String, lpInitData As IntPtr) As IntPtr\n    End Function\nEnd Class