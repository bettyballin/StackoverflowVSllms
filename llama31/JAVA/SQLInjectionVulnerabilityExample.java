import java.sql.Connection;
import java.sql.Statement;

public class SQLInjectionVulnerabilityExample {
    // Suspicious concatenation of user input with SQL query
    public void vulnerableMethod1(javax.servlet.http.HttpServletRequest request) {
        String query = "SELECT * FROM users WHERE name = '" + request.getParameter("name") + "'";
        System.out.println(query);
    }

    // Use of string formatting to construct query
    public void vulnerableMethod2(javax.servlet.http.HttpServletRequest request) {
        String query = String.format("SELECT * FROM users WHERE name = '%s'", request.getParameter("name"));
        System.out.println(query);
    }

    // Directly executing user-input query (very bad!)
    public void vulnerableMethod3(javax.servlet.http.HttpServletRequest request, Connection connection) throws java.sql.SQLException {
        Statement stmt = connection.createStatement();
        stmt.execute(request.getParameter("query"));
    }

    public static void main(String[] args) {
    }
}