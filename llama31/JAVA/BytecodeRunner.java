import javax.tools.*;
import java.lang.reflect.*;
import java.util.*;

public class BytecodeRunner {
    public static void main(String[] args) throws Exception {
        // Generate bytecode
        String sourceCode = "public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } }";
        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
        ClassFileManager manager = new ClassFileManager(compiler);
        String[] args1 = new String[]{ "-classpath", System.getProperty("java.class.path")};
        JavaCompiler.CompilationTask task = compiler.getTask(null, manager, null, args1, null, sourceCode);
        task.call();
        byte[] bytecode = manager.getBytecode();

        // Load and invoke the generated bytecode
        ClassLoader loader = new ByteArrayClassLoader(bytecode);
        Class<?> clazz = loader.loadClass("HelloWorld");
        Method mainMethod = clazz.getMethod("main", String[].class);
        mainMethod.invoke(null, (Object) new String[0]);
    }
}

class ClassFileManager extends ForwardingJavaFileManager<JavaCompiler> {
    private byte[] bytecode;

    public ClassFileManager(JavaCompiler compiler) {
        super(compiler.getStandardFileManager(null, null, null));
    }

    @Override
    public JavaFileObject getJavaFileForOutput(Location location, String className, JavaFileObject.Kind kind, FileObject sibling) throws IOException {
        if (kind == JavaFileObject.Kind.CLASS) {
            bytecode = new byte[1024];
            return new ByteArrayJavaFileObject(className, bytecode);
        } else {
            return super.getJavaFileForOutput(location, className, kind, sibling);
        }
    }

    public byte[] getBytecode() {
        return bytecode;
    }
}

class ByteArrayJavaFileObject extends SimpleJavaFileObject {
    private byte[] bytecode;

    public ByteArrayJavaFileObject(String name, byte[] bytecode) {
        super(new File(name).toURI(), Kind.CLASS);
        this.bytecode = bytecode;
    }

    @Override
    public OutputStream openOutputStream() throws IOException {
        return new ByteArrayOutputStream() {
            @Override
            public void close() throws IOException {
                bytecode = toByteArray();
                super.close();
            }
        };
    }
}

class ByteArrayClassLoader extends ClassLoader {
    private byte[] bytecode;

    public ByteArrayClassLoader(byte[] bytecode) {
        this.bytecode = bytecode;
    }

    @Override
    protected Class<?> findClass(String name) throws ClassNotFoundException {
        return defineClass(name, bytecode, 0, bytecode.length);
    }
}