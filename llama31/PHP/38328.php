// Plugin interface\ninterface PluginInterface {\n    public function getName();\n    public function getDescription();\n    public function run();\n}\n\n// Plugin registry\nclass PluginRegistry {\n    private $plugins = [];\n\n    public function register(PluginInterface $plugin) {\n        $this->plugins[] = $plugin;\n    }\n\n    public function getPlugins() {\n        return $this->plugins;\n    }\n}\n\n// Event dispatcher\nclass EventDispatcher {\n    private $registry;\n\n    public function __construct(PluginRegistry $registry) {\n        $this->registry = $registry;\n    }\n\n    public function dispatch($eventName) {\n        foreach ($this->registry->getPlugins() as $plugin) {\n            if (method_exists($plugin, $eventName)) {\n                $plugin->$eventName();\n            }\n        }\n    }\n}\n\n// Example plugin\nclass MyPlugin implements PluginInterface {\n    public function getName() {\n        return 'My Plugin';\n    }\n\n    public function getDescription() {\n        return 'This is my plugin';\n    }\n\n    public function run() {\n        // Code to run when the plugin is executed\n    }\n\n    public function onUserLogin() {\n        // Code to run when the user logs in\n    }\n}\n\n// Usage\n$registry = new PluginRegistry();\n$registry->register(new MyPlugin());\n\n$dispatcher = new EventDispatcher($registry);\n$dispatcher->dispatch('onUserLogin');