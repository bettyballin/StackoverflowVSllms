class SchedulerOptions {\n    private $type;\n    private $sendDateAndTime;\n    private $endByType;\n    private $endByDate;\n    private $occurencesLimit;\n    private $repeatEvery;\n    private $weekDaysForRepeating;\n\n    // getters and setters\n}\n\nclass SchedulerFactory {\n    public function create(SchedulerOptions $options) {\n        switch ($options->getType()) {\n            case "monthly":\n                $scheduler = new MonthlyScheduler();\n                $scheduler->setSendDateAndTime($options->getSendDateAndTime());\n                $scheduler->setEndByDate($options->getEndByDate());\n                $scheduler->addTaskOccuringEvery($options->getRepeatEvery());\n                break;\n            case "weekly":\n                $scheduler = new WeeklyScheduler();\n                $scheduler->setSendDateAndTime($options->getSendDateAndTime());\n                $scheduler->setEndByDate($options->getEndByDate());\n                $scheduler->addTaskOccuringEvery($options->getRepeatEvery());\n                $scheduler->setWeekDaysForRepeating($options->getWeekDaysForRepeating());\n                break;\n            case "daily":\n                $scheduler = new DailyScheduler();\n                $scheduler->setSendDateAndTime($options->getSendDateAndTime());\n                $scheduler->setEndByDate($options->getEndByDate());\n                $scheduler->addTaskOccuringEvery($options->getRepeatEvery());\n                break;\n            default:\n                return null;\n        }\n        return $scheduler;\n    }\n}