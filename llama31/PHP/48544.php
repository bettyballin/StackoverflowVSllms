class GoogleQueryParser {\n    private $tokens;\n\n    public function __construct($query) {\n        $this->tokens = $this->tokenize($query);\n    }\n\n    private function tokenize($query) {\n        // Simple tokenizer using regex\n        $tokens = array();\n        preg_match_all('/\w+|"[^"]*"|\'[^\']*\'|\(|\)|\||&|!|-/', $query, $matches);\n        foreach ($matches[0] as $match) {\n            $tokens[] = trim($match, '"\'');\n        }\n        return $tokens;\n    }\n\n    public function parse() {\n        $query = '';\n        $filters = array();\n\n        // Parse the tokens\n        foreach ($this->tokens as $token) {\n            if ($token === '(' || $token === ')') {\n                // Handle nested queries\n            } elseif ($token === '|' || $token === '&') {\n                // Handle OR and AND operators\n            } elseif ($token === '!') {\n                // Handle NOT operator\n            } elseif ($token === '-') {\n                // Handle exclusion operator\n            } elseif (preg_match('/^(\w+):(.+)$/', $token, $match)) {\n                // Handle filters (e.g., color:blue)\n                $filters[$match[1]] = $match[2];\n            } else {\n                // Handle search terms\n                $query .= ' ' . $token;\n            }\n        }\n\n        // Generate the tsquery string\n        $tsquery = '';\n        if ($query) {\n            $tsquery = "to_tsquery('{$query}')";\n        }\n\n        // Generate the WHERE clause\n        $where = '';\n        if ($filters) {\n            foreach ($filters as $field => $value) {\n                $where .= " AND {$field} = '{$value}'";\n            }\n        }\n\n        return array($tsquery, $where);\n    }\n}\n\n// Example usage\n$query = '((color:blue OR "4x4") OR style:coupe) -color:red used';\n$parser = new GoogleQueryParser($query);\nlist($tsquery, $where) = $parser->parse();\n\necho "TSQUERY: {$tsquery}\n";\necho "WHERE: {$where}\n";