use PHPUnit\Framework\TestCase;\nuse Mockery;\n\nclass DomainTest extends TestCase\n{\n    public function testSetSuspended()\n    {\n        $propelMock = Mockery::mock('Propel');\n        $propelMock->shouldReceive('getConnection')\n            ->andReturn($con = Mockery::mock('Connection'));\n\n        $con->shouldReceive('doUpdate')\n            ->with(Mockery::any(), Mockery::any())\n            ->andReturn(true);\n\n        $domainsPeerMock = Mockery::mock('DomainsPeer');\n        $domainsPeerMock->shouldReceive('add')\n            ->with(Mockery::any(), Mockery::any())\n            ->andReturn(Mockery::self());\n\n        $updateCriteriaMock = Mockery::mock('Criteria');\n        $updateCriteriaMock->shouldReceive('add')\n            ->with(Mockery::any(), Mockery::any())\n            ->andReturn(Mockery::self());\n\n        $classUnderTest = new Domain();\n        $result = $classUnderTest::_setSuspended(true, 1);\n\n        $this->assertTrue($result);\n    }\n}