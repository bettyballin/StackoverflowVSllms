abstract class AbstractCostCounter {\n    protected $cost;\n\n    public function countNotReccurentSendingCost($messageObj) {\n        $totalMessages = $messageObj->getTotalMessages();\n        $message_cost = 1;\n        $this->cost = $totalMessages * $message_cost;\n    }\n\n    abstract public function countOptional(&$messageObject);\n\n    public function countCost(&$messageObject) {\n        $this->countNotReccurentSendingCost($messageObject);\n        $this->countOptional($messageObject);\n    }\n}\n\nclass TemplateReccurentCostCounting extends AbstractCostCounter {\n    public function countOptional(&$messageObject) {\n        $notReccurentSendingCost = $this->cost;\n        $totalMessagesInScheduledPlan = $messageObject->getTotalMessagesInScheduledPlan();\n        $reccurentSendingPlanCost = $notReccurentSendingCost * $totalMessagesInScheduledPlan;\n        $this->cost = $reccurentSendingPlanCost;\n    }\n}