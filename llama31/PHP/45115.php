class RateLimiter {\n    private $bucketSize;\n    private $refillRate;\n    private $tokens;\n\n    public function __construct($bucketSize, $refillRate) {\n        $this->bucketSize = $bucketSize;\n        $this->refillRate = $refillRate;\n        $this->tokens = $bucketSize;\n    }\n\n    public function allowRequest() {\n        $now = microtime(true);\n        $this->refillTokens($now);\n        if ($this->tokens >= 1) {\n            $this->tokens--;\n            return true;\n        }\n        return false;\n    }\n\n    private function refillTokens($now) {\n        $refillInterval = 60 / $this->refillRate; // 60 seconds / refill rate\n        $tokensToRefill = (int) ($now / $refillInterval);\n        $this->tokens = min($this->bucketSize, $this->tokens + $tokensToRefill);\n    }\n}\n\n$rateLimiter = new RateLimiter(10, 5); // 10 requests per minute, refill 5 tokens per minute\nif (!$rateLimiter->allowRequest()) {\n    // handle rate limiting error\n}