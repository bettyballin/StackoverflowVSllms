function parse_lua_like_code($code) {\n    $code = trim($code);\n    $result = array();\n\n    // Regular expression to match the block structure\n    $block_pattern = '/([a-zA-Z_][a-zA-Z_0-9]*)\s*\{([^}]*)\}/';\n\n    // Recursive function to parse the blocks\n    function parse_block($block_code) {\n        $block_code = trim($block_code);\n        $result = array();\n\n        // Regular expression to match the key-value pairs\n        $pair_pattern = '/([a-zA-Z_][a-zA-Z_0-9]*)\s*\(([^\)]*)\)/';\n\n        preg_match_all($pair_pattern, $block_code, $pairs);\n        foreach ($pairs[1] as $index => $key) {\n            $value = $pairs[2][$index];\n            $result[$key] = trim($value);\n        }\n\n        return $result;\n    }\n\n    // Parse the top-level blocks\n    preg_match_all($block_pattern, $code, $blocks);\n    foreach ($blocks[1] as $index => $block_name) {\n        $block_code = $blocks[2][$index];\n        $result[$block_name] = parse_block($block_code);\n    }\n\n    return $result;\n}\n\n// Example usage:\n$lua_like_code = 'NAME\n{\n    title\n    (\n        A_STRING\n    );\n\n    settings\n    {\n        SetA( 15, 15 );\n        SetB( "test" );\n    }\n\n    desc\n    {\n        Desc\n        (\n            A_STRING\n        );\n\n        Cond\n        (\n            A_STRING\n        );\n    }\n}';\n\n$result = parse_lua_like_code($lua_like_code);\nprint_r($result);