// Offense reporting mechanism\nfunction report_offense($ip, $offense_type, $severity) {\n    // Store the offense in a database or cache\n    // (e.g., Redis, Memcached, or a relational database)\n    // Use a structure like:\n    //   ip => array(\n    //       'offenses' => array(\n    //           array('type' => 'invalid_password', 'severity' => 1, 'timestamp' => time()),\n    //           array('type' => 'strange_http_request', 'severity' => 2, 'timestamp' => time()),\n    //           ...\n    //       ),\n    //       'blacklisted' => false,\n    //       'blacklist_expires' => null\n    //   );\n}\n\n// Check if an IP is blacklisted\nfunction is_blacklisted($ip) {\n    // Retrieve the offense data for the given IP\n    $offense_data = retrieve_offense_data($ip);\n    \n    // Check if the IP is already blacklisted\n    if ($offense_data['blacklisted'] && $offense_data['blacklist_expires'] > time()) {\n        return true;\n    }\n    \n    // Calculate the total severity of offenses within the last 24 hours\n    $total_severity = 0;\n    foreach ($offense_data['offenses'] as $offense) {\n        if ($offense['timestamp'] > time() - 24 * 60 * 60) {\n            $total_severity += $offense['severity'];\n        }\n    }\n    \n    // Check if the total severity exceeds the threshold\n    if ($total_severity >= get_threshold()) {\n        // Blacklist the IP for a specified duration\n        $offense_data['blacklisted'] = true;\n        $offense_data['blacklist_expires'] = time() + get_blacklist_duration();\n        store_offense_data($ip, $offense_data);\n        return true;\n    }\n    \n    return false;\n}\n\n// Web-server-level block\nfunction block_handler() {\n    $ip = get_client_ip();\n    if (is_blacklisted($ip)) {\n        // Return a 403 Forbidden response or redirect to a blocked page\n        http_response_code(403);\n        echo 'Your IP has been blocked due to suspicious activity.';\n        exit;\n    }\n}