function sortArrayByParentChildRelationship($array) {\n    // Create a map for easy access to nodes by their IDs\n    $nodeMap = array_column($array, null, 'id');\n\n    // Recursive function to append child nodes to their parent nodes\n    function appendChildren(&$node, &$nodeMap) {\n        // Find all children of the current node\n        $children = array_filter($nodeMap, function ($childNode) use ($node) {\n            return $childNode['parent'] == $node['id'];\n        });\n\n        // If there are children, sort them and recursively append their children\n        if (!empty($children)) {\n            usort($children, function ($a, $b) {\n                return strcmp($a['name'], $b['name']);\n            });\n\n            foreach ($children as &$child) {\n                appendChildren($child, $nodeMap);\n                // Remove the child from the node map to avoid infinite loops\n                unset($nodeMap[$child['id']]);\n            }\n\n            // Append the sorted children to the parent node\n            $node['children'] = $children;\n        }\n    }\n\n    // Start with the root node(s) - nodes with parent ID 0\n    $rootNodes = array_filter($nodeMap, function ($node) {\n        return $node['parent'] == 0;\n    });\n\n    // Sort the root nodes alphabetically\n    usort($rootNodes, function ($a, $b) {\n        return strcmp($a['name'], $b['name']);\n    });\n\n    foreach ($rootNodes as &$rootNode) {\n        appendChildren($rootNode, $nodeMap);\n    }\n\n    // Flatten the array to match the original format\n    $sortedArray = [];\n    function flattenArray($nodes) use (&$sortedArray) {\n        foreach ($nodes as $node) {\n            $sortedArray[] = $node;\n            if (isset($node['children'])) {\n                flattenArray($node['children']);\n            }\n            // Remove the 'children' key to match the original format\n            unset($node['children']);\n        }\n    }\n\n    flattenArray($rootNodes);\n\n    return $sortedArray;\n}\n\n// Example usage:\n$array = [\n    ['id' => 1, 'name' => 'Kompetenser', 'parent' => 0, 'depth' => 0],\n    ['id' => 2, 'name' => 'Administration', 'parent' => 1, 'depth' => 1],\n    ['id' => 11, 'name' => 'Organisation', 'parent' => 2, 'depth' => 2],\n    // Add the rest of your data here...\n];\n\n$sortedArray = sortArrayByParentChildRelationship($array);\n\nprint_r($sortedArray);