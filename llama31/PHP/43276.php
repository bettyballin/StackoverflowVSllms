use PhpParser\ParserFactory;\nuse PhpParser\Node\Stmt\Class_;\nuse PhpParser\Node\Stmt\Function_;\n\n$parser = (new ParserFactory)->create(ParserFactory::PREFER_PHP7);\n\n$oldCode = file_get_contents('old_file.php');\n$newCode = file_get_contents('new_file.php');\n\n$oldAst = $parser->parse($oldCode);\n$newAst = $parser->parse($newCode);\n\n$changedClasses = [];\n$changedFunctions = [];\n\nforeach ($newAst as $newNode) {\n    if ($newNode instanceof Class_) {\n        $oldClass = findClass($oldAst, $newNode->name);\n        if (!$oldClass || $oldClass->stmts !== $newNode->stmts) {\n            $changedClasses[] = $newNode->name;\n        }\n    } elseif ($newNode instanceof Function_) {\n        $oldFunction = findFunction($oldAst, $newNode->name);\n        if (!$oldFunction || $oldFunction->stmts !== $newNode->stmts) {\n            $changedFunctions[] = $newNode->name;\n        }\n    }\n}\n\nprint_r($changedClasses);\nprint_r($changedFunctions);\n\nfunction findClass($ast, $className) {\n    foreach ($ast as $node) {\n        if ($node instanceof Class_ && $node->name === $className) {\n            return $node;\n        }\n    }\n    return null;\n}\n\nfunction findFunction($ast, $functionName) {\n    foreach ($ast as $node) {\n        if ($node instanceof Function_ && $node->name === $functionName) {\n            return $node;\n        }\n    }\n    return null;\n}