class Helper {\n    private $functions = [];\n\n    public function load($file) {\n        $path = 'path/to/helpers/' . $file . '.php';\n        if (file_exists($path)) {\n            require_once $path;\n            $functions = get_defined_functions()['user'];\n            foreach ($functions as $function) {\n                $this->functions[$function] = $function;\n            }\n        } else {\n            throw new Exception("Helper file not found: $file");\n        }\n    }\n\n    public function __call($method, $args) {\n        if (isset($this->functions[$method])) {\n            return call_user_func_array($this->functions[$method], $args);\n        } else {\n            throw new BadMethodCallException("Method not found: $method");\n        }\n    }\n}\n\n// Example usage:\n$registry = new stdClass();\n$registry->helper = new Helper();\n\n$registry->helper->load('external_helper_function_file');\n$registry->helper->function(); // Calls the loaded functio