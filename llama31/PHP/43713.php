// Define an abstract class for items\nabstract class Item\n{\n    protected $name;\n\n    public function __construct($name)\n    {\n        $this->name = $name;\n    }\n\n    abstract public function process();\n}\n\n// Concrete item classes\nclass Book extends Item\n{\n    public function process()\n    {\n        echo "Processing book: " . $this->name . "\n";\n        // Specific processing logic for books\n    }\n}\n\nclass Magazine extends Item\n{\n    public function process()\n    {\n        echo "Processing magazine: " . $this->name . "\n";\n        // Specific processing logic for magazines\n    }\n}\n\n// Create a collection of items\n$items = [\n    new Book('Harry Potter'),\n    new Magazine('Time'),\n    new Book('Lord of the Rings'),\n];\n\n// Using SPL's IteratorAggregate to create an iterator\nclass ItemIterator implements IteratorAggregate\n{\n    private $items;\n\n    public function __construct(array $items)\n    {\n        $this->items = $items;\n    }\n\n    public function getIterator()\n    {\n        return new ArrayIterator($this->items);\n    }\n}\n\n// Process items using the iterator\n$itemIterator = new ItemIterator($items);\nforeach ($itemIterator as $item) {\n    $item->process();\n}