interface Component {\n    public function print();\n}\n\nclass Leaf implements Component {\n    private $name;\n    private $id;\n    private $desc;\n\n    public function __construct($name, $id, $desc) {\n        $this->name = $name;\n        $this->id = $id;\n        $this->desc = $desc;\n    }\n\n    public function print() {\n        echo "Leaf: $this->name ($this->id) - $this->desc\n";\n    }\n}\n\nclass Node implements Component {\n    private $name;\n    private $id;\n    private $desc;\n    private $children = [];\n\n    public function __construct($name, $id, $desc) {\n        $this->name = $name;\n        $this->id = $id;\n        $this->desc = $desc;\n    }\n\n    public function add(Component $component) {\n        $this->children[] = $component;\n    }\n\n    public function print() {\n        echo "Node: $this->name ($this->id) - $this->desc\n";\n        foreach ($this->children as $child) {\n            $child->print();\n        }\n    }\n}\n\n// Usage:\n$root = new Node('Root', 'root-id', 'Root description');\n\n$leaf1 = new Leaf('Leaf 1', 'leaf1-id', 'Leaf 1 description');\n$leaf2 = new Leaf('Leaf 2', 'leaf2-id', 'Leaf 2 description');\n\n$node1 = new Node('Node 1', 'node1-id', 'Node 1 description');\n$node1->add($leaf1);\n\n$root->add($node1);\n$root->add($leaf2);\n\n$root->print();