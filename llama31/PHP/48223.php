class Creatives {\n    private $maxRetries = 5; // Maximum number of retries\n    private $creatives; // Store the result\n    private $campagin; // Assuming this is an object that makes the actual call\n\n    public function run() {\n        $auth_token = 'mypassword';\n        $id = 123123;\n        $this->retryTillSuccess('getCreatives', array($auth_token, $id));\n        print $this->creatives;\n    }\n\n    public function getCreatives($auth_token, $id) {\n        $this->creatives = $this->campagin->get($auth_token, $id);\n    }\n\n    private function retryTillSuccess($method, $args) {\n        $retries = 0;\n        do {\n            try {\n                // Call the method with the provided arguments\n                call_user_func_array(array($this, $method), $args);\n                // If no exception, we succeeded, exit the loop\n                break;\n            } catch (SoapFault $fault) {\n                if ($fault->faultstring == 'couldnt connect to host') {\n                    $retries++;\n                    if ($retries >= $this->maxRetries) {\n                        throw new Exception("Failed after $this->maxRetries retries.");\n                    }\n                    // Optional: You might want to add a delay before retrying\n                    // usleep(500000); // 0.5 seconds\n                } else {\n                    throw $fault; // Re-throw the exception if it's not the one we're looking for\n                }\n            }\n        } while ($retries < $this->maxRetries);\n    }\n}