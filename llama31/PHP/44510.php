class Node {\n    public $data;\n    public $prev;\n    public $next;\n\n    public function __construct($data) {\n        $this->data = $data;\n        $this->prev = null;\n        $this->next = null;\n    }\n}\n\nclass DoublyLinkedList {\n    private $head;\n    private $tail;\n\n    public function __construct() {\n        $this->head = null;\n        $this->tail = null;\n    }\n\n    public function addNode(Node $node) {\n        if ($this->head === null) {\n            $this->head = $node;\n            $this->tail = $node;\n        } else {\n            $this->tail->next = $node;\n            $node->prev = $this->tail;\n            $this->tail = $node;\n        }\n    }\n\n    public function getNodes() {\n        $nodes = [];\n        $current = $this->head;\n        while ($current !== null) {\n            $nodes[] = $current;\n            $current = $current->next;\n        }\n        return $nodes;\n    }\n}\n\n// Example usage:\n$list = new DoublyLinkedList();\n$list->addNode(new Node('A'));\n$list->addNode(new Node('B'));\n$list->addNode(new Node('C'));\n\n$nodes = $list->getNodes();\nforeach ($nodes as $node) {\n    echo $node->data . ' ';\n    if ($node->prev !== null) {\n        echo '(prev: ' . $node->prev->data . ') ';\n    }\n    if ($node->next !== null) {\n        echo '(next: ' . $node->next->data . ') ';\n    }\n    echo "\n";\n}