interface DatabaseInterface {\n    public function create($table, $data);\n    public function read($table, $id);\n    public function update($table, $id, $data);\n    public function delete($table, $id);\n}\n\nclass DatabaseMySQL implements DatabaseInterface {\n    private $db;\n\n    public function __construct($db) {\n        $this->db = $db;\n    }\n\n    public function create($table, $data) {\n        $sql = "INSERT INTO $table VALUES (" . implode(',', array_fill(0, count($data), '?')) . ")";\n        $stmt = $this->db->prepare($sql);\n        $stmt->execute(array_values($data));\n    }\n\n    public function read($table, $id) {\n        $sql = "SELECT * FROM $table WHERE id = ?";\n        $stmt = $this->db->prepare($sql);\n        $stmt->execute([$id]);\n        return $stmt->fetch();\n    }\n\n    public function update($table, $id, $data) {\n        $sql = "UPDATE $table SET " . implode(',', array_map(function($key) {\n            return "$key = ?";\n        }, array_keys($data))) . " WHERE id = ?";\n        $stmt = $this->db->prepare($sql);\n        $stmt->execute(array_merge(array_values($data), [$id]));\n    }\n\n    public function delete($table, $id) {\n        $sql = "DELETE FROM $table WHERE id = ?";\n        $stmt = $this->db->prepare($sql);\n        $stmt->execute([$id]);\n    }\n}\n\nclass UserDAO {\n    private $database;\n\n    public function __construct(DatabaseInterface $database) {\n        $this->database = $database;\n    }\n\n    public function create(User $user) {\n        $data = [\n            'first' => $user->first,\n            'last' => $user->last,\n            'email' => $user->email,\n        ];\n        $this->database->create('users', $data);\n    }\n\n    public function read($id) {\n        return $this->database->read('users', $id);\n    }\n\n    public function update(User $user) {\n        $data = [\n            'first' => $user->first,\n            'last' => $user->last,\n            'email' => $user->email,\n        ];\n        $this->database->update('users', $user->id, $data);\n    }\n\n    public function delete($id) {\n        $this->database->delete('users', $id);\n    }\n}