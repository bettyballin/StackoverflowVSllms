class DataMapper {\n    // ... existing code ...\n\n    public function getRelated($object, $relationship) {\n        $relationshipMap = $this->getRelationshipMap($object, $relationship);\n        if (!$relationshipMap) {\n            throw new Exception("Relationship not defined");\n        }\n\n        $relatedObjects = array();\n        foreach ($relationshipMap as $relatedObject) {\n            $relatedObjects[] = $this->getObject($relatedObject);\n        }\n        return $relatedObjects;\n    }\n\n    public function getRelationshipMap($object, $relationship) {\n        $objectMap = $this->getObjectMap($object);\n        if (!isset($objectMap[$relationship])) {\n            return null;\n        }\n        return $objectMap[$relationship];\n    }\n\n    public function getObjectMap($object) {\n        // Return an array of relationships for the object\n        // For example:\n        // array(\n        //     'oneToMany' => array('relatedObject1', 'relatedObject2'),\n        //     'manyToMany' => array('relatedObject3', 'relatedObject4')\n        // )\n    }\n}\n\n// Example usage:\n$dataMapper = new DataMapper();\n$user = $dataMapper->getObject('User', 1);\n\n// One-to-many\n$orders = $dataMapper->getRelated($user, 'oneToMany');\nforeach ($orders as $order) {\n    echo $order->getId() . "\n";\n}\n\n// Many-to-many\n$roles = $dataMapper->getRelated($user, 'manyToMany');\nforeach ($roles as $role) {\n    echo $role->getName() . "\n";\n}