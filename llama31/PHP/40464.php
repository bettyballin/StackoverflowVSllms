// Define an interface for a service\ninterface Logger {\n    public function log($message);\n}\n\n// Implement the service\nclass FileLogger implements Logger {\n    private $filePath;\n\n    public function __construct($filePath) {\n        $this->filePath = $filePath;\n    }\n\n    public function log($message) {\n        // Implementation to log to a file\n    }\n}\n\n// Define a class that depends on the service\nclass UserManager {\n    private $logger;\n\n    public function __construct(Logger $logger) {\n        $this->logger = $logger;\n    }\n\n    public function doSomething() {\n        // Use the logger service\n        $this->logger->log("Did something");\n    }\n}\n\n// Using a DI container (simplified example)\nclass DIContainer {\n    private $services = [];\n\n    public function register($name, $service) {\n        $this->services[$name] = $service;\n    }\n\n    public function get($name) {\n        return $this->services[$name];\n    }\n}\n\n// Usage\n$container = new DIContainer();\n$container->register("logger", new FileLogger("/path/to/log.txt"));\n$userManager = new UserManager($container->get("logger"));\n$userManager->doSomething();