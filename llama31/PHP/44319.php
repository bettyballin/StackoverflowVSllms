$descriptorspec = array(\n    0 => array("pipe", "r"),  // stdin is a pipe that the child will read from\n    1 => array("pipe", "w"),  // stdout is a pipe that the child will write to\n    2 => array("pipe", "w")   // stderr is a pipe that the child will write to\n);\n\n$process = proc_open('your_command', $descriptorspec, $pipes);\n\nif (is_resource($process)) {\n    // You can communicate with the process via $pipes, e.g.,\n    // fwrite($pipes[0], 'input'); for stdin\n    // $output = stream_get_contents($pipes[1]); for stdout\n    // $error = stream_get_contents($pipes[2]); for stderr\n    \n    // Close the pipes\n    fclose($pipes[0]);\n    fclose($pipes[1]);\n    fclose($pipes[2]);\n    \n    // It is also a good idea to close any other open file descriptors\n    // that the child might inherit, but in this example, we're focusing\n    // on the pipes created for communication.\n    \n    $return_value = proc_close($process);\n}