class Matrix {\n    private $data;\n\n    public function __construct($data) {\n        $this->data = $data;\n    }\n\n    public function add(Matrix $other) {\n        if ($this->getWidth() !== $other->getWidth() || $this->getHeight() !== $other->getHeight()) {\n            throw new Exception("Matrix dimensions do not match");\n        }\n\n        $result = [];\n        for ($i = 0; $i < $this->getHeight(); $i++) {\n            for ($j = 0; $j < $this->getWidth(); $j++) {\n                $result[$i][$j] = $this->data[$i][$j] + $other->data[$i][$j];\n            }\n        }\n\n        return new Matrix($result);\n    }\n\n    public function multiply(Matrix $other) {\n        if ($this->getWidth() !== $other->getHeight()) {\n            throw new Exception("Matrix dimensions do not match");\n        }\n\n        $result = [];\n        for ($i = 0; $i < $this->getHeight(); $i++) {\n            for ($j = 0; $j < $other->getWidth(); $j++) {\n                $result[$i][$j] = 0;\n                for ($k = 0; $k < $this->getWidth(); $k++) {\n                    $result[$i][$j] += $this->data[$i][$k] * $other->data[$k][$j];\n                }\n            }\n        }\n\n        return new Matrix($result);\n    }\n\n    public function getInverse() {\n        // Implementation of matrix inversion is more complex and may involve\n        // third-party libraries or approximations. For simplicity, this method\n        // is not implemented here.\n    }\n\n    public function getWidth() {\n        return count($this->data[0]);\n    }\n\n    public function getHeight() {\n        return count($this->data);\n    }\n}