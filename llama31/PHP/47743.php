function svd($matrix) {\n    $m = count($matrix);\n    $n = count($matrix[0]);\n\n    // Calculate the matrix transpose\n    $transpose = array();\n    for ($i = 0; $i < $n; $i++) {\n        $transpose[$i] = array();\n        for ($j = 0; $j < $m; $j++) {\n            $transpose[$i][$j] = $matrix[$j][$i];\n        }\n    }\n\n    // Calculate the matrix product (A^T A)\n    $product = array();\n    for ($i = 0; $i < $n; $i++) {\n        $product[$i] = array();\n        for ($j = 0; $j < $n; $j++) {\n            $sum = 0;\n            for ($k = 0; $k < $m; $k++) {\n                $sum += $transpose[$i][$k] * $matrix[$k][$j];\n            }\n            $product[$i][$j] = $sum;\n        }\n    }\n\n    // Compute the eigenvectors and eigenvalues of (A^T A)\n    $eigen = eigenDecomposition($product);\n\n    // Compute the singular values\n    $singularValues = array();\n    foreach ($eigen['eigenvalues'] as $eigenvalue) {\n        $singularValues[] = sqrt($eigenvalue);\n    }\n\n    // Compute the left singular vectors\n    $leftSingularVectors = array();\n    foreach ($eigen['eigenvectors'] as $eigenvector) {\n        $leftSingularVector = array();\n        foreach ($matrix as $row) {\n            $sum = 0;\n            foreach ($eigenvector as $value) {\n                $sum += $value * $row[0];\n            }\n            $leftSingularVector[] = $sum;\n        }\n        $leftSingularVectors[] = $leftSingularVector;\n    }\n\n    return array(\n        'U' => $leftSingularVectors,\n        'S' => $singularValues,\n        'V' => $eigen['eigenvectors']\n    );\n}\n\nfunction eigenDecomposition($matrix) {\n    // This is a simplified implementation of eigen decomposition\n    // In a real-world scenario, you would use a more robust algorithm or a library\n\n    $n = count($matrix);\n    $eigenvalues = array();\n    $eigenvectors = array();\n\n    for ($i = 0; $i < $n; $i++) {\n        $eigenvalue = $matrix[$i][$i];\n        $eigenvalues[] = $eigenvalue;\n        $eigenvector = array();\n        for ($j = 0; $j < $n; $j++) {\n            $eigenvector[] = ($i == $j) ? 1 : 0;\n        }\n        $eigenvectors[] = $eigenvector;\n    }\n\n    return array(\n        'eigenvalues' => $eigenvalues,\n        'eigenvectors' => $eigenvectors\n    );\n}