class Serializer {\n    private $serializedObjects = array();\n\n    public function serialize($object) {\n        if (in_array($object, $this->serializedObjects, true)) {\n            // Object has already been serialized, return a reference\n            return sprintf('Reference to object #%d', array_search($object, $this->serializedObjects));\n        }\n\n        $this->serializedObjects[] = $object;\n\n        // Now proceed with serializing the object as you normally would\n        $reflection = new ReflectionObject($object);\n        $properties = $reflection->getProperties(ReflectionProperty::IS_PUBLIC);\n\n        $serializedData = array();\n        foreach ($properties as $property) {\n            $propertyName = $property->getName();\n            $propertyValue = $property->getValue($object);\n\n            if (is_object($propertyValue)) {\n                $serializedData[$propertyName] = $this->serialize($propertyValue);\n            } else {\n                $serializedData[$propertyName] = $propertyValue;\n            }\n        }\n\n        return $serializedData;\n    }\n}\n\n// Example usage\nclass ParentClass {\n    public $children = array();\n}\n\nclass ChildClass {\n    public $parent;\n}\n\n$parent = new ParentClass();\n$child1 = new ChildClass();\n$child1->parent = $parent;\n$parent->children[] = $child1;\n\n$serializer = new Serializer();\n$serialized = $serializer->serialize($parent);\n\nprint_r($serialized);