function levenshteinDistance($s1, $s2) {\n    $m = array();\n    $n = strlen($s1);\n    $o = strlen($s2);\n    for ($i = 0; $i <= $n; $i++) {\n        $m[$i][0] = $i;\n    }\n    for ($j = 0; $j <= $o; $j++) {\n        $m[0][$j] = $j;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $o; $j++) {\n            $cost = ($s1[$i - 1] == $s2[$j - 1]) ? 0 : 1;\n            $m[$i][$j] = min(min($m[$i - 1][$j] + 1, $m[$i][$j - 1] + 1), $m[$i - 1][$j - 1] + $cost);\n        }\n    }\n    return $m[$n][$o];\n}\n\nfunction haversineDistance($lat1, $lon1, $lat2, $lon2) {\n    $earthRadius = 6371; // in kilometers\n    $dLat = deg2rad($lat2 - $lat1);\n    $dLon = deg2rad($lon2 - $lon1);\n    $a = sin($dLat / 2) * sin($dLat / 2) + cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * sin($dLon / 2) * sin($dLon / 2);\n    $c = 2 * atan2(sqrt($a), sqrt(1 - $a));\n    $distance = $earthRadius * $c;\n    return $distance;\n}\n\nfunction deg2rad($deg) {\n    return $deg * pi() / 180;\n}\n\n// Test the functions\n$s1 = "New York";\n$s2 = "NewYork";\necho levenshteinDistance($s1, $s2); // Output: 1\n\n$lat1 = 40.7128;\n$lon1 = -74.0060;\n$lat2 = 34.0522;\n$lon2 = -118.2437;\necho haversineDistance($lat1, $lon1, $lat2, $lon2); // Output: 3935.746254609723