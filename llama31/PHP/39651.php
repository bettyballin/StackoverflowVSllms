interface EventInterface {\n    public function getType();\n}\n\nclass Event implements EventInterface {\n    private $type;\n\n    public function __construct($type) {\n        $this->type = $type;\n    }\n\n    public function getType() {\n        return $this->type;\n    }\n}\n\nclass EmailEventDecorator implements EventInterface {\n    private $event;\n\n    public function __construct(Event $event) {\n        $this->event = $event;\n    }\n\n    public function getType() {\n        return 'email';\n    }\n\n    public function getAdditionalEmailData() {\n        // Return additional data specific to email events\n    }\n}\n\n// Usage:\n$event = new Event('email');\n$decoratedEvent = new EmailEventDecorator($event);\n\n// Use the decorated event object\necho $decoratedEvent->getType(); // Output: email\necho $decoratedEvent->getAdditionalEmailData(); // Output: additional email data