$mapping = [\n    0 => ['N'],\n    1 => ['L'],\n    2 => ['T'],\n    3 => ['D'],\n    4 => ['R'],\n    5 => ['V', 'F'],\n    6 => ['B', 'P'],\n    7 => ['Z'],\n    8 => ['H', 'CH', 'J'],\n    9 => ['G']\n];\n\nfunction generateCombinations($number, $mapping) {\n    if (empty($number)) {\n        return [];\n    }\n\n    $firstDigit = (int) substr($number, 0, 1);\n    $remainingNumber = substr($number, 1);\n\n    $combinations = [];\n    foreach ($mapping[$firstDigit] as $letter) {\n        if (empty($remainingNumber)) {\n            $combinations[] = $letter;\n        } else {\n            $subCombinations = generateCombinations($remainingNumber, $mapping);\n            foreach ($subCombinations as $subCombination) {\n                $combinations[] = $letter . $subCombination;\n            }\n        }\n    }\n\n    return $combinations;\n}\n\n$number = '051';\n$combinations = generateCombinations($number, $mapping);\n\nprint_r($combinations);