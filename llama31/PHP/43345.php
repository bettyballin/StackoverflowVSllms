interface MyInterface {\n    public function myMethod($arg1, $arg2);\n}\n\nclass MyClass implements MyInterface {\n    public function myMethod($arg1, $arg2) {\n        echo "Inside myMethod\n";\n        // Your method logic here\n    }\n}\n\nclass Decorator {\n    private $obj;\n\n    public function __construct(MyInterface $obj) {\n        $this->obj = $obj;\n    }\n\n    public function __call($method, $args) {\n        // Your logic before calling the actual method\n        echo "Before calling $method\n";\n\n        return call_user_func_array([$this->obj, $method], $args);\n    }\n}\n\n$obj = new MyClass();\n$decorator = new Decorator($obj);\n$decorator->myMethod('arg1', 'arg2');