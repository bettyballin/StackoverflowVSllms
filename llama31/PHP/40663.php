/**\n * Converts a value to a SQL-compatible format.\n *\n * @param mixed $value The value to convert.\n * @param string $value_type The type of the value (e.g. NUMBER, DATETIME, INTEGER, etc.).\n * @param bool $is_delimiters Whether to add delimiters (single quotes) around the value. Default: true.\n * @param bool $use_null Whether to return 'NULL' if the value is empty. Default: true.\n *\n * @return string The converted value.\n */\nfunction tosql($value, $value_type, $is_delimiters = true, $use_null = true)\n{\n    // Check if the value is not empty\n    if (is_array($value) || strlen($value)) {\n        // Handle different value types\n        switch ($value_type) {\n            case NUMBER:\n            case FLOAT:\n                // Remove commas and non-numeric characters, and replace commas with dots\n                return preg_replace(array("/,/", "/[^0-9\.,\-]/"), array(".", ""), $value);\n                break;\n\n            case DATETIME:\n                // If the value is an integer, convert it to a datetime string\n                if (!is_array($value) && is_int($value)) {\n                    $value = va_time($value);\n                }\n                // If the value is an array, format it as a datetime string\n                if (is_array($value)) {\n                    $value = va_date($this->DatetimeMask, $value);\n                } else {\n                    return "NULL";\n                }\n                break;\n\n            case INTEGER:\n                // Convert the value to an integer\n                return intval($value);\n                break;\n\n            case DATE:\n                // If the value is an integer, convert it to a date string\n                if (!is_array($value) && is_int($value)) {\n                    $value = va_time($value);\n                }\n                // If the value is an array, format it as a date string\n                if (is_array($value)) {\n                    $value = va_date($this->DateMask, $value);\n                } else {\n                    return "NULL";\n                }\n                break;\n\n            case TIME:\n                // If the value is an integer, convert it to a time string\n                if (!is_array($value) && is_int($value)) {\n                    $value = va_time($value);\n                }\n                // If the value is an array, format it as a time string\n                if (is_array($value)) {\n                    $value = va_date($this->TimeMask, $value);\n                } else {\n                    return "NULL";\n                }\n                break;\n\n            case TIMESTAMP:\n                // If the value is an integer, convert it to a timestamp string\n                if (!is_array($value) && is_int($value)) {\n                    $value = va_time($value);\n                }\n                // If the value is an array, format it as a timestamp string\n                if (is_array($value)) {\n                    $value = va_date($this->TimestampMask, $value);\n                } else {\n                    return "NULL";\n                }\n                break;\n\n            case NUMBERS_LIST:\n            case FLOATS_LIST:\n                // Split the value into an array of numbers\n                $values = (is_array($value)) ? $value : explode(",", $value);\n                // Clean and format each number in the array\n                for ($v = 0; $v < sizeof($values); $v++) {\n                    $value = $values[$v];\n                    $value = preg_replace(array("/,/", "/[^0-9\.,\-]/"), array(".", ""), $value);\n                    if (!is_numeric($value)) {\n                        $value = 0;\n                    }\n                    $values[$v] = $value;\n                }\n                // Join the formatted numbers back into a string\n                return implode(",", $values);\n                break;\n\n            case INTEGERS_LIST:\n                // Split the value into an array of integers\n                $values = (is_array($value)) ? $value : explode(",", $value);\n                // Convert each integer in the array\n                for ($v = 0; $v < sizeof($values); $v++) {\n                    $values[$v] = intval($values[$v]);\n                }\n                // Join the converted integers back into a string\n                return implode(",", $values);\n                break;\n\n            default:\n                // Add slashes to the value to escape special characters\n                $value = addslashes($value);\n                break;\n        }\n\n        // Add delimiters (single quotes) around the value if required\n        if ($is_delimiters) {\n            $value = "'" . $value . "'";\n        }\n    } elseif ($use_null) {\n        // Return 'NULL' if the value is empty and $use_null is true\n        $value = "NULL";\n    } else {\n        // If the value is empty and $use_null is false, return a default value\n        if ($value_type == INTEGER || $value_type == FLOAT || $value_type == NUMBER\n            || $value_type == NUMBERS_LIST || $value_type == FLOATS_LIST || $value_type == INTEGERS_LIST\n        ) {\n            $value = 0;\n        } elseif ($is_delimiters) {\n            $value = "''";\n        }\n    }\n\n    // Return the converted value\n    return $value;\n}