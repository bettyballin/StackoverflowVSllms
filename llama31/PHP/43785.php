class WeightCalculator {\n    private $data = [];\n    private $universe = 0;\n\n    public function add($value, $probability) {\n        if ($probability < 0) {\n            throw new InvalidArgumentException("Probability must be non-negative");\n        }\n\n        $this->data[] = new stdClass();\n        $this->data[count($this->data) - 1]->value = $value;\n        $this->data[count($this->data) - 1]->probability = $probability;\n        $this->universe += $probability;\n    }\n\n    public function get() {\n        if (count($this->data) === 0) {\n            throw new RuntimeException("No elements have been added to the calculator");\n        }\n\n        $random = mt_rand(0, $this->universe - 1);\n        $cumulativeProbability = 0;\n\n        foreach ($this->data as $element) {\n            $cumulativeProbability += $element->probability;\n\n            if ($random < $cumulativeProbability) {\n                return $element->value;\n            }\n        }\n\n        // This should never be reached, but return the last element's value just in case\n        return $this->data[count($this->data) - 1]->value;\n    }\n}\n\n$object = new WeightCalculator();\n$object->add('test1', 10);\n$object->add('test2', 20);\n$object->add('test3', 30);\n$object->add('test4', 40);