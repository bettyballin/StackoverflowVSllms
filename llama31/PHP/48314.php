class Cache {\n    private $memcache;\n    private $fileCacheDir;\n\n    public function __construct($memcache, $fileCacheDir) {\n        $this->memcache = $memcache;\n        $this->fileCacheDir = $fileCacheDir;\n    }\n\n    public function get($key) {\n        // Try Memcache first\n        if ($this->memcache->get($key)) {\n            return $this->memcache->get($key);\n        }\n\n        // Fallback to file cache\n        $fileCachePath = $this->fileCacheDir . '/' . $key . '.cache';\n        if (file_exists($fileCachePath)) {\n            return unserialize(file_get_contents($fileCachePath));\n        }\n\n        return null;\n    }\n\n    public function set($key, $value) {\n        // Store in Memcache\n        $this->memcache->set($key, $value);\n\n        // Store in file cache (for larger datasets)\n        $fileCachePath = $this->fileCacheDir . '/' . $key . '.cache';\n        file_put_contents($fileCachePath, serialize($value));\n    }\n\n    public function invalidate($key) {\n        // Invalidate Memcache entry\n        $this->memcache->delete($key);\n\n        // Remove file cache entry\n        $fileCachePath = $this->fileCacheDir . '/' . $key . '.cache';\n        if (file_exists($fileCachePath)) {\n            unlink($fileCachePath);\n        }\n    }\n}