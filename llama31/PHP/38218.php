class RateLimiter {\n    private $tokens;\n    private $refillRate;\n    private $lastRefill;\n\n    public function __construct($tokens, $refillRate) {\n        $this->tokens = $tokens;\n        $this->refillRate = $refillRate;\n        $this->lastRefill = microtime(true);\n    }\n\n    public function isAllowed() {\n        $now = microtime(true);\n        $elapsed = $now - $this->lastRefill;\n        $this->tokens += $elapsed * $this->refillRate;\n        $this->lastRefill = $now;\n\n        if ($this->tokens >= 1) {\n            $this->tokens -= 1;\n            return true;\n        }\n\n        return false;\n    }\n}\n\n$limiter = new RateLimiter(5, 1); // 5 tokens, refill rate of 1 token per second\n\nif ($limiter->isAllowed()) {\n    // Perform action\n} else {\n    // Delay or block request\n}