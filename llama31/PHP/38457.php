/**\n * Base exception class for custom exceptions.\n */\nclass MyBaseException extends Exception\n{\n    /**\n     * Initializes the exception with a message and code.\n     *\n     * @param string $message The error message.\n     * @param int $code The error code.\n     */\n    public function __construct($message, $code = 0)\n    {\n        parent::__construct($message, $code);\n    }\n\n    /**\n     * Returns a human-readable representation of the exception.\n     *\n     * @return string The exception details.\n     */\n    public function __toString()\n    {\n        return "Error {$this->getCode()}: {$this->getMessage()}";\n    }\n}\n\n/**\n * Exception for incorrect data types.\n */\nclass MyWrongTypeException extends MyBaseException\n{\n    /**\n     * Initializes the exception with object name, object, expected type, and message.\n     *\n     * @param string $objectName The name of the object.\n     * @param mixed $object The object of the wrong type.\n     * @param string $expected The expected type.\n     * @param string $message Additional human-readable information.\n     * @param int $code The error code.\n     */\n    public function __construct($objectName, $object, $expected, $message = '', $code = 0)\n    {\n        $receivedType = gettype($object);\n        $message = "Wrong Type: $objectName. Expected $expected, received $receivedType. $message";\n        debug_dump($message, $object);\n        parent::__construct($message, $code);\n    }\n}\n\n/**\n * If we are in debug mode, append the var_dump of $object to $message\n */\nfunction debug_dump(&$message, &$object)\n{\n    if (App::get_mode() == 'debug') {\n        ob_start();\n        var_dump($object);\n        $message = $message . "Debug Info: " . ob_get_clean();\n    }\n}