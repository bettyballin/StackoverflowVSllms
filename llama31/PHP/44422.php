function heapSort($a, $count){\n    $a = heapify($a, $count);\n\n    $end = $count - 1;\n    while ($end > 0){\n        $temp = $a[$end];\n\n        $a[$end] = $a[0] ;\n\n        $a[0]= $temp;\n        $end = $end - 1;\n        $a = siftDown($a, 0, $end);\n    }\n    return $a;\n}\n\nfunction heapify($a,$count){\n    $start = floor(($count - 2) / 2);\n\n    while ($start >= 0){\n        $a = siftDown($a, $start, $count-1);\n        $start = $start - 1;\n    }\n    return $a;\n}\n\nfunction siftDown($a, $start, $end){\n    $root = $start;\n\n    while ($root * 2 + 1 <= $end){// While the root has at least one child\n        $child = $root * 2 + 1;      // root*2+1 points to the left child\n                                     //If the child has a sibling and the \n                                     //child's value is less than its\n                                     //sibling's\n        if ($child + 1 <= $end and $a[$child] < $a[$child + 1])\n            $child = $child + 1;// then point to the right child instead)\n        if ($a[$root] < $a[$child]){ // out of max-heap order\n              list($a[$child],$a[$root]) = array($a[$root],$a[$child]);\n            $root = $child;      // repeat to continue sifting down\n                                 // the child now\n        }\n        else {\n            return $a;\n        }\n    }\n    return $a;\n}\n\n$a = Array(3,1,5,2);\n$b = heapSort($a,count($a));\nprint_r($b);