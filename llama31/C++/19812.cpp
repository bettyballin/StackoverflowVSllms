class some_class {\nprivate:\n    boost::asio::io_service io_service;\n    boost::asio::ip::tcp::socket sock;\n\npublic:\n    some_class() {}\n\n    void connect(char* host, char* port) {\n        printf("Resolving hostname...\n");\n\n        /* Resolve hostname. */\n        boost::asio::ip::tcp::resolver resolver(io_service);\n        boost::asio::ip::tcp::resolver::query query(boost::asio::ip::tcp::v4(), host, port);\n        resolver.async_resolve(query, boost::bind(&some_class::handle_resolve, this, boost::asio::placeholders::error, boost::asio::placeholders::iterator));\n    }\n\n    void handle_resolve(const boost::system::error_code& err, boost::asio::ip::tcp::resolver::iterator iterator) {\n        if (err) {\n            // Handle error\n            return;\n        }\n\n        printf("Connecting to %s:%s... ", iterator->host().c_str(), iterator->service().c_str());\n\n        /* Connect to resolved hosts. */\n        sock.async_connect(*iterator, boost::bind(&some_class::handle_connect, this, boost::asio::placeholders::error));\n    }\n\n    void handle_connect(const boost::system::error_code& err) {\n        if (err) {\n            // Handle error\n            return;\n        }\n\n        // Connection established\n    }\n\n    void run() {\n        io_service.run();\n    }\n};