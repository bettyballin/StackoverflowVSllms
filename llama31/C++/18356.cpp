#include <iostream>\n#include <string>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\nclass ChatClient {\npublic:\n    ChatClient(std::string server_ip, int server_port) : server_ip_(server_ip), server_port_(server_port) {}\n\n    void start() {\n        // Create a TCP socket\n        int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockfd < 0) {\n            std::cerr << "Failed to create socket" << std::endl;\n            return;\n        }\n\n        // Connect to the directory service\n        struct sockaddr_in serv_addr;\n        serv_addr.sin_family = AF_INET;\n        serv_addr.sin_port = htons(server_port_);\n        inet_pton(AF_INET, server_ip_.c_str(), &serv_addr.sin_addr);\n        if (connect(sockfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {\n            std::cerr << "Failed to connect to directory service" << std::endl;\n            return;\n        }\n\n        // Register with the directory service\n        send(sockfd, "register", 8, 0);\n\n        // Get the list of registered peers\n        send(sockfd, "get_peers", 9, 0);\n        char buffer[256];\n        read(sockfd, buffer, 256);\n        std::string peer_list(buffer);\n\n        // Connect to a peer\n        std::string peer_ip = "127.0.0.1";\n        int peer_port = 8080;\n        // ...\n\n        // Establish a P2P connection with the peer\n        int peer_sockfd = socket(AF_INET, SOCK_STREAM, 0);\n        // ...\n    }\n\nprivate:\n    std::string server_ip_;\n    int server_port_;\n};