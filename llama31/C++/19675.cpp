// Import the TLB file\n#import "your_tlb_file.tlb" no_namespace\n\n// Define the sink class that implements the IS8SimulationEvents interface\nclass CS8SimulationSink : public IS8SimulationEvents\n{\npublic:\n    CS8SimulationSink() {}\n    virtual ~CS8SimulationSink() {}\n\n    // Implement the S8SimulationEndRun event handler\n    HRESULT STDMETHODCALLTYPE S8SimulationEndRun()\n    {\n        // Handle the event here, e.g., print a message\n        std::cout << "S8SimulationEndRun event received!" << std::endl;\n        return S_OK;\n    }\n\n    // Implement the QueryInterface, AddRef, and Release methods\n    HRESULT STDMETHODCALLTYPE QueryInterface(REFIID riid, void** ppvObject)\n    {\n        if (riid == IID_IS8SimulationEvents)\n        {\n            *ppvObject = this;\n            AddRef();\n            return S_OK;\n        }\n        return E_NOINTERFACE;\n    }\n\n    ULONG STDMETHODCALLTYPE AddRef()\n    {\n        return InterlockedIncrement(&m_cRef);\n    }\n\n    ULONG STDMETHODCALLTYPE Release()\n    {\n        ULONG lRef = InterlockedDecrement(&m_cRef);\n        if (lRef == 0)\n        {\n            delete this;\n        }\n        return lRef;\n    }\n\nprivate:\n    long m_cRef = 0;\n};\n\nint main()\n{\n    // Create an instance of the COM object\n    IS8Simulation* pS8Simulation = NULL;\n    HRESULT hr = CoCreateInstance(CLSID_S8Simulation, NULL, CLSCTX_OUTPROC_SERVER, IID_PPV_ARGS(&pS8Simulation));\n    if (FAILED(hr))\n    {\n        std::cerr << "Failed to create S8Simulation instance!" << std::endl;\n        return 1;\n    }\n\n    // Create an instance of the sink object\n    CS8SimulationSink* pSink = new CS8SimulationSink();\n\n    // Connect the sink to the COM object\n    hr = pS8Simulation->put_S8SimulationEvents(pSink);\n    if (FAILED(hr))\n    {\n        std::cerr << "Failed to connect sink to S8Simulation instance!" << std::endl;\n        return 1;\n    }\n\n    // Release the COM object and sink\n    pS8Simulation->Release();\n    pSink->Release();\n\n    return 0;\n}