template <typename T>\nclass SwapAndPopArray {\nprivate:\n    T* data;\n    int size;\n    int capacity;\n\npublic:\n    SwapAndPopArray(int initialCapacity) : size(0), capacity(initialCapacity) {\n        data = new T[capacity];\n    }\n\n    ~SwapAndPopArray() {\n        delete[] data;\n    }\n\n    void push_back(const T& element) {\n        if (size == capacity) {\n            // reallocate and copy data\n            capacity *= 2;\n            T* newData = new T[capacity];\n            std::copy(data, data + size, newData);\n            delete[] data;\n            data = newData;\n        }\n        data[size++] = element;\n    }\n\n    void remove(int index) {\n        if (index < 0 || index >= size) {\n            throw std::out_of_range("Index out of range");\n        }\n        data[index] = data[--size];\n    }\n\n    T& operator[](int index) {\n        if (index < 0 || index >= size) {\n            throw std::out_of_range("Index out of range");\n        }\n        return data[index];\n    }\n};