#include <windows.h>\n#include <sal.h>\n\n// Your filter's GUID\nDEFINE_GUID(CLSID_MyFilter, \n  0x12345678, 0x1234, 0x1234, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56);\n\n// Filter's entry point\nDWORD WINAPI MyFilterProc(HTTP_FILTER_CONTEXT *pfc, \n                          DWORD dwNotificationType, \n                          VOID *pvNotification) {\n  // Get the client certificate\n  PCCERT_CONTEXT pCertContext = pfc->GetCertContext();\n  if (pCertContext != NULL) {\n    // Extract the organization name from the cert\n    WCHAR *pOrgName = NULL;\n    DWORD dwOrgNameLen = 0;\n    if (CertGetNameStringW(pCertContext, CERT_NAME_ATTR_TYPE, \n                           CERT_NAME_SIMPLE_DISPLAY_TYPE, \n                           NULL, &dwOrgNameLen)) {\n      pOrgName = (WCHAR *)HeapAlloc(GetProcessHeap(), 0, dwOrgNameLen * sizeof(WCHAR));\n      CertGetNameStringW(pCertContext, CERT_NAME_ATTR_TYPE, \n                         CERT_NAME_SIMPLE_DISPLAY_TYPE, \n                         pOrgName, &dwOrgNameLen);\n    }\n\n    // Check if the org name matches the expected value\n    if (lstrcmpiW(pOrgName, L"BigClientX") == 0) {\n      // Allow access to virtual directory Z\n      pfc->SetUrlMap("/VirtualDirectoryZ", "/PhysicalPathToVirtualDirectoryZ");\n    } else {\n      // Deny access\n      pfc->SetErrorStatus(403); // Forbidden\n    }\n\n    // Free the org name string\n    if (pOrgName != NULL) {\n      HeapFree(GetProcessHeap(), 0, pOrgName);\n    }\n  }\n\n  return SF_STATUS_REQ_NEXT_NOTIFICATION;\n}\n\n// Filter registration\nBOOL WINAPI MyFilterRegister(HMODULE hModule) {\n  // Register the filter with IIS\n  ISAPIFilter *pFilter = new MyFilter();\n  HRESULT hr = pFilter->Register(hModule, CLSID_MyFilter, L"My Filter");\n  delete pFilter;\n  return SUCCEEDED(hr);\n}