#include <signal.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n\nclass TempFile {\npublic:\n    TempFile(const char* name) : name_(name) {\n        fd_ = open(name_, O_CREAT | O_RDWR, 0600);\n        if (fd_ == -1) {\n            perror("open");\n            exit(1);\n        }\n    }\n\n    ~TempFile() {\n        close(fd_);\n        unlink(name_);\n    }\n\n    int fd() { return fd_; }\n\nprivate:\n    int fd_;\n    const char* name_;\n};\n\nvoid signal_handler(int sig) {\n    // Call _exit() to ensure the file descriptor is closed\n    _exit(1);\n}\n\nint main() {\n    const char* filename = "/dev/mqueue/my_queue";\n    TempFile file(filename);\n\n    // Create the POSIX Message Queue\n    mqd_t mqd = mq_open(filename, O_CREAT | O_RDWR, 0600, NULL);\n    if (mqd == (mqd_t) -1) {\n        perror("mq_open");\n        exit(1);\n    }\n\n    // Register the signal handler\n    struct sigaction sa;\n    sa.sa_handler = signal_handler;\n    sigemptyset(&sa.sa_mask);\n    sa.sa_flags = SA_RESETHAND;\n    sigaction(SIGTERM, &sa, NULL);\n\n    // Use the message queue...\n    // ...\n\n    // Close the message queue\n    mq_close(mqd);\n\n    return 0;\n}