#include <Windows.h>\n#include <SetupAPI.h>\n#include <stdio.h>\n\n// Function prototypes\nbool EnableNetworkAdapter(const GUID& guid);\nbool DisableNetworkAdapter(const GUID& guid);\n\nint main() {\n    // Example GUID, replace with the actual GUID of the network adapter\n    GUID adapterGuid = { 0x2ac1339a, 0x033b, 0x4a63, { 0x89, 0x5e, 0x34, 0x4f, 0x78, 0x3a, 0x4b, 0x2e } };\n\n    // Enable the network adapter\n    if (!EnableNetworkAdapter(adapterGuid)) {\n        printf("Failed to enable the network adapter.\n");\n    }\n\n    // Disable the network adapter\n    if (!DisableNetworkAdapter(adapterGuid)) {\n        printf("Failed to disable the network adapter.\n");\n    }\n\n    return 0;\n}\n\nbool EnableNetworkAdapter(const GUID& guid) {\n    HDEVINFO devInfo = SetupDiGetClassDevs(&guid, NULL, NULL, DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);\n    if (devInfo == INVALID_HANDLE_VALUE) {\n        return false;\n    }\n\n    SP_DEVINFO_DATA devInfoData;\n    devInfoData.cbSize = sizeof(SP_DEVINFO_DATA);\n\n    if (!SetupDiEnumDeviceInfo(devInfo, 0, &devInfoData)) {\n        SetupDiDestroyDeviceInfoList(devInfo);\n        return false;\n    }\n\n    SP_PROPCHANGE_PARAMS propChangeParams;\n    propChangeParams.ClassInstallHeader.cbSize = sizeof(SP_CLASSINSTALL_HEADER);\n    propChangeParams.ClassInstallHeader.InstallFunction = DIF_PROPERTYCHANGE;\n    propChangeParams.StateChange = DICS_ENABLE;\n    propChangeParams.Scope = DICS_FLAG_CONFIGSPECIFIC;\n    propChangeParams.HwProfile = 0;\n\n    if (!SetupDiSetClassInstallParams(devInfo, &devInfoData, &propChangeParams.ClassInstallHeader, sizeof(propChangeParams))) {\n        SetupDiDestroyDeviceInfoList(devInfo);\n        return false;\n    }\n\n    if (!SetupDiCallClassInstaller(DIF_PROPERTYCHANGE, devInfo, &devInfoData)) {\n        SetupDiDestroyDeviceInfoList(devInfo);\n        return false;\n    }\n\n    SetupDiDestroyDeviceInfoList(devInfo);\n    return true;\n}\n\nbool DisableNetworkAdapter(const GUID& guid) {\n    // The process is similar to enabling, but you use DICS_DISABLE instead of DICS_ENABLE\n    HDEVINFO devInfo = SetupDiGetClassDevs(&guid, NULL, NULL, DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);\n    if (devInfo == INVALID_HANDLE_VALUE) {\n        return false;\n    }\n\n    SP_DEVINFO_DATA devInfoData;\n    devInfoData.cbSize = sizeof(SP_DEVINFO_DATA);\n\n    if (!SetupDiEnumDeviceInfo(devInfo, 0, &devInfoData)) {\n        SetupDiDestroyDeviceInfoList(devInfo);\n        return false;\n    }\n\n    SP_PROPCHANGE_PARAMS propChangeParams;\n    propChangeParams.ClassInstallHeader.cbSize = sizeof(SP_CLASSINSTALL_HEADER);\n    propChangeParams.ClassInstallHeader.InstallFunction = DIF_PROPERTYCHANGE;\n    propChangeParams.StateChange = DICS_DISABLE;\n    propChangeParams.Scope = DICS_FLAG_CONFIGSPECIFIC;\n    propChangeParams.HwProfile = 0;\n\n    if (!SetupDiSetClassInstallParams(devInfo, &devInfoData, &propChangeParams.ClassInstallHeader, sizeof(propChangeParams))) {\n        SetupDiDestroyDeviceInfoList(devInfo);\n        return false;\n    }\n\n    if (!SetupDiCallClassInstaller(DIF_PROPERTYCHANGE, devInfo, &devInfoData)) {\n        SetupDiDestroyDeviceInfoList(devInfo);\n        return false;\n    }\n\n    SetupDiDestroyDeviceInfoList(devInfo);\n    return true;\n}