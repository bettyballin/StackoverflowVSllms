// original.cpp\nint main() {\n    std::cout << "Original version" << std::endl;\n    return 0;\n}\n\n// patched.cpp\nint main() {\n    std::cout << "Patched version" << std::endl;\n    return 0;\n}\n\n// create_patch.cpp\n#include <fstream>\n#include <vector>\n\nint main() {\n    std::ifstream originalFile("original.exe", std::ios::binary);\n    std::ifstream patchedFile("patched.exe", std::ios::binary);\n\n    std::vector<char> originalData((std::istreambuf_iterator<char>(originalFile)), std::istreambuf_iterator<char>());\n    std::vector<char> patchedData((std::istreambuf_iterator<char>(patchedFile)), std::istreambuf_iterator<char>());\n\n    // Compute the binary diff\n    std::vector<char> diff;\n    for (size_t i = 0; i < originalData.size(); ++i) {\n        if (originalData[i] != patchedData[i]) {\n            diff.push_back(patchedData[i]);\n        }\n    }\n\n    // Create the patch file\n    std::ofstream patchFile("patch.bin", std::ios::binary);\n    patchFile.write(diff.data(), diff.size());\n\n    return 0;\n}