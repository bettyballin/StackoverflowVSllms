#include <algorithm>\n#include <vector>\n#include <random>\n\nclass PredictableRandom {\npublic:\n    PredictableRandom(double probability, int numSamples) {\n        std::vector<int> sequence(numSamples);\n        int numSuccesses = static_cast<int>(numSamples * probability);\n        for (int i = 0; i < numSuccesses; ++i) {\n            sequence[i] = 1; // critical hit\n        }\n        for (int i = numSuccesses; i < numSamples; ++i) {\n            sequence[i] = 0; // normal hit\n        }\n        std::random_device rd;\n        std::mt19937 g(rd());\n        std::shuffle(sequence.begin(), sequence.end(), g);\n        index_ = 0;\n        sequence_ = sequence;\n    }\n\n    int next() {\n        if (index_ >= sequence_.size()) {\n            index_ = 0;\n        }\n        return sequence_[index_++];\n    }\n\nprivate:\n    std::vector<int> sequence_;\n    int index_;\n};