template <typename Host, typename Ret, typename... Args>\nstruct MemberFunctionWrapper {\n    using FuncPtr = Ret (Host::*)(Args...);\n\n    MemberFunctionWrapper(FuncPtr func) : func_(func) {}\n\n    // ...\n\n    FuncPtr func_;\n};\n\ntemplate <typename Host, typename Ret, typename... Args>\nMemberFunctionWrapper<Host, Ret, Args...> MakeWrapper(Ret (Host::*)(Args...)) {\n    return MemberFunctionWrapper<Host, Ret, Args...>();\n}\n\nclass Foo {\n    void func0();\n    int func2(char*, float);\n};\n\nint main() {\n    auto wrapper0 = MakeWrapper(&Foo::func0);\n    auto wrapper2 = MakeWrapper(&Foo::func2);\n    // ...\n}