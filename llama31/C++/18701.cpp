#include <Windows.h>\n#include <BCrypt.h>\n\n// PBKDF2 function\nint pbkdf2(const char* password, int passwordLen, const char* salt, int saltLen, int iterations, \n           int keyLen, unsigned char* key)\n{\n    BCRYPT_ALG_HANDLE hAlgorithm;\n    BCRYPT_HASH_HANDLE hHash;\n    NTSTATUS status;\n\n    status = BCryptOpenAlgorithmProvider(&hAlgorithm, BCRYPT_SHA1_ALGORITHM, NULL, 0);\n\n    if (status != STATUS_SUCCESS) \n        return -1;\n\n    status = BCryptCreateHash(hAlgorithm, &hHash, NULL, 0, NULL, 0, 0);\n\n    if (status != STATUS_SUCCESS)\n    {\n        BCryptCloseAlgorithmProvider(hAlgorithm, 0);\n        return -1;\n    }\n\n    status = BCryptHashData(hHash, (const BYTE*)password, passwordLen, 0);\n\n    if (status != STATUS_SUCCESS)\n    {\n        BCryptDestroyHash(hHash);\n        BCryptCloseAlgorithmProvider(hAlgorithm, 0);\n        return -1;\n    }\n\n    for (int i = 0; i < iterations; i++)\n    {\n        status = BCryptHashData(hHash, (const BYTE*)salt, saltLen, 0);\n\n        if (status != STATUS_SUCCESS)\n        {\n            BCryptDestroyHash(hHash);\n            BCryptCloseAlgorithmProvider(hAlgorithm, 0);\n            return -1;\n        }\n    }\n\n    status = BCryptFinishHash(hHash, NULL, 0, 0);\n\n    if (status != STATUS_SUCCESS)\n    {\n        BCryptDestroyHash(hHash);\n        BCryptCloseAlgorithmProvider(hAlgorithm, 0);\n        return -1;\n    }\n\n    DWORD cbResult, dwResult;\n    unsigned char pbResult[64];\n\n    cbResult = 64;\n    status = BCryptGetHashParam(hHash, BCRYPT_HASH, pbResult, cbResult, &cbResult, 0);\n\n    if (status != STATUS_SUCCESS)\n    {\n        BCryptDestroyHash(hHash);\n        BCryptCloseAlgorithmProvider(hAlgorithm, 0);\n        return -1;\n    }\n\n    memcpy_s(key, keyLen, pbResult, keyLen);\n\n    BCryptDestroyHash(hHash);\n    BCryptCloseAlgorithmProvider(hAlgorithm, 0);\n\n    return 0;\n}