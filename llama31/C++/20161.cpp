#include <mscoree.h>\n#include <metahost.h>\n\n// Import the .NET runtime\n#pragma comment(lib, "mscoree.lib")\n\nint main()\n{\n    // Initialize the CLR\n    ICLRRuntimeHost* pClrRuntimeHost = NULL;\n    HRESULT hr = CorBindToRuntimeEx(NULL, L"wks", 0, CLSID_CLRRuntimeHost, IID_PPV_ARGS(&pClrRuntimeHost));\n    if (FAILED(hr))\n    {\n        // Error handling\n    }\n\n    // Start the CLR\n    hr = pClrRuntimeHost->Start();\n    if (FAILED(hr))\n    {\n        // Error handling\n    }\n\n    // Create a .NET assembly and get a pointer to the C# class\n    IUnknownPtr pAppDomainThunk = NULL;\n    hr = pClrRuntimeHost->GetDefaultDomain(&pAppDomainThunk);\n    if (FAILED(hr))\n    {\n        // Error handling\n    }\n\n    CComPtr<IAppDomain> pDefaultAppDomain;\n    hr = pAppDomainThunk->QueryInterface(&pDefaultAppDomain);\n    if (FAILED(hr))\n    {\n        // Error handling\n    }\n\n    bstr_t bstrAssemblyName("MyCSharpAssembly");\n    bstr_t bstrClassName("MyCSharpClass");\n    CComPtr<_ObjectHandle> pObjectHandle;\n    hr = pDefaultAppDomain->CreateInstance(bstrAssemblyName, bstrClassName, &pObjectHandle);\n    if (FAILED(hr))\n    {\n        // Error handling\n    }\n\n    // Get a pointer to the C# object\n    VARIANT pObject;\n    VariantInit(&pObject);\n    hr = pObjectHandle->Unwrap(&pObject);\n    if (FAILED(hr))\n    {\n        // Error handling\n    }\n\n    // Call a C# method on the object\n    IDispatchPtr pDispatch;\n    hr = pObject.punkVal->QueryInterface(&pDispatch);\n    if (FAILED(hr))\n    {\n        // Error handling\n    }\n\n    bstr_t bstrMethodName("MyCSharpMethod");\n    DISPID dispid;\n    hr = pDispatch->GetIDsOfNames(IID_NULL, &bstrMethodName, 1, LOCALE_SYSTEM_DEFAULT, &dispid);\n    if (FAILED(hr))\n    {\n        // Error handling\n    }\n\n    VARIANT result;\n    VariantInit(&result);\n    hr = pDispatch->Invoke(dispid, IID_NULL, LOCALE_SYSTEM_DEFAULT, DISPATCH_METHOD, NULL, NULL, &result, NULL, NULL);\n    if (FAILED(hr))\n    {\n        // Error handling\n    }\n\n    // Clean up\n    pClrRuntimeHost->Stop();\n    pClrRuntimeHost->Release();\n    return 0;\n}