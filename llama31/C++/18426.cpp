class CriticalSectionInitializer {\npublic:\n    CriticalSectionInitializer() {\n        if (!initialized_) {\n            std::lock_guard<std::mutex> lock(mutex_);\n            if (!initialized_) {\n                InitializeCriticalSection(&cs_);\n                initialized_ = true;\n            }\n        }\n    }\n\n    ~CriticalSectionInitializer() {\n        DeleteCriticalSection(&cs_);\n    }\n\n    CRITICAL_SECTION& GetCriticalSection() {\n        return cs_;\n    }\n\nprivate:\n    static std::mutex mutex_;\n    static bool initialized_;\n    static CRITICAL_SECTION cs_;\n};\n\nstd::mutex CriticalSectionInitializer::mutex_;\nbool CriticalSectionInitializer::initialized_ = false;\nCRITICAL_SECTION CriticalSectionInitializer::cs_;\n\n// Usage:\nCriticalSectionInitializer initializer;\nCRITICAL_SECTION& cs = initializer.GetCriticalSection();\nEnterCriticalSection(&cs);\n// ... critical section code ...\nLeaveCriticalSection(&cs);