#include <llvm/IR/LLVMContext.h>\n#include <llvm/IR/Module.h>\n#include <llvm/IR/Function.h>\n#include <llvm/IR/BasicBlock.h>\n#include <llvm/IR/Instruction.h>\n\nint main() {\n  // Create an LLVM context\n  LLVMContextRef ctx = LLVMContextCreate();\n\n  // Create a new module\n  ModuleRef mod = LLVMModuleCreateWithName("my_module");\n\n  // Create a new function\n  FunctionRef func = LLVMAddFunction(mod, "my_func", LLVMFunctionType(LLVMInt32Type(), NULL, 0, 0));\n\n  // Create a new basic block\n  BasicBlockRef bb = LLVMAppendBasicBlockInContext(ctx, func, "entry");\n\n  // Create a new instruction\n  InstructionRef inst = LLVMBuildAdd(LLVMBuilderCreate(ctx), LLVMConstInt(LLVMInt32Type(), 1), LLVMConstInt(LLVMInt32Type(), 2), "result");\n\n  // Add the instruction to the basic block\n  LLVMInsertIntoBasicBlock(bb, inst);\n\n  // Print the module to the console\n  LLVMDumpModule(mod);\n\n  // Clean up\n  LLVMDisposeModule(mod);\n  LLVMContextDispose(ctx);\n\n  return 0;\n}