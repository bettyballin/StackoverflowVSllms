// Assuming you have a 2D array of pixel values (texData) with dimensions width and height\nunsigned char* texData = ...;\nint width = ...;\nint height = ...;\n\n// Define the lower and upper bounds for clamping\nfloat lowerBound = ...;\nfloat upperBound = ...;\n\n// Iterate over each pixel and apply the color mapping\nfor (int y = 0; y < height; ++y) {\n    for (int x = 0; x < width; ++x) {\n        float pixelValue = texData[y * width + x];\n\n        // Clamp the pixel value to the range [lowerBound, upperBound]\n        if (pixelValue < lowerBound) {\n            pixelValue = 0.0f;\n        } else if (pixelValue > upperBound) {\n            pixelValue = 0.0f;\n        } else {\n            // Linearly map the pixel value to the range [0, 1]\n            pixelValue = (pixelValue - lowerBound) / (upperBound - lowerBound);\n        }\n\n        // Store the mapped pixel value back in the texture data array\n        texData[y * width + x] = static_cast<unsigned char>(pixelValue * 255.0f);\n    }\n}\n\n// Upload the modified texture data to OpenGL\nglBindTexture(GL_TEXTURE_2D, textureId);\nglTexImage2D(GL_TEXTURE_2D, 0, GL_LUMINANCE, width, height, 0, GL_LUMINANCE, GL_UNSIGNED_BYTE, texData);