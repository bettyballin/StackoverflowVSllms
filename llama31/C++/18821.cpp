#include <iostream>\n#include <string>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint main() {\n    int server_fd, client_fd;\n    struct sockaddr_in server_addr, client_addr;\n    socklen_t client_len = sizeof(client_addr);\n    char buffer[1024];\n\n    // Create and bind the server socket\n    server_fd = socket(AF_INET, SOCK_STREAM, 0);\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(8080);\n    inet_pton(AF_INET, "127.0.0.1", &(server_addr.sin_addr));\n    bind(server_fd, (struct sockaddr*)&server_addr, sizeof(server_addr));\n    listen(server_fd, 3);\n\n    while (true) {\n        client_fd = accept(server_fd, (struct sockaddr*)&client_addr, &client_len);\n        if (client_fd < 0) {\n            continue;\n        }\n\n        // Read the initial request data\n        read(client_fd, buffer, 1024);\n\n        // Check if it's an HTTP request\n        std::string request(buffer);\n        if (request.find("HTTP/") != std::string::npos) {\n            // Close the connection\n            close(client_fd);\n        } else {\n            // Handle the connection as needed\n            // ...\n        }\n    }\n\n    return 0;\n}