#include <Windows.h>\n#include <iostream>\n\nint main() {\n    HMODULE hModule = LoadLibraryA("yourdll.dll");\n    if (hModule == NULL) {\n        std::cerr << "Failed to load DLL" << std::endl;\n        return 1;\n    }\n\n    DWORD dwExportDirRVA = 0;\n    IMAGE_NT_HEADERS* pNtHeaders = ImageNtHeader(hModule);\n    if (pNtHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress != 0) {\n        dwExportDirRVA = pNtHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress;\n    } else {\n        std::cerr << "DLL does not have an export directory" << std::endl;\n        FreeLibrary(hModule);\n        return 1;\n    }\n\n    IMAGE_EXPORT_DIRECTORY* pExportDir = (IMAGE_EXPORT_DIRECTORY*)((LPBYTE)hModule + dwExportDirRVA);\n    DWORD* pdwFunctions = (DWORD*)((LPBYTE)hModule + pExportDir->AddressOfFunctions);\n    WORD* pwOrdinals = (WORD*)((LPBYTE)hModule + pExportDir->AddressOfNameOrdinals);\n    DWORD* pdwNames = (DWORD*)((LPBYTE)hModule + pExportDir->AddressOfNames);\n\n    for (DWORD i = 0; i < pExportDir->NumberOfNames; i++) {\n        std::cout << "Function " << i << ": " << (char*)((LPBYTE)hModule + pdwNames[i]) << std::endl;\n    }\n\n    FreeLibrary(hModule);\n    return 0;\n}