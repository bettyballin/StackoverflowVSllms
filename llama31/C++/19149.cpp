// Example of a secure approach using whitelisting and validation\nclass MyClass {\npublic:\n    static int dude;\n\n    static void setDude(int value) {\n        if (value >= 0 && value <= 100) { // validation\n            dude = value;\n        } else {\n            // handle invalid input\n        }\n    }\n};\n\nint MyClass::dude = 0;\n\n// Only allow modification of MyClass::dude through the setDude method\nvoid runtimeDebugger(const std::string& input) {\n    if (input == "MyClass::dude") {\n        int value = std::stoi(input.substr(input.find('=') + 1));\n        MyClass::setDude(value);\n    } else {\n        // handle invalid input\n    }\n}