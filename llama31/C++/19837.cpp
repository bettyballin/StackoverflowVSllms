#include <boost/asio.hpp>\n\n// Custom message structure\nstruct Message {\n    int32_t id;\n    std::string data;\n};\n\nclass Server {\npublic:\n    Server(boost::asio::io_service& io_service) : io_service_(io_service) {\n        // Create a TCP acceptor\n        acceptor_ = boost::asio::ip::tcp::acceptor(io_service_, boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), 12345));\n\n        // Start accepting connections\n        acceptor_.async_accept([this](const boost::system::error_code& error, boost::asio::ip::tcp::socket socket) {\n            // Handle new connection\n            if (!error) {\n                // Read message from client\n                boost::asio::async_read(socket, boost::asio::buffer(&message_, sizeof(Message)), [this](const boost::system::error_code& error, size_t bytes_transferred) {\n                    // Handle message\n                });\n            }\n        });\n    }\n\nprivate:\n    boost::asio::io_service& io_service_;\n    boost::asio::ip::tcp::acceptor acceptor_;\n    Message message_;\n};