// myallocator.h\n#pragma once\n\nnamespace mylib {\n    void* mynew(size_t size);\n    void mydelete(void* ptr);\n\n    template <typename T>\n    class allocator {\n    public:\n        T* allocate(size_t n) {\n            return static_cast<T*>(mynew(n * sizeof(T)));\n        }\n\n        void deallocate(T* p, size_t) {\n            mydelete(p);\n        }\n    };\n}\n\n// myallocator.cpp\n#include "myallocator.h"\n\nvoid* mylib::mynew(size_t size) {\n    // implement your custom allocation logic here\n    // for example, using the Win32 API:\n    return HeapAlloc(GetProcessHeap(), 0, size);\n}\n\nvoid mylib::mydelete(void* ptr) {\n    // implement your custom deallocation logic here\n    // for example, using the Win32 API:\n    HeapFree(GetProcessHeap(), 0, ptr);\n}