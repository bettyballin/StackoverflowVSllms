// Define a custom class factory that checks for code signing\nclass SecureClassFactory : public IClassFactory {\npublic:\n    HRESULT CreateInstance(IUnknown* pUnkOuter, REFIID riid, void** ppvObject) {\n        // Get the DLL path from the registry or other means\n        const wchar_t* dllPath = ...;\n\n        // Check if the DLL is signed with your code-signing key\n        if (!IsDllSigned(dllPath)) {\n            return E_ACCESSDENIED;\n        }\n\n        // If signed, proceed with instantiating the COM object\n        return CoCreateInstance(CLSID_YourCOMClass, pUnkOuter, riid, ppvObject);\n    }\n\n    HRESULT LockServer(BOOL fLock) {\n        // Not implemented\n        return E_NOTIMPL;\n    }\n\nprivate:\n    bool IsDllSigned(const wchar_t* dllPath) {\n        // Implement your code-signing verification logic here\n        // For example, using the WinVerifyTrust API\n        WINTRUST_FILE_INFO fileInfo;\n        fileInfo.cbStruct = sizeof(fileInfo);\n        fileInfo.pcwszFilePath = dllPath;\n        fileInfo.hFile = NULL;\n        fileInfo.pgKnownSubject = NULL;\n\n        GUID policyGUID = WINTRUST_ACTION_GENERIC_VERIFY_V2;\n        HRESULT hr = WinVerifyTrust(NULL, &policyGUID, &fileInfo);\n        return SUCCEEDED(hr);\n    }\n};\n\n// Register the custom class factory for your COM class\nHRESULT RegisterSecureClassFactory() {\n    HRESULT hr = CoCreateInstance(CLSID_ClassFactory, NULL, IID_PPV_ARGS(&m_pClassFactory));\n    if (SUCCEEDED(hr)) {\n        hr = CoRegisterClassObject(CLSID_YourCOMClass, m_pClassFactory, CLSCTX_INPROC_SERVER, REGCLS_MULTIPLEUSE, &m_dwClassObject);\n    }\n    return hr;\n}