// Sink class that implements the outgoing interface\nclass CS8SimulationEventsSink : public IUnknown\n{\npublic:\n    // IUnknown implementation\n    HRESULT STDMETHODCALLTYPE QueryInterface(REFIID riid, void** ppvObject)\n    {\n        if (riid == IID_IS8SimulationEvents)\n        {\n            *ppvObject = this;\n            AddRef();\n            return S_OK;\n        }\n        return E_NOINTERFACE;\n    }\n\n    ULONG STDMETHODCALLTYPE AddRef()\n    {\n        // Implement AddRef logic here\n        return 1;\n    }\n\n    ULONG STDMETHODCALLTYPE Release()\n    {\n        // Implement Release logic here\n        return 0;\n    }\n\n    // IS8SimulationEvents implementation\n    HRESULT STDMETHODCALLTYPE S8SimulationReset()\n    {\n        // Handle the event here\n        return S_OK;\n    }\n};\n\n// Create an instance of the sink class\nCS8SimulationEventsSink* pSink = new CS8SimulationEventsSink();\n\n// Get the IConnectionPointContainer interface from the COM object\nIConnectionPointContainer* pConnectionPointContainer = NULL;\nHRESULT hr = pCOMObject->QueryInterface(IID_IConnectionPointContainer, (void**)&pConnectionPointContainer);\n\n// Find the connection point for the IS8SimulationEvents interface\nIConnectionPoint* pConnectionPoint = NULL;\nhr = pConnectionPointContainer->FindConnectionPoint(IID_IS8SimulationEvents, &pConnectionPoint);\n\n// Advise the sink object to receive events\nhr = pConnectionPoint->Advise(pSink, &m_dwCookie);\n\n// Release the interfaces\npConnectionPoint->Release();\npConnectionPointContainer->Release();