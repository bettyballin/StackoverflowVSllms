// myList.h\n#ifndef MYLIST_H\n#define MYLIST_H\n\n#include <list>\n\ntemplate <class T>\nclass myList : public std::list<T>\n{\npublic:\n    T operator[](int index);\n    T operator[](int & index);\n    myList(void);\n    ~myList(void);\n};\n\ntemplate<class T>\nmyList<T>::myList(void): std::list<T>() {}\n\ntemplate<class T>\nmyList<T>::~myList(void)\n{\n    std::list<T>::~list();\n}\n\ntemplate<class T>\nT myList<T>::operator[](int index) {\n    int count = 0;\n    std::list<T>::iterator itr = this->begin();\n    while(count != index)itr++;\n    return *itr;    \n}\n\ntemplate<class T>\nT myList<T>::operator[](int & index) {\n    int count = 0;\n    std::list<T>::iterator itr = this->begin();\n    while(count != index)itr++;\n    return *itr;\n}\n\n#endif  // MYLIST_H