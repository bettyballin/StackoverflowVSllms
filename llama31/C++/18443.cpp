template <typename T>\nclass ComEnumIterator {\npublic:\n    ComEnumIterator(IEnumUnknown* pEnum) : pEnum_(pEnum) {}\n    ~ComEnumIterator() { if (pEnum_) pEnum_->Release(); }\n\n    class iterator {\n    public:\n        iterator(IEnumUnknown* pEnum) : pEnum_(pEnum) { pEnum_->Reset(); }\n        iterator(const iterator& other) : pEnum_(other.pEnum_) {}\n\n        T operator*() const {\n            IUnknown* punk;\n            pEnum_->Next(1, &punk, NULL);\n            return punk;\n        }\n\n        iterator& operator++() {\n            pEnum_->Skip(1);\n            return *this;\n        }\n\n        bool operator!=(const iterator& other) const {\n            return pEnum_ != other.pEnum_;\n        }\n\n    private:\n        IEnumUnknown* pEnum_;\n    };\n\n    iterator begin() { return iterator(pEnum_); }\n    iterator end() { return iterator(NULL); }\n\nprivate:\n    IEnumUnknown* pEnum_;\n};