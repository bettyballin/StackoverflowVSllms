#include <Windows.h>\n#include <ole2.h>\n#include <comdef.h>\n\n// Define the event handler interface\nclass SheetSelectionChangeHandler : public IDispatch {\npublic:\n    // IUnknown methods\n    STDMETHODIMP QueryInterface(REFIID riid, void **ppvObject) override;\n    STDMETHODIMP_(ULONG) AddRef() override;\n    STDMETHODIMP_(ULONG) Release() override;\n\n    // IDispatch methods\n    STDMETHODIMP GetTypeInfoCount(UINT *pctinfo) override;\n    STDMETHODIMP GetTypeInfo(UINT itinfo, LCID lcid, ITypeInfo **pptinfo) override;\n    STDMETHODIMP GetIDsOfNames(REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId) override;\n    STDMETHODIMP Invoke(DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr) override;\n\n    // Event handler method\n    STDMETHODIMP HandleSheetSelectionChange(IDispatch *pRange);\n\n    // Constructor and destructor\n    SheetSelectionChangeHandler();\n    ~SheetSelectionChangeHandler();\n\nprivate:\n    LONG m_lRefCount;\n    IConnectionPoint *m_pConnectionPoint;\n};\n\n// Implement the event handler interface\nSheetSelectionChangeHandler::SheetSelectionChangeHandler() : m_lRefCount(0), m_pConnectionPoint(NULL) {}\n\nSheetSelectionChangeHandler::~SheetSelectionChangeHandler() {\n    if (m_pConnectionPoint) {\n        m_pConnectionPoint->Release();\n    }\n}\n\nSTDMETHODIMP SheetSelectionChangeHandler::QueryInterface(REFIID riid, void **ppvObject) {\n    if (riid == IID_IUnknown || riid == IID_IDispatch) {\n        *ppvObject = this;\n        AddRef();\n        return S_OK;\n    }\n    return E_NOINTERFACE;\n}\n\nSTDMETHODIMP_(ULONG) SheetSelectionChangeHandler::AddRef() {\n    return InterlockedIncrement(&m_lRefCount);\n}\n\nSTDMETHODIMP_(ULONG) SheetSelectionChangeHandler::Release() {\n    ULONG lRefCount = InterlockedDecrement(&m_lRefCount);\n    if (lRefCount == 0) {\n        delete this;\n    }\n    return lRefCount;\n}\n\nSTDMETHODIMP SheetSelectionChangeHandler::GetTypeInfoCount(UINT *pctinfo) {\n    *pctinfo = 0;\n    return S_OK;\n}\n\nSTDMETHODIMP SheetSelectionChangeHandler::GetTypeInfo(UINT itinfo, LCID lcid, ITypeInfo **pptinfo) {\n    return E_NOTIMPL;\n}\n\nSTDMETHODIMP SheetSelectionChangeHandler::GetIDsOfNames(REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId) {\n    return E_NOTIMPL;\n}\n\nSTDMETHODIMP SheetSelectionChangeHandler::Invoke(DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr) {\n    if (dispIdMember == 0x0000031f) { // DISPID_SHEETSELECTIONCHANGE\n        HandleSheetSelectionChange(pDispParams->rgvarg[0].pdispVal);\n        return S_OK;\n    }\n    return E_NOTIMPL;\n}\n\nSTDMETHODIMP SheetSelectionChangeHandler::HandleSheetSelectionChange(IDispatch *pRange) {\n    // Handle the SheetSelectionChange event here\n    // You can use the pRange parameter to get the selected range\n    return S_OK;\n}\n\n// Register for the SheetSelectionChange event\nvoid RegisterForSheetSelectionChangeEvent(IDispatch *pExcelApp) {\n    IConnectionPointContainer *pConnectionPointContainer;\n    IConnectionPoint *pConnectionPoint;\n    SheetSelectionChangeHandler *pHandler;\n\n    HRESULT hr = pExcelApp->QueryInterface(IID_IConnectionPointContainer, (LPVOID *)&pConnectionPointContainer);\n    if (SUCCEEDED(hr)) {\n        hr = pConnectionPointContainer->FindConnectionPoint(DIID_ApplicationEvents, &pConnectionPoint);\n        if (SUCCEEDED(hr)) {\n            pHandler = new SheetSelectionChangeHandler();\n            hr = pConnectionPoint->Advise((IDispatch *)pHandler, &pHandler->m_lRefCount);\n            if (SUCCEEDED(hr)) {\n                pHandler->m_pConnectionPoint = pConnectionPoint;\n            } else {\n                delete pHandler;\n            }\n        }\n        pConnectionPointContainer->Release();\n    }\n}\n\n// Unregister for the SheetSelectionChange event\nvoid UnregisterForSheetSelectionChangeEvent(SheetSelectionChangeHandler *pHandler) {\n    if (pHandler->m_pConnectionPoint) {\n        pHandler->m_pConnectionPoint->Unadvise(pHandler->m_lRefCount);\n        pHandler->m_pConnectionPoint->Release();\n    }\n    delete pHandler;\n}