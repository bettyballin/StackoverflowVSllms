#include <Windows.h>\n#include <iostream>\n\nint main() {\n    // Get OS version\n    OSVERSIONINFO osvi;\n    ZeroMemory(&osvi, sizeof(OSVERSIONINFO));\n    osvi.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n    GetVersionEx(&osvi);\n    std::cout << "OS Version: " << osvi.dwMajorVersion << "." << osvi.dwMinorVersion << std::endl;\n\n    // Get memory info\n    MEMORYSTATUSEX memInfo;\n    memInfo.dwLength = sizeof(MEMORYSTATUSEX);\n    GlobalMemoryStatusEx(&memInfo);\n    std::cout << "Available Memory: " << memInfo.ullAvailPhys << std::endl;\n\n    // Get process and thread count\n    DWORD processCount = 0, threadCount = 0;\n    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n    if (hSnapshot != INVALID_HANDLE_VALUE) {\n        PROCESSENTRY32 pe;\n        pe.dwSize = sizeof(PROCESSENTRY32);\n        if (Process32First(hSnapshot, &pe)) {\n            do {\n                processCount++;\n                threadCount += pe.cntThreads;\n            } while (Process32Next(hSnapshot, &pe));\n        }\n        CloseHandle(hSnapshot);\n    }\n    std::cout << "Process Count: " << processCount << std::endl;\n    std::cout << "Thread Count: " << threadCount << std::endl;\n\n    return 0;\n}