// Binary Tree Node\nstruct Node {\n    int key;\n    Node* left;\n    Node* right;\n};\n\n// Binary Tree Insertion\nvoid insert(Node** root, int key) {\n    if (*root == nullptr) {\n        *root = new Node{key, nullptr, nullptr};\n    } else if (key < (*root)->key) {\n        insert(&((*root)->left), key);\n    } else {\n        insert(&((*root)->right), key);\n    }\n}\n\n// Linked List Node\nstruct ListNode {\n    int key;\n    ListNode* next;\n};\n\n// Linked List Insertion\nvoid insert(ListNode** head, int key) {\n    ListNode* newNode = new ListNode{key, nullptr};\n    if (*head == nullptr) {\n        *head = newNode;\n    } else {\n        ListNode* current = *head;\n        while (current->next != nullptr) {\n            current = current->next;\n        }\n        current->next = newNode;\n    }\n}\n\n// Hash Table (using std::unordered_map)\n#include <unordered_map>\n\nstd::unordered_map<int, int> hashTable;\n\n// Hash Table Insertion\nvoid insert(int key) {\n    hashTable[key] = key;\n}