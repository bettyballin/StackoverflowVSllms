#include <Windows.h>\n#include <TlHelp32.h>\n\n// Function to inject DLL into Explorer.exe\nbool InjectDLL(HANDLE hProcess, const char* dllPath) {\n    HMODULE hModule = LoadLibraryA(dllPath);\n    if (hModule == NULL) {\n        return false;\n    }\n\n    // Get the address of the DLL's entry point\n    FARPROC pEntry = GetProcAddress(hModule, "DllMain");\n\n    // Allocate memory in the target process for the DLL's entry point\n    PVOID pRemoteEntry = VirtualAllocEx(hProcess, NULL, 4096, MEM_COMMIT, PAGE_EXECUTE_READWRITE);\n\n    // Write the DLL's entry point to the target process\n    WriteProcessMemory(hProcess, pRemoteEntry, pEntry, 4096, NULL);\n\n    // Create a new thread in the target process to execute the DLL's entry point\n    HANDLE hThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)pRemoteEntry, NULL, 0, NULL);\n\n    // Wait for the thread to finish\n    WaitForSingleObject(hThread, INFINITE);\n\n    // Clean up\n    VirtualFreeEx(hProcess, pRemoteEntry, 0, MEM_RELEASE);\n    CloseHandle(hThread);\n\n    return true;\n}\n\nint main() {\n    // Get the PID of Explorer.exe\n    HANDLE hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n    PROCESSENTRY32 pe = { 0 };\n    pe.dwSize = sizeof(PROCESSENTRY32);\n\n    if (Process32First(hSnap, &pe)) {\n        do {\n            if (lstrcmpiA(pe.szExeFile, "explorer.exe") == 0) {\n                // Open the Explorer.exe process\n                HANDLE hProcess = OpenProcess(PROCESS_VM_WRITE | PROCESS_CREATE_THREAD, FALSE, pe.th32ProcessID);\n\n                // Inject the DLL\n                if (InjectDLL(hProcess, "path/to/your/dll.dll")) {\n                    printf("DLL injected successfully!\n");\n                } else {\n                    printf("DLL injection failed!\n");\n                }\n\n                CloseHandle(hProcess);\n            }\n        } while (Process32Next(hSnap, &pe));\n    }\n\n    CloseHandle(hSnap);\n\n    return 0;\n}