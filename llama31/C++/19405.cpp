// interface.h\n#pragma once\n\nclass IRefCounted\n{\npublic:\n    virtual ~IRefCounted() {}\n    virtual void AddRef() = 0;\n    virtual void Release() = 0;\n};\n\nclass IClass : public IRefCounted\n{\npublic:\n    virtual ~IClass() {}\n    virtual void PrintSomething() = 0;\n};\n\n// test.cpp (compiled with VC9)\n#include "interface.h"\n#include <iostream>\n#include <windows.h>\n\nint main()\n{\n    HMODULE dll;\n    IClass* (*method)(void);\n    IClass* dllclass;\n\n    std::cout << "Loading a.dll\n";\n    dll = LoadLibraryW(L"a.dll");\n    method = (IClass* (*)(void))GetProcAddress(dll, "CreateClass");\n    dllclass = method(); // works\n    dllclass->PrintSomething(); // should work\n    dllclass->Release();\n    FreeLibrary(dll);\n\n    std::cout << "Done, press enter to exit." << std::endl;\n    std::cin.get();\n    return 0;\n}\n\n// a.cpp (compiled with g++)\n#include "interface.h"\n#include <iostream>\n\nclass A : public IClass\n{\n    unsigned refCnt;\npublic:\n    A() : refCnt(1) {}\n    virtual ~A()\n    {\n        if (refCnt) throw "Object deleted while refCnt non-zero!";\n        std::cout << "Bye from A.\n";\n    }\n\n    virtual void AddRef()\n    {\n        ++refCnt;\n    }\n\n    virtual void Release()\n    {\n        if (!--refCnt)\n            delete this;\n    }\n\n    virtual void PrintSomething()\n    {\n        std::cout << "Hello World from A!" << std::endl;\n    }\n};\n\nextern "C" __declspec(dllexport) IClass* CreateClass()\n{\n    return new A();\n}