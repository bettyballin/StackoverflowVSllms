// HelloServer.cpp (DCOM server)\n#include <windows.h>\n#include <objbase.h>\n\n// Define the interface\ninterface IHello : public IUnknown\n{\n    virtual HRESULT STDMETHODCALLTYPE SayHello(BSTR* pMessage) = 0;\n};\n\n// Implement the interface\nclass CHello : public IHello\n{\npublic:\n    HRESULT STDMETHODCALLTYPE SayHello(BSTR* pMessage)\n    {\n        *pMessage = SysAllocString(L"Hello, World!");\n        return S_OK;\n    }\n};\n\n// Register the component\nint main()\n{\n    // Initialize COM\n    CoInitialize(NULL);\n\n    // Create a class factory\n    IClassFactory* pFactory = new CHelloFactory();\n\n    // Register the class factory\n    CoRegisterClassObject(CLSID_Hello, pFactory, CLSCTX_SERVER, REGCLS_MULTIPLEUSE, &dwRegister);\n\n    // Release resources\n    CoUninitialize();\n    return 0;\n}\n\n// HelloClient.cpp (DCOM client)\n#include <windows.h>\n#include <objbase.h>\n\nint main()\n{\n    // Initialize COM\n    CoInitialize(NULL);\n\n    // Create a proxy\n    IHello* pHello = NULL;\n    CoCreateInstance(CLSID_Hello, NULL, CLSCTX_SERVER, IID_IHello, (LPVOID*)&pHello);\n\n    // Call the SayHello method\n    BSTR pMessage;\n    HRESULT hr = pHello->SayHello(&pMessage);\n\n    // Print the message\n    wprintf(L"%s\n", pMessage);\n\n    // Release resources\n    CoUninitialize();\n    return 0;\n}