#include <immintrin.h>\n\nvoid processArray(int* arr, int size) {\n    // Assume we want to mask the lower 8 bits and find the min and max values\n    const int mask = 0xFF;\n\n    // Initialize SSE registers\n    __m128i minVal = _mm_set_epi32(INT_MAX, INT_MAX, INT_MAX, INT_MAX);\n    __m128i maxVal = _mm_set_epi32(INT_MIN, INT_MIN, INT_MIN, INT_MIN);\n\n    // Process the array in chunks of 4 elements (SSE register width)\n    for (int i = 0; i < size; i += 4) {\n        // Load 4 elements into an SSE register\n        __m128i chunk = _mm_loadu_si128(reinterpret_cast<__m128i*>(arr + i));\n\n        // Mask the lower 8 bits of each element\n        chunk = _mm_and_si128(chunk, _mm_set_epi32(mask, mask, mask, mask));\n\n        // Update min and max values\n        minVal = _mm_min_epi32(minVal, chunk);\n        maxVal = _mm_max_epi32(maxVal, chunk);\n    }\n\n    // Extract the final min and max values from the SSE registers\n    int minValFinal = _mm_extract_epi32(minVal, 0);\n    int maxValFinal = _mm_extract_epi32(maxVal, 0);\n\n    // Use the final values as needed\n    printf("Min value: %d\n", minValFinal);\n    printf("Max value: %d\n", maxValFinal);\n}