#include <iostream>\n#include <openssl/ssl.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nbool checkMailServerStatus(const std::string& hostname, int port = 465) {\n    SSL_library_init();\n    SSL_CTX* ctx = SSL_CTX_new(TLS_client_method());\n    if (!ctx) {\n        return false;\n    }\n\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        SSL_CTX_free(ctx);\n        return false;\n    }\n\n    struct sockaddr_in serv_addr;\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n    inet_pton(AF_INET, hostname.c_str(), &serv_addr.sin_addr);\n\n    if (connect(sockfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {\n        close(sockfd);\n        SSL_CTX_free(ctx);\n        return false;\n    }\n\n    SSL* ssl = SSL_new(ctx);\n    if (!ssl) {\n        close(sockfd);\n        SSL_CTX_free(ctx);\n        return false;\n    }\n\n    SSL_set_fd(ssl, sockfd);\n    int ret = SSL_connect(ssl);\n    if (ret <= 0) {\n        close(sockfd);\n        SSL_free(ssl);\n        SSL_CTX_free(ctx);\n        return false;\n    }\n\n    // Check SSL connection status\n    int verifyResult = SSL_get_verify_result(ssl);\n    if (verifyResult != X509_V_OK) {\n        close(sockfd);\n        SSL_free(ssl);\n        SSL_CTX_free(ctx);\n        return false;\n    }\n\n    close(sockfd);\n    SSL_free(ssl);\n    SSL_CTX_free(ctx);\n    return true;\n}\n\nint main() {\n    std::string hostname = "your_mail_server_hostname";\n    bool status = checkMailServerStatus(hostname);\n    std::cout << "Mail server status: " << (status ? "UP" : "DOWN") << std::endl;\n    return 0;\n}