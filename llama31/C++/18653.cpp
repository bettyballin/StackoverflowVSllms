#include <iostream>\n#include <vector>\n#include <queue>\n#include <limits>\n\nusing namespace std;\n\nstruct Edge {\n    int weight;\n    int node1;\n    int node2;\n};\n\nstruct Node {\n    int position;\n    vector<Edge> edges;\n};\n\nstruct CompareEdges {\n    bool operator()(const Edge& e1, const Edge& e2) {\n        return e1.weight < e2.weight;\n    }\n};\n\nvoid switchNodes(Node& node1, Node& node2) {\n    // Switch the positions of the two nodes\n    swap(node1.position, node2.position);\n\n    // Reset the weights of all edges involved in either node\n    for (auto& edge : node1.edges) {\n        edge.weight = 0;\n    }\n    for (auto& edge : node2.edges) {\n        edge.weight = 0;\n    }\n}\n\nvoid processGraph(vector<Node>& nodes) {\n    priority_queue<Edge, vector<Edge>, CompareEdges> edgeQueue;\n\n    // Add all edges to the queue\n    for (auto& node : nodes) {\n        for (auto& edge : node.edges) {\n            edgeQueue.push(edge);\n        }\n    }\n\n    while (!edgeQueue.empty()) {\n        Edge edge = edgeQueue.top();\n        edgeQueue.pop();\n\n        // If the edge weight is 0, skip it\n        if (edge.weight == 0) continue;\n\n        // Find the two nodes involved in the edge\n        Node& node1 = nodes[edge.node1];\n        Node& node2 = nodes[edge.node2];\n\n        // Switch the nodes\n        switchNodes(node1, node2);\n    }\n}\n\nint main() {\n    // Initialize the nodes and edges\n    vector<Node> nodes(4);\n    nodes[0].position = 0;\n    nodes[1].position = 1;\n    nodes[2].position = 2;\n    nodes[3].position = 3;\n\n    nodes[0].edges.push_back({100, 0, 1});\n    nodes[0].edges.push_back({120, 0, 2});\n    nodes[1].edges.push_back({100, 1, 0});\n    nodes[1].edges.push_back({220, 1, 3});\n    nodes[2].edges.push_back({120, 2, 0});\n    nodes[2].edges.push_back({150, 2, 3});\n    nodes[3].edges.push_back({220, 3, 1});\n    nodes[3].edges.push_back({150, 3, 2});\n\n    // Process the graph\n    processGraph(nodes);\n\n    // Print the final positions of the nodes\n    for (auto& node : nodes) {\n        cout << node.position << " ";\n    }\n    cout << endl;\n\n    return 0;\n}