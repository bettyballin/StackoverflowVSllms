// Define a clear interface\nclass MyWrapper {\npublic:\n    virtual void doSomething() = 0;\n};\n\n// Implement the Facade pattern\nclass MyWrapperImpl : public MyWrapper {\npublic:\n    MyWrapperImpl(std::shared_ptr<ThirdPartyLibrary> library) \n        : library_(library) {}\n\n    void doSomething() override {\n        // Use dependency injection\n        library_->doSomething();\n    }\n\nprivate:\n    std::shared_ptr<ThirdPartyLibrary> library_;\n};\n\n// Implement thread safety\nclass MyThreadSafeWrapper : public MyWrapperImpl {\npublic:\n    MyThreadSafeWrapper(std::shared_ptr<ThirdPartyLibrary> library) \n        : MyWrapperImpl(library) {}\n\n    void doSomething() override {\n        std::lock_guard<std::mutex> lock(mutex_);\n        MyWrapperImpl::doSomething();\n    }\n\nprivate:\n    std::mutex mutex_;\n};