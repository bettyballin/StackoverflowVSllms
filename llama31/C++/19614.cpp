template <typename Func, typename... Args>\nstruct Bind {\n    Func func;\n    std::tuple<Args...> args;\n\n    template <typename... Ts>\n    Bind(Func func, Ts&&... args) \n        : func(func), args(std::forward<Ts>(args)...) {}\n\n    template <typename... Ts>\n    auto operator()(Ts&&... ts) const {\n        return func(std::get<Args>(args)..., std::forward<Ts>(ts)...);\n    }\n};\n\ntemplate <typename Func, typename... Args>\nauto bind(Func func, Args&&... args) {\n    return Bind<Func, std::decay_t<Args>...>(func, std::forward<Args>(args)...);\n}