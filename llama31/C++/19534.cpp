// Release the source filter, if it exists, so we can replace it.\nIBaseFilter *pSource = NULL;\nif (SUCCEEDED(mpGB->FindFilterByName(L"SOURCE", &pSource)) && pSource)\n{\n    mpGB->RemoveFilter(pSource);\n    pSource->Release();\n    pSource = NULL;\n}\n\n// Stop the graph and release any pending events\nif (mMC)\n{\n    hr = mMC->Stop();\n    if (FAILED(hr))\n    {\n        return hr;\n    }\n}\n\nif (mME)\n{\n    mME->Release();\n    mME = NULL;\n}\n\n// Render the file.\nhr = RenderFileToVideoRenderer(mpGB, mPlayPath.c_str(), FALSE);\n\n// QueryInterface for DirectShow interfaces\nhr = mpGB->QueryInterface(&mMC);\nhr = mpGB->QueryInterface(&mME);\nhr = mpGB->QueryInterface(&mMS);\n\n// Read the default video size\nhr = mpWC->GetNativeVideoSize(&lWidth, &lHeight, NULL, NULL);\nif (hr != E_NOINTERFACE)\n{\n    if (FAILED(hr))\n    {\n        return hr;\n    }\n\n    // Play video at native resolution, anchored at top-left corner.\n    RECT r;\n    r.left = 0;\n    r.top = 0;\n    r.right = lWidth;\n    r.bottom = lHeight;\n    hr = mpWC->SetVideoPosition(NULL, &r);\n}\n\n// Run the graph to play the media file\nif (mMC)\n{\n    hr = mMC->Run();\n    if (FAILED(hr))\n    {\n        return hr;\n    }\n    mState = Running;\n}\n\nif (mME)\n{\n    mME->SetNotifyWindow((OAHWND)m_hWnd, WM_GRAPHNOTIFY, 0);\n}