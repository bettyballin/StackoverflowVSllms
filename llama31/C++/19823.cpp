#include <Windows.h>\n\n// Global variables\nHWND hWndConsole;\nHWND hWndInput;\nHWND hWndOutput;\n\n// Forward declarations\nLRESULT CALLBACK ConsoleWndProc(HWND, UINT, WPARAM, LPARAM);\n\nint WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)\n{\n    // Register the console window class\n    WNDCLASS wc = {0};\n    wc.style = 0;\n    wc.lpfnWndProc = ConsoleWndProc;\n    wc.cbClsExtra = 0;\n    wc.cbWndExtra = 0;\n    wc.hInstance = hInstance;\n    wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);\n    wc.hCursor = LoadCursor(NULL, IDC_ARROW);\n    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW+1);\n    wc.lpszMenuName = NULL;\n    wc.lpszClassName = "ConsoleWindowClass";\n    RegisterClass(&wc);\n\n    // Create the console window\n    hWndConsole = CreateWindowEx(\n        0,\n        "ConsoleWindowClass",\n        "Console Window",\n        WS_OVERLAPPEDWINDOW,\n        CW_USEDEFAULT, CW_USEDEFAULT,\n        800, 600,\n        NULL,\n        NULL,\n        hInstance,\n        NULL\n    );\n\n    // Create the input text box\n    hWndInput = CreateWindowEx(\n        0,\n        "EDIT",\n        "",\n        WS_CHILD | WS_VISIBLE | WS_BORDER,\n        10, 550,\n        780, 30,\n        hWndConsole,\n        (HMENU)1,\n        hInstance,\n        NULL\n    );\n\n    // Create the output text box\n    hWndOutput = CreateWindowEx(\n        0,\n        "EDIT",\n        "",\n        WS_CHILD | WS_VISIBLE | WS_BORDER | ES_MULTILINE | ES_READONLY,\n        10, 10,\n        780, 530,\n        hWndConsole,\n        (HMENU)2,\n        hInstance,\n        NULL\n    );\n\n    // Show the console window\n    ShowWindow(hWndConsole, nCmdShow);\n    UpdateWindow(hWndConsole);\n\n    // Run the message loop\n    MSG msg = {0};\n    while(GetMessage(&msg, NULL, 0, 0))\n    {\n        TranslateMessage(&msg);\n        DispatchMessage(&msg);\n    }\n\n    return 0;\n}\n\nLRESULT CALLBACK ConsoleWndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)\n{\n    switch(message)\n    {\n    case WM_DESTROY:\n        PostQuitMessage(0);\n        break;\n    default:\n        return DefWindowProc(hWnd, message, wParam, lParam);\n    }\n    return 0;\n}