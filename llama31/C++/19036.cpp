template <typename Host>\nclass WrapClass {\n    // ...\n};\n\ntemplate <typename Host, typename Ret, typename... Args>\nclass MemberFunction {\n    using FuncPtr = Ret (Host::*)(Args...);\n\n    MemberFunction(FuncPtr func, const char* name) : func_(func), name_(name) {}\n\n    // ...\n\n    FuncPtr func_;\n    const char* name_;\n};\n\ntemplate <typename Host>\nWrapClass<Host> MakeWrapClass(MemberFunction<Host, typename...>... functions) {\n    // ...\n}\n\nclass Bar {\n    void func0();\n    int func2(char*, float);\n};\n\nint main() {\n    auto wrap = MakeWrapClass(\n        MemberFunction<&Bar::func0>("func0"),\n        MemberFunction<&Bar::func2>("func2")\n    );\n    // ...\n}