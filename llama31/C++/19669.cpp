#include <cassert>\n\nclass Validator {\npublic:\n    Validator() : failed_(false) {}\n\n    Validator& IsNotNull(void* ptr) {\n        if (!ptr) {\n            failed_ = true;\n        }\n        return *this;\n    }\n\n    Validator& IsInRange(int value, int min, int max) {\n        if (value < min || value > max) {\n            failed_ = true;\n        }\n        return *this;\n    }\n\n    bool IsValid() const {\n        return !failed_;\n    }\n\nprivate:\n    bool failed_;\n};\n\nint main() {\n    int* ptr = nullptr;\n    int value = 5;\n\n    Validator validator;\n    validator.IsNotNull(ptr).IsInRange(value, 1, 10);\n\n    if (!validator.IsValid()) {\n        // handle validation failure\n        assert(false);\n    }\n\n    return 0;\n}