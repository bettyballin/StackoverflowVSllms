#include <fstream>\n#include <vector>\n\n// Assume a Block structure with a vector of Records\nstruct Block {\n    std::vector<Record> records;\n};\n\n// Compacts records in a blocked file\nvoid compactFile(const std::string& filename) {\n    std::ifstream file(filename, std::ios::binary);\n    std::ofstream outputFile(filename + ".tmp", std::ios::binary);\n\n    Block currentBlock;\n    Block buffer;\n\n    while (file.read((char*)&currentBlock, sizeof(Block))) {\n        // Scan and compact records in the current block\n        for (auto& record : currentBlock.records) {\n            // Try to fill gaps with records from subsequent blocks\n            if (record.size() < sizeof(Record)) {\n                // Find a record that can be moved to the current block\n                for (auto& nextBlock : file) {\n                    for (auto& nextRecord : nextBlock.records) {\n                        if (nextRecord.size() <= sizeof(Record) - record.size()) {\n                            // Add the record to the buffer and mark it as moved\n                            buffer.records.push_back(nextRecord);\n                            nextRecord.size() = 0; // Mark as moved\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        // Write the compacted block buffer to the file\n        if (!buffer.records.empty()) {\n            outputFile.write((char*)&buffer, sizeof(Block));\n            buffer.records.clear();\n        }\n    }\n\n    // Finalize and truncate the file\n    outputFile.close();\n    file.close();\n    std::remove((filename + ".tmp").c_str());\n    std::rename(filename.c_str(), (filename + ".tmp").c_str());\n}