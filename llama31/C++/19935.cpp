#include <fstream>\n#include <sstream>\n#include <vector>\n#include <string>\n\nclass CSVParser {\npublic:\n    CSVParser(const std::string& filename) : filename_(filename) {}\n\n    // Loads the next line from the file and splits it into a vector by commas.\n    bool loadNextLine(std::vector<std::string>& output) {\n        std::string line;\n        if (!std::getline(file_, line)) {\n            return false; // No more lines to read\n        }\n\n        std::stringstream ss(line);\n        std::string item;\n        output.clear();\n\n        while (std::getline(ss, item, ',')) {\n            output.push_back(item);\n        }\n\n        return true;\n    }\n\n    // Opens the file for reading.\n    void open() {\n        file_.open(filename_);\n    }\n\n    // Closes the file.\n    void close() {\n        file_.close();\n    }\n\nprivate:\n    std::ifstream file_;\n    std::string filename_;\n};\n\nint main() {\n    CSVParser parser("example.csv");\n    parser.open();\n\n    std::vector<std::string> lineData;\n    while (parser.loadNextLine(lineData)) {\n        // Process each line's data stored in `lineData`\n        for (const auto& item : lineData) {\n            std::cout << item << " ";\n        }\n        std::cout << std::endl;\n    }\n\n    parser.close();\n\n    return 0;\n}