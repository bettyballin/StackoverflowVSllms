#include <Windows.h>\n#include <WinIoCtl.h>\n\nint main() {\n    HANDLE hDir = CreateFileW(L"C:\\WINNT\\Temp", GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE, NULL, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, NULL);\n    if (hDir == INVALID_HANDLE_VALUE) {\n        // Handle error\n    }\n\n    FILE_NOTIFY_INFORMATION buffer[1024];\n    DWORD bytesReturned;\n    while (ReadDirectoryChangesW(hDir, buffer, sizeof(buffer), TRUE, FILE_NOTIFY_CHANGE_FILE_NAME, &bytesReturned, NULL, NULL)) {\n        for (int i = 0; i < bytesReturned / sizeof(FILE_NOTIFY_INFORMATION); i++) {\n            if (buffer[i].Action == FILE_ACTION_ADDED) {\n                HANDLE hFile = CreateFileW(buffer[i].FileName, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);\n                if (hFile != INVALID_HANDLE_VALUE) {\n                    FILE_INFO_BY_HANDLE_CLASS fileInfoClass = FileNameInfo;\n                    LPVOID lpFileInformation = NULL;\n                    DWORD dwBufferSize = 0;\n\n                    GetFileInformationByHandle(hFile, fileInfoClass, lpFileInformation, dwBufferSize);\n                    dwBufferSize = ((LPFILE_NAME_INFO)lpFileInformation)->FileNameLength + sizeof(FILE_NAME_INFO);\n                    lpFileInformation = malloc(dwBufferSize);\n                    GetFileInformationByHandle(hFile, fileInfoClass, lpFileInformation, dwBufferSize);\n\n                    // Get the process ID of the process that created the file\n                    HANDLE hProcess = ((LPFILE_NAME_INFO)lpFileInformation)->VolumeSerialNumber;\n                    DWORD dwProcessId = GetProcessId(hProcess);\n\n                    // Get the process name from the process ID\n                    HANDLE hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n                    PROCESSENTRY32 pe32;\n                    pe32.dwSize = sizeof(PROCESSENTRY32);\n                    if (Process32First(hProcessSnap, &pe32)) {\n                        do {\n                            if (pe32.th32ProcessID == dwProcessId) {\n                                // pe32.szExeFile contains the process name\n                                break;\n                            }\n                        } while (Process32Next(hProcessSnap, &pe32));\n                    }\n                    CloseHandle(hProcessSnap);\n\n                    free(lpFileInformation);\n                    CloseHandle(hFile);\n                }\n            }\n        }\n    }\n    CloseHandle(hDir);\n    return 0;\n}