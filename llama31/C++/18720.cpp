// myinterface.h\nstruct IMyInterface {\n    virtual ~IMyInterface() {}\n    virtual void doSomething(std::string const& data) = 0;\n};\n\n// mydll.h\nclass MyDllImpl : public IMyInterface {\npublic:\n    void doSomething(std::string const& data) override;\n};\n\n// myexe.cpp\n#include "myinterface.h"\n\nint main() {\n    // Load the DLL and get a pointer to the implementation\n    HMODULE hDll = LoadLibraryA("mydll.dll");\n    IMyInterface* pImpl = reinterpret_cast<IMyInterface*>(GetProcAddress(hDll, "MyDllImpl"));\n\n    // Use the interface\n    std::string data = "Hello, world!";\n    pImpl->doSomething(data);\n\n    // Clean up\n    FreeLibrary(hDll);\n    return 0;\n}