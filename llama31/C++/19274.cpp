// Define outer vertices of the face\nstd::vector<D3DXVECTOR3> outerVertices = {\n    D3DXVECTOR3(-1, -1, 0),  // v0\n    D3DXVECTOR3(1, -1, 0),   // v1\n    D3DXVECTOR3(1, 1, 0),    // v2\n    D3DXVECTOR3(-1, 1, 0)    // v3\n};\n\n// Define inner vertices of the hole\nstd::vector<D3DXVECTOR3> innerVertices = {\n    D3DXVECTOR3(-0.5, -0.5, 0),  // v4\n    D3DXVECTOR3(0.5, -0.5, 0),   // v5\n    D3DXVECTOR3(0.5, 0.5, 0),    // v6\n    D3DXVECTOR3(-0.5, 0.5, 0)    // v7\n};\n\n// Create bridge vertices connecting outer and inner vertices\nstd::vector<D3DXVECTOR3> bridgeVertices;\nfor (int i = 0; i < outerVertices.size(); i++) {\n    D3DXVECTOR3 outer = outerVertices[i];\n    D3DXVECTOR3 inner = innerVertices[i];\n    bridgeVertices.push_back((outer + inner) / 2);  // v8-v11\n}\n\n// Create index buffer for the face with hole\nstd::vector<WORD> indices;\nindices.push_back(0);  // v0\nindices.push_back(8);  // v8\nindices.push_back(4);  // v4\nindices.push_back(1);  // v1\nindices.push_back(9);  // v9\nindices.push_back(5);  // v5\nindices.push_back(2);  // v2\nindices.push_back(10);  // v10\nindices.push_back(6);  // v6\nindices.push_back(3);  // v3\nindices.push_back(11);  // v11\nindices.push_back(7);  // v7