#include <iostream>\n#include <map>\n#include <string>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\nclass DirectoryService {\npublic:\n    DirectoryService(int port) : port_(port) {}\n\n    void start() {\n        // Create a TCP socket\n        int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockfd < 0) {\n            std::cerr << "Failed to create socket" << std::endl;\n            return;\n        }\n\n        // Bind the socket to the specified port\n        struct sockaddr_in serv_addr;\n        serv_addr.sin_family = AF_INET;\n        serv_addr.sin_port = htons(port_);\n        inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr);\n        if (bind(sockfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {\n            std::cerr << "Failed to bind socket" << std::endl;\n            return;\n        }\n\n        // Listen for incoming connections\n        listen(sockfd, 3);\n\n        while (true) {\n            // Accept an incoming connection\n            struct sockaddr_in client_addr;\n            socklen_t client_len = sizeof(client_addr);\n            int client_sockfd = accept(sockfd, (struct sockaddr*)&client_addr, &client_len);\n            if (client_sockfd < 0) {\n                std::cerr << "Failed to accept connection" << std::endl;\n                continue;\n            }\n\n            // Handle client request ( register or get peer list )\n            handleClient(client_sockfd);\n        }\n    }\n\n    void handleClient(int client_sockfd) {\n        // Read client request ( register or get peer list )\n        char buffer[256];\n        read(client_sockfd, buffer, 256);\n        std::string request(buffer);\n\n        if (request == "register") {\n            // Register client and store its IP and port in the directory\n            std::string client_ip = getClientIP(client_sockfd);\n            int client_port = getClientPort(client_sockfd);\n            directory_[client_ip] = client_port;\n        } else if (request == "get_peers") {\n            // Send the list of registered peers to the client\n            std::string peer_list;\n            for (auto& peer : directory_) {\n                peer_list += peer.first + ":" + std::to_string(peer.second) + "\n";\n            }\n            send(client_sockfd, peer_list.c_str(), peer_list.size(), 0);\n        }\n    }\n\n    std::string getClientIP(int client_sockfd) {\n        // Get the client's IP address from the socket\n        struct sockaddr_in client_addr;\n        socklen_t client_len = sizeof(client_addr);\n        getsockname(client_sockfd, (struct sockaddr*)&client_addr, &client_len);\n        return inet_ntoa(client_addr.sin_addr);\n    }\n\n    int getClientPort(int client_sockfd) {\n        // Get the client's port number from the socket\n        struct sockaddr_in client_addr;\n        socklen_t client_len = sizeof(client_addr);\n        getsockname(client_sockfd, (struct sockaddr*)&client_addr, &client_len);\n        return ntohs(client_addr.sin_port);\n    }\n\nprivate:\n    int port_;\n    std::map<std::string, int> directory_;\n};