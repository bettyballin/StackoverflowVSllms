#include <sqlite3.h>\n#include <dirent.h>\n#include <string>\n#include <vector>\n\n// Function to populate the database with file names\nvoid populateDatabase(const std::string& directory, const std::string& fileType) {\n    // Open the database\n    sqlite3* db;\n    int rc = sqlite3_open("image_database.db", &db);\n    if (rc) {\n        // Handle error\n        return;\n    }\n\n    // Prepare the SQL statement\n    const char* sql = "INSERT INTO images (filename, filepath, filetype) VALUES (?, ?, ?)";\n    sqlite3_stmt* stmt;\n    rc = sqlite3_prepare_v2(db, sql, -1, &stmt, nullptr);\n    if (rc != SQLITE_OK) {\n        // Handle error\n        sqlite3_close(db);\n        return;\n    }\n\n    // Iterate through the directory\n    DIR* dir;\n    struct dirent* ent;\n    dir = opendir(directory.c_str());\n    while ((ent = readdir(dir)) != nullptr) {\n        std::string filename(ent->d_name);\n        if (filename.find(fileType) != std::string::npos) {\n            // Get the full file path\n            std::string filepath = directory + "/" + filename;\n\n            // Bind the values to the prepared statement\n            sqlite3_bind_text(stmt, 1, filename.c_str(), -1, SQLITE_STATIC);\n            sqlite3_bind_text(stmt, 2, filepath.c_str(), -1, SQLITE_STATIC);\n            sqlite3_bind_text(stmt, 3, fileType.c_str(), -1, SQLITE_STATIC);\n\n            // Execute the statement\n            rc = sqlite3_step(stmt);\n            if (rc != SQLITE_DONE) {\n                // Handle error\n            }\n\n            // Reset the statement\n            sqlite3_reset(stmt);\n        }\n    }\n    closedir(dir);\n\n    // Finalize the statement and close the database\n    sqlite3_finalize(stmt);\n    sqlite3_close(db);\n}\n\nint main() {\n    // Example usage\n    populateDatabase("/path/to/directory", ".jpg");\n    return 0;\n}