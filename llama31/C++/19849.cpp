// Define a functor class that wraps the member function\ntemplate <typename T>\nclass Functor {\npublic:\n    Functor(T* obj, int (T::*func)(int)) : obj_(obj), func_(func) {}\n\n    int operator()(int x) { return (obj_->*func_)(x); }\n\nprivate:\n    T* obj_;\n    int (T::*func_)(int);\n};\n\n// Define your Window class\nclass Window {\npublic:\n    LRESULT update(HWND, UINT, WPARAM, LPARAM);\n    void run();\n    virtual void onclick(int, int);\n    virtual void ondraw(); // ... and more methods\n\n    // Create a functor that wraps the update member function\n    Functor<Window> getUpdateFunctor() {\n        return Functor<Window>(this, &Window::update);\n    }\n};\n\n// Usage\nint main() {\n    Window window;\n    Functor<Window> updateFunctor = window.getUpdateFunctor();\n\n    // Use the functor as a static function\n    WNDCLASS wndclass;\n    wndclass.lpfnWndProc = updateFunctor;\n\n    // ...\n}