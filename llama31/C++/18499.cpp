struct KeyValuePair {\n    std::string key;\n    std::string value;\n\n    template<class Archive>\n    void serialize(Archive & ar, const unsigned int version) {\n        ar & key;\n        ar & value;\n    }\n};\n\nclass HashTable {\npublic:\n    std::vector<std::vector<KeyValuePair>> buckets;\n\n    template<class Archive>\n    void serialize(Archive & ar, const unsigned int version) {\n        ar & buckets;\n    }\n\n    void saveToFile(const std::string& filename) {\n        std::ofstream ofs(filename, std::ios::binary);\n        boost::archive::binary_oarchive oa(ofs);\n        oa << *this;\n    }\n\n    void loadFromFile(const std::string& filename) {\n        std::ifstream ifs(filename, std::ios::binary);\n        boost::archive::binary_iarchive ia(ifs);\n        ia >> *this;\n    }\n};