class FooWrapperThreadTest : public QThread {\npublic:\n    FooWrapperThreadTest(FooWrapper* fooWrapper1, FooWrapper* fooWrapper2)\n        : fooWrapper1_(fooWrapper1), fooWrapper2_(fooWrapper2) {}\n\n    void run() override {\n        // Thread 1 calls fooWrapper1->someFunc() and blocks while inside the function\n        fooWrapper1_->someFunc();\n\n        // Thread 2 calls fooWrapper2->anotherFunc() and returns immediately\n        // since someFunc() is still executing\n        emit startThread2();\n\n        // Thread 1 finishes the execution\n        fooWrapper1_->finishExecution();\n    }\n\n    void startThread2() {\n        thread2_ = new QThread(this);\n        thread2_->start();\n    }\n\n    void finishExecution() {\n        // Wait for thread 2 to finish\n        thread2_->wait();\n    }\n\nprivate:\n    FooWrapper* fooWrapper1_;\n    FooWrapper* fooWrapper2_;\n    QThread* thread2_;\n};