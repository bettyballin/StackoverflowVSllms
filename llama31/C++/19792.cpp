#include <iostream>\n#include <vector>\n#include <limits>\n\n// Define the graph structure\nstruct Graph {\n    int numNodes;\n    std::vector<std::vector<int>> adjMatrix;\n};\n\n// Function to find the shortest path using Nearest Neighbor algorithm\nstd::vector<int> nearestNeighbor(Graph graph, int startNode) {\n    std::vector<int> path;\n    path.push_back(startNode);\n    std::vector<bool> visited(graph.numNodes, false);\n    visited[startNode] = true;\n\n    for (int i = 0; i < graph.numNodes - 1; i++) {\n        int minDistance = std::numeric_limits<int>::max();\n        int nearestNode = -1;\n\n        for (int j = 0; j < graph.numNodes; j++) {\n            if (!visited[j] && graph.adjMatrix[path.back()][j] < minDistance) {\n                minDistance = graph.adjMatrix[path.back()][j];\n                nearestNode = j;\n            }\n        }\n\n        path.push_back(nearestNode);\n        visited[nearestNode] = true;\n    }\n\n    // Close the cycle by returning to the start node\n    path.push_back(startNode);\n    return path;\n}\n\nint main() {\n    // Define the graph\n    Graph graph;\n    graph.numNodes = 5;\n    graph.adjMatrix = {\n        {0, 10, 15, 20, 25},\n        {5, 0, 35, 25, 30},\n        {15, 20, 0, 30, 10},\n        {20, 25, 30, 0, 15},\n        {25, 30, 10, 15, 0}\n    };\n\n    // Find the shortest path starting from node 0\n    std::vector<int> path = nearestNeighbor(graph, 0);\n\n    // Print the path\n    std::cout << "Shortest path: ";\n    for (int node : path) {\n        std::cout << node << " ";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}