struct Vertex2D {\n    int x, y;\n};\n\nstd::vector<Vertex2D> convertIndexedToNonIndexed(const std::vector<Vertex2D>& vertices, const std::vector<std::pair<int, int>>& edges) {\n    std::vector<Vertex2D> result;\n    std::vector<bool> visitedEdges(edges.size(), false);\n\n    for (size_t i = 0; i < edges.size(); ++i) {\n        if (!visitedEdges[i]) {\n            int currentIndex = edges[i].first;\n            int nextIndex = edges[i].second;\n\n            std::vector<Vertex2D> polygon;\n            polygon.push_back(vertices[currentIndex]);\n\n            while (nextIndex != edges[i].first) {\n                polygon.push_back(vertices[nextIndex]);\n\n                // Find the next edge that starts with nextIndex\n                bool foundNextEdge = false;\n                for (size_t j = 0; j < edges.size(); ++j) {\n                    if (edges[j].first == nextIndex && !visitedEdges[j]) {\n                        visitedEdges[j] = true;\n                        nextIndex = edges[j].second;\n                        foundNextEdge = true;\n                        break;\n                    }\n                }\n\n                if (!foundNextEdge) {\n                    // This should not happen if the input is a valid polygon\n                    throw std::runtime_error("Invalid polygon");\n                }\n            }\n\n            // Close the polygon\n            polygon.push_back(vertices[edges[i].first]);\n\n            result.insert(result.end(), polygon.begin(), polygon.end());\n        }\n    }\n\n    return result;\n}