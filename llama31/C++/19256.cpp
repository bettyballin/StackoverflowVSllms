#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <string>\n#include <map>\n\nstruct pky {\n    int a_id;\n    int sz_id;\n    int cr_id;\n    int cp_id;\n    int cv_id;\n    int ct_id;\n    int fr;\n    char g;\n    int a;\n    int pc;\n    int p_id;\n};\n\nclass Parser {\npublic:\n    Parser(const std::string& filename) : filename_(filename) {}\n\n    bool parse(pky& structure) {\n        std::ifstream file(filename_);\n        if (!file.is_open()) {\n            return false;\n        }\n\n        std::string line;\n        while (std::getline(file, line)) {\n            std::istringstream iss(line);\n            std::string key, value;\n            while (iss >> key >> value) {\n                if (key == "pc") {\n                    structure.pc = std::stoi(value);\n                } else if (key == "ct") {\n                    structure.ct_id = std::stoi(value);\n                } else if (key == "av") {\n                    // Not used in the structure\n                } else if (key == "cv") {\n                    structure.cv_id = std::stoi(value);\n                } else if (key == "cp") {\n                    structure.cp_id = std::stoi(value);\n                } else if (key == "rec") {\n                    // Not used in the structure\n                } else if (key == "p") {\n                    structure.p_id = std::stoi(value);\n                } else if (key == "g") {\n                    structure.g = value[0];\n                } else if (key == "a") {\n                    structure.a = std::stoi(value);\n                } else if (key == "sz") {\n                    structure.sz_id = std::stoi(value);\n                } else if (key == "cr") {\n                    structure.cr_id = std::stoi(value);\n                }\n            }\n            // Use the populated structure\n            // ...\n            // Clear the structure for the next line\n            structure = pky();\n        }\n        return true;\n    }\n\nprivate:\n    std::string filename_;\n};