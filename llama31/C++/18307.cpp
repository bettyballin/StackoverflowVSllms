#include <windows.h>\n#include <msxml6.h>\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    CoInitialize(NULL); // Initialize COM\n\n    // Create an instance of the MSXML2.DOMDocument object\n    MSXML2::IXMLDOMDocumentPtr pXMLDoc;\n    HRESULT hr = pXMLDoc.CreateInstance(__uuidof(MSXML2::DOMDocument60), NULL, CLSCTX_INPROC_SERVER);\n    if (FAILED(hr)) {\n        cout << "Failed to create DOMDocument instance." << endl;\n        CoUninitialize();\n        return 1;\n    }\n\n    // Load the XML\n    const char* xmlString = \n        "<Computer>"\n        "   <HIVE Name=\"HKEY_CUREENT_USER\">"\n        "     <Elements>"\n        "       <element Name=\"(Default)\" Type=\"REG_SZ\" Data=\"(value not set)\" />"\n        "       <element Name=\"SoftwareMicrosoftVisualStudio9.0ResourceEditorsPerformanceLoggingEnabled\" Type=\"REG_SZ\" Data=\"\" />"\n        "     </Elements>"\n        "     <KEYS>"\n        "       <Key Name=\"Network\">"\n        "         <Elements>"\n        "           <element Name=\"(Default)\" Type=\"REG_SZ\" Data=\"(value not set)\" />"\n        "         </Elements>"\n        "       </Key>"\n        "     </KEYS>"\n        "   </HIVE>"\n        "</Computer>";\n\n    hr = pXMLDoc->loadXML((const VARIANT&)xmlString);\n    if (FAILED(hr)) {\n        cout << "Failed to load XML." << endl;\n        pXMLDoc.Release();\n        CoUninitialize();\n        return 1;\n    }\n\n    // Get the root element\n    MSXML2::IXMLDOMNodePtr pRoot;\n    hr = pXMLDoc->get_documentElement(&pRoot);\n    if (FAILED(hr)) {\n        cout << "Failed to get root element." << endl;\n        pXMLDoc.Release();\n        CoUninitialize();\n        return 1;\n    }\n\n    // Find the "HIVE" node with Name attribute "HKEY_CUREENT_USER"\n    MSXML2::IXMLDOMNodeListPtr pNodes;\n    BSTR bstrQuery = SysAllocString(L"//HIVE[@Name='HKEY_CUREENT_USER']");\n    hr = pXMLDoc->selectNodes(bstrQuery, &pNodes);\n    SysFreeString(bstrQuery);\n    if (FAILED(hr) || pNodes->Getlength() < 1) {\n        cout << "Failed to find HKEY_CUREENT_USER node." << endl;\n        pXMLDoc.Release();\n        CoUninitialize();\n        return 1;\n    }\n\n    // Access the "KEYS" node\n    MSXML2::IXMLDOMNodePtr pHKEYNode;\n    hr = pNodes->get_item(0, &pHKEYNode);\n    if (FAILED(hr)) {\n        cout << "Failed to get item node." << endl;\n        pXMLDoc.Release();\n        CoUninitialize();\n        return 1;\n    }\n\n    MSXML2::IXMLDOMNodeListPtr pKeysNodes;\n    bstrQuery = SysAllocString(L"./KEYS");\n    hr = pHKEYNode->selectNodes(bstrQuery, &pKeysNodes);\n    SysFreeString(bstrQuery);\n    if (FAILED(hr) || pKeysNodes->Getlength() < 1) {\n        cout << "Failed to find KEYS node." << endl;\n        pXMLDoc.Release();\n        CoUninitialize();\n        return 1;\n    }\n\n    // Find the "Network" key\n    MSXML2::IXMLDOMNodePtr pKeysNode;\n    hr = pKeysNodes->get_item(0, &pKeysNode);\n    if (FAILED(hr)) {\n        cout << "Failed to get KEYS item node." << endl;\n        pXMLDoc.Release();\n        CoUninitialize();\n        return 1;\n    }\n\n    MSXML2::IXMLDOMNodeListPtr pNetworkNodes;\n    bstrQuery = SysAllocString(L"./Key[@Name='Network']");\n    hr = pKeysNode->selectNodes(bstrQuery, &pNetworkNodes);\n    SysFreeString(bstrQuery);\n    if (FAILED(hr) || pNetworkNodes->Getlength() < 1) {\n        cout << "Failed to find Network node." << endl;\n        pXMLDoc.Release();\n        CoUninitialize();\n        return 1;\n    }\n\n    cout << "Accessed Network node successfully!" << endl;\n\n    // Cleanup\n    pXMLDoc.Release();\n    CoUninitialize();\n\n    return 0;\n}