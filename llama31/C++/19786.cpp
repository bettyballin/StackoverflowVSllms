#include <functional>\n#include <iostream>\n#include <chrono>\n\ntemplate <typename ReturnType, typename... Args>\nclass Timer {\npublic:\n    using FunctionType = std::function<ReturnType(Args...)>;\n\n    Timer(FunctionType fct) : fct_(fct), elapsed_time_(0) {}\n\n    ReturnType operator()(Args... args) {\n        auto start = std::chrono::high_resolution_clock::now();\n        ReturnType result = fct_(args...);\n        auto end = std::chrono::high_resolution_clock::now();\n        auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count();\n        elapsed_time_ += duration;\n        return result;\n    }\n\n    long GetElapsedTime() const { return elapsed_time_; }\n\nprivate:\n    FunctionType fct_;\n    long elapsed_time_;\n};\n\n// Example usage:\ndouble foo(int x) {\n    // Simulate some time-consuming operation\n    std::this_thread::sleep_for(std::chrono::milliseconds(x));\n    return x;\n}\n\nint main() {\n    Timer<double, int> timed_foo(foo);\n    double a = timed_foo(3);\n    double b = timed_foo(2);\n    double c = timed_foo(5);\n    std::cout << "Elapsed: " << timed_foo.GetElapsedTime() << " milliseconds" << std::endl;\n    return 0;\n}