#include <winsock2.h>\n#include <ws2tcpip.h>\n#include <iostream>\n#include <cassert>\n\nconst char html[] = "HTTP/1.1 200 OK\r\n"\n                    "Connection: close\r\n"\n                    "Content-type: text/html\r\n"\n                    "Content-Length: 123\r\n" // specify the content length\n                    "\r\n"\n                    "<html>\r\n"\n                    "<head>\r\n"\n                    "<title>Hello, world!</title>\r\n"\n                    "</head>\r\n"\n                    "<body>\r\n"\n                    "<h1>Hello, world!</h1>\r\n"\n                    "</body>\r\n"\n                    "</html>\r\n";\n\nint main() {\n    WSADATA wsa;\n\n    assert(WSAStartup(MAKEWORD(2, 2), &wsa) == 0);\n\n    addrinfo *res = NULL;\n    addrinfo hints;\n\n    ZeroMemory(&hints, sizeof(hints));\n\n    hints.ai_family = AF_INET;\n    hints.ai_socktype = SOCK_STREAM;\n    hints.ai_protocol = IPPROTO_TCP;\n    hints.ai_flags = AI_PASSIVE;\n\n    assert(getaddrinfo(NULL, "80", &hints, &res) == 0);\n\n    SOCKET s = socket(res->ai_family, res->ai_socktype, res->ai_protocol);\n\n    assert(s != INVALID_SOCKET);\n    assert(bind(s, res->ai_addr, (int)res->ai_addrlen) != SOCKET_ERROR);\n    assert(listen(s, SOMAXCONN) != SOCKET_ERROR);\n\n    SOCKET client = accept(s, NULL, NULL);\n\n    assert(client != INVALID_SOCKET);\n\n    char buffer[512];\n    int bytes;\n\n    bytes = recv(client, buffer, 512, 0);\n\n    for (int i = 0; i < bytes; ++i) {\n        std::cout << buffer[i];\n    }\n\n    assert(send(client, html, strlen(html), 0) > 0); // send the complete response\n    assert(shutdown(client, SD_BOTH) != SOCKET_ERROR);\n\n    closesocket(client);\n    WSACleanup();\n\n    return 0;\n}