#include <iostream>\n#include <map>\n#include <functional>\n#include <string>\n\n// Define a type for the action function\ntypedef std::function<void()> Action;\n\n// Define a struct to hold the command and its action\nstruct MenuItem {\n    std::string command;\n    std::string description;\n    Action action;\n};\n\n// Define a map to store the menu items\nstd::map<std::string, MenuItem> menuItems;\n\n// Function to add a menu item\nvoid addMenuItem(const std::string& command, const std::string& description, Action action) {\n    menuItems[command] = {command, description, action};\n}\n\nint main() {\n    // Add some menu items\n    addMenuItem("add", "Adds 1 and 2", [](){ std::cout << 1 + 2 << std::endl; });\n    addMenuItem("quit", "Quits the program", [](){ std::exit(0); });\n\n    while (true) {\n        // Display the menu\n        std::cout << "Menu:" << std::endl;\n        for (const auto& item : menuItems) {\n            std::cout << item.first << ": " << item.second.description << std::endl;\n        }\n\n        // Get the user's input\n        std::string input;\n        std::cout << "Enter a command: ";\n        std::cin >> input;\n\n        // Execute the action associated with the command\n        if (menuItems.find(input) != menuItems.end()) {\n            menuItems[input].action();\n        } else {\n            std::cout << "Unknown command" << std::endl;\n        }\n    }\n\n    return 0;\n}