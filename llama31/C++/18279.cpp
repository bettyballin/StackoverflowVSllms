#include <iostream>\n#include <chrono>\n#include <random>\n\nint linearSearch(int* arr, int n, int target) {\n    for (int i = 0; i < n; i++) {\n        if (arr[i] == target) return i;\n    }\n    return -1;\n}\n\nint binarySearch(int* arr, int n, int target) {\n    int left = 0;\n    int right = n - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] == target) return mid;\n        if (arr[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}\n\nint main() {\n    const int n = 1 << 14; // 16,384 elements\n    int* arr = new int[n];\n    std::random_device rd;\n    std::mt19937 gen(rd());\n    std::uniform_int_distribution<int> dis(0, 1000);\n    for (int i = 0; i < n; i++) arr[i] = dis(gen);\n\n    int target = arr[n / 2];\n\n    auto start = std::chrono::high_resolution_clock::now();\n    int idx = linearSearch(arr, n, target);\n    auto end = std::chrono::high_resolution_clock::now();\n    std::cout << "Linear search time: " << std::chrono::duration_cast<std::chrono::nanoseconds>(end - start).count() << " ns" << std::endl;\n\n    start = std::chrono::high_resolution_clock::now();\n    idx = binarySearch(arr, n, target);\n    end = std::chrono::high_resolution_clock::now();\n    std::cout << "Binary search time: " << std::chrono::duration_cast<std::chrono::nanoseconds>(end - start).count() << " ns" << std::endl;\n\n    delete[] arr;\n    return 0;\n}