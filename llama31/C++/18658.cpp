#include <iostream>\n\n// Your postFunction\nvoid postFunction() {\n    std::cout << "Post function called." << std::endl;\n}\n\n// Helper class\ntemplate <typename Func>\nclass PostCall {\npublic:\n    PostCall(Func func) : func_(func) {}\n\n    template <typename... Args>\n    auto operator()(Args&&... args) {\n        func_(std::forward<Args>(args)...);\n        postFunction();\n    }\n\nprivate:\n    Func func_;\n};\n\n// Example usage\nvoid f1() {\n    std::cout << "f1 called." << std::endl;\n}\n\nvoid f2() {\n    std::cout << "f2 called." << std::endl;\n}\n\nclass Foo {\npublic:\n    void f1() {\n        PostCall<void (*)()> call(f1);\n        call();\n    }\n\n    void f2() {\n        PostCall<void (*)()> call(f2);\n        call();\n    }\n};\n\nint main() {\n    Foo foo;\n    foo.f1();\n    foo.f2();\n    return 0;\n}