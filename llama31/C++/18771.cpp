#include <vector>\n#include <algorithm>\n\n// Quadtree node structure\nstruct QuadtreeNode {\n    // Bounds of this node\n    double xMin, xMax, yMin, yMax;\n\n    // Points within this node\n    std::vector<std::pair<double, double>> points;\n\n    // Child nodes ( nullptr if leaf node )\n    QuadtreeNode* nw, *ne, *sw, *se;\n\n    // Constructor\n    QuadtreeNode(double xMin, double xMax, double yMin, double yMax)\n        : xMin(xMin), xMax(xMax), yMin(yMin), yMax(yMax), nw(nullptr), ne(nullptr), sw(nullptr), se(nullptr) {}\n};\n\n// Quadtree class\nclass Quadtree {\npublic:\n    QuadtreeNode* root;\n\n    // Constructor\n    Quadtree(double xMin, double xMax, double yMin, double yMax) {\n        root = new QuadtreeNode(xMin, xMax, yMin, yMax);\n    }\n\n    // Insert a point into the Quadtree\n    void insert(double x, double y) {\n        insertRecursive(root, x, y);\n    }\n\n    // Find points within a rectangle\n    std::vector<std::pair<double, double>> findPointsInRect(double xMin, double xMax, double yMin, double yMax) {\n        std::vector<std::pair<double, double>> points;\n        findPointsInRectRecursive(root, xMin, xMax, yMin, yMax, points);\n        return points;\n    }\n\nprivate:\n    // Recursive insertion\n    void insertRecursive(QuadtreeNode* node, double x, double y) {\n        // Leaf node, add point\n        if (!node->nw) {\n            node->points.emplace_back(x, y);\n            return;\n        }\n\n        // Determine which child node to recurse into\n        if (x < node->xMin + (node->xMax - node->xMin) / 2) {\n            if (y < node->yMin + (node->yMax - node->yMin) / 2) {\n                insertRecursive(node->nw, x, y);\n            } else {\n                insertRecursive(node->sw, x, y);\n            }\n        } else {\n            if (y < node->yMin + (node->yMax - node->yMin) / 2) {\n                insertRecursive(node->ne, x, y);\n            } else {\n                insertRecursive(node->se, x, y);\n            }\n        }\n    }\n\n    // Recursive point finding\n    void findPointsInRectRecursive(QuadtreeNode* node, double xMin, double xMax, double yMin, double yMax, std::vector<std::pair<double, double>>& points) {\n        // Prune branches that don't intersect with the rectangle\n        if (node->xMax < xMin || node->xMin > xMax || node->yMax < yMin || node->yMin > yMax) {\n            return;\n        }\n\n        // Leaf node, check points\n        if (!node->nw) {\n            for (const auto& point : node->points) {\n                if (point.first >= xMin && point.first <= xMax && point.second >= yMin && point.second <= yMax) {\n                    points.push_back(point);\n                }\n            }\n            return;\n        }\n\n        // Recurse into child nodes\n        findPointsInRectRecursive(node->nw, xMin, xMax, yMin, yMax, points);\n        findPointsInRectRecursive(node->ne, xMin, xMax, yMin, yMax, points);\n        findPointsInRectRecursive(node->sw, xMin, xMax, yMin, yMax, points);\n        findPointsInRectRecursive(node->se, xMin, xMax, yMin, yMax, points);\n    }\n};