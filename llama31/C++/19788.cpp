#include <windows.h>\n#include <gdiplus.h>\n\nusing namespace Gdiplus;\n\nclass BitmapCompressor : public CComObjectRootEx<CComSingleThreadModel>,\n                         public CComCoClass<BitmapCompressor, &CLSID_BitmapCompressor>,\n                         public IUnknown\n{\npublic:\n    BEGIN_COM_MAP(BitmapCompressor)\n        COM_INTERFACE_ENTRY(IUnknown)\n    END_COM_MAP()\n\n    // Method to compress a bitmap to JPEG\n    STDMETHODIMP CompressBitmap(BSTR inputData, BSTR* outputData)\n    {\n        // Initialize GDI+\n        GdiplusStartupInput gdiplusStartupInput;\n        ULONG_PTR           gdiplusToken;\n        GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL);\n\n        // Create a bitmap from the input data\n        Bitmap* pBitmap = new Bitmap(inputData);\n\n        // Create a memory stream to store the compressed JPEG\n        IStream* pStream = NULL;\n        HRESULT hr = CreateStreamOnHGlobal(NULL, TRUE, &pStream);\n        if (SUCCEEDED(hr))\n        {\n            // Save the bitmap to the stream as JPEG\n            CLSID encoderClsid;\n            GetEncoderClsid(L"image/jpeg", &encoderClsid);\n            pBitmap->Save(pStream, &encoderClsid, NULL);\n\n            // Get the compressed data from the stream\n            HGLOBAL hGlobal;\n            hr = GetHGlobalFromStream(pStream, &hGlobal);\n            if (SUCCEEDED(hr))\n            {\n                void* data = GlobalLock(hGlobal);\n                *outputData = SysAllocString((LPCWSTR)data);\n                GlobalUnlock(hGlobal);\n            }\n        }\n\n        // Clean up\n        delete pBitmap;\n        if (pStream)\n            pStream->Release();\n\n        GdiplusShutdown(gdiplusToken);\n\n        return S_OK;\n    }\n\n    // Helper function to get the JPEG encoder CLSID\n    HRESULT GetEncoderClsid(const WCHAR* format, CLSID* pClsid)\n    {\n        UINT  num = 0;          // number of image encoders\n        UINT  size = 0;         // size of the image encoder array in bytes\n\n        ImageCodecInfo* pImageCodecInfo = NULL;\n\n        GetImageEncodersSize(&num, &size);\n        if (size == 0)\n            return E_FAIL; // Failure\n\n        pImageCodecInfo = (ImageCodecInfo*)(malloc(size));\n        if (pImageCodecInfo == NULL)\n            return E_OUTOFMEMORY; // Not enough memory\n\n        GetImageEncoders(num, size, pImageCodecInfo);\n\n        for (UINT j = 0; j < num; ++j)\n        {\n            if (wcscmp(pImageCodecInfo[j].MimeType, format) == 0)\n            {\n                *pClsid = pImageCodecInfo[j].Clsid;\n                free(pImageCodecInfo);\n                return S_OK; // Success\n            }\n        }\n\n        free(pImageCodecInfo);\n        return E_FAIL; // Failure\n    }\n};