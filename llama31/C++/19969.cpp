template <typename Derived>\nclass Foo {\npublic:\n    void A() { aImpl(); }\n    void B() { bImpl(); }\n\nprotected:\n    virtual void aImpl() = 0;\n    virtual void bImpl() = 0;\n\nprivate:\n    void aPrivateImpl() { ScopedLock lock(mutex); aImpl(); }\n    void bPrivateImpl() { ScopedLock lock(mutex); bImpl(); }\n\n    std::mutex mutex;\n};\n\nclass Bar : public Foo<Bar> {\nprotected:\n    void aImpl() override {\n        // ...\n        bPrivateImpl(); // Use private implementation to avoid deadlock\n        // ...\n    }\n\n    void bImpl() override {\n        // ...\n    }\n};