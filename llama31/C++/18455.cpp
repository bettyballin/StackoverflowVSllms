#include <windows.h>\n#include <mfapi.h>\n#include <mfidl.h>\n\nint main()\n{\n    IMFActivate **ppActivate = NULL;\n    UINT32 cCount = 0;\n\n    // Create the system object\n    IMFMediaSource *pSource = NULL;\n    HRESULT hr = MFCreateSource(NULL, &pSource);\n    if (FAILED(hr))\n    {\n        return 1;\n    }\n\n    // Get the video codec category\n    GUID category = MF_VIDEO_CODEC_CATEGORY;\n\n    // Enumerate all video codecs\n    hr = MFEnumTransforms(category, MFT_CATEGORY_VIDEO_DECODER, NULL, NULL, &ppActivate, &cCount);\n    if (SUCCEEDED(hr))\n    {\n        for (UINT32 i = 0; i < cCount; i++)\n        {\n            IMFTransform *pTransform;\n            hr = ppActivate[i]->ActivateObject(IID_PPV_ARGS(&pTransform));\n            if (SUCCEEDED(hr))\n            {\n                // Get the codec name\n                WCHAR *pwszName;\n                UINT32 cchName;\n                hr = pTransform->GetAttributes(NULL, &pwszName, &cchName);\n                if (SUCCEEDED(hr))\n                {\n                    wprintf(L"%s\n", pwszName);\n                    CoTaskMemFree(pwszName);\n                }\n                pTransform->Release();\n            }\n            ppActivate[i]->Release();\n        }\n        CoTaskMemFree(ppActivate);\n    }\n\n    // Get the encoder category\n    category = MF_VIDEO_ENCODER_CATEGORY;\n\n    // Enumerate all video encoders\n    hr = MFEnumTransforms(category, MFT_CATEGORY_VIDEO_ENCODER, NULL, NULL, &ppActivate, &cCount);\n    if (SUCCEEDED(hr))\n    {\n        for (UINT32 i = 0; i < cCount; i++)\n        {\n            IMFTransform *pTransform;\n            hr = ppActivate[i]->ActivateObject(IID_PPV_ARGS(&pTransform));\n            if (SUCCEEDED(hr))\n            {\n                // Get the encoder name\n                WCHAR *pwszName;\n                UINT32 cchName;\n                hr = pTransform->GetAttributes(NULL, &pwszName, &cchName);\n                if (SUCCEEDED(hr))\n                {\n                    wprintf(L"%s\n", pwszName);\n                    CoTaskMemFree(pwszName);\n                }\n                pTransform->Release();\n            }\n            ppActivate[i]->Release();\n        }\n        CoTaskMemFree(ppActivate);\n    }\n\n    return 0;\n}