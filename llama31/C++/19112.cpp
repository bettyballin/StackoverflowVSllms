#include <iostream>\n#include <memory>\n\nclass Node {\npublic:\n    int value;\n    std::unique_ptr<Node> next;\n\n    Node(int val) : value(val) {}\n};\n\nclass ListNode {\nprivate:\n    std::unique_ptr<Node> head;\n\npublic:\n    ListNode() = default;\n\n    void Insert(int num) {\n        auto newNode = std::make_unique<Node>(num);\n        if (!head) {\n            head = std::move(newNode);\n        } else {\n            auto current = head.get();\n            while (current->next) {\n                current = current->next.get();\n            }\n            current->next = std::move(newNode);\n        }\n    }\n\n    bool Contains(int num) const {\n        auto current = head.get();\n        while (current) {\n            if (current->value == num) {\n                return true;\n            }\n            current = current->next.get();\n        }\n        return false;\n    }\n\n    int GetValue(int index) const {\n        if (index < 1) {\n            throw std::invalid_argument("Index must be greater than 0");\n        }\n\n        auto current = head.get();\n        int count = 1;\n        while (current) {\n            if (count == index) {\n                return current->value;\n            }\n            current = current->next.get();\n            count++;\n        }\n        throw std::out_of_range("Index out of range");\n    }\n\n    void DisplayList() const {\n        auto current = head.get();\n        while (current) {\n            std::cout << current->value << std::endl;\n            current = current->next.get();\n        }\n    }\n\n    int Length() const {\n        auto current = head.get();\n        int count = 0;\n        while (current) {\n            count++;\n            current = current->next.get();\n        }\n        return count;\n    }\n};\n\nint main() {\n    ListNode list;\n\n    std::cout << "Input integers below. Input the integer -1 to stop inputting.\n\n";\n\n    int input = 0;\n    int nodeCount = 1;\n    while (input != -1) {\n        std::cout << "Please input integer number " << nodeCount << ": ";\n        std::cin >> input;\n        nodeCount++;\n        if (input != -1) {\n            list.Insert(input);\n        }\n    }\n\n    list.DisplayList();\n    std::cout << "\n\n";\n\n    int listLength = list.Length();\n    std::cout << "Which value do you wish to recall? (Between 1 and " << listLength << "): ";\n    int index;\n    std::cin >> index;\n    if (index >= 1 && index <= listLength) {\n        try {\n            std::cout << "Value at position " << index << " is " << list.GetValue(index) << ".";\n        } catch (const std::exception& e) {\n            std::cerr << "Error: " << e.what() << std::endl;\n        }\n    } else {\n        std::cout << "No such position in the list. Positions run from 1 to " << listLength << ". You asked for " << index << ".";\n    }\n\n    std::cout << "\n\nCheck if the following value is in the list: ";\n    int value;\n    std::cin >> value;\n    bool found = list.Contains(value);\n    if (found) {\n        std::cout << value << " is in the list.";\n    } else {\n        std::cout << value << " is not in the list.";\n    }\n\n    std::cout << "\n\n";\n    return 0;\n}