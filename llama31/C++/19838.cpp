#include <benchmark/benchmark.h>\n#include <sys/mman.h>\n#include <unistd.h>\n\n// Allocate a writable page\nvoid* writable_page = mmap(nullptr, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n\n// Allocate a read-only page\nvoid* read_only_page = mmap(nullptr, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n\n// Benchmark writable page access\nstatic void BM_WritablePageAccess(benchmark::State& state) {\n    for (auto _ : state) {\n        // Simulate JIT-generated code access\n        volatile char* ptr = (volatile char*)writable_page;\n        *ptr = 'a';\n    }\n}\nBENCHMARK(BM_WritablePageAccess);\n\n// Benchmark read-only page access\nstatic void BM_ReadOnlyPageAccess(benchmark::State& state) {\n    for (auto _ : state) {\n        // Simulate JIT-generated code access\n        volatile char* ptr = (volatile char*)read_only_page;\n        char value = *ptr;\n    }\n}\nBENCHMARK(BM_ReadOnlyPageAccess);\n\nBENCHMARK_MAIN();