void testPriorityInversion() {\n    ReadWriteLock lock;\n    std::vector<std::thread> threads;\n\n    // Create a low-priority writer thread\n    threads.emplace_back([&lock] {\n        lock.writeLock();\n        std::this_thread::sleep_for(std::chrono::milliseconds(50));\n        lock.writeUnlock();\n    });\n\n    // Create a high-priority reader thread\n    threads.emplace_back([&lock] {\n        lock.readLock();\n        // Simulate read operation\n        std::this_thread::sleep_for(std::chrono::milliseconds(10));\n        lock.readUnlock();\n    });\n\n    // Wait for all threads to finish\n    for (auto& thread : threads) {\n        thread.join();\n    }\n}