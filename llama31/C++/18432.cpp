#include <functional>\n#include <vector>\n\ntemplate <class T>\nclass MyClass {\npublic:\n    void DoSomething() {}\n};\n\nclass HoldingClass {\npublic:\n    void addDoSomething(std::function<void()> func) {\n        doSomethings_.push_back(func);\n    }\n\n    void callAllDoSomethings() {\n        for (const auto& func : doSomethings_) {\n            func();\n        }\n    }\n\nprivate:\n    std::vector<std::function<void()>> doSomethings_;\n};\n\nint main() {\n    HoldingClass holder;\n\n    MyClass<int> intClass;\n    MyClass<double> doubleClass;\n\n    holder.addDoSomething([&intClass]() { intClass.DoSomething(); });\n    holder.addDoSomething([&doubleClass]() { doubleClass.DoSomething(); });\n\n    holder.callAllDoSomethings();\n\n    return 0;\n}