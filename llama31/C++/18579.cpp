#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n\nint main() {\n    int sockfd, newsockfd, portno = 8080;\n    socklen_t clilen;\n    struct sockaddr_in serv_addr, cli_addr;\n    char buffer[256];\n\n    // Create socket\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << "Error creating socket" << std::endl;\n        return 1;\n    }\n\n    // Set address and port number for server\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(portno);\n    inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr);\n\n    // Bind socket to port\n    if (bind(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << "Error binding socket" << std::endl;\n        return 1;\n    }\n\n    // Listen for connections\n    listen(sockfd, 3);\n\n    std::cout << "Server listening on port " << portno << std::endl;\n\n    while (true) {\n        // Accept incoming connection\n        clilen = sizeof(cli_addr);\n        newsockfd = accept(sockfd, (struct sockaddr *)&cli_addr, &clilen);\n        if (newsockfd < 0) {\n            std::cerr << "Error accepting connection" << std::endl;\n            continue;\n        }\n\n        // Read data from client\n        read(newsockfd, buffer, 256);\n        std::cout << "Received message: " << buffer << std::endl;\n\n        // Send response back to client\n        char* message = "Hello, client!";\n        send(newsockfd, message, strlen(message), 0);\n\n        // Close connection\n        close(newsockfd);\n    }\n\n    return 0;\n}