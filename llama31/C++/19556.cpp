#include <fstream>\n#include <cstdint>\n\n// Define the JPEG marker codes\nenum class JpegMarker : uint8_t {\n    SOI  = 0xD8, // Start of Image\n    DHT  = 0xC4, // Define Huffman Table\n    SOF0 = 0xC0, // Start of Frame (Baseline)\n    SOF2 = 0xC2, // Start of Frame (Progressive)\n};\n\n// Function to read 2 bytes from a file and convert to uint16_t\nuint16_t read16(std::ifstream& file) {\n    uint8_t bytes[2];\n    file.read((char*)bytes, 2);\n    return (bytes[0] << 8) | bytes[1];\n}\n\n// Function to extract JPEG dimensions\nbool getJpegDimensions(const char* filename, uint16_t& width, uint16_t& height) {\n    std::ifstream file(filename, std::ios::binary);\n    if (!file.is_open()) {\n        return false;\n    }\n\n    // Check for JPEG SOI marker\n    uint8_t marker;\n    file.read((char*)&marker, 1);\n    if (marker != static_cast<uint8_t>(JpegMarker::SOI)) {\n        return false;\n    }\n\n    // Skip over any preceding markers\n    while (true) {\n        file.read((char*)&marker, 1);\n        if (marker == static_cast<uint8_t>(JpegMarker::SOF0) ||\n            marker == static_cast<uint8_t>(JpegMarker::SOF2)) {\n            break;\n        }\n        // Read and discard the marker length\n        read16(file);\n        // Skip over the marker data\n        file.seekg(read16(file), std::ios::cur);\n    }\n\n    // Read the frame header\n    read16(file); // Skip over the frame header length\n    height = read16(file);\n    width  = read16(file);\n\n    return true;\n}