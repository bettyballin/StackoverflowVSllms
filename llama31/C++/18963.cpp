#include <iostream>\n#include <chrono>\n\nint main() {\n    int x = -1;\n    int numIterations = 100000000;\n\n    auto start = std::chrono::high_resolution_clock::now();\n\n    for (int i = 0; i < numIterations; i++) {\n        if (x < 0) {}\n    }\n\n    auto end = std::chrono::high_resolution_clock::now();\n    auto durationLessThan = std::chrono::duration_cast<std::chrono::microseconds>(end - start).count();\n\n    start = std::chrono::high_resolution_clock::now();\n\n    for (int i = 0; i < numIterations; i++) {\n        if (x == -1) {}\n    }\n\n    end = std::chrono::high_resolution_clock::now();\n    auto durationEquals = std::chrono::duration_cast<std::chrono::microseconds>(end - start).count();\n\n    std::cout << "Time taken for (x < 0): " << durationLessThan << " microseconds" << std::endl;\n    std::cout << "Time taken for (x == -1): " << durationEquals << " microseconds" << std::endl;\n\n    return 0;\n}