int main() {\n    string input = "bearn";\n    string dictionaryWord = "bears";\n    vector<EditOperation> editOperations;\n    int distance = levenshtein(input, dictionaryWord, editOperations);\n    if (distance == 1) {\n        // Suggest correction based on the edit operation\n        if (editOperations[dictionaryWord.length()].type == 0) {\n            // Substitution\n            cout << "Suggest: " << dictionaryWord << endl;\n        } else if (editOperations[dictionaryWord.length()].type == 1) {\n            // Insertion\n            cout << "Suggest: " << dictionaryWord << endl;\n        } else if (editOperations[dictionaryWord.length()].type == 2) {\n            // Deletion\n            cout << "Suggest: " << dictionaryWord << endl;\n        }\n    } else {\n        // Use other algorithms to find the closest match\n    }\n    return 0;\n}