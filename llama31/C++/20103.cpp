#include <WinSock2.h>\n#include <WS2tcpip.h>\n#include <Windows.h>\n\n#pragma comment(lib, "ws2_32.lib")\n\nint main() {\n    // Initialize WinSock\n    WSADATA wsaData;\n    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {\n        return 1;\n    }\n\n    // Enumerate TCP sockets\n    MIB_TCPTABLE_OWNER_PID *tcpTable;\n    DWORD tcpTableSize = 0;\n    DWORD ret = GetExtendedTcpTable(NULL, &tcpTableSize, TRUE, AF_INET, TCP_TABLE_OWNER_PID_ALL, 0);\n    if (ret == ERROR_INSUFFICIENT_BUFFER) {\n        tcpTable = (MIB_TCPTABLE_OWNER_PID *)HeapAlloc(GetProcessHeap(), 0, tcpTableSize);\n        if (tcpTable) {\n            ret = GetExtendedTcpTable(tcpTable, &tcpTableSize, TRUE, AF_INET, TCP_TABLE_OWNER_PID_ALL, 0);\n            if (ret == NO_ERROR) {\n                for (int i = 0; i < (int)tcpTable->dwNumEntries; i++) {\n                    MIB_TCPROW_OWNER_PID *row = &tcpTable->table[i];\n                    printf("TCP: %s:%d (PID: %d)\n", inet_ntoa((in_addr)row->dwLocalAddr), ntohs((u_short)row->dwLocalPort), row->dwOwningPid);\n                }\n            }\n            HeapFree(GetProcessHeap(), 0, tcpTable);\n        }\n    }\n\n    // Enumerate UDP sockets\n    MIB_UDPTABLE_OWNER_PID *udpTable;\n    DWORD udpTableSize = 0;\n    ret = GetExtendedUdpTable(NULL, &udpTableSize, TRUE, AF_INET, UDP_TABLE_OWNER_PID, 0);\n    if (ret == ERROR_INSUFFICIENT_BUFFER) {\n        udpTable = (MIB_UDPTABLE_OWNER_PID *)HeapAlloc(GetProcessHeap(), 0, udpTableSize);\n        if (udpTable) {\n            ret = GetExtendedUdpTable(udpTable, &udpTableSize, TRUE, AF_INET, UDP_TABLE_OWNER_PID, 0);\n            if (ret == NO_ERROR) {\n                for (int i = 0; i < (int)udpTable->dwNumEntries; i++) {\n                    MIB_UDPROW_OWNER_PID *row = &udpTable->table[i];\n                    printf("UDP: %s:%d (PID: %d)\n", inet_ntoa((in_addr)row->dwLocalAddr), ntohs((u_short)row->dwLocalPort), row->dwOwningPid);\n                }\n            }\n            HeapFree(GetProcessHeap(), 0, udpTable);\n        }\n    }\n\n    // Clean up\n    WSACleanup();\n    return 0;\n}