class DllManager {\npublic:\n    DllManager() : dll_(NULL), refCount_(0) {}\n    ~DllManager() { UnloadDll(); }\n\n    void LoadDll(const char* path) {\n        if (!dll_) {\n            dll_ = LoadLibraryA(path);\n            if (dll_) {\n                createObjectFunc_ = (CreateObjectFunc)GetProcAddress(dll_, "CreateObject");\n            }\n        }\n    }\n\n    void UnloadDll() {\n        if (dll_ && refCount_ == 0) {\n            FreeLibrary(dll_);\n            dll_ = NULL;\n        }\n    }\n\n    IObject* CreateObject() {\n        if (createObjectFunc_) {\n            IObject* obj = createObjectFunc_();\n            InterlockedIncrement(&refCount_);\n            return obj;\n        }\n        return NULL;\n    }\n\n    void ReleaseObject(IObject* obj) {\n        if (obj) {\n            obj->Release();\n            InterlockedDecrement(&refCount_);\n            if (refCount_ == 0) {\n                UnloadDll();\n            }\n        }\n    }\n\nprivate:\n    HMODULE dll_;\n    CreateObjectFunc createObjectFunc_;\n    volatile LONG refCount_;\n};