// base_class.h\nclass BaseClass {\npublic:\n    virtual ~BaseClass() {}\n    // ...\n};\n\n// registry.h\nclass Registry {\npublic:\n    static Registry& getInstance() {\n        static Registry instance;\n        return instance;\n    }\n\n    void registerClass(BaseClass* (*factory)()) {\n        // Add factory to internal list\n    }\n\n    std::vector<BaseClass*> getRegisteredClasses() {\n        // Return list of registered classes\n    }\n};\n\n// derived_class.h (example)\nclass DerivedClass : public BaseClass {\npublic:\n    DerivedClass() {}\n    // ...\n};\n\n// derived_class.cpp\nstatic BaseClass* createDerivedClass() {\n    return new DerivedClass();\n}\n\nstatic int dummy = []() {\n    Registry::getInstance().registerClass(createDerivedClass);\n    return 0;\n}();