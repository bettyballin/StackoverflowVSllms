// Main application\nint main() {\n    // Start the wrapper process\n    STARTUPINFO si = { sizeof(si) };\n    PROCESS_INFORMATION pi = { 0 };\n    CreateProcess(NULL, "wrapper.exe", NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi);\n\n    // Communicate with the wrapper process using IPC\n    // ...\n\n    // When the DLL crashes, restart the wrapper process\n    if (WaitForSingleObject(pi.hProcess, INFINITE) == WAIT_OBJECT_0) {\n        // Restart the wrapper process\n        CreateProcess(NULL, "wrapper.exe", NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi);\n    }\n\n    return 0;\n}\n\n// Wrapper process (wrapper.exe)\nint main() {\n    // Load the unstable DLL\n    HMODULE hDll = LoadLibrary("unstable.dll");\n\n    // Provide a minimal interface to the main application using IPC\n    // ...\n\n    // When the DLL crashes, exit the process\n    __try {\n        // Call the DLL's functions\n        // ...\n    } __except (EXCEPTION_EXECUTE_HANDLER) {\n        // Exit the process\n        ExitProcess(1);\n    }\n\n    return 0;\n}