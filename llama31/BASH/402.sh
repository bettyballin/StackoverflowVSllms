#!/bin/bash\n\n# Set variables\nDB_HOST=localhost\nDB_USER=myuser\nDB_PASSWORD=mypassword\nDB_NAMES=(db1 db2 db3)\nEMAIL_TO=backup@example.com\nEMAIL_FROM=server@example.com\nEMAIL_FAIL=alert@example.com\nZIP_PASSWORD=mypassword\n\n# Set Google Apps SMTP server\nSMTP_SERVER=smtp.gmail.com\nSMTP_PORT=587\n\n# Dump and zip databases\nfor DB_NAME in "${DB_NAMES[@]}"; do\n  mysqldump -h $DB_HOST -u $DB_USER -p$DB_PASSWORD $DB_NAME > $DB_NAME.sql\n  zip -P $ZIP_PASSWORD $DB_NAME.zip $DB_NAME.sql\ndone\n\n# Send email with attachments\nfor DB_NAME in "${DB_NAMES[@]}"; do\n  echo "Sending $DB_NAME.zip to $EMAIL_TO"\n  /usr/sbin/sendmail -v -i -S $SMTP_SERVER:$SMTP_PORT -f $EMAIL_FROM $EMAIL_TO << EOF\nSubject: Backup of $DB_NAME\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=" boundary"\n\n--boundary\nContent-Type: application/zip; name="$DB_NAME.zip"\nContent-Transfer-Encoding: base64\nContent-Disposition: attachment; filename="$DB_NAME.zip"\n\n`base64 $DB_NAME.zip`\n\n--boundary--\nEOF\ndone\n\n# Check if email was sent successfully\nif [ $? -ne 0 ]; then\n  echo "Error sending email, sending alert to $EMAIL_FAIL"\n  /usr/sbin/sendmail -v -i -S $SMTP_SERVER:$SMTP_PORT -f $EMAIL_FROM $EMAIL_FAIL << EOF\nSubject: Backup failed\nMIME-Version: 1.0\nContent-Type: text/plain\n\nBackup failed for one or more databases.\nEOF\nfi