# spec/support/matchers/have_access_control.rb\nRSpec::Matchers.define :have_access_control do |options|\n  match do |lambda|\n    allowed_roles = options[:allowed]\n    disallowed_roles = options[:disallowed]\n\n    allowed_roles.each do |role|\n      # Use your authentication mechanism to set the current user's role\n      # For example, with Devise:\n      # sign_in FactoryGirl.create(:user, role: role)\n      lambda.call\n      expect(response).to be_successful\n    end\n\n    disallowed_roles.each do |role|\n      # Use your authentication mechanism to set the current user's role\n      # For example, with Devise:\n      # sign_in FactoryGirl.create(:user, role: role)\n      lambda.call\n      expect(response).to be_forbidden\n    end\n  end\n\n  failure_message do |lambda|\n    "Expected access control to #{options[:allowed].join(', ')} but not #{options[:disallowed].join(', ')}"\n  end\n\n  description do\n    "have access control with allowed roles #{options[:allowed].join(', ')} and disallowed roles #{options[:disallowed].join(', ')}"\n  end\nend