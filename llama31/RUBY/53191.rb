def find_subset_sums(data, target_sum)\n  def recursive_subset_sums(data, target_sum, current_sum, current_subset, start_index)\n    if current_sum == target_sum\n      puts current_subset.inspect\n    end\n\n    (start_index...data.size).each do |i|\n      new_sum = current_sum + data[i]\n      if new_sum <= target_sum\n        recursive_subset_sums(data, target_sum, new_sum, current_subset + [data[i]], i + 1)\n      end\n    end\n  end\n\n  recursive_subset_sums(data, target_sum, 0, [], 0)\nend\n\n# Example usage:\ndata = [1, 2, 3, 4, 5]\norig_sum = 5\ndiff = data.sum - orig_sum\ntarget_sum = diff / 2\n\nfind_subset_sums(data, target_sum)