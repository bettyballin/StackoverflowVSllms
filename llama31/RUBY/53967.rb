require 'openssl'\n\nclass MySQLAES\n  def self.encrypt(data, key)\n    # Pad the key with zeros until it's 16 bytes long\n    padded_key = key.ljust(16, "\0")\n\n    # Pad the data with zeros until it's a multiple of the block size\n    block_size = 16\n    padded_data = data + "\0" * ((block_size - data.length % block_size) % block_size)\n\n    # Encrypt the padded data\n    cipher = OpenSSL::Cipher::Cipher.new("AES-128-ECB")\n    cipher.key = padded_key\n    cipher.encrypt\n    encrypted_data = cipher.update(padded_data) + cipher.final\n\n    encrypted_data\n  end\n\n  def self.decrypt(encrypted_data, key)\n    # Pad the key with zeros until it's 16 bytes long\n    padded_key = key.ljust(16, "\0")\n\n    # Decrypt the data\n    cipher = OpenSSL::Cipher::Cipher.new("AES-128-ECB")\n    cipher.key = padded_key\n    cipher.decrypt\n    decrypted_padded_data = cipher.update(encrypted_data) + cipher.final\n\n    # Remove the padding from the decrypted data\n    decrypted_data = decrypted_padded_data.gsub(/\0+$/, '')\n\n    decrypted_data\n  end\nend