-- Create a cursor to iterate through all non-system databases\nDECLARE @sql nvarchar(max) = '';\nDECLARE db_cursor CURSOR FOR \nSELECT name \nFROM sys.databases \nWHERE database_id > 4;  -- exclude system databases\n\nOPEN db_cursor;\n\nFETCH NEXT FROM db_cursor INTO @sql;\n\nWHILE @@FETCH_STATUS = 0\nBEGIN\n    -- Construct the CREATE TRIGGER statement\n    DECLARE @create_trigger_sql nvarchar(max) = '\n    USE [' + @sql + '];\n    CREATE TRIGGER DBA_Audit ON DATABASE\n    FOR DDL_DATABASE_LEVEL_EVENTS\n    AS\n    BEGIN\n        DECLARE @data XML\n        DECLARE @cmd NVARCHAR(1000)\n        DECLARE @posttime NVARCHAR(24)\n        DECLARE @spid NVARCHAR(6)\n        DECLARE @loginname NVARCHAR(100)\n        DECLARE @hostname NVARCHAR(100)\n\n        SET @data = EVENTDATA()\n        SET @cmd = @data.value(''(/EVENT_INSTANCE/TSQLCommand/CommandText)[1]'', ''NVARCHAR(1000)'')\n        SET @cmd = LTRIM(RTRIM(REPLACE(@cmd,'''','''')))\n        SET @posttime = @data.value(''(/EVENT_INSTANCE/PostTime)[1]'', ''DATETIME'')\n        SET @spid = @data.value(''(/EVENT_INSTANCE/SPID)[1]'', ''nvarchar(6)'')\n        SET @loginname = @data.value(''(/EVENT_INSTANCE/LoginName)[1]'', ''NVARCHAR(100)'')\n        SET @hostname = HOST_NAME()\n\n        INSERT INTO [DBA_AUDIT].dbo.AuditLog(Command, PostTime,HostName,LoginName)\n        VALUES(@cmd, @posttime, @hostname, @loginname);\n    END\n    ';\n\n    -- Execute the CREATE TRIGGER statement\n    EXEC sp_executesql @create_trigger_sql;\n\n    FETCH NEXT FROM db_cursor INTO @sql;\nEND\n\nCLOSE db_cursor;\nDEALLOCATE db_cursor;