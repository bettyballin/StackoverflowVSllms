-- Create a procedure to adjust the job's next_run_date if system date changes\nCREATE OR REPLACE PROCEDURE adjust_job_schedule AS\n    v_job_name      VARCHAR2(30) := 'YOUR_JOB_NAME'; -- Replace with your job name\n    v_job_owner     VARCHAR2(30) := 'YOUR_JOB_OWNER'; -- Replace with your job owner\n    v_next_run_date DATE;\nBEGIN\n    -- Check if job exists and is enabled\n    SELECT next_run_date INTO v_next_run_date\n    FROM dba_scheduler_jobs\n    WHERE job_name = v_job_name AND owner = v_job_owner AND enabled = 'TRUE';\n\n    -- Adjust next_run_date if it's in the past (indicating system date change)\n    IF v_next_run_date < SYSTIMESTAMP THEN\n        DBMS_SCHEDULER.SET_ATTRIBUTE(\n            name      => v_job_name,\n            attribute => 'next_run_date',\n            value     => SYSTIMESTAMP);\n    END IF;\nEND;\n/\n\n-- Schedule the procedure to run at intervals to check and adjust\nBEGIN\n    DBMS_SCHEDULER.CREATE_JOB(\n        job_name        => 'CHECK_AND_ADJUST_JOB_SCHEDULE',\n        job_type        => 'PLSQL_BLOCK',\n        job_action      => 'BEGIN adjust_job_schedule; END;',\n        start_date      => SYSTIMESTAMP,\n        repeat_interval => 'FREQ=MINUTELY; INTERVAL=10', -- Adjust every 10 minutes\n        end_date        => NULL,\n        enabled         => TRUE,\n        comments        => 'Job to adjust schedules after system date change');\nEND;\n/