-- Create a function to split the string\nCREATE FUNCTION dbo.SplitString (@string nvarchar(max), @delimiter nvarchar(10))\nRETURNS @result TABLE (value nvarchar(50))\nAS\nBEGIN\n    DECLARE @xml xml\n    SET @xml = CONVERT(xml, '<root><value>' + REPLACE(@string, @delimiter, '</value><value>') + '</value></root>')\n    INSERT INTO @result (value)\n    SELECT T.c.value('.', 'nvarchar(50)') AS value\n    FROM @xml.nodes('/root/value') AS T(c)\n    RETURN\nEND\nGO\n\n-- Sample data\nCREATE TABLE #Table1 (ID int, Column1 nvarchar(100))\nINSERT INTO #Table1 (ID, Column1) VALUES (1, 'A; B; C; D')\n\nCREATE TABLE #Table2 (ID int, Column2 nvarchar(50))\nINSERT INTO #Table2 (ID, Column2) VALUES (1, 'A'), (2, 'B'), (3, 'D'), (4, 'E')\n\n-- Use the function to split the string and LEFT JOIN to check for invalid values\nSELECT t1.ID, t1.Column1, \n       CASE WHEN EXISTS (SELECT 1 FROM dbo.SplitString(t1.Column1, ';') s \n                         LEFT JOIN #Table2 t2 ON s.value = t2.Column2\n                         WHERE t2.Column2 IS NULL) THEN 'Invalid' ELSE 'Valid' END AS Status\nFROM #Table1 t1