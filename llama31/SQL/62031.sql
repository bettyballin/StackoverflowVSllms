CREATE TABLE Artist (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE Artist_Group (\n  id SERIAL PRIMARY KEY,\n  artist_ids TEXT NOT NULL, -- computed column\n  UNIQUE (artist_ids)\n);\n\nCREATE TABLE Artist_Group_Participation (\n  artist_id INTEGER NOT NULL,\n  artist_group_id INTEGER NOT NULL,\n  PRIMARY KEY (artist_id, artist_group_id),\n  FOREIGN KEY (artist_id) REFERENCES Artist(id),\n  FOREIGN KEY (artist_group_id) REFERENCES Artist_Group(id)\n);\n\nCREATE OR REPLACE FUNCTION sort_artist_ids(artist_ids INTEGER[]) RETURNS TEXT AS $$\n  SELECT STRING_AGG(artist_id::TEXT, ',' ORDER BY artist_id)\n  FROM UNNEST(artist_ids) AS artist_id\n$$ LANGUAGE SQL;\n\nCREATE OR REPLACE FUNCTION update_artist_ids() RETURNS TRIGGER AS $$\n  BEGIN\n    NEW.artist_ids = sort_artist_ids(ARRAY_AGG(NEW.artist_id ORDER BY NEW.artist_id));\n    RETURN NEW;\n  END;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER update_artist_ids_trigger\nBEFORE INSERT OR UPDATE ON Artist_Group_Participation\nFOR EACH ROW\nEXECUTE PROCEDURE update_artist_ids();