CREATE FUNCTION AddWorkingHours\n(\n    @start datetime,\n    @addHours datetime\n)\nRETURNS datetime\nAS\nBEGIN\n    DECLARE @result datetime\n    DECLARE @addTime int\n    SET @addTime = DATEDIFF(HH, '1900-01-01 00:00:00', @addHours)\n\n    -- Adjust start time to the next working day if necessary\n    IF DATENAME(DW, @start) IN ('Saturday', 'Sunday') OR \n       @start < CONVERT(datetime, CONVERT(varchar(10), @start, 120) + ' 08:30:00', 120)\n    BEGIN\n        SET @start = dbo.NextWorkingDay(@start)\n        SET @start = CONVERT(datetime, CONVERT(varchar(10), @start, 120) + ' 08:30:00', 120)\n    END\n\n    -- Add hours, considering working hours\n    WHILE @addTime > 0\n    BEGIN\n        IF @start < CONVERT(datetime, CONVERT(varchar(10), @start, 120) + ' 17:30:00', 120)\n        BEGIN\n            -- Add one hour to start time\n            SET @start = DATEADD(HH, 1, @start)\n            SET @addTime = @addTime - 1\n        END\n        ELSE\n        BEGIN\n            -- Move to the next working day\n            SET @start = dbo.NextWorkingDay(@start)\n            SET @start = CONVERT(datetime, CONVERT(varchar(10), @start, 120) + ' 08:30:00', 120)\n        END\n    END\n\n    RETURN @start\nEND\nGO\n\n-- Helper function to get the next working day\nCREATE FUNCTION NextWorkingDay\n(\n    @date datetime\n)\nRETURNS datetime\nAS\nBEGIN\n    DECLARE @nextDate datetime\n    SET @nextDate = DATEADD(DD, 1, @date)\n\n    WHILE DATENAME(DW, @nextDate) IN ('Saturday', 'Sunday')\n    BEGIN\n        SET @nextDate = DATEADD(DD, 1, @nextDate)\n    END\n\n    RETURN @nextDate\nEND\nGO