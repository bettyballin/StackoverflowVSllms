DECLARE @Xml XML, @Category INT\n\nSET @Xml = N'\n<Library>\n  <Novels>\n    <Novel category="1">Novel1</Novel>\n    <Novel category="2">Novel2</Novel>\n    <Novel>Novel3</Novel>\n    <Novel category="4">Novel4</Novel>\n  </Novels>\n  <Encyclopedias>\n    <Encyclopedia>\n      <Volume>A-F</Volume>\n      <Volume category="2">G-L</Volume>\n      <Volume category="3">M-S</Volume>\n      <Volume category="4">T-Z</Volume>\n    </Encyclopedia>\n  </Encyclopedias>\n  <Dictionaries category="1">\n    <Dictionary>Webster</Dictionary>\n    <Dictionary>Oxford</Dictionary>\n  </Dictionaries>\n</Library>\n'\n\nSET @Category = 1\n\n;WITH Nodes AS (\n    SELECT T.c.query('.') AS Node, T.c.value('(@category)[1]', 'INT') AS Category\n    FROM @Xml.nodes('//*') T(c)\n),\nAncestors AS (\n    SELECT N.Node, N.Category, CAST('/' + N.Node.value('local-name(.)', 'VARCHAR(MAX)') AS VARCHAR(MAX)) AS Path\n    FROM Nodes N\n    WHERE N.Node.value('..', 'VARCHAR(MAX)') IS NULL\n    UNION ALL\n    SELECT N.Node, N.Category, A.Path + '/' + N.Node.value('local-name(..)', 'VARCHAR(MAX)')\n    FROM Nodes N\n    INNER JOIN Ancestors A ON N.Node.value('..', 'VARCHAR(MAX)') = A.Node.value('.', 'VARCHAR(MAX)')\n)\nSELECT CONVERT(XML, (\n    SELECT A2.Node.query('.')\n    FROM Ancestors A2\n    WHERE (@Category IS NULL OR A2.Category = @Category OR A2.Category IS NULL)\n    AND NOT EXISTS (\n        SELECT 1\n        FROM Ancestors A3\n        WHERE A3.Path LIKE A2.Path + '/%'\n        AND A3.Category <> @Category AND A3.Category IS NOT NULL\n    )\n    ORDER BY A2.Path\n    FOR XML PATH(''), TYPE\n)).query('.')