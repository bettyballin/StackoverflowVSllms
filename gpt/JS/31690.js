// Debounce function to ensure the callback runs only once after sorting\nfunction debounce(func, wait) {\n  let timeout;\n  return function() {\n    const context = this, args = arguments;\n    clearTimeout(timeout);\n    timeout = setTimeout(function() {\n      timeout = null;\n      func.apply(context, args);\n    }, wait);\n  };\n}\n\n// Your existing onUpdate callback function\nfunction onUpdateCallback() {\n  // Resizing elements and drawing graphs\n  console.log('Update triggered'); // Replace with your actual code\n}\n\n// Wrap the onUpdate callback with the debounce function\nconst debouncedOnUpdate = debounce(onUpdateCallback, 100); // Adjust the wait time as needed\n\n// Initialize the Sortable with the debounced onUpdate callback\nSortable.create("your-sortable-container-id", {\n  onUpdate: debouncedOnUpdate\n});