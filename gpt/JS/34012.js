function gradient(length, colors) {\n    var result = [], steps = [], numColors = colors.length - 1;\n    \n    // Process each color\n    for (var i = 0; i < colors.length; i++) {\n        colors[i] = (typeof(colors[i]) === 'string' ? colors[i] : colors[i].join(',')).replace(/[#\s]/g, '');\n        colors[i] = (colors[i].indexOf(',') !== -1\n            ? colors[i].split(',').map(Number)\n            : colors[i].match(/.{2}/g).map(hex => parseInt(hex, 16)));\n    }\n    \n    // Calculate steps\n    for (var i = 0; i < numColors; i++) {\n        steps[i] = [\n            (colors[i + 1][0] - colors[i][0]) / (length / numColors),\n            (colors[i + 1][1] - colors[i][1]) / (length / numColors),\n            (colors[i + 1][2] - colors[i][2]) / (length / numColors)\n        ];\n    }\n    \n    // Generate gradient\n    for (var i = 0; i < length; i++) {\n        var segment = Math.floor(i / (length / numColors));\n        var factor = (i % (length / numColors)) / (length / numColors);\n        var r = Math.round(colors[segment][0] + steps[segment][0] * factor);\n        var g = Math.round(colors[segment][1] + steps[segment][1] * factor);\n        var b = Math.round(colors[segment][2] + steps[segment][2] * factor);\n        result.push('#' + r.toString(16).padStart(2, '0') +\n                         g.toString(16).padStart(2, '0') +\n                         b.toString(16).padStart(2, '0'));\n    }\n    \n    return result;\n}