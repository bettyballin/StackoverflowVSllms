// Function object example\nfunction exampleFunction() {\n  console.log("I am a function object and also callable.");\n}\n\nexampleFunction(); // This works, it's callable\nconsole.log(typeof exampleFunction); // "function"\nconsole.log(({}).toString.call(exampleFunction)); // "[object Function]"\n\n// Callable object example\nconst callableObject = {\n  [Symbol.toPrimitive]() {\n    return () => console.log("I am a callable object.");\n  }\n};\n\nconsole.log(typeof callableObject); // "object"\ncallableObject(); // This would throw an error because typical objects are not callable.