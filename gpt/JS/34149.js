// abstraction.js\nclass LibraryAbstraction {\n    constructor(library) {\n        this.library = library;\n    }\n\n    getElement(selector) {\n        return this.library.getElement(selector);\n    }\n\n    setText(selector, text) {\n        this.library.setText(selector, text);\n    }\n\n    // Add more abstracted methods as needed\n}\n\n// libraryA.js\nclass LibraryA {\n    getElement(selector) {\n        return document.querySelector(selector);\n    }\n\n    setText(selector, text) {\n        const element = document.querySelector(selector);\n        if (element) element.textContent = text;\n    }\n}\n\n// libraryB.js\nclass LibraryB {\n    getElement(selector) {\n        return $(selector); // Assuming jQuery\n    }\n\n    setText(selector, text) {\n        $(selector).text(text);\n    }\n}\n\n// Usage\nconst libA = new LibraryA();\nconst libB = new LibraryB();\n\nconst lib = new LibraryAbstraction(libA); // Or libB\n\nconst element = lib.getElement('#myElement');\nlib.setText('#myElement', 'Hello World');