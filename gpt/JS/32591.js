function customAdd(a, b) {\n    return a ^ b; // XOR operation\n}\n\nfunction customSub(a, b) {\n    return a ^ b; // XOR operation\n}\n\nfunction customMul(a, b) {\n    return a & b; // AND operation\n}\n\nfunction customDiv(a, b) {\n    if (b === 0) throw new Error("Division by zero");\n    return a;\n}\n\nfunction gaussianElimination(matrix) {\n    const n = matrix.length;\n\n    for (let i = 0; i < n; i++) {\n        // Find pivot\n        if (matrix[i][i] === 0) {\n            for (let j = i + 1; j < n; j++) {\n                if (matrix[j][i] === 1) {\n                    // Swap rows i and j\n                    [matrix[i], matrix[j]] = [matrix[j], matrix[i]];\n                    break;\n                }\n            }\n        }\n\n        // Make the diagonal contain all 1s\n        for (let j = 0; j < n; j++) {\n            if (j !== i && matrix[j][i] === 1) {\n                for (let k = 0; k <= n; k++) {\n                    matrix[j][k] = customSub(matrix[j][k], matrix[i][k]);\n                }\n            }\n        }\n    }\n\n    // Extract the solution\n    const solution = new Array(n);\n    for (let i = 0; i < n; i++) {\n        solution[i] = matrix[i][n];\n    }\n\n    return solution;\n}\n\n// Example usage\nconst matrix = [\n    [1, 1, 0, 1, 0, 0, 0, 0, 0, 1],\n    [0, 1, 0, 1, 1, 0, 0, 0, 0, 1],\n    [0, 1, 1, 0, 0, 1, 0, 0, 0, 1],\n    [1, 0, 0, 1, 0, 0, 0, 0, 0, 1],\n    [0, 1, 0, 1, 1, 0, 0, 0, 0, 1],\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 1],\n    [0, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n    [0, 0, 0, 1, 1, 0, 1, 1, 0, 1],\n    [0, 0, 0, 0, 0, 1, 0, 0, 1, 1]\n];\n\nconst solution = gaussianElimination(matrix);\nconsole.log(solution); // prints [1, 0, 0, 0, 1, 1, 1, 1, 0]