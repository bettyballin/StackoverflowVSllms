const jwt = require('jsonwebtoken');\n\n// Function to generate JWT token\nfunction generateToken(user) {\n    const payload = {\n        userId: user.id,\n        roles: user.roles // Array of roles\n    };\n    return jwt.sign(payload, 'your-secret-key', { expiresIn: '1h' });\n}\n\n// Middleware to verify JWT token and check permissions\nfunction verifyToken(req, res, next) {\n    const token = req.headers['authorization'];\n    if (!token) {\n        return res.status(403).send('No token provided.');\n    }\n\n    jwt.verify(token, 'your-secret-key', (err, decoded) => {\n        if (err) {\n            return res.status(500).send('Failed to authenticate token.');\n        }\n\n        // Save decoded information to request object\n        req.userId = decoded.userId;\n        req.roles = decoded.roles;\n\n        next();\n    });\n}\n\n// Middleware to check user roles\nfunction checkRole(requiredRole) {\n    return (req, res, next) => {\n        if (!req.roles || !req.roles.includes(requiredRole)) {\n            return res.status(403).send('Insufficient permissions.');\n        }\n        next();\n    };\n}\n\n// Usage in an Express route\nconst express = require('express');\nconst app = express();\n\napp.use(verifyToken);\n\napp.get('/admin', checkRole('admin'), (req, res) => {\n    res.send('Welcome to the admin page.');\n});\n\napp.listen(3000, () => {\n    console.log('Server is running on port 3000');\n});