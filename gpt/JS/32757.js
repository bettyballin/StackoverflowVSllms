(function() {\n    var OriginalActiveXObject = ActiveXObject;\n\n    // Override the ActiveXObject constructor\n    window.ActiveXObject = function(progId) {\n        var instance = new OriginalActiveXObject(progId);\n\n        // Check if the created object is the one you're interested in\n        if (progId === "Tconnector") {\n            return createProxy(instance);\n        }\n\n        return instance;\n    };\n\n    function createProxy(realObject) {\n        // Create a proxy to intercept method calls\n        return new Proxy(realObject, {\n            get: function(target, propKey, receiver) {\n                var origMethod = target[propKey];\n\n                // If the method being called is 'open', log it\n                if (propKey === "open" && typeof origMethod === "function") {\n                    return function() {\n                        console.log("open method called on ActiveXObject");\n                        return origMethod.apply(target, arguments);\n                    };\n                }\n\n                // Return the original property if it's not the 'open' method\n                return origMethod;\n            }\n        });\n    }\n})();