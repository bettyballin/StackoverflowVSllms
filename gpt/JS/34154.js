const express = require('express');\n    const jwt = require('jsonwebtoken');\n    const bcrypt = require('bcryptjs');\n\n    const app = express();\n    app.use(express.json());\n\n    const users = []; // Replace with your user storage mechanism\n    const secretKey = 'your-secret-key'; // Use a strong secret key and keep it secure\n\n    // Mock user registration for demonstration\n    app.post('/register', async (req, res) => {\n        const { username, password } = req.body;\n        const hashedPassword = await bcrypt.hash(password, 10);\n        users.push({ username, password: hashedPassword });\n        res.status(201).send('User registered');\n    });\n\n    // User login\n    app.post('/login', async (req, res) => {\n        const { username, password } = req.body;\n        const user = users.find(u => u.username === username);\n        if (user && await bcrypt.compare(password, user.password)) {\n            const token = jwt.sign({ username: user.username }, secretKey, { expiresIn: '1h' });\n            res.json({ token });\n        } else {\n            res.status(401).send('Invalid credentials');\n        }\n    });\n\n    // Middleware to protect routes\n    const authenticateToken = (req, res, next) => {\n        const authHeader = req.headers['authorization'];\n        const token = authHeader && authHeader.split(' ')[1];\n        if (!token) return res.sendStatus(401);\n\n        jwt.verify(token, secretKey, (err, user) => {\n            if (err) return res.sendStatus(403);\n            req.user = user;\n            next();\n        });\n    };\n\n    // Protected route example\n    app.get('/protected', authenticateToken, (req, res) => {\n        res.send(`Hello, ${req.user.username}`);\n    });\n\n    app.listen(3000, () => {\n        console.log('Server running on port 3000');\n    });