class Validator {\n    constructor(form) {\n        this.form = form;\n        this.errors = [];\n    }\n\n    isNumber(field) {\n        if (isNaN(this.form[field])) {\n            this.errors.push(`${field} must be a number.`);\n        }\n    }\n\n    isGreaterThan(field, compareField) {\n        if (this.form[field] <= 0 && this.form[compareField] > 0) {\n            this.errors.push(`${field} must be greater than 0 when ${compareField} is greater than 0.`);\n        }\n    }\n\n    isEqual(field, compareField, value) {\n        if (this.form[compareField] == value && this.form[field] != 0) {\n            this.errors.push(`${field} must be 0 when ${compareField} is ${value}.`);\n        }\n    }\n\n    isModEqual(field, compareField, value) {\n        if (this.form[compareField] && this.form[field] % this.form[compareField] != 0) {\n            this.errors.push(`${field} must be divisible by ${compareField}.`);\n        }\n    }\n\n    validate() {\n        this.errors = [];\n\n        this.isNumber('currentField');\n        this.isGreaterThan('anotherField1', 'currentField');\n        this.isEqual('anotherField2', 'currentField', 1);\n        this.isModEqual('anotherField3', 'currentField', true);\n\n        if (this.errors.length > 0) {\n            alert(this.errors.join('\n'));\n            return false;\n        }\n\n        return true;\n    }\n}\n\n// Usage\nconst form = {\n    currentField: 5,\n    anotherField1: 10,\n    anotherField2: 1,\n    anotherField3: 2,\n};\n\nconst validator = new Validator(form);\nif (validator.validate()) {\n    // Proceed with form submission\n} else {\n    // Handle validation errors\n}