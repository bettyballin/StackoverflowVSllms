ChildControl = function(element) {\n    ChildControl.initializeBase(this, [element]);\n}\n\nChildControl.prototype = {\n    callMethod: function() {\n        return 'hi';\n    },\n\n    initialize: function() {\n        ChildControl.callBaseMethod(this, 'initialize');\n    },\n\n    dispose: function() {\n        ChildControl.callBaseMethod(this, 'dispose');\n    }\n}\n\nChildControl.registerClass('Namespace.ChildControl', Sys.UI.Control);\n\nParentControl = function(element) {\n    ParentControl.initializeBase(this, [element]);\n}\n\nParentControl.prototype = {\n    initialize: function() {\n        ParentControl.callBaseMethod(this, 'initialize');\n        this._childControl = $find(this._childControlID);\n\n        if (this._childControl && this._childControl.callMethod) {\n            var result = this._childControl.callMethod();\n            console.log(result);  // Output should be 'hi'\n        } else {\n            console.error("Child control method not found.");\n        }\n    },\n\n    dispose: function() {\n        ParentControl.callBaseMethod(this, 'dispose');\n    }\n}\n\nParentControl.registerClass('Namespace.ParentControl', Sys.UI.Control);