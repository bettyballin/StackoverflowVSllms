function spiralOrder(matrix) {\n    if (matrix.length === 0) return [];\n    \n    const result = [];\n    let top = 0, bottom = matrix.length - 1;\n    let left = 0, right = matrix[0].length - 1;\n    \n    while (top <= bottom && left <= right) {\n        // Traverse from left to right along the top row\n        for (let i = left; i <= right; i++) {\n            result.push(matrix[top][i]);\n        }\n        top++;\n        \n        // Traverse from top to bottom along the right column\n        for (let i = top; i <= bottom; i++) {\n            result.push(matrix[i][right]);\n        }\n        right--;\n        \n        if (top <= bottom) {\n            // Traverse from right to left along the bottom row\n            for (let i = right; i >= left; i--) {\n                result.push(matrix[bottom][i]);\n            }\n            bottom--;\n        }\n        \n        if (left <= right) {\n            // Traverse from bottom to top along the left column\n            for (let i = bottom; i >= top; i--) {\n                result.push(matrix[i][left]);\n            }\n            left++;\n        }\n    }\n    \n    return result;\n}\n\n// Example usage:\nconst matrix = [\n  [ 1, 2, 3 ],\n  [ 4, 5, 6 ],\n  [ 7, 8, 9 ]\n];\n\nconsole.log(spiralOrder(matrix)); // Output: [1, 2, 3, 6, 9, 8, 7, 4, 5]