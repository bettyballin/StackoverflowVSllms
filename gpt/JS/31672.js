class Quadtree {\n    // Quadtree implementation\n}\n\nclass Shape {\n    constructor(type, boundingBox, zIndex) {\n        this.type = type;\n        this.boundingBox = boundingBox;\n        this.zIndex = zIndex;\n    }\n\n    contains(point) {\n        // Implement actual shape-specific hit-testing logic\n        // For example, if it's a circle, check if the point is within the circle's radius\n    }\n}\n\n// Initialize quadtree and shapes\nlet quadtree = new Quadtree(/* parameters for quadtree */);\nlet shapes = [\n    new Shape('circle', {x: 10, y: 10, width: 20, height: 20}, 1),\n    new Shape('circle', {x: 15, y: 15, width: 20, height: 20}, 2),\n    // Add more shapes\n];\n\n// Insert shapes into the quadtree\nshapes.forEach(shape => quadtree.insert(shape));\n\n// Function to handle click events\nfunction handleClick(event) {\n    let clickPoint = {x: event.clientX, y: event.clientY};\n\n    // Query the quadtree for potential shapes at the click point\n    let candidates = quadtree.query(clickPoint);\n\n    // Sort candidates by z-index\n    candidates.sort((a, b) => b.zIndex - a.zIndex);\n\n    // Check if the click point is within any shape\n    for (let shape of candidates) {\n        if (shape.contains(clickPoint)) {\n            console.log('Shape selected:', shape);\n            return shape;  // Shape is selected\n        }\n    }\n\n    console.log('No shape selected');\n    return null;  // No shape selected\n}\n\n// Add event listener for clicks\ncanvas.addEventListener('click', handleClick);