function testSortNumbers() {\n    // Test case 1: Empty list\n    assert SortNumbers([], true) == [];\n    assert SortNumbers([], false) == [];\n\n    // Test case 2: Single element list\n    assert SortNumbers([1], true) == [1];\n    assert SortNumbers([1], false) == [1];\n\n    // Test case 3: Already sorted list\n    assert SortNumbers([1, 2, 3], true) == [1, 2, 3];\n    assert SortNumbers([3, 2, 1], false) == [3, 2, 1];\n\n    // Test case 4: Reverse sorted list\n    assert SortNumbers([3, 2, 1], true) == [1, 2, 3];\n    assert SortNumbers([1, 2, 3], false) == [3, 2, 1];\n\n    // Test case 5: All elements the same\n    assert SortNumbers([2, 2, 2], true) == [2, 2, 2];\n    assert SortNumbers([2, 2, 2], false) == [2, 2, 2];\n\n    // Test case 6: List with negative and positive numbers\n    assert SortNumbers([-3, -1, 2, 1], true) == [-3, -1, 1, 2];\n    assert SortNumbers([-3, -1, 2, 1], false) == [2, 1, -1, -3];\n\n    // Test case 7: List with duplicates\n    assert SortNumbers([1, 3, 2, 3], true) == [1, 2, 3, 3];\n    assert SortNumbers([1, 3, 2, 3], false) == [3, 3, 2, 1];\n\n    // Test case 8: Large list (example with 1000 elements)\n    largeList = generateLargeList(1000); // Assume this function generates a list with 1000 random numbers\n    sortedListAsc = sorted(largeList);   // Assume this function sorts the list in ascending order\n    sortedListDesc = sorted(largeList, reverse=True); // Assume this function sorts the list in descending order\n    assert SortNumbers(largeList, true) == sortedListAsc;\n    assert SortNumbers(largeList, false) == sortedListDesc;\n\n    // Test case 9: Special numbers\n    assert SortNumbers([0, -1, 99999999], true) == [-1, 0, 99999999];\n    assert SortNumbers([0, -1, 99999999], false) == [99999999, 0, -1];\n}\n\ntestSortNumbers();