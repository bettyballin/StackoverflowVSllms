// Store all active XMLHttpRequest objects\nvar activeXhrRequests = [];\n\n// Override the send method to keep track of active requests\n(function(open, send) {\n    XMLHttpRequest.prototype.open = function(method, url, async, user, pass) {\n        this._url = url;\n        open.call(this, method, url, async, user, pass);\n    };\n    XMLHttpRequest.prototype.send = function(data) {\n        activeXhrRequests.push(this);\n        this.addEventListener('loadend', function() {\n            var index = activeXhrRequests.indexOf(this);\n            if (index > -1) {\n                activeXhrRequests.splice(index, 1);\n            }\n        });\n        send.call(this, data);\n    };\n})(XMLHttpRequest.prototype.open, XMLHttpRequest.prototype.send);\n\n// Function to cancel all requests\nfunction cancelAllRequests() {\n    // Cancel all active XMLHttpRequest objects\n    activeXhrRequests.forEach(function(xhr) {\n        xhr.abort();\n    });\n    activeXhrRequests = [];\n\n    // Cancel all script and image requests by removing them from the DOM\n    var scriptTags = document.getElementsByTagName('script');\n    var imageTags = document.getElementsByTagName('img');\n\n    for (var i = scriptTags.length - 1; i >= 0; i--) {\n        scriptTags[i].parentNode.removeChild(scriptTags[i]);\n    }\n    for (var j = imageTags.length - 1; j >= 0; j--) {\n        imageTags[j].src = ''; // Stop loading\n        imageTags[j].parentNode.removeChild(imageTags[j]);\n    }\n}\n\n// Usage example\n// Call cancelAllRequests() whenever you need to cancel all ongoing requests\ncancelAllRequests();