class Lock {\n    constructor() {\n        this._locked = false;\n        this._waiting = [];\n    }\n\n    async acquire() {\n        while (this._locked) {\n            await new Promise(resolve => this._waiting.push(resolve));\n        }\n        this._locked = true;\n    }\n\n    release() {\n        this._locked = false;\n        if (this._waiting.length > 0) {\n            const resolve = this._waiting.shift();\n            resolve();\n        }\n    }\n}\n\nconst cache = {};\nconst lock = new Lock();\n\nasync function fetchData(url) {\n    await lock.acquire();\n\n    if (cache[url]) {\n        lock.release();\n        return cache[url];\n    }\n\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        cache[url] = data;\n        return data;\n    } finally {\n        lock.release();\n    }\n}\n\n// Usage example\n(async () => {\n    const data1 = fetchData('https://api.example.com/data');\n    const data2 = fetchData('https://api.example.com/data');\n\n    const result1 = await data1;\n    const result2 = await data2;\n\n    console.log(result1, result2);\n})();