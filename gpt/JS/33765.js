// Example of data caching in Node.js using Redis\n    const express = require('express');\n    const redis = require('redis');\n    const fetch = require('node-fetch');\n    \n    const app = express();\n    const client = redis.createClient();\n    \n    app.get('/api/data', (req, res) => {\n        const cacheKey = 'apiData';\n        \n        client.get(cacheKey, async (err, data) => {\n            if (err) throw err;\n            \n            if (data) {\n                res.send(JSON.parse(data));\n            } else {\n                const response = await fetch('https://api.yoursite.com/data');\n                const data = await response.json();\n                \n                client.setex(cacheKey, 3600, JSON.stringify(data)); // Cache for 1 hour\n                res.send(data);\n            }\n        });\n    });\n    \n    app.listen(3000, () => {\n        console.log('Server running on port 3000');\n    });