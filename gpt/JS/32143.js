// Register a new credential\nasync function registerCredential() {\n    const publicKeyCredentialCreationOptions = {\n        challenge: new Uint8Array(32), // Replace with a server-generated challenge\n        rp: { name: "Example Inc." },\n        user: {\n            id: new Uint8Array(16), // Replace with user's unique ID\n            name: "user@example.com",\n            displayName: "User Example"\n        },\n        pubKeyCredParams: [{ type: "public-key", alg: -7 }],\n        authenticatorSelection: { authenticatorAttachment: "cross-platform" },\n        timeout: 60000,\n        attestation: "direct"\n    };\n\n    const credential = await navigator.credentials.create({\n        publicKey: publicKeyCredentialCreationOptions\n    });\n\n    // Send the credential to the server for verification and storage\n    await fetch('/register', {\n        method: 'POST',\n        body: JSON.stringify(credential),\n        headers: { 'Content-Type': 'application/json' }\n    });\n}\n\n// Authenticate with an existing credential\nasync function authenticateCredential() {\n    const publicKeyCredentialRequestOptions = {\n        challenge: new Uint8Array(32), // Replace with a server-generated challenge\n        allowCredentials: [{\n            id: new Uint8Array(16), // Replace with credential ID associated with the user\n            type: "public-key"\n        }],\n        timeout: 60000\n    };\n\n    const assertion = await navigator.credentials.get({\n        publicKey: publicKeyCredentialRequestOptions\n    });\n\n    // Send the assertion to the server for verification\n    await fetch('/authenticate', {\n        method: 'POST',\n        body: JSON.stringify(assertion),\n        headers: { 'Content-Type': 'application/json' }\n    });\n}