var R = 3961.3; // Radius of the Earth in miles\n\n// Helper functions\nfunction toRadians(degrees) {\n    return degrees * Math.PI / 180;\n}\n\nfunction toDegrees(radians) {\n    return radians * 180 / Math.PI;\n}\n\nfunction haversineDistance(lat1, lon1, lat2, lon2) {\n    var φ1 = toRadians(lat1), λ1 = toRadians(lon1);\n    var φ2 = toRadians(lat2), λ2 = toRadians(lon2);\n    var Δφ = φ2 - φ1;\n    var Δλ = λ2 - λ1;\n\n    var a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n            Math.cos(φ1) * Math.cos(φ2) *\n            Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n    return R * c;\n}\n\nfunction bearing(lat1, lon1, lat2, lon2) {\n    var φ1 = toRadians(lat1), φ2 = toRadians(lat2);\n    var λ1 = toRadians(lon1), λ2 = toRadians(lon2);\n    var y = Math.sin(λ2 - λ1) * Math.cos(φ2);\n    var x = Math.cos(φ1) * Math.sin(φ2) -\n            Math.sin(φ1) * Math.cos(φ2) * Math.cos(λ2 - λ1);\n    return Math.atan2(y, x);\n}\n\n// Main function to calculate cross-track distance\nfunction crossTrackDistance(lat1, lon1, lat2, lon2, lat3, lon3) {\n    var d13 = haversineDistance(lat1, lon1, lat3, lon3);\n    var θ13 = bearing(lat1, lon1, lat3, lon3);\n    var θ12 = bearing(lat1, lon1, lat2, lon2);\n\n    var dXt = Math.asin(Math.sin(d13 / R) * Math.sin(θ13 - θ12)) * R;\n    return Math.abs(dXt); // Return the absolute value to ensure a positive distance\n}\n\n// Test the function\nvar lat1 = 41.81762, lon1 = -94.127592;\nvar lat2 = 41.848202, lon2 = -94.087257;\nvar lat3 = 41.791057, lon3 = -94.046875;\n\nvar distance = crossTrackDistance(lat1, lon1, lat2, lon2, lat3, lon3);\nconsole.log('Cross-track distance:', distance, 'miles');