// Function to generate a unique encryption key for a user\nasync function generateUserKey(password, salt) {\n  const enc = new TextEncoder();\n  const keyMaterial = await crypto.subtle.importKey(\n    "raw",\n    enc.encode(password),\n    "PBKDF2",\n    false,\n    ["deriveKey"]\n  );\n  const key = await crypto.subtle.deriveKey(\n    {\n      name: "PBKDF2",\n      salt: salt,\n      iterations: 100000,\n      hash: "SHA-256"\n    },\n    keyMaterial,\n    { name: "AES-GCM", length: 256 },\n    true,\n    ["encrypt", "decrypt"]\n  );\n  return key;\n}\n\n// Function to encrypt data\nasync function encryptData(key, data) {\n  const enc = new TextEncoder();\n  const iv = crypto.getRandomValues(new Uint8Array(12)); // Initialization vector\n  const encrypted = await crypto.subtle.encrypt(\n    { name: "AES-GCM", iv: iv },\n    key,\n    enc.encode(data)\n  );\n  return { iv: iv, encryptedData: encrypted };\n}\n\n// Function to decrypt data\nasync function decryptData(key, iv, encryptedData) {\n  const decrypted = await crypto.subtle.decrypt(\n    { name: "AES-GCM", iv: iv },\n    key,\n    encryptedData\n  );\n  const dec = new TextDecoder();\n  return dec.decode(decrypted);\n}\n\n// Example usage\n(async () => {\n  const password = "user-secret-password"; // This should be securely stored, e.g., in a secure cookie or local storage\n  const salt = crypto.getRandomValues(new Uint8Array(16));\n  const userKey = await generateUserKey(password, salt);\n\n  const dataToEncrypt = "This is some sensitive data.";\n  const { iv, encryptedData } = await encryptData(userKey, dataToEncrypt);\n\n  // Store iv, salt, and encryptedData on the server\n\n  // To decrypt the data:\n  const decryptedData = await decryptData(userKey, iv, encryptedData);\n  console.log(decryptedData); // "This is some sensitive data."\n})();