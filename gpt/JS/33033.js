// Function to normalize coordinates\nfunction NormalizeCoord(value: int, size: int): int {\n    return (value % size + size) % size;\n}\n\n// Function to check if a point is within a wraparound rectangle\nfunction IsPointInWraparoundRect(point: TPoint, rect: TRect, mapSize: TPoint): boolean {\n    // Normalize the point coordinates\n    point.x = NormalizeCoord(point.x, mapSize.x);\n    point.y = NormalizeCoord(point.y, mapSize.y);\n\n    // Normalize the rectangle coordinates\n    rect.left = NormalizeCoord(rect.left, mapSize.x);\n    rect.top = NormalizeCoord(rect.top, mapSize.y);\n    rect.right = NormalizeCoord(rect.right, mapSize.x);\n    rect.bottom = NormalizeCoord(rect.bottom, mapSize.y);\n\n    // Check if the point is within the normalized rectangle\n    if (rect.left <= rect.right) {\n        if (rect.top <= rect.bottom) {\n            // Normal case\n            return (point.x >= rect.left && point.x <= rect.right &&\n                    point.y >= rect.top && point.y <= rect.bottom);\n        } else {\n            // Wraparound case in the y-direction\n            return (point.x >= rect.left && point.x <= rect.right &&\n                    (point.y >= rect.top || point.y <= rect.bottom));\n        }\n    } else {\n        if (rect.top <= rect.bottom) {\n            // Wraparound case in the x-direction\n            return ((point.x >= rect.left || point.x <= rect.right) &&\n                    point.y >= rect.top && point.y <= rect.bottom);\n        } else {\n            // Wraparound case in both directions\n            return ((point.x >= rect.left || point.x <= rect.right) &&\n                    (point.y >= rect.top || point.y <= rect.bottom));\n        }\n    }\n}