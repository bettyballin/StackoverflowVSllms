class DomainObject {\n    constructor() {\n        this.tempId = this.generateUniqueId();\n        this.id = null; // Will be set by the server upon saving\n    }\n\n    generateUniqueId() {\n        return 'temp-' + Math.random().toString(36).substr(2, 16);\n    }\n\n    bind(event, callback) {\n        // Simple event binding logic (for demonstration purposes)\n        this.event = callback;\n    }\n\n    save() {\n        // Simulate saving to the server and getting a real Id\n        setTimeout(() => {\n            this.id = "real-id-" + Math.random().toString(36).substr(2, 16);\n            if (this.event) this.event();\n        }, 1000);\n    }\n}\n\nlet map = new Map();\nlet domainObj = new DomainObject();\n\n// Use tempId as key initially\nmap.set(domainObj.tempId, 'foo');\n\ndomainObj.bind('saved', function() {\n    // Remove the temporary entry\n    map.delete(domainObj.tempId);\n    \n    // Add the new entry with the real Id\n    map.set(domainObj.id, 'new foo!');\n});\n\n// Simulate saving the object\ndomainObj.save();