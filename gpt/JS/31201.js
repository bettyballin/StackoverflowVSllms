// Function to derive an encryption key from a password\nasync function deriveKey(password, salt) {\n    const encoder = new TextEncoder();\n    const keyMaterial = await crypto.subtle.importKey(\n        'raw',\n        encoder.encode(password),\n        { name: 'PBKDF2' },\n        false,\n        ['deriveKey']\n    );\n    const key = await crypto.subtle.deriveKey(\n        {\n            name: 'PBKDF2',\n            salt: encoder.encode(salt),\n            iterations: 100000,\n            hash: 'SHA-256'\n        },\n        keyMaterial,\n        { name: 'AES-GCM', length: 256 },\n        true,\n        ['encrypt', 'decrypt']\n    );\n    return key;\n}\n\n// Function to encrypt data\nasync function encryptData(data, password) {\n    const salt = crypto.getRandomValues(new Uint8Array(16));\n    const key = await deriveKey(password, salt);\n    const iv = crypto.getRandomValues(new Uint8Array(12));\n    const encoder = new TextEncoder();\n    const encryptedData = await crypto.subtle.encrypt(\n        {\n            name: 'AES-GCM',\n            iv: iv\n        },\n        key,\n        encoder.encode(data)\n    );\n    return {\n        encryptedData: new Uint8Array(encryptedData),\n        iv: iv,\n        salt: salt\n    };\n}\n\n// Function to decrypt data\nasync function decryptData(encryptedData, iv, salt, password) {\n    const key = await deriveKey(password, salt);\n    const decryptedData = await crypto.subtle.decrypt(\n        {\n            name: 'AES-GCM',\n            iv: iv\n        },\n        key,\n        encryptedData\n    );\n    const decoder = new TextDecoder();\n    return decoder.decode(decryptedData);\n}\n\n// Example usage\n(async () => {\n    const password = 'user-unique-password';\n    const data = 'Sensitive user data';\n    \n    // Encrypt data\n    const { encryptedData, iv, salt } = await encryptData(data, password);\n\n    // Store `encryptedData`, `iv`, and `salt` on the server\n\n    // Decrypt data\n    const decryptedData = await decryptData(encryptedData, iv, salt, password);\n    console.log(decryptedData); // Output: Sensitive user data\n})();