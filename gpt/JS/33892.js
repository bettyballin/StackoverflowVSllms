const express = require('express');\nconst jwt = require('jsonwebtoken');\nconst app = express();\nconst bodyParser = require('body-parser');\nconst { v4: uuidv4 } = require('uuid');\n\n// Middleware to parse JSON bodies\napp.use(bodyParser.json());\n\nconst users = {}; // This should be replaced with a database\nconst activeSessions = {}; // To track active sessions\n\nconst SECRET_KEY = 'your-secret-key'; // Use a secure secret key\n\n// Login endpoint\napp.post('/login', (req, res) => {\n    const { username, password } = req.body;\n    \n    // Validate user credentials (replace with your own logic)\n    if (isValidUser(username, password)) {\n        const userId = getUserId(username);\n        \n        // Invalidate any previous session\n        if (activeSessions[userId]) {\n            delete activeSessions[userId];\n        }\n\n        // Create a new session token\n        const sessionToken = jwt.sign({ userId }, SECRET_KEY, { expiresIn: '1h' });\n        activeSessions[userId] = sessionToken;\n\n        res.json({ token: sessionToken });\n    } else {\n        res.status(401).json({ error: 'Invalid credentials' });\n    }\n});\n\n// Middleware to verify token\nfunction authenticateToken(req, res, next) {\n    const authHeader = req.headers['authorization'];\n    const token = authHeader && authHeader.split(' ')[1];\n\n    if (!token) return res.sendStatus(401);\n\n    jwt.verify(token, SECRET_KEY, (err, user) => {\n        if (err) return res.sendStatus(403);\n\n        // Check if the token matches the active session\n        if (activeSessions[user.userId] !== token) {\n            return res.sendStatus(403);\n        }\n\n        req.user = user;\n        next();\n    });\n}\n\n// Protected route\napp.get('/protected', authenticateToken, (req, res) => {\n    res.json({ message: 'This is a protected route', user: req.user });\n});\n\n// Function to validate user credentials\nfunction isValidUser(username, password) {\n    // Implement your own logic to validate user credentials\n    return username === 'user' && password === 'password';\n}\n\n// Function to get user ID by username\nfunction getUserId(username) {\n    // Implement your own logic to retrieve user ID\n    return uuidv4();\n}\n\napp.listen(3000, () => {\n    console.log('Server is running on port 3000');\n});