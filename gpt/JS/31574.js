function validateField(field) {\n  // Perform the basic validation first\n  if (!field.value) {\n    showError(field, "This field is required.");\n    return Promise.resolve(false);\n  }\n\n  // Perform AJAX validation for username and email\n  if (field.name === "username" || field.name === "email") {\n    return new Promise((resolve) => {\n      $.post("something.php", { field: field.value }, function(data) {\n        if (isSomething(data)) {\n          resolve(true);\n        } else {\n          showError(field, "This value is already taken.");\n          resolve(false);\n        }\n      });\n    });\n  }\n\n  // If no AJAX validation needed, resolve immediately\n  return Promise.resolve(true);\n}\n\nfunction validateForm(form) {\n  const fields = form.elements;\n  const validationPromises = [];\n\n  for (let i = 0; i < fields.length; i++) {\n    const field = fields[i];\n    validationPromises.push(validateField(field));\n  }\n\n  return Promise.all(validationPromises).then((results) => {\n    return results.every(result => result);\n  });\n}\n\ndocument.getElementById('submit-button').addEventListener('click', function(event) {\n  event.preventDefault();\n  const form = document.getElementById('my-form');\n  validateForm(form).then((isValid) => {\n    if (isValid) {\n      form.submit();\n    } else {\n      console.log("Form validation failed.");\n    }\n  });\n});\n\nfunction showError(field, message) {\n  const errorElement = document.createElement('span');\n  errorElement.className = 'error';\n  errorElement.innerText = message;\n  field.parentElement.appendChild(errorElement);\n}\n\nfunction isSomething(data) {\n  // Replace with actual validation logic\n  return data.success;\n}