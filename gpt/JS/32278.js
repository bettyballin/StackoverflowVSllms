const puppeteer = require('puppeteer');\nconst fs = require('fs');\nconst resemble = require('resemblejs');\n\nconst liveUrl = 'http://live-site.com';\nconst testUrl = 'http://test-site.com';\nconst urlsToTest = ['/page1', '/page2']; // Add more paths as needed\n\nasync function captureScreenshots(urls, baseUrl, folder) {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n\n  for (const url of urls) {\n    await page.goto(`${baseUrl}${url}`);\n    await page.screenshot({ path: `${folder}${url.replace(/\//g, '_')}.png`, fullPage: true });\n  }\n\n  await browser.close();\n}\n\nasync function compareScreenshots(urls) {\n  for (const url of urls) {\n    const liveImage = fs.readFileSync(`./live${url.replace(/\//g, '_')}.png`);\n    const testImage = fs.readFileSync(`./test${url.replace(/\//g, '_')}.png`);\n\n    resemble(liveImage)\n      .compareTo(testImage)\n      .onComplete(data => {\n        console.log(`${url}: ${data.misMatchPercentage}% mismatch`);\n        fs.writeFileSync(`./diff${url.replace(/\//g, '_')}.png`, data.getBuffer());\n      });\n  }\n}\n\nasync function main() {\n  // Capture live site screenshots\n  await captureScreenshots(urlsToTest, liveUrl, './live');\n\n  // Capture test site screenshots\n  await captureScreenshots(urlsToTest, testUrl, './test');\n\n  // Compare screenshots\n  await compareScreenshots(urlsToTest);\n}\n\nmain();