const express = require('express');\nconst jwt = require('jsonwebtoken');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.json());\n\nconst SECRET_KEY = 'your_secret_key';\nconst TOKEN_EXPIRATION = '15m'; // 15 minutes\n\n// Function to generate a token\nfunction generateToken(username) {\n  const payload = { username };\n  return jwt.sign(payload, SECRET_KEY, { expiresIn: TOKEN_EXPIRATION });\n}\n\n// Token verification middleware\nfunction verifyToken(req, res, next) {\n  const token = req.body.token;\n\n  if (!token) {\n    return res.status(403).send('Token is required');\n  }\n\n  jwt.verify(token, SECRET_KEY, (err, decoded) => {\n    if (err) {\n      return res.status(403).send('Invalid or expired token');\n    }\n\n    req.user = decoded;\n    next();\n  });\n}\n\n// Example route to generate a token\napp.post('/generate-token', (req, res) => {\n  const { username } = req.body;\n  const token = generateToken(username);\n  res.send({ token });\n});\n\n// Example route that requires authentication\napp.post('/secure-endpoint', verifyToken, (req, res) => {\n  res.send(`Hello, ${req.user.username}! You have accessed a secure endpoint.`);\n});\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});