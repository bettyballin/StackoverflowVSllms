-- Create a temporary table to hold the results\nCREATE TABLE #TempResults (\n    StartDate DATETIME,\n    EndDate DATETIME\n)\n\n-- Declare variables for cursor operation\nDECLARE @CurrentEffDate DATETIME, @CurrentTermDate DATETIME\nDECLARE @MinEffDate DATETIME, @MaxTermDate DATETIME\nDECLARE @PrevTermDate DATETIME\n\n-- Declare a cursor to iterate through the records\nDECLARE date_cursor CURSOR FOR\nSELECT effdate, termdate\nFROM YourTable\nORDER BY effdate\n\n-- Open the cursor\nOPEN date_cursor\n\n-- Fetch the first row\nFETCH NEXT FROM date_cursor INTO @CurrentEffDate, @CurrentTermDate\n\n-- Check if the cursor has fetched a row\nWHILE @@FETCH_STATUS = 0\nBEGIN\n    -- Initialize the first segment\n    IF @MinEffDate IS NULL\n    BEGIN\n        SET @MinEffDate = @CurrentEffDate\n        SET @MaxTermDate = @CurrentTermDate\n    END\n    ELSE\n    BEGIN\n        -- Check if the current segment is contiguous with the previous segment\n        IF DATEADD(DAY, 1, @PrevTermDate) = @CurrentEffDate\n        BEGIN\n            SET @MaxTermDate = @CurrentTermDate\n        END\n        ELSE\n        BEGIN\n            -- Insert the previous segment into the temporary table\n            INSERT INTO #TempResults (StartDate, EndDate)\n            VALUES (@MinEffDate, @MaxTermDate)\n\n            -- Start a new segment\n            SET @MinEffDate = @CurrentEffDate\n            SET @MaxTermDate = @CurrentTermDate\n        END\n    END\n\n    -- Update the previous term date\n    SET @PrevTermDate = @CurrentTermDate\n\n    -- Fetch the next row\n    FETCH NEXT FROM date_cursor INTO @CurrentEffDate, @CurrentTermDate\nEND\n\n-- Insert the last segment into the temporary table\nINSERT INTO #TempResults (StartDate, EndDate)\nVALUES (@MinEffDate, @MaxTermDate)\n\n-- Close and deallocate the cursor\nCLOSE date_cursor\nDEALLOCATE date_cursor\n\n-- Select the results\nSELECT * FROM #TempResults\n\n-- Drop the temporary table\nDROP TABLE #TempResults