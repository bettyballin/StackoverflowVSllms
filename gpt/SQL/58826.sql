-- Assuming ID is a unique identifier for each transaction\n-- Step 1: Insert the new transaction\nINSERT INTO transactions (date, amount)\nVALUES (<NEW_DATE>, <NEW_AMOUNT>);\n\n-- Get the ID of the newly inserted transaction\n-- (this step may vary depending on your DBMS and application logic)\n-- For example, use `RETURNING id` in PostgreSQL or `last_insert_rowid()` in SQLite.\n\n-- Step 2: Retrieve the running balance from the previous transaction\nWITH previous_balance AS (\n    SELECT running_balance\n    FROM transactions\n    WHERE date < <NEW_DATE>\n    ORDER BY date DESC\n    LIMIT 1\n)\n-- Step 3: Update the running balance for the new transaction\nUPDATE transactions\nSET running_balance = (SELECT running_balance FROM previous_balance) + <NEW_AMOUNT>\nWHERE id = <NEW_TRANSACTION_ID>;\n\n-- Step 4: Update the running balance for all subsequent transactions\nUPDATE transactions\nSET running_balance = running_balance + <NEW_AMOUNT>\nWHERE date > <NEW_DATE>\n   OR (date = <NEW_DATE> AND id > <NEW_TRANSACTION_ID>);