BEGIN\n  DBMS_SCHEDULER.CREATE_JOB (\n    job_name        => 'MY_SINGLETON_JOB',\n    job_type        => 'PLSQL_BLOCK',\n    job_action      => 'BEGIN\n                         -- Custom job action here\n                         my_procedure;\n                       END;',\n    start_date      => SYSTIMESTAMP,\n    repeat_interval => 'FREQ=MINUTELY; INTERVAL=5',\n    enabled         => TRUE,\n    auto_drop       => FALSE\n  );\n\n  DBMS_SCHEDULER.SET_ATTRIBUTE('MY_SINGLETON_JOB', 'MAX_RUNS', 1);\n  DBMS_SCHEDULER.SET_ATTRIBUTE('MY_SINGLETON_JOB', 'MAX_FAILURES', 1);\n  DBMS_SCHEDULER.SET_ATTRIBUTE('MY_SINGLETON_JOB', 'RESTART_ON_FAILURE', FALSE);\nEND;\n/\n\n-- Procedure to check if the job is running and prevent re-execution\nCREATE OR REPLACE PROCEDURE my_procedure IS\n  l_running_jobs NUMBER;\nBEGIN\n  SELECT COUNT(*)\n  INTO l_running_jobs\n  FROM DBA_SCHEDULER_RUNNING_JOBS\n  WHERE job_name = 'MY_SINGLETON_JOB';\n\n  IF l_running_jobs = 0 THEN\n    -- Job logic here\n    DBMS_OUTPUT.PUT_LINE('Job is running...');\n    \n    -- Simulate job duration\n    DBMS_LOCK.SLEEP(300); -- sleep for 5 minutes\n\n  ELSE\n    DBMS_OUTPUT.PUT_LINE('Previous job instance still running. Skipping...');\n  END IF;\nEND;\n/