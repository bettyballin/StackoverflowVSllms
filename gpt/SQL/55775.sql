-- Create the spool table\nCREATE TABLE spool (\n    `key` BIGINT,\n    txt TEXT,\n    seq BIGINT AUTO_INCREMENT PRIMARY KEY\n);\n\n-- Function to start spooling\nDELIMITER $$\nCREATE PROCEDURE begin_spool(OUT spool_key BIGINT)\nBEGIN\n    SET @spool_key = (SELECT COALESCE(MAX(`key`), 0) + 1 FROM spool);\n    SET spool_key = @spool_key;\nEND $$\nDELIMITER ;\n\n-- Function to insert into spool\nDELIMITER $$\nCREATE PROCEDURE into_spool(IN spool_key BIGINT, IN in_txt TEXT)\nBEGIN\n    INSERT INTO spool (`key`, txt) VALUES (spool_key, in_txt);\nEND $$\nDELIMITER ;\n\n-- Function to reset spooling\nDELIMITER $$\nCREATE PROCEDURE reset_spool(INOUT spool_key BIGINT)\nBEGIN\n    DELETE FROM spool WHERE `key` = spool_key;\n    CALL begin_spool(spool_key);\nEND $$\nDELIMITER ;\n\n-- Function to end spooling (using a cursor)\nDELIMITER $$\nCREATE PROCEDURE end_spool(IN spool_key BIGINT)\nBEGIN\n    DECLARE done INT DEFAULT 0;\n    DECLARE txt TEXT;\n    DECLARE seq BIGINT;\n    DECLARE cur CURSOR FOR SELECT txt, seq FROM spool WHERE `key` = spool_key ORDER BY seq;\n    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;\n\n    OPEN cur;\n\n    read_loop: LOOP\n        FETCH cur INTO txt, seq;\n        IF done THEN\n            LEAVE read_loop;\n        END IF;\n        -- Process each row (txt, seq) here\n    END LOOP;\n\n    CLOSE cur;\nEND $$\nDELIMITER ;\n\n-- Function to get the current timestamp\nDELIMITER $$\nCREATE FUNCTION get_timestamp()\nRETURNS VARCHAR(14)\nBEGIN\n    RETURN DATE_FORMAT(NOW(), '%Y%m%d%H%i%s');\nEND $$\nDELIMITER ;