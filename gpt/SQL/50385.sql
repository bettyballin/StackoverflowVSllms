WITH foo AS (\n    -- Anchor member: Select the initial edges\n    SELECT parent_id, child_id, \n           CAST(parent_id AS VARCHAR(MAX)) + '->' + CAST(child_id AS VARCHAR(MAX)) AS path\n    FROM #bar \n    WHERE parent_id IN (1, 3)\n    \n    UNION ALL\n    \n    -- Recursive member: Join with the CTE to find subsequent edges\n    SELECT b.parent_id, b.child_id, \n           foo.path + '->' + CAST(b.child_id AS VARCHAR(MAX)) AS path\n    FROM #bar b\n    JOIN foo ON b.parent_id = foo.child_id\n    WHERE CHARINDEX(CAST(b.child_id AS VARCHAR(MAX)), foo.path) = 0 -- Ensure the node has not been visited\n)\n-- Final select to retrieve the unique edges\nSELECT DISTINCT parent_id, child_id\nFROM foo;