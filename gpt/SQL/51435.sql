CREATE OR REPLACE FUNCTION knn_search(query_point float8[], k int)\nRETURNS TABLE(id int, distance float8) AS $$\nimport heapq\n\ndef euclidean_distance(p1, p2):\n    return sum((x - y) ** 2 for x, y in zip(p1, p2)) ** 0.5\n\nquery = "SELECT id, point FROM points_table"\nresult = plpy.execute(query)\npoints = [(row['id'], row['point']) for row in result]\n\n# Min-heap to store the nearest neighbors\nnearest_neighbors = []\nfor point_id, point in points:\n    distance = euclidean_distance(query_point, point)\n    if len(nearest_neighbors) < k:\n        heapq.heappush(nearest_neighbors, (-distance, point_id))\n    else:\n        heapq.heappushpop(nearest_neighbors, (-distance, point_id))\n\n# Return the k nearest neighbors\nfor dist, point_id in nearest_neighbors:\n    yield point_id, -dist\n\n$$ LANGUAGE plpython3u;