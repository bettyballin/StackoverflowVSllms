DECLARE @StartDateTime DATETIME\nDECLARE @EndDateTime DATETIME\n\n-- Sample start and end dates\nSET @StartDateTime = '2003-04-29 15:00:00'\nSET @EndDateTime = '2003-04-30 11:00:00'\n\n-- Function to check if a given date is a weekend\nCREATE FUNCTION dbo.IsWeekend(@Date DATETIME)\nRETURNS BIT\nAS\nBEGIN\n    IF DATEPART(dw, @Date) = 1 OR DATEPART(dw, @Date) = 7\n        RETURN 1\n    RETURN 0\nEND\n\n-- Function to calculate business hours difference\nCREATE FUNCTION dbo.CalculateBusinessHours(@StartDateTime DATETIME, @EndDateTime DATETIME)\nRETURNS VARCHAR(5)\nAS\nBEGIN\n    DECLARE @CurrentDate DATETIME\n    DECLARE @BusinessHours INT\n    SET @CurrentDate = @StartDateTime\n    SET @BusinessHours = 0\n\n    WHILE @CurrentDate < @EndDateTime\n    BEGIN\n        IF dbo.IsWeekend(@CurrentDate) = 0\n        BEGIN\n            -- Check if the current time is within business hours\n            IF DATEPART(HOUR, @CurrentDate) >= 8 AND DATEPART(HOUR, @CurrentDate) < 16\n            BEGIN\n                -- Calculate the business minutes\n                IF @CurrentDate >= @StartDateTime AND @CurrentDate < @EndDateTime\n                BEGIN\n                    SET @BusinessHours = @BusinessHours + 1\n                END\n            END\n        END\n\n        -- Move to the next hour\n        SET @CurrentDate = DATEADD(HOUR, 1, @CurrentDate)\n    END\n\n    -- Convert business hours to HH:MM format\n    RETURN CAST(@BusinessHours / 60 AS VARCHAR(2)) + ':' + RIGHT('0' + CAST(@BusinessHours % 60 AS VARCHAR(2)), 2)\nEND\n\n-- Example usage\nSELECT dbo.CalculateBusinessHours(@StartDateTime, @EndDateTime) AS Reaction_Time