-- Procedure to adjust the next run date\nCREATE OR REPLACE PROCEDURE adjust_next_run_date IS\n    v_job_name VARCHAR2(30) := 'YOUR_JOB_NAME';\n    v_next_run_date TIMESTAMP;\n    v_current_date DATE := SYSDATE;\nBEGIN\n    -- Get the current next_run_date of the job\n    SELECT next_run_date INTO v_next_run_date\n    FROM dba_scheduler_jobs\n    WHERE job_name = v_job_name;\n    \n    -- Compare with the system date and adjust if necessary\n    IF v_next_run_date < v_current_date THEN\n        DBMS_SCHEDULER.SET_ATTRIBUTE(\n            name => v_job_name,\n            attribute => 'next_run_date',\n            value => v_current_date + INTERVAL '1' MINUTE\n        );\n    END IF;\nEXCEPTION\n    WHEN NO_DATA_FOUND THEN\n        DBMS_OUTPUT.PUT_LINE('Job not found: ' || v_job_name);\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);\nEND adjust_next_run_date;\n/\n\n-- Auxiliary job to monitor the system date change and adjust next_run_date\nBEGIN\n    DBMS_SCHEDULER.CREATE_JOB(\n        job_name        => 'check_system_date_job',\n        job_type        => 'PLSQL_BLOCK',\n        job_action      => 'BEGIN adjust_next_run_date; END;',\n        start_date      => SYSTIMESTAMP,\n        repeat_interval => 'FREQ=MINUTELY; INTERVAL=10', -- Adjust the interval as needed\n        enabled         => TRUE\n    );\nEND;\n/