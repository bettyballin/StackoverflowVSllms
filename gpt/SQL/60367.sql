CREATE TABLE audit_log (\n       id SERIAL PRIMARY KEY,\n       table_name TEXT NOT NULL,\n       operation CHAR(1) NOT NULL, -- 'I' for insert, 'U' for update, 'D' for delete\n       old_data JSONB,\n       new_data JSONB,\n       changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n       changed_by TEXT -- user performing the change\n   );\n\n   CREATE OR REPLACE FUNCTION log_changes() RETURNS TRIGGER AS $$\n   BEGIN\n       IF TG_OP = 'INSERT' THEN\n           INSERT INTO audit_log (table_name, operation, new_data, changed_by)\n           VALUES (TG_TABLE_NAME, 'I', row_to_json(NEW), current_user);\n           RETURN NEW;\n       ELSIF TG_OP = 'UPDATE' THEN\n           INSERT INTO audit_log (table_name, operation, old_data, new_data, changed_by)\n           VALUES (TG_TABLE_NAME, 'U', row_to_json(OLD), row_to_json(NEW), current_user);\n           RETURN NEW;\n       ELSIF TG_OP = 'DELETE' THEN\n           INSERT INTO audit_log (table_name, operation, old_data, changed_by)\n           VALUES (TG_TABLE_NAME, 'D', row_to_json(OLD), current_user);\n           RETURN OLD;\n       END IF;\n   END;\n   $$ LANGUAGE plpgsql;\n\n   CREATE TRIGGER audit_trigger\n   AFTER INSERT OR UPDATE OR DELETE ON your_table_name\n   FOR EACH ROW EXECUTE FUNCTION log_changes();