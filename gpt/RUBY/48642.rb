class Translator\n  def initialize(sexp)\n    @sexp = sexp\n  end\n\n  def translate\n    process(@sexp)\n  end\n\n  private\n\n  def process(exp)\n    return unless exp.is_a?(Array)\n\n    case exp[0]\n    when :program\n      exp[1].map { |e| process(e) }.join("\n")\n    when :method_add_block\n      method = process(exp[1])\n      block = process(exp[2])\n      "#{method} { #{block} }"\n    when :call\n      receiver = process(exp[1])\n      method = exp[2][1]\n      args = exp[3][1..-1].map { |arg| process(arg) }.join(', ')\n      "#{receiver}.#{method}(#{args})"\n    when :do_block\n      params = exp[1][1][1].map { |param| param[1] }.join(', ')\n      body = exp[2].map { |e| process(e) }.join('; ')\n      "|#{params}| #{body}"\n    when :binary\n      left = process(exp[1])\n      operator = exp[2]\n      right = process(exp[3])\n      "#{left} #{operator} #{right}"\n    when :var_ref\n      exp[1][1]\n    when :int\n      exp[1]\n    else\n      "UNKNOWN"\n    end\n  end\nend\n\ntranslator = Translator.new(parsed_sexp)\nputs translator.translate