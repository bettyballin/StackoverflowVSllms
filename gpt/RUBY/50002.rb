class Calendar\n  def initialize(user)\n    @user = user\n  end\n\n  def events_for_date_range(start_date, end_date)\n    events = Event.where(user: @user)\n    instances = []\n\n    events.each do |event|\n      recurrences = event.recurrences\n      recurrences.each do |recurrence|\n        instances.concat(generate_instances(event, recurrence, start_date, end_date))\n      end\n    end\n\n    instances\n  end\n\n  private\n\n  def generate_instances(event, recurrence, start_date, end_date)\n    instances = []\n    current_date = recurrence.start_date\n\n    while current_date <= end_date\n      break if recurrence.end_date && current_date > recurrence.end_date\n\n      if current_date >= start_date && !exception_for_date?(event, current_date)\n        instances << build_event_instance(event, current_date)\n      end\n\n      current_date = next_occurrence_date(current_date, recurrence)\n    end\n\n    instances\n  end\n\n  def next_occurrence_date(current_date, recurrence)\n    case recurrence.frequency\n    when 'daily'\n      current_date + recurrence.interval.days\n    when 'weekly'\n      current_date + recurrence.interval.weeks\n    when 'monthly'\n      current_date + recurrence.interval.months\n    else\n      current_date\n    end\n  end\n\n  def exception_for_date?(event, date)\n    event.exceptions.exists?(occurrence_date: date)\n  end\n\n  def build_event_instance(event, date)\n    # Build an instance of the event for the given date\n    {\n      title: event.title,\n      description: event.description,\n      location: event.location,\n      date: date\n    }\n  end\nend