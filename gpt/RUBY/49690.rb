# Gemfile\ngem 'rack-attack'\n\n# config/application.rb\nmodule YourApp\n  class Application < Rails::Application\n    config.middleware.use Rack::Attack\n  end\nend\n\n# config/initializers/rack_attack.rb\nclass Rack::Attack\n  # Throttle requests to 5 requests per minute per IP\n  throttle('req/ip', limit: 5, period: 1.minute) do |req|\n    req.ip\n  end\n\n  # Return a custom response for throttled requests\n  self.throttled_response = lambda do |env|\n    now = Time.now.utc\n    headers = {\n      'Content-Type' => 'application/json',\n      'Retry-After' => (env['rack.attack.match_data'] || {})[:period].to_s,\n      'X-RateLimit-Limit' => '5',\n      'X-RateLimit-Remaining' => '0',\n      'X-RateLimit-Reset' => (now + (env['rack.attack.match_data'] || {})[:period]).to_s\n    }\n\n    [429, headers, [{ error: 'Rate limit exceeded' }.to_json]]\n  end\n\n  # Blocklist specific IP addresses (optional example)\n  blocklist('block 1.2.3.4') do |req|\n    '1.2.3.4' == req.ip\n  end\nend\n\n# Maintenance mode middleware\nclass MaintenanceMode\n  def initialize(app)\n    @app = app\n  end\n\n  def call(env)\n    if ENV['MAINTENANCE_MODE'] == 'on'\n      [503, { 'Content-Type' => 'application/json' }, [{ error: 'Service temporarily unavailable due to maintenance' }.to_json]]\n    else\n      @app.call(env)\n    end\n  end\nend\n\n# config/application.rb\nmodule YourApp\n  class Application < Rails::Application\n    config.middleware.use MaintenanceMode\n  end\nend