require 'thread'\n\nmutex = Mutex.new\ncondition = ConditionVariable.new\n\n# Shared resource\nshared_resource = []\n\n# Producer thread\nproducer = Thread.new do\n  mutex.synchronize do\n    # Produce an item\n    shared_resource << 'item'\n    puts "Produced an item"\n    # Notify the consumer thread\n    condition.signal\n  end\nend\n\n# Consumer thread\nconsumer = Thread.new do\n  mutex.synchronize do\n    while shared_resource.empty?\n      puts "Consumer waiting for an item"\n      # Wait for the producer to produce an item\n      condition.wait(mutex)\n    end\n    # Consume the item\n    item = shared_resource.pop\n    puts "Consumed: #{item}"\n  end\nend\n\n# Join threads to ensure they complete\nproducer.join\nconsumer.joi