class User < ApplicationRecord\n  attr_accessor :remember_token\n\n  # Generates a random token\n  def self.new_token\n    SecureRandom.urlsafe_base64\n  end\n\n  # Creates a digest of the token\n  def self.digest(token)\n    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST : BCrypt::Engine.cost\n    BCrypt::Password.create(token, cost: cost)\n  end\n\n  # Remembers a user in the database for use in persistent sessions\n  def remember\n    self.remember_token = User.new_token\n    update_attribute(:remember_digest, User.digest(remember_token))\n  end\n\n  # Forgets a user (deletes the remember digest)\n  def forget\n    update_attribute(:remember_digest, nil)\n  end\n\n  # Returns true if the given token matches the digest\n  def authenticated?(remember_token)\n    return false if remember_digest.nil?\n    BCrypt::Password.new(remember_digest).is_password?(remember_token)\n  end\nend