<?xml version="1.0" encoding="UTF-8"?>\n<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">\n\n  <!-- Entry point -->\n  <xsl:template match="/">\n    <xsl:variable name="input" select="'Example Input String: 123/!@#'" />\n    <xsl:variable name="output">\n      <xsl:call-template name="process-string">\n        <xsl:with-param name="input" select="$input" />\n      </xsl:call-template>\n    </xsl:variable>\n    <xsl:value-of select="$output" />\n  </xsl:template>\n\n  <!-- Template to process the entire string -->\n  <xsl:template name="process-string">\n    <xsl:param name="input" />\n    <xsl:param name="output" select="''" />\n    <xsl:choose>\n      <xsl:when test="string-length($input) = 0">\n        <xsl:value-of select="$output" />\n      </xsl:when>\n      <xsl:otherwise>\n        <xsl:variable name="first-char" select="substring($input, 1, 1)" />\n        <xsl:variable name="remaining-chars" select="substring($input, 2)" />\n        <xsl:variable name="new-char">\n          <xsl:choose>\n            <!-- Check if the first character is valid for the first position -->\n            <xsl:when test="$output = '' and ($first-char = ':' or $first-char = '_' or ($first-char >= 'a' and $first-char <= 'z') or ($first-char >= 'A' and $first-char <= 'Z'))">\n              <xsl:value-of select="$first-char" />\n            </xsl:when>\n            <!-- Check if the character is valid for subsequent positions -->\n            <xsl:when test="$output != '' and ($first-char = ':' or $first-char = '_' or ($first-char >= 'a' and $first-char <= 'z') or ($first-char >= 'A' and $first-char <= 'Z') or ($first-char >= '0' and $first-char <= '9') or $first-char = '.' or $first-char = '-')">\n              <xsl:value-of select="$first-char" />\n            </xsl:when>\n            <!-- Replace invalid character with underscore -->\n            <xsl:otherwise>_</xsl:otherwise>\n          </xsl:choose>\n        </xsl:variable>\n        <!-- Recursive call to process the remaining string -->\n        <xsl:call-template name="process-string">\n          <xsl:with-param name="input" select="$remaining-chars" />\n          <xsl:with-param name="output" select="concat($output, $new-char)" />\n        </xsl:call-template>\n      </xsl:otherwise>\n    </xsl:choose>\n  </xsl:template>\n\n</xsl:stylesheet>