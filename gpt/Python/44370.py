class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\nclass Bin:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n        self.rectangles = []\n        self.free_rectangles = [(0, 0, width, height)]\n\n    def place_rectangle(self, rectangle):\n        for i, (fx, fy, fw, fh) in enumerate(self.free_rectangles):\n            if rectangle.width <= fw and rectangle.height <= fh:\n                self.rectangles.append((fx, fy, rectangle))\n                del self.free_rectangles[i]\n                self.free_rectangles.append((fx + rectangle.width, fy, fw - rectangle.width, rectangle.height))\n                self.free_rectangles.append((fx, fy + rectangle.height, fw, fh - rectangle.height))\n                self.free_rectangles = [r for r in self.free_rectangles if r[2] > 0 and r[3] > 0]\n                return True\n        return False\n\ndef pack_rectangles(rectangles, bin_width, bin_height):\n    bin = Bin(bin_width, bin_height)\n    for rectangle in rectangles:\n        if not bin.place_rectangle(rectangle):\n            raise ValueError("Rectangle does not fit in the bin")\n    return bin.rectangles\n\n# Example usage:\nrectangles = [Rectangle(100, 200), Rectangle(300, 400), Rectangle(150, 150)]\nbin_width = 1024\nbin_height = 1024\n\npacked_rectangles = pack_rectangles(rectangles, bin_width, bin_height)\nfor x, y, rect in packed_rectangles:\n    print(f"Rectangle at ({x}, {y}) with width {rect.width} and height {rect.height}")