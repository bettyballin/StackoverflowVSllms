class PatriciaTrieNode:\n        def __init__(self, key=''):\n            self.key = key\n            self.children = {}\n            self.is_end_of_word = False\n\n    class PatriciaTrie:\n        def __init__(self):\n            self.root = PatriciaTrieNode()\n\n        def insert(self, word):\n            node = self.root\n            while word:\n                for child in node.children.values():\n                    common_prefix = self._common_prefix(word, child.key)\n                    if common_prefix:\n                        if common_prefix == child.key:\n                            word = word[len(common_prefix):]\n                            node = child\n                            break\n                        else:\n                            # Split the node\n                            new_node = PatriciaTrieNode(common_prefix)\n                            new_node.children[child.key[len(common_prefix):]] = child\n                            node.children[common_prefix] = new_node\n                            child.key = child.key[len(common_prefix):]\n                            word = word[len(common_prefix):]\n                            node = new_node\n                            break\n                else:\n                    # Add a new node\n                    node.children[word] = PatriciaTrieNode(word)\n                    node.children[word].is_end_of_word = True\n                    break\n\n        def _common_prefix(self, str1, str2):\n            min_len = min(len(str1), len(str2))\n            for i in range(min_len):\n                if str1[i] != str2[i]:\n                    return str1[:i]\n            return str1[:min_len]\n\n        def search(self, word):\n            node = self.root\n            while word:\n                matched = False\n                for child in node.children.values():\n                    if word.startswith(child.key):\n                        word = word[len(child.key):]\n                        node = child\n                        matched = True\n                        break\n                if not matched:\n                    return False\n            return node.is_end_of_word