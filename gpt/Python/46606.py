import json\nimport socket\n\nclass BookDBProxy(BookDB):\n    def __init__(self, socket):\n        self.socket = socket\n\n    def get_book(self, book_id: int) -> 'Book':\n        request = json.dumps({'method': 'get_book', 'params': {'book_id': book_id}})\n        self.socket.sendall(request.encode('utf-8'))\n        response = json.loads(self.socket.recv(1024).decode('utf-8'))\n        return BookProxy(self.socket, response['result'])\n\n    def new_book(self) -> 'Book':\n        request = json.dumps({'method': 'new_book', 'params': {}})\n        self.socket.sendall(request.encode('utf-8'))\n        response = json.loads(self.socket.recv(1024).decode('utf-8'))\n        return BookProxy(self.socket, response['result'])\n\nclass BookProxy(Book):\n    def __init__(self, socket, book_id: int):\n        self.socket = socket\n        self.book_id = book_id\n\n    @property\n    def title(self):\n        request = json.dumps({'method': 'get_title', 'params': {'book_id': self.book_id}})\n        self.socket.sendall(request.encode('utf-8'))\n        response = json.loads(self.socket.recv(1024).decode('utf-8'))\n        return response['result']\n\n    @title.setter\n    def title(self, value):\n        request = json.dumps({'method': 'set_title', 'params': {'book_id': self.book_id, 'title': value}})\n        self.socket.sendall(request.encode('utf-8'))\n\n    def save(self):\n        request = json.dumps({'method': 'save', 'params': {'book_id': self.book_id}})\n        self.socket.sendall(request.encode('utf-8'))