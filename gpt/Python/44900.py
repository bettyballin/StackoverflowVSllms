import itertools\n\n# Define available bills and coins\nbills = [5, 10, 20, 50, 100]\ncoins = [0.05, 0.10, 0.25]\n\ndef get_possible_payments(A):\n    possible_payments = set()\n\n    # Add multiples of bills as potential payments\n    for num_bills in range(1, 11):  # Limit the number of bills for practicality\n        for combination in itertools.combinations_with_replacement(bills, num_bills):\n            payment = sum(combination)\n            if payment >= A:\n                possible_payments.add(payment)\n    \n    # Add multiples of coins to the potential payments\n    for num_coins in range(1, 21):  # Limit the number of coins for practicality\n        for combination in itertools.combinations_with_replacement(coins, num_coins):\n            payment = sum(combination)\n            if payment >= A:\n                possible_payments.add(payment)\n    \n    # Add combinations of bills and coins\n    for bill_comb in itertools.combinations_with_replacement(bills, 10):  # Limit for practicality\n        bill_sum = sum(bill_comb)\n        for coin_comb in itertools.combinations_with_replacement(coins, 20):  # Limit for practicality\n            total_payment = bill_sum + sum(coin_comb)\n            if total_payment >= A:\n                possible_payments.add(total_payment)\n\n    # Return sorted list of unique possible payments\n    return sorted(possible_payments)\n\n# Example usage\nA1 = 151.24\nA2 = 22.65\nA3 = 0.95\n\nprint(f"Possible payments for ${A1}: {get_possible_payments(A1)}")\nprint(f"Possible payments for ${A2}: {get_possible_payments(A2)}")\nprint(f"Possible payments for ${A3}: {get_possible_payments(A3)}")