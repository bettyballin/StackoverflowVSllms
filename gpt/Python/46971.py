from collections import defaultdict, deque\nfrom itertools import permutations\n\nclass TrieNode:\n    def __init__(self):\n        self.children = defaultdict(TrieNode)\n        self.is_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n        \n    def insert(self, word):\n        node = self.root\n        for char in word:\n            node = node.children[char]\n        node.is_word = True\n        \n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return node.is_word\n    \n    def starts_with(self, prefix):\n        node = self.root\n        for char in prefix:\n            if char not in node.children:\n                return None\n            node = node.children[char]\n        return node\n\ndef build_trie(dictionary):\n    trie = Trie()\n    for word in dictionary:\n        trie.insert(word)\n    return trie\n\ndef find_max_words(letters, trie):\n    letters = sorted(letters)\n    memo = {}\n    \n    def dp(available_letters):\n        if tuple(available_letters) in memo:\n            return memo[tuple(available_letters)]\n        \n        max_words = []\n        for i in range(len(available_letters)):\n            new_letters = available_letters[:i] + available_letters[i+1:]\n            node = trie.starts_with(available_letters[:i+1])\n            if node:\n                if node.is_word:\n                    current_word = ''.join(available_letters[:i+1])\n                    result = dp(new_letters)\n                    max_words = max(max_words, [current_word] + result, key=len)\n                else:\n                    result = dp(new_letters)\n                    max_words = max(max_words, result, key=len)\n        \n        memo[tuple(available_letters)] = max_words\n        return max_words\n    \n    return dp(letters)\n\n# Example usage\ndictionary = ["the", "there", "her", "here", "ere"]\nletters = ['e', 'e', 'h', 'r', 's', 't']\n\ntrie = build_trie(dictionary)\nmax_words = find_max_words(letters, trie)\n\nprint(f"Maximum words: {max_words}")