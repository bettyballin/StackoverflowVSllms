import os\n    import sqlite3\n    from mutagen.easyid3 import EasyID3\n    from mutagen.mp3 import MP3\n\n    def create_connection(db_file):\n        conn = None\n        try:\n            conn = sqlite3.connect(db_file)\n        except sqlite3.Error as e:\n            print(e)\n        return conn\n\n    def create_table(conn):\n        try:\n            sql_create_music_table = """CREATE TABLE IF NOT EXISTS music (\n                                            id INTEGER PRIMARY KEY,\n                                            filename TEXT NOT NULL,\n                                            format TEXT,\n                                            artist TEXT,\n                                            title TEXT,\n                                            album TEXT,\n                                            genre TEXT,\n                                            length INTEGER,\n                                            year INTEGER,\n                                            directory TEXT,\n                                            size INTEGER,\n                                            available BOOLEAN\n                                        );"""\n            c = conn.cursor()\n            c.execute(sql_create_music_table)\n        except sqlite3.Error as e:\n            print(e)\n\n    def add_file_to_db(conn, file_info):\n        sql = '''INSERT INTO music(filename, format, artist, title, album, genre, length, year, directory, size, available)\n                 VALUES(?,?,?,?,?,?,?,?,?,?,?)'''\n        cur = conn.cursor()\n        cur.execute(sql, file_info)\n        conn.commit()\n\n    def get_file_info(file_path):\n        try:\n            audio = MP3(file_path, ID3=EasyID3)\n            return (\n                os.path.basename(file_path),\n                os.path.splitext(file_path)[1][1:],  # format\n                audio.get('artist', ['Unknown'])[0],\n                audio.get('title', ['Unknown'])[0],\n                audio.get('album', ['Unknown'])[0],\n                audio.get('genre', ['Unknown'])[0],\n                int(audio.info.length),\n                audio.get('date', ['Unknown'])[0],\n                os.path.dirname(file_path),\n                os.path.getsize(file_path),\n                True\n            )\n        except Exception as e:\n            print(f"Error reading {file_path}: {e}")\n            return None\n\n    def main():\n        database = "music_library.db"\n        music_dir = "/path/to/music/collection"\n\n        conn = create_connection(database)\n        if conn is not None:\n            create_table(conn)\n            for root, dirs, files in os.walk(music_dir):\n                for file in files:\n                    if file.endswith(('.mp3', '.flac', '.wav', '.aac')):\n                        file_path = os.path.join(root, file)\n                        file_info = get_file_info(file_path)\n                        if file_info:\n                            add_file_to_db(conn, file_info)\n            conn.close()\n\n    if __name__ == '__main__':\n        main()