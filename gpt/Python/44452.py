class PermissionManager:\n    def __init__(self):\n        self.permission_map = {}\n        self.current_bit = 0\n\n    def add_permission(self, permission):\n        if permission not in self.permission_map:\n            if self.current_bit < 64:  # Assuming a 64-bit integer\n                self.permission_map[permission] = 1 << self.current_bit\n                self.current_bit += 1\n            else:\n                raise ValueError("Maximum number of permissions exceeded")\n\n    def generate_mask(self, permissions):\n        mask = 0\n        for perm in permissions:\n            if perm in self.permission_map:\n                mask |= self.permission_map[perm]\n        return mask\n\n    def has_permission(self, glob, permission):\n        if permission in self.permission_map:\n            test_mask = self.permission_map[permission]\n            return (glob & test_mask) == test_mask\n        return False\n\n# Example usage\npm = PermissionManager()\npm.add_permission("read")\npm.add_permission("write")\npm.add_permission("execute")\n\nuser_permissions = ["read", "write"]\nperm_glob = pm.generate_mask(user_permissions)\n\n# Check for a specific permission\nprint(pm.has_permission(perm_glob, "read"))     # True\nprint(pm.has_permission(perm_glob, "execute"))  # False