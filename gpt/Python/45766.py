def human_readable(n):\n    if n == 0:\n        return 'zero'\n\n    def one_to_19(n):\n        return ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', \n                'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', \n                'eighteen', 'nineteen'][n-1]\n\n    def tens(n):\n        return ['twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'][n-2]\n\n    def two_digits(n):\n        if n < 20:\n            return one_to_19(n)\n        else:\n            return tens(n // 10) + ('' if n % 10 == 0 else '-' + one_to_19(n % 10))\n\n    def three_digits(n):\n        return one_to_19(n // 100) + ' hundred' + ('' if n % 100 == 0 else ' and ' + two_digits(n % 100))\n\n    def chunk_number(n):\n        if n == 0:\n            return ''\n        elif n < 100:\n            return two_digits(n)\n        else:\n            return three_digits(n)\n\n    chunks = ['', ' thousand', ' million', ' billion']\n    words = []\n    chunk_counter = 0\n\n    while n > 0:\n        chunk = n % 1000\n        if chunk > 0:\n            words.append(chunk_number(chunk) + chunks[chunk_counter])\n        n //= 1000\n        chunk_counter += 1\n\n    return ', '.join(reversed(words)).strip()\n\n# Test cases\nprint(human_readable(1))               # one\nprint(human_readable(53))              # fifty-three\nprint(human_readable(723603))          # seven hundred and twenty-three thousand, six hundred and three\nprint(human_readable(1456376562))      # one billion, four hundred and fifty-six million, three hundred and seventy-six thousand, five hundred and sixty-two