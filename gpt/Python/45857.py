import numpy as np\n\ndef random_point_in_triangle(A, B, C):\n    r1, r2 = np.random.rand(2)\n    if r1 + r2 > 1:\n        r1 = 1 - r1\n        r2 = 1 - r2\n    random_point = A + r1 * (B - A) + r2 * (C - A)\n    return random_point\n\ndef random_point_in_polygon(vertices):\n    # Triangulate the polygon\n    triangles = []\n    for i in range(1, len(vertices) - 1):\n        triangles.append((vertices[0], vertices[i], vertices[i + 1]))\n    \n    # Choose a random triangle weighted by area\n    areas = [np.linalg.norm(np.cross(tri[1] - tri[0], tri[2] - tri[0])) / 2 for tri in triangles]\n    total_area = sum(areas)\n    probs = [area / total_area for area in areas]\n    \n    chosen_triangle = np.random.choice(len(triangles), p=probs)\n    A, B, C = triangles[chosen_triangle]\n    \n    return random_point_in_triangle(A, B, C)\n\n# Example usage:\nvertices = np.array([[0, 0], [1, 0], [1, 1], [0, 1]])\nprint(random_point_in_polygon(vertices))