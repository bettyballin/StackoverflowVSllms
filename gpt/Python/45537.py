import re\n\ndef is_valid_email(email):\n    # Basic regex to check the overall structure\n    pattern = r"^[^@\s]+@[^@\s]+\.[^@\s]+$"\n    if not re.match(pattern, email):\n        return False\n    \n    # Split the email into local part and domain part\n    local_part, domain_part = email.rsplit('@', 1)\n    \n    # Validate the local part\n    if not 1 <= len(local_part) <= 64:\n        return False\n    \n    # Validate the domain part\n    if not 1 <= len(domain_part) <= 255:\n        return False\n    \n    # Ensure domain part has at least one dot and valid characters\n    if not re.match(r"^[A-Za-z0-9.-]+\.[A-Za-z]{2,}$", domain_part):\n        return False\n    \n    # Optionally, check DNS records for the domain\n    # (This requires additional libraries like `dnspython` and is not shown here)\n    \n    return True\n\n# Example usage\nemail = "example@example.com"\nprint(is_valid_email(email))  # Output: True or False