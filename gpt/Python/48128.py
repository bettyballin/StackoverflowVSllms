def flood_fill(grid, x, y, color, visited):\n    rows, cols = len(grid), len(grid[0])\n    stack = [(x, y)]\n    region = []\n    \n    while stack:\n        cx, cy = stack.pop()\n        if (0 <= cx < rows and 0 <= cy < cols and\n            grid[cx][cy] == color and not visited[cx][cy]):\n            visited[cx][cy] = True\n            region.append((cx, cy))\n            # Add neighboring cells to the stack\n            stack.append((cx + 1, cy))\n            stack.append((cx - 1, cy))\n            stack.append((cx, cy + 1))\n            stack.append((cx, cy - 1))\n    \n    return region\n\ndef find_regions(grid):\n    if not grid:\n        return []\n    \n    rows, cols = len(grid), len(grid[0])\n    visited = [[False] * cols for _ in range(rows)]\n    regions = []\n    \n    for i in range(rows):\n        for j in range(cols):\n            if not visited[i][j]:\n                color = grid[i][j]\n                region = flood_fill(grid, i, j, color, visited)\n                if region:\n                    regions.append(region)\n    \n    return regions\n\n# Example usage\ngrid = [\n    [1, 1, 2, 2],\n    [1, 1, 2, 3],\n    [4, 4, 3, 3],\n    [4, 4, 4, 3]\n]\n\nregions = find_regions(grid)\nfor region in regions:\n    print(region)