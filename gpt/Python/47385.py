from collections import defaultdict, deque\n\nclass ExcelRecalculation:\n\n    def __init__(self):\n        self.cells = {}\n        self.dependencies = defaultdict(list)\n        self.dependents = defaultdict(list)\n    \n    def set_formula(self, cell, formula):\n        self.cells[cell] = formula\n        self._update_dependencies(cell, formula)\n    \n    def _update_dependencies(self, cell, formula):\n        # Clear existing dependencies\n        for dep in self.dependencies[cell]:\n            self.dependents[dep].remove(cell)\n        self.dependencies[cell] = []\n\n        # Find new dependencies\n        for token in formula.split():\n            if token.isalpha():\n                self.dependencies[cell].append(token)\n                self.dependents[token].append(cell)\n    \n    def recalculate(self):\n        topo_order = self._topological_sort()\n        for cell in topo_order:\n            if cell in self.cells:\n                self.cells[cell] = self._evaluate_formula(self.cells[cell])\n\n    def _topological_sort(self):\n        in_degree = {cell: 0 for cell in self.cells}\n        for cell in self.dependencies:\n            for dep in self.dependencies[cell]:\n                in_degree[dep] += 1\n        \n        queue = deque([cell for cell in self.cells if in_degree[cell] == 0])\n        topo_order = []\n\n        while queue:\n            cell = queue.popleft()\n            topo_order.append(cell)\n            for dep in self.dependents[cell]:\n                in_degree[dep] -= 1\n                if in_degree[dep] == 0:\n                    queue.append(dep)\n        \n        return topo_order\n\n    def _evaluate_formula(self, formula):\n        # For simplicity, just return the formula itself\n        # Implement actual formula evaluation logic here\n        return formula\n\n# Example usage\nexcel = ExcelRecalculation()\nexcel.set_formula('A1', 'B1 + C1')\nexcel.set_formula('B1', '5')\nexcel.set_formula('C1', '3')\nexcel.recalculate()\nprint(excel.cells)  # Output would show recalculated values