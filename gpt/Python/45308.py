from html.parser import HTMLParser\nfrom django import forms\n\nclass MyForm(forms.Form):\n    field1 = forms.CharField(max_length=100)\n    field2 = forms.IntegerField()\n\nclass FormParser(HTMLParser):\n    def __init__(self, form_name=None):\n        super().__init__()\n        self.form_name = form_name\n        self.current_form = None\n        self.in_form = False\n        self.data = {}\n\n    def handle_starttag(self, tag, attrs):\n        attrs = dict(attrs)\n        if tag == 'form':\n            if self.form_name is None or attrs.get('name') == self.form_name:\n                self.in_form = True\n        if self.in_form and tag == 'input':\n            name = attrs.get('name')\n            value = attrs.get('value', '')\n            if name:\n                self.data[name] = value\n\n    def handle_endtag(self, tag):\n        if tag == 'form' and self.in_form:\n            self.in_form = False\n\ndef parse_form(html_source, form_class, form_name=None):\n    parser = FormParser(form_name)\n    parser.feed(html_source)\n    form_data = parser.data\n    form_instance = form_class(data=form_data)\n    return form_instance\n\nhtml_source = '''\n<form name="myform">\n  <input type="text" name="field1" value="test1">\n  <input type="number" name="field2" value="123">\n</form>\n'''\n\nform_instance = parse_form(html_source, MyForm, form_name="myform")\n\nif form_instance.is_valid():\n    print("Form is valid")\n    print(form_instance.cleaned_data)\nelse:\n    print("Form is not valid")\n    print(form_instance.errors)