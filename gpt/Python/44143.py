class TreeNode:\n    def __init__(self, move):\n        self.move = move\n        self.children = {}\n        self.end_of_sequence = False\n        self.small_effect = None\n        self.big_effect = None\n\nclass MoveTree:\n    def __init__(self):\n        self.root = TreeNode(None)\n\n    def add_sequence(self, sequence, small_effect, big_effect):\n        current_node = self.root\n        for move in sequence:\n            if move not in current_node.children:\n                current_node.children[move] = TreeNode(move)\n            current_node = current_node.children[move]\n        current_node.end_of_sequence = True\n        current_node.small_effect = small_effect\n        current_node.big_effect = big_effect\n\n    def perform_moves(self, moves):\n        current_node = self.root\n        for move in moves:\n            if move in current_node.children:\n                current_node = current_node.children[move]\n                if current_node.small_effect:\n                    current_node.small_effect()\n            else:\n                print("Invalid sequence")\n                return\n        if current_node.end_of_sequence and current_node.big_effect:\n            current_node.big_effect()\n\n# Example usage:\ndef small_effect():\n    print("Small effect")\n\ndef big_effect():\n    print("Big effect")\n\nmove_tree = MoveTree()\nmove_tree.add_sequence(["move1", "move2", "move3"], small_effect, big_effect)\n\nmove_tree.perform_moves(["move1", "move2", "move3"])