def is_acyclic_dfs(graph):\n    def dfs(v):\n        if visited[v] == -1:  # Node is being visited and is in the recursion stack\n            return False\n        if visited[v] == 1:  # Node has already been visited\n            return True\n        \n        visited[v] = -1  # Mark node as being visited\n        for neighbor in graph[v]:\n            if not dfs(neighbor):\n                return False\n        \n        visited[v] = 1  # Mark node as fully visited\n        return True\n\n    visited = {u: 0 for u in graph}  # 0 = unvisited, 1 = visited, -1 = visiting\n    for node in graph:\n        if visited[node] == 0:\n            if not dfs(node):\n                return False\n    return True\n\n# Example usage\ngraph = {\n    0: [1],\n    1: [2],\n    2: [3],\n    3: []\n}\n\nprint(is_acyclic_dfs(graph))  # Output: True