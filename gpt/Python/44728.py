def initialize(key):\n    """\n    Use key to setup subkeys -- requires 521 encryptions\n    to set p and s boxes. key is a hex number corresponding\n    to a string of 32 up to 448 1s and 0s -- keylen says\n    how long\n    """\n    # Note that parray and sboxes are globals that have been pre-initialized.\n\n    hexkey = hex(key)[2:]\n    if hexkey[-1] == 'L':\n        hexkey = hexkey[:-1]\n\n    if len(hexkey) % 2 == 1:\n        hexkey = '0' + hexkey\n\n    lenkey = len(hexkey) // 8\n    if lenkey == 0:\n        pos = 0\n\n    # XOR key segments with P-boxes\n    for i in range(18):\n        if lenkey > 0:\n            pos = (i % lenkey) * 8  # offset into key gives subkey\n        subkey = int(hexkey[pos:pos + 8], 16)\n        parray[i] ^= subkey  # immediate XOR -- Python 2.0+ syntax\n\n    # encrypt 0-data, then keep re-encrypting and reassigning P-boxes\n    output = 0\n    for i in range(0, 17, 2):\n        output = bfencrypt(output)\n        parray[i], parray[i + 1] = output >> 32, output & 0xFFFFFFFF\n\n    # re-encrypt and reassign through all the S-boxes\n    for i in range(4):\n        for j in range(0, 255, 2):\n            output = bfencrypt(output)\n            sbox[i][j], sbox[i][j + 1] = output >> 32, output & 0xFFFFFFFF\n\n    # print "Initialization complete"