import numpy as np\nfrom scipy.optimize import linear_sum_assignment\n\n# Example data\npeople = ['A', 'B', 'C']\nevents = ['Aug 1', 'Aug 8', 'Aug 15']\n\n# Availability matrix (1 if available, 0 if not)\navailability = np.array([\n    [1, 1, 0],  # Person A availability\n    [1, 0, 1],  # Person B availability\n    [1, 1, 1]   # Person C availability\n])\n\n# Priority cost (how many times they can attend)\npriority_cost = np.array([1000, 500, 200])  # Lower cost for more available people\n\n# Base cost matrix (high cost for unavailable slots)\nbase_cost = np.where(availability == 1, 100, 10000)\n\n# Calculate the composite cost matrix\ncomposite_cost = base_cost + np.tile(priority_cost, (len(events), 1)).T\n\n# Apply Hungarian algorithm (linear_sum_assignment from scipy)\nrow_ind, col_ind = linear_sum_assignment(composite_cost)\n\n# Output the assignment\nassignments = list(zip(row_ind, col_ind))\nfor person_index, event_index in assignments:\n    print(f'Person {people[person_index]} assigned to Event {events[event_index]}')