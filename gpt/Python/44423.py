import time\nfrom collections import deque\n\nclass DataFlowMonitor:\n    def __init__(self):\n        self.data = deque()\n        self.total_size = 0\n\n    def on_recv(self, size):\n        current_time = time.time()\n        self.data.append((current_time, size))\n        self.total_size += size\n        self._cleanup(current_time)\n\n    def _cleanup(self, current_time):\n        while self.data and current_time - self.data[0][0] > 1:\n            _, size = self.data.popleft()\n            self.total_size -= size\n\n    def get_median_speed(self):\n        current_time = time.time()\n        self._cleanup(current_time)\n        \n        if not self.data:\n            return 0\n        \n        speeds = [(size / (current_time - timestamp)) for timestamp, size in self.data]\n        speeds.sort()\n        n = len(speeds)\n        \n        if n % 2 == 1:\n            return speeds[n // 2]\n        else:\n            return (speeds[n // 2 - 1] + speeds[n // 2]) / 2\n\n# Example usage\nmonitor = DataFlowMonitor()\n\n# Simulating data reception\nmonitor.on_recv(500)\ntime.sleep(0.1)\nmonitor.on_recv(300)\ntime.sleep(0.4)\nmonitor.on_recv(200)\n\nprint(monitor.get_median_speed())