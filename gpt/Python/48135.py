from collections import deque, defaultdict\n\ndef topological_sort_bfs(graph):\n    # Calculate in-degrees of all nodes\n    in_degree = {node: 0 for node in graph}\n    for node in graph:\n        for neighbor in graph[node]:\n            in_degree[neighbor] += 1\n    \n    # Collect nodes with no incoming edges\n    queue = deque([node for node in graph if in_degree[node] == 0])\n    sorted_nodes = []\n    \n    while queue:\n        node = queue.popleft()\n        sorted_nodes.append(node)\n        \n        # Decrease in-degree of neighboring nodes\n        for neighbor in graph[node]:\n            in_degree[neighbor] -= 1\n            # If in-degree becomes 0, add it to the queue\n            if in_degree[neighbor] == 0:\n                queue.append(neighbor)\n    \n    # Check if the graph has a cycle\n    if len(sorted_nodes) != len(graph):\n        raise ValueError("Graph has at least one cycle")\n    \n    return sorted_nodes\n\n# Example usage:\ngraph = {\n    'A': ['C'],\n    'B': ['C'],\n    'C': ['D'],\n    'D': [],\n    'E': ['A', 'B']\n}\n\nsorted_nodes = topological_sort_bfs(graph)\nprint("Topologically sorted nodes:", sorted_nodes)