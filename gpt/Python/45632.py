class Node:\n    def __init__(self, value=None, children=None):\n        self.value = value\n        self.children = children if children else []\n\ndef alpha_beta(node, alpha, beta, maximizing_player):\n    if not node.children:  # Leaf node\n        return node.value\n    \n    if maximizing_player:\n        value = float('-inf')\n        for child in node.children:\n            value = max(value, alpha_beta(child, alpha, beta, False))\n            alpha = max(alpha, value)\n            if alpha >= beta:\n                break  # Beta cut-off\n        return value\n    else:\n        value = float('inf')\n        for child in node.children:\n            value = min(value, alpha_beta(child, alpha, beta, True))\n            beta = min(beta, value)\n            if beta <= alpha:\n                break  # Alpha cut-off\n        return value\n\n# Example usage\nroot = Node(children=[\n    Node(children=[Node(value=3), Node(value=5), Node(value=6)]),\n    Node(children=[Node(value=2), Node(value=9), Node(value=1)]),\n    Node(children=[Node(value=4), Node(value=7), Node(value=8)])\n])\n\nalpha = float('-inf')\nbeta = float('inf')\nvalue = alpha_beta(root, alpha, beta, True)\nprint("Optimal value:", value)