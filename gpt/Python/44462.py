def find_recurring_digits(a, b):\n    # Initialize a dictionary to store the remainder positions\n    remainder_positions = {}\n    \n    # Initialize the result string\n    result = ""\n    \n    # Get the integer part of the division\n    integer_part = a // b\n    result += str(integer_part) + "."\n\n    # Get the initial remainder\n    remainder = a % b\n    \n    # Initialize the position counter\n    position = 0\n    \n    while remainder != 0:\n        # If the remainder has been seen before, it's recurring\n        if remainder in remainder_positions:\n            start = remainder_positions[remainder]\n            non_recurring = result[:start]\n            recurring = result[start:]\n            return f"{non_recurring}({recurring})"\n        \n        # Store the position of this remainder\n        remainder_positions[remainder] = len(result)\n        \n        # Multiply remainder by 10 for the next digit\n        remainder *= 10\n        \n        # Get the next digit\n        digit = remainder // b\n        result += str(digit)\n        \n        # Update the remainder\n        remainder %= b\n        \n        position += 1\n    \n    return result\n\n# Example usage\na = 22\nb = 7\nprint(find_recurring_digits(a, b))  # Output: "3.(142857)"