def rpn_to_infix(rpn_expression):\n    stack = []\n    operators = set(['+', '-', '*', '/'])\n\n    for token in rpn_expression.split():\n        if token not in operators:\n            stack.append(token)\n        else:\n            operand2 = stack.pop()\n            operand1 = stack.pop()\n            new_expr = f"({operand1} {token} {operand2})"\n            stack.append(new_expr)\n\n    return stack[0]\n\n# Example usage:\nrpn_expr = "3 4 + 2 * 7 /"\ninfix_expr = rpn_to_infix(rpn_expr)\nprint(infix_expr)  # Output: ((3 + 4) * 2) / 7