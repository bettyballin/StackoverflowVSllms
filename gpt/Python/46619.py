import random\n\nclass Banner:\n    def __init__(self, id, impressions_needed, clicks_needed, time_window, value):\n        self.id = id\n        self.impressions_needed = impressions_needed\n        self.clicks_needed = clicks_needed\n        self.time_window = time_window\n        self.value = value\n        self.impressions_served = 0\n        self.clicks_received = 0\n\n    def weight(self):\n        time_factor = 1 if self.time_window is None else self.time_window\n        impression_factor = (self.impressions_needed - self.impressions_served) / self.impressions_needed\n        click_factor = (self.clicks_needed - self.clicks_received) / self.clicks_needed if self.clicks_needed else 1\n        return self.value * impression_factor * click_factor / time_factor\n\ndef select_banner(banners):\n    total_weight = sum(banner.weight() for banner in banners)\n    if total_weight == 0:\n        return None  # No banner to show\n\n    random_weight = random.uniform(0, total_weight)\n    current_weight = 0\n    for banner in banners:\n        current_weight += banner.weight()\n        if current_weight >= random_weight:\n            return banner\n\n# Example banners\nbanners = [\n    Banner(id=1, impressions_needed=10000, clicks_needed=0, time_window=10, value=10000),\n    Banner(id=2, impressions_needed=1000, clicks_needed=0, time_window=None, value=100),\n    Banner(id=3, impressions_needed=10000, clicks_needed=1000, time_window=None, value=5000)\n]\n\nselected_banner = select_banner(banners)\nif selected_banner:\n    print(f"Selected Banner ID: {selected_banner.id}")\n    # Update the impressions served count\n    selected_banner.impressions_served += 1\nelse:\n    print("No banner to show")