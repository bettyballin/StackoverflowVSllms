def count_permutations_with_max_k_inversions(n, K):\n    # Initialize the DP table\n    dp = [[0 for _ in range(K + 1)] for _ in range(n + 1)]\n    dp[0][0] = 1  # Base case: one way to have zero elements with zero inversions\n\n    # Fill the DP table\n    for i in range(1, n + 1):\n        for k in range(K + 1):\n            dp[i][k] = 0\n            for j in range(i):\n                if k - j >= 0:\n                    dp[i][k] += dp[i - 1][k - j]\n\n    # Sum up the counts for all inversions from 0 to K\n    result = sum(dp[n][:K + 1])\n    return result\n\n# Example usage\nn = 4  # Length of the array\nK = 3  # Maximum number of inversions\nprint(count_permutations_with_max_k_inversions(n, K))