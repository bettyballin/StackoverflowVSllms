import heapq\nfrom collections import defaultdict\n\n# Step 1: Count the frequency of each word\ndef count_words(text):\n    word_count = defaultdict(int)\n    for word in text.split():\n        word_count[word.lower()] += 1\n    return word_count\n\n# Step 2: Use a heap to sort words by frequency\ndef sort_by_frequency(word_count):\n    # Create a list of tuples (-frequency, word) so we can use a min-heap\n    heap = [(-freq, word) for word, freq in word_count.items()]\n    heapq.heapify(heap)\n    \n    # Extract words from the heap in sorted order\n    sorted_words = []\n    while heap:\n        freq, word = heapq.heappop(heap)\n        sorted_words.append((word, -freq))\n    return sorted_words\n\n# Example usage\ntext = "a large document of text with many words where some words repeat more often than others"\nword_count = count_words(text)\nsorted_words = sort_by_frequency(word_count)\n\n# Output the sorted words by frequency\nfor word, freq in sorted_words:\n    print(f"{word}: {freq}")