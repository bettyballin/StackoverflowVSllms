from flask import Flask, request, render_template, redirect, url_for\nfrom itsdangerous import URLSafeTimedSerializer\nimport hashlib\nimport os\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key'\nserializer = URLSafeTimedSerializer(app.secret_key)\n\n# Simulated user database\nusers = {'user@example.com': hashlib.md5('current_password'.encode()).hexdigest()}\n\n# Simulated token storage\nreset_tokens = {}\n\n@app.route('/forgot-password', methods=['GET', 'POST'])\ndef forgot_password():\n    if request.method == 'POST':\n        email = request.form['email']\n        if email in users:\n            token = serializer.dumps(email, salt='password-reset-salt')\n            reset_tokens[email] = token\n            reset_link = url_for('reset_password', token=token, _external=True)\n            # Send email with reset_link (omitted for brevity)\n            print(f"Password reset link: {reset_link}")\n        return 'Check your email for a password reset link'\n    return render_template('forgot_password.html')\n\n@app.route('/reset-password/<token>', methods=['GET', 'POST'])\ndef reset_password(token):\n    try:\n        email = serializer.loads(token, salt='password-reset-salt', max_age=3600)\n    except Exception as e:\n        return 'The reset link is invalid or has expired.'\n\n    if request.method == 'POST':\n        new_password = request.form['new_password']\n        users[email] = hashlib.md5(new_password.encode()).hexdigest()\n        del reset_tokens[email]\n        return 'Your password has been reset successfully.'\n\n    return render_template('reset_password.html', token=token)\n\nif __name__ == '__main__':\n    app.run(debug=True)