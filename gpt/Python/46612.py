import os\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\nfrom cryptography.hazmat.primitives.hashes import SHA256\nfrom cryptography.hazmat.primitives.kdf.scrypt import Scrypt\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\nfrom cryptography.hazmat.primitives.kdf.scrypt import Scrypt\nfrom cryptography.hazmat.primitives.ciphers.aead import AESGCM\n\n# Constants\nSALT_SIZE = 16\nNONCE_SIZE = 12\nKEY_SIZE = 32  # 256-bit key\nITERATIONS = 100000\n\ndef derive_key(password: bytes, salt: bytes) -> bytes:\n    # Using PBKDF2HMAC for key derivation\n    kdf = PBKDF2HMAC(\n        algorithm=SHA256(),\n        length=KEY_SIZE,\n        salt=salt,\n        iterations=ITERATIONS,\n        backend=default_backend()\n    )\n    return kdf.derive(password)\n\ndef encrypt_file(password: str, plaintext: bytes) -> bytes:\n    password_bytes = password.encode()\n    salt = os.urandom(SALT_SIZE)\n    key = derive_key(password_bytes, salt)\n    nonce = os.urandom(NONCE_SIZE)\n    aesgcm = AESGCM(key)\n    ciphertext = aesgcm.encrypt(nonce, plaintext, None)\n    return salt + nonce + ciphertext\n\ndef decrypt_file(password: str, encrypted_data: bytes) -> bytes:\n    password_bytes = password.encode()\n    salt = encrypted_data[:SALT_SIZE]\n    nonce = encrypted_data[SALT_SIZE:SALT_SIZE + NONCE_SIZE]\n    ciphertext = encrypted_data[SALT_SIZE + NONCE_SIZE:]\n    key = derive_key(password_bytes, salt)\n    aesgcm = AESGCM(key)\n    return aesgcm.decrypt(nonce, ciphertext, None)\n\n# Example usage\npassword = "MyDifficultPassword"\ndata_to_encrypt = b"Sensitive data that needs encryption"\n\nencrypted_data = encrypt_file(password, data_to_encrypt)\nprint("Encrypted data:", encrypted_data)\n\ndecrypted_data = decrypt_file(password, encrypted_data)\nprint("Decrypted data:", decrypted_data)