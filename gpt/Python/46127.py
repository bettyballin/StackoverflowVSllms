class DiplomacyJudge:\n    def __init__(self, map_state):\n        self.map_state = map_state\n        self.orders = []\n\n    def add_order(self, order):\n        self.orders.append(order)\n\n    def resolve_orders(self):\n        self.resolve_convoys()\n        self.resolve_supports()\n        self.resolve_moves()\n        self.handle_retreats()\n\n    def resolve_convoys(self):\n        # Process and validate convoy orders\n        pass\n\n    def resolve_supports(self):\n        # Process support orders and calculate support strengths\n        pass\n\n    def resolve_moves(self):\n        # Resolve move orders based on strengths and conflicts\n        pass\n\n    def handle_retreats(self):\n        # Manage retreat orders for units that lost conflicts\n        pass\n\n# Example usage:\nmap_state = {}  # Populate with the initial state of the map\njudge = DiplomacyJudge(map_state)\n\n# Add orders (example)\njudge.add_order({'type': 'move', 'unit': 'A', 'from': 'Paris', 'to': 'Burgundy'})\njudge.add_order({'type': 'support', 'unit': 'F', 'from': 'Marseilles', 'to': 'Burgundy'})\n\n# Resolve orders at the end of the round\njudge.resolve_orders()\n\n# Updated map state\nprint(judge.map_state)