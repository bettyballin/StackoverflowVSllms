from collections import deque\n\ndef bfs_all_paths(graph, start, end):\n    queue = deque([(start, [start])])\n    paths = []\n    \n    while queue:\n        current, path = queue.popleft()\n        \n        for neighbor in graph[current]:\n            if neighbor == end:\n                paths.append(path + [neighbor])\n            else:\n                queue.append((neighbor, path + [neighbor]))\n    \n    return paths\n\n# Example graph as adjacency list\ngraph = {\n    1: [2, 3],\n    2: [4],\n    3: [4, 5],\n    4: [6],\n    5: [6, 7],\n    6: [7],\n    7: []\n}\n\n# Find all paths from 4 to 7\nall_paths = bfs_all_paths(graph, 4, 7)\nfor path in all_paths:\n    print(path)