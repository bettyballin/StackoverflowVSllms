from itertools import combinations\n\ndef is_clique(graph, vertices):\n    """\n    Check if the subset of vertices forms a clique in the graph.\n    \n    :param graph: 2D adjacency matrix representing the graph\n    :param vertices: List of vertices to be checked\n    :return: True if the vertices form a clique, False otherwise\n    """\n    for i in range(len(vertices)):\n        for j in range(i + 1, len(vertices)):\n            if not graph[vertices[i]][vertices[j]]:\n                return False\n    return True\n\ndef find_clique(graph, k):\n    """\n    Determine if there is a clique of size k in the graph.\n    \n    :param graph: 2D adjacency matrix representing the graph\n    :param k: Size of the clique to find\n    :return: True if a clique of size k exists, False otherwise\n    """\n    n = len(graph)\n    for vertices in combinations(range(n), k):\n        if is_clique(graph, vertices):\n            return True\n    return False\n\n# Example usage:\nG = [\n    [0, 1, 1, 1],\n    [1, 0, 1, 1],\n    [1, 1, 0, 1],\n    [1, 1, 1, 0]\n]\nk = 3\nprint(find_clique(G, k))  # Output: True