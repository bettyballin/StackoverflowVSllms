import heapq\n\nclass SwapRequest:\n    def __init__(self, priority, cell_a, cell_b):\n        self.priority = priority\n        self.cell_a = cell_a\n        self.cell_b = cell_b\n    \n    def __lt__(self, other):\n        return self.priority < other.priority\n\ndef process_swap_requests(swap_requests):\n    priority_queue = []\n    active_swaps = set()\n\n    for request in swap_requests:\n        heapq.heappush(priority_queue, request)\n\n    while priority_queue:\n        request = heapq.heappop(priority_queue)\n        cell_a = request.cell_a\n        cell_b = request.cell_b\n        swap_pair = tuple(sorted((cell_a, cell_b)))\n        \n        if swap_pair not in active_swaps:\n            active_swaps.add(swap_pair)\n            # Execute swap logic here\n            print(f"Swapping {cell_a} with {cell_b} with priority {request.priority}")\n\n# Example usage\nswap_requests = [\n    SwapRequest(1, 'A', 'B'),\n    SwapRequest(2, 'B', 'A'),\n    SwapRequest(3, 'C', 'D'),\n]\n\nprocess_swap_requests(swap_requests)