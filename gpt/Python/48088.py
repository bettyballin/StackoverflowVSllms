def counting_sort(arr, exp, base):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * base\n\n    # Count occurrences of each digit\n    for i in range(n):\n        index = (arr[i] // exp) % base\n        count[index] += 1\n\n    # Change count[i] so that count[i] now contains actual\n    # position of this digit in output array\n    for i in range(1, base):\n        count[i] += count[i - 1]\n\n    # Build the output array\n    for i in range(n - 1, -1, -1):\n        index = (arr[i] // exp) % base\n        output[count[index] - 1] = arr[i]\n        count[index] -= 1\n\n    # Copy the output array to arr, so that arr now\n    # contains sorted numbers according to current digit\n    for i in range(n):\n        arr[i] = output[i]\n\ndef radix_sort(arr):\n    n = len(arr)\n    base = n\n\n    # Find the maximum number to know the number of digits\n    max_num = max(arr)\n\n    # Do counting sort for every digit. Instead of passing the digit number,\n    # exp is passed. exp is base^i where i is current digit number\n    exp = 1\n    while max_num // exp > 0:\n        counting_sort(arr, exp, base)\n        exp *= base\n\n# Example usage\narr = [170, 45, 75, 90, 802, 24, 2, 66]\nradix_sort(arr)\nprint(arr)  # Output will be the sorted array