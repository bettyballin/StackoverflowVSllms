from django.core.paginator import Paginator\n    from django.shortcuts import render\n    from .models import Message\n\n    def custom_pagination_view(request):\n        messages = Message.objects.all().order_by('timestamp')\n        grouped_messages = group_messages(messages)\n        page_number = request.GET.get('page', 1)\n        paginated_messages = custom_paginate(grouped_messages, page_number, 15)  # 15 items per page\n        return render(request, 'your_template.html', {'messages': paginated_messages})\n\n    def group_messages(messages):\n        grouped = []\n        current_source = None\n        current_group = []\n\n        for message in messages:\n            if message.source == current_source:\n                current_group.append(message)\n            else:\n                if current_group:\n                    grouped.append(current_group)\n                current_group = [message]\n                current_source = message.source\n\n        if current_group:\n            grouped.append(current_group)\n\n        return grouped\n\n    def custom_paginate(grouped_messages, page_number, per_page):\n        flat_list = []\n        for group in grouped_messages:\n            flat_list.append(group)\n            if len(flat_list) >= per_page:\n                break\n\n        paginator = Paginator(flat_list, per_page)\n        return paginator.get_page(page_number)