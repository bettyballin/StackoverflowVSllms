import math\n\ndef find_critical_floor(n):\n    # Calculate the initial step size\n    k = math.ceil((-1 + math.sqrt(1 + 8 * n)) / 2)\n    current_floor = 0\n    previous_floor = 0\n    drops = 0\n\n    # Drop the first marble\n    while current_floor < n:\n        previous_floor = current_floor\n        current_floor += k\n        k -= 1\n        drops += 1\n        if current_floor >= n:  # Simulating the marble breaking\n            break\n\n    # Drop the second marble\n    for floor in range(previous_floor + 1, current_floor):\n        drops += 1\n        if floor >= n:  # Simulating the marble breaking\n            return floor, drops\n\n    return current_floor, drops\n\n# Example usage\nn = 100  # Number of floors\ncritical_floor, total_drops = find_critical_floor(n)\nprint(f"Critical floor: {critical_floor}, Total drops: {total_drops}")