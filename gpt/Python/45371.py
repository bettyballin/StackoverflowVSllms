import sqlite3\nfrom threading import Lock\n\nclass Database:\n    _instance = None\n    _lock = Lock()\n\n    def __new__(cls, *args, **kwargs):\n        if not cls._instance:\n            with cls._lock:\n                if not cls._instance:\n                    cls._instance = super(Database, cls).__new__(cls, *args, **kwargs)\n                    cls._instance._connection = cls._create_connection()\n        return cls._instance\n\n    @staticmethod\n    def _create_connection():\n        connection = sqlite3.connect('your_database.db')\n        return connection\n\n    def query(self, sql, params=None):\n        cursor = self._connection.cursor()\n        if params:\n            cursor.execute(sql, params)\n        else:\n            cursor.execute(sql)\n        result = cursor.fetchall()\n        cursor.close()\n        return result\n\n# Usage\ndb = Database()\nresult = db.query("SELECT * FROM users")\nprint(result)