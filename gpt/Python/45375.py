import numpy as np\n\ndef split_integer(x, n):\n    """Split integer x into n parts."""\n    str_x = str(x)\n    length = len(str_x)\n    part_size = (length + n - 1) // n  # Ceiling division\n    parts = [int(str_x[max(i * part_size, 0):min((i + 1) * part_size, length)]) for i in range(n)]\n    return parts\n\ndef recombine_integer(parts):\n    """Recombine parts into a single integer."""\n    return int(''.join(map(str, parts)))\n\ndef fft_multiply(a, b):\n    """Multiply large integers a and b using FFT."""\n    # Choose the number of parts\n    n = max(len(str(a)), len(str(b)))\n    \n    # Split the integers into parts\n    a_parts = split_integer(a, n)\n    b_parts = split_integer(b, n)\n    \n    # Apply FFT to the parts\n    fa = np.fft.fft(a_parts, n * 2)\n    fb = np.fft.fft(b_parts, n * 2)\n    \n    # Pointwise multiplication\n    fc = fa * fb\n    \n    # Inverse FFT\n    c_parts = np.fft.ifft(fc).real.round().astype(int)\n    \n    # Handle carry and recombine parts\n    carry = 0\n    result_parts = []\n    for part in c_parts:\n        part += carry\n        carry = part // 10**len(str(part))\n        result_parts.append(part % 10**len(str(part)))\n    \n    result = recombine_integer(result_parts)\n    \n    return result\n\n# Example usage\na = 12345678901234567890\nb = 98765432109876543210\nresult = fft_multiply(a, b)\nprint(result)