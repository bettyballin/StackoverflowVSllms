class Product:\n    def __init__(self, name):\n        self.name = name\n        self.rating = 1500  # Default rating for all products\n\ndef calculate_expected_score(rating1, rating2):\n    return 1 / (1 + 10 ** ((rating2 - rating1) / 400))\n\ndef update_ratings(product1, product2, score1, score2):\n    expected1 = calculate_expected_score(product1.rating, product2.rating)\n    expected2 = calculate_expected_score(product2.rating, product1.rating)\n\n    k = 32  # K-factor, can be tuned\n    product1.rating += k * (score1 - expected1)\n    product2.rating += k * (score2 - expected2)\n\ndef process_feedback(feedbacks):\n    products = {}\n    \n    for feedback in feedbacks:\n        items = feedback.split(" - ")\n        scores = []\n        for item in items:\n            name, score = item.split(" ")\n            if name not in products:\n                products[name] = Product(name)\n            scores.append((products[name], int(score)))\n\n        for i in range(len(scores)):\n            for j in range(i + 1, len(scores)):\n                score1 = scores[i][1]\n                score2 = scores[j][1]\n                if score1 > score2:\n                    update_ratings(scores[i][0], scores[j][0], 1, 0)\n                elif score1 < score2:\n                    update_ratings(scores[i][0], scores[j][0], 0, 1)\n                else:\n                    update_ratings(scores[i][0], scores[j][0], 0.5, 0.5)\n\n    return sorted(products.values(), key=lambda p: p.rating, descending=True)\n\nfeedbacks = [\n    "a 150 - b 0",\n    "a 150 - c 20",\n    "c 200 - a 10",\n    "a 200 - b 40 - c 100",\n    "a 150 - b 50",\n    "a 150 - b 20"\n]\n\nranked_products = process_feedback(feedbacks)\nfor product in ranked_products:\n    print(f"Product {product.name}: {product.rating}")