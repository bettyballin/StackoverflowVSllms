from ortools.sat.python import cp_model\n\n# Create the model\nmodel = cp_model.CpModel()\n\n# Define variables\nnum_nurses = 20\nnum_days = 30\nnum_shifts = 6\n\n# Assign shift variables: nurse x day x shift\nshifts = {}\nfor n in range(num_nurses):\n    for d in range(num_days):\n        for s in range(num_shifts):\n            shifts[(n, d, s)] = model.NewBoolVar(f'shift_n{n}d{d}s{s}')\n\n# Define constraints\n# Each nurse works exactly one shift per day\nfor n in range(num_nurses):\n    for d in range(num_days):\n        model.Add(sum(shifts[(n, d, s)] for s in range(num_shifts)) == 1)\n\n# Minimum number of nurses per shift per day\nmin_nurses_per_shift = 2\nfor d in range(num_days):\n    for s in range(num_shifts):\n        model.Add(sum(shifts[(n, d, s)] for n in range(num_nurses)) >= min_nurses_per_shift)\n\n# Add more constraints as needed...\n\n# Define the solver and solve\nsolver = cp_model.CpSolver()\nstatus = solver.Solve(model)\n\n# Check the solution\nif status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:\n    for d in range(num_days):\n        print(f'Day {d}')\n        for n in range(num_nurses):\n            for s in range(num_shifts):\n                if solver.Value(shifts[(n, d, s)]):\n                    print(f'  Nurse {n} works shift {s}')\nelse:\n    print('No solution found.')