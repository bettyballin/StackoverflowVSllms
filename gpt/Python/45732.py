import unittest\nfrom unittest.mock import Mock, call\n\nclass DatabaseConnection:\n    def connect(self):\n        pass\n    \n    def execute_query(self, query):\n        pass\n\nclass DataProcessor:\n    def __init__(self, db_connection):\n        self.db_connection = db_connection\n    \n    def process_data(self):\n        self.db_connection.connect()\n        self.db_connection.execute_query("SELECT * FROM data")\n\nclass TestDatabaseInteraction(unittest.TestCase):\n    def test_data_processor(self):\n        # Create a mock for the database connection\n        db_connection_mock = Mock(spec=DatabaseConnection)\n        \n        # Instantiate DataProcessor with the mock\n        processor = DataProcessor(db_connection=db_connection_mock)\n        \n        # Call the method to be tested\n        processor.process_data()\n        \n        # Verify that connect and execute_query are called with correct arguments\n        db_connection_mock.connect.assert_called_once()\n        db_connection_mock.execute_query.assert_called_once_with("SELECT * FROM data")\n\nif __name__ == '__main__':\n    unittest.main()