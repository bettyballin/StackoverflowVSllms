class CircularBuffer:\n    def __init__(self, size):\n        self.size = size\n        self.buffer = [None] * size\n        self.start = 0\n        self.end = 0\n        self.is_full = False\n\n    def enqueue(self, item):\n        self.buffer[self.end] = item\n        if self.is_full:\n            self.start = (self.start + 1) % self.size\n        self.end = (self.end + 1) % self.size\n        self.is_full = self.end == self.start\n\n    def dequeue(self):\n        if self.is_empty():\n            raise IndexError("dequeue from an empty buffer")\n        item = self.buffer[self.start]\n        self.buffer[self.start] = None\n        self.start = (self.start + 1) % self.size\n        self.is_full = False\n        return item\n\n    def is_empty(self):\n        return self.start == self.end and not self.is_full\n\n    def __repr__(self):\n        if self.is_empty():\n            return "CircularBuffer([])"\n        if self.end > self.start or self.is_full:\n            return f"CircularBuffer({self.buffer[self.start:self.end]})"\n        else:\n            return f"CircularBuffer({self.buffer[self.start:] + self.buffer[:self.end]})"\n\n# Example usage:\ncb = CircularBuffer(5)\ncb.enqueue(1)\ncb.enqueue(2)\ncb.enqueue(3)\ncb.enqueue(4)\ncb.enqueue(5)\ncb.enqueue(6)  # This will overwrite the first element (1)\n\nprint(cb)  # Output: CircularBuffer([2, 3, 4, 5, 6])