import random\nimport copy\n\ndef find_random_subtree(tree):\n    if not isinstance(tree, list) or len(tree) == 0:\n        return tree, []\n    \n    nodes = [(tree, [])]\n    while nodes:\n        node, path = nodes.pop()\n        if isinstance(node, list):\n            choice = random.choice(range(len(node)))\n            return node[choice], path + [choice]\n        else:\n            return node, path\n    return None, []\n\ndef get_subtree(tree, path):\n    subtree = tree\n    for idx in path:\n        subtree = subtree[idx]\n    return subtree\n\ndef set_subtree(tree, path, subtree):\n    node = tree\n    for idx in path[:-1]:\n        node = node[idx]\n    node[path[-1]] = subtree\n\ndef crossover(tree1, tree2):\n    subtree1, path1 = find_random_subtree(tree1)\n    subtree2, path2 = find_random_subtree(tree2)\n    \n    if not subtree1 or not subtree2:\n        return copy.deepcopy(tree1), copy.deepcopy(tree2)\n    \n    new_tree1 = copy.deepcopy(tree1)\n    new_tree2 = copy.deepcopy(tree2)\n    \n    set_subtree(new_tree1, path1, subtree2)\n    set_subtree(new_tree2, path2, subtree1)\n    \n    return new_tree1, new_tree2\n\n# Example trees\ntree1 = ['f', ['f', ['f', 'c', 'c'], ['f', 'c', 'c']], ['f', ['f', 'c', 'c'], ['f', 'c', 'c']]]\ntree2 = ['f', ['f', ['f', 'c', 'c'], 'c'], ['f', ['f', 'c', 'c'], 'c']]\n\ntree_child1, tree_child2 = crossover(tree1, tree2)\n\nprint("Tree 1:", tree1)\nprint("Tree 2:", tree2)\nprint("Child 1:", tree_child1)\nprint("Child 2:", tree_child2)