import random\nfrom collections import Counter\nfrom scipy.stats import chisquare\n\ndef randomize_array(arr):\n    randomized_arr = arr[:]\n    random.shuffle(randomized_arr)\n    return randomized_arr\n\ndef test_randomize_array(arr, num_trials=10000):\n    permutations = Counter()\n    original_arr = tuple(arr)\n    \n    for _ in range(num_trials):\n        permuted_arr = tuple(randomize_array(arr))\n        permutations[permuted_arr] += 1\n    \n    # Expected frequency for each permutation\n    expected_frequency = num_trials / len(permutations)\n    observed_frequencies = list(permutations.values())\n    expected_frequencies = [expected_frequency] * len(permutations)\n    \n    chi2, p_value = chisquare(observed_frequencies, expected_frequencies)\n    \n    print(f"Chi-square statistic: {chi2}")\n    print(f"P-value: {p_value}")\n    \n    if p_value > 0.05:\n        print("The distribution of permutations appears to be random.")\n    else:\n        print("The distribution of permutations does not appear to be random.")\n        \n# Example usage\ntest_randomize_array([1, 2, 3])