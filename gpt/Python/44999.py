import numpy as np\n\nclass KalmanFilter:\n    def __init__(self, process_variance, measurement_variance):\n        self.process_variance = process_variance\n        self.measurement_variance = measurement_variance\n        self.estimated_measurement_variance = 1.0\n        self.posteri_estimate = 0.0\n        self.posteri_error_estimate = 1.0\n\n    def update(self, measurement):\n        # Prediction update\n        priori_estimate = self.posteri_estimate\n        priori_error_estimate = self.posteri_error_estimate + self.process_variance\n\n        # Measurement update\n        blending_factor = priori_error_estimate / (priori_error_estimate + self.measurement_variance)\n        self.posteri_estimate = priori_estimate + blending_factor * (measurement - priori_estimate)\n        self.posteri_error_estimate = (1 - blending_factor) * priori_error_estimate\n\n        return self.posteri_estimate\n\ndef filter_gps_data(gps_points, process_variance=1e-5, measurement_variance=1e-1):\n    kalman_filter = KalmanFilter(process_variance, measurement_variance)\n    filtered_points = []\n\n    for point in gps_points:\n        filtered_point = kalman_filter.update(point)\n        filtered_points.append(filtered_point)\n\n    return filtered_points\n\n# Example usage:\ngps_points = [1.0, 1.1, 0.9, 10.0, 1.2, 1.1, 1.0]  # Sample noisy GPS data\nfiltered_points = filter_gps_data(gps_points)\n\nprint(filtered_points)