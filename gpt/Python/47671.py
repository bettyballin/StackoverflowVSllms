import smtpd\nimport asyncore\n\nclass CustomSMTPServer(smtpd.SMTPServer):\n\n    def __init__(self, localaddr, remoteaddr):\n        super().__init__(localaddr, remoteaddr)\n\n    def smtp_EHLO(self, arg):\n        print('EHLO received with argument:', arg)\n        self.push('250-Hello {}'.format(arg))\n        self.push('250-AUTH LOGIN PLAIN')\n        self.push('250 EHLO Completed')\n\n    def smtp_AUTH(self, arg):\n        # Handle AUTH logic here, this is just a placeholder\n        if arg.upper().startswith('LOGIN'):\n            self.push('334 VXNlcm5hbWU6')  # Base64 encoded 'Username:'\n        elif arg.upper().startswith('PLAIN'):\n            self.push('235 Authentication successful')\n        else:\n            self.push('504 Unrecognized authentication type')\n\n    def process_message(self, peer, mailfrom, rcpttos, data):\n        print('Receiving message from:', peer)\n        print('Message addressed from:', mailfrom)\n        print('Message addressed to  :', rcpttos)\n        print('Message length        :', len(data))\n        return '250 Message accepted for delivery'\n\n    def found_terminator(self):\n        line = ''.join(self.__line)\n        self.__line = []\n        if self.__state == self.COMMAND:\n            if not line:\n                self.push('500 Error: bad syntax')\n                return\n            method = None\n            i = line.find(' ')\n            if i < 0:\n                command = line.upper()\n                arg = None\n            else:\n                command = line[:i].upper()\n                arg = line[i+1:].strip()\n            method = getattr(self, 'smtp_' + command, None)\n\n            if not method:\n                self.push('502 Error: command "%s" not implemented' % command)\n                return\n            method(arg)\n            return\n        else:\n            if self.__state != self.DATA:\n                self.push('451 Internal confusion')\n                return\n            data = []\n            for text in line.split('\r\n'):\n                if text and text[0] == '.':\n                    data.append(text[1:])\n                else:\n                    data.append(text)\n            self.__data = '\n'.join(data)\n            status = self.__server.process_message(self.__peer,\n                                                   self.__mailfrom,\n                                                   self.__rcpttos,\n                                                   self.__data)\n            self.__rcpttos = []\n            self.__mailfrom = None\n            self.__state = self.COMMAND\n            self.set_terminator('\r\n')\n            if not status:\n                self.push('250 Ok')\n            else:\n                self.push(status)\n\nserver = CustomSMTPServer(('127.0.0.1', 1025), None)\nasyncore.loop()