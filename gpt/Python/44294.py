import cProfile\nimport pstats\nimport io\n\nclass ProfilingMiddleware:\n    def __init__(self, app):\n        self.app = app\n\n    def __call__(self, environ, start_response):\n        profiler = cProfile.Profile()\n        profiler.enable()\n        result = self.app(environ, start_response)\n        profiler.disable()\n\n        # Save the profiling results to a file\n        s = io.StringIO()\n        ps = pstats.Stats(profiler, stream=s).sort_stats(pstats.SortKey.CUMULATIVE)\n        ps.print_stats()\n        with open('/path/to/profile_output.prof', 'a') as f:  # Append mode\n            f.write(s.getvalue())\n\n        return result