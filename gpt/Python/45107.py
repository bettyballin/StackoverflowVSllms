def unify(x, y, subst):\n    if subst is None:\n        return None\n    elif x == y:\n        return subst\n    elif is_variable(x):\n        return unify_var(x, y, subst)\n    elif is_variable(y):\n        return unify_var(y, x, subst)\n    elif is_compound(x) and is_compound(y):\n        return unify(x.args, y.args, unify(x.op, y.op, subst))\n    elif is_list(x) and is_list(y) and len(x) == len(y):\n        if not x:\n            return subst\n        return unify(x[1:], y[1:], unify(x[0], y[0], subst))\n    else:\n        return None\n\ndef unify_var(var, x, subst):\n    if var in subst:\n        return unify(subst[var], x, subst)\n    elif occurs_check(var, x, subst):\n        return None\n    else:\n        return extend_subst(var, x, subst)\n\ndef occurs_check(var, x, subst):\n    if var == x:\n        return True\n    elif is_variable(x) and x in subst:\n        return occurs_check(var, subst[x], subst)\n    elif is_compound(x):\n        return any(occurs_check(var, arg, subst) for arg in x.args)\n    elif is_list(x):\n        return any(occurs_check(var, elem, subst) for elem in x)\n    return False