// Feistel cipher with 4 rounds\nfunction feistel_encrypt(input, key, rounds=4):\n    N = length(input) // N should be between 20-70 bits\n    L = input[0:N/2]  // Left half\n    R = input[N/2:N]  // Right half\n\n    for i from 1 to rounds:\n        temp = R\n        R = L ^ F(R, key, i)\n        L = temp\n\n    return (R << (N/2)) | L  // Combine halves\n\nfunction F(R, key, round):\n    // Simple round function using XOR and bit shifts\n    return (R ^ key) << (round % N)\n\nfunction feistel_decrypt(ciphertext, key, rounds=4):\n    N = length(ciphertext)\n    L = ciphertext[0:N/2]\n    R = ciphertext[N/2:N]\n\n    for i from rounds down to 1:\n        temp = L\n        L = R ^ F(L, key, i)\n        R = temp\n\n    return (R << (N/2)) | L