import numpy as np\nfrom scipy.sparse.linalg import svds\n\n# Assuming 'ratings' is a user-item rating matrix\ndef matrix_factorization_svd(ratings, k=20):\n    # Normalize the data by subtracting the mean rating for each user\n    user_ratings_mean = np.mean(ratings, axis=1)\n    ratings_demeaned = ratings - user_ratings_mean.reshape(-1, 1)\n    \n    # Perform SVD\n    U, sigma, Vt = svds(ratings_demeaned, k=k)\n    \n    # Convert sigma from a vector to a diagonal matrix\n    sigma = np.diag(sigma)\n    \n    # Reconstruct the predicted ratings matrix\n    predicted_ratings = np.dot(np.dot(U, sigma), Vt) + user_ratings_mean.reshape(-1, 1)\n    \n    return predicted_ratings\n\n# Example usage:\n# ratings is a user-item matrix where users are rows and items are columns\nratings = np.array([\n    [5, 3, 0, 1],\n    [4, 0, 0, 1],\n    [1, 1, 0, 5],\n    [1, 0, 0, 4],\n    [0, 1, 5, 4],\n])\npredicted_ratings = matrix_factorization_svd(ratings, k=2)\nprint(predicted_ratings)