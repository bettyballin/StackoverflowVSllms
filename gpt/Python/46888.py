from Crypto.Cipher import AES\nfrom Crypto.Util.Padding import pad, unpad\nimport struct\n\n# Function to encrypt an integer\ndef encrypt_int(value, key):\n    cipher = AES.new(key, AES.MODE_ECB)\n    data = struct.pack('>I', value)  # Pack integer into 4 bytes (big-endian)\n    padded_data = pad(data, AES.block_size)  # Pad to AES block size\n    encrypted = cipher.encrypt(padded_data)\n    return encrypted\n\n# Function to decrypt an encrypted integer\ndef decrypt_int(encrypted, key):\n    cipher = AES.new(key, AES.MODE_ECB)\n    decrypted_padded = cipher.decrypt(encrypted)\n    decrypted = unpad(decrypted_padded, AES.block_size)\n    value = struct.unpack('>I', decrypted)[0]  # Unpack the 4 bytes back into an integer\n    return value\n\n# Example usage\nkey = b'This is a key123'  # 16 bytes key for AES-128\ninteger_to_encrypt = 123456789\n\nencrypted_value = encrypt_int(integer_to_encrypt, key)\nprint("Encrypted:", encrypted_value)\n\ndecrypted_value = decrypt_int(encrypted_value, key)\nprint("Decrypted:", decrypted_value)