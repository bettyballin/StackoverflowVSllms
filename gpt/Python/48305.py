from cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import padding\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.exceptions import InvalidSignature\n\n# Load the public key\npublic_key_pem = b"""\n-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDfG4IuFO2h/LdDNmonwGNw5srW\nnUEWzoBrPRF1NM8LqpOMD45FAPtZ1NmPtHGo0BAS1UsyJEGXx0NPJ8Gw1z+huLrl\nXnAVX5B4ec6cJfKKmpL/l94WhP2v8F3OGWrnaEX1mLMoxe124Pcfamt0SPCGkeal\nVvXw13PLINE/YptjkQIDAQAB\n-----END PUBLIC KEY-----\n"""\npublic_key = serialization.load_pem_public_key(public_key_pem)\n\n# Data and signature to verify\ndata = b"your data string"\nsignature = b"\x00\x01..."  # Replace with your actual signature bytes\n\n# Verify the signature\ntry:\n    public_key.verify(\n        signature,\n        data,\n        padding.PKCS1v15(),\n        hashes.SHA1()\n    )\n    print("Signature is valid.")\nexcept InvalidSignature:\n    print("Signature is invalid.")