import cv2\nimport numpy as np\n\ndef blend_images(image_list, mask_list):\n    # Assuming images and masks are of the same size\n    blended_image = np.zeros_like(image_list[0], dtype=np.float32)\n    weight_sum = np.zeros((image_list[0].shape[0], image_list[0].shape[1]), dtype=np.float32)\n\n    for img, mask in zip(image_list, mask_list):\n        mask_float = mask.astype(np.float32) / 255.0\n        blended_image += img.astype(np.float32) * mask_float\n        weight_sum += mask_float\n\n    # Avoid division by zero\n    weight_sum[weight_sum == 0] = 1\n    blended_image /= weight_sum[:, :, np.newaxis]\n\n    return blended_image.astype(np.uint8)\n\n# Example usage:\nimage_list = [cv2.imread(image_path) for image_path in image_paths]\nmask_list = [cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE) for mask_path in mask_paths]\n\nresult = blend_images(image_list, mask_list)\ncv2.imwrite('blended_texture.jpg', result)