def longest_increasing_subset(arr):\n    # Initialize a list to store the longest increasing subset ending at each index\n    n = len(arr)\n    lis = [[] for _ in range(n)]\n    \n    # The first element is a subset of itself\n    lis[0].append(arr[0])\n    \n    # Build the longest increasing subsets for each index\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] > arr[j] and len(lis[i]) < len(lis[j]) + 1:\n                lis[i] = lis[j].copy()\n        lis[i].append(arr[i])\n    \n    # Find the longest of all increasing subsets\n    max_subset = []\n    for subset in lis:\n        if len(subset) > len(max_subset):\n            max_subset = subset\n    \n    return max_subset\n\n# Example usage\nA = [50, 1, 4, 9, 2, 18, 6, 3, 7, 10]\nresult = longest_increasing_subset(A)\nprint("Largest increasing non-contiguous subset:", result)