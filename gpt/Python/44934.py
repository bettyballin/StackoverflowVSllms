from collections import deque\n\n    def bfs(graph, start):\n        visited = set()\n        queue = deque([start])\n        distances = {start: 0}\n        parents = {start: None}\n\n        while queue:\n            vertex = queue.popleft()\n            if vertex not in visited:\n                visited.add(vertex)\n                for neighbor in graph[vertex]:\n                    if neighbor not in visited:\n                        queue.append(neighbor)\n                        distances[neighbor] = distances[vertex] + 1\n                        parents[neighbor] = vertex\n\n        return distances, parents\n\n    # Example usage:\n    graph = {\n        'A': ['B', 'C'],\n        'B': ['A', 'D', 'E'],\n        'C': ['A', 'F'],\n        'D': ['B'],\n        'E': ['B', 'F'],\n        'F': ['C', 'E']\n    }\n\n    distances, parents = bfs(graph, 'A')\n    print("Distances: ", distances)\n    print("Parents: ", parents)