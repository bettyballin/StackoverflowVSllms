from cryptography.hazmat.primitives.asymmetric import padding\n   from cryptography.hazmat.primitives import hashes\n   import base64\n\n   def verify_license_key(public_key, license_key):\n       try:\n           # Decode the license key\n           decoded = base64.urlsafe_b64decode(license_key.encode())\n           license_info, signature = decoded.rsplit(b"|", 1)\n\n           # Verify the signature\n           public_key.verify(\n               signature,\n               license_info,\n               padding.PSS(\n                   mgf=padding.MGF1(hashes.SHA256()),\n                   salt_length=padding.PSS.MAX_LENGTH\n               ),\n               hashes.SHA256()\n           )\n\n           # Extract license information\n           user_info, version, duration = license_info.decode().split("|")\n           return {\n               "user_info": user_info,\n               "version": version,\n               "duration": duration\n           }\n       except Exception as e:\n           print("Verification failed:", e)\n           return None\n\n   # Load public key from file\n   with open("public_key.pem", "rb") as f:\n       public_key = serialization.load_pem_public_key(f.read())\n\n   # Verify the license key\n   verified_info = verify_license_key(public_key, license_key)\n   if verified_info:\n       print("License Key is valid:", verified_info)\n   else:\n       print("License Key is invalid")