from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom cryptography.hazmat.backends import default_backend\nimport os\n\n# Generate a random key and initialization vector (IV)\nkey = os.urandom(32)  # AES-256 key\niv = os.urandom(16)   # AES block size is 16 bytes\n\n# Sample data to encrypt\ndata = b"Sensitive information that needs encryption"\n\n# Padding for block cipher\npadder = padding.PKCS7(128).padder()\npadded_data = padder.update(data) + padder.finalize()\n\n# Encrypt\ncipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())\nencryptor = cipher.encryptor()\nencrypted_data = encryptor.update(padded_data) + encryptor.finalize()\n\nprint(f"Encrypted data: {encrypted_data}")\n\n# Decrypt\ncipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())\ndecryptor = cipher.decryptor()\ndecrypted_padded_data = decryptor.update(encrypted_data) + decryptor.finalize()\n\n# Unpadding\nunpadder = padding.PKCS7(128).unpadder()\ndecrypted_data = unpadder.update(decrypted_padded_data) + unpadder.finalize()\n\nprint(f"Decrypted data: {decrypted_data}")