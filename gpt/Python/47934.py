def count_combinations(groups, constraints):\n    def is_valid(selection, constraints):\n        for (a, b) in constraints:\n            if a in selection and b in selection:\n                return False\n        return True\n\n    def backtrack(index, current_selection):\n        if index == len(groups):\n            return 1\n\n        count = 0\n        for option in groups[index]:\n            new_selection = current_selection + [option]\n            if is_valid(new_selection, constraints):\n                count += backtrack(index + 1, new_selection)\n        return count\n\n    return backtrack(0, [])\n\n# Example usage\ngroups = [\n    ['x1', 'x2', 'x3', 'x4', 'x5'],  # Group 1\n    ['y1', 'y2', 'y3'],              # Group 2\n    ['z1', 'z2', 'z3', 'z4']         # Group 3\n]\n\nconstraints = [\n    ('x1', 'y2'),\n    ('x1', 'z4'),\n    ('y2', 'z2')\n]\n\nprint(count_combinations(groups, constraints))