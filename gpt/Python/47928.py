import smtplib\nimport imaplib\nimport email\nfrom email.mime.text import MIMEText\n\n# Function to send email with DSN request\ndef send_email_with_dsn(smtp_server, port, login, password, from_addr, to_addr, subject, body):\n    msg = MIMEText(body)\n    msg['Subject'] = subject\n    msg['From'] = from_addr\n    msg['To'] = to_addr\n    msg['Return-Receipt-To'] = from_addr\n    msg['Disposition-Notification-To'] = from_addr\n\n    with smtplib.SMTP(smtp_server, port) as server:\n        server.starttls()\n        server.login(login, password)\n        server.sendmail(from_addr, [to_addr], msg.as_string())\n\n# Function to check for bounce messages\ndef check_bounce_messages(imap_server, email_user, email_pass):\n    mail = imaplib.IMAP4_SSL(imap_server)\n    mail.login(email_user, email_pass)\n    mail.select('inbox')\n\n    result, data = mail.search(None, 'ALL')\n    mail_ids = data[0].split()\n\n    for mail_id in mail_ids:\n        result, data = mail.fetch(mail_id, '(RFC822)')\n        raw_email = data[0][1]\n        msg = email.message_from_bytes(raw_email)\n        \n        if 'failure' in msg['Subject'].lower() or 'undelivered' in msg['Subject'].lower():\n            print("Found a bounce message!")\n            # Here, you would parse the message to find the original email ID and update your log\n\n    mail.logout()\n\n# Example usage\nsmtp_server = 'smtp.example.com'\nport = 587\nlogin = 'your-email@example.com'\npassword = 'your-password'\nfrom_addr = 'your-email@example.com'\nto_addr = 'recipient@example.com'\nsubject = 'Test Email'\nbody = 'This is a test email.'\n\nsend_email_with_dsn(smtp_server, port, login, password, from_addr, to_addr, subject, body)\n\nimap_server = 'imap.example.com'\nemail_user = 'your-email@example.com'\nemail_pass = 'your-password'\n\ncheck_bounce_messages(imap_server, email_user, email_pass)