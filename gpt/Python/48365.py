import sqlite3\nfrom datetime import datetime, timedelta\n\ndef check_and_add_reporting_periods():\n    conn = sqlite3.connect('database.db')\n    cursor = conn.cursor()\n\n    # Fetch all creation info entries\n    cursor.execute("SELECT Id, CreationDate, ReportingPeriodLength FROM CreationInfo")\n    creation_infos = cursor.fetchall()\n\n    for creation_info in creation_infos:\n        creation_id, creation_date_str, period_length = creation_info\n        creation_date = datetime.strptime(creation_date_str, '%Y-%m-%d')\n\n        # Fetch the last reporting period for this creation info\n        cursor.execute("""\n            SELECT StartDate, EndDate FROM ReportingPeriods\n            WHERE CreationInfoId = ?\n            ORDER BY EndDate DESC\n            LIMIT 1\n        """, (creation_id,))\n        last_period = cursor.fetchone()\n\n        if last_period:\n            last_end_date = datetime.strptime(last_period[1], '%Y-%m-%d')\n            next_start_date = last_end_date + timedelta(days=1)\n        else:\n            next_start_date = creation_date\n\n        today = datetime.today()\n\n        # If the next period should start, add the new period\n        if next_start_date <= today:\n            next_end_date = next_start_date + timedelta(days=period_length)\n            cursor.execute("""\n                INSERT INTO ReportingPeriods (StartDate, EndDate, CreationInfoId)\n                VALUES (?, ?, ?)\n            """, (next_start_date.strftime('%Y-%m-%d'), next_end_date.strftime('%Y-%m-%d'), creation_id))\n            conn.commit()\n\n    conn.close()\n\nif __name__ == "__main__":\n    check_and_add_reporting_periods()