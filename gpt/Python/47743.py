class UnionFind:\n    def __init__(self):\n        self.parent = {}\n        self.rank = {}\n\n    def find(self, u):\n        if self.parent[u] != u:\n            self.parent[u] = self.find(self.parent[u])\n        return self.parent[u]\n\n    def union(self, u, v):\n        root_u = self.find(u)\n        root_v = self.find(v)\n        \n        if root_u != root_v:\n            if self.rank[root_u] > self.rank[root_v]:\n                self.parent[root_v] = root_u\n            elif self.rank[root_u] < self.rank[root_v]:\n                self.parent[root_u] = root_v\n            else:\n                self.parent[root_v] = root_u\n                self.rank[root_u] += 1\n\ndef merge_sets(sets):\n    uf = UnionFind()\n    element_to_sets = {}\n\n    # Initialize the union-find structure\n    for i, s in enumerate(sets):\n        for elem in s:\n            if elem not in uf.parent:\n                uf.parent[elem] = elem\n                uf.rank[elem] = 0\n            if elem not in element_to_sets:\n                element_to_sets[elem] = []\n            element_to_sets[elem].append(i)\n\n    # Merge sets that share at least 2 elements\n    for elem, set_indices in element_to_sets.items():\n        if len(set_indices) > 1:\n            for i in range(len(set_indices) - 1):\n                for j in range(i + 1, len(set_indices)):\n                    common_elements = len(set(sets[set_indices[i]]) & set(sets[set_indices[j]]))\n                    if common_elements >= 2:\n                        for element in sets[set_indices[i]]:\n                            uf.union(elem, element)\n                        for element in sets[set_indices[j]]:\n                            uf.union(elem, element)\n\n    # Collect the merged sets\n    merged_sets = {}\n    for s in sets:\n        root = uf.find(next(iter(s)))\n        if root not in merged_sets:\n            merged_sets[root] = set()\n        merged_sets[root] = merged_sets[root].union(s)\n\n    return list(merged_sets.values())\n\n# Example usage:\nsets = [\n    {1, 2, 3, 4},\n    {3, 4, 5, 6, 7},\n    {8, 9, 10, 11},\n    {1, 8, 12, 13},\n    {6, 7, 14, 15, 16, 17}\n]\n\nresult = merge_sets(sets)\nfor r in result:\n    print(r)