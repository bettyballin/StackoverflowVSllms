class Box:\n    def __init__(self, length, width, height):\n        self.length = length\n        self.width = width\n        self.height = height\n\ndef fits_in(container, item):\n    return (item.length <= container.length and\n            item.width <= container.width and\n            item.height <= container.height)\n\ndef bin_packing(container, items):\n    items = sorted(items, key=lambda item: item.length * item.width * item.height, reverse=True)\n    packed_items = []\n\n    for item in items:\n        if fits_in(container, item):\n            packed_items.append(item)\n            # Reduce available space in the container (this is a simplified approach)\n            container.length -= item.length\n        else:\n            print(f"Item {item} does not fit in the container")\n\n    return packed_items\n\n# Example usage\ncontainer = Box(10, 10, 10)\nitems = [Box(2, 2, 2), Box(3, 3, 3), Box(1, 1, 1)]\n\npacked_items = bin_packing(container, items)\nprint(f"Packed items: {[f'({item.length}, {item.width}, {item.height})' for item in packed_items]}")