import numpy as np\nfrom scipy.fft import fft\nimport matplotlib.pyplot as plt\n\ndef is_sine_wave(data, threshold=0.9):\n    # Perform Fourier Transform\n    n = len(data)\n    freq = np.fft.fftfreq(n)\n    fft_values = fft(data)\n\n    # Compute the power spectrum\n    power = np.abs(fft_values)**2\n\n    # Identify the dominant frequency\n    peak_freq = np.argmax(power)\n    peak_power = power[peak_freq]\n    \n    # Compute total power\n    total_power = np.sum(power)\n\n    # Check if the dominant frequency accounts for most of the power\n    if (peak_power / total_power) > threshold:\n        return True\n    else:\n        return False\n\n# Example data\ntime = np.linspace(0, 2*np.pi, 100)\ndata = np.sin(time)\n\nis_sine = is_sine_wave(data)\nprint(f"Does the data approximate a sine wave? {is_sine}")