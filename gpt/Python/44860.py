def min_cost_knapsack(items, min_value):\n    # items is a list of tuples (value, cost)\n    # min_value is the minimum value needed\n    \n    # Calculate the maximum value possible\n    max_value = sum(item[0] for item in items)\n    \n    # Initialize DP array with infinity (large number)\n    dp = [float('inf')] * (max_value + 1)\n    dp[0] = 0\n    \n    for value, cost in items:\n        for v in range(max_value, value - 1, -1):\n            dp[v] = min(dp[v], dp[v - value] + cost)\n    \n    # Find the minimum cost to achieve at least min_value\n    min_cost = min(dp[v] for v in range(min_value, max_value + 1))\n    \n    return min_cost if min_cost != float('inf') else -1\n\n# Example usage\nitems = [(20, 11), (7, 5), (1, 2)]\nmin_value = 30\nprint(min_cost_knapsack(items, min_value))  # Output: 21