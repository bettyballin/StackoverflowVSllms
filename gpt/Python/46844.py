class Node:\n    def __init__(self, value):\n        self.value = value\n        self.children = []\n\ndef parse_expression(tokens):\n    stack = []\n    for token in tokens:\n        if token in ('#', '*', '->'):\n            node = Node(token)\n            while stack and isinstance(stack[-1], Node):\n                node.children.insert(0, stack.pop())\n            stack.append(node)\n        else:  # it's a text token\n            stack.append(Node(token))\n    \n    # The root of the AST should be the last remaining item on the stack\n    return stack.pop()\n\ndef print_tree(node, level=0):\n    print('  ' * level + node.value)\n    for child in node.children:\n        print_tree(child, level + 1)\n\n# Example usage\ntokens = ['#', 'a', '*', 'b1', 'b2', '->', 'c', '*', 'd1', 'd2', '->', 'e', '#', 'f1', 'f2', '*', 'g']\nroot = parse_expression(tokens)\nprint_tree(root)