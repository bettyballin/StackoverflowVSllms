def count_subsets_less_than_v(N, L, V):\n    # Initialize a 3D DP array\n    dp = [[[0 for _ in range(V)] for _ in range(L + 1)] for _ in range(N + 1)]\n    \n    # Base case: If L = 0, there is one subset (the empty set) with sum 0\n    for i in range(N + 1):\n        dp[i][0][0] = 1\n    \n    for i in range(1, N + 1):\n        for l in range(1, L + 1):\n            for v in range(V):\n                dp[i][l][v] = dp[i - 1][l][v]  # Exclude current element i\n                if v >= i:\n                    dp[i][l][v] += dp[i - 1][l - 1][v - i]  # Include current element i\n\n    # Sum up all counts for valid subsets with sums less than V\n    total_count = sum(dp[N][L][v] for v in range(V))\n    \n    return total_count\n\n# Example usage\nN = 10\nL = 3\nV = 15\nresult = count_subsets_less_than_v(N, L, V)\nprint(f"Number of subsets of size {L} with sum less than {V}: {result}")