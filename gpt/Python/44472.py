def convert_integer_part(number, base):\n    result = []\n    while number > 0:\n        remainder = number % base\n        result.append(remainder)\n        number = number // base\n    return result[::-1]\n\ndef convert_fractional_part(number, base, precision=10):\n    result = []\n    while number > 0 and len(result) < precision:\n        number *= base\n        integer_part = int(number)\n        result.append(integer_part)\n        number -= integer_part\n    return result\n\ndef convert_to_base(number, base, precision=10):\n    integer_part, fractional_part = str(number).split(".")\n    integer_part = int(integer_part)\n    fractional_part = float("0." + fractional_part)\n    \n    converted_integer = convert_integer_part(integer_part, base)\n    converted_fraction = convert_fractional_part(fractional_part, base, precision)\n    \n    return converted_integer, converted_fraction\n\n# Example usage\nnumber = 10.1\nbase = 2\ninteger, fraction = convert_to_base(number, base)\nprint("Integer part in base", base, ":", integer)\nprint("Fractional part in base", base, ":", fraction)