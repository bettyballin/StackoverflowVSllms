from cryptography.hazmat.primitives import hashes, serialization\nfrom cryptography.hazmat.primitives.asymmetric import padding, rsa\nfrom cryptography.hazmat.primitives.asymmetric.utils import Prehashed\nfrom cryptography.hazmat.backends import default_backend\nimport hashlib\n\n# Generate key pair (for demonstration purposes, usually done once and stored securely)\nprivate_key = rsa.generate_private_key(\n    public_exponent=65537,\n    key_size=2048,\n    backend=default_backend()\n)\npublic_key = private_key.public_key()\n\n# Save keys to files (PEM format for example)\nwith open("private_key.pem", "wb") as f:\n    f.write(private_key.private_bytes(\n        encoding=serialization.Encoding.PEM,\n        format=serialization.PrivateFormat.TraditionalOpenSSL,\n        encryption_algorithm=serialization.NoEncryption()\n    ))\n\nwith open("public_key.pem", "wb") as f:\n    f.write(public_key.public_bytes(\n        encoding=serialization.Encoding.PEM,\n        format=serialization.PublicFormat.SubjectPublicKeyInfo\n    ))\n\n# Load the license file\nlicense_file_path = 'license.txt'\nwith open(license_file_path, 'rb') as file:\n    license_data = file.read()\n\n# Compute the hash of the license file\ndigest = hashes.Hash(hashes.SHA256(), backend=default_backend())\ndigest.update(license_data)\nhash_value = digest.finalize()\n\n# Sign the hash\nsignature = private_key.sign(\n    hash_value,\n    padding.PSS(\n        mgf=padding.MGF1(hashes.SHA256()),\n        salt_length=padding.PSS.MAX_LENGTH\n    ),\n    Prehashed(hashes.SHA256())\n)\n\n# Save signature to a file\nwith open('signature.sig', 'wb') as sig_file:\n    sig_file.write(signature)\n\n# Verification of the signature\ndef verify_signature(public_key, license_data, signature):\n    # Recompute the hash\n    digest = hashes.Hash(hashes.SHA256(), backend=default_backend())\n    digest.update(license_data)\n    hash_value = digest.finalize()\n\n    # Verify the signature\n    try:\n        public_key.verify(\n            signature,\n            hash_value,\n            padding.PSS(\n                mgf=padding.MGF1(hashes.SHA256()),\n                salt_length=padding.PSS.MAX_LENGTH\n            ),\n            Prehashed(hashes.SHA256())\n        )\n        return True\n    except Exception as e:\n        return False\n\n# Load the public key\nwith open("public_key.pem", "rb") as key_file:\n    public_key = serialization.load_pem_public_key(\n        key_file.read(),\n        backend=default_backend()\n    )\n\n# Load the signature\nwith open('signature.sig', 'rb') as sig_file:\n    signature = sig_file.read()\n\n# Verify the license file\nis_valid = verify_signature(public_key, license_data, signature)\nprint(f'License file is valid: {is_valid}')