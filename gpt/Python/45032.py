import numpy as np\nimport wave\n\ndef read_wave(file_path):\n    with wave.open(file_path, 'r') as wav_file:\n        params = wav_file.getparams()\n        n_channels, sampwidth, framerate, n_frames, _, _ = params\n        frames = wav_file.readframes(n_frames)\n        audio_data = np.frombuffer(frames, dtype=np.int16)\n        if n_channels > 1:\n            audio_data = audio_data.reshape(-1, n_channels)\n        return audio_data, framerate\n\ndef compute_rms(audio_data, window_size):\n    rms_values = []\n    for i in range(0, len(audio_data), window_size):\n        window = audio_data[i:i+window_size]\n        rms = np.sqrt(np.mean(window**2))\n        rms_values.append(rms)\n    return rms_values\n\ndef detect_door_slam(rms_values, threshold):\n    slams = []\n    for i, rms in enumerate(rms_values):\n        if rms > threshold:\n            slams.append(i)\n    return slams\n\n# Example usage\nfile_path = 'van_driver_door_closing.wav'\naudio_data, framerate = read_wave(file_path)\nwindow_size = framerate // 4  # e.g. 0.25 second windows\nrms_values = compute_rms(audio_data, window_size)\nthreshold = max(rms_values) * 0.8  # Set threshold to 80% of max RMS value\ndoor_slams = detect_door_slam(rms_values, threshold)\n\nprint(f"Detected door slams at indices: {door_slams}")