import numpy as np\n\n# Define the QWERTY keyboard layout\nqwerty_layout = [\n    "1234567890",\n    "qwertyuiop",\n    "asdfghjkl",\n    "zxcvbnm"\n]\n\n# Create a dictionary to store the positions of each key\nkey_positions = {}\nfor row_index, row in enumerate(qwerty_layout):\n    for col_index, key in enumerate(row):\n        key_positions[key] = (row_index, col_index)\n\ndef qwerty_distance(char1, char2):\n    if char1 == char2:\n        return 0\n    if char1 not in key_positions or char2 not in key_positions:\n        return 1  # High cost for unknown characters\n    pos1 = key_positions[char1]\n    pos2 = key_positions[char2]\n    return np.linalg.norm(np.array(pos1) - np.array(pos2))\n\ndef weighted_levenshtein(str1, str2):\n    len1, len2 = len(str1), len(str2)\n    dp = np.zeros((len1 + 1, len2 + 1))\n    \n    for i in range(len1 + 1):\n        dp[i][0] = i\n    for j in range(len2 + 1):\n        dp[0][j] = j\n\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            cost = qwerty_distance(str1[i - 1], str2[j - 1])\n            dp[i][j] = min(dp[i - 1][j] + 1,      # Deletion\n                           dp[i][j - 1] + 1,      # Insertion\n                           dp[i - 1][j - 1] + cost)  # Substitution\n\n    return dp[len1][len2]\n\n# Example usage\nstr1 = "telephone"\nstr2 = "yelephone"\ndistance = weighted_levenshtein(str1, str2)\nprint(f"The weighted Levenshtein distance between '{str1}' and '{str2}' is {distance}")