class MinStack:\n    def __init__(self):\n        self.stack = []\n        self.min_stack = []\n\n    def push(self, val: int) -> None:\n        self.stack.append(val)\n        if not self.min_stack or val <= self.min_stack[-1]:\n            self.min_stack.append(val)\n\n    def pop(self) -> None:\n        if self.stack:\n            if self.stack[-1] == self.min_stack[-1]:\n                self.min_stack.pop()\n            self.stack.pop()\n\n    def top(self) -> int:\n        if self.stack:\n            return self.stack[-1]\n        return None\n\n    def getMinimum(self) -> int:\n        if self.min_stack:\n            return self.min_stack[-1]\n        return None\n\n# Example usage:\nmin_stack = MinStack()\nmin_stack.push(2)\nmin_stack.push(6)\nmin_stack.push(4)\nmin_stack.push(1)\nmin_stack.push(5)\nprint(min_stack.getMinimum())  # Output: 1\nmin_stack.pop()\nmin_stack.pop()\nprint(min_stack.getMinimum())  # Output: 2