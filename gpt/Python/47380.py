def aDecorator(func):\n    def wrapper(*args, **kwargs):\n        print("Inside aDecorator")\n        return func(*args, **kwargs)\n    return wrapper\n\ndef otherDecorator(func):\n    def wrapper(*args, **kwargs):\n        print("Inside otherDecorator")\n        return func(*args, **kwargs)\n    return wrapper\n\n@aDecorator\ndef myfunc1():\n    print("Executing myfunc1")\n\nif __name__ == "__main__":\n    # This will call the function and will use the decorator @aDecorator\n    myfunc1()\n    \n    # Now replace the decorator @aDecorator with the decorator @otherDecorator\n    myfunc1 = otherDecorator(myfunc1.__wrapped__)\n    \n    # This will now call the function with the new decorator @otherDecorator\n    myfunc1()