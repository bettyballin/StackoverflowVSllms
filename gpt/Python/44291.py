def three_way_matching(A_prefs, B_prefs, C_prefs):\n    n = len(A_prefs)  # Assuming each group has n members\n    matches = []\n\n    # Initial greedy matching\n    for a in range(n):\n        for b in A_prefs[a]:\n            for c in A_prefs[a][b]:\n                if b in B_prefs and c in C_prefs and a in B_prefs[b] and a in C_prefs[c]:\n                    matches.append((a, b, c))\n                    B_prefs.pop(b)\n                    C_prefs.pop(c)\n                    break\n\n    # Improvement phase\n    improved = True\n    while improved:\n        improved = False\n        for a, b, c in matches:\n            for new_b in A_prefs[a]:\n                for new_c in A_prefs[a][new_b]:\n                    if (a, new_b, new_c) not in matches and new_b in B_prefs and new_c in C_prefs:\n                        if a in B_prefs[new_b] and a in C_prefs[new_c]:\n                            # Check if all prefer the new match\n                            if is_preferred(a, b, c, new_b, new_c, B_prefs, C_prefs):\n                                matches.remove((a, b, c))\n                                matches.append((a, new_b, new_c))\n                                improved = True\n                                break\n                if improved:\n                    break\n            if improved:\n                break\n\n    return matches\n\ndef is_preferred(a, b, c, new_b, new_c, B_prefs, C_prefs):\n    return B_prefs[new_b].index(a) < B_prefs[new_b].index(b) and C_prefs[new_c].index(a) < C_prefs[new_c].index(c)