class HashTable:\n    def __init__(self):\n        self.size = 8\n        self.count = 0\n        self.table = [None] * self.size\n\n    def insert(self, key, value):\n        if self.count / self.size >= 0.75:\n            self._resize()\n        index = self._hash(key) % self.size\n        while self.table[index] is not None:\n            index = (index + 1) % self.size\n        self.table[index] = (key, value)\n        self.count += 1\n\n    def _resize(self):\n        old_table = self.table\n        self.size *= 2\n        self.table = [None] * self.size\n        self.count = 0\n        for item in old_table:\n            if item is not None:\n                self.insert(item[0], item[1])\n\n    def _hash(self, key):\n        return hash(key)\n\n# Example usage:\nhash_table = HashTable()\nfor i in range(n):\n    hash_table.insert(i, f"value_{i}")