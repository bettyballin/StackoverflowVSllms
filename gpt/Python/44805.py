from collections import Counter\nimport heapq\n\ndef shuffle_with_no_adjacent_duplicates(arr):\n    counter = Counter(arr)\n    max_heap = [(-freq, value) for value, freq in counter.items()]\n    heapq.heapify(max_heap)\n    \n    result = []\n    prev_freq, prev_value = 0, None\n\n    while max_heap or prev_freq < 0:\n        if max_heap:\n            freq, value = heapq.heappop(max_heap)\n            result.append(value)\n            freq += 1  # decrease frequency since we used one occurrence\n\n            if prev_freq < 0:\n                heapq.heappush(max_heap, (prev_freq, prev_value))\n            \n            prev_freq, prev_value = freq, value\n        else:\n            return []  # Not possible to shuffle without adjacent duplicates\n\n    return result\n\n# Example usage:\nadvertisers = ["A", "A", "B", "B", "C", "C"]\nresult = shuffle_with_no_adjacent_duplicates(advertisers)\nprint(result)