def find_subsets(nums, target):\n    result = []\n    \n    def backtrack(start, path, total):\n        if total == target:\n            result.append(path)\n            return\n        if total > target:\n            return\n        for i in range(start, len(nums)):\n            backtrack(i + 1, path + [nums[i]], total + nums[i])\n    \n    backtrack(0, [], 0)\n    return result\n\n# Read data from file\nwith open('data.txt', 'r') as file:\n    data = file.read().strip().split(',')\n\n# Convert data to float\nnums = list(map(float, data))\n\n# Calculate original sum from file\norig_sum = 5  # Replace this with your original sum\n\n# Calculate correct total sum\ncorrect_sum = sum(nums)\n\n# Calculate difference / 2\ndiff = (correct_sum - orig_sum) / 2\n\n# Find subsets that sum to diff\nsubsets = find_subsets(nums, diff)\n\n# Print subsets\nfor subset in subsets:\n    print(subset)