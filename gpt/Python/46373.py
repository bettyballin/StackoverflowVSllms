import numpy as np\nfrom scipy.sparse import csr_matrix\n\ndef find_dense_submatrix(sparse_matrix, min_overlap=2):\n    matrix = sparse_matrix.todense()\n    num_rows, num_cols = matrix.shape\n    dense_submatrix = None\n    max_size = 0\n\n    for i in range(num_rows):\n        for j in range(i + 1, num_rows):\n            overlap = np.logical_and(matrix[i, :], matrix[j, :]).sum()\n            if overlap >= min_overlap:\n                candidate_rows = [i, j]\n                for k in range(num_rows):\n                    if k not in candidate_rows:\n                        new_overlap = np.logical_and.reduce(matrix[candidate_rows + [k], :]).sum()\n                        if new_overlap >= min_overlap:\n                            candidate_rows.append(k)\n                candidate_matrix = matrix[candidate_rows, :]\n                size = candidate_matrix.sum()\n                if size > max_size:\n                    max_size = size\n                    dense_submatrix = candidate_matrix\n\n    return dense_submatrix\n\n# Example usage\nsparse_matrix = csr_matrix(np.random.randint(0, 2, (10000, 1000000)))\ndense_submatrix = find_dense_submatrix(sparse_matrix)\nprint(dense_submatrix)