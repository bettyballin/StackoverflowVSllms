from pulp import *\n\n# Given data\ntube_lengths = [1, 2.5]  # lengths of tubes we need to cut\ntube_quantities = [10, 20]  # quantities of each tube length needed\nstock_length = 6  # length of the stock tube\n\n# Define the problem\nprob = LpProblem("Cutting_Stock_Problem", LpMinimize)\n\n# Variables\nnum_stocks = LpVariable("num_stocks", lowBound=0, cat='Integer')\ncuts = [(i, j) for i in range(len(tube_lengths)) for j in range(sum(tube_quantities))]\nuse_stock = LpVariable.dicts("use_stock", cuts, 0, 1, cat='Integer')\n\n# Objective: Minimize the number of stock tubes used\nprob += num_stocks\n\n# Constraints\n# Each tube must be cut the required number of times\nfor i in range(len(tube_lengths)):\n    prob += lpSum([use_stock[(i, j)] for j in range(sum(tube_quantities))]) == tube_quantities[i]\n\n# Each stock tube must not exceed its length\nfor j in range(sum(tube_quantities)):\n    prob += lpSum([tube_lengths[i] * use_stock[(i, j)] for i in range(len(tube_lengths))]) <= stock_length * num_stocks\n\n# Solve the problem\nprob.solve()\n\n# Output results\nprint(f"Status: {LpStatus[prob.status]}")\nprint(f"Minimum number of stock tubes needed: {value(num_stocks)}")\nfor j in range(sum(tube_quantities)):\n    if lpSum([tube_lengths[i] * use_stock[(i, j)] for i in range(len(tube_lengths))]).value() > 0:\n        cuts_in_stock = [tube_lengths[i] for i in range(len(tube_lengths)) if use_stock[(i, j)].value() == 1]\n        print(f"Stock tube {j+1} used to cut: {cuts_in_stock}")