from collections import defaultdict\n\nclass TrieNode:\n    def __init__(self):\n        self.children = defaultdict(TrieNode)\n        self.is_end_of_word = False\n        self.index = -1\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word, index):\n        node = self.root\n        for char, freq in word.items():\n            node = node.children[(char, freq)]\n        node.is_end_of_word = True\n        node.index = index\n\n    def search_most_similar(self, word):\n        def dfs(node, word_map):\n            if node.is_end_of_word:\n                similarity = sum(min(word_map.get(char, 0), freq) for (char, freq) in node.children.keys())\n                if similarity > self.max_similarity:\n                    self.max_similarity = similarity\n                    self.result_index = node.index\n            for (char, freq), child in node.children.items():\n                if char in word_map:\n                    dfs(child, word_map)\n        \n        self.max_similarity = 0\n        self.result_index = -1\n        dfs(self.root, word)\n        return self.result_index\n\ndef build_frequency_map(string):\n    freq_map = defaultdict(int)\n    for char in string:\n        freq_map[char] += 1\n    return freq_map\n\ndef find_closest_string(L, S):\n    trie = Trie()\n    for i, string in enumerate(L):\n        freq_map = build_frequency_map(string)\n        trie.insert(freq_map, i)\n    \n    S_freq_map = build_frequency_map(S)\n    index = trie.search_most_similar(S_freq_map)\n    return L[index] if index != -1 else None\n\n# Example usage:\nL = ["apple", "banana", "grape", "orange", "melon"]\nS = "pale"\nprint(find_closest_string(L, S))  # Output: "apple"