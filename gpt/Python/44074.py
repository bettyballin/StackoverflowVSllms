from twisted.internet import reactor, protocol\nfrom twisted.protocols.basic import LineReceiver\n\nimport pickle\n\nclass Echo(LineReceiver):\n    def connectionMade(self):\n        self.factory.clients.append(self)\n        self.setRawMode()\n        self.file_size = None\n        self.received_data = b""\n\n    def connectionLost(self, reason):\n        self.factory.clients.remove(self)\n\n    def rawDataReceived(self, data):\n        if self.file_size is None:\n            try:\n                info = pickle.loads(data)\n                self.file_size = info['size']\n                print(f"Receiving file of size: {self.file_size}")\n            except:\n                print("Failed to load initial data")\n        else:\n            self.received_data += data\n            if len(self.received_data) >= self.file_size:\n                print("Received complete file")\n                # Process received_data as needed\n                self.received_data = b""  # Reset for next file\n\ndef main():\n    factory = protocol.ServerFactory()\n    factory.protocol = Echo\n    factory.clients = []\n    reactor.listenTCP(8000, factory)\n    reactor.run()\n\nif __name__ == '__main__':\n    main()