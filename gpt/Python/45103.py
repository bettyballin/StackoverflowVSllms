import re\n   from difflib import SequenceMatcher\n\n   def flex_match_score(query, name):\n       # Create a regex pattern for the query\n       pattern = '.*?'.join(map(re.escape, query))\n       regex = re.compile(pattern)\n       \n       # Find all matches in the name\n       matches = regex.findall(name)\n       \n       if not matches:\n           return 0\n       \n       # Calculate the score based on the match positions\n       match = matches[0]\n       score = SequenceMatcher(None, query, match).ratio()\n       \n       return score\n\n   def get_best_matches(query, results):\n       scored_results = [(result, flex_match_score(query, result['name'])) for result in results]\n       return sorted(scored_results, key=lambda x: x[1], reverse=True)\n\n   # Example usage\n   query = 'mit'\n   results = [{'id': 1, 'name': 'Massachusetts Institute of Technology'}, \n              {'id': 2, 'name': 'Microsoft Corporation'}]\n   \n   best_matches = get_best_matches(query, results)\n   print(best_matches)