import math\nfrom sympy import isprime\nfrom sympy.ntheory import nextprime\n\ndef perfect_power(n):\n    """ Check if n is a perfect power: n = a^b """\n    for b in range(2, int(math.log2(n)) + 1):\n        a = int(round(n ** (1 / b)))\n        if a ** b == n:\n            return True\n    return False\n\ndef multiplicative_order(a, n):\n    """ Find the smallest k such that a^k â‰¡ 1 (mod n) """\n    k = 1\n    ak = a % n\n    while ak != 1:\n        ak = (ak * a) % n\n        k += 1\n    return k\n\ndef aks(n):\n    if n == 1:\n        return False\n    if isprime(n):\n        return True\n    if perfect_power(n):\n        return False\n        \n    r = 2\n    while True:\n        if math.gcd(n, r) != 1:\n            r += 1\n            continue\n        order = multiplicative_order(n, r)\n        if order > math.log2(n) ** 2:\n            break\n        r += 1\n    \n    for a in range(1, min(r, n)):\n        if pow(a, n, n) != a % n:\n            return False\n            \n    return True\n\n# Example usage\nprint(aks(17))  # Output: True\nprint(aks(15))  # Output: False