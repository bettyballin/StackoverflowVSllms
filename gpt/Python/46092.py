import psutil\nimport time\nimport os\n\ndef monitor_process(pid, max_memory, check_interval, max_response_time):\n    try:\n        process = psutil.Process(pid)\n    except psutil.NoSuchProcess:\n        print(f"No process with PID {pid}")\n        return\n\n    while True:\n        try:\n            # Check memory usage\n            memory_info = process.memory_info()\n            if memory_info.rss > max_memory:\n                print(f"Process {pid} exceeds memory limit. Killing process.")\n                process.kill()\n                break\n\n            # Check responsiveness\n            start_time = time.time()\n            if not process.is_running():\n                print(f"Process {pid} is not running. Exiting monitor.")\n                break\n            time_taken = time.time() - start_time\n            if time_taken > max_response_time:\n                print(f"Process {pid} is not responding. Killing process.")\n                process.kill()\n                break\n\n            time.sleep(check_interval)\n        except psutil.NoSuchProcess:\n            print(f"Process {pid} no longer exists. Exiting monitor.")\n            break\n\nif __name__ == "__main__":\n    PID = 1234  # Replace with your target process PID\n    MAX_MEMORY = 500 * 1024 * 1024  # 500 MB\n    CHECK_INTERVAL = 5  # Check every 5 seconds\n    MAX_RESPONSE_TIME = 2  # Max response time in seconds\n\n    monitor_process(PID, MAX_MEMORY, CHECK_INTERVAL, MAX_RESPONSE_TIME)