class CircularBuffer:\n    def __init__(self, size):\n        self.buffer = [None] * size\n        self.size = size\n        self.start = 0\n        self.end = 0\n        self.count = 0\n\n    def add(self, item):\n        self.buffer[self.end] = item\n        if self.count == self.size:\n            self.start = (self.start + 1) % self.size\n        else:\n            self.count += 1\n        self.end = (self.end + 1) % self.size\n\n    def get(self, index):\n        if index < 0 or index >= self.count:\n            raise IndexError("Index out of bounds")\n        return self.buffer[(self.start + index) % self.size]\n\n    def rotate_left(self):\n        if self.count > 0:\n            self.start = (self.start + 1) % self.size\n            self.end = (self.end + 1) % self.size\n\n    def rotate_right(self):\n        if self.count > 0:\n            self.start = (self.start - 1 + self.size) % self.size\n            self.end = (self.end - 1 + self.size) % self.size\n    \n    def __str__(self):\n        return str([self.get(i) for i in range(self.count)])\n\n# Example usage\nicons = ['icon1', 'icon2', 'icon3', 'icon4', 'icon5']\nbuffer = CircularBuffer(len(icons))\n\nfor icon in icons:\n    buffer.add(icon)\n\nprint("Initial buffer:", buffer)\n\n# Rotate left to simulate browsing right\nbuffer.rotate_left()\nprint("After rotating left:", buffer)\n\n# Rotate right to simulate browsing left\nbuffer.rotate_right()\nprint("After rotating right:", buffer)