class AhoCorasick:\n    def __init__(self, keywords):\n        self.build_trie(keywords)\n        self.build_failure_links()\n\n    def build_trie(self, keywords):\n        self.trie = {}\n        self.output = {}\n        self.fail = {}\n        new_state = 0\n\n        for keyword in keywords:\n            current_state = 0\n            for char in keyword:\n                if (current_state, char) not in self.trie:\n                    new_state += 1\n                    self.trie[(current_state, char)] = new_state\n                current_state = self.trie[(current_state, char)]\n            self.output[current_state] = self.output.get(current_state, []) + [keyword]\n\n    def build_failure_links(self):\n        from collections import deque\n        queue = deque()\n        for char in set(char for (_, char) in self.trie):\n            if (0, char) in self.trie:\n                state = self.trie[(0, char)]\n                self.fail[state] = 0\n                queue.append(state)\n            else:\n                self.trie[(0, char)] = 0\n\n        while queue:\n            r = queue.popleft()\n            for (r, char) in [(r, char) for (_, char) in self.trie if _ == r]:\n                s = self.trie[(r, char)]\n                queue.append(s)\n                state = self.fail[r]\n                while (state, char) not in self.trie:\n                    state = self.fail[state]\n                self.fail[s] = self.trie[(state, char)]\n                self.output[s] = self.output.get(s, []) + self.output.get(self.fail[s], [])\n\n    def search(self, text):\n        state = 0\n        results = []\n        for index, char in enumerate(text):\n            while (state, char) not in self.trie and state != 0:\n                state = self.fail[state]\n            state = self.trie.get((state, char), 0)\n            if state in self.output:\n                for keyword in self.output[state]:\n                    results.append((index - len(keyword) + 1, keyword))\n        return results\n\n# Example usage:\nkeywords = ["he", "she", "his", "hers"]\ntext = "ahishers"\nac = AhoCorasick(keywords)\nmatches = ac.search(text)\nprint(matches)  # Output: [(1, 'his'), (2, 'she'), (4, 'hers')]