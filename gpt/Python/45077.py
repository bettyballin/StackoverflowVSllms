from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom cryptography.hazmat.backends import default_backend\nimport os\n\n# Generate a random 256-bit key\nkey = os.urandom(32)\n# Generate a random 128-bit IV\niv = os.urandom(16)\n\n# Sample plaintext\nplaintext = b'Secure message'\n\n# Pad the plaintext to a multiple of block size (AES block size is 128 bits)\npadder = padding.PKCS7(128).padder()\npadded_plaintext = padder.update(plaintext) + padder.finalize()\n\n# Encrypt\ncipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())\nencryptor = cipher.encryptor()\nciphertext = encryptor.update(padded_plaintext) + encryptor.finalize()\n\nprint(f'Ciphertext: {ciphertext.hex()}')\n\n# Decrypt\ndecryptor = cipher.decryptor()\ndecrypted_padded_plaintext = decryptor.update(ciphertext) + decryptor.finalize()\n\n# Unpad the plaintext\nunpadder = padding.PKCS7(128).unpadder()\ndecrypted_plaintext = unpadder.update(decrypted_padded_plaintext) + unpadder.finalize()\n\nprint(f'Decrypted plaintext: {decrypted_plaintext}')