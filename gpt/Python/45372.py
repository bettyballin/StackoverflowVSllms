function A_Star(start, goal, h):\n    open_list = priority_queue()\n    open_list.put(start, 0)\n    came_from = {}\n    g_score = {start: 0}\n    f_score = {start: h(start, goal)}\n\n    while not open_list.empty():\n        current = open_list.get()\n\n        if current == goal:\n            return reconstruct_path(came_from, current)\n\n        for neighbor in get_neighbors(current):\n            tentative_g_score = g_score[current] + distance(current, neighbor)\n\n            if neighbor in closed_list and tentative_g_score >= g_score.get(neighbor, float('inf')):\n                continue\n\n            if tentative_g_score < g_score.get(neighbor, float('inf')) or neighbor not in [i[1] for i in open_list.queue]:\n                came_from[neighbor] = current\n                g_score[neighbor] = tentative_g_score\n                f_score[neighbor] = g_score[neighbor] + h(neighbor, goal)\n                if neighbor not in [i[1] for i in open_list.queue]:\n                    open_list.put(neighbor, f_score[neighbor])\n\n        closed_list.add(current)\n\n    return failure  # No path found\n\nfunction reconstruct_path(came_from, current):\n    total_path = [current]\n    while current in came_from:\n        current = came_from[current]\n        total_path.append(current)\n    return total_path[::-1]