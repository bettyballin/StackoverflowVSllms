import cv2\n\n   def compute_feature_matching(imageA, imageB):\n       # Initiate SIFT detector\n       sift = cv2.SIFT_create()\n\n       # Find the keypoints and descriptors with SIFT\n       kpA, desA = sift.detectAndCompute(imageA, None)\n       kpB, desB = sift.detectAndCompute(imageB, None)\n\n       # FLANN parameters\n       FLANN_INDEX_KDTREE = 1\n       index_params = dict(algorithm=FLANN_INDEX_KDTREE, trees=5)\n       search_params = dict(checks=50)\n\n       flann = cv2.FlannBasedMatcher(index_params, search_params)\n\n       # Match descriptors\n       matches = flann.knnMatch(desA, desB, k=2)\n\n       # Apply ratio test\n       good_matches = []\n       for m, n in matches:\n           if m.distance < 0.7 * n.distance:\n               good_matches.append(m)\n\n       return good_matches\n\n   # Example usage\n   imageA = cv2.imread('image1.jpg')\n   imageB = cv2.imread('image2.jpg')\n\n   good_matches = compute_feature_matching(imageA, imageB)\n   print(f"Number of good matches: {len(good_matches)}")