class TrieNode:\n    def __init__(self, key):\n        self.key = key\n        self.children = {}\n        self.is_end_of_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode("")\n\n    def find(self, key):\n        current_node = self.root\n        prefix = ""\n        while key:\n            for k, child in current_node.children.items():\n                if key.startswith(k):\n                    prefix += k\n                    current_node = child\n                    key = key[len(k):]\n                    break\n            else:\n                break\n        return current_node, prefix\n\n    def insert(self, key):\n        current_node, prefix = self.find(key)\n        remaining_key = key[len(prefix):]\n        \n        if remaining_key == "":\n            current_node.is_end_of_word = True\n            return\n        \n        if prefix == current_node.key:\n            current_node.children[remaining_key] = TrieNode(remaining_key)\n            current_node.children[remaining_key].is_end_of_word = True\n            return\n        \n        common_prefix_length = 0\n        for i in range(min(len(current_node.key), len(remaining_key))):\n            if current_node.key[i] != remaining_key[i]:\n                break\n            common_prefix_length = i + 1\n        \n        if common_prefix_length == 0:\n            current_node.children[remaining_key] = TrieNode(remaining_key)\n            current_node.children[remaining_key].is_end_of_word = True\n            return\n        \n        common_prefix = current_node.key[:common_prefix_length]\n        remaining_key_after_prefix = remaining_key[common_prefix_length:]\n        remaining_key_current_node = current_node.key[common_prefix_length:]\n        \n        new_child = TrieNode(remaining_key_after_prefix)\n        new_child.is_end_of_word = True\n        \n        new_common_node = TrieNode(common_prefix)\n        new_common_node.children[remaining_key_after_prefix] = new_child\n        \n        if remaining_key_current_node:\n            current_node.key = remaining_key_current_node\n            new_common_node.children[remaining_key_current_node] = current_node\n        else:\n            new_common_node.is_end_of_word = current_node.is_end_of_word\n            new_common_node.children = current_node.children\n        \n        current_node.key = common_prefix\n        current_node.children = {common_prefix: new_common_node}\n\n# Example usage\ntrie = Trie()\ntrie.insert("stackoverflow")\ntrie.insert("stackbase")\ntrie.insert("stackbased")