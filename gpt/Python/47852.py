def smallest_window_with_duplicates(A, B):\n    from collections import defaultdict, Counter\n    \n    n = len(A)\n    m = len(B)\n    \n    if m > n:\n        return -1, -1\n    \n    # Store frequency of elements in B\n    B_freq = Counter(B)\n    required_elements = len(B_freq)\n    \n    # Dictionary to keep track of counts of elements in the current window\n    window_counts = defaultdict(int)\n    \n    left = 0\n    min_len = float('inf')\n    min_window = (-1, -1)\n    formed = 0\n    \n    for right in range(n):\n        element = A[right]\n        if element in B_freq:\n            window_counts[element] += 1\n            if window_counts[element] == B_freq[element]:\n                formed += 1\n        \n        while left <= right and formed == required_elements:\n            if right - left + 1 < min_len:\n                min_len = right - left + 1\n                min_window = (left, right)\n            \n            left_element = A[left]\n            if left_element in B_freq:\n                if window_counts[left_element] == B_freq[left_element]:\n                    formed -= 1\n                window_counts[left_element] -= 1\n            left += 1\n    \n    return min_window\n\n# Example usage:\nA = [1, 2, 4, 2, 5, 7]\nB = [2, 2, 5]\nprint(smallest_window_with_duplicates(A, B))  # Output: (1, 4)