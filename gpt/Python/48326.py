from cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import padding, rsa\nfrom cryptography.hazmat.primitives import serialization\n\n# Load public key\nwith open("public_key.pem", "rb") as f:\n    public_pem = f.read()\npublic_key = serialization.load_pem_public_key(public_pem)\n\n# Load the file and signature\nfile_to_verify = b"file content"\nwith open("file.sig", "rb") as f:\n    signature = f.read()\n\n# Verify the signature\ntry:\n    public_key.verify(\n        signature,\n        file_to_verify,\n        padding.PSS(\n            mgf=padding.MGF1(hashes.SHA256()),\n            salt_length=padding.PSS.MAX_LENGTH\n        ),\n        hashes.SHA256()\n    )\n    print("Signature is valid.")\nexcept:\n    print("Signature is invalid.")