from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\nimport numpy as np\n\n# Sample data: list of articles with 'title' and 'text'\narticles = [\n    {"title": "Article 1", "text": "This is the text of the first article."},\n    {"title": "Article 2", "text": "Text of the second article is here."},\n    {"title": "Article 3", "text": "Here is the text of the third article."}\n]\n\n# Function to find similar articles\ndef find_similar_articles(input_text, articles, top_n=3):\n    # Extract texts from articles\n    texts = [article['text'] for article in articles]\n    \n    # Add the input text to the list of texts\n    texts.append(input_text)\n    \n    # Create a TF-IDF Vectorizer\n    vectorizer = TfidfVectorizer()\n    \n    # Fit and transform the texts\n    tfidf_matrix = vectorizer.fit_transform(texts)\n    \n    # Compute cosine similarity between the input text and all articles\n    cosine_sim = cosine_similarity(tfidf_matrix[-1], tfidf_matrix[:-1])\n    \n    # Get the top N similar articles\n    similar_indices = cosine_sim[0].argsort()[-top_n:][::-1]\n    \n    # Fetch titles of the most similar articles\n    similar_articles = [(articles[index]['title'], cosine_sim[0][index]) for index in similar_indices]\n    \n    return similar_articles\n\n# Example usage\ninput_text = "This is a sample input text to find similar articles."\ntop_similar_articles = find_similar_articles(input_text, articles, top_n=2)\n\nfor title, score in top_similar_articles:\n    print(f"Title: {title}, Similarity Score: {score:.4f}")