from twisted.internet import reactor, protocol\n\nclass P2PProtocol(protocol.Protocol):\n    def connectionMade(self):\n        self.transport.write(b"Hello, peer!")\n    \n    def dataReceived(self, data):\n        print(f"Data received from peer: {data}")\n        self.transport.loseConnection()\n\nclass P2PFactory(protocol.Factory):\n    def buildProtocol(self, addr):\n        return P2PProtocol()\n\n# Start the server to listen for incoming connections\nreactor.listenTCP(8000, P2PFactory())\n\n# Connect to a peer (replace 'peer_address' with the actual peer's address)\nreactor.connectTCP('peer_address', 8000, P2PFactory())\n\nreactor.run()