def find_cycles(graph):\n    def dfs(v, parent):\n        visited[v] = True\n        stack.append(v)\n        \n        for neighbor in graph[v]:\n            if not visited[neighbor]:\n                if dfs(neighbor, v):\n                    return True\n            elif neighbor != parent:\n                # A cycle is detected\n                cycle_start = stack.index(neighbor)\n                cycles.append(stack[cycle_start:])\n                return True\n        \n        stack.pop()\n        return False\n    \n    visited = {node: False for node in graph}\n    stack = []\n    cycles = []\n    \n    for node in graph:\n        if not visited[node]:\n            if dfs(node, None):\n                break\n    \n    return cycles\n\n# Example usage:\ngraph = {\n    0: [1, 2],\n    1: [0, 2],\n    2: [0, 1, 3, 4],\n    3: [2, 4],\n    4: [2, 3]\n}\n\nprint(find_cycles(graph))