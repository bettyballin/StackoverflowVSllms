class Interval:\n    def __init__(self, low, high):\n        self.low = low\n        self.high = high\n\nclass Node:\n    def __init__(self, interval):\n        self.interval = interval\n        self.max = interval.high\n        self.left = None\n        self.right = None\n\nclass IntervalTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, root, interval):\n        if root is None:\n            return Node(interval)\n        \n        if interval.low < root.interval.low:\n            root.left = self.insert(root.left, interval)\n        else:\n            root.right = self.insert(root.right, interval)\n        \n        if root.max < interval.high:\n            root.max = interval.high\n        \n        return root\n\n    def build_tree(self, intervals):\n        for interval in intervals:\n            self.root = self.insert(self.root, interval)\n\n    def query(self, root, point):\n        if root is None:\n            return []\n        \n        result = []\n        if root.interval.low <= point <= root.interval.high:\n            result.append(root.interval)\n        \n        if root.left is not None and root.left.max >= point:\n            result.extend(self.query(root.left, point))\n        \n        result.extend(self.query(root.right, point))\n        \n        return result\n\n# Example usage\nintervals = [Interval(0, 5), Interval(10, 20), Interval(7, 13), Interval(-1, 37)]\ntree = IntervalTree()\ntree.build_tree(intervals)\n\npoint = 12\nresult = tree.query(tree.root, point)\nfor interval in result:\n    print(f"Interval [{interval.low}, {interval.high}] contains point {point}")