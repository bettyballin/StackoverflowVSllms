def minimal_sticks(piles, lengths, quantities):\n    max_sum = sum(length * quantity for length, quantity in zip(lengths, quantities))\n    dp = [float('inf')] * (max_sum + 1)\n    dp[0] = 0\n\n    for length, quantity in zip(lengths, quantities):\n        for _ in range(quantity):\n            for i in range(max_sum, length - 1, -1):\n                dp[i] = min(dp[i], dp[i - length] + 1)\n\n    # Find the minimal number of sticks needed\n    min_sticks = float('inf')\n    for i in range(max_sum + 1):\n        if dp[i] != float('inf'):\n            min_sticks = min(min_sticks, dp[i])\n\n    result = []\n    for i in range(max_sum + 1):\n        if dp[i] == min_sticks:\n            result.append(i)\n\n    return result, min_sticks\n\n# Example usage\npiles = 4\nlengths = [11, 7, 5, 4]\nquantities = [1, 1, 3, 3]\n\nresult, min_sticks = minimal_sticks(piles, lengths, quantities)\nprint(f"Optimal lengths: {result}")\nprint(f"Minimal number of sticks: {min_sticks}")