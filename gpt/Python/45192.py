def preprocess_strong_suffix(shift, bpos, pat, m):\n    i = m\n    j = m + 1\n    bpos[i] = j\n\n    while i > 0:\n        while j <= m and pat[i - 1] != pat[j - 1]:\n            if shift[j] == 0:\n                shift[j] = j - i\n            j = bpos[j]\n        i -= 1\n        j -= 1\n        bpos[i] = j\n\ndef preprocess_case2(shift, bpos, m):\n    j = bpos[0]\n    for i in range(m + 1):\n        if shift[i] == 0:\n            shift[i] = j\n        if i == j:\n            j = bpos[j]\n\ndef build_mismatch_table(pat):\n    m = len(pat)\n    shift = [0] * (m + 1)\n    bpos = [0] * (m + 1)\n\n    preprocess_strong_suffix(shift, bpos, pat, m)\n    preprocess_case2(shift, bpos, m)\n\n    return shift[1:]\n\n# Example usage\npattern = 'anpanman'\nmismatch_table = build_mismatch_table(pattern)\nprint(mismatch_table)