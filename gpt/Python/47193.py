from collections import deque\nimport random\nimport time\n\nclass Entity:\n    def __init__(self, name):\n        self.entities = []\n        self.name = name\n        self.counter = 1\n        self.depth = 0\n\n    def add_entity(self, e):\n        e.depth = self.depth + 1\n        self.entities.append(e)\n\n    def inc_counter_r(self):\n        for e in self.entities:\n            e.counter += 1\n            e.inc_counter_r()\n\n    def children(self):\n        stack = deque([self.entities])\n        while stack:\n            entities = stack.pop()\n            for e in entities:\n                yield e\n                if e.entities:\n                    stack.append(e.entities)\n\nroot = Entity("main")\ndef fill_node(root, max_depth):\n    if root.depth <= max_depth:\n        for i in range(random.randint(10, 15)):\n            e = Entity("node_%s_%s" % (root.depth, i))\n            root.add_entity(e)\n            fill_node(e, max_depth)\nfill_node(root, 3)\n\n# Test code\ns = time.time()\nfor _ in range(100):\n    root.inc_counter_r()\nprint("recursive:", time.time() - s)\n\ns = time.time()\nfor _ in range(100):\n    for e in root.children():\n        e.counter += 1\nprint("generator:", time.time() - s)