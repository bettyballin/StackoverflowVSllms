import socketserver\nimport socket\nimport sys\nimport os\nimport time\n\nclass MyRequestHandler(socketserver.BaseRequestHandler):\n    def handle(self):\n        try:\n            print(f"Connected: {self.client_address}")\n\n            user = self.request.recv(1024).strip().decode().split(":")[1]\n            user = int(user)\n            self.request.sendall(f'Welcome #{user}'.encode())\n\n            self.usocket_path = f'/tmp/u{user}.sock'\n            if os.path.exists(self.usocket_path):\n                os.remove(self.usocket_path)\n\n            self.usocket = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n            self.usocket.bind(self.usocket_path)\n            self.usocket.listen(1)\n\n            while True:\n                usocket_conn, addr = self.usocket.accept()\n                try:\n                    while True:\n                        data = usocket_conn.recv(1024)\n                        if not data: \n                            break\n                        self.request.sendall(data)\n                finally:\n                    usocket_conn.close()\n                time.sleep(0.1)\n\n        except KeyboardInterrupt:\n            self.request.sendall('close'.encode())\n            self.request.close()\n        except Exception as e:\n            print(f"Exception: {e}")\n        finally:\n            if hasattr(self, 'usocket'):\n                self.usocket.close()\n            if os.path.exists(self.usocket_path):\n                os.remove(self.usocket_path)\n\nif __name__ == "__main__":\n    server = socketserver.ThreadingTCPServer(('', 8081), MyRequestHandler)\n    try:\n        server.serve_forever()\n    except KeyboardInterrupt:\n        server.shutdown()\n        server.server_close()