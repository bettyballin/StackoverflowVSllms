import ply.lex as lex\n   import ply.yacc as yacc\n\n   # Define tokens\n   tokens = ('NUMBER', 'PLUS', 'MINUS', 'TIMES', 'DIVIDE', 'LPAREN', 'RPAREN')\n\n   # Define token rules\n   t_PLUS = r'\+'\n   t_MINUS = r'-'\n   t_TIMES = r'\*'\n   t_DIVIDE = r'/'\n   t_LPAREN = r'\('\n   t_RPAREN = r'\)'\n\n   def t_NUMBER(t):\n       r'\d+'\n       t.value = int(t.value)\n       return t\n\n   t_ignore = ' \t'\n\n   def t_error(t):\n       print(f"Illegal character '{t.value[0]}'")\n       t.lexer.skip(1)\n\n   lexer = lex.lex()\n\n   # Define grammar rules\n   def p_expression_plus(p):\n       'expression : expression PLUS term'\n       p[0] = ('+', p[1], p[3])\n\n   def p_expression_minus(p):\n       'expression : expression MINUS term'\n       p[0] = ('-', p[1], p[3])\n\n   def p_expression_term(p):\n       'expression : term'\n       p[0] = p[1]\n\n   def p_term_times(p):\n       'term : term TIMES factor'\n       p[0] = ('*', p[1], p[3])\n\n   def p_term_div(p):\n       'term : term DIVIDE factor'\n       p[0] = ('/', p[1], p[3])\n\n   def p_term_factor(p):\n       'term : factor'\n       p[0] = p[1]\n\n   def p_factor_num(p):\n       'factor : NUMBER'\n       p[0] = p[1]\n\n   def p_factor_expr(p):\n       'factor : LPAREN expression RPAREN'\n       p[0] = p[2]\n\n   def p_error(p):\n       print("Syntax error in input!")\n\n   parser = yacc.yacc()\n\n   result = parser.parse("3 + 4 * (2 - 1)")\n   print(result)