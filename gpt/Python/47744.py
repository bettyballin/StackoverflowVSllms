def quicksort(arr, low, high):\n    if low < high:\n        pi = partition(arr, low, high)\n        quicksort(arr, low, pi - 1)\n        quicksort(arr, pi + 1, high)\n\ndef partition(arr, low, high):\n    mid = low + (high - low) // 2\n    pivot = median_of_three(arr, low, mid, high)\n    arr[pivot], arr[high] = arr[high], arr[pivot]\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i + 1], arr[high] = arr[high], arr[i + 1]\n    return i + 1\n\ndef median_of_three(arr, low, mid, high):\n    if (arr[low] - arr[mid]) * (arr[high] - arr[low]) >= 0:\n        return low\n    elif (arr[mid] - arr[low]) * (arr[high] - arr[mid]) >= 0:\n        return mid\n    else:\n        return high\n\n# Example usage\narr = [3, 2, 1, 5, 4]\nquicksort(arr, 0, len(arr) - 1)\nprint(arr)  # Output: [1, 2, 3, 4, 5]