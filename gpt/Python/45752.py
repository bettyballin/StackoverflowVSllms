def a_star(graph, start, goal, heuristic):\n       open_set = {start}\n       came_from = {}\n       g_score = {node: float('inf') for node in graph}\n       g_score[start] = 0\n       f_score = {node: float('inf') for node in graph}\n       f_score[start] = heuristic(start, goal)\n\n       while open_set:\n           current = min(open_set, key=lambda node: f_score[node])\n\n           if current == goal:\n               path = []\n               while current in came_from:\n                   path.append(current)\n                   current = came_from[current]\n               return path[::-1]\n\n           open_set.remove(current)\n           for neighbor, weight in graph[current]:\n               tentative_g_score = g_score[current] + weight\n               if tentative_g_score < g_score[neighbor]:\n                   came_from[neighbor] = current\n                   g_score[neighbor] = tentative_g_score\n                   f_score[neighbor] = g_score[neighbor] + heuristic(neighbor, goal)\n                   open_set.add(neighbor)\n\n       return None