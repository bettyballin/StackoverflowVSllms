import os\nimport hashlib\nimport json\nimport shutil\nfrom datetime import datetime\n\nBACKUP_METADATA_FILE = 'backup_metadata.json'\n\ndef calculate_file_hash(file_path):\n    sha256_hash = hashlib.sha256()\n    with open(file_path, "rb") as f:\n        for byte_block in iter(lambda: f.read(4096), b""):\n            sha256_hash.update(byte_block)\n    return sha256_hash.hexdigest()\n\ndef load_backup_metadata():\n    if os.path.exists(BACKUP_METADATA_FILE):\n        with open(BACKUP_METADATA_FILE, 'r') as f:\n            return json.load(f)\n    return {}\n\ndef save_backup_metadata(metadata):\n    with open(BACKUP_METADATA_FILE, 'w') as f:\n        json.dump(metadata, f, indent=4)\n\ndef backup_files(source_dir, backup_dir):\n    metadata = load_backup_metadata()\n    new_metadata = {}\n    \n    for root, _, files in os.walk(source_dir):\n        for file in files:\n            source_file = os.path.join(root, file)\n            relative_path = os.path.relpath(source_file, source_dir)\n            backup_file = os.path.join(backup_dir, relative_path)\n\n            file_hash = calculate_file_hash(source_file)\n            file_mtime = os.path.getmtime(source_file)\n\n            if relative_path in metadata:\n                if metadata[relative_path]['hash'] != file_hash:\n                    shutil.copy2(source_file, backup_file)\n                    print(f'Updated: {relative_path}')\n            else:\n                os.makedirs(os.path.dirname(backup_file), exist_ok=True)\n                shutil.copy2(source_file, backup_file)\n                print(f'Added: {relative_path}')\n\n            new_metadata[relative_path] = {\n                'hash': file_hash,\n                'mtime': file_mtime\n            }\n\n    for file in set(metadata) - set(new_metadata):\n        print(f'Removed: {file}')\n        os.remove(os.path.join(backup_dir, file))\n\n    save_backup_metadata(new_metadata)\n\nif __name__ == "__main__":\n    source_directory = '/path/to/usb'\n    backup_directory = '/path/to/backup'\n    backup_files(source_directory, backup_directory)