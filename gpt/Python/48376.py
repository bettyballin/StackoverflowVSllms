class SpanThing:\n    def __init__(self, data):\n        self.data = data\n        self.n = len(data[0])\n        self.segment_trees = [self.build_segment_tree(row) for row in data]\n    \n    def build_segment_tree(self, arr):\n        n = len(arr)\n        seg_tree = [float('inf')] * (2 * n)\n        \n        # Build the segment tree\n        for i in range(n):\n            seg_tree[n + i] = arr[i]\n        for i in range(n - 1, 0, -1):\n            seg_tree[i] = min(seg_tree[2 * i], seg_tree[2 * i + 1])\n        \n        return seg_tree\n    \n    def query_segment_tree(self, seg_tree, left, right):\n        n = len(seg_tree) // 2\n        left += n\n        right += n\n        min_val = float('inf')\n        \n        while left < right:\n            if left % 2:\n                min_val = min(min_val, seg_tree[left])\n                left += 1\n            if right % 2:\n                right -= 1\n                min_val = min(min_val, seg_tree[right])\n            left //= 2\n            right //= 2\n        \n        return min_val\n    \n    def MinsSmart(self, from_idx, to_idx):\n        result = []\n        for seg_tree in self.segment_trees:\n            result.append(self.query_segment_tree(seg_tree, from_idx, to_idx))\n        return result\n\n# Example usage:\ndata = [\n    [0, 5, 6, 2, 7, 9, 4, 1, 7, 2, 8, 4, 2],\n    [3, 5, 2, 6, 8, 4, 7, 5, 9, 1, 0, 3, 6]\n]\n\nspan_thing = SpanThing(data)\nprint(span_thing.MinsSmart(1, 5))  # Example query from index 1 to 5