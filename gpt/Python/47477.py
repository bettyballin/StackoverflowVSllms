class Node:\n    def __init__(self, id, max_throughput, storage_capacity, is_producer=False, is_consumer=False):\n        self.id = id\n        self.max_throughput = max_throughput\n        self.storage_capacity = storage_capacity\n        self.is_producer = is_producer\n        self.is_consumer = is_consumer\n        self.current_storage = 0\n        self.connections = set()\n        self.responsibility = 0\n\ndef initialize_responsibilities(nodes):\n    for node in nodes:\n        if node.is_consumer:\n            node.responsibility = node.max_throughput\n\ndef prioritize_connections(nodes):\n    nodes.sort(key=lambda n: (n.responsibility, -n.max_throughput))\n\ndef connect_nodes(nodes, max_connections=8):\n    for node in nodes:\n        if len(node.connections) >= max_connections:\n            continue\n        for target in nodes:\n            if node == target or len(target.connections) >= max_connections:\n                continue\n            if node.responsibility > 0 and target.responsibility > 0:\n                node.connections.add(target)\n                target.connections.add(node)\n                transfer_responsibility(node, target)\n\ndef transfer_responsibility(node, target):\n    transfer_amount = min(node.responsibility, target.max_throughput)\n    node.responsibility -= transfer_amount\n    target.responsibility -= transfer_amount\n\ndef dynamic_adjustment(nodes):\n    for node in nodes:\n        if node.is_producer:\n            produce_units(node)\n        elif node.is_consumer:\n            consume_units(node)\n        balance_storage(node)\n\ndef produce_units(node):\n    produced_units = min(node.max_throughput, node.storage_capacity - node.current_storage)\n    node.current_storage += produced_units\n\ndef consume_units(node):\n    consumed_units = min(node.max_throughput, node.current_storage)\n    node.current_storage -= consumed_units\n\ndef balance_storage(node):\n    for target in node.connections:\n        if node.current_storage > target.current_storage:\n            transfer_units(node, target)\n\ndef transfer_units(node, target):\n    transfer_amount = min(node.current_storage - target.current_storage, target.max_throughput)\n    node.current_storage -= transfer_amount\n    target.current_storage += transfer_amount\n\n# Example usage\nnodes = [Node(i, 10, 100, is_producer=(i < 2), is_consumer=(i >= 8)) for i in range(10)]\ninitialize_responsibilities(nodes)\nprioritize_connections(nodes)\nconnect_nodes(nodes)\ndynamic_adjustment(nodes)