class TreeNode:\n    def __init__(self, value):\n        self.value = value\n        self.children = []\n\ndef merge_trees(nodeA, nodeB):\n    if not nodeA and not nodeB:\n        return None\n    if not nodeA:\n        return nodeB\n    if not nodeB:\n        return nodeA\n\n    merged_node = TreeNode(nodeA.value)\n    merged_children = {}\n\n    for child in nodeA.children:\n        merged_children[child.value] = child\n\n    for child in nodeB.children:\n        if child.value in merged_children:\n            merged_children[child.value] = merge_trees(merged_children[child.value], child)\n        else:\n            merged_children[child.value] = child\n\n    merged_node.children = list(merged_children.values())\n    return merged_node\n\n# Helper function to print tree for verification\ndef print_tree(node, level=0):\n    if node:\n        print(' ' * level + node.value)\n        for child in node.children:\n            print_tree(child, level + 2)\n\n# Example trees\ntreeA = TreeNode('root')\nchild_a_A = TreeNode('a')\nchild_a_A.children.append(TreeNode('abc'))\nchild_b_A = TreeNode('b')\nchild_b_A.children.append(TreeNode('xyz'))\ntreeA.children.extend([child_a_A, child_b_A])\n\ntreeB = TreeNode('root')\nchild_a_B = TreeNode('a')\nchild_a_B.children.append(TreeNode('qrs'))\nchild_b_B = TreeNode('b')\nchild_b_B.children.append(TreeNode('xyz'))\nchild_b_B.children[0].children.append(TreeNode('pdq'))\nchild_c_B = TreeNode('c')\nchild_c_B.children.append(TreeNode('pdq'))\ntreeB.children.extend([child_a_B, child_b_B, child_c_B])\n\n# Merge trees\ntreeMerged = merge_trees(treeA, treeB)\n\n# Print merged tree\nprint_tree(treeMerged)