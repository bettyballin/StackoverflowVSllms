class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef build_tree_postorder(postorder, is_leaf):\n    if not postorder:\n        return None\n    \n    root_val = postorder.pop()\n    root = TreeNode(root_val)\n    \n    if is_leaf(root_val):\n        return root\n    \n    right = build_tree_postorder(postorder, is_leaf)\n    left = build_tree_postorder(postorder, is_leaf)\n    \n    root.right = right\n    root.left = left\n    \n    return root\n\ndef preorder_traversal(root):\n    if not root:\n        return []\n    return [root.val] + preorder_traversal(root.left) + preorder_traversal(root.right)\n\n# Example usage\npostorder = ['D', 'E', 'B', 'F', 'G', 'C', 'A']\nis_leaf = lambda x: x in {'D', 'E', 'F', 'G'}\n\nroot = build_tree_postorder(postorder, is_leaf)\npreorder = preorder_traversal(root)\nprint(preorder)  # Output should be the preorder traversal of the tree