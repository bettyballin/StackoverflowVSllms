import multiprocessing\nimport os\n\ndef child_process(conn):\n    # Receive data from the pipe\n    data = conn.recv()\n    print(f"Child process {os.getpid()} received data: {data}")\n    conn.close()\n\nif __name__ == "__main__":\n    # Create a Pipe\n    parent_conn, child_conn = multiprocessing.Pipe()\n\n    # Fork the child process\n    pid = os.fork()\n\n    if pid == 0:\n        # In child process\n        parent_conn.close()  # Close the parent connection in the child\n        child_process(child_conn)\n    else:\n        # In parent process\n        child_conn.close()  # Close the child connection in the parent\n        data_to_share = "Hello from parent!"\n        parent_conn.send(data_to_share)\n        parent_conn.close()\n        os.wait()  # Wait for child process to complete