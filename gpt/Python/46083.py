def is_point_in_triangle(p, a, b, c):\n    # Vector cross product to determine position relative to the sides\n    def sign(p1, p2, p3):\n        return (p1[0] - p3[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p3[1])\n\n    d1 = sign(p, a, b)\n    d2 = sign(p, b, c)\n    d3 = sign(p, c, a)\n\n    has_neg = (d1 < 0) or (d2 < 0) or (d3 < 0)\n    has_pos = (d1 > 0) or (d2 > 0) or (d3 > 0)\n\n    return not (has_neg and has_pos)\n\ndef find_region(p, quad):\n    # Assuming quad is a list of 4 points [q1, q2, q3, q4] in clockwise order\n    q1, q2, q3, q4 = quad\n\n    # Middle point of the quadrilateral\n    mx = (q1[0] + q2[0] + q3[0] + q4[0]) / 4\n    my = (q1[1] + q2[1] + q3[1] + q4[1]) / 4\n    m = (mx, my)\n\n    # Check in which of the 9 regions the point p lies\n    if is_point_in_triangle(p, q1, q2, m):\n        return "Top-left"\n    elif is_point_in_triangle(p, q2, q3, m):\n        return "Top-right"\n    elif is_point_in_triangle(p, q3, q4, m):\n        return "Bottom-right"\n    elif is_point_in_triangle(p, q4, q1, m):\n        return "Bottom-left"\n    elif is_point_in_triangle(p, q1, q2, q3):\n        return "Top-middle"\n    elif is_point_in_triangle(p, q2, q3, q4):\n        return "Middle-right"\n    elif is_point_in_triangle(p, q3, q4, q1):\n        return "Bottom-middle"\n    elif is_point_in_triangle(p, q4, q1, q2):\n        return "Middle-left"\n    else:\n        return "Center"\n\n# Example usage\nquad = [(1, 1), (5, 1), (5, 5), (1, 5)]\npoint = (3, 3)\nregion = find_region(point, quad)\nprint("The point is in the region:", region)