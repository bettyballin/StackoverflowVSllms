from itertools import combinations\n\n# Given data\nrequired_lengths = [2, 3, 4]\nquantities = [5, 5, 5]\nstock_length = 10\n\n# Generate all possible cut combinations\ndef generate_combinations(required_lengths):\n    n = len(required_lengths)\n    all_combinations = []\n    for r in range(1, n + 1):\n        for combo in combinations(required_lengths, r):\n            all_combinations.append(combo)\n    return all_combinations\n\n# Check if a combination can fit in the stock length\ndef can_fit(combo, stock_length):\n    return sum(combo) <= stock_length\n\n# Generate valid combinations\nvalid_combinations = [combo for combo in generate_combinations(required_lengths) if can_fit(combo, stock_length)]\n\n# Create a list of required cuts\ncuts = []\nfor length, quantity in zip(required_lengths, quantities):\n    cuts.extend([length] * quantity)\n\n# Function to find the minimum number of stock lengths needed\ndef find_min_stock_lengths(cuts, stock_length, valid_combinations):\n    used_stock = 0\n    while cuts:\n        for combo in valid_combinations:\n            if all(length in cuts for length in combo):\n                for length in combo:\n                    cuts.remove(length)\n                break\n        used_stock += 1\n    return used_stock\n\nmin_stock_lengths = find_min_stock_lengths(cuts, stock_length, valid_combinations)\nprint(f"Minimum number of stock lengths needed: {min_stock_lengths}")