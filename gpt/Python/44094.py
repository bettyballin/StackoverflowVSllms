import hashlib\nimport os\n\ndef hash_password(password):\n    # Generate a random 16-byte salt\n    salt = os.urandom(16)\n    \n    # Prefix the salt to the password\n    salted_password = salt + password.encode()\n    \n    # Hash the salted password using SHA-256 (or a stronger algorithm)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    \n    # Return the salt and the hashed password\n    return salt.hex(), hashed_password\n\ndef verify_password(stored_salt, stored_hash, password_attempt):\n    # Decode the stored salt\n    salt = bytes.fromhex(stored_salt)\n    \n    # Prefix the salt to the password attempt\n    salted_attempt = salt + password_attempt.encode()\n    \n    # Hash the salted attempt\n    hashed_attempt = hashlib.sha256(salted_attempt).hexdigest()\n    \n    # Compare the hashed attempt with the stored hash\n    return hashed_attempt == stored_hash\n\n# Example usage\npassword = "securePassword123"\nstored_salt, stored_hash = hash_password(password)\nprint(f"Salt: {stored_salt}")\nprint(f"Hash: {stored_hash}")\n\n# Verify the password\nis_correct = verify_password(stored_salt, stored_hash, "securePassword123")\nprint(f"Password is correct: {is_correct}")