import heapq\n\nclass FastPassQueue:\n    def __init__(self):\n        self.queue = []\n        self.index = 0\n\n    def add_task(self, task, priority):\n        # Use a tuple with priority and index to maintain order\n        heapq.heappush(self.queue, (priority, self.index, task))\n        self.index += 1\n\n    def get_task(self):\n        # Pop the task with the highest priority\n        return heapq.heappop(self.queue)[-1]\n\n# Example usage\nfpq = FastPassQueue()\nfpq.add_task("Standard Task 1", priority=5)\nfpq.add_task("FastPass Task", priority=1)\nfpq.add_task("Standard Task 2", priority=5)\n\nprint(fpq.get_task())  # Outputs: FastPass Task\nprint(fpq.get_task())  # Outputs: Standard Task 1\nprint(fpq.get_task())  # Outputs: Standard Task 2