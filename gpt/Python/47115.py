class ObjectSet:\n    def __init__(self):\n        self.by_string = {}\n        self.by_ordinal = {}\n        self.count = 0\n\n    def add_object(self, key_string, key_ordinal, obj):\n        if key_string in self.by_string or key_ordinal in self.by_ordinal:\n            raise ValueError("Object with given key already exists.")\n        self.by_string[key_string] = obj\n        self.by_ordinal[key_ordinal] = obj\n        self.count += 1\n        self._process_new_object()\n\n    def remove_object_by_string(self, key_string):\n        if key_string not in self.by_string:\n            raise KeyError("No object found with the given string key.")\n        obj = self.by_string.pop(key_string)\n        key_ordinal = next(k for k, v in self.by_ordinal.items() if v == obj)\n        del self.by_ordinal[key_ordinal]\n        self.count -= 1\n\n    def remove_object_by_ordinal(self, key_ordinal):\n        if key_ordinal not in self.by_ordinal:\n            raise KeyError("No object found with the given ordinal key.")\n        obj = self.by_ordinal.pop(key_ordinal)\n        key_string = next(k for k, v in self.by_string.items() if v == obj)\n        del self.by_string[key_string]\n        self.count -= 1\n\n    def _process_new_object(self):\n        # Processing logic that depends on the new total number of objects\n        pass\n\n    def get_size(self):\n        return self.count