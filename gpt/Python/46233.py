import threading\nimport time\nimport sys\n\n# Function to handle console input\ndef input_thread(stop_event):\n    while not stop_event.is_set():\n        user_input = input()\n        if user_input.strip().lower() == 'exit':\n            stop_event.set()\n        else:\n            print(f"User Input: {user_input}")\n\n# Function to handle console output\ndef output_thread(stop_event):\n    messages = ["Player1 killed Player2", "Player3 joined the game", "Player4 left the game"]\n    while not stop_event.is_set():\n        time.sleep(2)  # Simulate periodic output\n        message = messages.pop(0)\n        print(f"Game Event: {message}")\n        messages.append(message)  # Recycle messages for demonstration purposes\n\n# Event to signal the threads to stop\nstop_event = threading.Event()\n\n# Start the input and output threads\ninput_thread = threading.Thread(target=input_thread, args=(stop_event,))\noutput_thread = threading.Thread(target=output_thread, args=(stop_event,))\ninput_thread.start()\noutput_thread.start()\n\n# Wait for the input thread to finish (i.e., user types 'exit')\ninput_thread.join()\n\n# Signal the output thread to stop and wait for it to finish\nstop_event.set()\noutput_thread.join()\n\nprint("Server console has stopped.")