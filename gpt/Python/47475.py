from PIL import Image, ImageDraw\n\ndef plot_pixel(draw, x, y, intensity, color):\n    base_color = draw.im.getpixel((x, y))\n    new_color = tuple(\n        round(base_color[i] * (1 - intensity) + color[i] * intensity)\n        for i in range(3)\n    )\n    draw.point((x, y), fill=new_color)\n\ndef draw_anti_aliased_circle(draw, cx, cy, radius, color):\n    x = radius\n    y = 0\n    e = 1 - x\n\n    while x >= y:\n        intensity = 1 - (e / radius)\n        plot_pixel(draw, cx + x, cy + y, intensity, color)\n        plot_pixel(draw, cx - x, cy + y, intensity, color)\n        plot_pixel(draw, cx + x, cy - y, intensity, color)\n        plot_pixel(draw, cx - x, cy - y, intensity, color)\n        plot_pixel(draw, cx + y, cy + x, intensity, color)\n        plot_pixel(draw, cx - y, cy + x, intensity, color)\n        plot_pixel(draw, cx + y, cy - x, intensity, color)\n        plot_pixel(draw, cx - y, cy - x, intensity, color)\n\n        y += 1\n        if e < 0:\n            e += 2 * y + 1\n        else:\n            x -= 1\n            e += 2 * (y - x + 1)\n\ndef fill_anti_aliased_circle(draw, cx, cy, radius, color):\n    for y in range(-radius, radius + 1):\n        for x in range(-radius, radius + 1):\n            distance = (x**2 + y**2)**0.5\n            if distance <= radius:\n                intensity = min(1, max(0, 1 - (distance - int(distance))))\n                plot_pixel(draw, cx + x, cy + y, intensity, color)\n\n# Example usage\nwidth, height = 200, 200\nimage = Image.new("RGB", (width, height), "white")\ndraw = ImageDraw.Draw(image)\n\n# Draw non-filled anti-aliased circle\ndraw_anti_aliased_circle(draw, 100, 100, 50, (255, 0, 0))\n\n# Draw filled anti-aliased circle\nfill_anti_aliased_circle(draw, 100, 100, 30, (0, 0, 255))\n\nimage.show()