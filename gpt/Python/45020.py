class Node:\n    def __init__(self, key):\n        self.key = key\n        self.degree = 0\n        self.parent = None\n        self.child = None\n        self.mark = False\n        self.left = self\n        self.right = self\n\nclass FibonacciHeap:\n    def __init__(self):\n        self.min_node = None\n        self.total_nodes = 0\n    \n    def insert(self, key):\n        new_node = Node(key)\n        if self.min_node is None:\n            self.min_node = new_node\n        else:\n            self._add_node(new_node, self.min_node)\n            if new_node.key < self.min_node.key:\n                self.min_node = new_node\n        self.total_nodes += 1\n    \n    def get_min(self):\n        if self.min_node is None:\n            return None\n        return self.min_node.key\n    \n    def extract_min(self):\n        z = self.min_node\n        if z is not None:\n            if z.child is not None:\n                children = [x for x in self._iterate(z.child)]\n                for child in children:\n                    self._add_node(child, z)\n                    child.parent = None\n            self._remove_node(z)\n            if z == z.right:\n                self.min_node = None\n            else:\n                self.min_node = z.right\n                self._consolidate()\n            self.total_nodes -= 1\n        return z.key if z else None\n    \n    def _add_node(self, node, root):\n        node.left = root\n        node.right = root.right\n        root.right = node\n        node.right.left = node\n    \n    def _remove_node(self, node):\n        node.left.right = node.right\n        node.right.left = node.left\n    \n    def _iterate(self, start):\n        node = stop = start\n        flag = False\n        while True:\n            if node == stop and flag:\n                break\n            elif node == stop:\n                flag = True\n            yield node\n            node = node.right\n    \n    def _consolidate(self):\n        A = [None] * (self.total_nodes + 1)\n        nodes = [x for x in self._iterate(self.min_node)]\n        for w in nodes:\n            x = w\n            d = x.degree\n            while A[d] is not None:\n                y = A[d]\n                if x.key > y.key:\n                    x, y = y, x\n                self._link(y, x)\n                A[d] = None\n                d += 1\n            A[d] = x\n        self.min_node = None\n        for i in range(len(A)):\n            if A[i] is not None:\n                if self.min_node is None:\n                    self.min_node = A[i]\n                else:\n                    self._add_node(A[i], self.min_node)\n                    if A[i].key < self.min_node.key:\n                        self.min_node = A[i]\n    \n    def _link(self, y, x):\n        self._remove_node(y)\n        y.left = y.right = y\n        self._add_node(y, x.child if x.child else x)\n        y.parent = x\n        x.child = y\n        x.degree += 1\n        y.mark = False