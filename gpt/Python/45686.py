import random\n\ndef luhn_checksum(num):\n    def digits_of(n):\n        return [int(d) for d in str(n)]\n    digits = digits_of(num)\n    odd_digits = digits[-1::-2]\n    even_digits = digits[-2::-2]\n    checksum = sum(odd_digits)\n    for d in even_digits:\n        checksum += sum(digits_of(d * 2))\n    return checksum % 10\n\ndef is_luhn_valid(num):\n    return luhn_checksum(num) == 0\n\ndef generate_verification_code(length=6):\n    if length < 2:\n        raise ValueError("Length must be at least 2")\n    \n    while True:\n        code = [random.randint(0, 9) for _ in range(length - 1)]\n        checksum_digit = 10 - luhn_checksum(int(''.join(map(str, code)) + '0')) % 10\n        if checksum_digit == 10:\n            checksum_digit = 0\n        code.append(checksum_digit)\n        code_str = ''.join(map(str, code))\n\n        # Ensure the code is the desired length and valid according to the Luhn algorithm\n        if len(code_str) == length and is_luhn_valid(code_str):\n            return code_str\n\n# Example usage\nverification_code = generate_verification_code()\nprint("Generated Verification Code:", verification_code)