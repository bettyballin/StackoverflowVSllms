import itertools\n\ndef held_karp(graph):\n    n = len(graph)\n    C = [[float('inf')] * n for _ in range(1 << n)]\n    C[1][0] = 0  # Starting at vertex 0\n\n    for s in range(1 << n):\n        for u in range(n):\n            if not (s & (1 << u)):\n                continue\n            for v in range(n):\n                if s & (1 << v) or v == u:\n                    continue\n                C[s | (1 << v)][v] = min(C[s | (1 << v)][v], C[s][u] + graph[u][v])\n\n    return min(C[(1 << n) - 1][v] + graph[v][0] for v in range(1, n))\n\n# Example usage:\n# graph[i][j] represents the cost/distance from vertex i to vertex j\ngraph = [\n    [0, 1, 2, 3],\n    [1, 0, 4, 5],\n    [2, 4, 0, 6],\n    [3, 5, 6, 0]\n]\n\nprint(held_karp(graph))