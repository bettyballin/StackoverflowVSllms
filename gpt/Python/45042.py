def calculate_ticks(x_range, width=250, min_gap=12.5, max_gap=50):\n    """\n    Calculate the number of ticks and their intervals for a given x range.\n    \n    :param x_range: Tuple (min_x, max_x) representing the range of x values.\n    :param width: The width of the graph in pixels.\n    :param min_gap: Minimum gap between ticks in pixels.\n    :param max_gap: Maximum gap between ticks in pixels.\n    :return: Tuple (num_ticks, interval) representing the number of ticks and the interval between them.\n    """\n    min_x, max_x = x_range\n    total_range = max_x - min_x\n    \n    # Determine the desired number of ticks\n    desired_ticks = width / ((min_gap + max_gap) / 2)\n    \n    # Determine the possible intervals (1, 0.5, 0.1, 0.05, etc.)\n    intervals = [1, 0.5, 0.1, 0.05]\n    \n    # Find the suitable interval\n    for interval in intervals:\n        num_ticks = total_range / interval\n        gap = width / num_ticks\n        if min_gap <= gap <= max_gap:\n            return int(num_ticks), interval\n    \n    # If no suitable interval is found, return the closest possible\n    return int(total_range / intervals[-1]), intervals[-1]\n\n# Example usage:\nx_range = (-5, 5)\nnum_ticks, interval = calculate_ticks(x_range)\nprint(f"Number of ticks: {num_ticks}, Interval: {interval}")\n\nx_range = (-1, 1)\nnum_ticks, interval = calculate_ticks(x_range)\nprint(f"Number of ticks: {num_ticks}, Interval: {interval}")\n\nx_range = (0.1, 0.3)\nnum_ticks, interval = calculate_ticks(x_range)\nprint(f"Number of ticks: {num_ticks}, Interval: {interval}")