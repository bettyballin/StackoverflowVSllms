def de_boor(CP, k, t, u):\n    """\n    De Boor algorithm to evaluate B-spline curve at parameter u.\n    CP: Control Points\n    k: Degree of the B-Spline\n    t: Knot vector\n    u: Parameter to evaluate\n    """\n    n = len(CP) - 1\n    d = [p for p in CP]\n\n    for r in range(1, k + 1):\n        for j in range(k, r - 1, -1):\n            alpha = (u - t[j]) / (t[j + k - r + 1] - t[j])\n            d[j] = (1.0 - alpha) * d[j - 1] + alpha * d[j]\n\n    return d[k]\n\ndef degree_reduction(CP, k, t, degree):\n    """\n    Reduce the degree of B-spline curve.\n    CP: Control Points\n    k: Original degree of the B-Spline\n    t: Knot vector\n    degree: Desired degree (2 for quadratic, 3 for cubic)\n    """\n    n = len(CP) - 1\n    m = len(t) - 1\n\n    # Determine new knot vector\n    new_t = []\n    for i in range(m + 1):\n        if t[i] not in new_t:\n            new_t.append(t[i])\n\n    new_CPs = []\n    for i in range(0, len(new_t) - degree - 1):\n        new_CPs.append(de_boor(CP, k, t, new_t[i]))\n\n    return new_CPs, new_t\n\n# Example usage:\nCP = [(0, 0), (1, 2), (3, 5), (4, 3), (5, 0)]\nk = 4  # Original degree of the B-Spline\nt = [0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 4]  # Knot vector\ndegree = 3  # Desired degree (3 for cubic)\n\nnew_CPs, new_t = degree_reduction(CP, k, t, degree)\nprint("Reduced Control Points:", new_CPs)\nprint("New Knot Vector:", new_t)