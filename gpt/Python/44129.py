import networkx as nx\n\n# Create a directed graph\nG = nx.DiGraph()\n\n# Add nodes (tables)\nG.add_node('table_a')\nG.add_node('table_b')\nG.add_node('table_c')\n\n# Add edges (foreign key relationships)\n# For example, table_b depends on table_a, and table_c depends on table_b\nG.add_edge('table_a', 'table_b')\nG.add_edge('table_b', 'table_c')\n\n# Perform topological sort\ntry:\n    sorted_tables = list(nx.topological_sort(G))\n    print("Tables in dependency order:", sorted_tables)\nexcept nx.NetworkXUnfeasible:\n    print("The graph has cycles, which means there are circular dependencies.")\n\n# Output your INSERT SQL statements based on the sorted order\nfor table in sorted_tables:\n    print(f"INSERT INTO {table} ...")