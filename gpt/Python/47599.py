import math\n\ndef compute_totients_segment(low, high):\n    phi = list(range(low, high + 1))\n    for i in range(2, int(math.sqrt(high)) + 1):\n        if i >= low and phi[i - low] != i:\n            continue\n        for j in range(max(i*i, (low + i - 1) // i * i), high + 1, i):\n            phi[j - low] *= (i - 1)\n            phi[j - low] //= i\n    return phi\n\ndef segmented_totients(N, segment_size):\n    result = []\n    for low in range(2, N, segment_size):\n        high = min(low + segment_size - 1, N - 1)\n        segment_totients = compute_totients_segment(low, high)\n        result.extend(segment_totients)\n    return result\n\n# Example usage:\nN = 1000000  # Example large N, adjust as needed\nsegment_size = 10000  # Adjust segment size based on memory constraints\ntotients = segmented_totients(N, segment_size)\n\n# totients now contains phi(k) for 2 <= k < N