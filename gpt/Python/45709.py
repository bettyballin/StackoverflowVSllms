from cryptography.hazmat.primitives.serialization import load_pem_public_key\n   from cryptography.hazmat.primitives.asymmetric import padding\n   from cryptography.hazmat.primitives import hashes\n   from cryptography.hazmat.backends import default_backend\n\n   # Load the public key from the certificate\n   with open('certificate.pem', 'rb') as cert_file:\n       public_key = load_pem_public_key(cert_file.read(), backend=default_backend())\n\n   # Binary stream to be verified\n   binary_stream = b'This is a binary stream that needs to be signed'\n\n   # Load the signature\n   with open('signature.bin', 'rb') as signature_file:\n       signature = signature_file.read()\n\n   # Verify the signature\n   try:\n       public_key.verify(\n           signature,\n           binary_stream,\n           padding.PSS(\n               mgf=padding.MGF1(hashes.SHA256()),\n               salt_length=padding.PSS.MAX_LENGTH\n           ),\n           hashes.SHA256()\n       )\n       print("Signature is valid.")\n   except Exception as e:\n       print(f"Signature verification failed: {e}")