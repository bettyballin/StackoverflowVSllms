import networkx as nx\n\ndef create_graph(source_a, source_b):\n    G = nx.Graph()\n    for a in source_a:\n        for b in source_b:\n            if a.entity == b.entity:  # Assuming entity is the common identifier\n                G.add_edge(a.key, b.key)\n    return G\n\ndef find_maximum_matching(graph):\n    return nx.max_weight_matching(graph, maxcardinality=True)\n\n# Example usage\nclass Record:\n    def __init__(self, key, entity):\n        self.key = key\n        self.entity = entity\n\nsource_a = [Record('ABC', 'Entity1'), Record('XYZ', 'Entity2')]\nsource_b = [Record('DEF', 'Entity1'), Record('UVW', 'Entity3')]\n\ngraph = create_graph(source_a, source_b)\nmatching = find_maximum_matching(graph)\n\nprint("Maximum Matching:")\nfor match in matching:\n    print(match)