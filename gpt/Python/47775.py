import cv2\nimport numpy as np\n\n# Load images\nimg1 = cv2.imread('vase.jpg', cv2.IMREAD_GRAYSCALE)  # Image of the object (e.g., vase)\nimg2 = cv2.imread('scene.jpg', cv2.IMREAD_GRAYSCALE)  # Image of the scene\n\n# Feature detection\norb = cv2.ORB_create()\nkeypoints1, descriptors1 = orb.detectAndCompute(img1, None)\nkeypoints2, descriptors2 = orb.detectAndCompute(img2, None)\n\n# Feature matching\nbf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)\nmatches = bf.match(descriptors1, descriptors2)\nmatches = sorted(matches, key=lambda x: x.distance)\n\n# Draw matches (optional)\nimg_matches = cv2.drawMatches(img1, keypoints1, img2, keypoints2, matches[:10], None, flags=cv2.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)\ncv2.imshow('Matches', img_matches)\ncv2.waitKey(0)\n\n# Geometric verification using RANSAC\nif len(matches) > 4:\n    src_pts = np.float32([keypoints1[m.queryIdx].pt for m in matches]).reshape(-1, 1, 2)\n    dst_pts = np.float32([keypoints2[m.trainIdx].pt for m in matches]).reshape(-1, 1, 2)\n    M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC, 5.0)\n\n    # Draw the object outline in the scene\n    h, w = img1.shape\n    pts = np.float32([[0, 0], [0, h - 1], [w - 1, h - 1], [w - 1, 0]]).reshape(-1, 1, 2)\n    dst = cv2.perspectiveTransform(pts, M)\n    img2 = cv2.polylines(img2, [np.int32(dst)], True, 255, 3, cv2.LINE_AA)\n    cv2.imshow('Detected Object', img2)\n    cv2.waitKey(0)\n\ncv2.destroyAllWindows()