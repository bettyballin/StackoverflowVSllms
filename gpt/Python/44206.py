from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes\nimport os\n\n# Generate a key from a password using PBKDF2HMAC\npassword = b'my_secret_password'\nsalt = os.urandom(16)  # Generate a random salt\nkdf = PBKDF2HMAC(\n    algorithm=hashes.SHA256(),\n    length=32,\n    salt=salt,\n    iterations=100000,\n    backend=default_backend()\n)\nkey = kdf.derive(password)\n\n# Encrypt data\ndef encrypt(plaintext, key):\n    iv = os.urandom(12)  # Generate a random IV\n    encryptor = Cipher(\n        algorithms.AES(key),\n        modes.GCM(iv),\n        backend=default_backend()\n    ).encryptor()\n    ciphertext = encryptor.update(plaintext) + encryptor.finalize()\n    return iv, ciphertext, encryptor.tag\n\n# Decrypt data\ndef decrypt(iv, ciphertext, tag, key):\n    decryptor = Cipher(\n        algorithms.AES(key),\n        modes.GCM(iv, tag),\n        backend=default_backend()\n    ).decryptor()\n    return decryptor.update(ciphertext) + decryptor.finalize()\n\n# Example usage\nplaintext = b"Secret message"\niv, ciphertext, tag = encrypt(plaintext, key)\ndecrypted_text = decrypt(iv, ciphertext, tag, key)\n\nprint("Original:", plaintext)\nprint("Encrypted:", ciphertext)\nprint("Decrypted:", decrypted_text)