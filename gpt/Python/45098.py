from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import padding\nimport os\n\n# Function to generate a key from a password\ndef generate_key(password: str, salt: bytes) -> bytes:\n    kdf = PBKDF2HMAC(\n        algorithm=hashes.SHA256(),\n        length=32,\n        salt=salt,\n        iterations=100000,\n        backend=default_backend()\n    )\n    return kdf.derive(password.encode())\n\n# Function to encrypt a log entry\ndef encrypt_log_entry(key: bytes, plaintext: str) -> bytes:\n    iv = os.urandom(16)\n    cipher = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend())\n    encryptor = cipher.encryptor()\n\n    padder = padding.PKCS7(128).padder()\n    padded_data = padder.update(plaintext.encode()) + padder.finalize()\n    ciphertext = encryptor.update(padded_data) + encryptor.finalize()\n\n    return iv + ciphertext\n\n# Function to append an encrypted log entry to a file\ndef append_encrypted_log(filename: str, key: bytes, log_entry: str):\n    encrypted_entry = encrypt_log_entry(key, log_entry)\n    with open(filename, 'ab') as log_file:\n        log_file.write(encrypted_entry + b'\n')\n\n# Usage\npassword = 'your_secure_password'\nsalt = os.urandom(16)\nkey = generate_key(password, salt)\n\nlog_entry = "12/03/2009 08:34:21 -> User 'Bob' logged in"\nfilename = 'encrypted_log.bin'\n\n# Append the salt once at the beginning of the file\nwith open(filename, 'wb') as log_file:\n    log_file.write(salt + b'\n')\n\n# Append encrypted log entries\nappend_encrypted_log(filename, key, log_entry)