import math\n\ndef is_blocked(ray_x, ray_y, map):\n    # Function to check if the current ray position is blocked by an obstacle\n    if map[ray_y][ray_x] == 'X':\n        return True\n    return False\n\ndef cast_ray(light_x, light_y, target_x, target_y, map, lit_map):\n    # Bresenham's line algorithm to cast a ray from light source to target tile\n    dx = abs(target_x - light_x)\n    dy = abs(target_y - light_y)\n    sx = 1 if light_x < target_x else -1\n    sy = 1 if light_y < target_y else -1\n    err = dx - dy\n\n    x, y = light_x, light_y\n\n    while x != target_x or y != target_y:\n        if is_blocked(x, y, map):\n            return\n        lit_map[y][x] = 1  # Mark the tile as lit\n        e2 = 2 * err\n        if e2 > -dy:\n            err -= dy\n            x += sx\n        if e2 < dx:\n            err += dx\n            y += sy\n\ndef calculate_lighting(map, light_x, light_y):\n    rows, cols = len(map), len(map[0])\n    lit_map = [[0 for _ in range(cols)] for _ in range(rows)]\n\n    for y in range(rows):\n        for x in range(cols):\n            if (x, y) != (light_x, light_y):\n                cast_ray(light_x, light_y, x, y, map, lit_map)\n\n    return lit_map\n\n# Example usage:\nmap = [\n    ['0', '0', '0', '0', '0', '0', '-', '-', '0'],\n    ['0', '0', '0', '0', '0', '0', '-', '0', '0'],\n    ['0', '0', '0', '0', '0', 'X', '0', '0', '0'],\n    ['0', '0', '0', '0', '0', '0', '0', '0', '0'],\n    ['0', '0', '0', '0', 'L', '0', '0', '0', '0'],\n    ['0', '0', '0', '0', '0', '0', '0', '0', '0'],\n    ['0', '0', '0', 'X', 'X', 'X', 'X', '0', '0'],\n    ['0', '0', '0', '-', '-', '-', '-', '-', '0'],\n    ['0', '0', '-', '-', '-', '-', '-', '-', '-'],\n]\n\nlight_x, light_y = 4, 4\nlit_map = calculate_lighting(map, light_x, light_y)\n\nfor row in lit_map:\n    print(' '.join(str(cell) for cell in row))