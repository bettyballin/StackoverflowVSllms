import logging\nimport cx_Oracle\nimport sys\n\nclass OracleDBHandler(logging.Handler):\n    def __init__(self, dsn, user, password):\n        logging.Handler.__init__(self)\n        self.dsn = dsn\n        self.user = user\n        self.password = password\n        self.connection = self._connect_to_db()\n        self.cursor = self.connection.cursor()\n\n    def _connect_to_db(self):\n        return cx_Oracle.connect(self.user, self.password, self.dsn)\n\n    def emit(self, record):\n        try:\n            log_entry = self.format(record)\n            self.cursor.execute("INSERT INTO log_table (log_message) VALUES (:log_message)", log_message=log_entry)\n            if record.levelname == 'ERROR':\n                self.connection.commit()\n        except cx_Oracle.DatabaseError as e:\n            # Fallback to file logging in case of database error\n            with open('fallback_log.txt', 'a') as fallback_log:\n                fallback_log.write(f"Failed to log to database: {e}\n")\n                fallback_log.write(f"{log_entry}\n")\n        else:\n            self.connection.commit()\n\n    def close(self):\n        self.cursor.close()\n        self.connection.close()\n        super().close()\n\n# Redirecting stderr and stdout to logging\nclass StreamToLogger(object):\n    def __init__(self, logger, log_level=logging.INFO):\n        self.logger = logger\n        self.log_level = log_level\n        self.linebuf = ''\n\n    def write(self, buf):\n        for line in buf.rstrip().splitlines():\n            self.logger.log(self.log_level, line.rstrip())\n\n    def flush(self):\n        pass\n\n# Setup logging\nlogger = logging.getLogger('my_application')\nlogger.setLevel(logging.DEBUG)\n\n# Oracle DB handler\noracle_handler = OracleDBHandler(dsn="mydsn", user="myuser", password="mypassword")\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\noracle_handler.setFormatter(formatter)\nlogger.addHandler(oracle_handler)\n\n# Redirect stderr and stdout\nsys.stderr = StreamToLogger(logger, logging.ERROR)\nsys.stdout = StreamToLogger(logger, logging.INFO)\n\n# Usage example\nlogger.info("This is an info message")\nlogger.error("This is an error message")\n\n# Don't forget to close the handler properly\nlogging.shutdown()