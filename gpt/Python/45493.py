import re\nfrom collections import defaultdict\n\n# Define regex pattern for extracting field name and value\npattern = re.compile(r"^(?P<fieldname>\w+):(?P<fieldvalue>.+)$")\n\n# Function to parse a file and return records as dictionaries\ndef parse_file(file_path, field_mapping):\n    records = defaultdict(dict)\n    with open(file_path, 'r') as file:\n        current_record = None\n        for line in file:\n            if line.strip() == "":\n                continue\n            match = pattern.match(line.strip())\n            if match:\n                fieldname = match.group('fieldname')\n                fieldvalue = match.group('fieldvalue')\n                mapped_fieldname = field_mapping.get(fieldname, fieldname)\n                if current_record is None:\n                    current_record = {}\n                current_record[mapped_fieldname] = fieldvalue\n            else:\n                if current_record:\n                    record_id = current_record.get('unique_id')\n                    records[record_id] = current_record\n                    current_record = None\n        if current_record:\n            record_id = current_record.get('unique_id')\n            records[record_id] = current_record\n    return records\n\n# Function to compare two records\ndef compare_records(record1, record2):\n    differences = []\n    all_keys = set(record1.keys()).union(set(record2.keys()))\n    for key in all_keys:\n        if record1.get(key) != record2.get(key):\n            differences.append((key, record1.get(key), record2.get(key)))\n    return differences\n\n# Field mapping between legacy and new system\nfield_mapping = {\n    'legacy_field1': 'new_field1',\n    'legacy_field2': 'new_field2',\n    # Add more mappings as needed\n}\n\n# Parse both files\nlegacy_records = parse_file('legacy_file.txt', field_mapping)\nnew_records = parse_file('new_file.txt', field_mapping)\n\n# Compare records and report differences\nfor record_id in legacy_records:\n    if record_id in new_records:\n        differences = compare_records(legacy_records[record_id], new_records[record_id])\n        if differences:\n            print(f"Differences for record {record_id}:")\n            for diff in differences:\n                print(f"Field: {diff[0]}, Legacy: {diff[1]}, New: {diff[2]}")\n    else:\n        print(f"Record {record_id} missing in new system")