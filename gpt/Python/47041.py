import math\n\nclass Node:\n    def __init__(self, x, y, width, height):\n        self.x = x\n        self.y = y\n        self.width = width\n        self.height = height\n        self.left = None\n        self.right = None\n        self.used = False\n\nclass Packer:\n    def __init__(self, width, height):\n        self.root = Node(0, 0, width, height)\n\n    def fit(self, rectangles):\n        for rect in rectangles:\n            node = self.find_node(self.root, rect['width'], rect['height'])\n            if node:\n                rect['fit'] = self.split_node(node, rect['width'], rect['height'])\n            else:\n                return False\n        return True\n\n    def find_node(self, root, width, height):\n        if root.used:\n            return self.find_node(root.right, width, height) or self.find_node(root.left, width, height)\n        elif width <= root.width and height <= root.height:\n            return root\n        else:\n            return None\n\n    def split_node(self, node, width, height):\n        node.used = True\n        node.left = Node(node.x + width, node.y, node.width - width, height)\n        node.right = Node(node.x, node.y + height, node.width, node.height - height)\n        return node\n\ndef next_power_of_two(n):\n    return 2 ** math.ceil(math.log2(n))\n\ndef pack_rectangles(rectangles):\n    total_area = sum(rect['width'] * rect['height'] for rect in rectangles)\n    side_length = next_power_of_two(math.ceil(math.sqrt(total_area)))\n    while True:\n        packer = Packer(side_length, side_length)\n        if packer.fit(rectangles):\n            return side_length\n        side_length *= 2\n\n# Example usage\nrectangles = [\n    {'width': 128, 'height': 32},\n    {'width': 128, 'height': 64},\n    {'width': 64, 'height': 32},\n    {'width': 64, 'height': 32},\n    {'width': 160, 'height': 32},\n    {'width': 64, 'height': 64}\n]\n\ncontainer_size = pack_rectangles(rectangles)\nprint(f"Container size: {container_size}x{container_size}")