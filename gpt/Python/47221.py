from collections import defaultdict, deque\n\ndef merge_ordered_arrays(arrays):\n    graph = defaultdict(set)\n    in_degree = defaultdict(int)\n    \n    # Build the graph and in-degree count\n    for array in arrays:\n        for i in range(len(array) - 1):\n            if array[i+1] not in graph[array[i]]:\n                graph[array[i]].add(array[i+1])\n                in_degree[array[i+1]] += 1\n            if array[i] not in in_degree:\n                in_degree[array[i]] = 0\n            \n    # Find all nodes with zero in-degree\n    zero_in_degree = deque([node for node in in_degree if in_degree[node] == 0])\n    \n    sorted_order = []\n    \n    while zero_in_degree:\n        node = zero_in_degree.popleft()\n        sorted_order.append(node)\n        for neighbor in graph[node]:\n            in_degree[neighbor] -= 1\n            if in_degree[neighbor] == 0:\n                zero_in_degree.append(neighbor)\n    \n    # Check if sorting is possible\n    if len(sorted_order) != len(in_degree):\n        return "Cannot determine the correct order due to insufficient information."\n    \n    return sorted_order\n\n# Example usage\narrays = [\n    ["A", "B", "D"],\n    ["A", "B", "C"],\n    ["A", "C", "D"]\n]\n\nresult = merge_ordered_arrays(arrays)\nprint(result)  # Output: ['A', 'B', 'C', 'D']