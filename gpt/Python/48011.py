import math\n\nclass Robot:\n    def __init__(self):\n        self.x = 0\n        self.y = 0\n        self.angle = 0  # Assuming 0 degrees is facing 'up'\n\n    def move(self, distance):\n        # Convert angle to radians\n        rad = math.radians(self.angle)\n        # Update x and y based on the distance moved and current angle\n        self.x += distance * math.cos(rad)\n        self.y += distance * math.sin(rad)\n\n    def rotate(self, degrees):\n        # Update the robot's current angle\n        self.angle += degrees\n        self.angle %= 360  # Ensure the angle stays within 0-359 degrees\n\n    def get_position(self):\n        return self.x, self.y\n\n    def get_angle(self):\n        return self.angle\n\n# Example movements\nmovements = [\n    (45, 3),  # Rotate 45 degrees, move 3 inches\n    (90, 10),  # Rotate 90 degrees, move 10 inches\n    (-110, 5),  # Rotate -110 degrees, move 5 inches\n    (10, 1)  # Rotate 10 degrees, move 1 inch\n]\n\n# Initialize the robot\nrobot = Robot()\n\n# Perform movements\nfor rotate, move in movements:\n    robot.rotate(rotate)\n    robot.move(move)\n\n# Get the final position\nfinal_x, final_y = robot.get_position()\nprint(f"Final Position: ({final_x}, {final_y})")\n\n# Calculate the shortest path from (0, 0) to (final_x, final_y)\ndef calculate_shortest_path(start_x, start_y, end_x, end_y):\n    distance = math.sqrt((end_x - start_x) ** 2 + (end_y - start_y) ** 2)\n    angle = math.degrees(math.atan2(end_y - start_y, end_x - start_x))\n    return distance, angle\n\n# Calculate shortest path to final position\ndistance, angle = calculate_shortest_path(0, 0, final_x, final_y)\nprint(f"Shortest Path: Rotate to {angle} degrees, move {distance} inches")