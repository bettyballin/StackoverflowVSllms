from PIL import Image\n   import numpy as np\n   import random\n\n   def diamond_square(size, scale):\n       data = np.zeros((size, size))\n       data[0, 0] = random.random() * scale\n       data[0, -1] = random.random() * scale\n       data[-1, 0] = random.random() * scale\n       data[-1, -1] = random.random() * scale\n\n       side_length = size - 1\n       while side_length >= 2:\n           half_side = side_length // 2\n\n           for x in range(0, size - 1, side_length):\n               for y in range(0, size - 1, side_length):\n                   avg = (data[x, y] + \n                          data[x + side_length, y] +\n                          data[x, y + side_length] +\n                          data[x + side_length, y + side_length]) / 4.0\n                   data[x + half_side, y + half_side] = avg + (random.random() * 2 * scale - scale)\n\n           for x in range(0, size, half_side):\n               for y in range((x + half_side) % side_length, size, side_length):\n                   avg = (data[(x - half_side) % (size - 1), y] +\n                          data[(x + half_side) % (size - 1), y] +\n                          data[x, (y + half_side) % (size - 1)] +\n                          data[x, (y - half_side) % (size - 1)]) / 4.0\n                   data[x, y] = avg + (random.random() * 2 * scale - scale)\n\n           side_length //= 2\n           scale /= 2.0\n       return data