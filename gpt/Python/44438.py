from Crypto.Cipher import AES\nfrom Crypto.Util.Padding import pad, unpad\nfrom Crypto.Random import get_random_bytes\nimport base64\n\n# Key and IV must be securely stored and managed\nkey = get_random_bytes(32)  # AES-256\niv = get_random_bytes(16)  # AES block size\n\ndef encrypt_email(email, key, iv):\n    cipher = AES.new(key, AES.MODE_CBC, iv)\n    encrypted_email = cipher.encrypt(pad(email.encode('utf-8'), AES.block_size))\n    return base64.b64encode(iv + encrypted_email).decode('utf-8')\n\ndef decrypt_email(encrypted_email, key):\n    encrypted_email = base64.b64decode(encrypted_email.encode('utf-8'))\n    iv = encrypted_email[:16]\n    encrypted_email = encrypted_email[16:]\n    cipher = AES.new(key, AES.MODE_CBC, iv)\n    decrypted_email = unpad(cipher.decrypt(encrypted_email), AES.block_size)\n    return decrypted_email.decode('utf-8')\n\n# Example usage\nemail = "user@example.com"\nencrypted_email = encrypt_email(email, key, iv)\nprint(f'Encrypted email: {encrypted_email}')\ndecrypted_email = decrypt_email(encrypted_email, key)\nprint(f'Decrypted email: {decrypted_email}')