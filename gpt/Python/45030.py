import socket\nimport threading\nimport win32serviceutil\nimport win32service\nimport win32event\n\nclass MyService(win32serviceutil.ServiceFramework):\n    _svc_name_ = "MyService"\n    _svc_display_name_ = "My Service"\n\n    def __init__(self, args):\n        win32serviceutil.ServiceFramework.__init__(self, args)\n        self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)\n        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.server_socket.bind(('localhost', 9999))\n        self.server_socket.listen(5)\n        self.stop_requested = False\n\n    def SvcStop(self):\n        self.stop_requested = True\n        self.server_socket.close()\n        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)\n        win32event.SetEvent(self.hWaitStop)\n\n    def SvcDoRun(self):\n        threading.Thread(target=self.listen_for_commands).start()\n        win32event.WaitForSingleObject(self.hWaitStop, win32event.INFINITE)\n\n    def listen_for_commands(self):\n        while not self.stop_requested:\n            client_socket, addr = self.server_socket.accept()\n            command = client_socket.recv(1024).decode('utf-8')\n            self.handle_command(command)\n            client_socket.close()\n\n    def handle_command(self, command):\n        print(f"Received command: {command}")\n        # Add your command handling logic here\n\nif __name__ == '__main__':\n    win32serviceutil.HandleCommandLine(MyService)