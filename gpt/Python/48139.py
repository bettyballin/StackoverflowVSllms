import numpy as np\nimport matplotlib.pyplot as plt\n\ndef perlin_noise(width, height, scale=10):\n    def f(t):\n        return 6*t**5 - 15*t**4 + 10*t**3\n\n    def gradient(h, x, y):\n        vectors = np.array([[0,1],[0,-1],[1,0],[-1,0]])\n        g = vectors[h % 4]\n        return g[:, :, 0] * x + g[:, :, 1] * y\n\n    lin = np.linspace(0, scale, width, endpoint=False)\n    x, y = np.meshgrid(lin, lin)\n    p = np.arange(scale)\n    np.random.shuffle(p)\n    p = np.stack([p, p]).flatten()\n    xi = x.astype(int)\n    yi = y.astype(int)\n    xf = x - xi\n    yf = y - yi\n    u = f(xf)\n    v = f(yf)\n    n00 = gradient(p[p[xi]+yi], xf, yf)\n    n01 = gradient(p[p[xi]+yi+1], xf, yf-1)\n    n10 = gradient(p[p[xi+1]+yi], xf-1, yf)\n    n11 = gradient(p[p[xi+1]+yi+1], xf-1, yf-1)\n    x1 = np.lerp(n00, n10, u)\n    x2 = np.lerp(n01, n11, u)\n    return np.lerp(x1, x2, v)\n\nwidth, height = 256, 256\nscale = 10\nnoise = perlin_noise(width, height, scale)\nplt.imshow(noise, cmap='gray')\nplt.show()