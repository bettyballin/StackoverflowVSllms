def tarjan_scc(graph):\n    index = 0\n    stack = []\n    indices = {}\n    lowlink = {}\n    on_stack = {}\n    sccs = []\n\n    def strongconnect(node):\n        nonlocal index\n        indices[node] = index\n        lowlink[node] = index\n        index += 1\n        stack.append(node)\n        on_stack[node] = True\n\n        for neighbor in graph[node]:\n            if neighbor not in indices:\n                strongconnect(neighbor)\n                lowlink[node] = min(lowlink[node], lowlink[neighbor])\n            elif on_stack[neighbor]:\n                lowlink[node] = min(lowlink[node], indices[neighbor])\n\n        if lowlink[node] == indices[node]:\n            scc = []\n            while True:\n                w = stack.pop()\n                on_stack[w] = False\n                scc.append(w)\n                if w == node:\n                    break\n            sccs.append(scc)\n\n    for node in graph:\n        if node not in indices:\n            strongconnect(node)\n\n    return sccs\n\n# Example usage:\ngraph = {\n    'A': ['B'],\n    'B': ['C', 'D'],\n    'C': ['A'],\n    'D': ['E'],\n    'E': []\n}\n\nsccs = tarjan_scc(graph)\nprint("Strongly Connected Components:", sccs)