class IndexTracker:\n    def __init__(self, initial_string):\n        self.string = initial_string\n        self.char_indices = {}\n        for index, char in enumerate(initial_string):\n            if char not in self.char_indices:\n                self.char_indices[char] = []\n            self.char_indices[char].append(index)\n\n    def update_string(self, new_string):\n        if len(new_string) < len(self.string):\n            raise ValueError("New string must be longer than the current string")\n        \n        diff = len(new_string) - len(self.string)\n        self.string = new_string\n        \n        for char, indices in self.char_indices.items():\n            for i in range(len(indices)):\n                indices[i] += diff\n\n    def get_index(self, char, occurrence=0):\n        if char in self.char_indices and occurrence < len(self.char_indices[char]):\n            return self.char_indices[char][occurrence]\n        return -1\n\n# Initial string\ntracker = IndexTracker("The quick brown fox")\n\n# Assuming user adds more text\ntracker.update_string("The very quick dark brown fox")\n\n# Get the updated index of 'q' in 'quick'\nq_index = tracker.get_index('q')\nprint(f"Updated index of 'q': {q_index}")\n\n# Get the updated index of 'f' in 'fox'\nf_index = tracker.get_index('f')\nprint(f"Updated index of 'f': {f_index}")