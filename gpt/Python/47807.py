def parse_section(lines, start_index):\n    section = {}\n    i = start_index\n    while i < len(lines):\n        line = lines[i].strip()\n        \n        if line.startswith("BeginSection:"):\n            section_name = line.split(":", 1)[1].strip()\n            nested_section, i = parse_section(lines, i + 1)\n            section[section_name] = nested_section\n        elif line.startswith("EndSection"):\n            return section, i\n        elif "=" in line:\n            key, value = map(str.strip, line.split("=", 1))\n            section[key] = value\n        i += 1\n    \n    return section, i\n\ndef parse_configuration(text):\n    lines = text.splitlines()\n    configuration, _ = parse_section(lines, 0)\n    return configuration\n\n# Example usage\nconfig_text = """\nDCOM Productions Configuration File, Format Version 1.0\n\nBeginSection:Global\n    GlobalKeyA = AnswerOne\n\n    .: Stores the global configuration key\n    :: for the application. This key is used\n    :: to save the current state of the app.\n    :: as well as prevent lockups\n    GlobalKey3 = AnswerTwo\n\n    .: Secondary Key. See above setting\n    GlobalKeyC = AnswerThree\n\n    BeginSection: UpdateSystem\n        NestedKeyA = One\n        NestedKeyB = Two\n        NestedKeyC = { A set of multiline data\n                      where we will show how\n                      to write a multiline\n                      paragraph }\n        NestedKeyD = System.Int32, 100\n    EndSection\nEndSection\n\nBeginSection:Application\n    InstallPath = C:\\Program Files\\DCOM Productions\\BitFlex\nEndSection\n"""\n\nparsed_config = parse_configuration(config_text)\nprint(parsed_config)