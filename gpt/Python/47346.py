import math\n\ndef nice_number(value, round):\n    """\n    Rounds a value to a "nice" number: 1, 2, or 5 times a power of 10.\n    """\n    exponent = math.floor(math.log10(value))\n    fraction = value / (10 ** exponent)\n    \n    if round:\n        if fraction < 1.5:\n            nice_fraction = 1\n        elif fraction < 3:\n            nice_fraction = 2\n        elif fraction < 7:\n            nice_fraction = 5\n        else:\n            nice_fraction = 10\n    else:\n        if fraction <= 1:\n            nice_fraction = 1\n        elif fraction <= 2:\n            nice_fraction = 2\n        elif fraction <= 5:\n            nice_fraction = 5\n        else:\n            nice_fraction = 10\n            \n    return nice_fraction * (10 ** exponent)\n\ndef calculate_nice_grid(min_value, max_value, num_ticks=5):\n    """\n    Calculate nice grid lines for a given data range.\n    """\n    range = max_value - min_value\n    if range == 0:\n        range = abs(max_value) * 0.1  # Handle case when all values are the same\n\n    # Calculate an initial guess for the tick spacing\n    tick_spacing = nice_number(range / (num_ticks - 1), round=True)\n\n    # Calculate nice minimum and maximum values\n    nice_min = math.floor(min_value / tick_spacing) * tick_spacing\n    nice_max = math.ceil(max_value / tick_spacing) * tick_spacing\n\n    return nice_min, nice_max, tick_spacing\n\n# Example usage\nmin_value = 10\nmax_value = 72\nnum_ticks = 5\n\nnice_min, nice_max, tick_spacing = calculate_nice_grid(min_value, max_value, num_ticks)\n\nprint(f"Nice Min Value: {nice_min}")\nprint(f"Nice Max Value: {nice_max}")\nprint(f"Tick Spacing: {tick_spacing}")