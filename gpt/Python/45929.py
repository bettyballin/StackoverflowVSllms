from scipy.optimize import linear_sum_assignment\nimport numpy as np\n\ndef getMaxCTR(companies, people, ctrPairs):\n    n = len(companies)\n    \n    # Create the cost matrix\n    cost_matrix = np.zeros((n, n))\n    for i, company in enumerate(companies):\n        for j, person in enumerate(people):\n            cost_matrix[i, j] = -ctrPairs[(company, person)]  # Negate values to maximize\n    \n    # Solve the assignment problem\n    row_ind, col_ind = linear_sum_assignment(cost_matrix)\n    \n    # Calculate the maximum CTR value\n    max_ctr = -cost_matrix[row_ind, col_ind].sum()\n    \n    # Get the optimal pairings\n    optimal_pairings = [(companies[i], people[j]) for i, j in zip(row_ind, col_ind)]\n    \n    return max_ctr, optimal_pairings\n\n# Example usage\ncompanies = ['CompanyA', 'CompanyB', 'CompanyC']\npeople = ['Person1', 'Person2', 'Person3']\nctrPairs = {('CompanyA', 'Person1'): 10, ('CompanyA', 'Person2'): 15, ('CompanyA', 'Person3'): 20,\n            ('CompanyB', 'Person1'): 25, ('CompanyB', 'Person2'): 30, ('CompanyB', 'Person3'): 35,\n            ('CompanyC', 'Person1'): 40, ('CompanyC', 'Person2'): 45, ('CompanyC', 'Person3'): 50}\n\nmax_ctr, optimal_pairings = getMaxCTR(companies, people, ctrPairs)\nprint("Maximum CTR:", max_ctr)\nprint("Optimal pairings:", optimal_pairings)