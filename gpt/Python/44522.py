import inspect\nfrom typing import get_type_hints\n\ndef get_class_api(cls):\n    result = {"class": cls.__name__, "methods": []}\n    for name, method in inspect.getmembers(cls, predicate=inspect.isfunction):\n        sig = inspect.signature(method)\n        params = [{"name": param_name, "type": str(param.annotation)} for param_name, param in sig.parameters.items()]\n        return_annotation = str(sig.return_annotation) if sig.return_annotation != inspect.Signature.empty else None\n        result["methods"].append({"name": name, "params": params, "return": return_annotation})\n    return result\n\n# Example usage\nclass Foo:\n    def bar(hello: str = None) -> str:\n        return hello\n\n    def baz(world: int = None) -> int:\n        return world\n\napi = get_class_api(Foo)\nprint(api)