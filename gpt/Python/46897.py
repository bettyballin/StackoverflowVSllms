class TreeNode:\n    def __init__(self, value, parent=None):\n        self.value = value\n        self.parent = parent\n\ndef build_parent_to_children_map(objects):\n    parent_to_children = {}\n    for obj in objects:\n        if obj.parent:\n            if obj.parent not in parent_to_children:\n                parent_to_children[obj.parent] = []\n            parent_to_children[obj.parent].append(obj)\n    return parent_to_children\n\ndef get_subtree(root, parent_to_children):\n    subtree = []\n    stack = [root]\n    \n    while stack:\n        node = stack.pop()\n        subtree.append(node)\n        if node in parent_to_children:\n            stack.extend(parent_to_children[node])\n    \n    return subtree\n\n# Example usage:\n# Assuming you have a list of TreeNode objects called `objects`\nobjects = [TreeNode(1), TreeNode(2, objects[0]), TreeNode(3, objects[0]), TreeNode(4, objects[1])]\nparent_to_children = build_parent_to_children_map(objects)\nroot_object = objects[0]  # The object whose subtree you want to find\nsubtree = get_subtree(root_object, parent_to_children)\n\nfor node in subtree:\n    print(node.value)