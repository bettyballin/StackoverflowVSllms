import random\n\ndef is_probable_prime(n, k=5):\n    """Use the Miller-Rabin primality test to determine if a number is a probable prime."""\n    if n < 2:\n        return False\n    for _ in range(k):\n        a = random.randrange(2, n - 1)\n        if not miller_rabin_test(a, n):\n            return False\n    return True\n\ndef miller_rabin_test(a, n):\n    """Perform the Miller-Rabin primality test on (a, n)."""\n    d, s = n - 1, 0\n    while d % 2 == 0:\n        d, s = d // 2, s + 1\n    \n    x = pow(a, d, n)\n    if x == 1 or x == n - 1:\n        return True\n    for _ in range(s - 1):\n        x = pow(x, 2, n)\n        if x == n - 1:\n            return True\n    return False\n\ndef generate_large_prime(bits):\n    """Generate a large prime number of specified bit length."""\n    while True:\n        p = random.getrandbits(bits)\n        # Ensure the number is odd and has the required bit length\n        p |= (1 << bits - 1) | 1\n        if is_probable_prime(p):\n            return p\n\n# Example usage: generate a 1024-bit prime\nprime = generate_large_prime(1024)\nprint(prime)