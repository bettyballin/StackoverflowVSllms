def reconstruct_line(distances):\n    # distances is a list of tuples in the form (distance, point1, point2)\n    \n    # Sort distances based on the first element (the distance)\n    distances.sort()\n    \n    # Start with the first point as the reference\n    first_distance, first_point, second_point = distances[0]\n    \n    # Initialize the positions dictionary with the first two points\n    positions = {first_point: 0, second_point: first_distance}\n    \n    # Iterate through the sorted distances and place points accordingly\n    for distance, point1, point2 in distances[1:]:\n        if point1 not in positions and point2 in positions:\n            positions[point1] = positions[point2] + distance\n        elif point2 not in positions and point1 in positions:\n            positions[point2] = positions[point1] + distance\n    \n    # Sort the points by their positions\n    sorted_points = sorted(positions.items(), key=lambda x: x[1])\n    \n    return sorted_points\n\n# Example usage\ndistances = [(100, 'a', 'b'), (20, 'c', 'b'), (90, 'c', 'd'), (170, 'a', 'd')]\nprint(reconstruct_line(distances))