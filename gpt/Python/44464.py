import difflib\n\nclass ContentAnalyzer:\n    def __init__(self):\n        self.true_cases = []\n        self.false_cases = []\n        self.true_template = None\n        self.false_template = None\n\n    def add_true_case(self, html):\n        self.true_cases.append(html)\n        self.true_template = self.generate_template(self.true_cases)\n\n    def add_false_case(self, html):\n        self.false_cases.append(html)\n        self.false_template = self.generate_template(self.false_cases)\n\n    def generate_template(self, cases):\n        if not cases:\n            return None\n        \n        s = difflib.SequenceMatcher(None, cases[0], cases[1])\n        for case in cases[2:]:\n            s.set_seq2(case)\n            s.set_seq1("".join([x[2] if x[0] == 'equal' else '' for x in s.get_opcodes()]))\n        \n        return "".join([x[2] if x[0] == 'equal' else '' for x in s.get_opcodes()])\n\n    def is_this_true(self, html):\n        if not self.true_template or not self.false_template:\n            raise ValueError("Templates not initialized. Add cases first.")\n\n        true_score = self.compare_with_template(html, self.true_template)\n        false_score = self.compare_with_template(html, self.false_template)\n\n        return true_score > false_score\n\n    def compare_with_template(self, html, template):\n        s = difflib.SequenceMatcher(None, template, html)\n        return s.ratio()\n\n# Usage\nanalyser = ContentAnalyzer()\nanalyser.add_true_case(True1Html)\nanalyser.add_true_case(True2Html)\nanalyser.add_true_case(True3Html)\nanalyser.add_false_case(False1Html)\nanalyser.add_false_case(False2Html)\nanalyser.add_false_case(False3Html)\n\n# This will return True if the UnknownHtml is similar to TRUE case, otherwise False\nresult = analyser.is_this_true(UnknownHtml)