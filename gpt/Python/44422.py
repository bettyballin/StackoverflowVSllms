import socket\nimport threading\nimport time\n\nclass RUDPClient:\n    def __init__(self, server_ip, server_port):\n        self.server_ip = server_ip\n        self.server_port = server_port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        self.sock.settimeout(1)\n        self.seq_num = 0\n        self.lock = threading.Lock()\n\n    def send_message(self, message):\n        while True:\n            with self.lock:\n                self.seq_num += 1\n                packet = f"{self.seq_num}:{message}".encode()\n            \n            self.sock.sendto(packet, (self.server_ip, self.server_port))\n            try:\n                ack, _ = self.sock.recvfrom(1024)\n                ack_num = int(ack.decode())\n                if ack_num == self.seq_num:\n                    print(f"Message {message} acknowledged with seq {ack_num}")\n                    break\n            except socket.timeout:\n                print(f"Timeout, resending message {message}")\n\nclass RUDPServer:\n    def __init__(self, port):\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        self.sock.bind(('', port))\n        self.expected_seq = 1\n\n    def listen(self):\n        while True:\n            packet, addr = self.sock.recvfrom(1024)\n            seq_num, message = packet.decode().split(":", 1)\n            seq_num = int(seq_num)\n            if seq_num == self.expected_seq:\n                print(f"Received message: {message} with seq {seq_num}")\n                self.expected_seq += 1\n            ack = str(seq_num).encode()\n            self.sock.sendto(ack, addr)\n\n# Example usage:\n# Run the server\n# server = RUDPServer(12345)\n# threading.Thread(target=server.listen).start()\n\n# Send a message from the client\n# client = RUDPClient('localhost', 12345)\n# client.send_message("Hello, RUDP!")