from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom cryptography.hazmat.backends import default_backend\nimport os\n\n# Encrypt function\ndef encrypt(data, key):\n    # Generate a random IV\n    iv = os.urandom(16)\n    \n    # Create cipher object\n    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())\n    encryptor = cipher.encryptor()\n    \n    # Pad data\n    padder = padding.PKCS7(algorithms.AES.block_size).padder()\n    padded_data = padder.update(data) + padder.finalize()\n    \n    # Encrypt data\n    ciphertext = encryptor.update(padded_data) + encryptor.finalize()\n    \n    # Concatenate IV and ciphertext\n    return iv + ciphertext\n\n# Decrypt function\ndef decrypt(enc_data, key):\n    # Extract IV and ciphertext\n    iv = enc_data[:16]\n    ciphertext = enc_data[16:]\n    \n    # Create cipher object\n    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())\n    decryptor = cipher.decryptor()\n    \n    # Decrypt data\n    padded_data = decryptor.update(ciphertext) + decryptor.finalize()\n    \n    # Unpad data\n    unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder()\n    data = unpadder.update(padded_data) + unpadder.finalize()\n    \n    return data\n\n# Example usage\nkey = os.urandom(32)  # 256-bit key\ndata = b"Secret message!"\n\nencrypted_data = encrypt(data, key)\nprint("Encrypted:", encrypted_data)\n\ndecrypted_data = decrypt(encrypted_data, key)\nprint("Decrypted:", decrypted_data)