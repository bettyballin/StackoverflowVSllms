import base64\nimport hashlib\n\ndef contract(input_string):\n    # Hash the input string using SHA-1 (160 bits)\n    hash_object = hashlib.sha1(input_string.encode())\n    # Encode the hash to base64\n    base64_encoded = base64.urlsafe_b64encode(hash_object.digest())\n    # Return the first 25 characters of the base64 encoded string\n    return base64_encoded[:25].decode('utf-8')\n\ndef expand(short_string, original_string):\n    # In practice, you cannot expand a hashed value back to the original string\n    # You need a lookup table or database to map the shortened strings back to the originals\n    raise NotImplementedError("Direct expansion from a hashed value is not possible without a lookup table.")\n\n# Example usage\noriginal_id = "this_is_a_test_account_that_is_longer_than_allowed"\ncontracted_id = contract(original_id)\nprint("Contracted ID:", contracted_id)\n\n# Note: For expansion, you would need to store a mapping somewhere\n# expanded_id = expand(contracted_id)  # Not directly possible\n# print("Expanded ID:", expanded_id)