# Sample data\ndata = [\n    {'Id': 1, 'Name': 'Node 1', 'ParentId': 0, 'Order': 10},\n    {'Id': 2, 'Name': 'Node 1.1', 'ParentId': 1, 'Order': 10},\n    {'Id': 3, 'Name': 'Node 2', 'ParentId': 0, 'Order': 20},\n    {'Id': 4, 'Name': 'Node 1.1.1', 'ParentId': 2, 'Order': 10},\n    {'Id': 5, 'Name': 'Node 2.1', 'ParentId': 3, 'Order': 10},\n    {'Id': 6, 'Name': 'Node 1.2', 'ParentId': 1, 'Order': 20}\n]\n\n# Step 1: Parse the flat table into a dictionary\nnodes = {item['Id']: item for item in data}\ntree = {}\n\n# Step 2: Build the tree\ndef build_tree(parent_id):\n    children = [node for node in data if node['ParentId'] == parent_id]\n    for child in sorted(children, key=lambda x: x['Order']):\n        tree[child['Id']] = {'Name': child['Name'], 'Children': build_tree(child['Id'])}\n    return [tree[child['Id']] for child in sorted(children, key=lambda x: x['Order'])]\n\n# Build the tree starting from the root (ParentId = 0)\nbuild_tree(0)\n\n# Step 3: Print the tree\ndef print_tree(nodes, level=0):\n    for node in nodes:\n        print(" " * (level * 4) + node['Name'])\n        print_tree(node['Children'], level + 1)\n\n# Print the tree starting from the top-level nodes\nprint_tree(tree[0])