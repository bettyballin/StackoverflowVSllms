import hashlib\nimport uuid\n\ndef get_hardware_id():\n    # Generate a composite hardware ID from multiple components\n    mac_addr = uuid.UUID(int=uuid.getnode()).hex[-12:]\n    cpu_id = "cpu_serial_number"  # This needs platform-specific implementation\n    motherboard_id = "motherboard_serial_number"  # This needs platform-specific implementation\n    hardware_id = mac_addr + cpu_id + motherboard_id\n    return hardware_id\n\ndef generate_license_key(hardware_id, private_key):\n    # Hash the hardware ID\n    hardware_hash = hashlib.sha256(hardware_id.encode()).hexdigest()\n    \n    # Sign the hash with the private key (simplified example)\n    license_key = hashlib.sha256((hardware_hash + private_key).encode()).hexdigest()\n    return license_key\n\ndef validate_license_key(hardware_id, license_key, private_key):\n    # Generate the expected license key\n    expected_license_key = generate_license_key(hardware_id, private_key)\n    return expected_license_key == license_key\n\n# Example usage\nhardware_id = get_hardware_id()\nprivate_key = "your_private_key"\nlicense_key = generate_license_key(hardware_id, private_key)\n\n# Validate license key\nis_valid = validate_license_key(hardware_id, license_key, private_key)\nprint("License key is valid:", is_valid)