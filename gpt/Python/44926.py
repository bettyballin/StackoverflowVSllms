import random\n\n# Define the Feistel cipher functions\ndef feistel_round(value, key):\n    return (value + key) % 10**8\n\ndef feistel_encrypt(order_number, rounds=4):\n    left = order_number // 10**4\n    right = order_number % 10**4\n    for _ in range(rounds):\n        left, right = right, feistel_round(left, right)\n    return left * 10**4 + right\n\ndef feistel_decrypt(obfuscated_number, rounds=4):\n    left = obfuscated_number // 10**4\n    right = obfuscated_number % 10**4\n    for _ in range(rounds):\n        left, right = feistel_round(right, left), left\n    return left * 10**4 + right\n\n# Example usage\norder_number = 123456\nkey = 1234  # This should be a secret key, use a stronger method in production\n\nobfuscated_number = feistel_encrypt(order_number)\nprint(f"Obfuscated number: {obfuscated_number}")\n\noriginal_number = feistel_decrypt(obfuscated_number)\nprint(f"Original number: {original_number}")