from collections import deque\n\ndef bfs(maze, start, end):\n    rows, cols = len(maze), len(maze[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    queue = deque([(start[0], start[1], 0)])  # (row, col, distance)\n    visited = set()\n    visited.add((start[0], start[1]))\n\n    while queue:\n        r, c, dist = queue.popleft()\n\n        if (r, c) == end:\n            return dist\n\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited and maze[nr][nc] != '#':\n                queue.append((nr, nc, dist + 1))\n                visited.add((nr, nc))\n\n    return "No valid path exists"\n\n# Example usage:\nmaze = [\n    ['S', '.', '.', '#'],\n    ['.', '#', '.', '#'],\n    ['.', '#', 'E', '.']\n]\n\nstart = (0, 0)\nend = (2, 2)\n\nprint(bfs(maze, start, end))