from lark import Lark, Transformer\n\n   grammar = """\n   ?start: sum\n         | NAME "=" sum    -> assign_var\n\n   ?sum: product\n       | sum "+" product   -> add\n       | sum "-" product   -> sub\n\n   ?product: atom\n       | product "*" atom  -> mul\n       | product "/" atom  -> div\n\n   ?atom: NUMBER           -> number\n        | "-" atom         -> neg\n        | NAME             -> var\n        | "(" sum ")"\n\n   %import common.CNAME -> NAME\n   %import common.NUMBER\n   %import common.WS\n   %ignore WS\n   """\n\n   class CalculateTree(Transformer):\n       from operator import add, sub, mul, truediv as div, neg\n       number = int\n\n       def __init__(self):\n           self.vars = {}\n\n       def assign_var(self, name_value):\n           name, value = name_value\n           self.vars[name] = value\n           return value\n\n       def var(self, name):\n           return self.vars[name]\n\n   parser = Lark(grammar, parser='lalr', transformer=CalculateTree())\n   result = parser.parse("x = 3 + 4 * (2 - 1)")\n   print(result)  # Output will be 7