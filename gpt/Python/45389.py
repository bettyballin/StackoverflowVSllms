import os\nimport base64\nfrom google.oauth2.credentials import Credentials\nfrom google.auth.transport.requests import Request\nfrom google_auth_oauthlib.flow import InstalledAppFlow\nfrom googleapiclient.discovery import build\n\n# If modifying these SCOPES, delete the file token.json.\nSCOPES = ['https://www.googleapis.com/auth/gmail.readonly']\n\ndef main():\n    creds = None\n    # The file token.json stores the user's access and refresh tokens, and is\n    # created automatically when the authorization flow completes for the first\n    # time.\n    if os.path.exists('token.json'):\n        creds = Credentials.from_authorized_user_file('token.json', SCOPES)\n    # If there are no (valid) credentials available, let the user log in.\n    if not creds or not creds.valid:\n        if creds and creds.expired and creds.refresh_token:\n            creds.refresh(Request())\n        else:\n            flow = InstalledAppFlow.from_client_secrets_file(\n                'credentials.json', SCOPES)\n            creds = flow.run_local_server(port=0)\n        # Save the credentials for the next run\n        with open('token.json', 'w') as token:\n            token.write(creds.to_json())\n\n    service = build('gmail', 'v1', credentials=creds)\n\n    # Call the Gmail API\n    results = service.users().messages().list(userId='me', q="has:attachment").execute()\n    messages = results.get('messages', [])\n\n    if not messages:\n        print('No messages found.')\n    else:\n        print('Messages:')\n        for message in messages:\n            msg = service.users().messages().get(userId='me', id=message['id']).execute()\n            for part in msg['payload']['parts']:\n                if part['filename']:\n                    if 'data' in part['body']:\n                        data = part['body']['data']\n                    else:\n                        att_id = part['body']['attachmentId']\n                        att = service.users().messages().attachments().get(userId='me', messageId=message['id'], id=att_id).execute()\n                        data = att['data']\n                    file_data = base64.urlsafe_b64decode(data.encode('UTF-8'))\n                    path = part['filename']\n\n                    with open(path, 'wb') as f:\n                        f.write(file_data)\n                    print(f'Attachment {path} saved.')\n\nif __name__ == '__main__':\n    main()