import unittest\nfrom unittest.mock import MagicMock, patch\nfrom my_serial_library import SerialComm\n\nclass TestSerialComm(unittest.TestCase):\n    @patch('my_serial_library.serial.Serial')\n    def test_message_generation(self, mock_serial):\n        # Create instance of the serial communication class\n        serial_comm = SerialComm('/dev/ttyS0')\n\n        # Mock the serial port\n        mock_serial.return_value.read = MagicMock(return_value=b'\x01\x02\x03')\n\n        # Test sending a message\n        expected_message = b'\x10\x20\x30'\n        serial_comm.send_message(expected_message)\n\n        # Verify the message was sent correctly\n        serial_comm.serial_port.write.assert_called_with(expected_message)\n\n        # Test receiving a message\n        response = serial_comm.receive_message()\n\n        # Verify the response was received correctly\n        self.assertEqual(response, b'\x01\x02\x03')\n\nif __name__ == '__main__':\n    unittest.main()