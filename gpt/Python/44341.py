import networkx as nx\n\ndef k_core(graph, k):\n    return nx.k_core(graph, k)\n\ndef add_vertex_and_update_k_core(graph, new_vertex, edges, k):\n    graph.add_node(new_vertex)\n    graph.add_edges_from(edges)\n    \n    # Incremental update of the k-core:\n    updated_core = {v: min(k, graph.degree(v)) for v in graph.nodes()}\n    changes = True\n    while changes:\n        changes = False\n        for v in list(graph.nodes()):\n            if graph.degree(v) < k and updated_core[v] == k:\n                updated_core[v] = k - 1\n                changes = True\n                for neighbor in graph.neighbors(v):\n                    if updated_core[neighbor] > updated_core[v]:\n                        updated_core[neighbor] = updated_core[v]\n                        changes = True\n    \n    return {v: graph.nodes[v] for v in updated_core if updated_core[v] >= k}\n\n# Example usage:\nG = nx.Graph()\nG.add_edges_from([('A', 'B'), ('A', 'C'), ('A', 'D'), ('D', 'E'), ('B', 'F'), ('C', 'F')])\n\ninitial_k = 2\nprint("Initial k-core:", k_core(G, initial_k))\n\n# Adding new vertex 'G' with edges to 'D' and 'E'\nnew_vertex = 'G'\nnew_edges = [('G', 'D'), ('G', 'E')]\nupdated_k_core = add_vertex_and_update_k_core(G, new_vertex, new_edges, initial_k)\nprint("Updated k-core after adding new vertex:", updated_k_core)