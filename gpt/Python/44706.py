from collections import deque\n\ndef bfs_shortest_path(graph, start, goal):\n    # Keep track of visited nodes\n    visited = set()\n    # Queue for BFS: stores (node, path) tuples\n    queue = deque([(start, [start])])\n\n    while queue:\n        (current_node, path) = queue.popleft()\n        # Check if we reached the goal\n        if current_node == goal:\n            return path\n\n        # Mark the node as visited\n        visited.add(current_node)\n\n        # Add neighbors to the queue\n        for neighbor in graph[current_node]:\n            if neighbor not in visited:\n                queue.append((neighbor, path + [neighbor]))\n\n    # If no path found\n    return None\n\n# Example usage\ngraph = {\n    'Kevin Bacon': ['Tom Hanks', 'Meryl Streep'],\n    'Tom Hanks': ['Kevin Bacon', 'Julia Roberts', 'Robin Wright'],\n    'Meryl Streep': ['Kevin Bacon', 'Anne Hathaway'],\n    'Julia Roberts': ['Tom Hanks'],\n    'Robin Wright': ['Tom Hanks'],\n    'Anne Hathaway': ['Meryl Streep'],\n}\n\nstart_person = 'Kevin Bacon'\ngoal_person = 'Anne Hathaway'\nshortest_path = bfs_shortest_path(graph, start_person, goal_person)\n\nif shortest_path:\n    print(f"The shortest path from {start_person} to {goal_person} is: {' -> '.join(shortest_path)}")\nelse:\n    print(f"No path found from {start_person} to {goal_person}")