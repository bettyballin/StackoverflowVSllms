import heapq\n\ndef min_cost_huffman(n):\n    # Initialize min-heap with the initial costs of each bitstring\n    heap = [1] * n\n    heapq.heapify(heap)\n    \n    # Initialize total cost\n    total_cost = 0\n    \n    # Combine the two smallest elements until one element is left\n    for _ in range(n - 1):\n        first = heapq.heappop(heap)\n        second = heapq.heappop(heap)\n        combined = first + second\n        total_cost += combined\n        heapq.heappush(heap, combined)\n    \n    return total_cost\n\n# Example: Calculate minimum total cost for 10 bitstrings\nn = 10\nprint(min_cost_huffman(n))  # Output should be 74 for n = 10