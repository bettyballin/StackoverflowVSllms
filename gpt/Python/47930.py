from scipy.spatial import KDTree\nimport numpy as np\n\ndef find_farthest_point(A, B):\n    # Convert sets to numpy arrays\n    A = np.array(A)\n    B = np.array(B)\n    \n    # Create a KDTree for set B\n    tree = KDTree(B)\n    \n    max_distance = -1\n    farthest_point = None\n    \n    # Iterate over points in set A\n    for point in A:\n        # Find the nearest neighbor in set B\n        distance, _ = tree.query(point)\n        \n        # Check if this point is farther than the current farthest\n        if distance > max_distance:\n            max_distance = distance\n            farthest_point = tuple(point)\n    \n    return farthest_point, max_distance\n\n# Example usage\nA = [(2,), (4,), (6,), (8,)]\nB = [(1,), (3,), (5,)]\n\nfarthest_point, distance = find_farthest_point(A, B)\nprint(f"The farthest point is {farthest_point} with a distance of {distance}")