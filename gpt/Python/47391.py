from twisted.internet import reactor\nfrom twisted.mail import smtp\nfrom twisted.mail.smtp import IMessageDelivery, IMessage, IUser\nfrom twisted.internet.defer import succeed, Deferred\n\nclass ConsoleMessageDelivery:\n    def receivedHeader(self, helo, origin, recipients):\n        return "Received: Console Message Delivery"\n\n    def validateFrom(self, helo, origin):\n        return origin\n\n    def validateTo(self, user):\n        return ConsoleMessage()\n\nclass ConsoleMessage:\n    def lineReceived(self, line):\n        print(line)\n\n    def eomReceived(self):\n        print("End of message")\n        return succeed(None)\n\n    def connectionLost(self):\n        pass\n\nclass ConsoleSMTPFactory(smtp.SMTPFactory):\n    def buildProtocol(self, addr):\n        smtpProtocol = smtp.ESMTP()\n        smtpProtocol.delivery = ConsoleMessageDelivery()\n        return smtpProtocol\n\nreactor.listenTCP(2525, ConsoleSMTPFactory())\nreactor.run()