import cv2\nimport numpy as np\n\n# Points in the distorted image (corner points of the distorted rectangle)\npts_src = np.array([[x1, y1], [x2, y2], [x3, y3], [x4, y4]])\n\n# Corresponding points in the undistorted rectangle (perfect rectangle)\npts_dst = np.array([[0, 0], [width, 0], [width, height], [0, height]])\n\n# Compute the homography matrix\nh, status = cv2.findHomography(pts_dst, pts_src)\n\n# Function to generate grid points in the undistorted rectangle\ndef generate_grid(width, height, rows, cols):\n    grid_points = []\n    for i in range(1, rows):\n        y = i * height / rows\n        grid_points.append([(0, y), (width, y)])\n    for j in range(1, cols):\n        x = j * width / cols\n        grid_points.append([(x, 0), (x, height)])\n    return grid_points\n\n# Generate grid points\nrows, cols = 3, 5  # Example grid dimensions\ngrid_points = generate_grid(width, height, rows, cols)\n\n# Transform grid points using the homography matrix\nfor line in grid_points:\n    pt1 = np.array([[line[0][0], line[0][1], 1]])\n    pt2 = np.array([[line[1][0], line[1][1], 1]])\n    \n    dst_pt1 = cv2.perspectiveTransform(np.array([pt1]), h)\n    dst_pt2 = cv2.perspectiveTransform(np.array([pt2]), h)\n    \n    # Draw the transformed lines on the image\n    cv2.line(image, (dst_pt1[0][0][0], dst_pt1[0][0][1]), (dst_pt2[0][0][0], dst_pt2[0][0][1]), (255, 0, 0), 2)\n\n# Display the image\ncv2.imshow('Grid', image)\ncv2.waitKey(0)\ncv2.destroyAllWindows()