import os\nimport fcntl\n\ndef set_nonblocking(fd):\n    flags = fcntl.fcntl(fd, fcntl.F_GETFL)\n    fcntl.fcntl(fd, fcntl.F_SETFL, flags | os.O_NONBLOCK)\n\ndef main():\n    r, w = os.pipe()\n\n    pid = os.fork()\n    if pid > 0:\n        # Parent process\n        os.close(w)  # Close the write end of the pipe\n        r = os.fdopen(r, 'r')\n\n        set_nonblocking(r.fileno())\n\n        while True:\n            try:\n                data = r.read()\n                if data:\n                    print(f"Parent read: {data}")\n                else:\n                    break\n            except BlockingIOError:\n                continue\n\n        r.close()\n\n    else:\n        # Child process\n        os.close(r)  # Close the read end of the pipe\n        w = os.fdopen(w, 'w')\n\n        for i in range(5):\n            w.write(f"Message {i}\n")\n            w.flush()\n            time.sleep(1)  # Simulate some work\n\n        w.close()\n        os._exit(0)\n\nif __name__ == "__main__":\n    main()