class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\ndef pack_rectangles(rectangles):\n    # Sort rectangles by height (or width)\n    rectangles.sort(key=lambda rect: rect.height, reverse=True)\n    \n    # List to keep track of the current rows\n    rows = []\n    \n    for rect in rectangles:\n        placed = False\n        for row in rows:\n            if row["remaining_width"] >= rect.width:\n                row["rectangles"].append(rect)\n                row["remaining_width"] -= rect.width\n                placed = True\n                break\n        if not placed:\n            # Create a new row\n            new_row = {\n                "rectangles": [rect],\n                "height": rect.height,\n                "remaining_width": float('inf')  # No limit on width\n            }\n            rows.append(new_row)\n    \n    # Calculate the total area\n    total_width = max(sum(rect.width for rect in row["rectangles"]) for row in rows)\n    total_height = sum(row["height"] for row in rows)\n    total_area = total_width * total_height\n    \n    return total_area\n\n# Example usage\nrectangles = [\n    Rectangle(2, 4),\n    Rectangle(3, 2),\n    Rectangle(4, 1),\n    Rectangle(1, 3),\n]\n\nminimal_area = pack_rectangles(rectangles)\nprint(f"Minimal area to enclose all rectangles: {minimal_area}")