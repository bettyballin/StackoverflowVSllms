function findShortestRoute(flights, startCity, endCity):\n    priorityQueue = new PriorityQueue()\n    priorityQueue.push((startCity, 0, 0))  // (city, totalTime, stopovers)\n    \n    bestTimes = {}  // Dictionary to track the best time to reach each city\n    bestTimes[startCity] = (0, 0)  // (totalTime, stopovers)\n    \n    while not priorityQueue.isEmpty():\n        (currentCity, currentTime, currentStopovers) = priorityQueue.pop()\n        \n        if currentCity == endCity:\n            return (currentTime, currentStopovers)  // Destination reached\n        \n        for flight in getOutgoingFlights(currentCity):\n            nextCity = flight.arrivalCity\n            layover = flight.departureTime - currentTime\n            newTime = flight.arrivalTime\n            newStopovers = currentStopovers + 1\n            \n            if layover >= 20:  // Check for minimum layover time\n                if (nextCity not in bestTimes) or (newTime < bestTimes[nextCity][0]) or (newStopovers < bestTimes[nextCity][1]):\n                    bestTimes[nextCity] = (newTime, newStopovers)\n                    priorityQueue.push((nextCity, newTime, newStopovers))\n    \n    return None  // No route found\n\nfunction getOutgoingFlights(city):\n    // Return a list of flights departing from the given city\n    // This function should query the database or data structure holding the flight informatio