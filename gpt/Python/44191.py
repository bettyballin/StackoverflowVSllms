import hashlib\n\ndef sparse_bit_vector_hash(bit_vector):\n    # Convert the bit vector to a string\n    bit_vector_str = ''.join(map(str, bit_vector))\n    \n    # Use a cryptographic hash function (e.g., SHA-256)\n    sha256 = hashlib.sha256()\n    sha256.update(bit_vector_str.encode('utf-8'))\n    \n    # Get the hash result and truncate to 32 bits\n    hash_result = sha256.digest()[:4]\n    \n    # Convert to an integer\n    hash_int = int.from_bytes(hash_result, byteorder='big')\n    \n    return hash_int\n\n# Example usage\nbit_vector = [0] * 4096\n# Set some bits to 1 for the example\nbit_vector[100] = 1\nbit_vector[200] = 1\n\nhashed_value = sparse_bit_vector_hash(bit_vector)\nprint(f"Hashed value: {hashed_value}")