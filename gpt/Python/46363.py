from flask import Flask, request, jsonify, session\nfrom werkzeug.security import generate_password_hash, check_password_hash\nimport re\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key'\n\n# In-memory storage for demonstration purposes\nusers = {}\n\n@app.route('/register', methods=['POST'])\ndef register():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):\n        return jsonify({"error": "Invalid email address"}), 400\n    if email in users:\n        return jsonify({"error": "Email already registered"}), 400\n    users[email] = generate_password_hash(password)\n    return jsonify({"message": "Registration successful"}), 200\n\n@app.route('/login', methods=['POST'])\ndef login():\n    data = request.json\n    email = data.get('email')\n    password = data.get('password')\n    if email not in users or not check_password_hash(users[email], password):\n        return jsonify({"error": "Invalid email or password"}), 400\n    session['user'] = email\n    return jsonify({"message": "Login successful"}), 200\n\n@app.route('/change_email', methods=['POST'])\ndef change_email():\n    data = request.json\n    old_email = session.get('user')\n    new_email = data.get('new_email')\n    if not old_email or old_email not in users:\n        return jsonify({"error": "User not logged in or invalid session"}), 400\n    if not re.match(r"[^@]+@[^@]+\.[^@]+", new_email):\n        return jsonify({"error": "Invalid new email address"}), 400\n    users[new_email] = users.pop(old_email)\n    session['user'] = new_email\n    return jsonify({"message": "Email changed successfully"}), 200\n\nif __name__ == '__main__':\n    app.run(debug=True)