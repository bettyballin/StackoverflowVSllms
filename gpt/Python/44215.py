class DisjointSet:\n    def __init__(self):\n        self.parent = {}\n        self.rank = {}\n\n    def makeSet(self, x):\n        self.parent[x] = x\n        self.rank[x] = 0\n\n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def union(self, x, y):\n        rootX = self.find(x)\n        rootY = self.find(y)\n\n        if rootX != rootY:\n            if self.rank[rootX] > self.rank[rootY]:\n                self.parent[rootY] = rootX\n            elif self.rank[rootX] < self.rank[rootY]:\n                self.parent[rootX] = rootY\n            else:\n                self.parent[rootY] = rootX\n                self.rank[rootX] += 1\n\nclass TreeNode:\n    def __init__(self, value, children=None):\n        self.value = value\n        self.children = children if children else []\n\n# Example usage\nds = DisjointSet()\nnode1 = TreeNode(1)\nnode2 = TreeNode(2)\nnode3 = TreeNode(3)\n\nds.makeSet(node1)\nds.makeSet(node2)\nds.makeSet(node3)\n\nds.union(node1, node2)  # Merge equivalence classes of node1 and node2\nprint(ds.find(node1) == ds.find(node2))  # Should print True