import re\n\n# Function to normalize addresses\ndef normalize_address(address):\n    # Convert to uppercase\n    address = address.upper()\n    # Remove punctuation\n    address = re.sub(r'[^\w\s]', '', address)\n    # Replace common street abbreviations\n    address = re.sub(r'\bSTREET\b', 'ST', address)\n    address = re.sub(r'\bST\b', 'ST', address)\n    address = re.sub(r'\bAVENUE\b', 'AVE', address)\n    address = re.sub(r'\bBOULEVARD\b', 'BLVD', address)\n    address = re.sub(r'\bROAD\b', 'RD', address)\n    address = re.sub(r'\bDRIVE\b', 'DR', address)\n    address = re.sub(r'\bLANE\b', 'LN', address)\n    # Add more replacements as needed\n    return address\n\n# Function to generate the match key\ndef generate_match_key(address, zip_code):\n    normalized_address = normalize_address(address)\n    parts = normalized_address.split()\n    if len(parts) < 2:\n        raise ValueError("Address must contain at least house number and street name")\n    \n    house_number = parts[0][:2]  # First 2 characters of house number\n    street_name = parts[1][:4]   # First 4 characters of street name\n    \n    if len(zip_code) >= 5:\n        zip_part = zip_code[:5]  # First 5 characters of zip code\n    else:\n        raise ValueError("Zip code must be at least 5 characters long")\n    \n    match_key = house_number + street_name + zip_part\n    return match_key\n\n# Example usage\naddress1 = "110 Test St"\naddress2 = "110 Test Street"\naddress3 = "110 Test St."\nzip_code = "44680"\n\nmatch_key1 = generate_match_key(address1, zip_code)\nmatch_key2 = generate_match_key(address2, zip_code)\nmatch_key3 = generate_match_key(address3, zip_code)\n\nprint(match_key1)  # Output: 11TEST44680\nprint(match_key2)  # Output: 11TEST44680\nprint(match_key3)  # Output: 11TEST44680