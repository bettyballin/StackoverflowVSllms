from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\nimport numpy as np\n\n# Sample questions (title and body)\nquestions = [\n    "How to implement a related degree measure algorithm?",\n    "What is TF-IDF and how is it used in text processing?",\n    "How to compute cosine similarity between text documents?",\n    "Best practices for text preprocessing in NLP"\n]\n\n# New question to find related questions for\nnew_question = "How to find related questions using cosine similarity?"\n\n# Preprocess function (tokenization, lowercasing, etc.)\ndef preprocess(text):\n    # Implement preprocessing steps here (stemming, removing stop words, etc.)\n    return text.lower()\n\n# Preprocess all questions\nprocessed_questions = [preprocess(q) for q in questions]\nprocessed_new_question = preprocess(new_question)\n\n# Vectorize the questions using TF-IDF\nvectorizer = TfidfVectorizer()\ntfidf_matrix = vectorizer.fit_transform(processed_questions + [processed_new_question])\n\n# Compute cosine similarity\ncosine_similarities = cosine_similarity(tfidf_matrix[-1], tfidf_matrix[:-1]).flatten()\n\n# Get related questions sorted by similarity\nrelated_indices = cosine_similarities.argsort()[::-1]\nrelated_questions = [(questions[i], cosine_similarities[i]) for i in related_indices]\n\n# Print related questions with their similarity scores\nfor question, score in related_questions:\n    print(f"Question: {question}\nSimilarity Score: {score}\n")