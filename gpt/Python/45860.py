class Individual:\n    def __init__(self, id, gender):\n        self.id = id\n        self.gender = gender\n\nclass Child:\n    def __init__(self, child_id, father_id, mother_id):\n        self.child_id = child_id\n        self.father_id = father_id\n        self.mother_id = mother_id\n\n# Example data\nindividuals = [\n    Individual(id=1, gender='M'),\n    Individual(id=2, gender='F'),\n    # Add more individuals\n]\n\nchildren = [\n    Child(child_id=3, father_id=1, mother_id=2),\n    # Add more child relationships\n]\n\ndef find_ancestors(individual_id, generations):\n    ancestors = []\n    current_generation = [individual_id]\n    \n    for _ in range(generations):\n        next_generation = []\n        for id in current_generation:\n            for child in children:\n                if child.child_id == id:\n                    if child.father_id:\n                        next_generation.append(child.father_id)\n                        ancestors.append(child.father_id)\n                    if child.mother_id:\n                        next_generation.append(child.mother_id)\n                        ancestors.append(child.mother_id)\n        current_generation = next_generation\n        if not next_generation:\n            break\n    \n    return ancestors\n\n# Example usage to find ancestors up to 4 generations\nancestors_of_3 = find_ancestors(3, 4)\nprint(ancestors_of_3)