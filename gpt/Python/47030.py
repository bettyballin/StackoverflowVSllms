class AhoCorasick:\n    def __init__(self, keywords):\n        self.trie = {}\n        self.output = {}\n        self.fail = {}\n        self.keywords = keywords\n        self._build_trie()\n        self._build_failure_links()\n\n    def _build_trie(self):\n        for keyword in self.keywords:\n            current_dict = self.trie\n            for letter in keyword:\n                current_dict = current_dict.setdefault(letter, {})\n            current_dict['_end_'] = keyword\n\n    def _build_failure_links(self):\n        from collections import deque\n        queue = deque()\n        for letter in self.trie:\n            self.fail[letter] = self.trie\n            queue.append(self.trie[letter])\n        \n        while queue:\n            current_dict = queue.popleft()\n            for key, value in current_dict.items():\n                if key == '_end_':\n                    continue\n                fail_state = self.fail[current_dict]\n                while fail_state is not None and key not in fail_state:\n                    fail_state = self.fail.get(fail_state)\n                self.fail[value] = fail_state[key] if fail_state else self.trie\n                queue.append(value)\n\n    def search(self, text):\n        current_state = self.trie\n        results = []\n        for i, char in enumerate(text):\n            while current_state is not None and char not in current_state:\n                current_state = self.fail.get(current_state)\n            if current_state is None:\n                current_state = self.trie\n                continue\n            current_state = current_state[char]\n            if '_end_' in current_state:\n                results.append((i - len(current_state['_end_']) + 1, current_state['_end_']))\n        return results\n\n# Example usage\nkeywords = ["he", "she", "his", "hers"]\ntext = "ahishers"\nac = AhoCorasick(keywords)\nmatches = ac.search(text)\nprint(matches)  # Output: [(1, 'his'), (2, 'she'), (4, 'hers')]