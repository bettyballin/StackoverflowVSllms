import socket\nimport threading\n\n# Peer class to handle individual peer operations\nclass Peer:\n    def __init__(self, host, port):\n        self.host = host\n        self.port = port\n        self.peers = []\n\n    def start_server(self):\n        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        server.bind((self.host, self.port))\n        server.listen(5)\n        print(f"Server started on {self.host}:{self.port}")\n\n        while True:\n            client, address = server.accept()\n            threading.Thread(target=self.handle_client, args=(client, address)).start()\n\n    def handle_client(self, client, address):\n        print(f"Connection from {address}")\n        while True:\n            data = client.recv(1024)\n            if not data:\n                break\n            print(f"Received: {data.decode()}")\n            client.send(data)\n        client.close()\n\n    def connect_to_peer(self, peer_host, peer_port):\n        peer = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        peer.connect((peer_host, peer_port))\n        self.peers.append(peer)\n        threading.Thread(target=self.listen_to_peer, args=(peer,)).start()\n\n    def listen_to_peer(self, peer):\n        while True:\n            data = peer.recv(1024)\n            if not data:\n                break\n            print(f"Received from peer: {data.decode()}")\n\n    def send_to_peers(self, message):\n        for peer in self.peers:\n            peer.send(message.encode())\n\n# Example usage\npeer = Peer('localhost', 5000)\nthreading.Thread(target=peer.start_server).start()\n\n# Connect to another peer\npeer.connect_to_peer('localhost', 5001)\n\n# Send message to all connected peers\npeer.send_to_peers("Hello, peer!")