# Define a dictionary with weights for each key based on finger and position difficulty\nkey_weights = {\n    'a': 1, 's': 2, 'd': 1, 'f': 1, 'g': 2, 'h': 2, 'j': 1, 'k': 1, 'l': 2,\n    'q': 2, 'w': 2, 'e': 1, 'r': 1, 't': 2, 'y': 3, 'u': 2, 'i': 2, 'o': 3, 'p': 3,\n    'z': 3, 'x': 3, 'c': 2, 'v': 2, 'b': 3, 'n': 2, 'm': 2,\n    'A': 3, 'S': 4, 'D': 3, 'F': 3, 'G': 4, 'H': 4, 'J': 3, 'K': 3, 'L': 4,\n    'Q': 4, 'W': 4, 'E': 3, 'R': 3, 'T': 4, 'Y': 5, 'U': 4, 'I': 4, 'O': 5, 'P': 5,\n    'Z': 5, 'X': 5, 'C': 4, 'V': 4, 'B': 5, 'N': 4, 'M': 4\n    # Add other keys if needed\n}\n\ndef calculate_word_complexity(word):\n    complexity = 0\n    for char in word:\n        complexity += key_weights.get(char, 5)  # Default weight if key is not found\n    return complexity\n\n# Example usage\nword1 = "suffer"\nword2 = "people"\nprint(f"Complexity of '{word1}': {calculate_word_complexity(word1)}")\nprint(f"Complexity of '{word2}': {calculate_word_complexity(word2)}")