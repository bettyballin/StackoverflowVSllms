def inside(p, cp1, cp2):\n    return (cp2[0] - cp1[0]) * (p[1] - cp1[1]) > (cp2[1] - cp1[1]) * (p[0] - cp1[0])\n\ndef intersection(cp1, cp2, s, e):\n    dc = [cp1[0] - cp2[0], cp1[1] - cp2[1]]\n    dp = [s[0] - e[0], s[1] - e[1]]\n    n1 = cp1[0] * cp2[1] - cp1[1] * cp2[0]\n    n2 = s[0] * e[1] - s[1] * e[0]\n    n3 = 1.0 / (dc[0] * dp[1] - dc[1] * dp[0])\n    return [(n1 * dp[0] - n2 * dc[0]) * n3, (n1 * dp[1] - n2 * dc[1]) * n3]\n\ndef sutherland_hodgman(subject_polygon, clip_polygon):\n    output_list = subject_polygon\n    cp1 = clip_polygon[-1]\n\n    for clip_vertex in clip_polygon:\n        cp2 = clip_vertex\n        input_list = output_list\n        output_list = []\n        s = input_list[-1]\n\n        for subject_vertex in input_list:\n            e = subject_vertex\n            if inside(e, cp1, cp2):\n                if not inside(s, cp1, cp2):\n                    output_list.append(intersection(cp1, cp2, s, e))\n                output_list.append(e)\n            elif inside(s, cp1, cp2):\n                output_list.append(intersection(cp1, cp2, s, e))\n            s = e\n        cp1 = cp2\n    return output_list\n\n# Define your rectangles as lists of 2D vertices (corners)\nrectangle1 = [[1, 1], [5, 1], [5, 4], [1, 4]]\nrectangle2 = [[3, 2], [7, 2], [7, 5], [3, 5]]\n\n# Calculate the resulting polygon from clipping\nresulting_polygon = sutherland_hodgman(rectangle1, rectangle2)\nprint("Resulting Polygon:", resulting_polygon)