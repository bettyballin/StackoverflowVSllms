from collections import deque\n\nclass QueuedMap:\n    def __init__(self):\n        self.deque = deque()\n        self.map = {}\n\n    def enqueue(self, obj_id, data):\n        if obj_id in self.map:\n            raise ValueError("Object ID already exists")\n        self.deque.append(obj_id)\n        self.map[obj_id] = data\n\n    def dequeue(self):\n        if not self.deque:\n            raise IndexError("Dequeue from an empty queue")\n        obj_id = self.deque.popleft()\n        data = self.map.pop(obj_id)\n        return obj_id, data\n\n    def get(self, obj_id):\n        return self.map.get(obj_id)\n\n    def delete(self, obj_id):\n        if obj_id in self.map:\n            del self.map[obj_id]\n            self.deque.remove(obj_id)\n\n    def update(self, obj_id, new_data):\n        if obj_id in self.map:\n            self.map[obj_id] = new_data\n        else:\n            raise KeyError("Object ID not found")\n\n# Example usage:\nqueued_map = QueuedMap()\nqueued_map.enqueue("id1", "message1")\nqueued_map.enqueue("id2", "message2")\nprint(queued_map.get("id1"))  # Output: message1\nprint(queued_map.dequeue())   # Output: ('id1', 'message1')\nqueued_map.update("id2", "new_message2")\nprint(queued_map.get("id2"))  # Output: new_message2\nqueued_map.delete("id2")