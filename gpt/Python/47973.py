class FenwickTree:\n    def __init__(self, size):\n        self.size = size\n        self.tree = [0] * (size + 1)\n    \n    def update(self, index, delta):\n        while index <= self.size:\n            self.tree[index] += delta\n            index += index & -index\n    \n    def prefix_sum(self, index):\n        result = 0\n        while index > 0:\n            result += self.tree[index]\n            index -= index & -index\n        return result\n\n    def range_sum(self, left, right):\n        return self.prefix_sum(right) - self.prefix_sum(left - 1)\n\n# Example usage:\nvalues = [2, 3, 5]\nfenwick = FenwickTree(len(values))\n\n# Build the Fenwick Tree with the initial values\nfor i, val in enumerate(values):\n    fenwick.update(i + 1, val)\n\n# Inserting 1 at the start\nfenwick.update(1, 1)\n\n# Printing cumulative values\nprint([fenwick.prefix_sum(i) for i in range(1, len(values) + 2)])\n\n# Example output:\n# [1, 3, 6, 11]