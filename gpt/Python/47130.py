class IndexedDict:\n    def __init__(self):\n        self._list = []\n        self._dict = {}\n\n    def append(self, key, value):\n        if key in self._dict:\n            raise KeyError(f"Key {key} already exists.")\n        self._list.append(value)\n        self._dict[key] = value\n\n    def __getitem__(self, key):\n        if isinstance(key, int):\n            return self._list[key]\n        elif isinstance(key, str):\n            return self._dict[key]\n        else:\n            raise TypeError("Key must be an int or str.")\n\n    def __len__(self):\n        return len(self._list)\n\n    def __repr__(self):\n        return str(self._list)\n\n# Example usage:\ncollection = IndexedDict()\ncollection.append('first', 'apple')\ncollection.append('second', 'banana')\n\nprint(collection[0])      # Access by index: Output -> 'apple'\nprint(collection['first']) # Access by key: Output -> 'apple'