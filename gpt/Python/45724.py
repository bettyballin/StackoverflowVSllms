from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\nfrom math import radians, cos, sin, asin, sqrt\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///your_database.db'\ndb = SQLAlchemy(app)\n\nclass ZipCode(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    zip_code = db.Column(db.String(10), nullable=False)\n    city = db.Column(db.String(100))\n    state = db.Column(db.String(100))\n    latitude = db.Column(db.Float, nullable=False)\n    longitude = db.Column(db.Float, nullable=False)\n\ndef haversine(lat1, lon1, lat2, lon2):\n    # Calculate the great-circle distance between two points\n    # on the Earth specified in decimal degrees\n    R = 3959  # Radius of Earth in miles\n    dlat = radians(lat2 - lat1)\n    dlon = radians(lon2 - lon1)\n    a = sin(dlat/2) * sin(dlat/2) + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon/2) * sin(dlon/2)\n    c = 2 * asin(sqrt(a))\n    return R * c\n\n@app.route('/items', methods=['GET'])\ndef get_items():\n    user_zip = request.args.get('zip_code')\n    radius = float(request.args.get('radius', 10))\n    \n    user_location = ZipCode.query.filter_by(zip_code=user_zip).first()\n    if not user_location:\n        return jsonify({"error": "Invalid zip code"}), 400\n    \n    user_lat = user_location.latitude\n    user_lon = user_location.longitude\n    \n    items = []  # Replace with actual item query logic\n    nearby_items = []\n    \n    for item in items:\n        item_location = ZipCode.query.filter_by(zip_code=item.zip_code).first()\n        if item_location:\n            distance = haversine(user_lat, user_lon, item_location.latitude, item_location.longitude)\n            if distance <= radius:\n                nearby_items.append(item)\n    \n    return jsonify(nearby_items)\n\nif __name__ == '__main__':\n    app.run(debug=True)