def find_critical_floor(m):\n    # Determine the starting floor interval\n    interval = 1\n    while interval * (interval + 1) // 2 < m:\n        interval += 1\n\n    attempts = 0\n    current_floor = 0\n    previous_floor = 0\n\n    # First coconut is used to find the interval containing the critical floor\n    while current_floor + interval <= m:\n        previous_floor = current_floor\n        current_floor += interval\n        attempts += 1\n        interval -= 1\n        \n        # Simulate the coconut break\n        if is_coconut_broken(current_floor):\n            break\n\n    # Second coconut is used to find the exact floor within the interval\n    for floor in range(previous_floor + 1, current_floor):\n        attempts += 1\n        if is_coconut_broken(floor):\n            return floor, attempts\n\n    return current_floor, attempts\n\ndef is_coconut_broken(floor):\n    # Placeholder function for the actual break test\n    critical_floor = 27  # Example critical floor\n    return floor >= critical_floor\n\n# Example usage\nm = 100  # Number of floors in the building\ncritical_floor, attempts = find_critical_floor(m)\nprint(f"Critical floor: {critical_floor}, Attempts: {attempts}")