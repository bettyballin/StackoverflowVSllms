class HighLevelAPI:\n    def __init__(self, config=None):\n        self.config = config or self.default_config()\n    \n    def default_config(self):\n        # Sensible defaults\n        return {'option1': True, 'option2': 'default'}\n    \n    def perform_task(self, data):\n        # High-level method that uses the low-level API under the hood\n        processor = LowLevelAPI(self.config)\n        return processor.process(data)\n\nclass LowLevelAPI:\n    def __init__(self, config):\n        self.config = config\n    \n    def process(self, data):\n        # Low-level processing with more control\n        if self.config['option1']:\n            data = self._transform_data(data)\n        return data\n    \n    def _transform_data(self, data):\n        # Detailed transformation logic\n        return data.upper()\n\n# Usage\napi = HighLevelAPI()\nresult = api.perform_task("example data")\nprint(result)  # Output: EXAMPLE DATA\n\n# Advanced usage with custom configuration\ncustom_config = {'option1': False, 'option2': 'custom'}\nadvanced_api = HighLevelAPI(config=custom_config)\nadvanced_result = advanced_api.perform_task("example data")\nprint(advanced_result)  # Output: example data