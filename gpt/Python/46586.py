import rapidfuzz\nfrom rapidfuzz import process, fuzz\nimport sqlite3\n\ndef normalize(text):\n    return ''.join(e for e in text if e.isalnum()).lower()\n\ndef find_similar_customer(firstname, lastname, zip, city, db_path):\n    conn = sqlite3.connect(db_path)\n    cursor = conn.cursor()\n    \n    # Normalize input data\n    firstname_norm = normalize(firstname)\n    lastname_norm = normalize(lastname)\n    zip_norm = normalize(zip)\n    city_norm = normalize(city)\n    \n    # Fetch all customer records\n    cursor.execute("SELECT id, firstname, lastname, zip, city FROM customers")\n    records = cursor.fetchall()\n    \n    potential_matches = []\n    \n    for record in records:\n        record_id, db_firstname, db_lastname, db_zip, db_city = record\n        \n        # Normalize database records\n        db_firstname_norm = normalize(db_firstname)\n        db_lastname_norm = normalize(db_lastname)\n        db_zip_norm = normalize(db_zip)\n        db_city_norm = normalize(db_city)\n        \n        # Calculate similarity score\n        score = (\n            fuzz.ratio(firstname_norm, db_firstname_norm) +\n            fuzz.ratio(lastname_norm, db_lastname_norm) +\n            fuzz.ratio(zip_norm, db_zip_norm) +\n            fuzz.ratio(city_norm, db_city_norm)\n        ) / 4\n        \n        if score > 75:  # Threshold for considering a match\n            potential_matches.append((record_id, score))\n    \n    conn.close()\n    \n    # Sort matches by score\n    potential_matches.sort(key=lambda x: x[1], reverse=True)\n    \n    return potential_matches\n\n# Example usage\ndb_path = 'path_to_your_database.db'\nfirstname = 'John'\nlastname = 'Doe'\nzip = '12345'\ncity = 'ExampleCity'\n\nmatches = find_similar_customer(firstname, lastname, zip, city, db_path)\nprint(matches)