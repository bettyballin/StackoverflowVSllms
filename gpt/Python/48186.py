from collections import defaultdict\n\ndef find_optimal_rummy_sets(cards):\n    # Organize cards by value and by suit\n    value_dict = defaultdict(list)\n    suit_dict = defaultdict(list)\n    \n    for card in cards:\n        value, suit = card[:-1], card[-1]\n        value_dict[value].append(card)\n        suit_dict[suit].append(card)\n    \n    sets = []\n    \n    # Find sets of the same value\n    for value, value_cards in value_dict.items():\n        while len(value_cards) >= 3:\n            sets.append(value_cards[:3])\n            value_cards = value_cards[3:]\n    \n    # Find sets of the same suit and sequential order\n    for suit, suit_cards in suit_dict.items():\n        suit_cards = sorted(suit_cards, key=lambda x: int(x[:-1]))\n        i = 0\n        while i <= len(suit_cards) - 3:\n            if int(suit_cards[i+1][:-1]) == int(suit_cards[i][:-1]) + 1 and int(suit_cards[i+2][:-1]) == int(suit_cards[i][:-1]) + 2:\n                sets.append([suit_cards[i], suit_cards[i+1], suit_cards[i+2]])\n                suit_cards = suit_cards[:i] + suit_cards[i+3:]\n                i = 0  # Restart from the beginning after finding a set\n            else:\n                i += 1\n    \n    return sets\n\n# Example usage:\ncards = ['6D', '7D', '7C', '7H', '8D', '8C', '9C', '10H']\noptimal_sets = find_optimal_rummy_sets(cards)\nprint(optimal_sets)