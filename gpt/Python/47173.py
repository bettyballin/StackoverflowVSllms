import unittest\nfrom unittest.mock import patch, MagicMock\nimport urllib.request\n\ndef fetch_data(url):\n    with urllib.request.urlopen(url) as response:\n        return response.read()\n\nclass TestFetchData(unittest.TestCase):\n    @patch('urllib.request.urlopen')\n    def test_fetch_data(self, mock_urlopen):\n        # Create a mock response object with the desired return value\n        mock_response = MagicMock()\n        mock_response.read.return_value = b'Test data'\n        mock_urlopen.return_value = mock_response\n\n        # Call the function under test\n        result = fetch_data('http://example.com')\n\n        # Assert that the function returns the expected result\n        self.assertEqual(result, b'Test data')\n\n        # Assert that urlopen was called with the correct URL\n        mock_urlopen.assert_called_with('http://example.com')\n\nif __name__ == '__main__':\n    unittest.main()