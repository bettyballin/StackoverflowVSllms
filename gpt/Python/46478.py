# Inverse Filter (Python)\ndef inverse_filter(image):\n    height, width = image.shape\n    for i in range(height):\n        for j in range(width):\n            image[i, j] = 255 - image[i, j]\n    return image\n\n# Convolution Filter (Python)\nimport numpy as np\n\ndef convolution_filter(image, kernel):\n    height, width = image.shape\n    kernel_size = kernel.shape[0]\n    pad_size = kernel_size // 2\n    padded_image = np.pad(image, pad_size, mode='constant')\n    new_image = np.zeros_like(image)\n    \n    for i in range(height):\n        for j in range(width):\n            neighborhood = padded_image[i:i+kernel_size, j:j+kernel_size]\n            new_image[i, j] = np.sum(neighborhood * kernel)\n    return new_image