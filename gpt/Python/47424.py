def generate_amortization_schedule(principal, annual_rate, years):\n    monthly_rate = annual_rate / 12 / 100\n    num_payments = years * 12\n    monthly_payment = (principal * monthly_rate * (1 + monthly_rate) ** num_payments) / ((1 + monthly_rate) ** num_payments - 1)\n\n    schedule = []\n    remaining_principal = principal\n\n    for i in range(1, num_payments + 1):\n        interest = remaining_principal * monthly_rate\n        principal_payment = monthly_payment - interest\n        remaining_principal -= principal_payment\n\n        schedule.append({\n            'Month': i,\n            'Payment': round(monthly_payment, 2),\n            'Principal': round(principal_payment, 2),\n            'Interest': round(interest, 2),\n            'Remaining Principal': round(remaining_principal, 2)\n        })\n\n    return schedule\n\n# Example usage\nprincipal = 300000  # Loan amount\nannual_rate = 5     # Annual interest rate in percent\nyears = 30          # Loan term in years\n\nschedule = generate_amortization_schedule(principal, annual_rate, years)\n\nfor payment in schedule:\n    print(payment)