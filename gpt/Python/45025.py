from collections import defaultdict\n\n# Function to perform DFS and find bridges\ndef dfs(graph, u, visited, disc, low, parent, bridges, time):\n    visited[u] = True\n    disc[u] = low[u] = time[0]\n    time[0] += 1\n\n    for v in graph[u]:\n        if not visited[v]:\n            parent[v] = u\n            dfs(graph, v, visited, disc, low, parent, bridges, time)\n            low[u] = min(low[u], low[v])\n            \n            if low[v] > disc[u]:\n                bridges.append((u, v))\n        elif v != parent[u]:\n            low[u] = min(low[u], disc[v])\n\n# Function to find all bridges in the graph\ndef find_bridges(graph, V):\n    visited = [False] * V\n    disc = [float('inf')] * V\n    low = [float('inf')] * V\n    parent = [-1] * V\n    bridges = []\n    time = [0]\n\n    for i in range(V):\n        if not visited[i]:\n            dfs(graph, i, visited, disc, low, parent, bridges, time)\n    \n    return bridges\n\n# Function to count pairs of edges that disconnect the graph\ndef count_disconnect_pairs(graph, V):\n    bridges = find_bridges(graph, V)\n    bridge_set = set(bridges)\n    M = sum(len(edges) for edges in graph.values()) // 2\n    K = len(bridges)\n\n    # Calculate pairs of edges that include at least one bridge\n    result = (M - K) * K + K * (K - 1) // 2\n\n    # Calculate pairs of non-bridge edges that can also disconnect the graph\n    for u in range(V):\n        for v in graph[u]:\n            if (u, v) not in bridge_set and (v, u) not in bridge_set:\n                graph[u].remove(v)\n                graph[v].remove(u)\n                \n                visited = [False] * V\n                dfs(graph, 0, visited, [-1] * V, [-1] * V, [-1] * V, [], [0])\n                \n                if not all(visited):\n                    result += 1\n                \n                graph[u].append(v)\n                graph[v].append(u)\n\n    return result\n\n# Example usage:\nV = 4\ngraph = defaultdict(list)\nedges = [(0, 1), (1, 2), (2, 0), (1, 3)]\n\nfor u, v in edges:\n    graph[u].append(v)\n    graph[v].append(u)\n\nprint(count_disconnect_pairs(graph, V))