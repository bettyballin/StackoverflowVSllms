import time\n\nclass Processor:\n    def __init__(self):\n        self.busy = False\n\n    def execute_instruction(self, instruction):\n        if self.busy:\n            print("Processor is busy. Please wait.")\n            return\n\n        self.busy = True\n        print(f"Executing instruction: {instruction}")\n        \n        # Simulate instruction execution time\n        execution_time = self.get_execution_time(instruction)\n        time.sleep(execution_time)\n        \n        print(f"Instruction {instruction} completed.")\n        self.busy = False\n\n    def get_execution_time(self, instruction):\n        # Determine the execution time based on the instruction complexity\n        # For simplicity, let's assume different instructions take different fixed times\n        if instruction == "ADD 1+0":\n            return 0.5  # 0.5 seconds\n        elif instruction == "ADD 1+7":\n            return 1.5  # 1.5 seconds\n        else:\n            return 1.0  # Default 1 second\n\n# Example usage\nprocessor = Processor()\nprocessor.execute_instruction("ADD 1+0")\nprocessor.execute_instruction("ADD 1+7")