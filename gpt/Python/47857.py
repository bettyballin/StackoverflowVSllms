import sys\nimport datetime\nimport io\n\nclass TeeWithTimestamp(io.TextIOBase):\n    """\n    Class used to tee the output of a stream (such as stdout or stderr) into\n    another stream, and to add a timestamp to each message printed.\n    """\n\n    def __init__(self, file1, file2):\n        """Initializes the TeeWithTimestamp"""\n        self.file1 = file1\n        self.file2 = file2\n        self.at_start_of_line = True\n\n    def write(self, text):\n        """Writes text to both files, prefixed with a timestamp"""\n        if len(text):\n            # Add timestamp if at the start of a line; also add [STDERR] for stderr\n            if self.at_start_of_line:\n                now = datetime.datetime.now()\n                prefix = now.strftime('[%H:%M:%S] ')\n                if self.file1 == sys.__stderr__:\n                    prefix += '[STDERR] '\n                text = prefix + text\n\n            self.file1.write(text)\n            self.file2.write(text)\n\n            self.at_start_of_line = (text[-1] == '\n')\n\n    def flush(self):\n        """Flushes both files"""\n        self.file1.flush()\n        self.file2.flush()\n\n# Example usage:\n# log_file has already been opened\nlog_file = open('logfile.txt', 'a')\nsys.stdout = TeeWithTimestamp(sys.stdout, log_file)\n\n# Now when you print, it will write to both stdout and the log file with a timestamp\nprint('foo')