from collections import defaultdict\n\ndef detect_loops_and_dead_ends(graph, start, end):\n    visited = set()\n    stack = [(start, [start])]\n\n    while stack:\n        (node, path) = stack.pop()\n        if node not in visited:\n            if node == end:\n                continue\n\n            visited.add(node)\n\n            for neighbor in graph[node]:\n                if neighbor in path:\n                    print(f"Loop detected: {path + [neighbor]}")\n                    return False\n                else:\n                    stack.append((neighbor, path + [neighbor]))\n\n    for node in graph:\n        if node != end and node not in visited:\n            print(f"Dead end detected at node {node}")\n            return False\n\n    return True\n\n# Example usage:\ngraph = defaultdict(list)\ngraph['start'] = ['n1']\ngraph['n1'] = ['n2', 'n5']\ngraph['n2'] = ['n3', 'n6']\ngraph['n3'] = ['n4']\ngraph['n4'] = ['end']\ngraph['n5'] = ['n2']\ngraph['n6'] = ['n4', 'n7']\ngraph['n7'] = ['end']\ngraph['n8'] = ['n9']\ngraph['n9'] = ['n10']\ngraph['n10'] = ['n11']\ngraph['n11'] = ['end']\n\nstart = 'start'\nend = 'end'\n\nif detect_loops_and_dead_ends(graph, start, end):\n    print("No loops or dead ends detected")\nelse:\n    print("Issues detected in the graph")