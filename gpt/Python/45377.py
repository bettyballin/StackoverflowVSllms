import hashlib\nimport os\n\ndef generate_token(secret):\n    # Generate a random string K\n    K = os.urandom(16).hex()\n    \n    # Calculate the hash H\n    hash_obj = hashlib.sha256((K + secret).encode('utf-8'))\n    H = hash_obj.hexdigest()\n    \n    # Combine K and H to form the token\n    token = K + H\n    return token\n\ndef validate_token(token, secret):\n    # Split the token into K and H\n    K = token[:32]  # Assuming K is 16 bytes represented as 32 hex characters\n    H = token[32:]\n    \n    # Calculate the hash H'\n    hash_obj = hashlib.sha256((K + secret).encode('utf-8'))\n    H_prime = hash_obj.hexdigest()\n    \n    # Check if H' matches H\n    return H == H_prime\n\n# Example usage:\nsecret = "my_secret_string"\ntoken = generate_token(secret)\nprint("Generated Token:", token)\n\nis_valid = validate_token(token, secret)\nprint("Is the token valid?", is_valid)