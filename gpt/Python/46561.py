from itertools import product\n\ndef generate_all_codes(colors, length):\n    return list(product(colors, repeat=length))\n\ndef get_feedback(code, guess):\n    blacks = sum(c == g for c, g in zip(code, guess))\n    whites = sum(min(code.count(g), guess.count(g)) for g in set(guess)) - blacks\n    return blacks, whites\n\ndef knuth_algorithm():\n    colors = [1, 2, 3, 4, 5, 6]\n    length = 4\n    all_codes = generate_all_codes(colors, length)\n    possible_codes = all_codes[:]\n    \n    def minimax_guess(possible_codes, all_codes):\n        min_max_size = float('inf')\n        best_guess = None\n        for guess in all_codes:\n            max_size = 0\n            for feedback in product(range(length+1), repeat=2):\n                if sum(feedback) > length:\n                    continue\n                partition = [code for code in possible_codes if get_feedback(code, guess) == feedback]\n                max_size = max(max_size, len(partition))\n            if max_size < min_max_size:\n                min_max_size = max_size\n                best_guess = guess\n        return best_guess\n\n    guess = (1, 1, 2, 2)\n    attempts = 0\n    \n    while True:\n        attempts += 1\n        print(f"Attempt {attempts}: {guess}")\n        feedback = input("Enter feedback as 'blacks whites': ")\n        blacks, whites = map(int, feedback.split())\n        if blacks == length:\n            print(f"Code broken in {attempts} attempts! The code is {guess}.")\n            break\n        possible_codes = [code for code in possible_codes if get_feedback(code, guess) == (blacks, whites)]\n        guess = minimax_guess(possible_codes, all_codes)\n\nif __name__ == "__main__":\n    knuth_algorithm()