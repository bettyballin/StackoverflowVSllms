def make_teams(que):\n    total_sum = sum(que)\n    n = len(que)\n    \n    # Create a DP table to store solutions to subproblems\n    dp = [[False] * (total_sum // 2 + 1) for _ in range(n + 1)]\n    \n    # Initialize the DP table\n    for i in range(n + 1):\n        dp[i][0] = True\n    \n    # Fill the DP table\n    for i in range(1, n + 1):\n        for j in range(1, total_sum // 2 + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= que[i - 1]:\n                dp[i][j] = dp[i][j] or dp[i - 1][j - que[i - 1]]\n    \n    # Find the largest j such that dp[n][j] is True\n    for j in range(total_sum // 2, -1, -1):\n        if dp[n][j]:\n            subset_sum = j\n            break\n    \n    # Calculate the sums of the two partitions\n    sum1 = subset_sum\n    sum2 = total_sum - sum1\n    \n    print(sum1, sum2)\n\n# Example usage\nque = [2, 3, 10, 5, 8, 9, 7, 3, 5, 2]\nmake_teams(que)