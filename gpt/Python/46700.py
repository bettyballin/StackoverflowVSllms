import socket\nimport threading\n\nclass MulticastServer:\n    def __init__(self, host, port):\n        self.server_address = (host, port)\n        self.clients = []\n\n    def start_server(self):\n        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        server_socket.bind(self.server_address)\n        server_socket.listen(5)\n        print(f"Server started at {self.server_address}")\n        \n        while True:\n            client_socket, client_address = server_socket.accept()\n            print(f"Client {client_address} connected")\n            self.clients.append(client_socket)\n            threading.Thread(target=self.handle_client, args=(client_socket,)).start()\n\n    def handle_client(self, client_socket):\n        while True:\n            try:\n                message = client_socket.recv(1024)\n                if message:\n                    self.broadcast(message, client_socket)\n                else:\n                    break\n            except:\n                break\n        client_socket.close()\n\n    def broadcast(self, message, source_socket):\n        for client in self.clients:\n            if client != source_socket:\n                try:\n                    client.sendall(message)\n                except:\n                    self.clients.remove(client)\n\nclass MulticastClient:\n    def __init__(self, host, port):\n        self.server_address = (host, port)\n        self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.client_socket.connect(self.server_address)\n        \n        threading.Thread(target=self.receive_messages).start()\n        self.send_messages()\n    \n    def receive_messages(self):\n        while True:\n            try:\n                message = self.client_socket.recv(1024)\n                if message:\n                    print(f"Received: {message.decode()}")\n                else:\n                    break\n            except:\n                break\n\n    def send_messages(self):\n        while True:\n            message = input("Enter message: ")\n            self.client_socket.sendall(message.encode())\n\nif __name__ == "__main__":\n    choice = input("Start server or client (s/c)? ")\n    host = "localhost"\n    port = 10000\n\n    if choice.lower() == 's':\n        server = MulticastServer(host, port)\n        server.start_server()\n    elif choice.lower() == 'c':\n        client = MulticastClient(host, port)