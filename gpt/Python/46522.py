import time\nfrom collections import deque\n\nclass TokenBucket:\n    def __init__(self, rate, per):\n        self.rate = rate  # tokens per second\n        self.per = per  # seconds\n        self.tokens = rate\n        self.last = time.time()\n        self.queue = deque()\n\n    def add_tokens(self):\n        now = time.time()\n        elapsed = now - self.last\n        self.last = now\n        self.tokens += elapsed * (self.rate / self.per)\n        if self.tokens > self.rate:\n            self.tokens = self.rate\n\n    def try_consume(self, tokens):\n        self.add_tokens()\n        if self.tokens >= tokens:\n            self.tokens -= tokens\n            return True\n        return False\n\n    def enqueue(self, message):\n        self.queue.append((message, time.time()))\n\n    def process_queue(self):\n        while self.queue:\n            message, timestamp = self.queue[0]\n            if self.try_consume(1):  # Assuming each message consumes 1 token\n                print(f"Sending message: {message}")\n                self.queue.popleft()\n            else:\n                break\n\nif __name__ == "__main__":\n    bucket = TokenBucket(rate=5, per=8)  # 5 messages per 8 seconds\n    bucket.enqueue("Message 1")\n    bucket.enqueue("Message 2")\n    bucket.enqueue("Message 3")\n    bucket.enqueue("Message 4")\n    \n    while True:\n        bucket.process_queue()\n        time.sleep(1)\n        bucket.enqueue("Message after sleep")\n        time.sleep(7)