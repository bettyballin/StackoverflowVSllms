def convex_hull(points):\n    # Sort the points lexicographically (tuples compare lexicographically).\n    # Remove duplicates to detect the case we have just one unique point.\n    points = sorted(set(points))\n\n    # Boring case: no points or a single point, possibly repeated multiple times.\n    if len(points) <= 1:\n        return points\n\n    # 2D cross product of OA and OB vectors, i.e. z-component of their 3D cross product.\n    # Returns a positive value, if OAB makes a counter-clockwise turn,\n    # negative for clockwise turn, and zero if the points are collinear.\n    def cross(o, a, b):\n        return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0])\n\n    # Build the lower hull \n    lower = []\n    for p in points:\n        while len(lower) >= 2 and cross(lower[-2], lower[-1], p) <= 0:\n            lower.pop()\n        lower.append(p)\n\n    # Build the upper hull\n    upper = []\n    for p in reversed(points):\n        while len(upper) >= 2 and cross(upper[-2], upper[-1], p) <= 0:\n            upper.pop()\n        upper.append(p)\n\n    # Concatenate lower and upper hull to make the full hull. \n    # The last point of each half is omitted because it's repeated at the beginning of the other half.\n    return lower[:-1] + upper[:-1]\n\n# Example usage:\npoints = [(0, 0), (1, 1), (2, 2), (2, 0), (2, 4), (3, 3), (4, 2), (4, 4)]\nhull_points = convex_hull(points)\nprint(hull_points)