class BasicInterpreter:\n    def __init__(self):\n        self.variables = {}\n\n    def parse_and_run(self, code):\n        lines = code.strip().split('\n')\n        for line in lines:\n            self.run_line(line.strip())\n\n    def run_line(self, line):\n        if line.startswith("PRINT"):\n            self.handle_print(line)\n        elif "=" in line:\n            self.handle_assignment(line)\n\n    def handle_print(self, line):\n        expr = line[6:]\n        print(self.evaluate_expression(expr))\n\n    def handle_assignment(self, line):\n        var, expr = line.split('=')\n        var = var.strip()\n        self.variables[var] = self.evaluate_expression(expr)\n\n    def evaluate_expression(self, expr):\n        try:\n            return eval(expr, {}, self.variables)\n        except Exception as e:\n            print(f"Error evaluating expression: {expr} -> {e}")\n            return None\n\n# Example usage:\ncode = """\n10 X = 10\n20 Y = 20\n30 PRINT X + Y\n"""\ninterpreter = BasicInterpreter()\ninterpreter.parse_and_run(code)