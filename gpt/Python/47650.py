class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end_of_prefix = False\n        self.prefix_length = 0\n\nclass IPv6Router:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, prefix, length):\n        node = self.root\n        for bit in prefix[:length]:\n            if bit not in node.children:\n                node.children[bit] = TrieNode()\n            node = node.children[bit]\n        node.is_end_of_prefix = True\n        node.prefix_length = length\n\n    def longest_prefix_match(self, ip_address):\n        node = self.root\n        longest_prefix_len = 0\n        for i, bit in enumerate(ip_address):\n            if bit in node.children:\n                node = node.children[bit]\n                if node.is_end_of_prefix:\n                    longest_prefix_len = node.prefix_length\n            else:\n                break\n        return longest_prefix_len\n\n# Example usage\nrouter = IPv6Router()\nrouter.insert('00100000', 8)       # Insert 8-bit prefix\nrouter.insert('0010000000000101', 16)  # Insert 16-bit prefix\nrouter.insert('001000000000010100000000', 24)  # Insert 24-bit prefix\n\nip_address = '00100000000001010000000010000000'\nprint(f"Longest matching prefix length: {router.longest_prefix_match(ip_address)}")