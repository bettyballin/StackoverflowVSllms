import open3d as o3d\nimport numpy as np\n\n# Load point clouds (pcd1 and pcd2 are your point cloud objects)\npcd1 = o3d.io.read_point_cloud("path_to_first_point_cloud.pcd")\npcd2 = o3d.io.read_point_cloud("path_to_second_point_cloud.pcd")\n\n# Perform ICP\nthreshold = 0.02  # Set a threshold for convergence\ntrans_init = np.eye(4)  # Initial transformation matrix (identity)\n\nreg_p2p = o3d.pipelines.registration.registration_icp(\n    pcd1, pcd2, threshold, trans_init,\n    o3d.pipelines.registration.TransformationEstimationPointToPoint()\n)\n\n# Evaluate the transformation matrix\ntransformation = reg_p2p.transformation\nprint("Transformation matrix:")\nprint(transformation)\n\n# Check if the transformation is close to identity matrix\nidentity_matrix = np.eye(4)\nif np.allclose(transformation, identity_matrix, atol=1e-2):\n    print("The point clouds are identical (ignoring translations and rotations).")\nelse:\n    print("The point clouds are different.")