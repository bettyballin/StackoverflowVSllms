import networkx as nx\nimport math\n\n# Define the global variable T\nT = 10  # Example value\n\n# Define the nodes with their properties\nnodes = [\n    {'id': 1, 'e': 30, 'x': 10, 'y': 20},\n    {'id': 2, 'e': 40, 'x': 15, 'y': 25},\n    # Add more nodes as needed\n]\n\n# Create a graph\nG = nx.Graph()\n\n# Add nodes to the graph\nfor node in nodes:\n    G.add_node(node['id'], e=node['e'], x=node['x'], y=node['y'])\n\n# Function to calculate the cost between two nodes\ndef calculate_cost(node_a, node_b, T):\n    min_e = min(node_a['e'], node_b['e'])\n    dist = math.sqrt((node_a['x'] - node_b['x']) ** 2 + (node_a['y'] - node_b['y']) ** 2)\n    cost = math.sqrt(min_e) * (1 + math.sqrt(math.sqrt(dist)) / 75 + math.sqrt(T) / 10)\n    return cost\n\n# Add edges with weights (costs) to the graph\nfor i, node_a in enumerate(nodes):\n    for node_b in nodes[i+1:]:\n        cost = calculate_cost(node_a, node_b, T)\n        G.add_edge(node_a['id'], node_b['id'], weight=cost)\n\n# Find the maximum weight matching\nmatching = nx.max_weight_matching(G, maxcardinality=True)\n\n# Calculate the total cost of the matching\ntotal_cost = sum(G[u][v]['weight'] for u, v in matching)\n\nprint("Maximum Matching:", matching)\nprint("Total Cost:", total_cost)