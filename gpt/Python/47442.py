def three_way_merge(base, version1, version2):\n    from difflib import ndiff\n\n    base_lines = base.splitlines()\n    version1_lines = version1.splitlines()\n    version2_lines = version2.splitlines()\n\n    merge_result = []\n    conflicts = []\n\n    diff1 = list(ndiff(base_lines, version1_lines))\n    diff2 = list(ndiff(base_lines, version2_lines))\n\n    i = j = 0\n    while i < len(diff1) and j < len(diff2):\n        if diff1[i].startswith('  ') and diff2[j].startswith('  '):\n            # Both versions have the same unchanged line\n            merge_result.append(diff1[i][2:])\n            i += 1\n            j += 1\n        elif diff1[i].startswith('- ') and diff2[j].startswith('- '):\n            # Both versions have removed the same line\n            i += 1\n            j += 1\n        elif diff1[i].startswith('- '):\n            # Version 1 has removed a line\n            i += 1\n        elif diff2[j].startswith('- '):\n            # Version 2 has removed a line\n            j += 1\n        elif diff1[i].startswith('+ ') and diff2[j].startswith('+ '):\n            # Both versions have added different lines at the same position\n            conflicts.append((diff1[i][2:], diff2[j][2:]))\n            i += 1\n            j += 1\n        elif diff1[i].startswith('+ '):\n            # Version 1 has added a line\n            merge_result.append(diff1[i][2:])\n            i += 1\n        elif diff2[j].startswith('+ '):\n            # Version 2 has added a line\n            merge_result.append(diff2[j][2:])\n            j += 1\n\n    # Handle remaining lines\n    while i < len(diff1):\n        if diff1[i].startswith('+ '):\n            merge_result.append(diff1[i][2:])\n        i += 1\n    while j < len(diff2):\n        if diff2[j].startswith('+ '):\n            merge_result.append(diff2[j][2:])\n        j += 1\n\n    # Resolve conflicts by choosing the newer change or other strategies\n    for conflict in conflicts:\n        # Example strategy: prefer the change from version2\n        merge_result.append(conflict[1])\n\n    return '\n'.join(merge_result)\n\n# Example usage\nbase_text = "This is the original document.\nIt has multiple lines.\n"\nversion1_text = "This is the original document.\nIt has multiple lines.\nLine added by user 1.\n"\nversion2_text = "This is the original document.\nIt has multiple lines.\nLine added by user 2.\n"\n\nmerged_text = three_way_merge(base_text, version1_text, version2_text)\nprint(merged_text)