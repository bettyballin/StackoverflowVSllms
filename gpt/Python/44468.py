from Crypto.Cipher import AES\nfrom Crypto.Random import get_random_bytes\nimport base64\n\ndef encrypt_data(data, key):\n    # Ensure the key length is 16, 24, or 32 bytes long for AES\n    key = key.ljust(32)[:32]\n\n    # Generate a random IV (Initialization Vector)\n    iv = get_random_bytes(AES.block_size)\n\n    # Create the cipher object and encrypt the data\n    cipher = AES.new(key.encode('utf-8'), AES.MODE_CFB, iv)\n    encrypted_data = cipher.encrypt(data.encode('utf-8'))\n    \n    # Prepend the IV to the encrypted data\n    encrypted_data_with_iv = iv + encrypted_data\n\n    # Encode the encrypted data with Base64\n    base64_encoded_data = base64.b64encode(encrypted_data_with_iv).decode('utf-8')\n    \n    return base64_encoded_data\n\ndef decrypt_data(base64_encoded_data, key):\n    # Ensure the key length is 16, 24, or 32 bytes long for AES\n    key = key.ljust(32)[:32]\n\n    # Decode the Base64 encoded data\n    encrypted_data_with_iv = base64.b64decode(base64_encoded_data)\n    \n    # Extract the IV and encrypted data\n    iv = encrypted_data_with_iv[:AES.block_size]\n    encrypted_data = encrypted_data_with_iv[AES.block_size:]\n    \n    # Create the cipher object and decrypt the data\n    cipher = AES.new(key.encode('utf-8'), AES.MODE_CFB, iv)\n    decrypted_data = cipher.decrypt(encrypted_data).decode('utf-8')\n    \n    return decrypted_data\n\n# Example usage:\nkey = "your-secret-key"\ndata = "Sensitive data to encrypt"\n\nencrypted = encrypt_data(data, key)\nprint("Encrypted:", encrypted)\n\ndecrypted = decrypt_data(encrypted, key)\nprint("Decrypted:", decrypted)