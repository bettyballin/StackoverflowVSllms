def round_preserving_sum(fn, N):\n    # Step 1: Initial rounding\n    in_array = [int(x) for x in fn]\n    \n    # Step 2: Compute the difference between the target sum and the current sum\n    current_sum = sum(in_array)\n    difference = N - current_sum\n    \n    # Step 3: Sort the indices based on the fractional part of the numbers in descending order\n    fractional_indices = sorted(range(len(fn)), key=lambda i: fn[i] - in_array[i], reverse=True)\n    \n    # Step 4: Adjust the integers to make the sum correct\n    for i in range(difference):\n        in_array[fractional_indices[i]] += 1\n    \n    return in_array\n\n# Example usage\nfn1 = [0.02, 0.03, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14]\nN1 = 1\nprint(round_preserving_sum(fn1, N1))  # Output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]\n\nfn2 = [0.1, 0.3, 0.4, 0.4, 0.8]\nN2 = 2\nprint(round_preserving_sum(fn2, N2))  # Output: [0, 0, 0, 1, 1]\n\nfn3 = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]\nN3 = 1\nprint(round_preserving_sum(fn3, N3))  # Output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]\n\nfn4 = [0.4, 0.4, 0.4, 0.4, 9.2, 9.2]\nN4 = 20\nprint(round_preserving_sum(fn4, N4))  # Output: [0, 0, 1, 1, 9, 9]\n\nfn5 = [0.5, 0.5, 11]\nN5 = 12\nprint(round_preserving_sum(fn5, N5))  # Output: [0, 1, 11]