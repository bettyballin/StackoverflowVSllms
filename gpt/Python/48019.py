import ast\nimport astunparse\n\nclass Parenthesizer(ast.NodeTransformer):\n    def visit_BinOp(self, node):\n        self.generic_visit(node)\n        return ast.copy_location(\n            ast.BinOp(\n                left=ast.copy_location(ast.Paren(node.left), node.left.lineno),\n                op=node.op,\n                right=ast.copy_location(ast.Paren(node.right), node.right.lineno)\n            ),\n            node\n        )\n\n    def visit_UnaryOp(self, node):\n        self.generic_visit(node)\n        return ast.copy_location(\n            ast.UnaryOp(\n                op=node.op,\n                operand=ast.copy_location(ast.Paren(node.operand), node.operand.lineno)\n            ),\n            node\n        )\n\n    def visit_Attribute(self, node):\n        self.generic_visit(node)\n        return ast.copy_location(\n            ast.Attribute(\n                value=ast.copy_location(ast.Paren(node.value), node.value.lineno),\n                attr=node.attr,\n                ctx=node.ctx\n            ),\n            node\n        )\n\n    def visit_Subscript(self, node):\n        self.generic_visit(node)\n        return ast.copy_location(\n            ast.Subscript(\n                value=ast.copy_location(ast.Paren(node.value), node.value.lineno),\n                slice=node.slice,\n                ctx=node.ctx\n            ),\n            node\n        )\n\n    def visit_Call(self, node):\n        self.generic_visit(node)\n        return ast.copy_location(\n            ast.Call(\n                func=ast.copy_location(ast.Paren(node.func), node.func.lineno),\n                args=node.args,\n                keywords=node.keywords\n            ),\n            node\n        )\n\n# Example usage\nexpression = "*a.x++ = *b.x++"\ntree = ast.parse(expression, mode='eval')\nparenthesizer = Parenthesizer()\nnew_tree = parenthesizer.visit(tree)\nparenthesized_expression = astunparse.unparse(new_tree)\n\nprint(parenthesized_expression)