from pyevolve import G1DList, GSimpleGA, Selectors, Mutators, Crossovers\n\ndef eval_func(chromosome):\n    selected_count = sum(chromosome)  # Count the number of selected parameters\n    if selected_count > 4:\n        return 0  # Penalize chromosomes with more than 4 selected parameters\n    else:\n        # Evaluate the selection if the number of selected parameters is acceptable\n        return evaluate_selection(chromosome)\n\ndef init_population(genome, **args):\n    genome.clearList()\n    for i in range(4):\n        pos = rand_randint(0, len(genome) - 1)\n        while genome[pos] == 1:\n            pos = rand_randint(0, len(genome) - 1)\n        genome[pos] = 1\n\ndef custom_mutator(genome, **args):\n    selected_indices = [i for i, bit in enumerate(genome) if bit == 1]\n    non_selected_indices = [i for i, bit in enumerate(genome) if bit == 0]\n    if len(selected_indices) > 0 and len(non_selected_indices) > 0:\n        remove_idx = rand_randint(0, len(selected_indices) - 1)\n        add_idx = rand_randint(0, len(non_selected_indices) - 1)\n        genome[selected_indices[remove_idx]] = 0\n        genome[non_selected_indices[add_idx]] = 1\n\n# Create the genome and the population\ngenome = G1DList.G1DList(3000)\ngenome.evaluator.set(eval_func)\ngenome.mutator.set(custom_mutator)\ngenome.initializator.set(init_population)\ngenome.crossover.set(Crossovers.G1DListCrossoverUniform)\n\nga = GSimpleGA.GSimpleGA(genome)\nga.setGenerations(100)\nga.setPopulationSize(200)\nga.selector.set(Selectors.GRouletteWheel)\n\n# Run the GA\nga.evolve(freq_stats=10)\n\n# Best individual\nbest = ga.bestIndividual()\nprint("Best individual score:", best.getRawScore())\nprint("Selected parameters:", [i for i, bit in enumerate(best) if bit == 1])