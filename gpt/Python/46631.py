class UnionFind:\n    def __init__(self):\n        self.parent = {}\n        self.rank = {}\n    \n    def find(self, item):\n        if self.parent[item] != item:\n            self.parent[item] = self.find(self.parent[item])\n        return self.parent[item]\n    \n    def union(self, set1, set2):\n        root1 = self.find(set1)\n        root2 = self.find(set2)\n        \n        if root1 != root2:\n            if self.rank[root1] > self.rank[root2]:\n                self.parent[root2] = root1\n            elif self.rank[root1] < self.rank[root2]:\n                self.parent[root1] = root2\n            else:\n                self.parent[root2] = root1\n                self.rank[root1] += 1\n    \n    def add(self, item):\n        if item not in self.parent:\n            self.parent[item] = item\n            self.rank[item] = 0\n\ndef union_of_intersecting_sets(persons):\n    uf = UnionFind()\n    \n    for person in persons:\n        uf.add(person['SSN'])\n        uf.add(person['DLN'])\n        uf.union(person['SSN'], person['DLN'])\n    \n    sets = {}\n    for person in persons:\n        root = uf.find(person['SSN'])\n        if root not in sets:\n            sets[root] = set()\n        sets[root].add(person['SSN'])\n        sets[root].add(person['DLN'])\n    \n    return list(sets.values())\n\n# Example usage\npersons = [\n    {'SSN': 'A', 'DLN': 'B'},\n    {'SSN': 'B', 'DLN': 'C'},\n    {'SSN': 'D', 'DLN': 'E'}\n]\n\nresult = union_of_intersecting_sets(persons)\nprint(result)  # Output: [{'A', 'B', 'C'}, {'D', 'E'}]