def permute(s):\n    # Base case: if the string is empty, return an empty list\n    if len(s) == 0:\n        return ['']\n    \n    # Recursive case\n    permutations = []  # List to store all permutations\n    for i in range(len(s)):\n        # Choose the current character\n        current_char = s[i]\n        # Form the remaining string after removing the chosen character\n        remaining_string = s[:i] + s[i+1:]\n        # Generate all permutations of the remaining string\n        remaining_permutations = permute(remaining_string)\n        # Add the current character to the front of each permutation of the remaining string\n        for perm in remaining_permutations:\n            permutations.append(current_char + perm)\n    \n    return permutations\n\n# Example usage\nstring = "abc"\npermutations = permute(string)\nprint(permutations)