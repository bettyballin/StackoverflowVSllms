import networkx as nx\nimport matplotlib.pyplot as plt\n\n# Create a graph\nG = nx.Graph()\n\n# Add nodes (cities)\ncities = ['A', 'B', 'C', 'D']\nfor city in cities:\n    G.add_node(city)\n\n# Add edges (distances between cities)\nG.add_edge('A', 'B', weight=10)\nG.add_edge('A', 'C', weight=15)\nG.add_edge('A', 'D', weight=20)\nG.add_edge('B', 'C', weight=35)\nG.add_edge('B', 'D', weight=25)\nG.add_edge('C', 'D', weight=30)\n\n# Find the shortest path using the TSP solver\ntsp_path = nx.approximation.traveling_salesman_problem(G, cycle=True)\n\n# Draw the graph\npos = nx.spring_layout(G)\nnx.draw(G, pos, with_labels=True, node_color='lightblue', node_size=500, font_size=15)\nlabels = nx.get_edge_attributes(G, 'weight')\nnx.draw_networkx_edge_labels(G, pos, edge_labels=labels)\n\n# Draw the TSP path in red\ntsp_edges = [(tsp_path[i], tsp_path[i+1]) for i in range(len(tsp_path)-1)]\nnx.draw_networkx_edges(G, pos, edgelist=tsp_edges, edge_color='r', width=2)\n\nplt.show()\n\nprint("TSP Path:", tsp_path)