from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.kdf.scrypt import Scrypt\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.backends import default_backend\nfrom base64 import urlsafe_b64encode, urlsafe_b64decode\nimport os\n\n# Derive key from user password\ndef derive_key(password: str, salt: bytes) -> bytes:\n    kdf = Scrypt(\n        salt=salt,\n        length=32,\n        n=2**14,\n        r=8,\n        p=1,\n        backend=default_backend()\n    )\n    return kdf.derive(password.encode())\n\n# Encrypt the credentials\ndef encrypt_credentials(credentials: str, password: str) -> dict:\n    salt = os.urandom(16)\n    key = derive_key(password, salt)\n    iv = os.urandom(12)\n    encryptor = Cipher(\n        algorithms.AES(key),\n        modes.GCM(iv),\n        backend=default_backend()\n    ).encryptor()\n    ciphertext = encryptor.update(credentials.encode()) + encryptor.finalize()\n    return {\n        'salt': urlsafe_b64encode(salt).decode('utf-8'),\n        'iv': urlsafe_b64encode(iv).decode('utf-8'),\n        'ciphertext': urlsafe_b64encode(ciphertext).decode('utf-8'),\n        'tag': urlsafe_b64encode(encryptor.tag).decode('utf-8')\n    }\n\n# Decrypt the credentials\ndef decrypt_credentials(encrypted_data: dict, password: str) -> str:\n    salt = urlsafe_b64decode(encrypted_data['salt'])\n    iv = urlsafe_b64decode(encrypted_data['iv'])\n    ciphertext = urlsafe_b64decode(encrypted_data['ciphertext'])\n    tag = urlsafe_b64decode(encrypted_data['tag'])\n    key = derive_key(password, salt)\n    decryptor = Cipher(\n        algorithms.AES(key),\n        modes.GCM(iv, tag),\n        backend=default_backend()\n    ).decryptor()\n    return decryptor.update(ciphertext) + decryptor.finalize()\n\n# Example usage\nif __name__ == "__main__":\n    user_password = "user_specific_password"\n    credentials = "user:password123"\n\n    encrypted_data = encrypt_credentials(credentials, user_password)\n    print("Encrypted Data:", encrypted_data)\n\n    decrypted_credentials = decrypt_credentials(encrypted_data, user_password)\n    print("Decrypted Credentials:", decrypted_credentials.decode())