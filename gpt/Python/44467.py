from sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, Integer, ForeignKey\nfrom sqlalchemy.orm import relationship, joinedload, sessionmaker\nfrom sqlalchemy import create_engine\n\nbase = declarative_base()\n\nclass O1(base):\n    __tablename__ = 'O1'\n    id = Column(Integer, primary_key=True)\n    value = Column(Integer)\n    o2_id = Column(Integer, ForeignKey('O2.id'))  # Fix the ForeignKey target\n\nclass O2(base):\n    __tablename__ = 'O2'\n    id = Column(Integer, primary_key=True)\n    ones = relationship('O1', order_by='O1.value')  # Use relationship instead of relation\n\n# Establish the engine and session\nengine = create_engine('sqlite:///:memory:')  # Example using an in-memory SQLite database\nbase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\nsession = Session()\n\n# Example query\nresult = session.query(O2).options(joinedload(O2.ones)).all()  # Use joinedload instead of eagerload\n\n# To see the result\nfor o2 in result:\n    print(o2.id, [o1.value for o1 in o2.ones])