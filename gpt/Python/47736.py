import imaplib\nfrom unittest import mock\n\n# Create a mock instance\nimap_mock = mock.MagicMock()\n\n# Mock the imaplib.IMAP4_SSL class to return the mock instance\nwith mock.patch('imaplib.IMAP4_SSL', return_value=imap_mock):\n    # Now any instantiation of imaplib.IMAP4_SSL will use the mock instance\n    imap_server = imaplib.IMAP4_SSL('imap.example.com')\n    \n    # Set up the mock to return desired values\n    imap_mock.login.return_value = 'OK', [b'Logged in']\n    imap_mock.select.return_value = 'OK', [b'INBOX']\n    imap_mock.search.return_value = 'OK', [b'1 2 3']\n    imap_mock.fetch.return_value = 'OK', [(b'1 (BODY[HEADER] {342}', b'Header data...')]\n\n    # Example usage\n    imap_server.login('username', 'password')\n    imap_server.select('INBOX')\n    status, data = imap_server.search(None, 'ALL')\n    for num in data[0].split():\n        status, msg_data = imap_server.fetch(num, '(BODY[HEADER])')\n        print(f'Message {num}: {msg_data}')\n\n# Assertions to verify behavior if needed\nimap_mock.login.assert_called_with('username', 'password')\nimap_mock.select.assert_called_with('INBOX')\nimap_mock.search.assert_called_with(None, 'ALL')