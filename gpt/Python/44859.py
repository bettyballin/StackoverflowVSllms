import heapq\nimport math\n\ndef generate_abc_pairs(limit):\n    heap = []\n    seen = set()\n    \n    # Initialize with the first few values\n    for a in range(2, limit):\n        for b in range(1, a):\n            if math.gcd(a, b) != 1:\n                continue\n            ab = a * b\n            if ab % (a + b) == 1:\n                A = ab * (ab - 1) // (a + b)\n                if A not in seen:\n                    heapq.heappush(heap, A)\n                    seen.add(A)\n    \n    return heap\n\ndef find_nth_smallest(n):\n    limit = 100 # This value may need to be adjusted based on performance\n    heap = generate_abc_pairs(limit)\n    \n    # Extract the nth smallest element\n    nth_smallest = None\n    for _ in range(n):\n        nth_smallest = heapq.heappop(heap)\n    \n    return nth_smallest\n\nn = 150000\nresult = find_nth_smallest(n)\nprint(result)