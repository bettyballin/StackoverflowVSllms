import asyncio\nimport pickle\n\nclass Game:\n    def __init__(self):\n        self.state = "initial"\n\n    async def rollDice(self, you):\n        # Simulate async behavior\n        await asyncio.sleep(1)\n        return 3  # Example roll\n\n    async def escape(self, you):\n        roll = await self.rollDice(you)\n        if roll < 5:\n            self.caughtAction(you)\n\n    def caughtAction(self, you):\n        self.state = "caught"\n\ndef dumpGameState(game):\n    return pickle.dumps(game)\n\ndef loadGameState(data):\n    return pickle.loads(data)\n\n# Example usage\nasync def main():\n    game = Game()\n    await game.escape("player1")\n    state_data = dumpGameState(game)\n    restored_game = loadGameState(state_data)\n    print(restored_game.state)\n\nasyncio.run(main())