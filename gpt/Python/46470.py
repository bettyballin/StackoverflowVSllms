class UnionFind:\n    def __init__(self):\n        self.parent = {}\n\n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def union(self, x, y):\n        rootX = self.find(x)\n        rootY = self.find(y)\n        if rootX != rootY:\n            self.parent[rootY] = rootX\n\ndef partition_sets(sets):\n    uf = UnionFind()\n\n    for s in sets:\n        for element in s:\n            if element not in uf.parent:\n                uf.parent[element] = element\n            uf.union(next(iter(s)), element)\n\n    groups = {}\n    for s in sets:\n        root = uf.find(next(iter(s)))\n        if root not in groups:\n            groups[root] = []\n        groups[root].append(s)\n\n    return list(groups.values())\n\n# Example usage\nsets = [{1,2,3}, {5,2,6}, {7,8,9}, {6,12,13}, {21,8,34}, {19,20}]\nresult = partition_sets(sets)\nprint(result)