from collections import deque\n\ndef is_acyclic_kahns_algorithm(graph):\n    in_degree = {u: 0 for u in graph}  # Initialize in-degree of all vertices\n    for u in graph:\n        for v in graph[u]:\n            in_degree[v] += 1  # Calculate in-degree of each vertex\n\n    queue = deque([u for u in graph if in_degree[u] == 0])  # Collect vertices with in-degree 0\n\n    count = 0  # Count of visited vertices\n    while queue:\n        u = queue.popleft()\n        count += 1\n        for v in graph[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                queue.append(v)\n\n    return count == len(graph)  # If count of visited vertices is equal to number of vertices, graph is acyclic\n\n# Example usage\ngraph = {\n    0: [1],\n    1: [2],\n    2: [3],\n    3: []\n}\n\nprint(is_acyclic_kahns_algorithm(graph))  # Output: True