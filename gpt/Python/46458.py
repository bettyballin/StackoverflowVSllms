class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.count = 0\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n            node.count += 1\n\n    def find_best_prefix(self):\n        best_prefix = ""\n        best_saving = 0\n        stack = [(self.root, "")]\n        \n        while stack:\n            node, prefix = stack.pop()\n            for char, child in node.children.items():\n                new_prefix = prefix + char\n                saving = (len(new_prefix) - 1) * child.count - len(new_prefix)\n                if saving > best_saving:\n                    best_saving = saving\n                    best_prefix = new_prefix\n                stack.append((child, new_prefix))\n        \n        return best_prefix\n\ndef best_compression_prefix(strings):\n    trie = Trie()\n    for string in strings:\n        trie.insert(string)\n    return trie.find_best_prefix()\n\n# Example usage:\nstrings = ["foo", "fool", "bar"]\nbest_prefix = best_compression_prefix(strings)\nprint("Best prefix:", best_prefix)