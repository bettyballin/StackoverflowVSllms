class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end_of_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word):\n        node = self.root\n        for letter in word:\n            if letter not in node.children:\n                node.children[letter] = TrieNode()\n            node = node.children[letter]\n        node.is_end_of_word = True\n    \n    def starts_with(self, prefix):\n        node = self.root\n        for letter in prefix:\n            if letter not in node.children:\n                return None\n            node = node.children[letter]\n        return node\n    \n    def search(self, word):\n        node = self.starts_with(word)\n        return node is not None and node.is_end_of_word\n\ndef find_words(board, words):\n    def backtrack(row, col, parent, path):\n        letter = board[row][col]\n        curr_node = parent.children[letter]\n\n        word_match = path + letter\n        if curr_node.is_end_of_word:\n            result.add(word_match)\n\n        board[row][col] = '#'\n\n        for (row_offset, col_offset) in [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]:\n            new_row, new_col = row + row_offset, col + col_offset\n            if 0 <= new_row < len(board) and 0 <= new_col < len(board[0]) and board[new_row][new_col] in curr_node.children:\n                backtrack(new_row, new_col, curr_node, word_match)\n\n        board[row][col] = letter\n\n    result = set()\n    trie = Trie()\n    \n    for word in words:\n        trie.insert(word)\n    \n    for row in range(len(board)):\n        for col in range(len(board[0])):\n            if board[row][col] in trie.root.children:\n                backtrack(row, col, trie.root, "")\n    \n    return list(result)\n\n# Example Usage:\nboard = [\n    ['F', 'X', 'I', 'E'],\n    ['A', 'M', 'L', 'O'],\n    ['E', 'W', 'B', 'X'],\n    ['A', 'S', 'T', 'U']\n]\nwords = ["FAME", "SEA", "TUX", "LOB", "EAT", "MAIL", "AXE", "FLOW"]\nprint(find_words(board, words))