function rayIntersectsTriangle(rayOrigin, rayVector, vertex0, vertex1, vertex2):\n    // Find vectors for two edges sharing vertex0\n    edge1 = vertex1 - vertex0\n    edge2 = vertex2 - vertex0\n\n    // Begin calculating determinant - also used to calculate u parameter\n    h = cross(rayVector, edge2)\n    a = dot(edge1, h)\n\n    // If a is near 0, ray is parallel to the triangle\n    if (a > -EPSILON and a < EPSILON):\n        return false, no intersection\n\n    f = 1.0 / a\n    s = rayOrigin - vertex0\n    u = f * dot(s, h)\n\n    // Check if intersection is outside the triangle\n    if (u < 0.0 or u > 1.0):\n        return false, no intersection\n\n    q = cross(s, edge1)\n    v = f * dot(rayVector, q)\n\n    // Check if intersection is outside the triangle\n    if (v < 0.0 or u + v > 1.0):\n        return false, no intersection\n\n    // Calculate t to find out where the intersection point is on the line\n    t = f * dot(edge2, q)\n    \n    if (t > EPSILON): // ray intersection\n        intersectionPoint = rayOrigin + rayVector * t\n        return true, intersectionPoint\n    else: // This means that there is a line intersection but not a ray intersection\n        return false, no intersectio