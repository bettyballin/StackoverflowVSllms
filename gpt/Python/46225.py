def remove_cycles(graph, start_node, fixed_edges):\n    def dfs(node, visited, rec_stack):\n        visited[node] = True\n        rec_stack[node] = True\n\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                if dfs(neighbor, visited, rec_stack):\n                    return True\n            elif rec_stack[neighbor]:\n                if (node, neighbor) not in fixed_edges:\n                    graph[node].remove(neighbor)\n                    return True\n\n        rec_stack[node] = False\n        return False\n\n    visited = {node: False for node in graph}\n    rec_stack = {node: False for node in graph}\n\n    dfs(start_node, visited, rec_stack)\n\n# Example usage:\ngraph = {\n    'A': ['B'],\n    'B': ['C', 'D'],\n    'C': ['A'],\n    'D': []\n}\nfixed_edges = {('B', 'D')}\n\nremove_cycles(graph, 'A', fixed_edges)\nprint(graph)  # Output should be a graph with cycles broke