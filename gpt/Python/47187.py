class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Quadtree:\n    def __init__(self, boundary, capacity):\n        self.boundary = boundary  # Boundary is a rectangle\n        self.capacity = capacity  # Capacity is the maximum number of entities per quadrant\n        self.points = []\n        self.divided = False\n\n    def subdivide(self):\n        x, y, w, h = self.boundary\n        nw = (x, y, w/2, h/2)\n        ne = (x + w/2, y, w/2, h/2)\n        sw = (x, y + h/2, w/2, h/2)\n        se = (x + w/2, y + h/2, w/2, h/2)\n        self.northwest = Quadtree(nw, self.capacity)\n        self.northeast = Quadtree(ne, self.capacity)\n        self.southwest = Quadtree(sw, self.capacity)\n        self.southeast = Quadtree(se, self.capacity)\n        self.divided = True\n\n    def insert(self, point):\n        if not self.contains(self.boundary, point):\n            return False\n        if len(self.points) < self.capacity:\n            self.points.append(point)\n            return True\n        if not self.divided:\n            self.subdivide()\n        if self.northwest.insert(point):\n            return True\n        if self.northeast.insert(point):\n            return True\n        if self.southwest.insert(point):\n            return True\n        if self.southeast.insert(point):\n            return True\n\n    def contains(self, boundary, point):\n        x, y, w, h = boundary\n        return x <= point.x < x + w and y <= point.y < y + h\n\n    def query(self, range, found):\n        if not self.intersects(range, self.boundary):\n            return False\n        for point in self.points:\n            if self.contains(range, point):\n                found.append(point)\n        if self.divided:\n            self.northwest.query(range, found)\n            self.northeast.query(range, found)\n            self.southwest.query(range, found)\n            self.southeast.query(range, found)\n        return found\n\n    def intersects(self, range, boundary):\n        x, y, w, h = boundary\n        rx, ry, rw, rh = range\n        return not (rx > x + w or rx + rw < x or ry > y + h or ry + rh < y)\n\n# Example usage:\nboundary = (0, 0, 100, 100)\nqt = Quadtree(boundary, 4)\npoints = [Point(10, 10), Point(20, 20), Point(30, 30), Point(40, 40)]\nfor p in points:\n    qt.insert(p)\n\n# Query points within a certain range\nrange_query = (15, 15, 20, 20)\nfound_points = []\nqt.query(range_query, found_points)\nprint(f"Found points: {[(p.x, p.y) for p in found_points]}")