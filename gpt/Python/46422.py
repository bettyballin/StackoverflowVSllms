from collections import defaultdict, deque\n\n# Create a graph representation of your tables and their relationships\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n\n    def add_edge(self, u, v):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n\n    def find_path(self, start, end, path=[]):\n        path = path + [start]\n        if start == end:\n            return path\n        if start not in self.graph:\n            return None\n        for node in self.graph[start]:\n            if node not in path:\n                new_path = self.find_path(node, end, path)\n                if new_path:\n                    return new_path\n        return None\n\n# Example usage\ng = Graph()\ng.add_edge('Table1', 'Table2')\ng.add_edge('Table2', 'Table3')\ng.add_edge('Table3', 'Table4')\ng.add_edge('Table1', 'Table4')\n\nstart_table = 'Table1'\nend_table = 'Table3'\n\npath = g.find_path(start_table, end_table)\nif path:\n    print("Path found:", " -> ".join(path))\nelse:\n    print("No path found between the tables.")