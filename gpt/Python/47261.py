import zlib\n\ndef calculate_crc32(file_path):\n    """Calculate the CRC32 checksum of a file."""\n    buf_size = 65536  # Read in chunks of 64KB\n    crc32 = 0\n    try:\n        with open(file_path, 'rb') as f:\n            while chunk := f.read(buf_size):\n                crc32 = zlib.crc32(chunk, crc32)\n    except FileNotFoundError:\n        return None\n    return crc32 & 0xFFFFFFFF\n\ndef generate_crc32_for_files(file_list):\n    """Generate CRC32 checksums for a list of files."""\n    crc_dict = {}\n    for file_path in file_list:\n        crc32 = calculate_crc32(file_path)\n        if crc32 is not None:\n            crc_dict[file_path] = crc32\n        else:\n            print(f"File not found: {file_path}")\n    return crc_dict\n\n# Example usage\nfile_list = ['file1.txt', 'file2.txt', 'file3.txt']\ncrc_values = generate_crc32_for_files(file_list)\nfor file_path, crc_value in crc_values.items():\n    print(f"File: {file_path}, CRC32: {crc_value:08X}")