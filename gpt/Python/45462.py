import mysql.connector\nfrom collections import defaultdict\n\n# Database connection\nconn = mysql.connector.connect(\n    host="your_host",\n    user="your_user",\n    password="your_password",\n    database="your_database"\n)\ncursor = conn.cursor()\n\n# Step 1: Read linestrings from database\ncursor.execute("SELECT id, linestring FROM linestrings")\nrows = cursor.fetchall()\n\n# Step 2: Build the graph structure\ngraph = defaultdict(list)\nlinestring_map = {}\n\nfor row in rows:\n    id, linestring = row\n    points = linestring.split(', ')\n    start, end = points[0], points[-1]\n    graph[start].append((end, points, id))\n    graph[end].append((start, points, id))\n    linestring_map[id] = points\n\n# Step 3: Merge connected linestrings\ndef dfs(node, visited):\n    stack = [(node, None)]\n    merged_linestring = []\n    \n    while stack:\n        current, prev = stack.pop()\n        if current in visited:\n            continue\n        visited.add(current)\n\n        if prev:\n            merged_linestring.extend(linestring_map[prev][1:])\n\n        for neighbor, points, id in graph[current]:\n            if neighbor not in visited:\n                stack.append((neighbor, id))\n    \n    return merged_linestring\n\nvisited = set()\noptimized_linestrings = []\n\nfor node in graph:\n    if node not in visited:\n        merged_linestring = dfs(node, visited)\n        if merged_linestring:\n            optimized_linestrings.append(merged_linestring)\n\n# Step 4: Store optimized linestrings back into the database\n# Clear existing table\ncursor.execute("TRUNCATE TABLE linestrings")\n\n# Insert optimized linestrings\nfor i, points in enumerate(optimized_linestrings):\n    linestring = ', '.join(points)\n    cursor.execute("INSERT INTO linestrings (id, linestring) VALUES (%s, %s)", (i + 1, linestring))\n\nconn.commit()\ncursor.close()\nconn.close()