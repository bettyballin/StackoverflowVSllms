class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.end_of_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word):\n        current = self.root\n        for char in word:\n            if char not in current.children:\n                current.children[char] = TrieNode()\n            current = current.children[char]\n        current.end_of_word = True\n    \n    def search(self, word):\n        current = self.root\n        for char in word:\n            if char not in current.children:\n                return False\n            current = current.children[char]\n        return current.end_of_word\n\ndef pack_words(words):\n    trie = Trie()\n    for word in words:\n        trie.insert(word)\n    \n    buffer = []\n    positions = {}\n    \n    def traverse(node, prefix):\n        if node.end_of_word:\n            positions[prefix] = (len(buffer), len(prefix))\n            buffer.extend(list(prefix))\n        for char, child in node.children.items():\n            traverse(child, prefix + char)\n    \n    traverse(trie.root, "")\n    \n    return "".join(buffer), positions\n\n# Example usage\nwords = ["doll", "dollhouse", "house", "ragdoll"]\npacked_buffer, positions = pack_words(words)\nprint("Packed Buffer:", packed_buffer)\nprint("Positions and Lengths:", positions)