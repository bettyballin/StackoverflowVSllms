import concurrent.futures\n\ndef is_palindrome_segment(s, start, end):\n    while start < end:\n        if s[start] != s[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n\ndef is_palindrome_parallel(s):\n    length = len(s)\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        futures = []\n        for i in range(length // 2):\n            futures.append(executor.submit(is_palindrome_segment, s, i, length - 1 - i))\n        \n        return all(f.result() for f in futures)\n\n# Example usage\ns = "A man a plan a canal Panama"\ns = s.replace(" ", "").lower()  # Preprocess the string\nprint(is_palindrome_parallel(s))  # Output should be True