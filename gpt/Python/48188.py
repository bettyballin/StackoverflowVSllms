from collections import OrderedDict\n\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.cache = OrderedDict()\n        self.capacity = capacity\n\n    def get(self, key: str):\n        if key not in self.cache:\n            return -1\n        self.cache.move_to_end(key)\n        return self.cache[key]\n\n    def put(self, key: str, value: str):\n        if key in self.cache:\n            self.cache.move_to_end(key)\n        self.cache[key] = value\n        if len(self.cache) > self.capacity:\n            self.cache.popitem(last=False)\n\n# Example usage:\ncache = LRUCache(3)\ncache.put("a", "data1")\ncache.put("b", "data2")\ncache.put("c", "data3")\nprint(cache.get("a"))  # Output: data1\ncache.put("d", "data4")\nprint(cache.get("b"))  # Output: -1, as it was the least recently used and removed from the cache