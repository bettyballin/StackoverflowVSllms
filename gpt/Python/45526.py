import hashlib\nfrom secretsharing import PlaintextToHexSecretSharer\n\n# Step 1: Generate a secret (encryption key)\nencryption_key = "supersecretkey"\nshares = PlaintextToHexSecretSharer.split_secret(encryption_key, 2, 5)\n\n# Store these shares securely and distribute to users\nuser_shares = {\n    "user1": shares[0],\n    "user2": shares[1],\n    "user3": shares[2],\n    "user4": shares[3],\n    "user5": shares[4]\n}\n\n# Step 2: Hash User Passwords\ndef hash_password(password):\n    return hashlib.sha256(password.encode()).hexdigest()\n\n# Example user passwords (in practice, these are securely inputted)\npasswords = {\n    "user1": "password1",\n    "user2": "password2",\n    "user3": "password3",\n    "user4": "password4",\n    "user5": "password5"\n}\n\nhashed_passwords = {user: hash_password(pwd) for user, pwd in passwords.items()}\n\n# Step 3: Combine Password Hashes to reconstruct the secret\ndef reconstruct_secret(auth_users, user_shares):\n    shares_to_use = [user_shares[user] for user in auth_users]\n    return PlaintextToHexSecretSharer.recover_secret(shares_to_use)\n\n# Example: User1 and User3 authenticate\nauth_users = ["user1", "user3"]\nrecovered_key = reconstruct_secret(auth_users, user_shares)\n\n# Verify the recovered key\nassert recovered_key == encryption_key\n\n# Step 4: Generate the common hash using the reconstructed secret\ncommon_hash = hashlib.sha256(recovered_key.encode()).hexdigest()\n\nprint("Common Hash:", common_hash)