def detect_cycle(graph):\n    visited = set()\n    rec_stack = set()\n\n    def dfs(node):\n        if node not in visited:\n            visited.add(node)\n            rec_stack.add(node)\n\n            for neighbor in graph.get(node, []):\n                if neighbor not in visited and dfs(neighbor):\n                    return True\n                elif neighbor in rec_stack:\n                    return True\n\n            rec_stack.remove(node)\n        return False\n\n    for horse in graph:\n        if dfs(horse):\n            return True\n    return False\n\n# Example usage:\n# The graph is represented as an adjacency list where each key is a horse and the value is a list of its children.\ngenealogy_graph = {\n    'HorseA': ['HorseB', 'HorseC'],\n    'HorseB': ['HorseD'],\n    'HorseC': ['HorseE'],\n    'HorseD': ['HorseA'],  # This creates a cycle\n}\n\nif detect_cycle(genealogy_graph):\n    print("Cycle detected")\nelse:\n    print("No cycle detected")