class BoundedStack:\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.stack = []\n    \n    def push(self, item):\n        if len(self.stack) >= self.capacity:\n            self.stack.pop(0)  # Remove the oldest item\n        self.stack.append(item)\n    \n    def pop(self):\n        if self.stack:\n            return self.stack.pop()\n        else:\n            raise IndexError("pop from empty stack")\n    \n    def is_empty(self):\n        return len(self.stack) == 0\n    \n    def is_full(self):\n        return len(self.stack) == self.capacity\n    \n    def __repr__(self):\n        return f"BoundedStack({self.stack})"\n\n# Example usage:\nbounded_stack = BoundedStack(3)\nbounded_stack.push(1)\nbounded_stack.push(2)\nbounded_stack.push(3)\nprint(bounded_stack)  # Output: BoundedStack([1, 2, 3])\nbounded_stack.push(4)\nprint(bounded_stack)  # Output: BoundedStack([2, 3, 4])