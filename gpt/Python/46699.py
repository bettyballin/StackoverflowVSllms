def count_combinations(lists):\n    # Convert the pairs to sets for easier manipulation\n    lists = [set(map(frozenset, lst)) for lst in lists]\n\n    memo = {}\n\n    def backtrack(used_items, index):\n        if index == len(lists):\n            return 1\n\n        if (tuple(used_items), index) in memo:\n            return memo[(tuple(used_items), index)]\n\n        count = 0\n        for pair in lists[index]:\n            if not used_items & pair:\n                count += backtrack(used_items | pair, index + 1)\n\n        memo[(tuple(used_items), index)] = count\n        return count\n\n    return backtrack(frozenset(), 0)\n\n# Example usage\nlists = [\n    {12, 13, 14, 23, 24},\n    {14, 15, 25},\n    {16, 17, 25, 26, 36}\n]\n\n# Convert pairs from integer to sets of digits\nlists = [[{int(c) for c in str(pair)} for pair in lst] for lst in lists]\n\nprint(count_combinations(lists))