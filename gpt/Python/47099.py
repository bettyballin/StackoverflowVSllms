import networkx as nx\nimport matplotlib.pyplot as plt\nimport math\n\ndef radial_tree_layout(G, root=None):\n    pos = {}\n    def _place_node(node, radius, angle, parent_pos):\n        pos[node] = (parent_pos[0] + radius * math.cos(angle), \n                     parent_pos[1] + radius * math.sin(angle))\n        children = list(G.neighbors(node))\n        if not children:\n            return\n        angle_step = 2 * math.pi / len(children)\n        for i, child in enumerate(children):\n            _place_node(child, radius * 0.7, angle + i * angle_step, pos[node])\n    \n    _place_node(root, 1, 0, (0, 0))\n    return pos\n\n# Create a sample tree\nG = nx.balanced_tree(r=3, h=3)\nroot = 0  # assuming root node is 0\n\n# Generate the layout\npos = radial_tree_layout(G, root=root)\n\n# Draw the tree\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, with_labels=True, node_size=500, node_color="lightblue", font_weight="bold")\nplt.show()