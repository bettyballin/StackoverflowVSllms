import os\nimport concurrent.futures\n\ndef read_file(file_path):\n    with open(file_path, 'r') as file:\n        return file.read()\n\ndef load_files_into_memory(directory):\n    files_content = {}\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        future_to_file = {executor.submit(read_file, os.path.join(directory, file)): file for file in os.listdir(directory) if os.path.isfile(os.path.join(directory, file))}\n        for future in concurrent.futures.as_completed(future_to_file):\n            file = future_to_file[future]\n            try:\n                files_content[file] = future.result()\n            except Exception as exc:\n                print(f'{file} generated an exception: {exc}')\n    return files_content\n\n# Example usage\ndirectory_path = '/path/to/your/files'\nfiles_content = load_files_into_memory(directory_path)\n\n# Now you can manipulate files_content dictionary\nfor file_name, content in files_content.items():\n    # Example search and replace\n    files_content[file_name] = content.replace('old_text', 'new_text')