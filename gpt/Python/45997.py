from collections import deque, defaultdict\n\ndef build_graph(edges):\n    graph = defaultdict(list)\n    for edge in edges:\n        u, v = map(int, edge.split('<->'))\n        graph[u].append(v)\n        graph[v].append(u)\n    return graph\n\ndef bfs(graph, start, goal):\n    if start == goal:\n        return True\n    visited = set()\n    queue = deque([start])\n    while queue:\n        node = queue.popleft()\n        if node == goal:\n            return True\n        if node not in visited:\n            visited.add(node)\n            queue.extend(neighbor for neighbor in graph[node] if neighbor not in visited)\n    return False\n\ndef query_path(edges, start, goal):\n    graph = build_graph(edges)\n    return bfs(graph, start, goal)\n\n# Example usage\nedges = [\n    "1 <-> 5",\n    "3 <-> 7",\n    "5 <-> 6",\n    "2 <-> 6"\n]\n\nprint(query_path(edges, 1, 5))  # True\nprint(query_path(edges, 5, 2))  # True\nprint(query_path(edges, 1, 7))  # False\nprint(query_path(edges, 7, 4))  # False