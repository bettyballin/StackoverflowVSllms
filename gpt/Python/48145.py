def normalize_local_trust(local_trust):\n    normalized_trust = {}\n    for peer in local_trust:\n        total_trust = sum(local_trust[peer].values())\n        normalized_trust[peer] = {p: v / total_trust for p, v in local_trust[peer].items()}\n    return normalized_trust\n\ndef compute_global_trust(normalized_trust, iterations=20):\n    peers = list(normalized_trust.keys())\n    global_trust = {peer: 1.0 / len(peers) for peer in peers}\n\n    for _ in range(iterations):\n        new_global_trust = {}\n        for peer in peers:\n            new_global_trust[peer] = sum(normalized_trust[other_peer].get(peer, 0) * global_trust[other_peer] for other_peer in peers)\n        \n        global_trust = new_global_trust\n\n    return global_trust\n\n# Example usage\nlocal_trust = {\n    'Alice': {'Bob': 3, 'Carol': 1},\n    'Bob': {'Alice': 1, 'Carol': 2},\n    'Carol': {'Alice': 2, 'Bob': 2},\n}\n\nnormalized_trust = normalize_local_trust(local_trust)\nglobal_trust = compute_global_trust(normalized_trust)\n\nprint(global_trust)