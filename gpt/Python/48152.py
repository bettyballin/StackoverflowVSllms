def has_cycle(graph):\n    def dfs(v, parent):\n        visited[v] = True\n        for neighbor in graph[v]:\n            if not visited[neighbor]:\n                if dfs(neighbor, v):\n                    return True\n            elif neighbor != parent:\n                return True\n        return False\n\n    visited = [False] * len(graph)\n    for v in range(len(graph)):\n        if not visited[v]:\n            if dfs(v, -1):\n                return True\n    return False\n\n# Example usage:\n# Graph represented as an adjacency list\ngraph = {\n    0: [1, 2],\n    1: [0, 2],\n    2: [0, 1, 3],\n    3: [2]\n}\n\nprint(has_cycle(graph))  # Output: True (since there is a cycle 0-1-2-0)