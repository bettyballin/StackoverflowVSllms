import doctest\nfrom io import StringIO\nimport unittest\n\nclass MyTest(unittest.TestCase):\n    def testIt(self):\n        # Capture the output\n        output = StringIO()\n        with StdoutCollector(output):\n            # Your code that produces output to stdout\n            print("Hello, world!")\n\n        # Use doctest's OutputChecker to compare the result\n        checker = doctest.OutputChecker()\n        expected_output = "Hello, world!\n"\n        actual_output = output.getvalue()\n\n        # Use the check_output method to compare the outputs\n        if not checker.check_output(expected_output, actual_output, doctest.ELLIPSIS):\n            raise AssertionError("Output did not match expected value:\n"\n                                 "Expected:\n{}\n"\n                                 "Actual:\n{}".format(expected_output, actual_output))\n\nclass StdoutCollector:\n    def __init__(self, output):\n        self.output = output\n\n    def __enter__(self):\n        self._original_stdout = sys.stdout\n        sys.stdout = self.output\n        return self.output\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        sys.stdout = self._original_stdout\n\nif __name__ == '__main__':\n    unittest.main()