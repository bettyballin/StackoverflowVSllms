import asyncore\nimport socket\nfrom tlslite.api import TLSConnection\n\nclass XMPPClient(asyncore.dispatcher_with_send):\n\n    def __init__(self, host, port):\n        asyncore.dispatcher_with_send.__init__(self)\n        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.connect((host, port))\n        self.tls_active = False\n\n    def handle_connect(self):\n        print("Connected to server")\n\n    def handle_read(self):\n        data = self.recv(8192)\n        if data:\n            print("Received:", data)\n            # Check for server's indication to start TLS here\n            if not self.tls_active and b"<starttls>" in data:\n                self.handshake_tls()\n\n    def handshake_tls(self):\n        print("Starting TLS handshake")\n        self.socket = TLSConnection(self.socket)\n        self.socket.handshakeClientCert()\n        self.tls_active = True\n        print("TLS handshake completed")\n\n    def handle_close(self):\n        print("Connection closed")\n        self.close()\n\nif __name__ == "__main__":\n    client = XMPPClient('your_xmpp_server', 5222)\n    asyncore.loop()