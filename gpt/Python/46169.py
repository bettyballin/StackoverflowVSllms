class ReteNode:\n    def __init__(self):\n        self.children = []\n        self.memory = []\n\n    def add_child(self, child):\n        self.children.append(child)\n\n    def add_to_memory(self, item):\n        self.memory.append(item)\n\nclass Rete:\n    def __init__(self):\n        self.root = ReteNode()\n\n    def add_rule(self, rule):\n        current_node = self.root\n        for condition in rule['conditions']:\n            matching_node = None\n            for child in current_node.children:\n                if child.condition == condition:\n                    matching_node = child\n                    break\n            if not matching_node:\n                matching_node = ReteNode()\n                matching_node.condition = condition\n                current_node.add_child(matching_node)\n            current_node = matching_node\n        current_node.action = rule['action']\n\n    def evaluate(self, facts):\n        self._evaluate_node(self.root, facts)\n\n    def _evaluate_node(self, node, facts):\n        for fact in facts:\n            if node.condition(fact):\n                if hasattr(node, 'action'):\n                    node.action()\n                for child in node.children:\n                    self._evaluate_node(child, facts)\n\n# Example usage\nrete = Rete()\n\n# Define a rule\nrule = {\n    'conditions': [\n        lambda fact: fact['type'] == 'A',\n        lambda fact: fact['value'] > 10\n    ],\n    'action': lambda: print("Rule matched!")\n}\n\n# Add the rule to the RETE network\nrete.add_rule(rule)\n\n# Define some facts\nfacts = [\n    {'type': 'A', 'value': 15},\n    {'type': 'B', 'value': 5}\n]\n\n# Evaluate the facts against the rules\nrete.evaluate(facts)