def greedy_mfas(graph):\n    from collections import defaultdict, deque\n\n    # Calculate in-degrees and out-degrees\n    in_degrees = defaultdict(int)\n    out_degrees = defaultdict(int)\n    for u in graph:\n        for v in graph[u]:\n            in_degrees[v] += 1\n            out_degrees[u] += 1\n\n    # Nodes with zero in-degree or out-degree\n    zero_in_degree = deque([u for u in graph if in_degrees[u] == 0])\n    zero_out_degree = deque([u for u in graph if out_degrees[u] == 0])\n\n    sorted_nodes = []\n\n    while zero_in_degree or zero_out_degree:\n        while zero_in_degree:\n            u = zero_in_degree.popleft()\n            sorted_nodes.append(u)\n            for v in graph[u]:\n                in_degrees[v] -= 1\n                if in_degrees[v] == 0:\n                    zero_in_degree.append(v)\n\n        while zero_out_degree:\n            u = zero_out_degree.popleft()\n            sorted_nodes.append(u)\n            for v in graph[u]:\n                out_degrees[v] -= 1\n                if out_degrees[v] == 0:\n                    zero_out_degree.append(v)\n\n    # Handle remaining nodes in any order (they form a cycle)\n    remaining_nodes = set(graph.keys()) - set(sorted_nodes)\n    sorted_nodes.extend(remaining_nodes)\n\n    return sorted_nodes\n\n# Example usage\ngraph = {\n    'A': ['B', 'C'],\n    'B': ['C'],\n    'C': ['D'],\n    'D': ['A']\n}\n\nsorted_nodes = greedy_mfas(graph)\nprint(sorted_nodes)