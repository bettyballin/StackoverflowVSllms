def build_tree_preorder(preorder, is_leaf):\n    if not preorder:\n        return None\n    \n    root_val = preorder.pop(0)\n    root = TreeNode(root_val)\n    \n    if is_leaf(root_val):\n        return root\n    \n    left = build_tree_preorder(preorder, is_leaf)\n    right = build_tree_preorder(preorder, is_leaf)\n    \n    root.left = left\n    root.right = right\n    \n    return root\n\ndef postorder_traversal(root):\n    if not root:\n        return []\n    return postorder_traversal(root.left) + postorder_traversal(root.right) + [root.val]\n\n# Example usage\npreorder = ['A', 'B', 'D', 'E', 'C', 'F', 'G']\nis_leaf = lambda x: x in {'D', 'E', 'F', 'G'}\n\nroot = build_tree_preorder(preorder, is_leaf)\npostorder = postorder_traversal(root)\nprint(postorder)  # Output should be the postorder traversal of the tree