def draw_polygon_scanline(polygon, color, screen):\n    # Function to draw a polygon using Scanline Fill Algorithm\n    def edge_table(polygon):\n        edges = []\n        n = len(polygon)\n        for i in range(n):\n            x1, y1 = polygon[i]\n            x2, y2 = polygon[(i + 1) % n]\n            if y1 != y2:  # Ignore horizontal edges\n                if y1 > y2:\n                    x1, y1, x2, y2 = x2, y2, x1, y1\n                edges.append((y1, y2, x1, (x2 - x1) / (y2 - y1)))\n        return sorted(edges)\n\n    def fill_scanline(y, intersections, color, screen):\n        intersections.sort()\n        for i in range(0, len(intersections), 2):\n            x1 = intersections[i]\n            x2 = intersections[i + 1]\n            for x in range(int(x1), int(x2) + 1):\n                screen[y][x] = color\n\n    # Create edge table\n    edges = edge_table(polygon)\n    y_min = min(polygon, key=lambda p: p[1])[1]\n    y_max = max(polygon, key=lambda p: p[1])[1]\n\n    active_edges = []\n    for y in range(y_min, y_max + 1):\n        # Add edges that start on this scanline\n        while edges and edges[0][0] == y:\n            active_edges.append(edges.pop(0))\n\n        # Remove edges that end on this scanline\n        active_edges = [edge for edge in active_edges if edge[1] != y]\n\n        # Calculate intersections\n        intersections = []\n        for edge in active_edges:\n            x = edge[2] + (y - edge[0]) * edge[3]\n            intersections.append(x)\n\n        # Fill the scanline\n        fill_scanline(y, intersections, color, screen)\n\n        # Increment x for active edges\n        for i in range(len(active_edges)):\n            y1, y2, x, inv_slope = active_edges[i]\n            active_edges[i] = (y1, y2, x + inv_slope, inv_slope)\n\n# Example usage\npolygon = [(1, 1), (5, 1), (3, 4)]\ncolor = (255, 0, 0)  # Red color\nscreen = [[(0, 0, 0) for _ in range(7)] for _ in range(6)]  # 6x7 black screen\n\ndraw_polygon_scanline(polygon, color, screen)\n\nfor row in screen:\n    print(' '.join(f'({r},{g},{b})' for r, g, b in row))