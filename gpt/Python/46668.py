def largest_prime_factor(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def next_prime(current_prime):\n        next_candidate = current_prime + 1\n        while not is_prime(next_candidate):\n            next_candidate += 1\n        return next_candidate\n\n    largest_factor = None\n    current_prime = 2\n\n    while n > 1 and current_prime * current_prime <= n:\n        if n % current_prime == 0:\n            largest_factor = current_prime\n            while n % current_prime == 0:\n                n //= current_prime\n        current_prime = next_prime(current_prime)\n\n    if n > 1:  # If n is still greater than 1, it must be prime\n        largest_factor = n\n\n    return largest_factor\n\n# Example usage:\nnumber = 13195\nprint(largest_prime_factor(number))  # Output: 29