# Function to snap to the nearest grid position\ndef snapToGrid(originalPos, offset, step):\n    index = int((originalPos - offset) / step)  # Truncates the remainder away\n    return index * step + offset  # Corrected from 'gap' to 'step'\n\n# Scroll module\nclass Scroll:\n    def __init__(self, viewPortOffset, pixels_in_an_ode_unit):\n        self.viewPortOffset = viewPortOffset\n        self.pixels_in_an_ode_unit = pixels_in_an_ode_unit\n\n    def pixelPosToOdePos(self, pixelPos):\n        offsetPixelPos = pixelPos - self.viewPortOffset\n        return self.pixelsToOde(offsetPixelPos)\n\n    def pixelsToOde(self, pixels):\n        return float(pixels) / float(self.pixels_in_an_ode_unit)\n\n    def odePosToPixelPos(self, odePos):\n        offsetPos = odePos + self.viewPortOffset\n        return self.odeToPixels(offsetPos)\n\n    def odeToPixels(self, odeUnits):\n        return int(odeUnits * self.pixels_in_an_ode_unit)\n\n    def render(self, screen, image, odePos):\n        pixelPos = self.odePosToPixelPos(odePos)\n        screen.blit(image, pixelPos)  # screen is a surface from pygame\n\n# Tool class\nclass Tool:\n    def __init__(self, scroll, image):\n        self.scroll = scroll\n        self.image = image\n        self.snappedPos = 0\n\n    def positionChanged(self, newPos):\n        self.snappedPos = snapToGrid(newPos, Y_OFFSET, Y_STEP)\n\n    def render(self, screen):\n        self.scroll.render(screen, self.image, self.snappedPos)\n\n# Example usage\nscroll = Scroll(viewPortOffset=100, pixels_in_an_ode_unit=10)\ntool = Tool(scroll, some_image)\n\ndef mouseMotion(event):\n    pixelPos = event.pos[Y]\n    odePos = scroll.pixelPosToOdePos(pixelPos)\n    tool.positionChanged(odePos)