from itertools import combinations_with_replacement, product\nfrom functools import reduce\nfrom operator import mul\n\ndef get_multiplication_combinations(n, k, target):\n    """\n    Generate all combinations of `k` numbers in the range 1 to `n` that multiply to `target`.\n    \n    :param n: Size of the puzzle (numbers range from 1 to n)\n    :param k: Number of cells in the domain\n    :param target: Target product\n    :return: List of tuples where each tuple contains `k` numbers multiplying to `target`\n    """\n    def product_of_tuple(t):\n        return reduce(mul, t, 1)\n    \n    # Generate all combinations of `k` numbers in range 1 to `n`\n    all_combinations = combinations_with_replacement(range(1, n + 1), k)\n    \n    # Filter combinations where the product of the numbers is `target`\n    valid_combinations = [combo for combo in all_combinations if product_of_tuple(combo) == target]\n    \n    return valid_combinations\n\n# Example usage\nn = 6  # Size of the puzzle (e.g., 6x6)\nk = 3  # Number of cells in the domain\ntarget = 36  # Target product\n\ncombinations = get_multiplication_combinations(n, k, target)\nprint(combinations)