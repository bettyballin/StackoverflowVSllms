from cryptography.hazmat.primitives.asymmetric import rsa, padding\nfrom cryptography.hazmat.primitives import serialization, hashes\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nimport os\nimport base64\n\n# Generate RSA keys (for demonstration purposes)\nprivate_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)\npublic_key = private_key.public_key()\n\n# Function to encrypt user data\ndef generate_key_code(namedata):\n    # Generate a random AES key\n    aes_key = os.urandom(32)  # 256-bit key\n\n    # Encrypt the namedata with AES\n    iv = os.urandom(16)  # 16 bytes IV for AES\n    cipher = Cipher(algorithms.AES(aes_key), modes.CFB(iv))\n    encryptor = cipher.encryptor()\n    ciphertext = encryptor.update(namedata.encode()) + encryptor.finalize()\n\n    # Encrypt the AES key with RSA\n    encrypted_aes_key = public_key.encrypt(\n        aes_key,\n        padding.OAEP(\n            mgf=padding.MGF1(algorithm=hashes.SHA256()),\n            algorithm=hashes.SHA256(),\n            label=None\n        )\n    )\n\n    # Combine the encrypted AES key and the ciphertext\n    combined_data = encrypted_aes_key + iv + ciphertext\n\n    # Encode the combined data to base64 for user-friendly representation\n    key_code = base64.urlsafe_b64encode(combined_data).decode()\n\n    return key_code\n\n# Example usage\nnamedata = "Peter"\nkey_code = generate_key_code(namedata)\nprint(f"Generated Key Code: {key_code}")\n\n# Function to decrypt the key code\ndef decrypt_key_code(key_code):\n    # Decode the base64 encoded key code\n    combined_data = base64.urlsafe_b64decode(key_code)\n\n    # Extract the encrypted AES key, IV, and ciphertext\n    encrypted_aes_key = combined_data[:256]  # RSA-2048 encrypted key is 256 bytes\n    iv = combined_data[256:272]  # 16 bytes IV\n    ciphertext = combined_data[272:]\n\n    # Decrypt the AES key with RSA\n    aes_key = private_key.decrypt(\n        encrypted_aes_key,\n        padding.OAEP(\n            mgf=padding.MGF1(algorithm=hashes.SHA256()),\n            algorithm=hashes.SHA256(),\n            label=None\n        )\n    )\n\n    # Decrypt the ciphertext with AES\n    cipher = Cipher(algorithms.AES(aes_key), modes.CFB(iv))\n    decryptor = cipher.decryptor()\n    namedata = decryptor.update(ciphertext) + decryptor.finalize()\n\n    return namedata.decode()\n\n# Example usage\ndecrypted_namedata = decrypt_key_code(key_code)\nprint(f"Decrypted Namedata: {decrypted_namedata}")