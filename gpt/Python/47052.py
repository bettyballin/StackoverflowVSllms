def xor(a, b):\n    result = []\n    for i in range(1, len(b)):\n        result.append(str(int(a[i]) ^ int(b[i])))\n    return ''.join(result)\n\ndef crc_remainder(input_bitstring, polynomial_bitstring, initial_filler='0'):\n    len_polynomial = len(polynomial_bitstring)\n    padded_input = input_bitstring + initial_filler * (len_polynomial - 1)\n    remainder = padded_input[:len_polynomial]\n    \n    for bit in padded_input[len_polynomial:]:\n        if remainder[0] == '1':\n            remainder = xor(polynomial_bitstring, remainder) + bit\n        else:\n            remainder = xor('0'*len_polynomial, remainder) + bit\n        remainder = remainder[1:]\n    \n    return remainder\n\n# Example usage\ninput_bitstring = "101101000"\npolynomial_bitstring = "1010"\nremainder = crc_remainder(input_bitstring, polynomial_bitstring)\nprint(f"CRC Remainder: {remainder}")