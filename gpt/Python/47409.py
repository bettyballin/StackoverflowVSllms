from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\n    from cryptography.hazmat.primitives import hashes\n    from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\n    from cryptography.hazmat.backends import default_backend\n    from cryptography.hazmat.primitives import padding\n    from cryptography.hazmat.primitives.kdf.scrypt import Scrypt\n    import os\n\n    def encrypt_image(input_file_path, output_file_path, password):\n        # Generate a random salt\n        salt = os.urandom(16)\n\n        # Derive a 256-bit key from the password\n        kdf = Scrypt(salt=salt, length=32, n=2**14, r=8, p=1, backend=default_backend())\n        key = kdf.derive(password.encode())\n\n        # Generate a random 96-bit IV (nonce)\n        iv = os.urandom(12)\n\n        # Initialize the AES-GCM cipher\n        encryptor = Cipher(\n            algorithms.AES(key),\n            modes.GCM(iv),\n            backend=default_backend()\n        ).encryptor()\n\n        # Read the image file\n        with open(input_file_path, 'rb') as f:\n            image_data = f.read()\n\n        # Encrypt the image data\n        ciphertext = encryptor.update(image_data) + encryptor.finalize()\n\n        # Write the salt, IV, and ciphertext to the output file\n        with open(output_file_path, 'wb') as f:\n            f.write(salt)\n            f.write(iv)\n            f.write(encryptor.tag)\n            f.write(ciphertext)\n\n    # Example usage\n    encrypt_image('path/to/input.jpg', 'path/to/encrypted_output.enc', 'your_secure_password')