class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Rectangle:\n    def __init__(self, x, y, width, height):\n        self.x = x\n        self.y = y\n        self.width = width\n        self.height = height\n\ndef route_edge(start, end, rects):\n    path = [start]\n    \n    # Step 1: Route vertically from the start point to the closest vertical boundary\n    if start.x != end.x:\n        path.append(Point(start.x, end.y))\n    \n    # Step 2: Route horizontally to the end point\n    while path[-1].x != end.x:\n        current = path[-1]\n        next_x = end.x\n        for rect in rects:\n            if current.y > rect.y and current.y < rect.y + rect.height:\n                if (current.x < rect.x and next_x > rect.x) or (current.x > rect.x and next_x < rect.x):\n                    next_x = rect.x if current.x < rect.x else (rect.x + rect.width)\n        path.append(Point(next_x, current.y))\n\n    # Step 3: Route vertically to the end point\n    if path[-1].y != end.y:\n        path.append(Point(end.x, end.y))\n    \n    return path\n\n# Example usage\nstart = Point(1, 1)\nend = Point(10, 10)\nrects = [Rectangle(5, 3, 2, 2)]\npath = route_edge(start, end, rects)\n\nfor p in path:\n    print(f"({p.x}, {p.y})")