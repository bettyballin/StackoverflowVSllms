def select_n_best_features(vector, n):\n    # Ensure n is less than the length of the vector\n    if n >= len(vector):\n        return vector\n\n    max_sum = 0\n    best_start_index = 0\n\n    # Calculate the sum of the first window\n    current_sum = sum(vector[:n])\n    max_sum = current_sum\n\n    # Slide the window over the vector\n    for i in range(1, len(vector) - n + 1):\n        current_sum = current_sum - vector[i - 1] + vector[i + n - 1]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            best_start_index = i\n\n    # Return the n elements with the highest sum and are contiguous\n    return vector[best_start_index:best_start_index + n]\n\n# Example usage\nvector = [0.2, 0.2, 0.01, 0.01, 0.001, 0.001, 0.3, 0.1, 0.05, 0.02]\nn = 3\nbest_features = select_n_best_features(vector, n)\nprint(best_features)