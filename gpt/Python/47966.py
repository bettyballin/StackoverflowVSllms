# Example: Writing and reading small pieces of data within a large file\n\nimport struct\n\n# Define a format for the index entries\nindex_format = 'I64s'  # Example: unsigned int for offset, 64-byte string for data identifier\n\ndef write_data(filename, data_entries):\n    with open(filename, 'wb') as f:\n        index = []\n        for data_id, data in data_entries.items():\n            # Write the data and store its offset\n            offset = f.tell()\n            f.write(data)\n            index.append((offset, data_id.encode('utf-8')))\n        \n        # Write the index at the end of the file\n        index_offset = f.tell()\n        for offset, data_id in index:\n            f.write(struct.pack(index_format, offset, data_id))\n        \n        # Write the index offset\n        f.write(struct.pack('I', index_offset))\n\ndef read_data(filename, data_id):\n    with open(filename, 'rb') as f:\n        # Read the index offset\n        f.seek(-struct.calcsize('I'), 2)\n        index_offset = struct.unpack('I', f.read(struct.calcsize('I')))[0]\n        \n        # Read the index\n        f.seek(index_offset)\n        while f.tell() < index_offset:\n            offset, stored_data_id = struct.unpack(index_format, f.read(struct.calcsize(index_format)))\n            if stored_data_id.decode('utf-8').strip('\x00') == data_id:\n                # Found the data, read it from the offset\n                f.seek(offset)\n                return f.read()  # Adjust to read only the expected data size if known\n        \n    return None  # Data not found\n\n# Example usage\ndata_entries = {'id1': b'data1', 'id2': b'data2'}\nwrite_data('largefile.dat', data_entries)\nprint(read_data('largefile.dat', 'id1'))