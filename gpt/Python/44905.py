import intelhex\n\ndef fill_pattern_in_hex_file(input_file, output_file, start_address, end_address, pattern):\n    # Read the original HEX file\n    ih = intelhex.IntelHex(input_file)\n    \n    # Apply the fill pattern\n    pattern_bytes = pattern.to_bytes(3, 'big')\n    pattern_len = len(pattern_bytes)\n    \n    for address in range(start_address, end_address + 1, pattern_len):\n        ih[address:address + pattern_len] = pattern_bytes\n    \n    # Write the modified HEX file\n    ih.write_hex_file(output_file)\n\nif __name__ == "__main__":\n    input_hex_file = 'input.hex'\n    output_hex_file = 'output.hex'\n    start_address = 0x0000  # Start address for the fill\n    end_address = 0xFFFF    # End address for the fill\n    fill_pattern = 0xC2AF00\n    \n    fill_pattern_in_hex_file(input_hex_file, output_hex_file, start_address, end_address, fill_pattern)