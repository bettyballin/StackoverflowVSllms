def calculate_optimal_stock_length(cuts, min_scrap=2):\n    """\n    Calculate the optimal stock length based on the sizes of the cuts.\n    \n    :param cuts: List of tuples where each tuple is (cut_length, frequency)\n    :param min_scrap: Minimum scrap length to be considered\n    :return: Optimal stock length\n    """\n    from collections import Counter\n\n    # Create a histogram of cut lengths\n    cut_lengths = Counter()\n    for length, freq in cuts:\n        cut_lengths[length] += freq\n\n    # Sort cuts by frequency and length\n    sorted_cuts = sorted(cut_lengths.items(), key=lambda x: (-x[1], x[0]))\n\n    # Starting with the longest length as the initial optimal length\n    optimal_stock_length = sorted_cuts[0][0]\n\n    # Incrementally check the addition of other lengths\n    for length, freq in sorted_cuts[1:]:\n        potential_length = optimal_stock_length + length\n        # Check if adding this length would reduce scrap\n        if potential_length - optimal_stock_length >= min_scrap:\n            optimal_stock_length = potential_length\n\n    return optimal_stock_length\n\n# Example usage\ncuts = [(5, 10), (7, 5), (3, 20), (9, 2)]\noptimal_length = calculate_optimal_stock_length(cuts)\nprint(f"Optimal Stock Length: {optimal_length} feet")