import pyodbc\n\ndef get_procedure_text(cursor, proc_name):\n    cursor.execute(f"""\n        SELECT OBJECT_DEFINITION (OBJECT_ID(N'{proc_name}'))\n    """)\n    row = cursor.fetchone()\n    return row[0] if row else None\n\ndef get_called_procedures(cursor, proc_name):\n    cursor.execute(f"""\n        SELECT referenced_entity_name\n        FROM sys.dm_sql_referenced_entities ('{proc_name}', 'OBJECT')\n        WHERE referenced_class_desc = 'OBJECT_OR_COLUMN' AND is_all_columns = 0\n    """)\n    return [row[0] for row in cursor.fetchall()]\n\ndef fetch_procedure_tree(cursor, proc_name, visited=None):\n    if visited is None:\n        visited = set()\n    if proc_name in visited:\n        return {}\n    visited.add(proc_name)\n    \n    proc_text = get_procedure_text(cursor, proc_name)\n    called_procs = get_called_procedures(cursor, proc_name)\n    \n    proc_tree = {proc_name: {'text': proc_text, 'called_procs': {}}}\n    for called_proc in called_procs:\n        proc_tree[proc_name]['called_procs'].update(\n            fetch_procedure_tree(cursor, called_proc, visited)\n        )\n    return proc_tree\n\ndef print_procedure_tree(proc_tree, indent=0):\n    for proc_name, details in proc_tree.items():\n        print(' ' * indent + f"{proc_name} definition")\n        print(' ' * indent + details['text'])\n        print_procedure_tree(details['called_procs'], indent + 4)\n\n# Usage\nconnection_string = 'DRIVER={ODBC Driver 17 for SQL Server};SERVER=your_server;DATABASE=your_database;UID=your_username;PWD=your_password'\nconn = pyodbc.connect(connection_string)\ncursor = conn.cursor()\n\nroot_proc = 'dbo.ProcA'  # Replace with the name of your root procedure\nproc_tree = fetch_procedure_tree(cursor, root_proc)\nprint_procedure_tree(proc_tree)\n\ncursor.close()\nconn.close()