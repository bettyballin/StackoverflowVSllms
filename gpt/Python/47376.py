from twisted.internet import reactor, protocol\nfrom twisted.internet.task import LoopingCall\n\nclass MyProtocol(protocol.Protocol):\n    clients = []\n\n    def connectionMade(self):\n        self.clients.append(self)\n        print("Client connected:", self.transport.getPeer())\n\n    def connectionLost(self, reason):\n        self.clients.remove(self)\n        print("Client disconnected:", self.transport.getPeer())\n\n    def dataReceived(self, data):\n        # Handle incoming data from clients if needed\n        pass\n\n    @classmethod\n    def sendToAllClients(cls, data):\n        for client in cls.clients:\n            client.transport.write(data)\n\nclass MyFactory(protocol.Factory):\n    def buildProtocol(self, addr):\n        return MyProtocol()\n\ndef sendPeriodicData():\n    data = b'Periodic Data\n'\n    MyProtocol.sendToAllClients(data)\n\nif __name__ == '__main__':\n    port = 8000\n    factory = MyFactory()\n    reactor.listenTCP(port, factory)\n    \n    # Send data every 5 seconds\n    lc = LoopingCall(sendPeriodicData)\n    lc.start(5.0)\n\n    reactor.run()