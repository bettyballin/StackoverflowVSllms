import unittest\n\nclass TestBrainfuckInterpreter(unittest.TestCase):\n    def setUp(self):\n        self.interpreter = BrainfuckInterpreter()  # Assuming you have a class BrainfuckInterpreter\n    \n    def test_increment(self):\n        self.interpreter.run('++++')  # Assume run method executes Brainfuck code\n        self.assertEqual(self.interpreter.memory[0], 4)\n    \n    def test_decrement(self):\n        self.interpreter.run('++++----')\n        self.assertEqual(self.interpreter.memory[0], 0)\n    \n    def test_pointer_movement(self):\n        self.interpreter.run('>++++<')\n        self.assertEqual(self.interpreter.memory[0], 0)\n        self.assertEqual(self.interpreter.memory[1], 4)\n    \n    def test_output(self):\n        self.interpreter.run('++++.----.')\n        self.assertEqual(self.interpreter.output, '\x04\x00')  # Expect ASCII output\n    \n    def test_loop(self):\n        self.interpreter.run('+++[>++<-]')\n        self.assertEqual(self.interpreter.memory[0], 0)\n        self.assertEqual(self.interpreter.memory[1], 6)\n\n    def test_nested_loop(self):\n        self.interpreter.run('+++[>++[>++<-]<-]')\n        self.assertEqual(self.interpreter.memory[0], 0)\n        self.assertEqual(self.interpreter.memory[1], 0)\n        self.assertEqual(self.interpreter.memory[2], 12)\n\nif __name__ == '__main__':\n    unittest.main()