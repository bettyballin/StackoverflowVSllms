def is_leaf(node, graph):\n    # A node is a leaf if it has no children\n    return not graph.get(node, [])\n\ndef dfs(node, graph, visited, memo):\n    if node in memo:\n        return memo[node]\n\n    if node in visited:\n        return False  # Prevent cycles in a malformed graph\n\n    visited.add(node)\n\n    if is_leaf(node, graph):\n        memo[node] = True\n        visited.remove(node)\n        return True\n\n    for child in graph.get(node, []):\n        if dfs(child, graph, visited, memo):\n            memo[node] = True\n            visited.remove(node)\n            return True\n\n    memo[node] = False\n    visited.remove(node)\n    return False\n\ndef find_all_reachable_leaf_nodes(start_node, graph):\n    memo = {}\n    visited = set()\n    leaf_nodes = []\n\n    def collect_leaves(node):\n        if node in memo:\n            if memo[node] and is_leaf(node, graph):\n                leaf_nodes.append(node)\n            return\n\n        if node in visited:\n            return  # Prevent cycles in a malformed graph\n\n        visited.add(node)\n\n        if is_leaf(node, graph):\n            memo[node] = True\n            leaf_nodes.append(node)\n        else:\n            memo[node] = False\n            for child in graph.get(node, []):\n                collect_leaves(child)\n                if memo[child]:\n                    memo[node] = True\n\n        visited.remove(node)\n\n    collect_leaves(start_node)\n    return leaf_nodes\n\n# Example usage:\ngraph = {\n    'A': ['B', 'C'],\n    'B': ['D', 'E'],\n    'C': [],\n    'D': [],\n    'E': []\n}\n\nstart_node = 'A'\nreachable_leaves = find_all_reachable_leaf_nodes(start_node, graph)\nprint(reachable_leaves)  # Output: ['C', 'D', 'E']