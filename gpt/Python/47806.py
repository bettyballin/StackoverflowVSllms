from collections import deque\n\ndef bfs_minimal_path(graph, start, end):\n    queue = deque([(start, [start])])\n    visited = set()\n    \n    while queue:\n        (vertex, path) = queue.popleft()\n        if vertex in visited:\n            continue\n        if vertex == end:\n            return path\n        visited.add(vertex)\n        for neighbor in graph[vertex]:\n            queue.append((neighbor, path + [neighbor]))\n    \n    return None  # No path found\n\n# Example usage:\ngraph = {\n    'A': ['B', 'C'],\n    'B': ['A', 'D', 'E'],\n    'C': ['A', 'F'],\n    'D': ['B'],\n    'E': ['B', 'F'],\n    'F': ['C', 'E']\n}\nprint(bfs_minimal_path(graph, 'A', 'F'))  # Output: ['A', 'C', 'F']