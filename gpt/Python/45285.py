from heapq import heappush, heappop\nfrom collections import defaultdict\n\ndef layout_events(events):\n    # Sort events by start date, then by end date\n    events.sort(key=lambda x: (x[0], x[1]))\n    \n    # Data structure to store the final layout\n    layout = defaultdict(list)\n    \n    # Priority queue to track end dates of events and their row index\n    pq = []\n    \n    # Dictionary to store the row index of the last placed event\n    row_end = defaultdict(int)\n    \n    for event in events:\n        start, end = event\n        \n        # Find the first available row that can accommodate the event\n        while pq and pq[0][0] < start:\n            heappop(pq)\n        \n        if pq:\n            # Reuse the row of the event that finishes earliest\n            _, row = heappop(pq)\n        else:\n            # Use a new row\n            row = len(pq)\n        \n        # Place the event in the layout\n        for day in range(start, end + 1):\n            layout[day].append((row, event))\n        \n        # Update the end date of the row\n        heappush(pq, (end, row))\n    \n    return layout\n\n# Example usage\nevents = [(10, 11), (11, 15), (10, 11), (13, 14), (11, 13)]\n\nlayout = layout_events(events)\n\n# Print the layout\nfor day in sorted(layout.keys()):\n    print(f"Day {day}:")\n    for row, event in sorted(layout[day]):\n        print(f"  Row {row}: Event {event}")