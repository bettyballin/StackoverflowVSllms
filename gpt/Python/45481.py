from keras.applications.vgg16 import VGG16, preprocess_input\nfrom keras.preprocessing import image\nfrom keras.models import Model\nimport numpy as np\nfrom sklearn.metrics.pairwise import cosine_similarity\nimport os\n\n# Load the VGG16 model pre-trained on ImageNet\nbase_model = VGG16(weights='imagenet')\nmodel = Model(inputs=base_model.input, outputs=base_model.get_layer('fc1').output)\n\ndef extract_features(img_path):\n    img = image.load_img(img_path, target_size=(224, 224))\n    img_data = image.img_to_array(img)\n    img_data = np.expand_dims(img_data, axis=0)\n    img_data = preprocess_input(img_data)\n    features = model.predict(img_data)\n    return features\n\ndef find_similar_images(query_image_path, image_dir, top_n=5):\n    query_features = extract_features(query_image_path)\n    similarities = []\n    \n    for img_file in os.listdir(image_dir):\n        img_path = os.path.join(image_dir, img_file)\n        img_features = extract_features(img_path)\n        similarity = cosine_similarity(query_features, img_features)\n        similarities.append((img_file, similarity))\n    \n    # Sort by similarity score (highest first)\n    similarities.sort(key=lambda x: x[1], reverse=True)\n    \n    return similarities[:top_n]\n\n# Example usage\nquery_image = 'path_to_query_image.jpg'\nimage_directory = 'path_to_image_directory'\nsimilar_images = find_similar_images(query_image, image_directory)\n\nfor img, score in similar_images:\n    print(f"Image: {img}, Similarity Score: {score}")