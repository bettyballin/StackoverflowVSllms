from queue import PriorityQueue\n\n    def a_star(graph, start, goal):\n        open_set = PriorityQueue()\n        open_set.put((0, start))\n        came_from = {}\n        g_score = {start: 0}\n        f_score = {start: heuristic(start, goal)}\n\n        while not open_set.empty():\n            _, current = open_set.get()\n            if current == goal:\n                return reconstruct_path(came_from, current)\n\n            for neighbor in graph.neighbors(current):\n                tentative_g_score = g_score[current] + graph.cost(current, neighbor)\n                if tentative_g_score < g_score.get(neighbor, float('inf')):\n                    came_from[neighbor] = current\n                    g_score[neighbor] = tentative_g_score\n                    f_score[neighbor] = tentative_g_score + heuristic(neighbor, goal)\n                    open_set.put((f_score[neighbor], neighbor))\n\n        return None