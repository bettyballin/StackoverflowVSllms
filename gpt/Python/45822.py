import numpy as np\n\ndef closest_distance_between_lines(a0, a1, b0, b1, clamp_all=False, clamp_a0=False, clamp_a1=False, clamp_b0=False, clamp_b1=False):\n    A = a1 - a0\n    B = b1 - b0\n    magA = np.linalg.norm(A)\n    magB = np.linalg.norm(B)\n    \n    _A = A / magA\n    _B = B / magB\n\n    cross = np.cross(_A, _B)\n    denom = np.linalg.norm(cross)**2\n\n    if not denom:\n        d0 = np.dot(_A, (b0 - a0))\n\n        if clamp_a0 or clamp_a1 or clamp_b0 or clamp_b1:\n            d0 = np.clip(d0, 0, magA)\n        \n        return np.linalg.norm((d0 * _A + a0) - b0)\n\n    t = b0 - a0\n    detA = np.linalg.det([t, _B, cross])\n    detB = np.linalg.det([t, _A, cross])\n\n    t0 = detA / denom\n    t1 = detB / denom\n\n    pA = a0 + (_A * t0)\n    pB = b0 + (_B * t1)\n\n    if clamp_all or clamp_a0 or clamp_a1 or clamp_b0 or clamp_b1:\n        if clamp_a0 and t0 < 0:\n            pA = a0\n        elif clamp_a1 and t0 > magA:\n            pA = a1\n        if clamp_b0 and t1 < 0:\n            pB = b0\n        elif clamp_b1 and t1 > magB:\n            pB = b1\n\n        if (clamp_a0 and t0 < 0) or (clamp_a1 and t0 > magA):\n            dot = np.dot(_B, (pA - b0))\n            if clamp_b0 and dot < 0:\n                dot = 0\n            elif clamp_b1 and dot > magB:\n                dot = magB\n            pB = b0 + (_B * dot)\n\n        if (clamp_b0 and t1 < 0) or (clamp_b1 and t1 > magB):\n            dot = np.dot(_A, (pB - a0))\n            if clamp_a0 and dot < 0:\n                dot = 0\n            elif clamp_a1 and dot > magA:\n                dot = magA\n            pA = a0 + (_A * dot)\n\n    return np.linalg.norm(pA - pB)\n\ndef shortest_distance_segment_to_segment(X1, Y1, Z1, X2, Y2, Z2, X3, Y3, Z3, X4, Y4, Z4):\n    a0 = np.array([X1, Y1, Z1])\n    a1 = np.array([X2, Y2, Z2])\n    b0 = np.array([X3, Y3, Z3])\n    b1 = np.array([X4, Y4, Z4])\n    \n    return closest_distance_between_lines(a0, a1, b0, b1, clamp_all=True)\n\n# Example usage\nX1, Y1, Z1 = 0, 0, 0\nX2, Y2, Z2 = 1, 0, 0\nX3, Y3, Z3 = 0, 1, 1\nX4, Y4, Z4 = 1, 1, 1\n\ndistance = shortest_distance_segment_to_segment(X1, Y1, Z1, X2, Y2, Z2, X3, Y3, Z3, X4, Y4, Z4)\nprint("Shortest distance:", distance)