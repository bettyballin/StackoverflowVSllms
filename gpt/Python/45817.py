from collections import defaultdict\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n    \n    def add_edge(self, u, v):\n        self.graph[u].append(v)\n    \n    def topological_sort_util(self, v, visited, stack):\n        visited[v] = True\n        \n        for i in self.graph[v]:\n            if not visited[i]:\n                self.topological_sort_util(i, visited, stack)\n        \n        stack.insert(0, v)\n    \n    def topological_sort(self):\n        visited = [False] * self.V\n        stack = []\n        \n        for i in range(self.V):\n            if not visited[i]:\n                self.topological_sort_util(i, visited, stack)\n        \n        return stack\n\n# Example usage\ng = Graph(6)\ng.add_edge(5, 2)\ng.add_edge(5, 0)\ng.add_edge(4, 0)\ng.add_edge(4, 1)\ng.add_edge(2, 3)\ng.add_edge(3, 1)\n\nprint("Topological Sort of the given graph:")\nprint(g.topological_sort())