class TreeNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n        self.swapped = False  # Flag to track if this node has been swapped\n\ndef generate_permutations(node):\n    if node is None:\n        return\n\n    # If both children are leaves, we can swap them\n    if node.left and node.right and not node.left.left and not node.left.right and not node.right.left and not node.right.right:\n        node.left, node.right = node.right, node.left\n        node.swapped = True\n        yield node\n        node.left, node.right = node.right, node.left  # Swap back to original\n\n    # If left child has not been swapped, try to permute the left subtree\n    if node.left and not node.left.swapped:\n        for _ in generate_permutations(node.left):\n            yield node\n        node.left.swapped = True\n\n    # If current node has not been swapped, try swapping its children\n    if node.left and node.right and not node.swapped:\n        node.left, node.right = node.right, node.left\n        for _ in generate_permutations(node.left):\n            yield node\n        node.left, node.right = node.right, node.left  # Swap back to original\n        node.swapped = True\n\n    # If left subtree is fully permuted, try permuting right subtree\n    if node.right and not node.right.swapped:\n        for _ in generate_permutations(node.right):\n            yield node\n        node.right.swapped = True\n\n    yield node\n\n\n# Example usage:\n# Constructing a binary tree for demonstration\nroot = TreeNode('branch')\nroot.left = TreeNode('branch')\nroot.right = TreeNode('3')\nroot.left.left = TreeNode('branch')\nroot.left.right = TreeNode('2')\nroot.left.left.left = TreeNode('0')\nroot.left.left.right = TreeNode('1')\n\n# Generating and printing all permutations\nfor perm in generate_permutations(root):\n    # Implement a function to print the tree structure\n    print_tree_structure(perm)\n\n# Note: You need to implement the `print_tree_structure` function to visualize the tree.