#!/usr/bin/env python\nfrom win32security import *\nimport sys\n\ndef decode_flags(flags):\n    _flags = {\n        SE_DACL_PROTECTED: "SE_DACL_PROTECTED",\n        SE_DACL_AUTO_INHERITED: "SE_DACL_AUTO_INHERITED",\n        OBJECT_INHERIT_ACE: "OBJECT_INHERIT_ACE",\n        CONTAINER_INHERIT_ACE: "CONTAINER_INHERIT_ACE",\n        INHERIT_ONLY_ACE: "INHERIT_ONLY_ACE",\n        NO_INHERITANCE: "NO_INHERITANCE",\n        NO_PROPAGATE_INHERIT_ACE: "NO_PROPAGATE_INHERIT_ACE",\n        INHERITED_ACE: "INHERITED_ACE"\n    }\n    for key in _flags.keys():\n        if (flags & key):\n            print('\t', '\t', _flags[key], "is set!")\n\ndef get_aces(path):\n    security_descriptor = GetFileSecurity(path, DACL_SECURITY_INFORMATION)\n    dacl = security_descriptor.GetSecurityDescriptorDacl()\n\n    aces = []\n    for ace_index in range(dacl.GetAceCount()):\n        (ace_type, ace_flags), access_mask, sid = dacl.GetAce(ace_index)\n        aces.append((ace_type, ace_flags, access_mask, sid))\n    return aces\n\ndef main(argv):\n    target = argv[0]\n    parent_target = "\\".join(target.split("\\")[:-1])\n\n    print("Target:", target)\n    print("Parent:", parent_target)\n\n    target_aces = get_aces(target)\n    parent_aces = get_aces(parent_target)\n\n    for ace_index, (ace_type, ace_flags, access_mask, sid) in enumerate(target_aces):\n        name, domain, account_type = LookupAccountSid(None, sid)\n        is_inherited = ace_flags & INHERITED_ACE\n        inherited_from_parent = (ace_type, access_mask, sid) in [(p_ace_type, p_access_mask, p_sid) for p_ace_type, p_ace_flags, p_access_mask, p_sid in parent_aces]\n\n        print('\t', domain + '\\' + name, hex(ace_flags))\n        decode_flags(ace_flags)\n        print('\t', "Inherited ACE Flag:", bool(is_inherited))\n        print('\t', "Inherited from Parent:", inherited_from_parent)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])