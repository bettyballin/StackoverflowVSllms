import logging\nimport sqlite3\nfrom datetime import datetime\n\n# Setup logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# Connect to SQLite database\nconn = sqlite3.connect('process_logs.db')\ncursor = conn.cursor()\n\n# Create table if not exists\ncursor.execute('''\nCREATE TABLE IF NOT EXISTS logs (\n    id INTEGER PRIMARY KEY,\n    timestamp TEXT,\n    level TEXT,\n    message TEXT\n)\n''')\n\ndef log_to_db(level, message):\n    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    cursor.execute('INSERT INTO logs (timestamp, level, message) VALUES (?, ?, ?)', (timestamp, level, message))\n    conn.commit()\n\ndef log_and_alert(level, message):\n    log_to_db(level, message)\n    if level == 'ERROR':\n        # Trigger email alert (pseudo-code)\n        send_email_alert(message)\n\ndef send_email_alert(message):\n    # Implement email alerting logic here\n    pass\n\n# Example usage\ntry:\n    # Your long-running process code here\n    logger.info('Process started')\n    log_and_alert('INFO', 'Process started')\n    # Simulate an error\n    raise ValueError('An example error')\nexcept Exception as e:\n    logger.error(f'Error occurred: {e}')\n    log_and_alert('ERROR', f'Error occurred: {e}')\n\n# Close database connection\nconn.close()