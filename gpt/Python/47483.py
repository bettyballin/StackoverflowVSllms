from neo4j import GraphDatabase\n\nclass SixDegrees:\n    def __init__(self, uri, user, password):\n        self.driver = GraphDatabase.driver(uri, auth=(user, password))\n\n    def close(self):\n        self.driver.close()\n\n    def find_shortest_path(self, person1, person2):\n        with self.driver.session() as session:\n            result = session.read_transaction(self._shortest_path_query, person1, person2)\n            for record in result:\n                return record["length"]\n\n    @staticmethod\n    def _shortest_path_query(tx, person1, person2):\n        query = """\n        MATCH (p1:Person {name: $person1}), (p2:Person {name: $person2}),\n        p = shortestPath((p1)-[:KNOWS*]-(p2))\n        RETURN length(p) AS length\n        """\n        result = tx.run(query, person1=person1, person2=person2)\n        return result.single()\n\n# Example usage:\n# Replace 'bolt://localhost:7687' with your Neo4j connection string,\n# and 'neo4j', 'password' with your Neo4j username and password.\nsix_degrees = SixDegrees("bolt://localhost:7687", "neo4j", "password")\n\n# Find the shortest path between two users\nperson1 = "Alice"\nperson2 = "Bob"\ndegrees_of_separation = six_degrees.find_shortest_path(person1, person2)\nprint(f"Degrees of Separation between {person1} and {person2}: {degrees_of_separation}")\n\nsix_degrees.close()