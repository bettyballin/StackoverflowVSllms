import hashlib\n\nclass TreeEquivalence:\n    def __init__(self):\n        self.ds = DisjointSet()\n        self.structure_map = {}\n\n    def hash_structure(self, node):\n        if not node.children:\n            return hashlib.md5(str(node.value).encode()).hexdigest()\n        children_hashes = [self.ds.find(child) for child in node.children]\n        structure = (node.value, tuple(sorted(children_hashes)))\n        return hashlib.md5(str(structure).encode()).hexdigest()\n\n    def add_node(self, node):\n        node_hash = self.hash_structure(node)\n        if node_hash in self.structure_map:\n            self.ds.union(node, self.structure_map[node_hash])\n        else:\n            self.ds.makeSet(node)\n            self.structure_map[node_hash] = node