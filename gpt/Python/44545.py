import random\nfrom heapq import heappush, heappop\n\ndef generate_fair_maze(width, height, start_points, goal_point, max_deviation=0.1):\n    def in_bounds(x, y):\n        return 0 <= x < width and 0 <= y < height\n\n    def neighbors(x, y):\n        for nx, ny in [(x-2, y), (x+2, y), (x, y-2), (x, y+2)]:\n            if in_bounds(nx, ny):\n                yield nx, ny\n\n    def mark_path(x1, y1, x2, y2):\n        maze[(x1 + x2) // 2][(y1 + y2) // 2] = 0\n        maze[x2][y2] = 0\n\n    def calculate_distance(start, goal):\n        queue = [(0, start)]\n        visited = set()\n        while queue:\n            dist, (cx, cy) = heappop(queue)\n            if (cx, cy) == goal:\n                return dist\n            if (cx, cy) in visited:\n                continue\n            visited.add((cx, cy))\n            for nx, ny in neighbors(cx, cy):\n                if maze[nx][ny] == 0 and (nx, ny) not in visited:\n                    heappush(queue, (dist + 1, (nx, ny)))\n        return float('inf')\n\n    maze = [[1] * width for _ in range(height)]\n    start_x, start_y = random.choice(start_points)\n    maze[start_x][start_y] = 0\n\n    frontiers = []\n    for nx, ny in neighbors(start_x, start_y):\n        heappush(frontiers, (random.random(), (start_x, start_y, nx, ny)))\n\n    while frontiers:\n        _, (x1, y1, x2, y2) = heappop(frontiers)\n        if maze[x2][y2] == 1:\n            mark_path(x1, y1, x2, y2)\n            avg_path_length = sum(calculate_distance(start, goal_point) for start in start_points) / len(start_points)\n            if all(calculate_distance(start, goal_point) <= avg_path_length * (1 + max_deviation) for start in start_points):\n                for nx, ny in neighbors(x2, y2):\n                    if maze[nx][ny] == 1:\n                        heappush(frontiers, (random.random(), (x2, y2, nx, ny)))\n            else:\n                maze[(x1 + x2) // 2][(y1 + y2) // 2] = 1\n                maze[x2][y2] = 1\n\n    return maze\n\n# Example usage\nwidth, height = 21, 21\nstart_points = [(0, 0), (0, 20), (20, 0), (20, 20)]\ngoal_point = (10, 10)\nmaze = generate_fair_maze(width, height, start_points, goal_point)\nfor row in maze:\n    print(''.join('#' if cell else ' ' for cell in row))