import gtk\nimport gobject\n\nNODE_SIZE = 10\n\nclass NetworkAnimator:\n    def __init__(self):\n        self.window = gtk.Window()\n        self.window.connect("destroy", gtk.main_quit)\n        self.drawing_area = gtk.DrawingArea()\n        self.drawing_area.set_size_request(800, 600)\n        self.window.add(self.drawing_area)\n        self.drawing_area.connect("expose-event", self.expose)\n        self.window.show_all()\n\n        self.nodes = self.create_nodes()\n        self.t = 0\n\n        gobject.timeout_add(1000 // 60, self.update)  # 60 FPS\n\n    def create_nodes(self):\n        # Create and return a list of nodes with initial positions\n        return [Node() for _ in range(10)]\n\n    def expose(self, widget, event):\n        self.draw(widget)\n\n    def draw(self, widget):\n        rect = self.drawing_area.get_allocation()\n        pixmap = gtk.gdk.Pixmap(self.drawing_area.window, rect.width, rect.height)\n        style = self.drawing_area.get_style()\n\n        # Clear the buffer\n        pixmap.draw_rectangle(style.bg_gc[gtk.STATE_NORMAL], True, 0, 0, rect.width, rect.height)\n\n        # Draw nodes\n        pos = [n.position_at(self.t) for n in self.nodes]\n        for p in pos:\n            pixmap.draw_arc(style.fg_gc[gtk.STATE_NORMAL], True,\n                            rect.width * (p.x / 2400.0) - NODE_SIZE / 2,\n                            rect.height * (p.y / 2400.0) - NODE_SIZE / 2,\n                            NODE_SIZE, NODE_SIZE,\n                            0, 64 * 360)\n\n        # Copy the buffer to the screen\n        self.drawing_area.window.draw_drawable(style.bg_gc[gtk.STATE_NORMAL], pixmap, \n                                               0, 0, 0, 0, rect.width, rect.height)\n\n    def update(self):\n        self.t += 1\n        self.drawing_area.queue_draw()\n        return True\n\nclass Node:\n    def __init__(self):\n        self.x = 0\n        self.y = 0\n\n    def position_at(self, t):\n        # Return the position of the node at time t\n        return self\n\nif __name__ == "__main__":\n    NetworkAnimator()\n    gtk.main()