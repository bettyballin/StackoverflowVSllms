def misra_gries(stream, k):\n    # Dictionary to store potential candidates\n    counter = {}\n    \n    for code in stream:\n        if code in counter:\n            counter[code] += 1\n        elif len(counter) < k - 1:\n            counter[code] = 1\n        else:\n            for candidate in list(counter.keys()):\n                counter[candidate] -= 1\n                if counter[candidate] == 0:\n                    del counter[candidate]\n    \n    # Second pass to count the actual frequencies of the candidates\n    for candidate in counter.keys():\n        counter[candidate] = 0\n        \n    for code in stream:\n        if code in counter:\n            counter[code] += 1\n            \n    # Filtering out the codes that occur more than the threshold\n    n = len(stream)\n    threshold = n / k\n    result = {code: count for code, count in counter.items() if count > threshold}\n    \n    return result\n\n# Example usage:\n# Assuming `data` is your stream of 16-byte codes\ndata = [...]  # Your stream of codes here\nk = 200  # This corresponds to 1/2% threshold\nfrequent_codes = misra_gries(data, k)\n\nprint(frequent_codes)