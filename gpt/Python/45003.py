from collections import defaultdict, deque\n\ndef topological_sort(partial_order):\n    # Step 1: Create a graph\n    graph = defaultdict(list)\n    in_degree = defaultdict(int)\n    \n    for u, v in partial_order:\n        graph[u].append(v)\n        in_degree[v] += 1\n        if u not in in_degree:\n            in_degree[u] = 0\n    \n    # Step 2: Collect nodes with no incoming edges\n    queue = deque([node for node in in_degree if in_degree[node] == 0])\n    \n    # Step 3: Process nodes\n    sorted_list = []\n    while queue:\n        node = queue.popleft()\n        sorted_list.append(node)\n        \n        for neighbor in graph[node]:\n            in_degree[neighbor] -= 1\n            if in_degree[neighbor] == 0:\n                queue.append(neighbor)\n    \n    # If there are still nodes with incoming edges, there is a cycle\n    if len(sorted_list) != len(in_degree):\n        raise ValueError("The graph has at least one cycle, topological sorting is not possible.")\n    \n    return sorted_list\n\n# Example usage:\npartial_order = [('A', 'B'), ('B', 'C'), ('A', 'P'), ('P', 'Q')]\nsorted_list = topological_sort(partial_order)\nprint(sorted_list)