import atexit\nimport os\nimport readline\nimport rlcompleter\n\nclass IrlCompleter(rlcompleter.Completer):\n    """\n    This class enables a "tab" insertion if there's no text for\n    completion.\n\n    The default "tab" is four spaces. You can initialize with '\t' as\n    the tab if you wish to use a genuine tab.\n    """\n\n    def __init__(self, tab='    '):\n        self.tab = tab\n        rlcompleter.Completer.__init__(self)\n\n    def complete(self, text, state):\n        if text == '':\n            readline.insert_text(self.tab)\n            return None\n        else:\n            return rlcompleter.Completer.complete(self, text, state)\n\n# Bind tab key to the completer function\nreadline.parse_and_bind('tab: complete')\nreadline.set_completer(IrlCompleter('\t').complete)\n\n# Restore command-line history and save it when Python exits\nhistory_path = os.path.expanduser('~/.pyhistory')\nif os.path.isfile(history_path):\n    readline.read_history_file(history_path)\natexit.register(lambda x=history_path: readline.write_history_file(x))