import numpy as np\n\ndef levenberg_marquardt(f, jacobian, x0, y, tol=1e-6, max_iter=100, lambda_init=0.01):\n    x = np.array(x0)\n    lambda_ = lambda_init\n    for i in range(max_iter):\n        r = y - f(x)\n        J = jacobian(x)\n        A = J.T @ J + lambda_ * np.eye(len(x))\n        g = J.T @ r\n        delta_x = np.linalg.solve(A, g)\n        new_x = x + delta_x\n        new_r = y - f(new_x)\n        \n        if np.linalg.norm(new_r) < tol:\n            break\n        \n        if np.linalg.norm(new_r) < np.linalg.norm(r):\n            x = new_x\n            lambda_ /= 10\n        else:\n            lambda_ *= 10\n    return x\n\n# Example usage:\n# Define your model function f and its Jacobian matrix jacobian\n# x0 is the initial guess, y is the observed data\n\n# def f(x): ...\n# def jacobian(x): ...\n\n# result = levenberg_marquardt(f, jacobian, x0, y)