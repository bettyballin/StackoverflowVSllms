def min_insertions_to_palindrome(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i][j - 1], dp[i + 1][j]) + 1\n\n    return dp[0][n - 1]\n\n# Examples\nprint(min_insertions_to_palindrome("ABBA"))  # Output: 0\nprint(min_insertions_to_palindrome("ABB"))   # Output: 1\nprint(min_insertions_to_palindrome("FAE"))   # Output: 2\nprint(min_insertions_to_palindrome("FOO"))   # Output: 1