def find_redundant_edges(graph):\n    def dfs(node, visited):\n        if node in visited:\n            return\n        visited.add(node)\n        for neighbor in list(graph[node]):\n            if neighbor in visited:\n                redundant_edges.append((node, neighbor))\n            else:\n                dfs(neighbor, visited)\n    \n    redundant_edges = []\n    for node in graph:\n        visited = set()\n        dfs(node, visited)\n    \n    return redundant_edges\n\ndef remove_redundant_edges(graph, redundant_edges):\n    for u, v in redundant_edges:\n        graph[u].remove(v)\n\n# Example graph\ngraph = {\n    'a': {'b', 'c', 'd', 'e'},\n    'b': {'f'},\n    'c': {'f'},\n    'd': {'f'},\n    'e': {'f'},\n    'f': set()\n}\n\nredundant_edges = find_redundant_edges(graph)\nprint("Redundant edges:", redundant_edges)\n\nremove_redundant_edges(graph, redundant_edges)\nprint("Graph after removing redundant edges:", graph)