def reduce_permutation(permutation):\n    import itertools\n\n    # Step 1: Identify runs and create a list of lists for runs\n    runs = []\n    current_run = [permutation[0]]\n    for i in range(1, len(permutation)):\n        if permutation[i] == permutation[i - 1] + 1:\n            current_run.append(permutation[i])\n        else:\n            runs.append(current_run)\n            current_run = [permutation[i]]\n    runs.append(current_run)\n\n    # Step 2: Replace runs with the head element and create a hash table\n    head_elements = [run[0] for run in runs]\n    run_mapping = {run[0]: run for run in runs}\n\n    # Step 3: Sort the head elements and create a map to their sorted indices\n    sorted_heads = sorted(head_elements)\n    index_map = {value: index + 1 for index, value in enumerate(sorted_heads)}\n\n    # Step 4: Replace the list with the new mapped values\n    reduced_permutation = [index_map[head] for head in head_elements]\n\n    return reduced_permutation, run_mapping\n\n# Example usage\npermutation = [3, 4, 1, 2, 5, 6]\nreduced_permutation, run_mapping = reduce_permutation(permutation)\nprint("Reduced Permutation:", reduced_permutation)\nprint("Run Mapping:", run_mapping)