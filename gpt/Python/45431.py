import mysql.connector\nfrom sqlalchemy import create_engine, MetaData, Table\n\ndef get_metadata(connection_string):\n    engine = create_engine(connection_string)\n    metadata = MetaData()\n    metadata.reflect(bind=engine)\n    return metadata\n\ndef compare_and_sync(db1_metadata, db2_metadata):\n    db1_tables = set(db1_metadata.tables.keys())\n    db2_tables = set(db2_metadata.tables.keys())\n\n    # Tables only in db1\n    for table in db1_tables - db2_tables:\n        print(f"CREATE TABLE {table} ...")\n        # Generate the SQL for creating table\n\n    # Tables only in db2\n    for table in db2_tables - db1_tables:\n        print(f"DROP TABLE {table};")\n        # Generate the SQL for dropping table\n\n    # Common tables, compare columns and indexes\n    for table in db1_tables & db2_tables:\n        db1_columns = db1_metadata.tables[table].columns\n        db2_columns = db2_metadata.tables[table].columns\n\n        # Columns in db1 but not in db2\n        for column in db1_columns:\n            if column not in db2_columns:\n                print(f"ALTER TABLE {table} ADD COLUMN {column} ...")\n                # Generate the SQL for adding column\n\n        # Columns in db2 but not in db1\n        for column in db2_columns:\n            if column not in db1_columns:\n                print(f"ALTER TABLE {table} DROP COLUMN {column};")\n                # Generate the SQL for dropping column\n\n        # Indexes, constraints comparison can be added similarly\n\ndef main():\n    db1_connection_string = 'mysql+mysqlconnector://user1:password1@hostname1/db1'\n    db2_connection_string = 'mysql+mysqlconnector://user2:password2@hostname2/db2'\n\n    db1_metadata = get_metadata(db1_connection_string)\n    db2_metadata = get_metadata(db2_connection_string)\n\n    compare_and_sync(db1_metadata, db2_metadata)\n\nif __name__ == "__main__":\n    main()