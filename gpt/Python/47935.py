from datetime import datetime, timedelta\n\ndef parse_time(time_str):\n    return datetime.strptime(time_str, '%H:%M:%S')\n\ndef format_time(time_obj):\n    return time_obj.strftime('%H:%M:%S')\n\ndef merge_timespans(timespans):\n    if not timespans:\n        return []\n\n    # Sort timespans by start time\n    timespans.sort(key=lambda x: parse_time(x[0]))\n\n    merged = [timespans[0]]\n\n    for current_start, current_end in timespans[1:]:\n        last_start, last_end = merged[-1]\n\n        # Check if current timespan overlaps or is adjacent to the last merged timespan\n        if parse_time(current_start) <= parse_time(last_end) + timedelta(seconds=1):\n            # Merge timespans\n            merged[-1] = (last_start, max(last_end, current_end, key=parse_time))\n        else:\n            merged.append((current_start, current_end))\n\n    return merged\n\n# Sample data\ntimespans = [\n    ('05:54:48', '10:00:13'),\n    ('09:26:45', '09:59:40'),\n    ('10:12:50', '10:27:25'),\n    ('10:13:12', '11:14:56'),\n    ('10:27:25', '10:27:31'),\n    ('10:27:39', '13:53:38'),\n    ('11:14:56', '11:15:03'),\n    ('11:15:30', '14:02:14'),\n    ('13:53:38', '13:53:43'),\n    ('14:02:14', '14:02:31')\n]\n\n# Merge the timespans\nmerged_timespans = merge_timespans(timespans)\n\n# Print the result\nfor start, end in merged_timespans:\n    print(f"{start} - {end}")