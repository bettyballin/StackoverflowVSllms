#!/usr/bin/python3\n\nimport asyncore, socket, struct\n\nclass packet_socket(asyncore.dispatcher):\n\n    def __init__(self):\n        asyncore.dispatcher.__init__(self)\n        self.create_socket(socket.AF_PACKET, socket.SOCK_RAW, socket.htons(0x0800))\n        self.buffer = b'0180C20034350012545900040060078910'\n        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_BINDTODEVICE, struct.pack("%ds" % (len("eth0")+1,), b"eth0"))\n        self.set_reuse_addr()\n\n    def handle_close(self):\n        self.close()\n\n    def handle_connect(self):\n        pass\n\n    def handle_read(self):\n        print("handle_read() called")\n        data, addr = self.recvfrom(1024)\n        print(data)\n        print(addr)\n\n    def readable(self):\n        print("Checking read flag")\n        return True\n\n    def writable(self):\n        return len(self.buffer) > 0\n\n    def handle_write(self):\n        print("Writing buffer data to the socket")\n        sent = self.sendto(self.buffer, ("eth0", 0))\n        self.buffer = self.buffer[sent:]\n\nc = packet_socket()\n\nasyncore.loop()