def is_cyclic_util(v, visited, parent, graph):\n    visited[v] = True\n\n    for i in graph[v]:\n        if not visited[i]:\n            if is_cyclic_util(i, visited, v, graph):\n                return True\n        elif parent != i:\n            return True\n\n    return False\n\ndef is_cyclic(graph, V):\n    visited = [False] * V\n\n    for i in range(V):\n        if not visited[i]:\n            if is_cyclic_util(i, visited, -1, graph):\n                return True\n                \n    return False\n\n# Example usage\ngraph = {0: [1, 2],\n         1: [0, 3],\n         2: [0],\n         3: [1]}\n\nV = 4\nprint(is_cyclic(graph, V))  # Output: False