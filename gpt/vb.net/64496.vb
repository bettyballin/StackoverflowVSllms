Sub InsertHTML()\n    Dim htmlContent As String\n    Dim wordRange As Range\n\n    ' Sample HTML content\n    htmlContent = "<p>I've inherited a project that stores basic HTML formatting (i.e. - <b>bold</b>, <i>italic</i> tags) in a database and writes it out to a Word document. This is my first Word automation assignment, so be gentle!</p>" & _\n                  "<p>Currently, there is a complicated function that runs after the document is complete that searches and replaces these tags. However, as this is run after the document is complete, any logic that is determined at run time (i.e. - insert page break here) can lead to disastrous results. For example, if I have a large chunk of bolded text, this bold text takes up more space and pushes the line break down to the next page, resulting in a mostly blank page.</p>" & _\n                  "<p>I believe the fix for this is to format the text as it comes from the database so the positioning logic will be correct. I don't want to call the complicated procedure multiple times as it is time consuming and our end users need this document as quickly as possible.</p>" & _\n                  "<p>Is there an easy way to write HTML formatted text to a Word document without needing to find and replace every supported tag? I would think that there would be something within Word that could handle this automatically. Thanks in advance if you can point me in the right direction.</p>"\n\n    ' Set the range where you want to insert the HTML content\n    Set wordRange = ActiveDocument.Range\n\n    ' Insert the HTML content\n    wordRange.InsertBefore "HTML Content Below:" & vbCrLf\n    wordRange.Collapse Direction:=wdCollapseEnd\n    wordRange.InsertXML "<w:document xmlns:w='http://schemas.openxmlformats.org/wordprocessingml/2006/main'>" & htmlContent & "</w:document>"\nEnd Sub