Imports System.Runtime.InteropServices\n\nPublic Class MyService\n    <DllImport("kernel32.dll", SetLastError:=True)>\n    Private Shared Function SetPriorityClass(ByVal hProcess As IntPtr, ByVal dwPriorityClass As UInteger) As Boolean\n    End Function\n\n    Private Const BELOW_NORMAL_PRIORITY_CLASS As UInteger = &H4000\n    Private Const IDLE_PRIORITY_CLASS As UInteger = &H40\n\n    Private indexingThread As Thread\n\n    Public Sub New()\n        InitializeComponent()\n    End Sub\n\n    Protected Overrides Sub OnStart(ByVal args() As String)\n        ' Start the indexing thread\n        indexingThread = New Thread(AddressOf IndexFolders)\n        indexingThread.Priority = ThreadPriority.Lowest\n        indexingThread.Start()\n\n        ' Set the process priority to below normal\n        Dim processHandle As IntPtr = Process.GetCurrentProcess().Handle\n        SetPriorityClass(processHandle, BELOW_NORMAL_PRIORITY_CLASS)\n    End Sub\n\n    Protected Overrides Sub OnStop()\n        If indexingThread IsNot Nothing AndAlso indexingThread.IsAlive Then\n            indexingThread.Abort()\n        End If\n    End Sub\n\n    Private Sub IndexFolders()\n        While True\n            ' Perform the indexing work here\n\n            ' Sleep for a bit to yield CPU time to other processes\n            Thread.Sleep(100)\n        End While\n    End Sub\nEnd Class