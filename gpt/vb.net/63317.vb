Public Function sendEmail(Optional ByVal msg As String = "") As Boolean\n    Dim mailSent As Boolean = False\n    Dim mail As Net.Mail.MailMessage = Nothing\n    Dim smtp As Net.Mail.SmtpClient = Nothing\n    Dim stream As IO.MemoryStream = Nothing\n\n    Try\n        mail = New Net.Mail.MailMessage\n        mail.From = New Net.Mail.MailAddress("myemail@myaddress.com")\n        mail.Priority = Net.Mail.MailPriority.High\n        mail.To.Add("1@1.1")\n        mail.To.Add("2@1.1")\n        mail.To.Add("3@1.1")\n        mail.Subject = "test"\n        mail.Body = msg\n\n        stream = createReport(Of IO.MemoryStream)()\n        mail.Attachments.Add(New Net.Mail.Attachment(stream, "Report.html", "text/html"))\n\n        smtp = New Net.Mail.SmtpClient("my.smtp.server")\n        AddHandler smtp.SendCompleted, AddressOf SendCompletedCallback\n        smtp.SendAsync(mail, mail)\n        mailSent = True\n    Catch ex As Exception\n        Debug.Print(ex.Message)\n    Finally\n        If stream IsNot Nothing Then\n            stream.Dispose()\n        End If\n        If mail IsNot Nothing Then\n            mail.Dispose()\n        End If\n        If smtp IsNot Nothing Then\n            smtp.Dispose()\n        End If\n    End Try\n\n    Return mailSent\nEnd Function\n\nPrivate Sub SendCompletedCallback(ByVal sender As Object, ByVal e As ComponentModel.AsyncCompletedEventArgs)\n    Try\n        Dim mail As Net.Mail.MailMessage = CType(e.UserState, Net.Mail.MailMessage)\n        If e.Cancelled Then\n            Throw New Exception("Send mail got cancelled")\n        ElseIf e.Error IsNot Nothing Then\n            Throw e.Error\n        End If\n        For i As Integer = mail.Attachments.Count - 1 To 0 Step -1\n            mail.Attachments(i).Dispose()\n        Next\n        mail.Dispose()\n        RemoveHandler CType(sender, Net.Mail.SmtpClient).SendCompleted, AddressOf SendCompletedCallback\n    Catch ex As Exception\n        Debug.Print(ex.Message)\n    End Try\nEnd Sub\n\nPublic Function createReport(Of dataType)() As dataType\n    Dim result As Object = Nothing\n    Dim ds As DataSet = Nothing\n    Dim xmlDoc As Xml.XmlDocument = Nothing\n    Dim xslTran As Xml.Xsl.XslCompiledTransform = Nothing\n    Dim sw As IO.StreamWriter = Nothing\n\n    Try\n        ds = New dsEventLog ' dataset\n        If IO.File.Exists("c:\myxmlfile") Then\n            ds.Tables(0).ReadXml("c:\myxmlfile")\n            For i As Integer = ds.Tables(0).Rows.Count - 1 To 0 Step -1\n                If CDate(ds.Tables(0).Rows(i).Item("LocalTime")) < Now.AddDays(-5) Then\n                    ds.Tables(0).Rows.RemoveAt(i)\n                End If\n            Next\n        End If\n\n        xmlDoc = New Xml.XmlDataDocument(ds)\n        xslTran = New Xml.Xsl.XslCompiledTransform\n        xslTran.Load("c:\myxslfile")\n\n        If GetType(dataType) Is GetType(String) Then\n            ' Doesn't matter\n        ElseIf GetType(dataType) Is GetType(IO.MemoryStream) Then\n            Dim stream = New IO.MemoryStream\n            sw = New IO.StreamWriter(stream)\n            xslTran.Transform(xmlDoc, Nothing, sw)\n            sw.Flush()\n            stream.Position = 0\n            result = stream\n        Else\n            Throw New Exception("Incorrect ""Of dataType"" used!")\n        End If\n    Catch ex As Exception\n        Debug.Print(ex.Message)\n    Finally\n        If sw IsNot Nothing Then\n            sw.Dispose()\n        End If\n        If ds IsNot Nothing Then\n            ds.Dispose()\n        End If\n    End Try\n\n    Return CType(result, dataType)\nEnd Functio