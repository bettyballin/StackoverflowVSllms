Public NotInheritable Class FormulaFactory\n    Private Shared ReadOnly Formulas As Dictionary(Of String, Type) = InitializeFormulas()\n\n    Private Shared Function InitializeFormulas() As Dictionary(Of String, Type)\n        Dim collection As New Dictionary(Of String, Type)\n        Dim formulaType = GetType(IFormula)\n        For Each t As Type In formulaType.Assembly.GetTypes()\n            If formulaType.IsAssignableFrom(t) AndAlso Not t.IsInterface Then\n                Dim xmlTagProperty = t.GetProperty("XMLTag", Reflection.BindingFlags.Public Or Reflection.BindingFlags.Static)\n                If xmlTagProperty IsNot Nothing Then\n                    Dim xmlTag = CType(xmlTagProperty.GetValue(Nothing, Nothing), String)\n                    collection.Add(xmlTag, t)\n                End If\n            End If\n        Next\n        Return collection\n    End Function\n\n    Public Shared Function ConstructFormula(xmlText As Xml.XmlNode) As IFormula\n        Dim xmlTag = xmlText.Name\n        If Formulas.ContainsKey(xmlTag) Then\n            Dim formulaType = Formulas(xmlTag)\n            Return CType(Activator.CreateInstance(formulaType, xmlText), IFormula)\n        Else\n            Throw New KeyNotFoundException($"Formula for XML tag '{xmlTag}' not found.")\n        End If\n    End Function\nEnd Class