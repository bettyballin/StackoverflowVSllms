Imports SharpDX\nImports SharpDX.Direct2D1\nImports SharpDX.DXGI\nImports SharpDX.Direct3D11\nImports SharpDX.Mathematics.Interop\n\nPublic Class MainForm\n    Private factory As Factory\n    Private renderTarget As RenderTarget\n    Private swapChain As SwapChain\n    Private device As SharpDX.Direct3D11.Device\n    Private context As DeviceContext\n\n    Public Sub New()\n        InitializeComponent()\n        InitializeGraphics()\n    End Sub\n\n    Private Sub InitializeGraphics()\n        ' Create device and swap chain\n        Dim description As New SwapChainDescription() With {\n            .BufferCount = 1,\n            .ModeDescription = New ModeDescription(ClientSize.Width, ClientSize.Height, New Rational(60, 1), Format.R8G8B8A8_UNorm),\n            .IsWindowed = True,\n            .OutputHandle = Handle,\n            .SampleDescription = New SampleDescription(1, 0),\n            .SwapEffect = SwapEffect.Discard,\n            .Usage = Usage.RenderTargetOutput\n        }\n\n        device = New SharpDX.Direct3D11.Device(DriverType.Hardware, DeviceCreationFlags.BgraSupport)\n        swapChain = New SwapChain(device.Factory, device, description)\n        context = device.ImmediateContext\n\n        ' Create render target\n        factory = New Factory()\n        Using backBuffer = swapChain.GetBackBuffer(Of Surface)(0)\n            renderTarget = New RenderTarget(factory, backBuffer, New RenderTargetProperties(New PixelFormat(Format.Unknown, AlphaMode.Premultiplied)))\n        End Using\n\n        ' Set anti-aliasing mode\n        renderTarget.AntialiasMode = AntialiasMode.PerPrimitive\n    End Sub\n\n    Private Sub Render()\n        renderTarget.BeginDraw()\n        renderTarget.Clear(New RawColor4(0, 0, 0, 1))\n\n        ' Draw particles\n        For i As Integer = 0 To 9999\n            Dim x As Single = CSng((ClientSize.Width * Rnd()))\n            Dim y As Single = CSng((ClientSize.Height * Rnd()))\n            Using brush As New SolidColorBrush(renderTarget, New RawColor4(Rnd(), Rnd(), Rnd(), 1))\n                renderTarget.FillEllipse(New EllipseGeometry(factory, New Ellipse(New RawVector2(x, y), 5, 5)), brush)\n            End Using\n        Next\n\n        renderTarget.EndDraw()\n        swapChain.Present(1, PresentFlags.None)\n    End Sub\n\n    Protected Overrides Sub OnPaint(e As PaintEventArgs)\n        MyBase.OnPaint(e)\n        Render()\n    End Sub\n\n    Protected Overrides Sub OnResize(e As EventArgs)\n        MyBase.OnResize(e)\n        ' Handle resizing\n        If swapChain IsNot Nothing Then\n            renderTarget.Dispose()\n            context.OutputMerger.SetRenderTargets(CType(Nothing, RenderTargetView))\n            swapChain.ResizeBuffers(0, ClientSize.Width, ClientSize.Height, Format.Unknown, SwapChainFlags.None)\n            Using backBuffer = swapChain.GetBackBuffer(Of Surface)(0)\n                renderTarget = New RenderTarget(factory, backBuffer, New RenderTargetProperties(New PixelFormat(Format.Unknown, AlphaMode.Premultiplied)))\n            End Using\n        End If\n    End Sub\n\n    Protected Overrides Sub Dispose(disposing As Boolean)\n        If disposing Then\n            renderTarget.Dispose()\n            swapChain.Dispose()\n            device.Dispose()\n            factory.Dispose()\n        End If\n        MyBase.Dispose(disposing)\n    End Sub\nEnd Class