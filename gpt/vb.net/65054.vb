Imports System.Linq.Expressions\nImports System.Reflection\n\nPublic Function GenerateQueryFromControls(ByVal controls As IEnumerable(Of Control), ByVal dbContext As YourDbContext) As IQueryable(Of YourEntity)\n    Dim query As IQueryable(Of YourEntity) = dbContext.YourEntities\n    Dim parameter As ParameterExpression = Expression.Parameter(GetType(YourEntity), "e")\n    \n    For Each ctrl As Control In controls\n        If Not String.IsNullOrEmpty(ctrl.Tag) Then\n            Dim fieldName As String = ctrl.Tag.ToString()\n            Dim fieldValue As Object = GetControlValue(ctrl)\n\n            If fieldValue IsNot Nothing Then\n                Dim propertyInfo As PropertyInfo = GetType(YourEntity).GetProperty(fieldName)\n                Dim member As MemberExpression = Expression.Property(parameter, propertyInfo)\n                Dim constant As ConstantExpression = Expression.Constant(fieldValue)\n                Dim comparison As BinaryExpression = Expression.Equal(member, constant)\n                Dim lambda As Expression(Of Func(Of YourEntity, Boolean)) = Expression.Lambda(Of Func(Of YourEntity, Boolean))(comparison, parameter)\n                query = query.Where(lambda)\n            End If\n        End If\n    Next\n\n    Return query\nEnd Function\n\nPrivate Function GetControlValue(ctrl As Control) As Object\n    If TypeOf ctrl Is TextBox Then\n        Return DirectCast(ctrl, TextBox).Text\n    ElseIf TypeOf ctrl Is RadioButton Then\n        Return DirectCast(ctrl, RadioButton).Checked\n    ElseIf TypeOf ctrl Is ComboBox Then\n        Return DirectCast(ctrl, ComboBox).SelectedItem\n    End If\n    ' Add other control types as needed\n    Return Nothing\nEnd Functio