Imports System.Runtime.InteropServices\n\nPublic Class MemoryReader\n\n    Private Declare Function OpenProcess Lib "kernel32" (ByVal dwDesiredAccess As Integer, ByVal bInheritHandle As Boolean, ByVal dwProcessId As Integer) As IntPtr\n    Private Declare Function ReadProcessMemory Lib "kernel32" (ByVal hProcess As IntPtr, ByVal lpBaseAddress As IntPtr, ByRef lpBuffer As Integer, ByVal dwSize As Integer, ByRef lpNumberOfBytesRead As Integer) As Boolean\n    Private Declare Function CloseHandle Lib "kernel32" (ByVal hObject As IntPtr) As Boolean\n\n    Private Const PROCESS_VM_READ As Integer = &H10\n    Private Const PROCESS_QUERY_INFORMATION As Integer = &H400\n\n    Public Function ReadMemory(ByVal processName As String, ByVal address As IntPtr) As Integer\n        Dim processes() As Process = Process.GetProcessesByName(processName)\n        If processes.Length = 0 Then\n            MessageBox.Show("Process not found!")\n            Return -1\n        End If\n\n        Dim proc As Process = processes(0)\n        Dim hProcess As IntPtr = OpenProcess(PROCESS_VM_READ Or PROCESS_QUERY_INFORMATION, False, proc.Id)\n        If hProcess = IntPtr.Zero Then\n            MessageBox.Show("Failed to open process!")\n            Return -1\n        End If\n\n        Dim valueInMemory As Integer = 0\n        Dim bytesRead As Integer = 0\n\n        If Not ReadProcessMemory(hProcess, address, valueInMemory, 4, bytesRead) Then\n            Dim lastError As Integer = Marshal.GetLastWin32Error()\n            MessageBox.Show("ReadProcessMemory failed with error code: " & lastError.ToString())\n            CloseHandle(hProcess)\n            Return -1\n        End If\n\n        CloseHandle(hProcess)\n        Return valueInMemory\n    End Function\n\nEnd Class