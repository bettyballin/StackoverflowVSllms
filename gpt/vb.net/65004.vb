Public Class MyClass\n    Implements IDisposable\n\n    ' To detect redundant calls\n    Private disposedValue As Boolean\n\n    ' IDisposable\n    Protected Overridable Sub Dispose(disposing As Boolean)\n        If Not disposedValue Then\n            If disposing Then\n                ' TODO: dispose managed state (managed objects).\n            End If\n\n            ' TODO: free unmanaged resources (unmanaged objects) and override Finalize() below.\n            ' TODO: set large fields to null.\n        End If\n        disposedValue = True\n    End Sub\n\n    ' Override Finalize() only if Dispose(disposing As Boolean) has code to free unmanaged resources.\n    Protected Overrides Sub Finalize()\n        ' Do not change this code. Put cleanup code in Dispose(disposing As Boolean) above.\n        Dispose(False)\n        MyBase.Finalize()\n    End Sub\n\n    ' This code added by Visual Basic to correctly implement the disposable pattern.\n    Public Sub Dispose() Implements IDisposable.Dispose\n        ' Do not change this code. Put cleanup code in Dispose(disposing As Boolean) above.\n        Dispose(True)\n        ' Uncomment the following line if Finalize() is overridden above.\n        GC.SuppressFinalize(Me)\n    End Sub\nEnd Class