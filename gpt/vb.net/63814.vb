Imports System.IO\nImports System.Data.OleDb\n\nPrivate Sub cmdBackup_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdBackup.Click\n    ' Define the backup dialog properties\n    BackupDialogDB.DefaultExt = ".mdb"\n    BackupDialogDB.InitialDirectory = "c:\"\n\n    ' Show the dialog and check if the user clicked OK\n    If BackupDialogDB.ShowDialog() = Windows.Forms.DialogResult.OK Then\n        Try\n            ' Define the source and destination database files\n            Dim sDBFile As String = Path.Combine(Application.StartupPath, "VFMS_DB.mdb")\n            Dim sBackUpFile As String = BackupDialogDB.FileName\n\n            ' First check if the file you want to compact exists\n            If File.Exists(sDBFile) Then\n                ' Close any open connections to the database\n                CloseDatabaseConnections(sDBFile)\n\n                ' Check if the backup file already exists\n                If Not File.Exists(sBackUpFile) Then\n                    File.Copy(sDBFile, sBackUpFile)\n                Else\n                    File.Delete(sBackUpFile)\n                    File.Copy(sDBFile, sBackUpFile)\n                End If\n\n                ' Notify the user about the successful backup\n                MessageBox.Show("The database was successfully backed up to: " + sBackUpFile, "Database Backup", MessageBoxButtons.OK, MessageBoxIcon.Information)\n\n            Else\n                ' Notify the user if the source database does not exist\n                MessageBox.Show("There is no database to backup. Please restore from a backup", "Database Backup Error", MessageBoxButtons.OK, MessageBoxIcon.Error)\n            End If\n\n        Catch ex As Exception\n            ' Display any exceptions that occur during the process\n            MsgBox(ex.Message)\n        End Try\n    End If\nEnd Sub\n\nPrivate Sub CloseDatabaseConnections(ByVal dbFileName As String)\n    Try\n        ' Close any open connections to the database\n        ' This example assumes you're using OleDb; adjust accordingly if using a different provider\n        Dim connString As String = $"Provider=Microsoft.Jet.OLEDB.4.0;Data Source={dbFileName};"\n        Using connection As New OleDbConnection(connString)\n            connection.Open()\n            ' Execute a dummy query to ensure the connection opens and closes properly\n            Dim command As New OleDbCommand("SELECT 1", connection)\n            command.ExecuteNonQuery()\n        End Using\n    Catch ex As Exception\n        ' Handle any exceptions that occur while closing connections\n        MsgBox("Error closing database connections: " & ex.Message)\n    End Try\nEnd Sub