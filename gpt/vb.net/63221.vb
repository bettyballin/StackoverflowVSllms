Imports System\nImports NAudio.Wave\nImports NAudio.Wave.SampleProviders\n\nModule Program\n    Sub Main()\n        Dim sampleRate As Integer = 44100\n        Dim channels As Integer = 1\n\n        Dim waveOut As New WaveOutEvent()\n        Dim sineWaveProvider As New SineWaveProvider32()\n        sineWaveProvider.SetWaveFormat(sampleRate, channels) ' 44.1kHz mono\n        sineWaveProvider.Frequency = 1000 ' 1kHz\n        sineWaveProvider.Amplitude = 0.25F ' 25% of full scale\n\n        waveOut.Init(sineWaveProvider)\n        waveOut.Play()\n\n        Console.WriteLine("Playing... Press any key to stop.")\n        Console.ReadKey()\n\n        waveOut.Stop()\n    End Sub\n\n    Public Class SineWaveProvider32\n        Inherits WaveProvider32\n\n        Private sample As Integer\n        Public Property Frequency As Single\n        Public Property Amplitude As Single\n\n        Public Sub New()\n            Frequency = 1000\n            Amplitude = 0.25F\n        End Sub\n\n        Public Overrides Function Read(buffer As Single(), offset As Integer, sampleCount As Integer) As Integer\n            Dim sampleRate As Integer = WaveFormat.SampleRate\n            For n As Integer = 0 To sampleCount - 1\n                buffer(n + offset) = CSng(Amplitude * Math.Sin((2 * Math.PI * sample * Frequency) / sampleRate))\n                sample += 1\n                If sample >= sampleRate Then sample = 0\n            Next\n            Return sampleCount\n        End Function\n    End Class\nEnd Module