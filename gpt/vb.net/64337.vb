Imports System.Net.NetworkInformation\nImports System.Text\n\nPublic Class NetworkDiagnostics\n\n    Public Function GetPacketLoss(host As String, pingCount As Integer, timeout As Integer) As Double\n        Dim ping As New Ping()\n        Dim pingOptions As New PingOptions()\n        Dim buffer As Byte() = Encoding.ASCII.GetBytes(New String("a"c, 32))\n        Dim successfulPings As Integer = 0\n\n        For i As Integer = 1 To pingCount\n            Dim reply As PingReply = ping.Send(host, timeout, buffer, pingOptions)\n            If reply.Status = IPStatus.Success Then\n                successfulPings += 1\n            End If\n        Next\n\n        Return ((pingCount - successfulPings) / pingCount) * 100\n    End Function\n\n    Public Sub TraceRoute(host As String, maxHops As Integer, timeout As Integer)\n        Dim ping As New Ping()\n        Dim pingOptions As New PingOptions(1, True)\n        Dim buffer As Byte() = Encoding.ASCII.GetBytes(New String("a"c, 32))\n        Dim reply As PingReply = Nothing\n\n        Console.WriteLine("Tracing route to " & host & " over a maximum of " & maxHops & " hops:")\n\n        For ttl As Integer = 1 To maxHops\n            pingOptions.Ttl = ttl\n            reply = ping.Send(host, timeout, buffer, pingOptions)\n\n            If reply.Status = IPStatus.Success OrElse reply.Status = IPStatus.TtlExpired Then\n                Console.WriteLine(ttl & " " & reply.Address.ToString() & " - " & reply.Status.ToString())\n            Else\n                Console.WriteLine(ttl & " * * * Request timed out.")\n            End If\n\n            If reply.Status = IPStatus.Success Then\n                Exit For\n            End If\n        Next\n    End Sub\n\nEnd Class