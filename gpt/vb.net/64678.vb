Imports System\nImports System.Runtime.InteropServices\nImports System.Security.Principal\n\nPublic Class Impersonation\n    Private _tokenHandle As IntPtr = IntPtr.Zero\n    Private _dupeTokenHandle As IntPtr = IntPtr.Zero\n    Private _impersonatedUser As WindowsImpersonationContext\n    Private _impersonating As Boolean = False\n\n    <DllImport("advapi32.dll", SetLastError:=True, CharSet:=CharSet.Auto)>\n    Private Shared Function LogonUser(\n        ByVal lpszUsername As String,\n        ByVal lpszDomain As String,\n        ByVal lpszPassword As String,\n        ByVal dwLogonType As Integer,\n        ByVal dwLogonProvider As Integer,\n        ByRef phToken As IntPtr) As Boolean\n    End Function\n\n    <DllImport("advapi32.dll", CharSet:=CharSet.Auto, SetLastError:=True)>\n    Private Shared Function DuplicateToken(\n        ByVal ExistingTokenHandle As IntPtr,\n        ByVal SECURITY_IMPERSONATION_LEVEL As Integer,\n        ByRef DuplicateTokenHandle As IntPtr) As Boolean\n    End Function\n\n    <DllImport("kernel32.dll", CharSet:=CharSet.Auto)>\n    Private Shared Function CloseHandle(ByVal handle As IntPtr) As Boolean\n    End Function\n\n    Public Sub BeginImpersonation(username As String, domain As String, password As String)\n        Const LOGON32_PROVIDER_DEFAULT As Integer = 0\n        Const LOGON32_LOGON_INTERACTIVE As Integer = 2\n        Const SecurityImpersonation As Integer = 2\n\n        Dim win32ErrorNumber As Integer\n\n        _tokenHandle = IntPtr.Zero\n        _dupeTokenHandle = IntPtr.Zero\n\n        If Not LogonUser(username, domain, password, LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT, _tokenHandle) Then\n            win32ErrorNumber = Marshal.GetLastWin32Error()\n            Throw New ApplicationException($"LogonUser failed with error code: {win32ErrorNumber}")\n        End If\n\n        If Not DuplicateToken(_tokenHandle, SecurityImpersonation, _dupeTokenHandle) Then\n            win32ErrorNumber = Marshal.GetLastWin32Error()\n            CloseHandle(_tokenHandle)\n            Throw New ApplicationException($"DuplicateToken failed with error code: {win32ErrorNumber}")\n        End If\n\n        Dim newId As New WindowsIdentity(_dupeTokenHandle)\n        _impersonatedUser = newId.Impersonate()\n        _impersonating = True\n    End Sub\n\n    Public Sub EndImpersonation()\n        If _impersonating Then\n            _impersonatedUser.Undo()\n            _impersonating = False\n            CloseHandle(_tokenHandle)\n            CloseHandle(_dupeTokenHandle)\n        End If\n    End Sub\nEnd Class