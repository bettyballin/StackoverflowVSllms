Imports System.Reflection\nImports System.Reflection.Emit\n\nPublic Class DynamicProxy\n    Public Shared Function CreateInterfaceProxy(Of TInterface As Class)(ByVal target As Object) As TInterface\n        Dim interfaceType As Type = GetType(TInterface)\n\n        Dim dynamicAssemblyName As New AssemblyName("DynamicProxyAssembly")\n        Dim dynamicAssembly As AssemblyBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly(dynamicAssemblyName, AssemblyBuilderAccess.Run)\n        Dim dynamicModule As ModuleBuilder = dynamicAssembly.DefineDynamicModule("DynamicProxyModule")\n\n        Dim proxyTypeName As String = "Dynamic" & interfaceType.Name & "Proxy"\n        Dim proxyType As TypeBuilder = dynamicModule.DefineType(proxyTypeName, TypeAttributes.Public Or TypeAttributes.Class)\n        proxyType.AddInterfaceImplementation(interfaceType)\n\n        Dim targetField As FieldBuilder = proxyType.DefineField("_target", GetType(Object), FieldAttributes.Private)\n\n        ' Create a constructor that takes the target object\n        Dim constructor As ConstructorBuilder = proxyType.DefineConstructor(MethodAttributes.Public, CallingConventions.Standard, New Type() {GetType(Object)})\n        Dim constructorIL As ILGenerator = constructor.GetILGenerator()\n        constructorIL.Emit(OpCodes.Ldarg_0)\n        constructorIL.Emit(OpCodes.Call, GetType(Object).GetConstructor(Type.EmptyTypes))\n        constructorIL.Emit(OpCodes.Ldarg_0)\n        constructorIL.Emit(OpCodes.Ldarg_1)\n        constructorIL.Emit(OpCodes.Stfld, targetField)\n        constructorIL.Emit(OpCodes.Ret)\n\n        ' Implement the interface methods\n        For Each method As MethodInfo In interfaceType.GetMethods()\n            Dim parameters As ParameterInfo() = method.GetParameters()\n            Dim parameterTypes As Type() = parameters.Select(Function(p) p.ParameterType).ToArray()\n\n            Dim methodBuilder As MethodBuilder = proxyType.DefineMethod(method.Name, MethodAttributes.Public Or MethodAttributes.Virtual, method.ReturnType, parameterTypes)\n            Dim methodIL As ILGenerator = methodBuilder.GetILGenerator()\n\n            Dim targetMethod As MethodInfo = target.GetType().GetMethod(method.Name, parameterTypes)\n            If targetMethod IsNot Nothing Then\n                methodIL.Emit(OpCodes.Ldarg_0)\n                methodIL.Emit(OpCodes.Ldfld, targetField)\n                For i As Integer = 1 To parameters.Length\n                    methodIL.Emit(OpCodes.Ldarg, i)\n                Next\n                methodIL.Emit(OpCodes.Callvirt, targetMethod)\n                methodIL.Emit(OpCodes.Ret)\n            Else\n                methodIL.Emit(OpCodes.Newobj, GetType(NotImplementedException).GetConstructor(Type.EmptyTypes))\n                methodIL.Emit(OpCodes.Throw)\n            End If\n\n            proxyType.DefineMethodOverride(methodBuilder, method)\n        Next\n\n        Dim proxyTypeInfo As Type = proxyType.CreateType()\n        Return Activator.CreateInstance(proxyTypeInfo, target)\n    End Function\nEnd Class