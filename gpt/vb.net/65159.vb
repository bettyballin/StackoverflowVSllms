Public Class MyClass(Of BaseType)\n\n    Private data As BaseType\n\n    ' Constructor\n    Public Sub New(value As BaseType)\n        data = value\n    End Sub\n\n    ' Implicit conversion from BaseType to MyClass\n    Public Shared Widening Operator CType(ByVal source As BaseType) As MyClass(Of BaseType)\n        Return New MyClass(Of BaseType)(source)\n    End Operator\n\n    ' Implicit conversion from MyClass to BaseType\n    Public Shared Widening Operator CType(ByVal source As MyClass(Of BaseType)) As BaseType\n        Return source.data\n    End Operator\n\n    ' Equality operator between two instances of MyClass\n    Public Shared Operator =(ByVal obj1 As MyClass(Of BaseType), ByVal obj2 As MyClass(Of BaseType)) As Boolean\n        Return obj1.data.Equals(obj2.data)\n    End Operator\n\n    ' Inequality operator between two instances of MyClass\n    Public Shared Operator <>(ByVal obj1 As MyClass(Of BaseType), ByVal obj2 As MyClass(Of BaseType)) As Boolean\n        Return Not obj1.data.Equals(obj2.data)\n    End Operator\n\n    ' Overriding Equals method for object comparison\n    Public Overrides Function Equals(obj As Object) As Boolean\n        If TypeOf obj Is MyClass(Of BaseType) Then\n            Return Me.data.Equals(CType(obj, MyClass(Of BaseType)).data)\n        End If\n        Return False\n    End Function\n\n    ' Overriding GetHashCode method\n    Public Overrides Function GetHashCode() As Integer\n        Return data.GetHashCode()\n    End Function\n\nEnd Class