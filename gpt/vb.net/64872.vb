Imports System.Data.SqlClient\n\nPublic Class DataAccess\n\n    ' Function to get the connection string for the current tenant\n    Private Function GetConnectionStringForTenant(tenantId As String) As String\n        ' Fetch the connection string from a secure store or configuration based on tenantId\n        ' Example hardcoded connection strings:\n        Select Case tenantId\n            Case "Tenant1"\n                Return "Data Source=Server1;Initial Catalog=Database1;User ID=User1;Password=Password1"\n            Case "Tenant2"\n                Return "Data Source=Server2;Initial Catalog=Database2;User ID=User2;Password=Password2"\n            Case Else\n                Throw New Exception("Invalid tenant ID")\n        End Select\n    End Function\n\n    ' Example function to fill a DataSet with a dynamic connection string\n    Public Function GetDataSetForTenant(tenantId As String) As DataSet\n        Dim connectionString As String = GetConnectionStringForTenant(tenantId)\n        Dim ds As New DataSet()\n\n        Using connection As New SqlConnection(connectionString)\n            Dim adapter As New SqlDataAdapter("SELECT * FROM SomeTable", connection)\n            adapter.Fill(ds)\n        End Using\n\n        Return ds\n    End Function\n\n    ' Example function to use a DataAdapter with a dynamic connection string\n    Public Sub LoadDataForTenant(tenantId As String, ByRef dataAdapter As SqlDataAdapter)\n        Dim connectionString As String = GetConnectionStringForTenant(tenantId)\n\n        Using connection As New SqlConnection(connectionString)\n            dataAdapter.SelectCommand.Connection = connection\n            Dim ds As New DataSet()\n            dataAdapter.Fill(ds)\n            ' Process the dataset as needed\n        End Using\n    End Sub\n\nEnd Class