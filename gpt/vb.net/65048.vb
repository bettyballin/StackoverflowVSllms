Imports System.Threading\n\nPublic Class Form1\n\n    Private syncContext As SynchronizationContext\n\n    Public Sub New()\n        InitializeComponent()\n        ' Capture the SynchronizationContext of the main UI thread\n        syncContext = SynchronizationContext.Current\n    End Sub\n\n    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load\n        ' Example event subscription\n        AddHandler SomeSharedClass.SomeEvent, AddressOf EventHandler\n    End Sub\n\n    Private Sub EventHandler()\n        ' Post the event handling to the UI thread\n        syncContext.Post(AddressOf HandleEvent, Nothing)\n    End Sub\n\n    Private Sub HandleEvent(state As Object)\n        ' Perform UI updates here\n        If Me.InvokeRequired Then\n            Me.Invoke(New Action(AddressOf HandleEvent), state)\n        Else\n            ' Update the notification icon or other UI elements\n            NotifyIcon1.BalloonTipText = "Event received!"\n            NotifyIcon1.ShowBalloonTip(1000)\n        End If\n    End Sub\n\nEnd Class\n\nPublic Class SomeSharedClass\n    Public Shared Event SomeEvent As Action\n\n    Public Shared Sub RaiseEvent()\n        RaiseEvent SomeEvent()\n    End Sub\nEnd Class