Imports System.DirectoryServices\n\nModule Module1\n    Sub Main()\n        Dim groupPath As String = "LDAP://CN=YourGroupName,OU=Groups,DC=YourDomain,DC=com"\n        Dim userPath As String = "LDAP://CN=YourUserName,OU=Users,DC=YourDomain,DC=com"\n\n        Dim ContainerGroup As New DirectoryEntry(groupPath)\n        Dim UserToCheckFor As New DirectoryEntry(userPath)\n\n        Dim userSid As String = GetUserSid(UserToCheckFor)\n\n        If (Not String.IsNullOrEmpty(userSid)) Then\n            Dim DSearcher As New DirectorySearcher(ContainerGroup)\n            DSearcher.Filter = $"(member={userSid})"\n            DSearcher.SearchScope = SearchScope.Base\n            DSearcher.PropertiesToLoad.Add("member")\n\n            Dim result As SearchResult = DSearcher.FindOne()\n\n            If result IsNot Nothing Then\n                Console.WriteLine("User is a member of the group.")\n            Else\n                Console.WriteLine("User is not a member of the group.")\n            End If\n        Else\n            Console.WriteLine("Unable to determine the user's SID.")\n        End If\n    End Sub\n\n    Function GetUserSid(user As DirectoryEntry) As String\n        Try\n            user.RefreshCache(New String() {"objectSid"})\n            Dim sidBytes As Byte() = CType(user.Properties("objectSid")(0), Byte())\n            Dim sid As New Security.Principal.SecurityIdentifier(sidBytes, 0)\n            Return sid.ToString()\n        Catch ex As Exception\n            Console.WriteLine($"Error retrieving user SID: {ex.Message}")\n            Return String.Empty\n        End Try\n    End Function\nEnd Module