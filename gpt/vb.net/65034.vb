Private Sub HighLight(ByVal All As Boolean)\n    Dim RegExp As System.Text.RegularExpressions.MatchCollection\n    Dim RegExpMatch As System.Text.RegularExpressions.Match\n    Dim FirstCharIndex As Integer = rtbMain.GetFirstCharIndexOfCurrentLine\n    Dim CurrentLine As Integer = rtbMain.GetLineFromCharIndex(FirstCharIndex)\n    Dim CurrentLineText As String = rtbMain.Lines(CurrentLine)\n    Dim CharsToCurrentLine As Integer = rtbMain.SelectionStart\n    Dim PassNumber As Integer = 0\n\n    LockWindowUpdate(Me.Handle.ToInt32) ' Let's lock the window so it doesn't scroll all crazy.\n    \n    If All = True Then ' Highlight everything.\n        For Each pass In frmColors.lbRegExps.Items\n            RegExp = System.Text.RegularExpressions.Regex.Matches(LCase(rtbMain.Text), LCase(pass))\n            For Each RegExpMatch In RegExp\n                rtbMain.Select(RegExpMatch.Index, RegExpMatch.Length)\n                rtbMain.SelectionColor = ColorTranslator.FromHtml(frmColors.lbHexColors.Items(PassNumber))\n            Next\n            PassNumber += 1\n        Next\n    Else ' Highlight just that row.\n        Dim lineStartIndex As Integer = rtbMain.GetFirstCharIndexFromLine(CurrentLine)\n        For Each pass In frmColors.lbRegExps.Items\n            RegExp = System.Text.RegularExpressions.Regex.Matches(LCase(CurrentLineText), LCase(pass))\n            For Each RegExpMatch In RegExp\n                rtbMain.Select(lineStartIndex + RegExpMatch.Index, RegExpMatch.Length)\n                rtbMain.SelectionColor = ColorTranslator.FromHtml(frmColors.lbHexColors.Items(PassNumber))\n            Next\n            PassNumber += 1\n        Next\n    End If\n\n    rtbMain.Select(CharsToCurrentLine, 0) ' Reset colors and position and then unlock drawing.\n    rtbMain.SelectionColor = Color.Black\n    LockWindowUpdate(0)\nEnd Sub