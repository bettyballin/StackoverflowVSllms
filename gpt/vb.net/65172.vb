Imports System.Runtime.InteropServices\n\n    <StructLayout(LayoutKind.Sequential)>\n    Public Structure InnerStruct\n        Public x As Integer\n        Public y As Single\n    End Structure\n\n    <StructLayout(LayoutKind.Explicit)>\n    Public Structure InnerUnion\n        <FieldOffset(0)>\n        Public a As Integer\n        <FieldOffset(0)>\n        Public b As Single\n    End Structure\n\n    <StructLayout(LayoutKind.Sequential)>\n    Public Structure MainStruct\n        Public innerStruct As IntPtr\n        Public innerUnion As IntPtr\n    End Structure\n\n    Public Class NativeMethods\n        <DllImport("example.dll", CallingConvention:=CallingConvention.Cdecl)>\n        Public Shared Sub ProcessMainStruct(ByRef mainStruct As MainStruct)\n        End Sub\n    End Class\n\n    Public Sub CallDllFunction()\n        Dim innerStruct As New InnerStruct With {.x = 10, .y = 20.5F}\n        Dim innerUnion As New InnerUnion With {.a = 5}\n\n        Dim innerStructPtr As IntPtr = Marshal.AllocHGlobal(Marshal.SizeOf(innerStruct))\n        Dim innerUnionPtr As IntPtr = Marshal.AllocHGlobal(Marshal.SizeOf(innerUnion))\n\n        Try\n            Marshal.StructureToPtr(innerStruct, innerStructPtr, False)\n            Marshal.StructureToPtr(innerUnion, innerUnionPtr, False)\n\n            Dim mainStruct As New MainStruct With {\n                .innerStruct = innerStructPtr,\n                .innerUnion = innerUnionPtr\n            }\n\n            NativeMethods.ProcessMainStruct(mainStruct)\n        Finally\n            Marshal.FreeHGlobal(innerStructPtr)\n            Marshal.FreeHGlobal(innerUnionPtr)\n        End Try\n    End Sub