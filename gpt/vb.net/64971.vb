Imports System.Collections\nImports System.Threading\n\nModule Module1\n\n    Public Class RingBuffer\n        Private m_Capacity As Integer\n        Private m_Queue As Queue\n        Private m_ProducerFinished As Boolean = False\n\n        Public Sub New(ByVal Capacity As Integer)\n            m_Capacity = Capacity\n            m_Queue = Queue.Synchronized(New Queue(Capacity))\n        End Sub\n\n        Public Sub Enqueue(ByVal value As Object)\n            SyncLock m_Queue.SyncRoot\n                While m_Queue.Count = m_Capacity\n                    Monitor.Wait(m_Queue.SyncRoot)\n                End While\n\n                m_Queue.Enqueue(value)\n                Monitor.PulseAll(m_Queue.SyncRoot)\n            End SyncLock\n        End Sub\n\n        Public Function Dequeue() As Object\n            SyncLock m_Queue.SyncRoot\n                While m_Queue.Count = 0\n                    If m_ProducerFinished Then\n                        Return Nothing ' Signal to terminate the consumer\n                    End If\n                    Monitor.Wait(m_Queue.SyncRoot)\n                End While\n\n                Dim item As Object = m_Queue.Dequeue()\n                Monitor.PulseAll(m_Queue.SyncRoot)\n                Return item\n            End SyncLock\n        End Function\n\n        Public Sub ProducerFinished()\n            SyncLock m_Queue.SyncRoot\n                m_ProducerFinished = True\n                Monitor.PulseAll(m_Queue.SyncRoot)\n            End SyncLock\n        End Sub\n    End Class\n\n    Public Sub Producer(ByVal buffer As RingBuffer)\n        For i As Integer = 1 To 10\n            buffer.Enqueue(i)\n            Console.WriteLine("Produced: " & i)\n            Thread.Sleep(100) ' Simulate work\n        Next\n        buffer.ProducerFinished()\n    End Sub\n\n    Public Sub Consumer(ByVal buffer As RingBuffer)\n        While True\n            Dim item As Object = buffer.Dequeue()\n            If item Is Nothing Then\n                Exit While ' Exit the loop if producer is finished and no items are left\n            End If\n            Console.WriteLine("Consumed: " & item)\n            Thread.Sleep(150) ' Simulate work\n        End While\n    End Sub\n\n    Sub Main()\n        Dim buffer As New RingBuffer(5)\n        Dim producerThread As New Thread(Sub() Producer(buffer))\n        Dim consumerThread As New Thread(Sub() Consumer(buffer))\n\n        producerThread.Start()\n        consumerThread.Start()\n\n        producerThread.Join()\n        consumerThread.Join()\n\n        Console.WriteLine("All done!")\n    End Sub\n\nEnd Module