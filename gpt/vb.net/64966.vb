Imports System\nImports System.Runtime.InteropServices\nImports System.Text\n\nPublic Class VolumeSerialNumber\n    <DllImport("kernel32.dll", SetLastError:=True, CharSet:=CharSet.Auto)>\n    Private Shared Function GetVolumeInformation(\n        ByVal rootPathName As String,\n        ByVal volumeNameBuffer As StringBuilder,\n        ByVal volumeNameSize As Integer,\n        ByRef volumeSerialNumber As UInt32,\n        ByRef maximumComponentLength As UInt32,\n        ByRef fileSystemFlags As UInt32,\n        ByVal fileSystemNameBuffer As StringBuilder,\n        ByVal nFileSystemNameSize As Integer) As Boolean\n    End Function\n\n    Public Shared Function DriveSN(ByVal DriveLetter As String) As String\n        Dim serialNumber As UInt32 = 0\n        Dim maxComponentLength As UInt32 = 0\n        Dim fileSystemFlags As UInt32 = 0\n        Dim volumeName As New StringBuilder(256)\n        Dim fileSystemName As New StringBuilder(256)\n\n        If GetVolumeInformation(DriveLetter & ":\", volumeName, volumeName.Capacity, serialNumber, maxComponentLength, fileSystemFlags, fileSystemName, fileSystemName.Capacity) Then\n            Return serialNumber.ToString("X4").Insert(4, "-")\n        Else\n            Throw New System.ComponentModel.Win32Exception(Marshal.GetLastWin32Error())\n        End If\n    End Function\n\n    Private Shared msig As String = Nothing\n\n    Public Shared Function MachineSignature() As String\n        If msig Is Nothing Then\n            Dim list As New List(Of String)\n            For Each d As DriveInfo In DriveInfo.GetDrives()\n                If (d.IsReady) Then\n                    list.Add(DriveSN(d.Name.Substring(0, 2)))\n                End If\n            Next\n            msig = String.Join(" & ", list.ToArray())\n        End If\n        Return msig\n    End Function\nEnd Class