Dim myControlStyle As New Style(GetType(MyControl))\nmyControlStyle.BasedOn = TryCast(Application.Current.FindResource(GetType(ContentControl)), Style)\n\nDim template As New ControlTemplate(GetType(MyControl))\n\nDim borderFactory As New FrameworkElementFactory(GetType(Border))\nborderFactory.Name = "background"\nborderFactory.SetValue(Grid.RowSpanProperty, 3)\nborderFactory.SetValue(UIElement.OpacityProperty, 0.9)\nborderFactory.SetBinding(Border.CornerRadiusProperty, New Binding("CornerRadius") With {\n    .RelativeSource = New RelativeSource(RelativeSourceMode.TemplatedParent)\n})\n\nDim radialGradientBrush As New RadialGradientBrush()\n\nDim startColorGradientStop As New GradientStop()\nstartColorGradientStop.Offset = 1.0\nBindingOperations.SetBinding(startColorGradientStop, GradientStop.ColorProperty, New Binding("StartColor") With {\n    .RelativeSource = New RelativeSource(RelativeSourceMode.TemplatedParent),\n    .Mode = BindingMode.OneWay\n})\nradialGradientBrush.GradientStops.Add(startColorGradientStop)\n\nDim endColorGradientStop As New GradientStop()\nendColorGradientStop.Offset = 0.462\nBindingOperations.SetBinding(endColorGradientStop, GradientStop.ColorProperty, New Binding("EndColor") With {\n    .RelativeSource = New RelativeSource(RelativeSourceMode.TemplatedParent),\n    .Mode = BindingMode.OneWay\n})\nradialGradientBrush.GradientStops.Add(endColorGradientStop)\n\nborderFactory.SetValue(Border.BackgroundProperty, radialGradientBrush)\n\n' Add the border to the template visual tree\ntemplate.VisualTree = borderFactory\n\nmyControlStyle.Setters.Add(New Setter(Control.TemplateProperty, template))\n\n' Apply the style to your custom control\nMe.Style = myControlStyle