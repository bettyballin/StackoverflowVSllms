Imports System\nImports System.Collections.Generic\nImports System.Linq\n\nNamespace NerdDinner.Models\n    <Bind(Include:="Title,Description,EventDate,Address,Country,ContactPhone,Latitude,Longitude")> _\n    Partial Public Class Dinner\n\n        Public Function IsHostedBy(userName As String) As Boolean\n            Return HostedBy.Equals(userName, StringComparison.InvariantCultureIgnoreCase)\n        End Function\n\n        Public Function IsUserRegistered(userName As String) As Boolean\n            Return RSVPs.Any(Function(r) r.AttendeeName.Equals(userName, StringComparison.InvariantCultureIgnoreCase))\n        End Function\n\n        Public ReadOnly Property IsValid() As Boolean\n            Get\n                Return (GetRuleViolations().Count() = 0)\n            End Get\n        End Property\n\n        Public Iterator Function GetRuleViolations() As IEnumerable(Of RuleViolation)\n            If String.IsNullOrEmpty(Title) Then\n                Yield New RuleViolation("Title is required", "Title")\n            End If\n\n            If String.IsNullOrEmpty(Description) Then\n                Yield New RuleViolation("Description is required", "Description")\n            End If\n\n            If String.IsNullOrEmpty(HostedBy) Then\n                Yield New RuleViolation("HostedBy is required", "HostedBy")\n            End If\n\n            If String.IsNullOrEmpty(Address) Then\n                Yield New RuleViolation("Address is required", "Address")\n            End If\n\n            If String.IsNullOrEmpty(Country) Then\n                Yield New RuleViolation("Country is required", "Country")\n            End If\n\n            If String.IsNullOrEmpty(ContactPhone) Then\n                Yield New RuleViolation("Phone# is required", "ContactPhone")\n            End If\n\n            If Not PhoneValidator.IsValidNumber(ContactPhone, Country) Then\n                Yield New RuleViolation("Phone# does not match country", "ContactPhone")\n            End If\n        End Function\n\n        Partial Private Sub OnValidate(action As ChangeAction)\n            If Not IsValid Then\n                Throw New ApplicationException("Rule violations prevent saving")\n            End If\n        End Sub\n\n    End Class\n\n    Public Class RuleViolation\n        Public Property ErrorMessage As String\n        Public Property PropertyName As String\n\n        Public Sub New(errorMessage As String, propertyName As String)\n            Me.ErrorMessage = errorMessage\n            Me.PropertyName = propertyName\n        End Sub\n    End Class\n\n    Public Class PhoneValidator\n        Public Shared Function IsValidNumber(phoneNumber As String, country As String) As Boolean\n            ' Implement phone number validation logic\n            Return True ' Placeholder\n        End Function\n    End Class\n\n    Public Enum ChangeAction\n        Insert\n        Update\n        Delete\n    End Enum\nEnd Namespace