Imports System.Security.Cryptography\nImports System.Text\n\nPublic Class FIPSCompliantEncryption\n\n    Private Shared ReadOnly Key As Byte() = Encoding.UTF8.GetBytes("your-32-character-key-here") ' Ensure this is a 32-byte key for AES-256\n    Private Shared ReadOnly IV As Byte() = Encoding.UTF8.GetBytes("your-16-char-IV-here") ' Ensure this is a 16-byte IV\n\n    Public Shared Function Encrypt(plainText As String) As String\n        Using aesAlg As Aes = Aes.Create()\n            aesAlg.Key = Key\n            aesAlg.IV = IV\n            aesAlg.Mode = CipherMode.CBC\n            aesAlg.Padding = PaddingMode.PKCS7\n\n            Dim encryptor As ICryptoTransform = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV)\n\n            Using msEncrypt As New IO.MemoryStream()\n                Using csEncrypt As New CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write)\n                    Using swEncrypt As New IO.StreamWriter(csEncrypt)\n                        swEncrypt.Write(plainText)\n                    End Using\n                End Using\n                Return Convert.ToBase64String(msEncrypt.ToArray())\n            End Using\n        End Using\n    End Function\n\n    Public Shared Function Decrypt(encryptedText As String) As String\n        Using aesAlg As Aes = Aes.Create()\n            aesAlg.Key = Key\n            aesAlg.IV = IV\n            aesAlg.Mode = CipherMode.CBC\n            aesAlg.Padding = PaddingMode.PKCS7\n\n            Dim decryptor As ICryptoTransform = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV)\n\n            Dim cipherText As Byte() = Convert.FromBase64String(encryptedText)\n\n            Using msDecrypt As New IO.MemoryStream(cipherText)\n                Using csDecrypt As New CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read)\n                    Using srDecrypt As New IO.StreamReader(csDecrypt)\n                        Return srDecrypt.ReadToEnd()\n                    End Using\n                End Using\n            End Using\n        End Using\n    End Function\n\nEnd Class