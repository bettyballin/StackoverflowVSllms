Public Sub StartProcessAsUser(username As String, domain As String, password As String, application As String, commandLine As String)\n    Dim si As New ProcessLauncher.STARTUPINFO()\n    si.cb = Marshal.SizeOf(si)\n    Dim pi As New ProcessLauncher.PROCESS_INFORMATION()\n\n    Dim result As Boolean = ProcessLauncher.CreateProcessWithLogonW(\n        username,\n        domain,\n        password,\n        ProcessLauncher.LOGON_WITH_PROFILE,\n        application,\n        commandLine,\n        ProcessLauncher.CREATE_NO_WINDOW,\n        IntPtr.Zero,\n        Nothing,\n        si,\n        pi)\n\n    If Not result Then\n        Throw New System.ComponentModel.Win32Exception(Marshal.GetLastWin32Error())\n    End If\n\n    ' Optionally, you can wait for the process to exit and retrieve its exit code.\n    ' Using Process class to track the process:\n    Dim proc As System.Diagnostics.Process = System.Diagnostics.Process.GetProcessById(pi.dwProcessId)\n    proc.WaitForExit()\n    Dim exitCode As Integer = proc.ExitCode\n\n    ' Clean up handles\n    CloseHandle(pi.hProcess)\n    CloseHandle(pi.hThread)\nEnd Sub\n\n<DllImport("kernel32.dll", SetLastError:=True)>\nPrivate Shared Function CloseHandle(ByVal hObject As IntPtr) As Boolean\nEnd Functio