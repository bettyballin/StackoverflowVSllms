Imports System.Net\nImports System.Runtime.InteropServices\n\n<StructLayout(LayoutKind.Sequential)>\nPublic Structure _WTS_CLIENT_ADDRESS\n    Public AddressFamily As Integer\n    <MarshalAs(UnmanagedType.ByValArray, SizeConst:=20)>\n    Public Address() As Byte\nEnd Structure\n\nPublic Class NativeMethods\n    Public Const WTS_CURRENT_SERVER_HANDLE As Integer = 0\n    Public Const WTS_CURRENT_SESSION As Integer = -1\n\n    Public Enum WTS_INFO_CLASS\n        WTSClientAddress\n    End Enum\n\n    <DllImport("Wtsapi32.dll")>\n    Public Shared Function WTSQuerySessionInformation(\n        hServer As Integer,\n        sessionId As Integer,\n        infoClass As WTS_INFO_CLASS,\n        ByRef ppBuffer As IntPtr,\n        ByRef pBytesReturned As Integer) As Boolean\n    End Function\n\n    <DllImport("wtsapi32.dll")>\n    Public Shared Sub WTSFreeMemory(ByVal pMemory As IntPtr)\n    End Sub\nEnd Class\n\nSub Main()\n    Dim _ClientIPAddress As New _WTS_CLIENT_ADDRESS\n    Dim rtnPtr As IntPtr\n    Dim rtncount As Int32\n\n    If NativeMethods.WTSQuerySessionInformation(NativeMethods.WTS_CURRENT_SERVER_HANDLE, NativeMethods.WTS_CURRENT_SESSION, NativeMethods.WTS_INFO_CLASS.WTSClientAddress, rtnPtr, rtncount) Then\n        _ClientIPAddress = CType(Marshal.PtrToStructure(rtnPtr, GetType(_WTS_CLIENT_ADDRESS)), _WTS_CLIENT_ADDRESS)\n\n        Dim ipAddress As String = String.Empty\n\n        If _ClientIPAddress.AddressFamily = 2 Then ' AF_INET for IPv4\n            ipAddress = New IPAddress(_ClientIPAddress.Address.Take(4).ToArray()).ToString()\n        ElseIf _ClientIPAddress.AddressFamily = 23 Then ' AF_INET6 for IPv6\n            ipAddress = New IPAddress(_ClientIPAddress.Address.Take(16).ToArray()).ToString()\n        End If\n\n        Console.WriteLine("Client IP Address: " & ipAddress)\n\n        NativeMethods.WTSFreeMemory(rtnPtr)\n    End If\nEnd Sub