Imports System.Security.Principal\nImports System.Runtime.InteropServices\n\nModule Module1\n\n    <DllImport("advapi32.dll", SetLastError:=True)> _\n    Private Function LogonUser(lpszUsername As String, lpszDomain As String, lpszPassword As String, dwLogonType As Integer, dwLogonProvider As Integer, ByRef phToken As IntPtr) As Boolean\n    End Function\n\n    <DllImport("kernel32.dll", CharSet:=CharSet.Auto)> _\n    Private Function CloseHandle(handle As IntPtr) As Boolean\n    End Function\n\n    Sub Main()\n        Dim tokenHandle As IntPtr = IntPtr.Zero\n        Dim impersonatedUser As WindowsImpersonationContext = Nothing\n\n        Try\n            Dim userName As String = "username"\n            Dim domainName As String = "domain"\n            Dim password As String = "password"\n\n            Const LOGON32_LOGON_INTERACTIVE As Integer = 2\n            Const LOGON32_PROVIDER_DEFAULT As Integer = 0\n\n            If LogonUser(userName, domainName, password, LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT, tokenHandle) Then\n                Dim newId As New WindowsIdentity(tokenHandle)\n                impersonatedUser = newId.Impersonate()\n                Console.WriteLine("Impersonation successful. Current user: " & WindowsIdentity.GetCurrent().Name)\n            Else\n                Throw New System.ComponentModel.Win32Exception(Marshal.GetLastWin32Error())\n            End If\n\n        Catch ex As Exception\n            Console.WriteLine("Exception occurred: " & ex.Message)\n        Finally\n            If impersonatedUser IsNot Nothing Then\n                impersonatedUser.Undo()\n            End If\n            If tokenHandle <> IntPtr.Zero Then\n                CloseHandle(tokenHandle)\n            End If\n        End Try\n    End Sub\n\nEnd Module