Imports System.Runtime.InteropServices\n\n<StructLayout(LayoutKind.Sequential, CharSet:=CharSet.Ansi)>\nPublic Structure dx_entry\n    <MarshalAs(UnmanagedType.ByValTStr, SizeConst:=10)>\n    Public dx As String\n    <MarshalAs(UnmanagedType.ByValTStr, SizeConst:=3)>\n    Public type As String\n    <MarshalAs(UnmanagedType.ByValTStr, SizeConst:=1)>\n    Public narray As String\n    <MarshalAs(UnmanagedType.ByValTStr, SizeConst:=1)>\n    Public ctier As String\n    <MarshalAs(UnmanagedType.ByValTStr, SizeConst:=1)>\n    Public poa As String\n    <MarshalAs(UnmanagedType.ByValTStr, SizeConst:=1)>\n    Public poa_rsvd As String\n    <MarshalAs(UnmanagedType.ByValTStr, SizeConst:=81)>\n    Public filler As String\nEnd Structure\n\nModule Module1\n    Sub Main()\n        Dim stpDx(1) As dx_entry ' Array of 2 elements (0-based index)\n\n        stpDx(0).dx = "5939" & Space(6)\n        stpDx(0).type = "BK" & Space(1)\n        stpDx(0).narray = Space(1)\n        stpDx(0).ctier = Space(1)\n        stpDx(0).poa = "Y"\n        stpDx(0).poa_rsvd = Space(1)\n        stpDx(0).filler = Space(81)\n        \n        stpDx(1).dx = "1231" & Space(6)\n        stpDx(1).type = "BF" & Space(1)\n        stpDx(1).narray = Space(1)\n        stpDx(1).ctier = Space(1)\n        stpDx(1).poa = "Y"\n        stpDx(1).poa_rsvd = Space(1)\n        stpDx(1).filler = Space(81)\n\n        Dim sizeOfDxEntry As Integer = Marshal.SizeOf(GetType(dx_entry))\n        Dim pDxBuf As IntPtr = Marshal.AllocHGlobal(sizeOfDxEntry * stpDx.Length)\n\n        For i As Integer = 0 To stpDx.Length - 1\n            Dim ptr As IntPtr = New IntPtr(pDxBuf.ToInt64() + i * sizeOfDxEntry)\n            Marshal.StructureToPtr(stpDx(i), ptr, False)\n        Next\n\n        ezg_Block.pDx = pDxBuf\n\n        ' Remember to free the allocated memory later to avoid memory leaks\n        Marshal.FreeHGlobal(pDxBuf)\n    End Sub\n\n    ' Define ezg_Block with the appropriate declaration\n    Public Structure ezg_Block\n        Public Shared pDx As IntPtr\n    End Structure\nEnd Module