Imports System.Runtime.InteropServices\n\nPublic Class AddIn\n    Implements Extensibility.IDTExtensibility2\n\n    Private applicationObject As Object\n\n    Public Sub OnConnection(ByVal application As Object, ByVal connectMode As Extensibility.ext_ConnectMode, ByVal addInInst As Object, ByRef custom As Array) Implements Extensibility.IDTExtensibility2.OnConnection\n        Me.applicationObject = application\n\n        ' Determine the type of application\n        Dim appName As String = application.GetType().InvokeMember("Name", Reflection.BindingFlags.GetProperty, Nothing, application, Nothing).ToString()\n\n        Select Case appName\n            Case "Microsoft Excel"\n                HandleExcelApplication(application)\n            Case "Microsoft Word"\n                HandleWordApplication(application)\n            Case "Microsoft Outlook"\n                HandleOutlookApplication(application)\n            Case "Microsoft PowerPoint"\n                HandlePowerPointApplication(application)\n            Case Else\n                ' Handle other applications or unknown types\n                MsgBox("Unknown Office application: " & appName)\n        End Select\n    End Sub\n\n    Private Sub HandleExcelApplication(ByVal excelApp As Object)\n        ' Example: Check if all Add-Ins are linked to the Network Add-Ins folder\n        Dim addIns As Object = excelApp.GetType().InvokeMember("AddIns", Reflection.BindingFlags.GetProperty, Nothing, excelApp, Nothing)\n        For Each addIn As Object In CType(addIns, IEnumerable)\n            Dim addInPath As String = addIn.GetType().InvokeMember("FullName", Reflection.BindingFlags.GetProperty, Nothing, addIn, Nothing).ToString()\n            If Not addInPath.StartsWith("\\NetworkAddInsFolder\") Then\n                MsgBox("Add-In not in Network Add-Ins folder: " & addInPath)\n            End If\n        Next\n    End Sub\n\n    Private Sub HandleWordApplication(ByVal wordApp As Object)\n        ' Add your document auditing and protective marking code here for Word\n    End Sub\n\n    Private Sub HandleOutlookApplication(ByVal outlookApp As Object)\n        ' Add specific Outlook handling code here\n    End Sub\n\n    Private Sub HandlePowerPointApplication(ByVal powerPointApp As Object)\n        ' Add specific PowerPoint handling code here\n    End Sub\n\n    Public Sub OnDisconnection(ByVal RemoveMode As Extensibility.ext_DisconnectMode, ByRef custom As Array) Implements Extensibility.IDTExtensibility2.OnDisconnection\n        ' Cleanup code if needed\n    End Sub\n\n    Public Sub OnAddInsUpdate(ByRef custom As Array) Implements Extensibility.IDTExtensibility2.OnAddInsUpdate\n    End Sub\n\n    Public Sub OnStartupComplete(ByRef custom As Array) Implements Extensibility.IDTExtensibility2.OnStartupComplete\n    End Sub\n\n    Public Sub OnBeginShutdown(ByRef custom As Array) Implements Extensibility.IDTExtensibility2.OnBeginShutdown\n    End Sub\n\nEnd Class