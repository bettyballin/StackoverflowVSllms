Imports NUnit.Framework\nImports Rhino.Mocks\nImports System.Web\nImports System.Web.Abstractions\nImports System.Web.Routing\n\n<TestFixture()> _\nPublic Class XhtmlHelperTest\n\n    Public Const AppPathModifier = "/$(SESSION)"\n\n    'Various test methods here...'\n\n    Private Shared Function GetHttpContext(ByVal appPath As String, _\n                                           ByVal requestPath As String, _\n                                           ByVal httpMethod As String, _\n                                           Optional ByVal protocol As String = "http", _\n                                           Optional ByVal port As Integer = -1 _\n                                           ) As HttpContextBase\n        Dim mockHttpContext = MockRepository.GenerateMock(Of HttpContextBase)()\n\n        If Not String.IsNullOrEmpty(appPath) Then\n            mockHttpContext.Expect(Function(hc) hc.Request.ApplicationPath).Return(appPath)\n        End If\n\n        If Not String.IsNullOrEmpty(requestPath) Then\n            mockHttpContext.Expect(Function(hc) hc.Request.AppRelativeCurrentExecutionFilePath).Return(requestPath)\n        End If\n\n        Dim uri As Uri\n\n        If port >= 0 Then\n            uri = New Uri(protocol + "://localhost" + ":" + port)\n        Else\n            uri = New Uri(protocol + "://localhost")\n        End If\n\n        mockHttpContext.Expect(Function(hc) hc.Request.Url).Return(uri)\n\n        mockHttpContext.Expect(Function(hc) hc.Request.PathInfo).Return("")\n\n        If Not String.IsNullOrEmpty(httpMethod) Then\n            mockHttpContext.Expect(Function(hc) hc.Request.HttpMethod).Return(httpMethod)\n        End If\n\n        mockHttpContext.Expect(Function(hc) hc.Response.ApplyAppPathModifier(Arg(Of String).Is.Anything)).WhenCalled(Function(invocation) AppPathModifier + invocation.Arguments(0))\n\n        Return mockHttpContext\n    End Function\n\nEnd Class