#include <iostream>\n#include <cmath>\n#include <vector>\n\nusing namespace std;\n\nstruct Point {\n    int x, y;\n};\n\nvoid createLinearGradient(vector<vector<int>>& array, Point start, Point end, int minValue, int maxValue) {\n    int width = array[0].size();\n    int height = array.size();\n\n    // Calculate the direction vector\n    float dx = end.x - start.x;\n    float dy = end.y - start.y;\n    float length = sqrt(dx * dx + dy * dy);\n    dx /= length;\n    dy /= length;\n\n    // Interpolate the gradient\n    for (int y = 0; y < height; ++y) {\n        for (int x = 0; x < width; ++x) {\n            float projection = ((x - start.x) * dx + (y - start.y) * dy) / length;\n            float value = minValue + (maxValue - minValue) * projection;\n            value = max(minValue, min(maxValue, value)); // Clamp value to the specified range\n            array[y][x] = static_cast<int>(value);\n        }\n    }\n}\n\nint main() {\n    int width = 500;\n    int height = 500;\n    vector<vector<int>> array(height, vector<int>(width, 0));\n    Point start = {0, 0};\n    Point end = {499, 499};\n    int minValue = 0;\n    int maxValue = 255;\n\n    createLinearGradient(array, start, end, minValue, maxValue);\n\n    // Output the array, for example purposes\n    for (const auto& row : array) {\n        for (int value : row) {\n            cout << value << " ";\n        }\n        cout << endl;\n    }\n\n    return 0;\n}