#include <mutex>\n\nclass Foo {\npublic:\n    void A() {\n        std::scoped_lock lock(mutex);\n        aImp();\n    }\n\n    void B() {\n        std::scoped_lock lock(mutex);\n        bImp();\n    }\n\nprotected:\n    virtual void aImp() = 0;\n    virtual void bImp() = 0;\n\nprivate:\n    std::mutex mutex;\n};\n\nclass Bar : public Foo {\nprotected:\n    void aImp() override {\n        // Do some work...\n        // Instead of calling B(), call bImp() directly to avoid deadlock:\n        bImp();\n        // Continue with more work...\n    }\n\n    void bImp() override {\n        // Do some work...\n    }\n};