#include <windows.h>\n#include <sddl.h>\n#include <iostream>\n\nvoid DisplayUserGroups()\n{\n    HANDLE hToken = NULL;\n    DWORD dwSize = 0;\n    PTOKEN_GROUPS pGroups = NULL;\n    DWORD i;\n\n    // Open a handle to the access token for the calling process.\n    if (!OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY, &hToken))\n    {\n        std::cerr << "OpenProcessToken Error: " << GetLastError() << std::endl;\n        return;\n    }\n\n    // Call GetTokenInformation to determine the buffer size.\n    if (!GetTokenInformation(hToken, TokenGroups, NULL, 0, &dwSize) &&\n        GetLastError() != ERROR_INSUFFICIENT_BUFFER)\n    {\n        std::cerr << "GetTokenInformation Error: " << GetLastError() << std::endl;\n        CloseHandle(hToken);\n        return;\n    }\n\n    // Allocate a buffer for the groups.\n    pGroups = (PTOKEN_GROUPS)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, dwSize);\n\n    // Call GetTokenInformation again to get the group information.\n    if (!GetTokenInformation(hToken, TokenGroups, pGroups, dwSize, &dwSize))\n    {\n        std::cerr << "GetTokenInformation Error: " << GetLastError() << std::endl;\n        HeapFree(GetProcessHeap(), 0, pGroups);\n        CloseHandle(hToken);\n        return;\n    }\n\n    // Loop through the groups and display the SIDs.\n    for (i = 0; i < pGroups->GroupCount; i++)\n    {\n        LPTSTR SidString = NULL;\n        if (ConvertSidToStringSid(pGroups->Groups[i].Sid, &SidString))\n        {\n            std::wcout << L"Group " << i << L": " << SidString << std::endl;\n            LocalFree(SidString);\n        }\n    }\n\n    // Clean up.\n    HeapFree(GetProcessHeap(), 0, pGroups);\n    CloseHandle(hToken);\n}\n\nint main()\n{\n    DisplayUserGroups();\n    return 0;\n}