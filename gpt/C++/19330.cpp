#include <iostream>\n#include <thread>\n#include <vector>\n#include <chrono>\n\nvoid benchmark_allocator(void (*allocator)()) {\n    const int num_threads = 8;\n    std::vector<std::thread> threads;\n\n    auto start = std::chrono::high_resolution_clock::now();\n\n    for (int i = 0; i < num_threads; ++i) {\n        threads.emplace_back(allocator);\n    }\n\n    for (auto& t : threads) {\n        t.join();\n    }\n\n    auto end = std::chrono::high_resolution_clock::now();\n    std::chrono::duration<double> duration = end - start;\n\n    std::cout << "Execution time: " << duration.count() << " seconds\n";\n}\n\nvoid my_allocator() {\n    // Replace this with calls to allocate and deallocate memory\n    for (int i = 0; i < 100000; ++i) {\n        int* data = new int[100];\n        delete[] data;\n    }\n}\n\nint main() {\n    benchmark_allocator(my_allocator);\n    return 0;\n}