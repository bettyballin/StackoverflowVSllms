#include <iostream>\n#include <unordered_map>\n#include <typeindex>\n#include <memory>\n#include <any>\n\nclass ServiceProvider {\npublic:\n    template<typename T>\n    void addService(std::shared_ptr<T> service) {\n        services[typeid(T)] = service;\n    }\n\n    template<typename T>\n    std::shared_ptr<T> getService() {\n        auto it = services.find(typeid(T));\n        if (it != services.end()) {\n            return std::static_pointer_cast<T>(it->second);\n        }\n        return nullptr;\n    }\n\nprivate:\n    std::unordered_map<std::type_index, std::shared_ptr<void>> services;\n};\n\nclass MyService {\npublic:\n    void doSomething() {\n        std::cout << "Service is doing something!" << std::endl;\n    }\n};\n\nint main() {\n    ServiceProvider provider;\n    provider.addService(std::make_shared<MyService>());\n\n    auto service = provider.getService<MyService>();\n    if (service) {\n        service->doSomething();\n    } else {\n        std::cout << "Service not found!" << std::endl;\n    }\n    \n    return 0;\n}