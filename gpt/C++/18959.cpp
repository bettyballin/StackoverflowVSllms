#include <boost/asio.hpp>\n#include <iostream>\n#include <thread>\n\nusing boost::asio::ip::tcp;\n\nvoid session(tcp::socket sock) {\n    try {\n        for (;;) {\n            char data[512];\n            boost::system::error_code error;\n            size_t length = sock.read_some(boost::asio::buffer(data), error);\n            if (error == boost::asio::error::eof)\n                break; // Connection closed cleanly by peer.\n            else if (error)\n                throw boost::system::system_error(error); // Some other error.\n\n            boost::asio::write(sock, boost::asio::buffer(data, length));\n        }\n    } catch (std::exception& e) {\n        std::cerr << "Exception in thread: " << e.what() << "\n";\n    }\n}\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        tcp::acceptor acceptor(io_context, tcp::endpoint(tcp::v4(), 12345));\n        for (;;) {\n            tcp::socket socket(io_context);\n            acceptor.accept(socket);\n            std::thread(session, std::move(socket)).detach();\n        }\n    } catch (std::exception& e) {\n        std::cerr << "Exception: " << e.what() << "\n";\n    }\n    return 0;\n}