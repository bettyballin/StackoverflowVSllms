#include <boost/asio.hpp>\n#include <boost/asio/ssl.hpp>\n#include <iostream>\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n\n        // Create the SSL context\n        boost::asio::ssl::context ssl_context(boost::asio::ssl::context::sslv23);\n\n        // Load the server certificate and private key\n        ssl_context.use_certificate_chain_file("server.crt");\n        ssl_context.use_private_key_file("server.key", boost::asio::ssl::context::pem);\n\n        // Create two different accepting sockets\n        boost::asio::ip::tcp::acceptor acceptor1(io_context, boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), 12345));\n        boost::asio::ip::tcp::acceptor acceptor2(io_context, boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), 12346));\n\n        // Accept connections and perform SSL handshake as needed\n        // (This part should be implemented as per your application's flow)\n\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << "Exception: " << e.what() << "\n";\n    }\n\n    return 0;\n}