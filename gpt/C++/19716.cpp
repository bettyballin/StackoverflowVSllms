#include <iostream>\n#include <htmlcxx/html/ParserDom.h>\n#include <htmlcxx/html/Node.h>\n#include <htmlcxx/html/Uri.h>\n#include <string>\n\nstd::string sanitizeHtml(const std::string &input) {\n    // Parse the HTML content\n    htmlcxx::HTML::ParserDom parser;\n    tree<htmlcxx::HTML::Node> dom = parser.parseTree(input);\n\n    std::string sanitized;\n    for (auto it = dom.begin(); it != dom.end(); ++it) {\n        if (it->isTag()) {\n            // remove unwanted tags or attributes\n            if (it->tagName() == "script" || it->tagName() == "iframe" || it->tagName() == "object") {\n                it.skip_children();\n                continue;\n            }\n            sanitized += it->text();\n        } else if (it->isComment()) {\n            // ignore comments\n            continue;\n        } else {\n            sanitized += it->text();\n        }\n    }\n\n    return sanitized;\n}\n\nint main() {\n    std::string html = "<p>This is a <b>test</b> with <script>alert('hack');</script> some tags.</p>";\n    std::string sanitizedHtml = sanitizeHtml(html);\n\n    std::cout << "Sanitized HTML: " << sanitizedHtml << std::endl;\n    return 0;\n}