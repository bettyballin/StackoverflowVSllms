#include <QApplication>\n   #include <QNetworkAccessManager>\n   #include <QNetworkReply>\n   #include <QNetworkRequest>\n   #include <QUrl>\n   #include <QObject>\n   #include <QTextCodec>\n   #include <QDebug>\n\n   class WebPageFetcher : public QObject {\n       Q_OBJECT\n\n   public:\n       WebPageFetcher(QObject *parent = nullptr) : QObject(parent) {\n           manager = new QNetworkAccessManager(this);\n           connect(manager, &QNetworkAccessManager::finished, this, &WebPageFetcher::onFinished);\n       }\n\n       void fetch(const QUrl &url) {\n           QNetworkRequest request;\n           request.setUrl(url);\n           request.setRawHeader("User-Agent", "Mozilla/5.0 (X11; U; Linux i686 (x86_64); en-US; rv:1.9.0.1) Gecko/2008070206 Firefox/3.0.1");\n           request.setRawHeader("Accept-Charset", "win1251,utf-8;q=0.7,*;q=0.7");\n           request.setRawHeader("Connection", "keep-alive");\n\n           manager->get(request);\n       }\n\n   private slots:\n       void onFinished(QNetworkReply *reply) {\n           if (reply->error() != QNetworkReply::NoError) {\n               qDebug() << "Error:" << reply->errorString();\n               reply->deleteLater();\n               return;\n           }\n\n           QByteArray responseData = reply->readAll();\n           QTextCodec *codec = QTextCodec::codecForHtml(responseData);\n           QString content = codec->toUnicode(responseData);\n\n           qDebug() << content;\n           reply->deleteLater();\n       }\n\n   private:\n       QNetworkAccessManager *manager;\n   };\n\n   int main(int argc, char *argv[]) {\n       QApplication app(argc, argv);\n\n       WebPageFetcher fetcher;\n       fetcher.fetch(QUrl("http://ru.wiktionary.org/wiki/bovo"));\n\n       return app.exec();\n   }\n\n   #include "main.moc"