#include <iostream>\n#include <cuda_runtime.h>\n\n__global__ void vectorAdd(const float* A, const float* B, float* C, int N) {\n    int i = threadIdx.x + blockDim.x * blockIdx.x;\n    if (i < N) {\n        C[i] = A[i] + B[i];\n    }\n}\n\nint main() {\n    const int N = 1000000;\n    size_t size = N * sizeof(float);\n\n    // Allocate host memory\n    float* h_A = (float*)malloc(size);\n    float* h_B = (float*)malloc(size);\n    float* h_C = (float*)malloc(size);\n\n    // Initialize host arrays\n    for (int i = 0; i < N; ++i) {\n        h_A[i] = static_cast<float>(i);\n        h_B[i] = static_cast<float>(i * 2);\n    }\n\n    // Allocate device memory\n    float *d_A, *d_B, *d_C;\n    cudaMalloc(&d_A, size);\n    cudaMalloc(&d_B, size);\n    cudaMalloc(&d_C, size);\n\n    // Copy data from host to device\n    cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice);\n    cudaMemcpy(d_B, h_B, size, cudaMemcpyHostToDevice);\n\n    // Launch the kernel\n    int threadsPerBlock = 256;\n    int blocksPerGrid = (N + threadsPerBlock - 1) / threadsPerBlock;\n    vectorAdd<<<blocksPerGrid, threadsPerBlock>>>(d_A, d_B, d_C, N);\n\n    // Copy result from device to host\n    cudaMemcpy(h_C, d_C, size, cudaMemcpyDeviceToHost);\n\n    // Verify result\n    for (int i = 0; i < N; ++i) {\n        if (fabs(h_C[i] - (h_A[i] + h_B[i])) > 1e-5) {\n            std::cerr << "Result verification failed at element " << i << std::endl;\n            exit(EXIT_FAILURE);\n        }\n    }\n\n    std::cout << "Test PASSED" << std::endl;\n\n    // Free device memory\n    cudaFree(d_A);\n    cudaFree(d_B);\n    cudaFree(d_C);\n\n    // Free host memory\n    free(h_A);\n    free(h_B);\n    free(h_C);\n\n    return 0;\n}