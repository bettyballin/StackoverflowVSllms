// Basic COM component example\n\n   #include <windows.h>\n   #include <iostream>\n\n   // Define the interface\n   interface ICalculator : public IUnknown {\n       virtual HRESULT __stdcall Add(int a, int b, int* result) = 0;\n   };\n\n   // Implement the interface\n   class Calculator : public ICalculator {\n   private:\n       LONG m_refCount;\n\n   public:\n       Calculator() : m_refCount(1) {}\n\n       HRESULT __stdcall QueryInterface(const IID& iid, void** ppv) override {\n           if (iid == IID_IUnknown || iid == __uuidof(ICalculator)) {\n               *ppv = static_cast<ICalculator*>(this);\n           } else {\n               *ppv = nullptr;\n               return E_NOINTERFACE;\n           }\n           AddRef();\n           return S_OK;\n       }\n\n       ULONG __stdcall AddRef() override {\n           return InterlockedIncrement(&m_refCount);\n       }\n\n       ULONG __stdcall Release() override {\n           ULONG ulRefCount = InterlockedDecrement(&m_refCount);\n           if (0 == ulRefCount) {\n               delete this;\n           }\n           return ulRefCount;\n       }\n\n       HRESULT __stdcall Add(int a, int b, int* result) override {\n           if (result == nullptr)\n               return E_POINTER;\n           *result = a + b;\n           return S_OK;\n       }\n   };\n\n   int main() {\n       ICalculator* pCalc = new Calculator();\n       int result;\n       pCalc->Add(5, 3, &result);\n       std::cout << "5 + 3 = " << result << std::endl;\n       pCalc->Release();\n       return 0;\n   }