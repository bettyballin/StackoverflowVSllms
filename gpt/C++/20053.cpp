#include <cpprest/http_client.h>\n#include <cpprest/filestream.h>\n#include <iostream>\n\nusing namespace web::http;\nusing namespace web::http::client;\nusing namespace concurrency::streams;\n\nint main() {\n    auto fileStream = std::make_shared<ostream>();\n\n    // Open stream to output file\n    pplx::task<void> requestTask = fstream::open_ostream(U("result.html"))\n        .then([=](ostream outFile) {\n            *fileStream = outFile;\n\n            // Create HTTP client and make a GET request\n            http_client client(U("http://www.example.com"));\n            return client.request(methods::GET);\n        })\n        .then([=](http_response response) {\n            // Check the status code\n            if (response.status_code() != status_codes::OK) {\n                throw std::runtime_error("Returned " + std::to_string(response.status_code()));\n            }\n\n            // Write response body to file\n            return response.body().read_to_end(fileStream->streambuf());\n        })\n        .then([=](size_t) {\n            return fileStream->close();\n        });\n\n    // Wait for all the tasks to complete\n    try {\n        requestTask.wait();\n    } catch (const std::exception &e) {\n        std::cerr << "Error: " << e.what() << std::endl;\n    }\n\n    return 0;\n}