#include <iostream>\n#include <map>\n#include <string>\n#include <numeric>\n\nstruct SMyStruct {\n    int MULT;\n    int VAL;\n};\n\nint main() {\n    std::map<std::string, SMyStruct*> _idToMyStructMap;\n    \n    // Populate the map with some data\n    _idToMyStructMap["first"] = new SMyStruct{2, 3};\n    _idToMyStructMap["second"] = new SMyStruct{4, 5};\n\n    // Calculate the total\n    int total = std::accumulate(\n        _idToMyStructMap.begin(), _idToMyStructMap.end(), 0,\n        [](int sum, const std::pair<std::string, SMyStruct*>& p) {\n            return sum + (p.second->MULT * p.second->VAL);\n        }\n    );\n\n    std::cout << "Total: " << total << std::endl;\n\n    // Clean up allocated memory\n    for (auto& kv : _idToMyStructMap) {\n        delete kv.second;\n    }\n\n    return 0;\n}