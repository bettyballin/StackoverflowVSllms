#include <windows.h>\n#include <iostream>\n\nvoid PrintToNewConsole(const char* message) {\n    STARTUPINFO si;\n    PROCESS_INFORMATION pi;\n\n    ZeroMemory(&si, sizeof(si));\n    si.cb = sizeof(si);\n    ZeroMemory(&pi, sizeof(pi));\n\n    // Create the new process with a new console\n    if (CreateProcess(\n        "C:\\Windows\\System32\\cmd.exe",   // Path to the executable\n        NULL,                               // Command line arguments\n        NULL,                               // Process handle not inheritable\n        NULL,                               // Thread handle not inheritable\n        FALSE,                              // Set handle inheritance to FALSE\n        CREATE_NEW_CONSOLE,                 // Create a new console window\n        NULL,                               // Use parent's environment block\n        NULL,                               // Use parent's starting directory \n        &si,                                // Pointer to STARTUPINFO structure\n        &pi                                 // Pointer to PROCESS_INFORMATION structure\n    )) {\n        // Write the message to the new console window\n        DWORD written;\n        WriteConsole(GetStdHandle(STD_OUTPUT_HANDLE), message, strlen(message), &written, NULL);\n\n        // Wait until the new process exits\n        WaitForSingleObject(pi.hProcess, INFINITE);\n\n        // Close process and thread handles\n        CloseHandle(pi.hProcess);\n        CloseHandle(pi.hThread);\n    } else {\n        std::cerr << "Failed to create new console window." << std::endl;\n    }\n}\n\nint main() {\n    // Print to the current console\n    std::cout << "1" << std::endl;\n\n    // Print to a new console\n    PrintToNewConsole("2");\n\n    return 0;\n}