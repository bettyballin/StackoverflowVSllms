#include <windows.h>\n#include <dbghelp.h>\n#include <iostream>\n\n#pragma comment(lib, "dbghelp.lib")\n\nvoid EnumerateExportFunctions(const char* dllPath) {\n    HANDLE hFile = CreateFile(dllPath, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);\n    if (hFile == INVALID_HANDLE_VALUE) {\n        std::cerr << "Failed to open file: " << dllPath << std::endl;\n        return;\n    }\n\n    HANDLE hMapping = CreateFileMapping(hFile, NULL, PAGE_READONLY, 0, 0, NULL);\n    if (!hMapping) {\n        std::cerr << "Failed to create file mapping." << std::endl;\n        CloseHandle(hFile);\n        return;\n    }\n\n    LPVOID pBase = MapViewOfFile(hMapping, FILE_MAP_READ, 0, 0, 0);\n    if (!pBase) {\n        std::cerr << "Failed to map view of file." << std::endl;\n        CloseHandle(hMapping);\n        CloseHandle(hFile);\n        return;\n    }\n\n    PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)pBase;\n    PIMAGE_NT_HEADERS pNTHeaders = (PIMAGE_NT_HEADERS)((BYTE*)pBase + pDosHeader->e_lfanew);\n\n    DWORD exportDirRVA = pNTHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress;\n    if (exportDirRVA == 0) {\n        std::cerr << "No export directory found." << std::endl;\n        UnmapViewOfFile(pBase);\n        CloseHandle(hMapping);\n        CloseHandle(hFile);\n        return;\n    }\n\n    PIMAGE_EXPORT_DIRECTORY pExportDir = (PIMAGE_EXPORT_DIRECTORY)((BYTE*)pBase + exportDirRVA);\n    DWORD* pNames = (DWORD*)((BYTE*)pBase + pExportDir->AddressOfNames);\n\n    for (DWORD i = 0; i < pExportDir->NumberOfNames; i++) {\n        char* functionName = (char*)((BYTE*)pBase + pNames[i]);\n        std::cout << functionName << std::endl;\n    }\n\n    UnmapViewOfFile(pBase);\n    CloseHandle(hMapping);\n    CloseHandle(hFile);\n}\n\nint main() {\n    EnumerateExportFunctions("C:\\Path\\To\\Your\\Dll.dll");\n    return 0;\n}