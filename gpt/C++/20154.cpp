#include <windows.h>\n#include <mmdeviceapi.h>\n#include <audiopolicy.h>\n#include <audioclient.h>\n\nclass AudioSessionNotification : public IAudioSessionNotification {\npublic:\n    ULONG STDMETHODCALLTYPE AddRef() {\n        return InterlockedIncrement(&m_refCount);\n    }\n\n    ULONG STDMETHODCALLTYPE Release() {\n        ULONG ulRef = InterlockedDecrement(&m_refCount);\n        if (0 == ulRef) {\n            delete this;\n        }\n        return ulRef;\n    }\n\n    HRESULT STDMETHODCALLTYPE QueryInterface(REFIID riid, void** ppvInterface) {\n        if (IID_IUnknown == riid) {\n            *ppvInterface = (IUnknown*)this;\n        } else if (__uuidof(IAudioSessionNotification) == riid) {\n            *ppvInterface = (IAudioSessionNotification*)this;\n        } else {\n            *ppvInterface = NULL;\n            return E_NOINTERFACE;\n        }\n        AddRef();\n        return S_OK;\n    }\n    \n    HRESULT STDMETHODCALLTYPE OnSessionCreated(IAudioSessionControl* NewSession) {\n        // Handle new session creation\n        return S_OK;\n    }\n\n    AudioSessionNotification() : m_refCount(1) {}\n    ~AudioSessionNotification() {}\n\nprivate:\n    LONG m_refCount;\n};\n\nint main() {\n    CoInitialize(NULL);\n\n    IMMDeviceEnumerator *pEnumerator = NULL;\n    IMMDevice *pDevice = NULL;\n    IAudioSessionManager2 *pManager = NULL;\n    AudioSessionNotification *pNotification = new AudioSessionNotification();\n\n    HRESULT hr = CoCreateInstance(__uuidof(MMDeviceEnumerator), NULL, CLSCTX_ALL, __uuidof(IMMDeviceEnumerator), (void**)&pEnumerator);\n    if (FAILED(hr)) {\n        CoUninitialize();\n        return -1;\n    }\n\n    hr = pEnumerator->GetDefaultAudioEndpoint(eRender, eConsole, &pDevice);\n    if (FAILED(hr)) {\n        pEnumerator->Release();\n        CoUninitialize();\n        return -1;\n    }\n\n    hr = pDevice->Activate(__uuidof(IAudioSessionManager2), CLSCTX_ALL, NULL, (void**)&pManager);\n    if (FAILED(hr)) {\n        pDevice->Release();\n        pEnumerator->Release();\n        CoUninitialize();\n        return -1;\n    }\n\n    hr = pManager->RegisterSessionNotification(pNotification);\n    if (FAILED(hr)) {\n        pManager->Release();\n        pDevice->Release();\n        pEnumerator->Release();\n        CoUninitialize();\n        return -1;\n    }\n\n    // Main application logic\n\n    // Clean up\n    pManager->UnregisterSessionNotification(pNotification);\n    pManager->Release();\n    pDevice->Release();\n    pEnumerator->Release();\n    CoUninitialize();\n    \n    return 0;\n}