#include <iostream>\n#include <comdef.h>\n#include <atlbase.h>\n#include <atldbcli.h>\n\nint main()\n{\n    HRESULT hr;\n    ::CoInitialize(NULL);\n    {\n        CDataSource db;\n        CSession session;\n        CCommand<CDynamicAccessor> cmd;\n\n        // Initialize and open a connection\n        hr = db.OpenFromInitializationString(L"Provider=SQLOLEDB;Data Source=YOUR_SERVER;Initial Catalog=YOUR_DATABASE;User ID=YOUR_USER;Password=YOUR_PASSWORD;");\n        if (FAILED(hr))\n        {\n            std::wcerr << L"Failed to connect to database" << std::endl;\n            return 1;\n        }\n\n        // Open a session\n        hr = session.Open(db);\n        if (FAILED(hr))\n        {\n            std::wcerr << L"Failed to open session" << std::endl;\n            return 1;\n        }\n\n        // Define the SQL query\n        const wchar_t* query = L"SELECT value "\n                               L"FROM fn_listextendedproperty(NULL, NULL, NULL, NULL, NULL, NULL, NULL) "\n                               L"WHERE name=N'schemaVersion'";\n\n        // Prepare and execute the command\n        hr = cmd.Open(session, query);\n        if (FAILED(hr))\n        {\n            std::wcerr << L"Failed to execute query" << std::endl;\n            return 1;\n        }\n\n        // Fetch the result\n        while (cmd.MoveNext() == S_OK)\n        {\n            // Assuming the value is of type BSTR (VT_BSTR)\n            _variant_t vtValue;\n            vtValue = cmd.GetValue(1); // 1-based index for first column\n\n            if (vtValue.vt == VT_BSTR)\n            {\n                std::wcout << L"schemaVersion: " << vtValue.bstrVal << std::endl;\n            }\n            else\n            {\n                std::wcerr << L"Unexpected data type" << std::endl;\n            }\n        }\n\n        // Close the command and session\n        cmd.Close();\n        session.Close();\n    }\n    ::CoUninitialize();\n    return 0;\n}