#include <unordered_map>\n#include <unordered_set>\n#include <memory>\n\n// Forward declaration of classes\nclass ID;\nclass Foo;\n\nclass Foo {\npublic:\n    std::unordered_set<const ID*> idSet;\n    // Other members and methods of Foo\n};\n\n// Define the lookup map\nstd::unordered_map<const ID*, Foo*> idToFooMap;\n\nvoid FindXXX(const ID* pID) {\n    auto it = idToFooMap.find(pID);\n    if (it != idToFooMap.end()) {\n        Foo* containingFoo = it->second;\n        // Do something with the containing Foo\n    } else {\n        // Handle the case where pID is not found\n    }\n}\n\nvoid AddMapping(Foo* foo, const ID* id) {\n    foo->idSet.insert(id);\n    idToFooMap[id] = foo;\n}\n\nvoid RemoveMapping(const ID* id) {\n    auto it = idToFooMap.find(id);\n    if (it != idToFooMap.end()) {\n        Foo* foo = it->second;\n        foo->idSet.erase(id);\n        idToFooMap.erase(it);\n    }\n}\n\n// Example usage\nint main() {\n    Foo* foo1 = new Foo();\n    ID* id1 = new ID();\n    \n    AddMapping(foo1, id1);\n    FindXXX(id1);\n\n    // Clean up\n    RemoveMapping(id1);\n    delete id1;\n    delete foo1;\n\n    return 0;\n}