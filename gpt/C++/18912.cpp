#include <csignal>\n#include <iostream>\n#include <fstream>\n#include <exception>\n#include <stdexcept>\n\nvoid signal_handler(int signal) {\n    std::ofstream log("error.log", std::ios_base::app);\n    switch(signal) {\n        case SIGFPE:\n            log << "Received SIGFPE: Arithmetic exception, such as divide by zero.\n";\n            break;\n        case SIGSEGV:\n            log << "Received SIGSEGV: Invalid memory access (segmentation fault).\n";\n            break;\n        case SIGILL:\n            log << "Received SIGILL: Illegal instruction.\n";\n            break;\n        case SIGTERM:\n            log << "Received SIGTERM: Termination request.\n";\n            break;\n        case SIGABRT:\n            log << "Received SIGABRT: Abnormal termination (abort).\n";\n            break;\n        default:\n            log << "Received signal: " << signal << "\n";\n            break;\n    }\n    log.close();\n    exit(signal);\n}\n\nvoid setup_signal_handlers() {\n    signal(SIGFPE, signal_handler);\n    signal(SIGSEGV, signal_handler);\n    signal(SIGILL, signal_handler);\n    signal(SIGTERM, signal_handler);\n    signal(SIGABRT, signal_handler);\n}\n\nint main() {\n    setup_signal_handlers();\n    \n    // Example code that might cause a signal to be raised\n    try {\n        // Example of causing a segmentation fault\n        int* p = nullptr;\n        *p = 42; // This will raise SIGSEGV\n    } catch (const std::exception &e) {\n        std::ofstream log("error.log", std::ios_base::app);\n        log << "Caught exception: " << e.what() << "\n";\n        log.close();\n    }\n\n    return 0;\n}