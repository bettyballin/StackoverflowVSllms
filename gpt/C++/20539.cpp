llvm::Function *createJITFunction(llvm::Module &module) {\n       llvm::LLVMContext &context = module.getContext();\n       llvm::IRBuilder<> builder(context);\n       \n       llvm::FunctionType *funcType = llvm::FunctionType::get(\n           llvm::Type::getInt32Ty(context), \n           {llvm::Type::getInt32Ty(context), llvm::Type::getInt32Ty(context)}, \n           false\n       );\n\n       llvm::Function *jitFunc = llvm::Function::Create(\n           funcType, \n           llvm::Function::ExternalLinkage, \n           "jit_add", \n           module\n       );\n       \n       llvm::BasicBlock *entry = llvm::BasicBlock::Create(context, "entry", jitFunc);\n       builder.SetInsertPoint(entry);\n\n       auto args = jitFunc->arg_begin();\n       llvm::Value *L = args++;\n       llvm::Value *R = args;\n\n       llvm::Function *addFunc = module.getFunction("add");\n       llvm::Value *result = builder.CreateCall(addFunc, {L, R}, "call_add");\n\n       builder.CreateRet(result);\n\n       return jitFunc;\n   }