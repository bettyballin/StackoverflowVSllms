#include <iostream>\n#include <thread>\n#include <chrono>\n\nvoid performWork(int targetLoadPercentage) {\n    using namespace std::chrono;\n    \n    // Target load percentage should be between 0 and 100\n    targetLoadPercentage = std::min(100, std::max(0, targetLoadPercentage));\n    \n    // Adjust these values based on your specific requirements\n    milliseconds workTime(10);  // Duration to perform actual work in each cycle\n    milliseconds sleepTime = workTime * (100 - targetLoadPercentage) / targetLoadPercentage;\n    \n    while (true) {\n        auto start = high_resolution_clock::now();\n        \n        // Perform the actual work (compression or other intensive calculations)\n        while (duration_cast<milliseconds>(high_resolution_clock::now() - start) < workTime) {\n            // Your intensive work here, e.g., compression\n        }\n        \n        // Sleep to throttle CPU usage\n        std::this_thread::sleep_for(sleepTime);\n    }\n}\n\nint main() {\n    // Set the desired CPU load percentage (e.g., 50%)\n    int targetLoadPercentage = 50;\n    \n    // Start the worker thread\n    std::thread worker(performWork, targetLoadPercentage);\n    \n    // Let the worker run for some time (e.g., 10 seconds)\n    std::this_thread::sleep_for(std::chrono::seconds(10));\n    \n    // Gracefully stop the worker (for demonstration purposes, we simply detach it)\n    worker.detach();\n    \n    std::cout << "Worker thread detached after 10 seconds." << std::endl;\n    \n    return 0;\n}