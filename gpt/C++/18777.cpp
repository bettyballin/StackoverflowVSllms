#include <iostream>\n#include <filesystem>\n#include <stdexcept>\n\nnamespace fs = std::filesystem;\n\nfs::path sanitize_path(const fs::path& base_dir, const fs::path& requested_path) {\n    // Resolve the absolute path\n    fs::path abs_base = fs::absolute(base_dir);\n    fs::path abs_path = fs::absolute(requested_path);\n\n    // Get the canonical form of the paths\n    fs::path canon_base = fs::canonical(abs_base);\n    fs::path canon_path = fs::canonical(abs_path);\n\n    // Check if the canonical path is within the canonical base directory\n    if (canon_path.string().find(canon_base.string()) != 0) {\n        throw std::runtime_error("Access denied: Path traversal detected");\n    }\n\n    return canon_path;\n}\n\nint main() {\n    try {\n        fs::path base_dir = "/path/to/base/dir";\n        fs::path requested_path = "../../etc/passwd";  // Example of a potentially dangerous path\n\n        // Sanitize the path\n        fs::path safe_path = sanitize_path(base_dir, requested_path);\n\n        std::cout << "Safe path: " << safe_path << std::endl;\n\n        // Proceed with file operations using safe_path\n    } catch (const std::exception& e) {\n        std::cerr << "Error: " << e.what() << std::endl;\n    }\n\n    return 0;\n}