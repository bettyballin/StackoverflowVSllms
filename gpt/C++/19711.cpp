#include <iostream>\n#include <vector>\n#include <cmath>\n\n// Define the Point structure\nstruct Point {\n    int x;\n    int y;\n};\n\n// Function to calculate the distance between two points\ndouble calculateDistance(const Point& p1, const Point& p2) {\n    return std::sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));\n}\n\n// Function to find all points within a given radius from a specified point\nstd::vector<Point> findPointsWithinRadius(const std::vector<Point>& points, const Point& center, double radius) {\n    std::vector<Point> result;\n    for (const auto& point : points) {\n        if (calculateDistance(center, point) <= radius) {\n            result.push_back(point);\n        }\n    }\n    return result;\n}\n\nint main() {\n    // Example points\n    std::vector<Point> points = {\n        {100, 150}, {200, 250}, {150, 300}, {300, 350}, {50, 50}\n    };\n\n    // Define the center point and radius\n    Point center = {150, 200};\n    double radius = 100.0;\n\n    // Find points within the radius\n    std::vector<Point> pointsWithinRadius = findPointsWithinRadius(points, center, radius);\n\n    // Output the results\n    std::cout << "Points within radius " << radius << " of (" << center.x << ", " << center.y << "):\n";\n    for (const auto& point : pointsWithinRadius) {\n        std::cout << "(" << point.x << ", " << point.y << ")\n";\n    }\n\n    return 0;\n}