#include <iostream>\n#include <memory>\n\n// Subject interface\nclass Subject {\npublic:\n    virtual void request() const = 0;\n};\n\n// RealSubject class\nclass RealSubject : public Subject {\npublic:\n    void request() const override {\n        std::cout << "RealSubject: Handling request." << std::endl;\n    }\n};\n\n// Proxy class\nclass Proxy : public Subject {\nprivate:\n    std::unique_ptr<RealSubject> realSubject;\n\n    bool checkAccess() const {\n        // Simulate access check\n        std::cout << "Proxy: Checking access prior to firing a real request." << std::endl;\n        return true;\n    }\n\n    void logAccess() const {\n        // Log the access\n        std::cout << "Proxy: Logging the time of request." << std::endl;\n    }\n\npublic:\n    void request() const override {\n        if (this->checkAccess()) {\n            if (!realSubject) {\n                realSubject = std::make_unique<RealSubject>();\n            }\n            realSubject->request();\n            this->logAccess();\n        }\n    }\n};\n\nint main() {\n    std::unique_ptr<Subject> proxy = std::make_unique<Proxy>();\n    proxy->request();\n\n    return 0;\n}