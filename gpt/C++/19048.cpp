#include <vector>\n#include <iostream>\n\n// Example interface\nclass IData {\npublic:\n    virtual void display() const = 0;\n};\n\n// Template function\ntemplate<typename T>\nIData* createData();\n\n// Example implementation of IData\ntemplate<typename T>\nclass DataImpl : public IData {\npublic:\n    void display() const override {\n        std::cout << "DataImpl of type " << typeid(T).name() << std::endl;\n    }\n};\n\n// Specialization of createData template function\ntemplate<typename T>\nIData* createData() {\n    return new DataImpl<T>();\n}\n\nint main() {\n    // A template class instance\n    std::vector<int> a;\n\n    // Using type of this instance in another template\n    IData* newData = createData<decltype(a)>();\n\n    // Use the created data\n    newData->display();\n\n    // Clean up\n    delete newData;\n\n    return 0;\n}