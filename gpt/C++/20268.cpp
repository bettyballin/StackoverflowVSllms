#include <immintrin.h> // Header for SSE intrinsics\n#include <algorithm>   // For std::min and std::max\n\nvoid process_array_sse(int* array, size_t size, int mask, int& min_val, int& max_val) {\n    __m128i mask_vec = _mm_set1_epi32(mask);\n    __m128i min_vec = _mm_set1_epi32(INT_MAX);\n    __m128i max_vec = _mm_set1_epi32(INT_MIN);\n\n    size_t i = 0;\n    for (; i + 4 <= size; i += 4) {\n        __m128i data = _mm_loadu_si128(reinterpret_cast<__m128i*>(&array[i]));\n        data = _mm_and_si128(data, mask_vec);\n        min_vec = _mm_min_epi32(min_vec, data);\n        max_vec = _mm_max_epi32(max_vec, data);\n    }\n\n    int min_vals[4], max_vals[4];\n    _mm_storeu_si128(reinterpret_cast<__m128i*>(min_vals), min_vec);\n    _mm_storeu_si128(reinterpret_cast<__m128i*>(max_vals), max_vec);\n\n    min_val = *std::min_element(min_vals, min_vals + 4);\n    max_val = *std::max_element(max_vals, max_vals + 4);\n\n    // Process remaining elements\n    for (; i < size; ++i) {\n        int val = array[i] & mask;\n        min_val = std::min(min_val, val);\n        max_val = std::max(max_val, val);\n    }\n}