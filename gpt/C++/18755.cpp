#include <windows.h>\n#include <winioctl.h>\n#include <iostream>\n\nvoid CheckUsnJournalChanges(const std::wstring& volumePath) {\n    HANDLE hVol = CreateFileW(volumePath.c_str(), GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);\n    if (hVol == INVALID_HANDLE_VALUE) {\n        std::cerr << "Failed to open volume." << std::endl;\n        return;\n    }\n\n    USN_JOURNAL_DATA journalData;\n    DWORD bytesReturned;\n    if (!DeviceIoControl(hVol, FSCTL_QUERY_USN_JOURNAL, NULL, 0, &journalData, sizeof(journalData), &bytesReturned, NULL)) {\n        std::cerr << "Failed to query USN journal." << std::endl;\n        CloseHandle(hVol);\n        return;\n    }\n\n    READ_USN_JOURNAL_DATA readData = { 0 };\n    readData.StartUsn = 0;\n    readData.ReasonMask = USN_REASON_FILE_CREATE | USN_REASON_FILE_DELETE | USN_REASON_FILE_MODIFY;\n    readData.ReturnOnlyOnClose = FALSE;\n    readData.Timeout = 0;\n    readData.BytesToWaitFor = 0;\n    readData.UsnJournalID = journalData.UsnJournalID;\n\n    char buffer[4096];\n    if (!DeviceIoControl(hVol, FSCTL_READ_USN_JOURNAL, &readData, sizeof(readData), buffer, sizeof(buffer), &bytesReturned, NULL)) {\n        std::cerr << "Failed to read USN journal." << std::endl;\n        CloseHandle(hVol);\n        return;\n    }\n\n    PUSN_RECORD usnRecord = (PUSN_RECORD)(buffer + sizeof(USN));\n    while ((PBYTE)usnRecord < buffer + bytesReturned) {\n        std::wcout << "File changed: " << usnRecord->FileReferenceNumber << std::endl;\n        usnRecord = (PUSN_RECORD)((PBYTE)usnRecord + usnRecord->RecordLength);\n    }\n\n    CloseHandle(hVol);\n}\n\nint main() {\n    std::wstring volumePath = L"\\\\.\\C:";\n    CheckUsnJournalChanges(volumePath);\n    return 0;\n}