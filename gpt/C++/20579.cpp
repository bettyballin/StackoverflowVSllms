#include <windows.h>\n#include <iostream>\n\nvoid TrimFile(const std::string& filePath, size_t startTrim, size_t endTrim) {\n    // Open the original file\n    HANDLE hFile = CreateFile(filePath.c_str(), GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);\n    if (hFile == INVALID_HANDLE_VALUE) {\n        std::cerr << "Unable to open file" << std::endl;\n        return;\n    }\n\n    // Get the file size\n    LARGE_INTEGER fileSize;\n    if (!GetFileSizeEx(hFile, &fileSize)) {\n        std::cerr << "Unable to get file size" << std::endl;\n        CloseHandle(hFile);\n        return;\n    }\n\n    // Calculate the new file size\n    size_t newFileSize = static_cast<size_t>(fileSize.QuadPart) - startTrim - endTrim;\n    if (newFileSize <= 0) {\n        std::cerr << "Trim sizes are too large" << std::endl;\n        CloseHandle(hFile);\n        return;\n    }\n\n    // Create a new file to store the trimmed data\n    HANDLE hNewFile = CreateFile("trimmed_file.tmp", GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);\n    if (hNewFile == INVALID_HANDLE_VALUE) {\n        std::cerr << "Unable to create new file" << std::endl;\n        CloseHandle(hFile);\n        return;\n    }\n\n    // Allocate buffer for copying data\n    const size_t bufferSize = 64 * 1024; // 64 KB buffer size\n    char buffer[bufferSize];\n\n    // Start copying data from the original file to the new file\n    LARGE_INTEGER offset;\n    offset.QuadPart = startTrim;\n    SetFilePointerEx(hFile, offset, NULL, FILE_BEGIN);\n\n    size_t bytesToWrite = newFileSize;\n    DWORD bytesRead, bytesWritten;\n\n    while (bytesToWrite > 0) {\n        DWORD chunkSize = (bytesToWrite < bufferSize) ? bytesToWrite : bufferSize;\n        if (!ReadFile(hFile, buffer, chunkSize, &bytesRead, NULL) || bytesRead == 0) {\n            std::cerr << "Error reading file" << std::endl;\n            break;\n        }\n        if (!WriteFile(hNewFile, buffer, bytesRead, &bytesWritten, NULL) || bytesWritten != bytesRead) {\n            std::cerr << "Error writing file" << std::endl;\n            break;\n        }\n        bytesToWrite -= bytesRead;\n    }\n\n    // Clean up\n    CloseHandle(hFile);\n    CloseHandle(hNewFile);\n\n    // Replace the original file with the new trimmed file\n    if (!MoveFileEx("trimmed_file.tmp", filePath.c_str(), MOVEFILE_REPLACE_EXISTING)) {\n        std::cerr << "Unable to replace original file" << std::endl;\n    }\n}\n\nint main() {\n    std::string filePath = "large_video_file.mp4";\n    size_t startTrim = 100 * 1024 * 1024; // 100 MB\n    size_t endTrim = 100 * 1024 * 1024;   // 100 MB\n\n    TrimFile(filePath, startTrim, endTrim);\n\n    return 0;\n}