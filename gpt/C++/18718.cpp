#include <windows.h>\n\nLRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)\n{\n    static bool isShuttingDown = false;\n\n    switch (uMsg)\n    {\n    case WM_QUERYENDSESSION:\n        if (lParam & ENDSESSION_CLOSEAPP)\n        {\n            // Application is being closed\n        }\n        else if (lParam & ENDSESSION_LOGOFF)\n        {\n            // User is logging off\n        }\n        else\n        {\n            // Shutting down or restarting\n        }\n        return TRUE;\n\n    case WM_ENDSESSION:\n        if (wParam)\n        {\n            isShuttingDown = true;\n            if (lParam & ENDSESSION_LOGOFF)\n            {\n                // Logging off\n            }\n            else\n            {\n                // Shutting down or restarting\n                // Unfortunately, we can't distinguish here\n            }\n        }\n        else\n        {\n            isShuttingDown = false;\n        }\n        break;\n\n    case WM_CLOSE:\n        if (isShuttingDown)\n        {\n            // Application is being closed due to shutdown or restart\n        }\n        else\n        {\n            // Application is being closed manually\n        }\n        DestroyWindow(hwnd);\n        break;\n\n    case WM_DESTROY:\n        PostQuitMessage(0);\n        break;\n\n    default:\n        return DefWindowProc(hwnd, uMsg, wParam, lParam);\n    }\n    return 0;\n}\n\nint WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PWSTR pCmdLine, int nCmdShow)\n{\n    const wchar_t CLASS_NAME[] = L"Sample Window Class";\n\n    WNDCLASS wc = { };\n\n    wc.lpfnWndProc = WindowProc;\n    wc.hInstance = hInstance;\n    wc.lpszClassName = CLASS_NAME;\n\n    RegisterClass(&wc);\n\n    HWND hwnd = CreateWindowEx(\n        0,\n        CLASS_NAME,\n        L"Sample Window",\n        WS_OVERLAPPEDWINDOW,\n        CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,\n        NULL,\n        NULL,\n        hInstance,\n        NULL\n    );\n\n    if (hwnd == NULL)\n    {\n        return 0;\n    }\n\n    ShowWindow(hwnd, nCmdShow);\n\n    MSG msg = { };\n    while (GetMessage(&msg, NULL, 0, 0))\n    {\n        TranslateMessage(&msg);\n        DispatchMessage(&msg);\n    }\n\n    return 0;\n}