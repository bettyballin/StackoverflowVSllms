#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\nconst int INF = INT_MAX;\n\nint tsp(int mask, int pos, vector<vector<int>>& dist, vector<vector<int>>& dp) {\n    int n = dist.size();\n\n    // If all nodes have been visited, return to the starting node\n    if (mask == (1 << n) - 1) {\n        return dist[pos][0];\n    }\n\n    // Check if the result is already computed\n    if (dp[mask][pos] != -1) {\n        return dp[mask][pos];\n    }\n\n    int ans = INF;\n\n    // Try to go to any other node that hasn't been visited yet\n    for (int city = 0; city < n; city++) {\n        if ((mask & (1 << city)) == 0) {\n            int newAns = dist[pos][city] + tsp(mask | (1 << city), city, dist, dp);\n            ans = min(ans, newAns);\n        }\n    }\n\n    return dp[mask][pos] = ans;\n}\n\nint main() {\n    int n = 4; // Number of nodes\n    vector<vector<int>> dist = {\n        {0, 10, 15, 20},\n        {10, 0, 35, 25},\n        {15, 35, 0, 30},\n        {20, 25, 30, 0}\n    };\n\n    vector<vector<int>> dp(1 << n, vector<int>(n, -1));\n    cout << "The shortest path that covers all nodes is: " << tsp(1, 0, dist, dp) << endl;\n\n    return 0;\n}