#include <windows.h>\n#include "SimpleCOM_i.h"\n#include "SimpleCOM.h"\n\nclass SimpleCOM : public ISimpleCOM\n{\npublic:\n    SimpleCOM() : refCount(1) {}\n\n    // IUnknown methods\n    HRESULT STDMETHODCALLTYPE QueryInterface(REFIID riid, void** ppvObject) override\n    {\n        if (riid == IID_IUnknown || riid == IID_ISimpleCOM)\n        {\n            *ppvObject = static_cast<ISimpleCOM*>(this);\n            AddRef();\n            return S_OK;\n        }\n        *ppvObject = nullptr;\n        return E_NOINTERFACE;\n    }\n\n    ULONG STDMETHODCALLTYPE AddRef() override\n    {\n        return InterlockedIncrement(&refCount);\n    }\n\n    ULONG STDMETHODCALLTYPE Release() override\n    {\n        ULONG ulRefCount = InterlockedDecrement(&refCount);\n        if (0 == refCount)\n        {\n            delete this;\n        }\n        return ulRefCount;\n    }\n\n    // ISimpleCOM method\n    HRESULT STDMETHODCALLTYPE Add(LONG a, LONG b, LONG* result) override\n    {\n        if (!result)\n            return E_POINTER;\n\n        *result = a + b;\n        return S_OK;\n    }\n\nprivate:\n    LONG refCount;\n};\n\n// DLL entry point\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)\n{\n    switch (ul_reason_for_call)\n    {\n    case DLL_PROCESS_ATTACH:\n    case DLL_THREAD_ATTACH:\n    case DLL_THREAD_DETACH:\n    case DLL_PROCESS_DETACH:\n        break;\n    }\n    return TRUE;\n}\n\n// Exported function to create the COM object\nextern "C" HRESULT __stdcall CreateSimpleCOMInstance(REFIID riid, void** ppv)\n{\n    SimpleCOM* pSimpleCOM = new SimpleCOM();\n    if (!pSimpleCOM)\n        return E_OUTOFMEMORY;\n\n    HRESULT hr = pSimpleCOM->QueryInterface(riid, ppv);\n    pSimpleCOM->Release();\n    return hr;\n}