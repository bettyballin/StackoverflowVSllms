#include <iostream>\n\n// Define a Node structure\nstruct Node {\n    int data;\n    Node* next;\n    \n    Node(int val) : data(val), next(nullptr) {}\n};\n\n// Define a LinkedList class\nclass LinkedList {\npublic:\n    Node* head;\n\n    LinkedList() : head(nullptr) {}\n\n    // Function to insert a new node at the beginning\n    void insertAtBeginning(int data) {\n        Node* newNode = new Node(data);\n        newNode->next = head;\n        head = newNode;\n    }\n\n    // Function to display the linked list\n    void display() {\n        Node* temp = head;\n        while (temp != nullptr) {\n            std::cout << temp->data << " -> ";\n            temp = temp->next;\n        }\n        std::cout << "nullptr" << std::endl;\n    }\n\n    // Destructor to free memory\n    ~LinkedList() {\n        Node* current = head;\n        while (current != nullptr) {\n            Node* next = current->next;\n            delete current;\n            current = next;\n        }\n        head = nullptr;\n    }\n};\n\nint main() {\n    LinkedList list;\n    list.insertAtBeginning(10);\n    list.insertAtBeginning(20);\n    list.insertAtBeginning(30);\n\n    list.display(); // Output: 30 -> 20 -> 10 -> nullptr\n\n    return 0;\n}