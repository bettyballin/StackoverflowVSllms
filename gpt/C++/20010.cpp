#include <iostream>\n#include <vector>\n#include <unordered_set>\n#include <string>\n#include <cmath>\n#include <chrono>\n\nusing namespace std;\nusing namespace std::chrono;\n\nbool inSet(int inQuestion, unordered_set<int>& known) {\n    return known.find(inQuestion) != known.end();\n}\n\nvoid calcMain(int upperBound) {\n    vector<int> known;\n    for (int i = 0; i <= upperBound; i++) {\n        bool next = false;\n        int current = i;\n        unordered_set<int> history;\n        while (!next) {\n            string digits = to_string(current);\n            vector<int> squares;\n            for (char charDigit : digits) {\n                int digit = charDigit - '0';\n                int square = pow(digit, 2);\n                squares.push_back(square);\n            }\n            int squaresum = accumulate(squares.begin(), squares.end(), 0);\n            current = squaresum;\n            if (inSet(current, history)) {\n                next = true;\n                if (current == 1) {\n                    known.push_back(i);\n                    // cout << i << "\t";\n                }\n            }\n            history.insert(current);\n        }\n    }\n    // cout << "\n\n";\n}\n\nint main() {\n    while (true) {\n        int upperBound;\n        cout << "Pick an upper bound: ";\n        cin >> upperBound;\n        auto start = high_resolution_clock::now();\n        calcMain(upperBound);\n        auto end = high_resolution_clock::now();\n        double seconds = duration_cast<duration<double>>(end - start).count();\n        cout << seconds << " seconds." << endl << endl;\n    }\n    return 0;\n}