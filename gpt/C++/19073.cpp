float spriteWidth = sprite->stretchX;\nfloat spriteHeight = sprite->stretchY;\nfloat bushWidth = bush->stretchX;\nfloat bushHeight = bush->stretchY;\n\n// Function to check collision between sprite and bush\nbool isColliding(float x1, float y1, float width1, float height1, float x2, float y2, float width2, float height2) {\n    return (x1 < x2 + width2 && x1 + width1 > x2 && y1 < y2 + height2 && y1 + height1 > y2);\n}\n\n// Basic border collision\nif (sprite->x <= 0)\n    sprite->x = 0;\nif (sprite->y <= 0)\n    sprite->y = 0;\nif (sprite->x >= 455 - spriteWidth)\n    sprite->x = 455 - spriteWidth;\nif (sprite->y >= 237 - spriteHeight)\n    sprite->y = 237 - spriteHeight;\n\n// Check for bush collision\nbool bushCol = isColliding(sprite->x, sprite->y, spriteWidth, spriteHeight, bush->x, bush->y, bushWidth, bushHeight);\n\nif (osl_keys->held.down) {\n    if (!isColliding(sprite->x, sprite->y + 4, spriteWidth, spriteHeight, bush->x, bush->y, bushWidth, bushHeight)) {\n        sprite->y += 4;\n        sprite_position = DOWN;\n        SpriteAnimate();\n    }\n}\n\nif (osl_keys->held.up) {\n    if (!isColliding(sprite->x, sprite->y - 4, spriteWidth, spriteHeight, bush->x, bush->y, bushWidth, bushHeight)) {\n        sprite->y -= 4;\n        sprite_position = UP;\n        SpriteAnimate();\n    }\n}\n\nif (osl_keys->held.right) {\n    if (!isColliding(sprite->x + 4, sprite->y, spriteWidth, spriteHeight, bush->x, bush->y, bushWidth, bushHeight)) {\n        sprite->x += 4;\n        sprite_position = RIGHT;\n        SpriteAnimate();\n    }\n}\n\nif (osl_keys->held.left) {\n    if (!isColliding(sprite->x - 4, sprite->y, spriteWidth, spriteHeight, bush->x, bush->y, bushWidth, bushHeight)) {\n        sprite->x -= 4;\n        sprite_position = LEFT;\n        SpriteAnimate();\n    }\n}