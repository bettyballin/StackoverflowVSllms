class Vector2D {\npublic:\n    float x, y;\n\n    Vector2D() : x(0), y(0) {}\n    Vector2D(float x, float y) : x(x), y(y) {}\n\n    // Function to rotate a vector by a certain angle\n    Vector2D rotate(float angle) const {\n        float radians = angle * (M_PI / 180.0); // Convert degrees to radians\n        float cosA = cos(radians);\n        float sinA = sin(radians);\n        return Vector2D(x * cosA - y * sinA, x * sinA + y * cosA);\n    }\n};\n\nclass Component {\nprivate:\n    Vector2D relativePosition;\n    Vector2D rotatedPosition;\n\npublic:\n    Component(float x, float y) : relativePosition(x, y) {}\n\n    const Vector2D& getRotatedPosition(float angle) {\n        rotatedPosition = relativePosition.rotate(angle);\n        return rotatedPosition;\n    }\n};\n\n// Example usage:\nvoid checkCollision(Component& component, float shipRotation) {\n    const Vector2D& position = component.getRotatedPosition(shipRotation);\n    // Use 'position' for collision detection\n}