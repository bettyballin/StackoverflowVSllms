#include <pcap.h>\n#include <iostream>\n\nvoid packetHandler(u_char *userData, const struct pcap_pkthdr *pkthdr, const u_char *packet) {\n    // Process the packet (e.g., extract HTTP requests and log the URLs)\n    std::cout << "Packet captured" << std::endl;\n}\n\nint main() {\n    char *dev;\n    char errbuf[PCAP_ERRBUF_SIZE];\n    pcap_t *handle;\n\n    // Find a network device\n    dev = pcap_lookupdev(errbuf);\n    if (dev == NULL) {\n        std::cerr << "Couldn't find default device: " << errbuf << std::endl;\n        return 1;\n    }\n\n    // Open the device for live capture\n    handle = pcap_open_live(dev, BUFSIZ, 1, 1000, errbuf);\n    if (handle == NULL) {\n        std::cerr << "Couldn't open device " << dev << ": " << errbuf << std::endl;\n        return 1;\n    }\n\n    // Start packet capture\n    if (pcap_loop(handle, 0, packetHandler, NULL) < 0) {\n        std::cerr << "Error occurred during packet capture: " << pcap_geterr(handle) << std::endl;\n        return 1;\n    }\n\n    // Close the handle\n    pcap_close(handle);\n\n    return 0;\n}