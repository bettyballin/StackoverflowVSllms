#include <windows.h>\n#include <iostream>\n\nvoid MonitorDirectory(LPCWSTR directory) {\n    HANDLE hDir = CreateFile(\n        directory,\n        FILE_LIST_DIRECTORY,\n        FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,\n        NULL,\n        OPEN_EXISTING,\n        FILE_FLAG_BACKUP_SEMANTICS,\n        NULL\n    );\n\n    if (hDir == INVALID_HANDLE_VALUE) {\n        std::cerr << "Failed to open directory handle." << std::endl;\n        return;\n    }\n\n    char buffer[1024];\n    DWORD bytesReturned;\n\n    while (TRUE) {\n        if (ReadDirectoryChangesW(\n            hDir,\n            &buffer,\n            sizeof(buffer),\n            TRUE,\n            FILE_NOTIFY_CHANGE_FILE_NAME | FILE_NOTIFY_CHANGE_DIR_NAME | \n            FILE_NOTIFY_CHANGE_ATTRIBUTES | FILE_NOTIFY_CHANGE_SIZE | \n            FILE_NOTIFY_CHANGE_LAST_WRITE | FILE_NOTIFY_CHANGE_LAST_ACCESS | \n            FILE_NOTIFY_CHANGE_CREATION | FILE_NOTIFY_CHANGE_SECURITY,\n            &bytesReturned,\n            NULL,\n            NULL\n        )) {\n            FILE_NOTIFY_INFORMATION* info = (FILE_NOTIFY_INFORMATION*)buffer;\n            do {\n                std::wcout << "File changed: " << std::wstring(info->FileName, info->FileNameLength / sizeof(WCHAR)) << std::endl;\n                info = (FILE_NOTIFY_INFORMATION*)((LPBYTE)info + info->NextEntryOffset);\n            } while (info->NextEntryOffset != 0);\n        } else {\n            std::cerr << "Failed to read directory changes." << std::endl;\n            break;\n        }\n    }\n\n    CloseHandle(hDir);\n}\n\nint main() {\n    MonitorDirectory(L"C:\\path\\to\\your\\directory");\n    return 0;\n}