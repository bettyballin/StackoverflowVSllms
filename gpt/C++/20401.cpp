// Point.h\n#pragma once\n\nclass Point {\npublic:\n    Point(int x, int y);\n    int getX() const;\n    int getY() const;\n\nprivate:\n    int x, y;\n};\n\n// Point.cpp\n#include "Point.h"\n\nPoint::Point(int x, int y) : x(x), y(y) {}\n\nint Point::getX() const {\n    return x;\n}\n\nint Point::getY() const {\n    return y;\n}\n\n// PointUtils.h\n#pragma once\n#include "Point.h"\n\nnamespace PointUtils {\n    double distance(const Point& p1, const Point& p2);\n}\n\n// PointUtils.cpp\n#include "PointUtils.h"\n#include <cmath>\n\ndouble PointUtils::distance(const Point& p1, const Point& p2) {\n    int dx = p1.getX() - p2.getX();\n    int dy = p1.getY() - p2.getY();\n    return std::sqrt(dx * dx + dy * dy);\n}\n\n// Main.cpp\n#include "Point.h"\n#include "PointUtils.h"\n#include <iostream>\n\nint main() {\n    Point p1(0, 0);\n    Point p2(3, 4);\n    std::cout << "Distance: " << PointUtils::distance(p1, p2) << std::endl;\n    return 0;\n}