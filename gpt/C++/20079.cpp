#include <mutex>\n#include <vector>\n\nstruct SceneNode {\n    // Node data\n    bool dirty; // Dirty flag\n};\n\n// Shared data structures\nstd::vector<SceneNode> physicsWorld;\nstd::vector<SceneNode> graphicsWorld;\nstd::mutex worldMutex;\n\nvoid updatePhysicsWorld() {\n    // Update physicsWorld and set dirty flags\n    for (auto &node : physicsWorld) {\n        // Update node\n        node.dirty = true; // Mark as dirty\n    }\n}\n\nvoid syncWorlds() {\n    std::lock_guard<std::mutex> lock(worldMutex);\n    for (size_t i = 0; i < physicsWorld.size(); ++i) {\n        if (physicsWorld[i].dirty) {\n            graphicsWorld[i] = physicsWorld[i]; // Copy only dirty nodes\n            physicsWorld[i].dirty = false; // Reset dirty flag\n        }\n    }\n}\n\nvoid renderGraphics() {\n    std::lock_guard<std::mutex> lock(worldMutex);\n    // Render using graphicsWorld\n}\n\nint main() {\n    // Initialize physicsWorld and graphicsWorld with the same size\n    // ...\n\n    // Game loop\n    while (gameRunning) {\n        updatePhysicsWorld();\n        syncWorlds();\n        renderGraphics();\n    }\n\n    return 0;\n}