#include "stdafx.h"\n#include <stdio.h>\n#include <assert.h>\n#include <jpeglib.h>\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n    struct jpeg_decompress_struct cinfo;\n    struct jpeg_error_mgr jerr;\n    JSAMPARRAY buffer;\n    int row_stride;\n\n    // Initialize the JPEG decompression object with default error handling\n    cinfo.err = jpeg_std_error(&jerr);\n    jpeg_create_decompress(&cinfo);\n\n    FILE* infile;\n    errno_t err = fopen_s(&infile, "..\\Sample.jpg", "rb");\n    if (err != 0) {\n        fprintf(stderr, "Error opening file\n");\n        return 1;\n    }\n\n    // Specify the data source (the file)\n    jpeg_stdio_src(&cinfo, infile);\n\n    // Read the JPEG header\n    if (jpeg_read_header(&cinfo, TRUE) != JPEG_HEADER_OK) {\n        fprintf(stderr, "Error reading JPEG header\n");\n        fclose(infile);\n        jpeg_destroy_decompress(&cinfo);\n        return 1;\n    }\n\n    // Start decompression\n    jpeg_start_decompress(&cinfo);\n\n    // Allocate buffer for scanlines\n    row_stride = cinfo.output_width * cinfo.output_components;\n    buffer = (*cinfo.mem->alloc_sarray)\n        ((j_common_ptr)&cinfo, JPOOL_IMAGE, row_stride, 1);\n\n    // Process scanlines\n    while (cinfo.output_scanline < cinfo.output_height) {\n        (void)jpeg_read_scanlines(&cinfo, buffer, 1);\n        // Process the scanline buffer here\n    }\n\n    // Finish decompression\n    jpeg_finish_decompress(&cinfo);\n\n    // Clean up and release resources\n    jpeg_destroy_decompress(&cinfo);\n    fclose(infile);\n\n    return 0;\n}