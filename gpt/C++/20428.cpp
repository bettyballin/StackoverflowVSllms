#include <windows.h>\n#include <iostream>\n\n#define BUFFER_SIZE 1024 * 1024 // 1 MB\n#define FILE_SIZE 1024 * 1024 * 100 // 100 MB\n\nvoid TestDiskThroughput() {\n    HANDLE fileHandle;\n    LARGE_INTEGER frequency, start, end;\n    DWORD bytesWritten, bytesRead;\n    char* buffer = new char[BUFFER_SIZE];\n    memset(buffer, 'A', BUFFER_SIZE);\n\n    // Create a test file\n    fileHandle = CreateFile("testfile.dat", GENERIC_WRITE | GENERIC_READ, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);\n    if (fileHandle == INVALID_HANDLE_VALUE) {\n        std::cerr << "Failed to create file." << std::endl;\n        delete[] buffer;\n        return;\n    }\n\n    // Get the frequency of the performance counter\n    QueryPerformanceFrequency(&frequency);\n\n    // Measure write throughput\n    QueryPerformanceCounter(&start);\n    for (DWORD written = 0; written < FILE_SIZE; written += BUFFER_SIZE) {\n        if (!WriteFile(fileHandle, buffer, BUFFER_SIZE, &bytesWritten, NULL)) {\n            std::cerr << "Failed to write to file." << std::endl;\n            CloseHandle(fileHandle);\n            delete[] buffer;\n            return;\n        }\n    }\n    QueryPerformanceCounter(&end);\n    double writeTime = static_cast<double>(end.QuadPart - start.QuadPart) / frequency.QuadPart;\n    double writeThroughput = (static_cast<double>(FILE_SIZE) / (1024 * 1024)) / writeTime;\n\n    // Measure read throughput\n    SetFilePointer(fileHandle, 0, NULL, FILE_BEGIN);\n    QueryPerformanceCounter(&start);\n    for (DWORD read = 0; read < FILE_SIZE; read += BUFFER_SIZE) {\n        if (!ReadFile(fileHandle, buffer, BUFFER_SIZE, &bytesRead, NULL)) {\n            std::cerr << "Failed to read from file." << std::endl;\n            CloseHandle(fileHandle);\n            delete[] buffer;\n            return;\n        }\n    }\n    QueryPerformanceCounter(&end);\n    double readTime = static_cast<double>(end.QuadPart - start.QuadPart) / frequency.QuadPart;\n    double readThroughput = (static_cast<double>(FILE_SIZE) / (1024 * 1024)) / readTime;\n\n    // Output results\n    std::cout << "Write Throughput: " << writeThroughput << " MB/s" << std::endl;\n    std::cout << "Read Throughput: " << readThroughput << " MB/s" << std::endl;\n\n    // Clean up\n    CloseHandle(fileHandle);\n    delete[] buffer;\n    DeleteFile("testfile.dat");\n}\n\nint main() {\n    TestDiskThroughput();\n    return 0;\n}