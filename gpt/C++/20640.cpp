#include <windows.h>\n#include <sddl.h>\n#include <stdio.h>\n\nvoid CreateSharedMemory()\n{\n    SECURITY_ATTRIBUTES sa;\n    PSECURITY_DESCRIPTOR pSD = NULL;\n    HANDLE hMapFile;\n\n    // Define the security string for the desired permissions\n    const char *securityString = "D:(A;OICI;GA;;;SY)(A;OICI;GA;;;BA)(A;OICI;GRGW;;;IU)";\n\n    // Convert the security string to a security descriptor\n    if (ConvertStringSecurityDescriptorToSecurityDescriptorA(securityString, SDDL_REVISION_1, &pSD, NULL))\n    {\n        sa.nLength = sizeof(sa);\n        sa.lpSecurityDescriptor = pSD;\n        sa.bInheritHandle = FALSE;\n\n        // Create the file mapping with the specified security attributes\n        hMapFile = CreateFileMapping(\n            INVALID_HANDLE_VALUE,    // use paging file\n            &sa,                     // security attributes\n            PAGE_READWRITE,          // read/write access\n            0,                       // maximum object size (high-order DWORD)\n            1024,                    // maximum object size (low-order DWORD)\n            "Global\\MySharedMemory" // name of mapping object\n        );\n\n        if (hMapFile == NULL)\n        {\n            printf("Could not create file mapping object (%d).\n", GetLastError());\n            return;\n        }\n\n        // Do something with the file mapping object...\n\n        // Clean up\n        CloseHandle(hMapFile);\n        LocalFree(pSD);\n    }\n    else\n    {\n        printf("Could not convert string security descriptor (%d).\n", GetLastError());\n    }\n}\n\nint main()\n{\n    CreateSharedMemory();\n    return 0;\n}