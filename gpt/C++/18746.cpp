#include <zlib.h>\n\nvoid CompressGzip(const std::string& content, std::string& compressed_output) {\n    z_stream stream;\n    memset(&stream, 0, sizeof(stream));\n\n    if (deflateInit2(&stream, Z_BEST_COMPRESSION, Z_DEFLATED, 15 + 16, 8, Z_DEFAULT_STRATEGY) != Z_OK) {\n        throw std::runtime_error("deflateInit2() failed.");\n    }\n\n    stream.next_in = (Bytef *)content.data();\n    stream.avail_in = content.size();\n\n    int ret;\n    char buffer[32768];\n    do {\n        stream.next_out = reinterpret_cast<Bytef *>(buffer);\n        stream.avail_out = sizeof(buffer);\n        ret = deflate(&stream, Z_FINISH);\n        if (compressed_output.size() < stream.total_out) {\n            compressed_output.append(buffer, stream.total_out - compressed_output.size());\n        }\n    } while (ret == Z_OK);\n\n    deflateEnd(&stream);\n\n    if (ret != Z_STREAM_END) {\n        throw std::runtime_error("deflate() failed.");\n    }\n}\n\nint main() {\n    std::string content = "<html>Your HTML content here</html>"; // Your HTML content\n    std::string compressed_content;\n    CompressGzip(content, compressed_content);\n\n    std::cout << "Content-Encoding: gzip\r\n";\n    std::cout << "Content-Length: " << compressed_content.size() << "\r\n";\n    std::cout << "Content-Type: text/html\r\n";\n    std::cout << "\r\n";\n    std::cout.write(compressed_content.data(), compressed_content.size());\n\n    return 0;\n}