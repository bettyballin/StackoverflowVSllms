#include <windows.h>\n#include <mmdeviceapi.h>\n#include <audiopolicy.h>\n\nclass AudioEndpointVolumeNotifierImpl : public IAudioSessionEvents\n{\nprivate:\n    LONG _cRef;\n\npublic:\n    AudioEndpointVolumeNotifierImpl() : _cRef(1) {}\n    ~AudioEndpointVolumeNotifierImpl() {}\n\n    // IAudioSessionEvents methods\n    HRESULT STDMETHODCALLTYPE OnSimpleVolumeChanged(float NewVolume, BOOL NewMute, LPCGUID EventContext) override;\n    HRESULT STDMETHODCALLTYPE OnChannelVolumeChanged(DWORD ChannelCount, float NewChannelVolumeArray[], DWORD ChangedChannel, LPCGUID EventContext) override { return S_OK; }\n    HRESULT STDMETHODCALLTYPE OnDisplayNameChanged(LPCWSTR NewDisplayName, LPCGUID EventContext) override { return S_OK; }\n    HRESULT STDMETHODCALLTYPE OnGroupingParamChanged(LPCGUID NewGroupingParam, LPCGUID EventContext) override { return S_OK; }\n    HRESULT STDMETHODCALLTYPE OnIconPathChanged(LPWSTR NewIconPath, LPCGUID EventContext) override { return S_OK; }\n    HRESULT STDMETHODCALLTYPE OnSessionDisconnected(AudioSessionDisconnectReason DisconnectReason) override { return S_OK; }\n    HRESULT STDMETHODCALLTYPE OnStateChanged(AudioSessionState NewState) override { return S_OK; }\n\n    // IUnknown methods\n    ULONG STDMETHODCALLTYPE AddRef() override\n    {\n        return InterlockedIncrement(&_cRef);\n    }\n\n    ULONG STDMETHODCALLTYPE Release() override\n    {\n        ULONG ulRef = InterlockedDecrement(&_cRef);\n        if (0 == ulRef)\n        {\n            delete this;\n        }\n        return ulRef;\n    }\n\n    HRESULT STDMETHODCALLTYPE QueryInterface(REFIID riid, VOID **ppvInterface) override\n    {\n        if (IID_IUnknown == riid || __uuidof(IAudioSessionEvents) == riid)\n        {\n            AddRef();\n            *ppvInterface = static_cast<IAudioSessionEvents*>(this);\n            return S_OK;\n        }\n        *ppvInterface = NULL;\n        return E_NOINTERFACE;\n    }\n};\n\n// Corresponding .cpp\nHRESULT STDMETHODCALLTYPE AudioEndpointVolumeNotifierImpl::OnSimpleVolumeChanged(float NewVolume, BOOL NewMute, LPCGUID EventContext)\n{\n    // Your implementation of PostStatusChange(NewVolume)\n    return S_OK;\n}