#include <windows.h>\n#include <process.h>\n#include <iostream>\n\nunsigned Counter = 0;\nvolatile bool terminateThread = false; // Global flag to signal thread termination\n\nunsigned int __stdcall DoSomething(void * /*dummy*/)\n{\n    while (!terminateThread)\n    {\n        ++Counter;\n        // Simulate some work\n        Sleep(100); // Adjust this as needed\n    }\n    _endthreadex(0);\n    return 0;\n}\n\nvoid f()\n{\n    HANDLE hThread;\n    unsigned threadID;\n\n    // Create the second thread\n    hThread = (HANDLE)_beginthreadex(NULL, 0, DoSomething, NULL, 0, &threadID);\n\n    // Wait for the thread to finish for a maximum of 5 seconds\n    if (WAIT_TIMEOUT == WaitForSingleObject(hThread, 5000))\n    {\n        // Signal the thread to terminate\n        terminateThread = true;\n\n        // Wait for the thread to exit cleanly\n        WaitForSingleObject(hThread, INFINITE);\n        std::wcout << L"Process is Timed Out";\n    }\n    else\n    {\n        std::wcout << L"Process is Ended OK";\n    }\n\n    CloseHandle(hThread);\n\n    std::wcout << Counter;\n}\n\nint main()\n{\n    f();\n    return 0;\n}