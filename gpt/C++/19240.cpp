#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint levenshtein(const string &s1, const string &s2) {\n    string::size_type N1 = s1.length();\n    string::size_type N2 = s2.length();\n    string::size_type i, j;\n    vector<int> T(N2 + 1);\n\n    for (i = 0; i <= N2; i++)\n        T[i] = i;\n\n    for (i = 0; i < N1; i++) {\n        T[0] = i + 1;\n        int corner = i;\n        for (j = 0; j < N2; j++) {\n            int upper = T[j + 1];\n            if (s1[i] == s2[j])\n                T[j + 1] = corner;\n            else\n                T[j + 1] = min(T[j], min(upper, corner)) + 1;\n            corner = upper;\n        }\n    }\n    return T[N2];\n}\n\nvector<string> suggestCorrections(const string& foundWord, const vector<string>& dictionary) {\n    vector<string> suggestions;\n    int N = foundWord.length();\n\n    for (const string& dictWord : dictionary) {\n        int len = dictWord.length();\n        if (levenshtein(foundWord, dictWord) == 1) {\n            // Check three cases\n            if ((len == N) || (len == N + 1) || (len == N - 1)) {\n                suggestions.push_back(dictWord);\n            }\n        }\n    }\n\n    return suggestions;\n}\n\nint main() {\n    vector<string> dictionary = {"bear", "bears", "barn", "bean", "beard", "bearer"};\n    string foundWord = "bear";\n\n    vector<string> suggestions = suggestCorrections(foundWord, dictionary);\n\n    for (const string& suggestion : suggestions) {\n        cout << suggestion << endl;\n    }\n\n    return 0;\n}