struct csv_column {\n    Sheet * sheet;\n    Cell ** array;\n    int array_max;\n    int array_size;\n    int row;\n    int field;\n    char * value;\n};\n\nstatic void cb1(void *s, size_t length, void *data) {\n    struct csv_column *column = (struct csv_column *) data;\n    int array_max = column->array_max;\n\n    // Resize the cell array here.\n    if (column->field >= array_max) {\n        int new_max = 2 * array_max;\n        column->array = (Cell **) g_realloc(column->array, new_max * sizeof(Cell*));\n        \n        // Initialize new elements\n        for (int ii = array_max; ii < new_max; ii++) {\n            column->array[ii] = NULL;\n        }\n\n        column->array_max = new_max;\n    }\n\n    // Ensure the current field is initialized\n    if (column->array[column->field] == NULL) {\n        column->array[column->field] = cell_new();\n    }\n\n    Cell *cell = column->array[column->field];\n    cell->set_row(cell, column->row);\n    cell->set_column(cell, column->field++);\n    cell->set_value_length(cell, s, length);\n}\n\nCsvParser::CsvParser(Workbook *wb, FILE *log, int verbosity, int maxOfFields) {\n    this->wb = wb;\n    this->log = log;\n    this->verbosity = verbosity;\n    this->sizeOfFields = 0;\n    this->maxOfFields = maxOfFields;\n    this->fields = (Cell **) g_malloc(maxOfFields * sizeof(Cell*));\n\n    for (int ii = 0; ii < maxOfFields; ii++) {\n        this->fields[ii] = NULL;\n    }\n}\n\nCsvParser::~CsvParser(void) {\n    for (int ii = 0; ii < maxOfFields; ii++) {\n        if (this->fields[ii]) {\n            this->fields[ii]->destroy(this->fields[ii]);\n        }\n    }\n\n    g_free(this->fields);\n}