#include <iostream>\n#include <string>\n#include <fstream>\n#include <sys/time.h>\n#include <sys/wait.h>\n#include <unistd.h>\n\nusing namespace std;\n\nstruct timeval first, second, lapsed;\nstruct timezone tzp;\n\nint main(int argc, char* argv[]) // query, file, num. of processes.\n{\n    int pCount = 5; // process count\n\n    gettimeofday(&first, &tzp); // start time\n\n    pid_t* pID = new pid_t[pCount];\n\n    for(int indexOfProcess = 0; indexOfProcess < pCount; indexOfProcess++)\n    {\n        pID[indexOfProcess] = fork();\n\n        if (pID[indexOfProcess] == 0) // child\n        {\n            // code only executed by child process\n\n            // magic here\n\n            // The End\n            exit(0);\n        }\n        else if (pID[indexOfProcess] < 0) // failed to fork\n        {\n            cerr << "Failed to fork" << endl;\n            exit(1);\n        }\n    }\n\n    // Parent process waits for all child processes to finish\n    for(int indexOfProcess = 0; indexOfProcess < pCount; indexOfProcess++)\n    {\n        waitpid(pID[indexOfProcess], NULL, 0);\n    }\n\n    // Stop the timer\n    gettimeofday(&second, &tzp);\n\n    if (first.tv_usec > second.tv_usec)\n    {\n        second.tv_usec += 1000000;\n        second.tv_sec--;\n    }\n\n    lapsed.tv_usec = second.tv_usec - first.tv_usec;\n    lapsed.tv_sec = second.tv_sec - first.tv_sec;\n\n    cout << "Job performed in " << lapsed.tv_sec << " sec and "\n         << lapsed.tv_usec << " usec" << endl << endl;\n\n    delete[] pID;\n    return 0;\n}