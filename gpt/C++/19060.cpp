#include <windows.h>\n#include <tchar.h>\n\n// Global variables\nHINSTANCE hInst;\nLRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);\n\n// Entry point\nint APIENTRY _tWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPTSTR lpCmdLine, int nCmdShow)\n{\n    UNREFERENCED_PARAMETER(hPrevInstance);\n    UNREFERENCED_PARAMETER(lpCmdLine);\n\n    hInst = hInstance;\n\n    // Register window class\n    WNDCLASS wc = {0};\n    wc.lpfnWndProc = WndProc;\n    wc.hInstance = hInstance;\n    wc.lpszClassName = _T("MessageOnlyWindowClass");\n\n    if (!RegisterClass(&wc))\n    {\n        return 0;\n    }\n\n    // Create message-only window\n    HWND hWnd = CreateWindow(\n        _T("MessageOnlyWindowClass"), \n        NULL, \n        0, \n        0, 0, 0, 0, \n        HWND_MESSAGE, \n        NULL, \n        hInstance, \n        NULL\n    );\n\n    if (!hWnd)\n    {\n        return 0;\n    }\n\n    // Message loop\n    MSG msg;\n    while (GetMessage(&msg, NULL, 0, 0))\n    {\n        TranslateMessage(&msg);\n        DispatchMessage(&msg);\n    }\n\n    return (int)msg.wParam;\n}\n\n// Window procedure\nLRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)\n{\n    switch (message)\n    {\n    case WM_COPYDATA:\n        // Handle WM_COPYDATA message\n        // Do something with the data\n        break;\n    case WM_DESTROY:\n        PostQuitMessage(0);\n        break;\n    default:\n        return DefWindowProc(hWnd, message, wParam, lParam);\n    }\n    return 0;\n}