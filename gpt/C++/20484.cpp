#include <iostream>\n#include <vector>\n#include <cstdlib>\n#include <ctime>\n#include <stack>\n\nconst int WIDTH = 21; // Odd width for better maze visualization\nconst int HEIGHT = 11; // Odd height for better maze visualization\n\nvoid initializeMaze(std::vector<std::vector<char>>& maze) {\n    for (int y = 0; y < HEIGHT; y++) {\n        for (int x = 0; x < WIDTH; x++) {\n            maze[y][x] = '#'; // Initialize all cells as walls\n        }\n    }\n}\n\nstd::vector<std::pair<int, int>> getNeighbors(int x, int y) {\n    std::vector<std::pair<int, int>> neighbors;\n    if (x > 1) neighbors.push_back({x - 2, y});\n    if (x < WIDTH - 2) neighbors.push_back({x + 2, y});\n    if (y > 1) neighbors.push_back({x, y - 2});\n    if (y < HEIGHT - 2) neighbors.push_back({x, y + 2});\n    return neighbors;\n}\n\nvoid generateMaze(std::vector<std::vector<char>>& maze) {\n    std::stack<std::pair<int, int>> stack;\n    stack.push({1, 1});\n    maze[1][1] = ' ';\n\n    while (!stack.empty()) {\n        int x = stack.top().first;\n        int y = stack.top().second;\n        stack.pop();\n\n        auto neighbors = getNeighbors(x, y);\n        std::random_shuffle(neighbors.begin(), neighbors.end());\n\n        for (auto& n : neighbors) {\n            int nx = n.first;\n            int ny = n.second;\n            if (maze[ny][nx] == '#') {\n                maze[ny][nx] = ' ';\n                maze[(y + ny) / 2][(x + nx) / 2] = ' '; // Remove wall between cells\n                stack.push({nx, ny});\n            }\n        }\n    }\n}\n\nvoid printMaze(const std::vector<std::vector<char>>& maze) {\n    for (const auto& row : maze) {\n        for (const auto& cell : row) {\n            std::cout << cell;\n        }\n        std::cout << std::endl;\n    }\n}\n\nint main() {\n    std::srand(std::time(0));\n\n    std::vector<std::vector<char>> maze(HEIGHT, std::vector<char>(WIDTH));\n    initializeMaze(maze);\n    generateMaze(maze);\n    printMaze(maze);\n\n    return 0;\n}