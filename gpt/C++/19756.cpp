// User.h\n#pragma once\n\nclass User {\npublic:\n    static User& getInstance();\n    void initialize();\n    void cleanup();\n\nprivate:\n    User() = default;\n    ~User() = default;\n    User(const User&) = delete;\n    User& operator=(const User&) = delete;\n};\n\n// User.cpp\n#include "User.h"\n#include "Resources.h" // Ensure this includes the Resources header\n\nUser& User::getInstance() {\n    static User instance;\n    return instance;\n}\n\nvoid User::initialize() {\n    // Ensure Resources is initialized before User\n    Resources::getInstance().initialize();\n    // Initialization code here\n}\n\nvoid User::cleanup() {\n    // Cleanup code here\n    // Ensure Resources cleanup is done after User\n    Resources::getInstance().cleanup();\n}