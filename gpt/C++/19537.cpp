#include <vector>\n#include <cassert>\n#include <algorithm> // For std::swap\n\nvoid reorder_in_place(std::vector<char>& vA, const std::vector<size_t>& vOrder) {\n    assert(vA.size() == vOrder.size());\n    std::vector<bool> visited(vA.size(), false);\n\n    for (size_t i = 0; i < vA.size(); ++i) {\n        if (visited[i] || vOrder[i] == i) {\n            continue;\n        }\n\n        size_t j = i;\n        while (!visited[j]) {\n            visited[j] = true;\n            size_t next = vOrder[j];\n            if (next != j) {\n                std::swap(vA[j], vA[next]);\n            }\n            j = next;\n        }\n    }\n}\n\nint main() {\n    char   A[]     = { 'a', 'b', 'c' };\n    size_t ORDER[] = { 1, 0, 2 };\n\n    std::vector<char> vA(A, A + sizeof(A) / sizeof(*A));\n    std::vector<size_t> vOrder(ORDER, ORDER + sizeof(ORDER) / sizeof(*ORDER));\n\n    reorder_in_place(vA, vOrder);\n\n    // vA is now { 'b', 'a', 'c' }\n    for (char c : vA) {\n        std::cout << c << " "; // Output: b a c\n    }\n\n    return 0;\n}