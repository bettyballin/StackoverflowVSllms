#include <iostream>\n#include <memory>\n#include <vector>\n\nclass Shape {\npublic:\n    virtual void draw() const = 0; // Pure virtual function\n    virtual ~Shape() = default; // Virtual destructor\n};\n\nclass Circle : public Shape {\npublic:\n    void draw() const override {\n        std::cout << "Drawing Circle" << std::endl;\n    }\n};\n\nclass Rectangle : public Shape {\npublic:\n    void draw() const override {\n        std::cout << "Drawing Rectangle" << std::endl;\n    }\n};\n\nint main() {\n    std::vector<std::unique_ptr<Shape>> shapes;\n    shapes.push_back(std::make_unique<Circle>());\n    shapes.push_back(std::make_unique<Rectangle>());\n\n    for (const auto& shape : shapes) {\n        shape->draw();\n    }\n\n    return 0;\n}