template <typename T>\nclass shared_ptr {\nprivate:\n    T* ptr;\n    int* ref_count;\n\npublic:\n    explicit shared_ptr(T* p = nullptr) : ptr(p), ref_count(new int(1)) {}\n\n    shared_ptr(const shared_ptr<T>& other) : ptr(other.ptr), ref_count(other.ref_count) {\n        ++(*ref_count);\n    }\n\n    shared_ptr<T>& operator=(const shared_ptr<T>& other) {\n        if (this != &other) {\n            if (--(*ref_count) == 0) {\n                delete ptr;\n                delete ref_count;\n            }\n            ptr = other.ptr;\n            ref_count = other.ref_count;\n            ++(*ref_count);\n        }\n        return *this;\n    }\n\n    ~shared_ptr() {\n        if (--(*ref_count) == 0) {\n            delete ptr;\n            delete ref_count;\n        }\n    }\n\n    T& operator*() const { return *ptr; }\n    T* operator->() const { return ptr; }\n    T* get() const { return ptr; }\n};