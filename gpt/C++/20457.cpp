#include <iostream>\n#include <array>\n#include <cstdlib>\n#include <ctime>\n\n// Compile-time Fibonacci calculation\nconstexpr unsigned fibonacci(unsigned n) {\n    return (n <= 1) ? n : fibonacci(n - 1) + fibonacci(n - 2);\n}\n\n// Generate a std::array of Fibonacci numbers up to a max size\ntemplate <std::size_t N>\nconstexpr std::array<unsigned, N> generate_fibonacci_table() {\n    std::array<unsigned, N> table = {};\n    for (std::size_t i = 0; i < N; ++i) {\n        table[i] = fibonacci(i);\n    }\n    return table;\n}\n\n// Define the max size of the Fibonacci table\nconstexpr std::size_t fibbMax = 20;\nconstexpr auto fibonacciTable = generate_fibonacci_table<fibbMax>();\n\nint main() {\n    std::srand(static_cast<unsigned>(std::time(0)));\n\n    // Get index into sequence\n    unsigned fibb = std::rand() % fibbMax;\n\n    std::cout << "Fibonacci(" << fibb << ") = " << fibonacciTable[fibb] << std::endl;\n\n    return 0;\n}