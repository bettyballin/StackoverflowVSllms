#include <iostream>\n#include <unordered_map>\n#include <functional>\n\ntemplate <typename Arg, typename Result>\nclass Memoization\n{\npublic:\n    std::function<Result(Arg)> Memoize(std::function<Result(Arg)> func)\n    {\n        return [this, func](Arg arg) mutable {\n            auto it = cache.find(arg);\n            if (it != cache.end())\n            {\n                return it->second;\n            }\n            Result result = func(arg);\n            cache[arg] = result;\n            return result;\n        };\n    }\n\nprivate:\n    std::unordered_map<Arg, Result> cache;\n};\n\nint ComputeStuff(int x)\n{\n    // Simulate a CPU-intensive computation\n    return x * x; // Example computation\n}\n\nint main()\n{\n    Memoization<int, int> memo;\n    auto memoizedComputeStuff = memo.Memoize(ComputeStuff);\n\n    std::cout << memoizedComputeStuff(5) << std::endl; // Computed and cached\n    std::cout << memoizedComputeStuff(5) << std::endl; // Retrieved from cache\n\n    return 0;\n}