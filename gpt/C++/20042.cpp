#include <iostream>\n   #include <unordered_map>\n   #include <vector>\n   #include <string>\n\n   class TokenTransformer {\n   public:\n       TokenTransformer() {\n           // Define state transitions\n           transitions = {\n               {0, {{1, 1}, {0, 0}}},\n               {1, {{1, 2}, {4, 3}, {0, 0}}},\n               {2, {{1, 4}, {0, 0}}},\n               // Add more transitions as needed\n           };\n\n           // Define output tokens for final states\n           outputs = {\n               {3, "Out0"},\n               {4, "Out3"},\n               // Add more outputs as needed\n           };\n       }\n\n       std::string transform(const std::vector<int>& input) {\n           int state = 0;\n           for (int token : input) {\n               if (transitions[state].find(token) != transitions[state].end()) {\n                   state = transitions[state][token];\n               } else {\n                   return "No Output";\n               }\n           }\n           return outputs.count(state) ? outputs[state] : "No Output";\n       }\n\n   private:\n       std::unordered_map<int, std::unordered_map<int, int>> transitions;\n       std::unordered_map<int, std::string> outputs;\n   };\n\n   int main() {\n       TokenTransformer transformer;\n       std::vector<int> input = {0, 1, 0, 1};\n       std::cout << transformer.transform(input) << std::endl; // Outputs "Out3"\n\n       return 0;\n   }