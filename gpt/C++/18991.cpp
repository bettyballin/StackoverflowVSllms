bool decryptFile(const QString &inputFilePath, const QString &outputFilePath, const QString &password) {\n    QFile inputFile(inputFilePath);\n    QFile outputFile(outputFilePath);\n\n    if (!inputFile.open(QIODevice::ReadOnly) || !outputFile.open(QIODevice::WriteOnly)) {\n        return false;\n    }\n\n    QByteArray header = inputFile.read(8);\n    if (header != "Salted__") {\n        return false;\n    }\n\n    QByteArray salt = inputFile.read(8);\n    QByteArray key = deriveKey(password, salt);\n\n    EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();\n    EVP_DecryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, \n                       reinterpret_cast<const unsigned char*>(key.constData()), \n                       reinterpret_cast<const unsigned char*>(salt.constData()));\n\n    QByteArray buffer;\n    QByteArray decryptedBuffer;\n    int outLen;\n\n    while (!inputFile.atEnd()) {\n        buffer = inputFile.read(4096);\n        decryptedBuffer.resize(buffer.size() + AES_BLOCK_SIZE);\n\n        EVP_DecryptUpdate(ctx, reinterpret_cast<unsigned char*>(decryptedBuffer.data()), &outLen, \n                          reinterpret_cast<const unsigned char*>(buffer.constData()), buffer.size());\n\n        outputFile.write(decryptedBuffer.constData(), outLen);\n    }\n\n    EVP_DecryptFinal_ex(ctx, reinterpret_cast<unsigned char*>(decryptedBuffer.data()), &outLen);\n    outputFile.write(decryptedBuffer.constData(), outLen);\n\n    EVP_CIPHER_CTX_free(ctx);\n    return true;\n}