#include <iostream>\n#include <ctime>\n\nconst int SECONDS_PER_MINUTE = 60;\nconst int SECONDS_PER_HOUR = 3600;\nconst int SECONDS_PER_DAY = 86400;\nconst int DAYS_PER_YEAR = 365;\nconst int DAYS_IN_LEAP_YEAR = 366;\n\n// Check if the year is a leap year\nbool isLeapYear(int year) {\n    if (year % 4 == 0) {\n        if (year % 100 == 0) {\n            if (year % 400 == 0) {\n                return true;\n            }\n            return false;\n        }\n        return true;\n    }\n    return false;\n}\n\n// Calculate the number of days in a given year\nint daysInYear(int year) {\n    return isLeapYear(year) ? DAYS_IN_LEAP_YEAR : DAYS_PER_YEAR;\n}\n\n// Calculate the number of days in a given month\nint daysInMonth(int year, int month) {\n    static const int daysPerMonth[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n    if (month == 1 && isLeapYear(year)) {\n        return 29;\n    }\n    return daysPerMonth[month];\n}\n\n// Calculate the time_t value for a given date/time\ntime_t custom_mktime(struct tm* timeptr) {\n    int year = timeptr->tm_year + 1900;\n    int month = timeptr->tm_mon;\n    int day = timeptr->tm_mday - 1;\n    int hour = timeptr->tm_hour;\n    int minute = timeptr->tm_min;\n    int second = timeptr->tm_sec;\n\n    // Calculate days since epoch\n    int days = 0;\n    if (year >= 1970) {\n        for (int y = 1970; y < year; ++y) {\n            days += daysInYear(y);\n        }\n    } else {\n        for (int y = 1969; y >= year; --y) {\n            days -= daysInYear(y);\n        }\n    }\n\n    for (int m = 0; m < month; ++m) {\n        days += daysInMonth(year, m);\n    }\n    days += day;\n\n    // Calculate total seconds\n    time_t totalSeconds = days * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\n\n    return totalSeconds;\n}\n\nint main() {\n    struct tm timeinfo = { 0 };\n    timeinfo.tm_year = 1969 - 1900; // Year 1969\n    timeinfo.tm_mon = 11; // December\n    timeinfo.tm_mday = 31; // 31st\n    timeinfo.tm_hour = 23;\n    timeinfo.tm_min = 59;\n    timeinfo.tm_sec = 59;\n\n    time_t result = custom_mktime(&timeinfo);\n    std::cout << "Seconds since epoch: " << result << std::endl;\n\n    return 0;\n}