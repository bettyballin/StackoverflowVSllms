#include <iostream>\n#include <string>\n#include <cryptopp/rsa.h>\n#include <cryptopp/osrng.h>\n#include <cryptopp/hex.h>\n#include <cryptopp/files.h>\n\nusing namespace CryptoPP;\n\nint main() {\n    // Generate RSA keys\n    AutoSeededRandomPool rng;\n    InvertibleRSAFunction parameters;\n    parameters.GenerateRandomWithKeySize(rng, 3072); // Key size in bits\n\n    RSA::PrivateKey privateKey(parameters);\n    RSA::PublicKey publicKey(parameters);\n\n    // Save keys to files\n    FileSink privFile("private.key");\n    privateKey.Save(privFile);\n\n    FileSink pubFile("public.key");\n    publicKey.Save(pubFile);\n\n    // Message to encrypt\n    std::string message = "Hello, RSA encryption!";\n\n    // Encrypt using public key\n    std::string cipher;\n    RSAES_OAEP_SHA_Encryptor encryptor(publicKey);\n    StringSource ss1(message, true, new PK_EncryptorFilter(rng, encryptor, new StringSink(cipher)));\n\n    // Print encrypted message in hex\n    std::string encoded;\n    StringSource ss2(cipher, true, new HexEncoder(new StringSink(encoded)));\n    std::cout << "Cipher text: " << encoded << std::endl;\n\n    // Decrypt using private key\n    std::string recovered;\n    RSAES_OAEP_SHA_Decryptor decryptor(privateKey);\n    StringSource ss3(cipher, true, new PK_DecryptorFilter(rng, decryptor, new StringSink(recovered)));\n\n    // Print decrypted message\n    std::cout << "Recovered text: " << recovered << std::endl;\n\n    return 0;\n}