#include <winsock2.h>\n#include <ws2tcpip.h>\n#include <iostream>\n#include <cassert>\n\nconst char html[] = \n    "HTTP/1.1 200 OK\r\n"\n    "Connection: close\r\n"\n    "Content-type: text/html\r\n"\n    "\r\n"\n    "<html>\r\n"\n    "<head>\r\n"\n    "<title>Hello, world!</title>\r\n"\n    "</head>\r\n"\n    "<body>\r\n"\n    "<h1>Hello, world!</h1>\r\n"\n    "</body>\r\n"\n    "</html>\r\n";\n\nint main() {\n    WSADATA wsa;\n    if (WSAStartup(MAKEWORD(2, 2), &wsa) != 0) {\n        std::cerr << "WSAStartup failed. Error: " << WSAGetLastError() << std::endl;\n        return 1;\n    }\n\n    addrinfo *res = NULL;\n    addrinfo hints;\n\n    ZeroMemory(&hints, sizeof(hints));\n    hints.ai_family = AF_INET;\n    hints.ai_socktype = SOCK_STREAM;\n    hints.ai_protocol = IPPROTO_TCP;\n    hints.ai_flags = AI_PASSIVE;\n\n    if (getaddrinfo(NULL, "8080", &hints, &res) != 0) {\n        std::cerr << "getaddrinfo failed. Error: " << WSAGetLastError() << std::endl;\n        WSACleanup();\n        return 1;\n    }\n\n    SOCKET s = socket(res->ai_family, res->ai_socktype, res->ai_protocol);\n    if (s == INVALID_SOCKET) {\n        std::cerr << "Socket creation failed. Error: " << WSAGetLastError() << std::endl;\n        freeaddrinfo(res);\n        WSACleanup();\n        return 1;\n    }\n\n    if (bind(s, res->ai_addr, (int)res->ai_addrlen) == SOCKET_ERROR) {\n        std::cerr << "Bind failed. Error: " << WSAGetLastError() << std::endl;\n        freeaddrinfo(res);\n        closesocket(s);\n        WSACleanup();\n        return 1;\n    }\n\n    freeaddrinfo(res);\n\n    if (listen(s, SOMAXCONN) == SOCKET_ERROR) {\n        std::cerr << "Listen failed. Error: " << WSAGetLastError() << std::endl;\n        closesocket(s);\n        WSACleanup();\n        return 1;\n    }\n\n    SOCKET client = accept(s, NULL, NULL);\n    if (client == INVALID_SOCKET) {\n        std::cerr << "Accept failed. Error: " << WSAGetLastError() << std::endl;\n        closesocket(s);\n        WSACleanup();\n        return 1;\n    }\n\n    char buffer[512];\n    int bytes = recv(client, buffer, sizeof(buffer), 0);\n    if (bytes > 0) {\n        for (int i = 0; i < bytes; ++i) {\n            std::cout << buffer[i];\n        }\n    } else {\n        std::cerr << "Recv failed. Error: " << WSAGetLastError() << std::endl;\n    }\n\n    if (send(client, html, strlen(html), 0) == SOCKET_ERROR) {\n        std::cerr << "Send failed. Error: " << WSAGetLastError() << std::endl;\n    }\n\n    if (shutdown(client, SD_BOTH) == SOCKET_ERROR) {\n        std::cerr << "Shutdown failed. Error: " << WSAGetLastError() << std::endl;\n    }\n\n    closesocket(client);\n    closesocket(s);\n    WSACleanup();\n\n    return 0;\n}