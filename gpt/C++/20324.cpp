#include <iostream>\n#include <curl/curl.h>\n\nsize_t WriteCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n    ((std::string*)userp)->append((char*)contents, size * nmemb);\n    return size * nmemb;\n}\n\nint main() {\n    CURL *curl;\n    CURLcode res;\n    std::string readBuffer;\n\n    curl_global_init(CURL_GLOBAL_DEFAULT);\n    curl = curl_easy_init();\n\n    if(curl) {\n        // Set URL for login\n        curl_easy_setopt(curl, CURLOPT_URL, "http://example.com/login.php");\n        \n        // Specify POST data (username and password)\n        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, "username=myusername&password=mypassword");\n\n        // Set callback function to capture server response\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);\n\n        // Specify file to store cookies\n        curl_easy_setopt(curl, CURLOPT_COOKIEJAR, "cookies.txt");\n\n        // Perform the request, res will get the return code\n        res = curl_easy_perform(curl);\n\n        // Check for errors\n        if(res != CURLE_OK) {\n            fprintf(stderr, "curl_easy_perform() failed: %s\n", curl_easy_strerror(res));\n        }\n\n        // Now, perform another request using the saved cookies\n        readBuffer.clear();\n        curl_easy_setopt(curl, CURLOPT_URL, "http://example.com/nextpage.php");\n\n        // Specify file to read cookies from\n        curl_easy_setopt(curl, CURLOPT_COOKIEFILE, "cookies.txt");\n\n        // Perform the request\n        res = curl_easy_perform(curl);\n\n        // Check for errors\n        if(res != CURLE_OK) {\n            fprintf(stderr, "curl_easy_perform() failed: %s\n", curl_easy_strerror(res));\n        } else {\n            // Print the response\n            std::cout << readBuffer << std::endl;\n        }\n\n        // Cleanup\n        curl_easy_cleanup(curl);\n    }\n\n    curl_global_cleanup();\n    return 0;\n}