#include <windows.h>\n#include <iostream>\n\nint main() {\n    STARTUPINFO si = { sizeof(si) };\n    PROCESS_INFORMATION pi;\n    BOOL result = CreateProcess(\n        L"C:\\Path\\To\\YourExecutable.exe", // Application name\n        NULL,                                // Command line arguments\n        NULL,                                // Process handle not inheritable\n        NULL,                                // Thread handle not inheritable\n        FALSE,                               // Set handle inheritance to FALSE\n        CREATE_SUSPENDED,                    // Creation flags\n        NULL,                                // Use parent's environment block\n        NULL,                                // Use parent's starting directory \n        &si,                                 // Pointer to STARTUPINFO structure\n        &pi                                  // Pointer to PROCESS_INFORMATION structure\n    );\n\n    if (!result) {\n        std::cerr << "CreateProcess failed with error: " << GetLastError() << std::endl;\n        return 1;\n    }\n\n    // Set thread priority\n    if (!SetThreadPriority(pi.hThread, THREAD_PRIORITY_BELOW_NORMAL)) {\n        std::cerr << "SetThreadPriority failed with error: " << GetLastError() << std::endl;\n        // Clean up\n        TerminateProcess(pi.hProcess, 1);\n        CloseHandle(pi.hProcess);\n        CloseHandle(pi.hThread);\n        return 1;\n    }\n\n    // Resume the suspended thread\n    ResumeThread(pi.hThread);\n\n    // Close handles\n    CloseHandle(pi.hThread);\n    CloseHandle(pi.hProcess);\n\n    std::cout << "Process and thread priority set successfully." << std::endl;\n    return 0;\n}