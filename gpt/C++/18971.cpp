#include <iostream>\n#include <fstream>\n#include <vector>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid search_in_chunk(const std::string& filename, const std::string& search_string, long start, long end, int pipe_fd) {\n    std::ifstream file(filename);\n    file.seekg(start);\n    \n    std::string line;\n    std::string result;\n    while (std::getline(file, line) && file.tellg() <= end) {\n        if (line.find(search_string) != std::string::npos) {\n            result += line + "\n";\n        }\n    }\n    \n    write(pipe_fd, result.c_str(), result.size());\n    close(pipe_fd);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc != 4) {\n        std::cerr << "Usage: " << argv[0] << " <file_path> <search_string> <max_processes>" << std::endl;\n        return 1;\n    }\n\n    std::string filename = argv[1];\n    std::string search_string = argv[2];\n    int max_processes = std::stoi(argv[3]);\n\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        std::cerr << "Error: could not open file " << filename << std::endl;\n        return 1;\n    }\n\n    file.seekg(0, std::ios::end);\n    long file_size = file.tellg();\n    long chunk_size = file_size / max_processes;\n\n    std::vector<pid_t> pids;\n    int pipe_fd[2];\n    \n    for (int i = 0; i < max_processes; ++i) {\n        pipe(pipe_fd);\n        pid_t pid = fork();\n        if (pid == 0) { // Child process\n            close(pipe_fd[0]);\n            long start = i * chunk_size;\n            long end = (i == max_processes - 1) ? file_size : (i + 1) * chunk_size;\n            search_in_chunk(filename, search_string, start, end, pipe_fd[1]);\n            exit(0);\n        } else if (pid > 0) { // Parent process\n            pids.push_back(pid);\n            close(pipe_fd[1]);\n        } else {\n            std::cerr << "Error: fork failed" << std::endl;\n            return 1;\n        }\n    }\n\n    for (pid_t pid : pids) {\n        int status;\n        waitpid(pid, &status, 0);\n    }\n\n    // Read and print results from pipes\n    char buffer[1024];\n    for (int i = 0; i < max_processes; ++i) {\n        read(pipe_fd[0], buffer, sizeof(buffer));\n        std::cout << buffer;\n    }\n\n    close(pipe_fd[0]);\n\n    return 0;\n}