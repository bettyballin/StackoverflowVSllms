#include <cuda_runtime.h>\n#include <device_launch_parameters.h>\n#include <iostream>\n\n__global__ void computeClosestPointsKernel(float3* points, int numPoints, float3 target, float* distances)\n{\n    int idx = threadIdx.x + blockDim.x * blockIdx.x;\n    if (idx < numPoints)\n    {\n        float3 point = points[idx];\n        float distance = sqrtf((point.x - target.x) * (point.x - target.x) + \n                               (point.y - target.y) * (point.y - target.y) + \n                               (point.z - target.z) * (point.z - target.z));\n        distances[idx] = distance;\n    }\n}\n\nvoid computeClosestPoints(float3* points, int numPoints, float3 target, float* distances)\n{\n    float3* d_points;\n    float* d_distances;\n    size_t size = numPoints * sizeof(float3);\n    size_t distSize = numPoints * sizeof(float);\n\n    cudaMalloc((void**)&d_points, size);\n    cudaMalloc((void**)&d_distances, distSize);\n\n    cudaMemcpy(d_points, points, size, cudaMemcpyHostToDevice);\n\n    int threadsPerBlock = 256;\n    int blocksPerGrid = (numPoints + threadsPerBlock - 1) / threadsPerBlock;\n    computeClosestPointsKernel<<<blocksPerGrid, threadsPerBlock>>>(d_points, numPoints, target, d_distances);\n\n    cudaMemcpy(distances, d_distances, distSize, cudaMemcpyDeviceToHost);\n\n    cudaFree(d_points);\n    cudaFree(d_distances);\n}\n\nint main()\n{\n    // Example usage\n    const int numPoints = 1000;\n    float3 points[numPoints];\n    float distances[numPoints];\n    float3 target = {0.0f, 0.0f, 0.0f};\n\n    // Initialize points\n    for (int i = 0; i < numPoints; ++i)\n    {\n        points[i] = {static_cast<float>(i), static_cast<float>(i), static_cast<float>(i)};\n    }\n\n    computeClosestPoints(points, numPoints, target, distances);\n\n    for (int i = 0; i < numPoints; ++i)\n    {\n        std::cout << "Distance to point " << i << ": " << distances[i] << std::endl;\n    }\n\n    return 0;\n}