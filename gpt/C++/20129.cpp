#include <iostream>\n#include <functional>\n#include <chrono>\n\ntemplate <typename Function>\nclass Timer {\npublic:\n    Timer(Function fct) : fct_(fct), elapsed_time_(0) {}\n\n    template <typename... Args>\n    auto operator()(Args&&... args) -> decltype(fct_(std::forward<Args>(args)...)) {\n        auto start = std::chrono::high_resolution_clock::now();\n        auto result = fct_(std::forward<Args>(args)...);\n        auto end = std::chrono::high_resolution_clock::now();\n        elapsed_time_ += std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count();\n        return result;\n    }\n\n    long GetElapsedTime() const { return elapsed_time_; }\n\nprivate:\n    Function fct_;\n    long elapsed_time_; // in milliseconds\n};\n\n// Sample function to be timed\ndouble foo(int x) {\n    // Simulate a time-consuming task\n    std::this_thread::sleep_for(std::chrono::milliseconds(100 * x));\n    return static_cast<double>(x);\n}\n\nint main() {\n    std::function<double(int)> fct = &foo;\n    Timer<decltype(fct)> timed_foo(fct);\n    \n    double a = timed_foo(3);\n    double b = timed_foo(2);\n    double c = timed_foo(5);\n\n    std::cout << "Elapsed: " << timed_foo.GetElapsedTime() << " ms" << std::endl;\n\n    return 0;\n}