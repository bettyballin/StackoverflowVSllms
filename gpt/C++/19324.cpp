#include <iostream>\n#include <vector>\n#include <queue>\n#include <utility>\n#include <functional>\n#include <limits>\n\nusing namespace std;\n\nconst int INF = numeric_limits<int>::max();\n\nstruct Edge {\n    int to, weight;\n};\n\nvoid dijkstra(int source, const vector<vector<Edge>>& graph, vector<int>& distances) {\n    int n = graph.size();\n    distances.assign(n, INF);\n    distances[source] = 0;\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n    pq.push({0, source});\n\n    while (!pq.empty()) {\n        int dist = pq.top().first;\n        int u = pq.top().second;\n        pq.pop();\n\n        if (dist > distances[u]) continue;\n\n        for (const Edge& edge : graph[u]) {\n            int v = edge.to;\n            int weight = edge.weight;\n            if (distances[u] + weight < distances[v]) {\n                distances[v] = distances[u] + weight;\n                pq.push({distances[v], v});\n            }\n        }\n    }\n}\n\nint main() {\n    int n = 5; // number of vertices\n    vector<vector<Edge>> graph(n);\n\n    // Example graph edges\n    graph[0].push_back({1, 10});\n    graph[0].push_back({4, 5});\n    graph[1].push_back({2, 1});\n    graph[1].push_back({4, 2});\n    graph[2].push_back({3, 4});\n    graph[3].push_back({0, 7});\n    graph[3].push_back({2, 6});\n    graph[4].push_back({1, 3});\n    graph[4].push_back({2, 9});\n    graph[4].push_back({3, 2});\n\n    vector<int> distances;\n    dijkstra(0, graph, distances);\n\n    for (int i = 0; i < n; ++i) {\n        cout << "Distance from 0 to " << i << ": " << distances[i] << endl;\n    }\n\n    return 0;\n}