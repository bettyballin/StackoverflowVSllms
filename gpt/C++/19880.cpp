#include <iostream>\n#include <memory>\n#include <optional>\n#include <string>\n\nclass Validator {\npublic:\n    Validator() : valid(true) {}\n\n    Validator& IsNotNull(const void* ptr, const std::string& errorMessage = "Pointer is null") {\n        if (valid && ptr == nullptr) {\n            valid = false;\n            message = errorMessage;\n        }\n        return *this;\n    }\n\n    Validator& IsInRange(int value, int min, int max, const std::string& errorMessage = "Value out of range") {\n        if (valid && (value < min || value > max)) {\n            valid = false;\n            message = errorMessage;\n        }\n        return *this;\n    }\n\n    bool IsValid() const { return valid; }\n    std::optional<std::string> GetErrorMessage() const { return valid ? std::nullopt : std::optional<std::string>{message}; }\n\nprivate:\n    bool valid;\n    std::string message;\n};\n\n// Example usage\nint main() {\n    int* ptr = nullptr;\n    int value = 5;\n\n    Validator validator;\n    validator.IsNotNull(ptr, "Pointer must not be null")\n             .IsInRange(value, 1, 10, "Value must be between 1 and 10");\n\n    if (validator.IsValid()) {\n        std::cout << "All validations passed.\n";\n    } else {\n        std::cout << "Validation failed: " << validator.GetErrorMessage().value() << "\n";\n    }\n\n    return 0;\n}