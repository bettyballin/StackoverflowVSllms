#include <iostream>\n\n// Helper struct to hold the characters as template parameters\ntemplate <char... Chars>\nstruct CharSequence {};\n\n// Helper to transform string literal into CharSequence\ntemplate <typename, typename>\nstruct MakeCharSequence;\n\ntemplate <std::size_t... Indices, char... Chars>\nstruct MakeCharSequence<std::index_sequence<Indices...>, CharSequence<Chars...>> {\n    template <std::size_t N>\n    static constexpr CharSequence<Chars..., Indices> create(const char (&str)[N]) {\n        return CharSequence<Chars..., str[Indices]...>{};\n    }\n};\n\n// Main struct template\ntemplate <char... Chars>\nstruct mystruct {\n    static void go() {\n        std::cout << sizeof...(Chars) << " characters: ";\n        (std::cout << ... << Chars) << '\n';\n    }\n};\n\n// Function to create CharSequence from string literal\ntemplate <std::size_t N>\nconstexpr auto make_char_sequence(const char (&str)[N]) {\n    return MakeCharSequence<std::make_index_sequence<N - 1>, CharSequence<>>::create(str);\n}\n\nint main() {\n    constexpr auto seq = make_char_sequence("asdf");\n    mystruct<seq>::go();\n    return 0;\n}