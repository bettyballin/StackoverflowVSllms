#include <winsock2.h>\n#include <ws2tcpip.h>\n#include <iostream>\n\n#pragma comment(lib, "Ws2_32.lib")\n\nbool isBlocked(const char* serverIP, unsigned short port) {\n    WSADATA wsaData;\n    SOCKET ConnectSocket = INVALID_SOCKET;\n    struct sockaddr_in clientService;\n\n    // Initialize Winsock\n    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {\n        std::cerr << "WSAStartup failed: " << WSAGetLastError() << std::endl;\n        return false;\n    }\n\n    // Create a socket\n    ConnectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n    if (ConnectSocket == INVALID_SOCKET) {\n        std::cerr << "Socket creation failed: " << WSAGetLastError() << std::endl;\n        WSACleanup();\n        return false;\n    }\n\n    // Setup the sockaddr_in structure\n    clientService.sin_family = AF_INET;\n    InetPton(AF_INET, serverIP, &clientService.sin_addr.s_addr);\n    clientService.sin_port = htons(port);\n\n    // Attempt to connect\n    if (connect(ConnectSocket, (SOCKADDR*)&clientService, sizeof(clientService)) == SOCKET_ERROR) {\n        int error = WSAGetLastError();\n        if (error == WSAETIMEDOUT || error == WSAECONNREFUSED || error == WSAENETUNREACH) {\n            std::cout << "The IP address: " << serverIP << " on port " << port << " is likely blocked." << std::endl;\n            closesocket(ConnectSocket);\n            WSACleanup();\n            return true;\n        } else {\n            std::cerr << "Connection attempt failed with error: " << error << std::endl;\n        }\n    } else {\n        std::cout << "Successfully connected to the IP address: " << serverIP << " on port " << port << std::endl;\n    }\n\n    // Cleanup\n    closesocket(ConnectSocket);\n    WSACleanup();\n    return false;\n}\n\nint main() {\n    const char* serverIP = "192.168.1.1"; // Replace with your server IP\n    unsigned short port = 8080; // Replace with your server port\n\n    if (isBlocked(serverIP, port)) {\n        std::cout << "IP is blocked." << std::endl;\n    } else {\n        std::cout << "IP is not blocked." << std::endl;\n    }\n\n    return 0;\n}