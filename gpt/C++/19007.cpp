#include <iostream>\n\ntypedef void (*EventFunction)(int nEvent);\n\nclass B; // Forward declaration\n\nclass A {\nprivate:\n    EventFunction handler;\n\npublic:\n    void SetEvent(EventFunction func) { handler = func; }\n\n    void EventOne() { handler(1); }\n};\n\nclass B {\nprivate:\n    A a;\n\n    // Static function to call the member function\n    static void StaticEventHandler(int nEvent) {\n        instance->EventFromA(nEvent);\n    }\n\n    static B* instance;\n\npublic:\n    B() {\n        instance = this;\n        a.SetEvent(StaticEventHandler);\n    }\n\n    void EventFromA(int nEvent) {\n        // do stuff\n        std::cout << "Event received with value: " << nEvent << std::endl;\n    }\n};\n\n// Define the static instance pointer\nB* B::instance = nullptr;\n\nint main() {\n    B b;\n    b.EventFromA(1);\n    return 0;\n}