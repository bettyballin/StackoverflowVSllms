#include <QApplication>\n#include <QWidget>\n#include <QPushButton>\n#include <QLineEdit>\n#include <QVBoxLayout>\n#include <QProcess>\n#include <QFile>\n#include <QTextStream>\n\nclass MyWidget : public QWidget {\n    Q_OBJECT\n\npublic:\n    MyWidget(QWidget *parent = nullptr) : QWidget(parent) {\n        auto *layout = new QVBoxLayout(this);\n\n        paramInput = new QLineEdit(this);\n        layout->addWidget(paramInput);\n\n        auto *launchButton1 = new QPushButton("Launch App 1", this);\n        layout->addWidget(launchButton1);\n\n        auto *launchButton2 = new QPushButton("Launch App 2", this);\n        layout->addWidget(launchButton2);\n\n        connect(launchButton1, &QPushButton::clicked, this, &MyWidget::launchApp1);\n        connect(launchButton2, &QPushButton::clicked, this, &MyWidget::launchApp2);\n    }\n\nprivate slots:\n    void launchApp1() {\n        QString parameters = paramInput->text();\n        launchApplication("path/to/consoleApp1", parameters);\n    }\n\n    void launchApp2() {\n        QString parameters = paramInput->text();\n        launchApplication("path/to/consoleApp2", parameters);\n    }\n\nprivate:\n    QLineEdit *paramInput;\n\n    void launchApplication(const QString &appPath, const QString &parameters) {\n        QProcess *process = new QProcess(this);\n\n        // Redirect output to a log file\n        QFile *logFile = new QFile("output.log");\n        if (logFile->open(QIODevice::WriteOnly | QIODevice::Append | QIODevice::Text)) {\n            process->setStandardOutputFile(logFile->fileName());\n            process->setStandardErrorFile(logFile->fileName());\n        }\n\n        process->start(appPath, QStringList() << parameters);\n\n        if (!process->waitForStarted()) {\n            qWarning("Failed to start the application");\n        }\n    }\n};\n\nint main(int argc, char *argv[]) {\n    QApplication app(argc, argv);\n    MyWidget widget;\n    widget.show();\n    return app.exec();\n}