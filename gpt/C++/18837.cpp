#include <Windows.h>\n#include <comdef.h>\n#include <iostream>\n\n// Assuming the interface is IUnitModel and the CLSIDs are defined for ClassOne and ClassTwo\n_COM_SMARTPTR_TYPEDEF(IUnitModel, __uuidof(IUnitModel));\n\nvoid CallManagedClass(const char* modelType) {\n    // Initialize COM.\n    HRESULT hr = CoInitialize(NULL);\n    if (FAILED(hr)) {\n        std::cerr << "Failed to initialize COM library." << std::endl;\n        return;\n    }\n\n    IUnitModelPtr pIUnit = nullptr;\n\n    // Determine which class to instantiate based on modelType\n    if (strcmp(modelType, "Model1") == 0) {\n        hr = pIUnit.CreateInstance(__uuidof(ClassOne));\n        if (FAILED(hr)) {\n            std::cerr << "Failed to create instance of ClassOne." << std::endl;\n            CoUninitialize();\n            return;\n        }\n    } else if (strcmp(modelType, "Model2") == 0) {\n        hr = pIUnit.CreateInstance(__uuidof(ClassTwo));\n        if (FAILED(hr)) {\n            std::cerr << "Failed to create instance of ClassTwo." << std::endl;\n            CoUninitialize();\n            return;\n        }\n    } else {\n        std::cerr << "Unknown model type: " << modelType << std::endl;\n        CoUninitialize();\n        return;\n    }\n\n    // Call methods on the interface\n    if (pIUnit) {\n        // Assuming the interface has methods Method1() and Method2()\n        hr = pIUnit->Method1();\n        if (FAILED(hr)) {\n            std::cerr << "Method1 failed." << std::endl;\n        }\n\n        hr = pIUnit->Method2();\n        if (FAILED(hr)) {\n            std::cerr << "Method2 failed." << std::endl;\n        }\n    }\n\n    // Uninitialize COM\n    CoUninitialize();\n}