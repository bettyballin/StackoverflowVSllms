#include <iostream>\n#include <vector>\n#include <queue>\n#include <cstring>\n\n#define MAX 1000\n\nusing namespace std;\n\nbool bfs(int rGraph[MAX][MAX], int s, int t, int parent[], int V) {\n    bool visited[V];\n    memset(visited, 0, sizeof(visited));\n    \n    queue<int> q;\n    q.push(s);\n    visited[s] = true;\n    parent[s] = -1;\n    \n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        \n        for (int v = 0; v < V; v++) {\n            if (visited[v] == false && rGraph[u][v] > 0) {\n                if (v == t) {\n                    parent[v] = u;\n                    return true;\n                }\n                q.push(v);\n                parent[v] = u;\n                visited[v] = true;\n            }\n        }\n    }\n    return false;\n}\n\nint fordFulkerson(int graph[MAX][MAX], int s, int t, int V) {\n    int u, v;\n    int rGraph[MAX][MAX];\n    \n    for (u = 0; u < V; u++)\n        for (v = 0; v < V; v++)\n            rGraph[u][v] = graph[u][v];\n    \n    int parent[V];\n    int max_flow = 0;\n    \n    while (bfs(rGraph, s, t, parent, V)) {\n        int path_flow = INT_MAX;\n        for (v = t; v != s; v = parent[v]) {\n            u = parent[v];\n            path_flow = min(path_flow, rGraph[u][v]);\n        }\n        for (v = t; v != s; v = parent[v]) {\n            u = parent[v];\n            rGraph[u][v] -= path_flow;\n            rGraph[v][u] += path_flow;\n        }\n        max_flow += path_flow;\n    }\n    return max_flow;\n}\n\nint main() {\n    int graph[MAX][MAX] = {0};\n    int M, F;\n    cout << "Enter number of males and females: ";\n    cin >> M >> F;\n    \n    int s = 0, t = M + F + 1;\n    int V = M + F + 2;\n\n    for (int i = 1; i <= M; i++)\n        graph[s][i] = 1;\n\n    for (int i = 1; i <= F; i++)\n        graph[M + i][t] = 1;\n\n    int male, female;\n    cout << "Enter the pairs (M, F) (enter -1 -1 to stop): " << endl;\n    while (cin >> male >> female) {\n        if (male == -1 && female == -1) break;\n        graph[male][M + female] = 1;\n    }\n\n    cout << "Maximum number of matches: " << fordFulkerson(graph, s, t, V) << endl;\n\n    return 0;\n}