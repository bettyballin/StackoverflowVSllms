#include <windows.h>\n#include <iostream>\n\ntypedef ULONG_PTR GdiplusToken;\ntypedef struct GdiplusStartupInput {\n    UINT32 GdiplusVersion;\n    void* DebugEventCallback;\n    BOOL SuppressBackgroundThread;\n    BOOL SuppressExternalCodecs;\n} GdiplusStartupInput;\n\ntypedef struct GdiplusStartupOutput {\n    void* NotificationHookProc;\n    void* NotificationUnhookProc;\n} GdiplusStartupOutput;\n\ntypedef int (WINAPI *GdiplusStartupProc)(GdiplusToken*, const GdiplusStartupInput*, GdiplusStartupOutput*);\ntypedef void (WINAPI *GdiplusShutdownProc)(GdiplusToken);\n\nint main() {\n    HMODULE hGdiPlus = NULL;\n    GdiplusStartupProc GdiplusStartup = NULL;\n    GdiplusShutdownProc GdiplusShutdown = NULL;\n    GdiplusToken gdiplusToken;\n    GdiplusStartupInput gdiplusStartupInput = {1, NULL, FALSE, FALSE};\n    GdiplusStartupOutput gdiplusStartupOutput;\n\n    // Try to load the system version of gdiplus.dll\n    hGdiPlus = LoadLibrary(L"gdiplus.dll");\n\n    if (hGdiPlus == NULL) {\n        // If the system version is not found, load the local version\n        hGdiPlus = LoadLibrary(L".\\gdiplus.dll");\n        if (hGdiPlus == NULL) {\n            std::cerr << "Failed to load gdiplus.dll" << std::endl;\n            return 1;\n        }\n    }\n\n    // Get the addresses of GDI+ functions\n    GdiplusStartup = (GdiplusStartupProc)GetProcAddress(hGdiPlus, "GdiplusStartup");\n    GdiplusShutdown = (GdiplusShutdownProc)GetProcAddress(hGdiPlus, "GdiplusShutdown");\n\n    if (GdiplusStartup == NULL || GdiplusShutdown == NULL) {\n        std::cerr << "Failed to get GDI+ functions" << std::endl;\n        FreeLibrary(hGdiPlus);\n        return 1;\n    }\n\n    // Initialize GDI+\n    if (GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, &gdiplusStartupOutput) != 0) {\n        std::cerr << "Failed to initialize GDI+" << std::endl;\n        FreeLibrary(hGdiPlus);\n        return 1;\n    }\n\n    // Your application code here using GDI+\n\n    // Shutdown GDI+\n    GdiplusShutdown(gdiplusToken);\n    FreeLibrary(hGdiPlus);\n\n    return 0;\n}