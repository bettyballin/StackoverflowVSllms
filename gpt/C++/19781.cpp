#include <iostream>\n#include <memory>\n#include <string>\n#include <unordered_map>\n#include <vector>\n\n// Base class for all AST nodes\nclass ASTNode {\npublic:\n    virtual ~ASTNode() = default;\n    virtual void evaluate() = 0;\n};\n\n// Example of a specific AST node class (e.g., for integers)\nclass IntegerNode : public ASTNode {\n    int value;\npublic:\n    IntegerNode(int val) : value(val) {}\n    void evaluate() override {\n        std::cout << "Evaluating Integer: " << value << std::endl;\n    }\n};\n\n// Example of a specific AST node class (e.g., for addition)\nclass AddNode : public ASTNode {\n    std::unique_ptr<ASTNode> left;\n    std::unique_ptr<ASTNode> right;\npublic:\n    AddNode(std::unique_ptr<ASTNode> l, std::unique_ptr<ASTNode> r)\n        : left(std::move(l)), right(std::move(r)) {}\n    void evaluate() override {\n        std::cout << "Evaluating Addition: ";\n        left->evaluate();\n        right->evaluate();\n    }\n};\n\n// Main Interpreter class\nclass Interpreter {\n    std::unique_ptr<ASTNode> root;\npublic:\n    Interpreter(std::unique_ptr<ASTNode> r) : root(std::move(r)) {}\n    void run() {\n        if (root) {\n            root->evaluate();\n        }\n    }\n};\n\nint main() {\n    // Example usage: (1 + 2)\n    std::unique_ptr<ASTNode> left = std::make_unique<IntegerNode>(1);\n    std::unique_ptr<ASTNode> right = std::make_unique<IntegerNode>(2);\n    std::unique_ptr<ASTNode> root = std::make_unique<AddNode>(std::move(left), std::move(right));\n\n    Interpreter interpreter(std::move(root));\n    interpreter.run();\n\n    return 0;\n}