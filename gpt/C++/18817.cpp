#include <msvids.h>\n#include <smut.h>\n#include <smutset.h>\n#include <smuthdr.h>\n#include <msvapi.h>\n#include <mtclreg.h>\n#include <txtrich.h>\n\n// Function to add SMS to Inbox\nvoid AddSMSToInboxL(const TDesC& aSender, const TDesC& aMessage)\n{\n    // Get the session\n    CMsvSession* session = CMsvSession::OpenSyncL(*this);\n    CleanupStack::PushL(session);\n\n    // Get the SMS service MTM\n    CClientMtmRegistry* mtmRegistry = CClientMtmRegistry::NewL(*session);\n    CleanupStack::PushL(mtmRegistry);\n    CSmsClientMtm* smsMtm = static_cast<CSmsClientMtm*>(mtmRegistry->NewMtmL(KUidMsgTypeSMS));\n    CleanupStack::PushL(smsMtm);\n\n    // Create a new message entry in the Inbox\n    TMsvEntry entry;\n    entry.iMtm = KUidMsgTypeSMS;\n    entry.iType = KUidMsvMessageEntry;\n    entry.iServiceId = KMsvLocalServiceIndexEntryId;\n    entry.iDate.HomeTime();\n    entry.SetInPreparation(EFalse);\n    entry.iDescription.Set(aMessage.Left(KMsvMessagePartDescriptionLength));\n    entry.iDetails.Set(aSender);\n\n    CMsvEntry* msvEntry = session->GetEntryL(KMsvGlobalInBoxIndexEntryId);\n    CleanupStack::PushL(msvEntry);\n    msvEntry->CreateL(entry); // Create the entry\n\n    // Get the new entry Id\n    TMsvId entryId = entry.Id();\n\n    // Set the entry to SMS MTM\n    smsMtm->SwitchCurrentEntryL(entryId);\n    smsMtm->CreateMessageL(entryId);\n\n    // Add the sender and message body\n    smsMtm->AddAddresseeL(aSender);\n    CRichText& body = smsMtm->Body();\n    body.Reset();\n    body.InsertL(0, aMessage);\n\n    // Save the message\n    smsMtm->SaveMessageL();\n\n    // Commit the entry\n    msvEntry->Entry().SetVisible(ETrue);\n    msvEntry->ChangeL(msvEntry->Entry());\n\n    // Cleanup\n    CleanupStack::PopAndDestroy(4, session); // msvEntry, smsMtm, mtmRegistry, session\n}