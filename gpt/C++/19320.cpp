#include <stdio.h>\n\nclass FunctorA {};\nclass FunctorB {};\n\ntemplate <class ItemType, class Functor> class MyContainer\n{\npublic:\n   MyContainer() : _metaData(0) { /* empty */ }\n\n   template<class RHSFunctor> void CopyFrom(const MyContainer<ItemType, RHSFunctor> & copyFrom)\n   {\n      _metaData = copyFrom._metaData;\n      _item = copyFrom._item;\n   }\n\nprivate:\n   int _metaData;\n   ItemType _item;\n\n   // Templated friend declaration\n   template <class, class> \n   friend class MyContainer;\n};\n\nint main(int argc, char ** argv)\n{\n   MyContainer<void *, FunctorA> containerA;\n   MyContainer<void *, FunctorB> containerB;\n\n   containerA.CopyFrom(containerB);  // Now it works, containerA::CopyFrom() can access containerB's private data\n   return 0;\n}