#include <windows.h>\n#include <tlhelp32.h>\n#include <tchar.h>\n#include <iostream>\n\nbool IsParentExplorer() {\n    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n    if (hSnapshot == INVALID_HANDLE_VALUE) {\n        return false;\n    }\n\n    PROCESSENTRY32 pe;\n    pe.dwSize = sizeof(PROCESSENTRY32);\n\n    DWORD currentProcessId = GetCurrentProcessId();\n    DWORD parentProcessId = 0;\n\n    if (Process32First(hSnapshot, &pe)) {\n        do {\n            if (pe.th32ProcessID == currentProcessId) {\n                parentProcessId = pe.th32ParentProcessID;\n                break;\n            }\n        } while (Process32Next(hSnapshot, &pe));\n    }\n\n    CloseHandle(hSnapshot);\n\n    if (parentProcessId == 0) {\n        return false;\n    }\n\n    hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n    if (hSnapshot == INVALID_HANDLE_VALUE) {\n        return false;\n    }\n\n    if (Process32First(hSnapshot, &pe)) {\n        do {\n            if (pe.th32ProcessID == parentProcessId) {\n                CloseHandle(hSnapshot);\n                return _tcsicmp(pe.szExeFile, _T("explorer.exe")) == 0;\n            }\n        } while (Process32Next(hSnapshot, &pe));\n    }\n\n    CloseHandle(hSnapshot);\n    return false;\n}\n\nint main(int argc, char* argv[]) {\n    if (IsParentExplorer()) {\n        std::cout << "Launched from Explorer" << std::endl;\n        // Wait for a keypress to prevent the console window from disappearing\n        std::cout << "Press any key to continue..." << std::endl;\n        std::cin.get();\n    } else {\n        std::cout << "Launched from Command Line" << std::endl;\n        // Proceed with normal processing\n    }\n\n    // Rest of your application logic\n    return 0;\n}