#include <vector>\n#include <algorithm>\n#include <functional>\n\nstruct SomeType {\n    int value;\n    bool operator==(const SomeType& other) const {\n        return value == other.value;\n    }\n};\n\nstruct FindPredicate\n{\n    explicit FindPredicate(const SomeType& t) : _t(t) {\n    }\n    bool operator()(const SomeType& t) const {\n        return t == _t;\n    }\n\nprivate:\n    const SomeType& _t;\n};\n\nbool ContainsValue(std::vector<SomeType>& v, SomeType& valueToFind) {\n    return std::find_if(v.begin(), v.end(), FindPredicate(valueToFind)) != v.end();\n}\n\nbool AllSatisfy(std::vector<SomeType>& v, const SomeType& valueToFind) {\n    return std::none_of(v.begin(), v.end(), std::not1(FindPredicate(valueToFind)));\n}\n\nint main() {\n    std::vector<SomeType> myVector = {{1}, {1}, {1}};\n    SomeType valueToFind = {1};\n\n    if (AllSatisfy(myVector, valueToFind)) {\n        // All elements satisfy the predicate\n    } else {\n        // Not all elements satisfy the predicate\n    }\n\n    return 0;\n}