// main.cpp\n#include <iostream>\n#include <dlfcn.h>\n#include "BaseClass.h"\n\ntypedef BaseClass* (*CreateClassFunc)();\n\nint main() {\n    void* handle = dlopen("libDerivedClass.so", RTLD_LAZY);\n    if (!handle) {\n        std::cerr << "Cannot open library: " << dlerror() << '\n';\n        return 1;\n    }\n\n    // Reset errors\n    dlerror();\n\n    // Load the symbol\n    CreateClassFunc create = (CreateClassFunc) dlsym(handle, "createDerivedClass");\n    const char* dlsym_error = dlerror();\n    if (dlsym_error) {\n        std::cerr << "Cannot load symbol createDerivedClass: " << dlsym_error << '\n';\n        dlclose(handle);\n        return 1;\n    }\n\n    // Create an instance of the class\n    BaseClass* instance = create();\n    instance->doSomething();\n    delete instance;\n\n    // Close the library\n    dlclose(handle);\n\n    return 0;\n}