#include <Exdisp.h>\n#include <Exdispid.h>\n#include <atlbase.h>\n#include <atlcom.h>\n\nclass CMyBrowserEvents : public IDispatch {\npublic:\n    // IUnknown methods\n    STDMETHOD(QueryInterface)(REFIID riid, void **ppvObject) override {\n        if (riid == IID_IDispatch || riid == IID_IUnknown) {\n            *ppvObject = static_cast<IDispatch *>(this);\n            AddRef();\n            return S_OK;\n        }\n        return E_NOINTERFACE;\n    }\n\n    STDMETHOD_(ULONG, AddRef)() override {\n        return InterlockedIncrement(&m_refCount);\n    }\n\n    STDMETHOD_(ULONG, Release)() override {\n        ULONG refCount = InterlockedDecrement(&m_refCount);\n        if (refCount == 0) {\n            delete this;\n        }\n        return refCount;\n    }\n\n    // IDispatch methods\n    STDMETHOD(GetTypeInfoCount)(UINT *pctinfo) override {\n        *pctinfo = 0;\n        return S_OK;\n    }\n\n    STDMETHOD(GetTypeInfo)(UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo) override {\n        return E_NOTIMPL;\n    }\n\n    STDMETHOD(GetIDsOfNames)(REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId) override {\n        return E_NOTIMPL;\n    }\n\n    STDMETHOD(Invoke)(DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr) override {\n        if (dispIdMember == DISPID_BEFORENAVIGATE2) {\n            // User is navigating away from the page\n            // Call DestroyWindow() here\n            if (m_hWnd) {\n                DestroyWindow(m_hWnd);\n                m_hWnd = nullptr;\n            }\n        }\n        return S_OK;\n    }\n\n    void SetWindowHandle(HWND hWnd) {\n        m_hWnd = hWnd;\n    }\n\nprivate:\n    HWND m_hWnd = nullptr;\n    LONG m_refCount = 1;\n};\n\n// Usage example\nvoid RegisterEventHandler(IWebBrowser2 *pWebBrowser, HWND hWnd) {\n    CComPtr<IConnectionPointContainer> spCPC;\n    CComPtr<IConnectionPoint> spCP;\n    DWORD dwCookie;\n\n    pWebBrowser->QueryInterface(IID_IConnectionPointContainer, (void **)&spCPC);\n    spCPC->FindConnectionPoint(DIID_DWebBrowserEvents2, &spCP);\n\n    CMyBrowserEvents *pEvents = new CMyBrowserEvents();\n    pEvents->SetWindowHandle(hWnd);\n\n    spCP->Advise(static_cast<IDispatch *>(pEvents), &dwCookie);\n}