#include <algorithm>\n#include <vector>\n#include <iostream>\n\ntemplate<class BidirectionalIterator>\nbool next_partial_permutation(BidirectionalIterator first,\n                              BidirectionalIterator middle,\n                              BidirectionalIterator last) {\n    std::reverse(middle, last);\n    return std::next_permutation(first, last);\n}\n\nint main() {\n    std::vector<int> v = {1, 2, 3, 4, 5, 6};\n    const int N = v.size();\n    const int R = 3; // Number of elements to permute\n\n    auto first = v.begin();\n    auto middle = v.begin() + R;\n    auto last = v.end();\n\n    std::sort(first, last); // Ensure the initial sequence is sorted\n\n    do {\n        // Print the current permutation\n        for (auto it = first; it != middle; ++it) {\n            std::cout << *it << " ";\n        }\n        std::cout << "\n";\n\n    } while (next_partial_permutation(first, middle, last));\n\n    return 0;\n}