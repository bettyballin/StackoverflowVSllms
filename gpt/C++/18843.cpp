#include <boost/asio.hpp>\n#include <iostream>\n\nclass some_class {\nprivate:\n    boost::asio::io_service io_service;\n    std::unique_ptr<boost::asio::ip::tcp::socket> sock;\n\npublic:\n    some_class() {\n        // Initialize the socket here\n        sock = std::make_unique<boost::asio::ip::tcp::socket>(io_service);\n    }\n\n    bool connect(const char* host, const char* port) {\n        try {\n            std::cout << "Resolving hostname...\n";\n\n            // Resolve hostname\n            boost::asio::ip::tcp::resolver resolver(io_service);\n            boost::asio::ip::tcp::resolver::query query(boost::asio::ip::tcp::v4(), host, port);\n            boost::asio::ip::tcp::resolver::iterator iterator = resolver.resolve(query);\n\n            std::cout << "Connecting to " << host << ":" << port << "...\n";\n\n            // Connect to resolved host\n            boost::asio::connect(*sock, iterator);\n\n            std::cout << "Connected successfully.\n";\n            return true;\n        } catch (const std::exception& e) {\n            std::cerr << "Exception: " << e.what() << "\n";\n            return false;\n        }\n    }\n};