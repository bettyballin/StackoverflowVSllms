#include <windows.h>\n#include <dbghelp.h>\n#include <iostream>\n#include <vector>\n\n#pragma comment(lib, "Dbghelp.lib")\n\nvoid ListExportedFunctions(const char* dllPath) {\n    HANDLE hFile = CreateFileA(dllPath, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);\n    if (hFile == INVALID_HANDLE_VALUE) {\n        std::cerr << "Failed to open file: " << dllPath << std::endl;\n        return;\n    }\n\n    HANDLE hFileMapping = CreateFileMapping(hFile, NULL, PAGE_READONLY, 0, 0, NULL);\n    if (hFileMapping == NULL) {\n        std::cerr << "Failed to create file mapping." << std::endl;\n        CloseHandle(hFile);\n        return;\n    }\n\n    LPVOID lpBaseAddress = MapViewOfFile(hFileMapping, FILE_MAP_READ, 0, 0, 0);\n    if (lpBaseAddress == NULL) {\n        std::cerr << "Failed to map view of file." << std::endl;\n        CloseHandle(hFileMapping);\n        CloseHandle(hFile);\n        return;\n    }\n\n    PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)lpBaseAddress;\n    PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)((BYTE*)lpBaseAddress + pDosHeader->e_lfanew);\n    PIMAGE_EXPORT_DIRECTORY pExportDir = (PIMAGE_EXPORT_DIRECTORY)((BYTE*)lpBaseAddress +\n                                         pNtHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);\n\n    DWORD* pAddressOfNames = (DWORD*)((BYTE*)lpBaseAddress + pExportDir->AddressOfNames);\n    WORD* pAddressOfNameOrdinals = (WORD*)((BYTE*)lpBaseAddress + pExportDir->AddressOfNameOrdinals);\n\n    for (DWORD i = 0; i < pExportDir->NumberOfNames; i++) {\n        char* functionName = (char*)((BYTE*)lpBaseAddress + pAddressOfNames[i]);\n        std::cout << functionName << std::endl;\n    }\n\n    UnmapViewOfFile(lpBaseAddress);\n    CloseHandle(hFileMapping);\n    CloseHandle(hFile);\n}\n\nint main() {\n    const char* dllPath = "your_dll_path.dll";\n    ListExportedFunctions(dllPath);\n    return 0;\n}