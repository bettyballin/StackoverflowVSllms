#include <iostream>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nvoid handleClient(int clientSocket) {\n    const int bufferSize = 1024;\n    char buffer[bufferSize];\n    int bytesRead = read(clientSocket, buffer, bufferSize - 1);\n\n    if (bytesRead > 0) {\n        buffer[bytesRead] = '\0';\n        std::string request(buffer);\n\n        // Check for "User-Agent" header\n        if (request.find("User-Agent:") != std::string::npos) {\n            std::cout << "Browser connection detected and ignored.\n";\n            close(clientSocket);\n            return;\n        }\n\n        // Handle non-browser request\n        std::cout << "Handling non-browser request.\n";\n        // Add your request handling code here...\n\n    }\n    close(clientSocket);\n}\n\nint main() {\n    int serverSocket = socket(AF_INET, SOCK_STREAM, 0);\n    if (serverSocket == -1) {\n        std::cerr << "Failed to create socket.\n";\n        return 1;\n    }\n\n    sockaddr_in serverAddr;\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_port = htons(8080);\n    serverAddr.sin_addr.s_addr = INADDR_ANY;\n\n    if (bind(serverSocket, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == -1) {\n        std::cerr << "Failed to bind socket.\n";\n        close(serverSocket);\n        return 1;\n    }\n\n    if (listen(serverSocket, 5) == -1) {\n        std::cerr << "Failed to listen on socket.\n";\n        close(serverSocket);\n        return 1;\n    }\n\n    while (true) {\n        int clientSocket = accept(serverSocket, nullptr, nullptr);\n        if (clientSocket == -1) {\n            std::cerr << "Failed to accept connection.\n";\n            continue;\n        }\n        handleClient(clientSocket);\n    }\n\n    close(serverSocket);\n    return 0;\n}