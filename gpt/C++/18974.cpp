#include <iostream>\n#include <libnetfilter_queue/libnetfilter_queue.h>\n#include <linux/ip.h>\n#include <linux/tcp.h>\n#include <cstring>\n\n// Function to modify the packet\nvoid modify_packet(unsigned char *data, int len) {\n    struct iphdr *iph = (struct iphdr *)data;\n    struct tcphdr *tcph = (struct tcphdr *)(data + (iph->ihl * 4));\n\n    // Modifying the destination port (e.g., changing it to 8080)\n    tcph->dest = htons(8080);\n    // Recompute IP and TCP checksums if necessary (omitted for brevity)\n}\n\n// Callback function for handling packets\nstatic int cb(struct nfq_q_handle *qh, struct nfgenmsg *nfmsg, struct nfq_data *nfa, void *data) {\n    struct nfqnl_msg_packet_hdr *ph = nfq_get_msg_packet_hdr(nfa);\n    if (!ph) return 0;\n\n    uint32_t id = ntohl(ph->packet_id);\n    unsigned char *packetData;\n    int len = nfq_get_payload(nfa, &packetData);\n    \n    if (len >= 0) {\n        // Check if it's a TCP SYN packet\n        struct iphdr *iph = (struct iphdr *)packetData;\n        if (iph->protocol == IPPROTO_TCP) {\n            struct tcphdr *tcph = (struct tcphdr *)(packetData + (iph->ihl * 4));\n            if (tcph->syn) {\n                modify_packet(packetData, len);\n            }\n        }\n    }\n\n    return nfq_set_verdict(qh, id, NF_ACCEPT, len, packetData);\n}\n\nint main() {\n    struct nfq_handle *h;\n    struct nfq_q_handle *qh;\n    struct nfnl_handle *nh;\n    int fd;\n    int rv;\n    char buf[4096] __attribute__ ((aligned));\n\n    // Initialize the library\n    h = nfq_open();\n    if (!h) {\n        std::cerr << "Error during nfq_open()" << std::endl;\n        exit(1);\n    }\n\n    // Unbinding existing nf_queue handler (if any)\n    if (nfq_unbind_pf(h, AF_INET) < 0) {\n        std::cerr << "Error during nfq_unbind_pf()" << std::endl;\n        exit(1);\n    }\n\n    // Binding nfnetlink_queue as nf_queue handler for AF_INET\n    if (nfq_bind_pf(h, AF_INET) < 0) {\n        std::cerr << "Error during nfq_bind_pf()" << std::endl;\n        exit(1);\n    }\n\n    // Binding this socket to queue '0'\n    qh = nfq_create_queue(h, 0, &cb, NULL);\n    if (!qh) {\n        std::cerr << "Error during nfq_create_queue()" << std::endl;\n        exit(1);\n    }\n\n    // Setting the copy packet mode\n    if (nfq_set_mode(qh, NFQNL_COPY_PACKET, 0xffff) < 0) {\n        std::cerr << "Can't set packet_copy mode" << std::endl;\n        exit(1);\n    }\n\n    fd = nfq_fd(h);\n\n    // Main loop to receive packets from the queue\n    while ((rv = recv(fd, buf, sizeof(buf), 0)) >= 0) {\n        nfq_handle_packet(h, buf, rv);\n    }\n\n    nfq_destroy_queue(qh);\n    nfq_close(h);\n\n    return 0;\n}