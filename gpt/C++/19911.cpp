// SimpleMath.cpp\n#include "SimpleMath.h"\n#include <iostream>\n\nclass CSimpleMath : public ISimpleMath\n{\npublic:\n    CSimpleMath() : refCount(1) {}\n\n    // IUnknown methods\n    STDMETHODIMP QueryInterface(REFIID riid, void** ppv)\n    {\n        if (riid == IID_IUnknown || riid == IID_ISimpleMath)\n        {\n            *ppv = static_cast<ISimpleMath*>(this);\n            AddRef();\n            return S_OK;\n        }\n        *ppv = nullptr;\n        return E_NOINTERFACE;\n    }\n\n    STDMETHODIMP_(ULONG) AddRef()\n    {\n        return InterlockedIncrement(&refCount);\n    }\n\n    STDMETHODIMP_(ULONG) Release()\n    {\n        ULONG newCount = InterlockedDecrement(&refCount);\n        if (newCount == 0)\n        {\n            delete this;\n        }\n        return newCount;\n    }\n\n    // ISimpleMath methods\n    STDMETHODIMP Add(LONG a, LONG b, LONG* result)\n    {\n        if (!result) return E_POINTER;\n        *result = a + b;\n        return S_OK;\n    }\n\n    STDMETHODIMP Subtract(LONG a, LONG b, LONG* result)\n    {\n        if (!result) return E_POINTER;\n        *result = a - b;\n        return S_OK;\n    }\n\nprivate:\n    LONG refCount;\n};