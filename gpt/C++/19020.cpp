#include <windows.h>\n#include <wincrypt.h>\n#include <iostream>\n\nint main() {\n    HCRYPTPROV hProv = 0;\n    HCRYPTKEY hKey = 0;\n    DWORD dwError = 0;\n\n    // Initialize the provider context\n    if (!CryptAcquireContext(&hProv, NULL, MS_DEF_DSS_DH_PROV, PROV_DSS_DH, CRYPT_VERIFYCONTEXT)) {\n        dwError = GetLastError();\n        std::cerr << "CryptAcquireContext failed: " << dwError << std::endl;\n        return 1;\n    }\n\n    // Parameters for DH key generation\n    BYTE P[] = { 0x8B, 0xF3, 0x4B, 0x9D, 0xAB, 0x4E, 0x5E, 0xF8, 0xD4, 0xB8, 0x29, 0x3C, 0x64, 0xD5, 0x23, 0xF1, 0x1E, 0x6E, 0x05, 0xED, 0xA1, 0x6A, 0x3D, 0x07, 0xE3, 0xA8, 0x5D, 0xFC, 0x4A, 0xFA, 0x1C, 0x36 };\n    BYTE G[] = { 0x05 };\n\n    CRYPT_DATA_BLOB pblob = { sizeof(P), P };\n    CRYPT_DATA_BLOB gblob = { sizeof(G), G };\n\n    // Generate a Diffie-Hellman key\n    if (!CryptGenKey(hProv, CALG_DH_EPHEM, CRYPT_PREGEN, &hKey)) {\n        dwError = GetLastError();\n        std::cerr << "CryptGenKey failed: " << dwError << std::endl;\n        CryptReleaseContext(hProv, 0);\n        return 1;\n    }\n\n    // Set the P parameter\n    if (!CryptSetKeyParam(hKey, KP_P, (BYTE*)&pblob, 0)) {\n        dwError = GetLastError();\n        std::cerr << "CryptSetKeyParam (KP_P) failed: " << dwError << std::endl;\n        CryptDestroyKey(hKey);\n        CryptReleaseContext(hProv, 0);\n        return 1;\n    }\n\n    // Set the G parameter\n    if (!CryptSetKeyParam(hKey, KP_G, (BYTE*)&gblob, 0)) {\n        dwError = GetLastError();\n        std::cerr << "CryptSetKeyParam (KP_G) failed: " << dwError << std::endl;\n        CryptDestroyKey(hKey);\n        CryptReleaseContext(hProv, 0);\n        return 1;\n    }\n\n    // Finalize key generation\n    if (!CryptSetKeyParam(hKey, KP_X, NULL, 0)) {\n        dwError = GetLastError();\n        std::cerr << "CryptSetKeyParam (KP_X) failed: " << dwError << std::endl;\n        CryptDestroyKey(hKey);\n        CryptReleaseContext(hProv, 0);\n        return 1;\n    }\n\n    std::cout << "Diffie-Hellman key pair generated successfully." << std::endl;\n\n    // Cleanup\n    CryptDestroyKey(hKey);\n    CryptReleaseContext(hProv, 0);\n\n    return 0;\n}