#include <iostream>\n#include <type_traits>\n\nstruct WrappedInt {\n    int v;\n    explicit constexpr WrappedInt(const int &val) : v(val) {}\n    \n    constexpr bool operator<=(const WrappedInt &rhs) const { return v <= rhs.v; }\n    constexpr bool operator==(const WrappedInt &rhs) const { return v == rhs.v; }\n    WrappedInt &operator++() { ++v; return *this; }\n    WrappedInt &operator+=(const WrappedInt &rhs) { v += rhs.v; return *this; }\n    constexpr WrappedInt operator%(const WrappedInt &rhs) const { return WrappedInt(v % rhs.v); }\n};\n\nstd::ostream &operator<<(std::ostream &s, WrappedInt w) {\n    return s << w.v;\n}\n\ntemplate <typename T>\nT fizzbuzz(T n) {\n    T count(0);\n    #if CONST\n    constexpr T div(3);\n    #else\n    T div(3);\n    #endif\n    for (T i(0); i <= n; ++i) {\n        if (i % div == T(0)) count += i;\n    }\n    return count;\n}\n\nint main() {\n    #if WRAP\n    WrappedInt w(123456789);\n    std::cout << fizzbuzz(w) << "\n";\n    #else\n    std::cout << fizzbuzz(123456789) << "\n";\n    #endif\n}