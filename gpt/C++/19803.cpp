#include <windows.h>\n#include <tlhelp32.h>\n\nBOOL CALLBACK EnumWindowsProc(HWND hwnd, LPARAM lParam) {\n    if (IsIconic(hwnd)) { // Check if the window is minimized\n        ShowWindow(hwnd, SW_HIDE); // Hide the window\n    }\n    return TRUE;\n}\n\nvoid HideMinimizedWindows() {\n    EnumWindows(EnumWindowsProc, 0);\n}\n\nbool IsExplorerRunning() {\n    PROCESSENTRY32 entry;\n    entry.dwSize = sizeof(PROCESSENTRY32);\n\n    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);\n    if (Process32First(snapshot, &entry) == TRUE) {\n        do {\n            if (_wcsicmp(entry.szExeFile, L"explorer.exe") == 0) {\n                CloseHandle(snapshot);\n                return true;\n            }\n        } while (Process32Next(snapshot, &entry) == TRUE);\n    }\n\n    CloseHandle(snapshot);\n    return false;\n}\n\nint main() {\n    // Check if explorer.exe is running\n    if (!IsExplorerRunning()) {\n        HideMinimizedWindows();\n    }\n\n    // keep the application running to ensure minimized windows stay hidden\n    while (true) {\n        Sleep(1000);\n    }\n\n    return 0;\n}