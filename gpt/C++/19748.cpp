#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <dirent.h>\n#include <unistd.h>\n\nstruct ProcessInfo {\n    int pid;\n    std::string name;\n};\n\nstd::vector<ProcessInfo> getProcesses() {\n    std::vector<ProcessInfo> processes;\n    DIR* procDir = opendir("/proc");\n\n    if (procDir == nullptr) {\n        perror("opendir");\n        return processes;\n    }\n\n    struct dirent* entry;\n    while ((entry = readdir(procDir)) != nullptr) {\n        if (entry->d_type == DT_DIR) {\n            std::string dirName = entry->d_name;\n\n            if (std::all_of(dirName.begin(), dirName.end(), ::isdigit)) {\n                int pid = std::stoi(dirName);\n                std::string cmdPath = "/proc/" + dirName + "/comm";\n                std::ifstream cmdFile(cmdPath);\n\n                if (cmdFile.is_open()) {\n                    std::string cmdName;\n                    std::getline(cmdFile, cmdName);\n                    processes.push_back({pid, cmdName});\n                }\n            }\n        }\n    }\n\n    closedir(procDir);\n    return processes;\n}\n\nint main() {\n    std::vector<ProcessInfo> processes = getProcesses();\n\n    std::cout << "PID\tProcess Name\n";\n    std::cout << "----------------------\n";\n    for (const auto& process : processes) {\n        std::cout << process.pid << "\t" << process.name << "\n";\n    }\n\n    return 0;\n}