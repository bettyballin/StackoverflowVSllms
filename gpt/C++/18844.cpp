#include <iostream>\n#include <variant>\n#include <memory>\n\nclass Base {\npublic:\n    virtual void doSomething() const = 0;\n    virtual ~Base() = default;\n};\n\ntemplate<typename T>\nclass Derived : public Base {\npublic:\n    void doSomething() const override {\n        // Implement your templated functionality here\n        std::cout << "Doing something with type: " << typeid(T).name() << std::endl;\n    }\n};\n\nstd::unique_ptr<Base> createInstance(bool useDouble) {\n    if (useDouble) {\n        return std::make_unique<Derived<double>>();\n    } else {\n        return std::make_unique<Derived<float>>();\n    }\n}\n\nint main() {\n    // Decide at runtime which type to use\n    bool useDouble = true; // This could be based on some runtime condition\n\n    auto instance = createInstance(useDouble);\n    instance->doSomething();\n\n    return 0;\n}