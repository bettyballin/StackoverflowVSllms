// server.cpp\n#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <string>\n#include <thread>\n#include <mutex>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nstd::unordered_map<int, std::string> clients;\nstd::mutex clients_mutex;\n\nvoid handle_client(int client_socket) {\n    char buffer[1024];\n    std::string client_address;\n\n    // Receive client address\n    int bytes_received = recv(client_socket, buffer, sizeof(buffer), 0);\n    if (bytes_received > 0) {\n        client_address = std::string(buffer, bytes_received);\n    }\n\n    // Register client\n    {\n        std::lock_guard<std::mutex> guard(clients_mutex);\n        clients[client_socket] = client_address;\n    }\n\n    // Send list of peers\n    {\n        std::lock_guard<std::mutex> guard(clients_mutex);\n        std::string peer_list;\n        for (const auto& [socket, address] : clients) {\n            if (socket != client_socket) {\n                peer_list += address + "\n";\n            }\n        }\n        send(client_socket, peer_list.c_str(), peer_list.size(), 0);\n    }\n\n    // Keep the connection open\n    while (true) {\n        bytes_received = recv(client_socket, buffer, sizeof(buffer), 0);\n        if (bytes_received <= 0) {\n            break;\n        }\n    }\n\n    // Remove client\n    {\n        std::lock_guard<std::mutex> guard(clients_mutex);\n        clients.erase(client_socket);\n    }\n\n    close(client_socket);\n}\n\nint main() {\n    int server_socket = socket(AF_INET, SOCK_STREAM, 0);\n    sockaddr_in server_addr = {AF_INET, htons(8080), INADDR_ANY};\n\n    bind(server_socket, (sockaddr*)&server_addr, sizeof(server_addr));\n    listen(server_socket, 10);\n\n    std::cout << "Server started on port 8080" << std::endl;\n\n    while (true) {\n        sockaddr_in client_addr;\n        socklen_t client_size = sizeof(client_addr);\n        int client_socket = accept(server_socket, (sockaddr*)&client_addr, &client_size);\n\n        std::thread(handle_client, client_socket).detach();\n    }\n\n    close(server_socket);\n    return 0;\n}