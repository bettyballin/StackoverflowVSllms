#include <sys/inotify.h>\n#include <limits.h>\n#include <unistd.h>\n#include <iostream>\n\nvoid WatchDirectory(const std::string& directory) {\n    int inotifyFd = inotify_init();\n    if (inotifyFd == -1) {\n        perror("inotify_init");\n        return;\n    }\n\n    int wd = inotify_add_watch(inotifyFd, directory.c_str(), IN_MODIFY);\n    if (wd == -1) {\n        perror("inotify_add_watch");\n        close(inotifyFd);\n        return;\n    }\n\n    char buffer[4096]\n        __attribute__((aligned(__alignof__(struct inotify_event))));\n    const struct inotify_event* event;\n    ssize_t len;\n\n    while (true) {\n        len = read(inotifyFd, buffer, sizeof(buffer));\n        if (len == -1 && errno != EAGAIN) {\n            perror("read");\n            break;\n        }\n\n        for (char* ptr = buffer; ptr < buffer + len; ) {\n            event = (const struct inotify_event*) ptr;\n            if (event->mask & IN_MODIFY) {\n                std::cout << "File modified: " << event->name << std::endl;\n            }\n            ptr += sizeof(struct inotify_event) + event->len;\n        }\n    }\n\n    inotify_rm_watch(inotifyFd, wd);\n    close(inotifyFd);\n}\n\nint main() {\n    WatchDirectory("/path/to/directory");\n    return 0;\n}