#include <QAbstractTableModel>\n#include <QHash>\n#include <QModelIndex>\n\nclass columnViewModel : public QAbstractTableModel {\n    Q_OBJECT\n\npublic:\n    // Constructor and other necessary methods...\n\nprivate slots:\n    void onExpand(const QModelIndex &index);\n    void onCollapse(const QModelIndex &index);\n\nprivate:\n    QHash<QPersistentModelIndex, Observer*> observersMap;\n};\n\nvoid columnViewModel::onExpand(const QModelIndex &index) {\n    Node* myNode = static_cast<Node*>(index.internalPointer());\n    Observer* foo = Observer::create();\n    myNode->addObserver(foo);\n\n    QPersistentModelIndex persistentIndex(index);\n    observersMap[persistentIndex] = foo;\n}\n\nvoid columnViewModel::onCollapse(const QModelIndex &index) {\n    QPersistentModelIndex persistentIndex(index);\n    if (observersMap.contains(persistentIndex)) {\n        Observer* foo = observersMap[persistentIndex];\n        Node* myNode = static_cast<Node*>(index.internalPointer());\n        myNode->remObserver(foo);\n        observersMap.remove(persistentIndex);\n        delete foo; // Make sure to handle memory management properly\n    }\n}