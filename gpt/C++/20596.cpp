// Initialize server\ninitialize_server_socket();\n\n// Main event loop\nwhile (true) {\n    // Use select() to wait for events on sockets\n    fd_set read_fds;\n    FD_ZERO(&read_fds);\n    FD_SET(server_socket, &read_fds);\n    int max_fd = server_socket;\n\n    // Add client sockets to read_fds\n    for (int i = 0; i < client_sockets.size(); i++) {\n        FD_SET(client_sockets[i], &read_fds);\n        if (client_sockets[i] > max_fd) max_fd = client_sockets[i];\n    }\n\n    // Wait for an event\n    int activity = select(max_fd + 1, &read_fds, NULL, NULL, NULL);\n\n    if (FD_ISSET(server_socket, &read_fds)) {\n        // New connection\n        int new_socket = accept(server_socket, NULL, NULL);\n        client_sockets.push_back(new_socket);\n    }\n\n    // Handle data from existing clients\n    for (int i = 0; i < client_sockets.size(); i++) {\n        if (FD_ISSET(client_sockets[i], &read_fds)) {\n            // Read data from client\n            char buffer[1024];\n            int bytes_read = read(client_sockets[i], buffer, sizeof(buffer));\n            if (bytes_read > 0) {\n                // Process request\n                process_request(client_sockets[i], buffer, bytes_read);\n            } else {\n                // Close connection\n                close(client_sockets[i]);\n                client_sockets.erase(client_sockets.begin() + i);\n                i--;\n            }\n        }\n    }\n}