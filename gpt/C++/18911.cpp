#include <iostream>\n\n// Base class with interceptor function\nclass Base {\npublic:\n    void interceptor() {\n        // Function that will always be called\n        std::cout << "Interceptor function called!" << std::endl;\n    }\n\n    virtual void foo() {\n        interceptor();  // Call the interceptor function\n        actualFoo();    // Call the actual function implementation\n    }\n\nprotected:\n    virtual void actualFoo() {\n        // Placeholder for actual implementation in derived class\n    }\n};\n\n// Derived class with specific implementation\nclass Derived : public Base {\nprotected:\n    void actualFoo() override {\n        // Actual implementation of foo()\n        std::cout << "Actual foo function called!" << std::endl;\n    }\n};\n\nint main() {\n    Derived obj;\n    obj.foo();  // This will call the interceptor and then the actual foo function\n    return 0;\n}