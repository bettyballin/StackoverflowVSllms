#include <windows.h>\n   #include <iostream>\n\n   typedef ClassName* (*CreateInstanceFunc)();\n   typedef void (*DestroyInstanceFunc)(ClassName*);\n\n   int main() {\n       HINSTANCE hDll = LoadLibrary("YourDll.dll");\n       if (!hDll) {\n           std::cerr << "Failed to load DLL\n";\n           return 1;\n       }\n\n       CreateInstanceFunc createInstance = (CreateInstanceFunc)GetProcAddress(hDll, "CreateInstance");\n       DestroyInstanceFunc destroyInstance = (DestroyInstanceFunc)GetProcAddress(hDll, "DestroyInstance");\n\n       if (!createInstance || !destroyInstance) {\n           std::cerr << "Failed to get function addresses\n";\n           FreeLibrary(hDll);\n           return 1;\n       }\n\n       ClassName* instance = createInstance();\n       if (!instance) {\n           std::cerr << "Failed to create instance\n";\n           FreeLibrary(hDll);\n           return 1;\n       }\n\n       // Call initialization function\n       instance->init();\n\n       // Call processing function\n       instance->process();\n\n       // Clean up\n       destroyInstance(instance);\n       FreeLibrary(hDll);\n\n       return 0;\n   }