#include <iostream>\n#include <regex>\n#include <string>\n\nbool varies_in_single_number_field(const std::string& str1, const std::string& str2) {\n    std::regex num_regex("\\d+");\n    auto num_begin1 = std::sregex_iterator(str1.begin(), str1.end(), num_regex);\n    auto num_end1 = std::sregex_iterator();\n    auto num_begin2 = std::sregex_iterator(str2.begin(), str2.end(), num_regex);\n    auto num_end2 = std::sregex_iterator();\n\n    std::vector<std::pair<size_t, size_t>> num_positions1;\n    std::vector<std::pair<size_t, size_t>> num_positions2;\n\n    for (std::sregex_iterator i = num_begin1; i != num_end1; ++i) {\n        num_positions1.push_back({i->position(), i->length()});\n    }\n\n    for (std::sregex_iterator i = num_begin2; i != num_end2; ++i) {\n        num_positions2.push_back({i->position(), i->length()});\n    }\n\n    if (num_positions1.size() != num_positions2.size()) {\n        return false;\n    }\n\n    bool found_diff = false;\n    for (size_t i = 0; i < num_positions1.size(); ++i) {\n        auto [pos1, len1] = num_positions1[i];\n        auto [pos2, len2] = num_positions2[i];\n\n        if (pos1 != pos2 || len1 != len2 || str1.substr(pos1, len1) != str2.substr(pos2, len2)) {\n            if (found_diff) {\n                return false;\n            }\n            found_diff = true;\n        }\n    }\n\n    return found_diff;\n}\n\nint main() {\n    std::cout << std::boolalpha;\n    std::cout << varies_in_single_number_field("foo7bar00", "foo123bar00") << std::endl; // True\n    std::cout << varies_in_single_number_field("foo7bar00", "foo123bar01") << std::endl; // False\n    std::cout << varies_in_single_number_field("foobar00", "foo123bar00") << std::endl; // True\n    std::cout << varies_in_single_number_field("foobar00", "foobar00") << std::endl; // False\n\n    return 0;\n}