#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <stdlib.h>\n#include <time.h>\n\nclass Thing {\npublic:\n    Thing(int val) : _val(val) {}\n\n    bool operator<(const Thing& rhs) const {\n        std::cout << "this works!";\n        return this->val() < rhs.val();\n    }\n\n    int val() const {\n        return this->_val;\n    }\n\nprotected:\n    int _val;\n};\n\nstruct Sort {\n    bool operator()(const Thing& start, const Thing& end) const {\n        return start.val() < end.val();\n    }\n};\n\nint main (int argc, char * const argv[]) {\n    std::srand(std::time(NULL));\n\n    std::vector<Thing> things;\n    for(int i = 0; i < 100; i++) {\n        Thing myThing(std::rand());\n        things.push_back(myThing);\n    }\n\n    if(things[1] < things[2]) {\n        // This works\n    }\n\n    std::sort(things.begin(), things.end()); // This works now\n\n    // Or you can use the functor if you prefer\n    // std::sort(things.begin(), things.end(), Sort());\n\n    for(int i = 0; i < 100; i++) {\n        std::cout << things.at(i).val() << std::endl;\n    }\n\n    return 0;\n}