template <typename T>\nclass BSTNode {\npublic:\n    T data;\n    BSTNode* left;\n    BSTNode* right;\n\n    BSTNode(T value) : data(value), left(nullptr), right(nullptr) {}\n};\n\ntemplate <typename T>\nclass BST {\nprivate:\n    BSTNode<T>* root;\n\n    BSTNode<T>* searchById(BSTNode<T>* node, int id) {\n        if (node == nullptr || node->data.id() == id)\n            return node;\n        else if (id < node->data.id())\n            return searchById(node->left, id);\n        else\n            return searchById(node->right, id);\n    }\n\npublic:\n    BST() : root(nullptr) {}\n\n    T* searchById(int id) {\n        BSTNode<T>* node = searchById(root, id);\n        return node ? &(node->data) : nullptr;\n    }\n\n    // Insert and other functions...\n};