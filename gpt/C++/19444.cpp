#include <iostream>\n\nusing namespace std;\n\n// A default Traits class has no information\ntemplate<class T> struct Traits\n{\n};\n\n// A convenient way to get the Traits of the type of a given value without\n// having to explicitly write out the type\ntemplate<typename T> Traits<T> GetTraits(const T&)\n{\n    return Traits<T>();\n}\n\ntemplate <int major, int minor> struct A \n{ \n    void f() \n    { \n        cout << major << endl; \n    }   \n};\n\n// Specialisation of the traits for any A<int, int>\ntemplate<int N1, int N2> struct Traits<A<N1, N2> >\n{\n    enum { major = N1, minor = N2 };\n};\n\ntemplate <> struct A<4,0> \n{       \n    void f() \n    { \n        cout << "Specialized:" << GetTraits(*this).major << endl; \n    }   \n};\n\nint main(int argc, char * argv[] )\n{\n    /*\n    A<4,0> p;\n    A<1,2> p2;\n    p.f();\n    p2.f();\n    */\n    return 1;\n}