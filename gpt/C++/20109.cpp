#include <windows.h>\n#include <wincrypt.h>\n#include <iostream>\n#include <string>\n\n#pragma comment(lib, "crypt32.lib")\n\nstd::string Encrypt(const std::string& data)\n{\n    DATA_BLOB DataIn;\n    DATA_BLOB DataOut;\n\n    DataIn.pbData = (BYTE*)data.c_str();\n    DataIn.cbData = (DWORD)data.size() + 1;\n\n    if (CryptProtectData(&DataIn, NULL, NULL, NULL, NULL, 0, &DataOut))\n    {\n        std::string encryptedData((char*)DataOut.pbData, DataOut.cbData);\n        LocalFree(DataOut.pbData);\n        return encryptedData;\n    }\n    else\n    {\n        throw std::runtime_error("Encryption failed");\n    }\n}\n\nstd::string Decrypt(const std::string& encryptedData)\n{\n    DATA_BLOB DataIn;\n    DATA_BLOB DataOut;\n\n    DataIn.pbData = (BYTE*)encryptedData.c_str();\n    DataIn.cbData = (DWORD)encryptedData.size();\n\n    if (CryptUnprotectData(&DataIn, NULL, NULL, NULL, NULL, 0, &DataOut))\n    {\n        std::string decryptedData((char*)DataOut.pbData, DataOut.cbData);\n        LocalFree(DataOut.pbData);\n        return decryptedData;\n    }\n    else\n    {\n        throw std::runtime_error("Decryption failed");\n    }\n}\n\n// Example usage\nint main()\n{\n    try\n    {\n        std::string sensitiveData = "Your sensitive data here";\n\n        std::string encryptedData = Encrypt(sensitiveData);\n        std::string decryptedData = Decrypt(encryptedData);\n\n        std::cout << "Original: " << sensitiveData << std::endl;\n        std::cout << "Decrypted: " << decryptedData << std::endl;\n    }\n    catch (const std::exception& ex)\n    {\n        std::cerr << "Error: " << ex.what() << std::endl;\n    }\n\n    return 0;\n}