#include <v8.h>\n\nusing namespace v8;\n\nint main(int argc, char* argv[]) {\n    // Initialize V8.\n    V8::InitializeICUDefaultLocation(argv[0]);\n    V8::InitializeExternalStartupData(argv[0]);\n    std::unique_ptr<Platform> platform = platform::NewDefaultPlatform();\n    V8::InitializePlatform(platform.get());\n    V8::Initialize();\n\n    // Create a new Isolate and make it the current one.\n    Isolate::CreateParams create_params;\n    create_params.array_buffer_allocator =\n        ArrayBuffer::Allocator::NewDefaultAllocator();\n    Isolate* isolate = Isolate::New(create_params);\n    {\n        Isolate::Scope isolate_scope(isolate);\n\n        // Create a stack-allocated handle scope.\n        HandleScope handle_scope(isolate);\n\n        // Create a new context.\n        Local<Context> context = Context::New(isolate);\n\n        // Enter the context for compiling and running the hello world script.\n        Context::Scope context_scope(context);\n\n        // Create a string containing the JavaScript source code.\n        Local<String> source =\n            String::NewFromUtf8Literal(isolate, "'Hello' + ', World!'");\n\n        // Compile the source code.\n        Local<Script> script = Script::Compile(context, source).ToLocalChecked();\n\n        // Run the script to get the result.\n        Local<Value> result = script->Run(context).ToLocalChecked();\n\n        // Convert the result to an UTF-8 string and print it.\n        String::Utf8Value utf8(isolate, result);\n        printf("%s\n", *utf8);\n    }\n\n    // Dispose the isolate and tear down V8.\n    isolate->Dispose();\n    V8::Dispose();\n    V8::ShutdownPlatform();\n    delete create_params.array_buffer_allocator;\n    return 0;\n}