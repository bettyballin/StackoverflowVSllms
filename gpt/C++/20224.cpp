// EngineLoader.cpp\n#include "IEngine.h"\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Reflection;\n\npublic ref class EngineLoader\n{\npublic:\n    static IEngine^ LoadEngine(String^ engineName)\n    {\n        String^ dllPath = String::Format("project_engine_{0}.dll", engineName);\n        if (File::Exists(dllPath))\n        {\n            Assembly^ engineAssembly = Assembly::LoadFrom(dllPath);\n            Type^ engineType = engineAssembly->GetType("NamespaceOfEngine.EngineClass");\n            if (engineType != nullptr && IEngine::typeid->IsAssignableFrom(engineType))\n            {\n                return safe_cast<IEngine^>(Activator::CreateInstance(engineType));\n            }\n        }\n        throw gcnew InvalidOperationException("Engine not found or doesn't implement IEngine.");\n    }\n};