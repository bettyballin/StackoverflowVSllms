#include <iostream>\n#include <fstream>\n\nclass LearningModel {\npublic:\n    void train(double data) {\n        learnedParameter = data * 0.5;\n    }\n\n    double predict(double input) const {\n        return input * learnedParameter;\n    }\n\n    void saveModel(const std::string &filename) const {\n        std::ofstream outFile(filename, std::ios::binary);\n        if (outFile.is_open()) {\n            outFile.write(reinterpret_cast<const char*>(&learnedParameter), sizeof(learnedParameter));\n            outFile.close();\n        }\n    }\n\n    void loadModel(const std::string &filename) {\n        std::ifstream inFile(filename, std::ios::binary);\n        if (inFile.is_open()) {\n            inFile.read(reinterpret_cast<char*>(&learnedParameter), sizeof(learnedParameter));\n            inFile.close();\n        }\n    }\n\nprivate:\n    double learnedParameter;\n};\n\nint main() {\n    LearningModel model;\n    model.train(10.0);\n    model.saveModel("model.dat");\n\n    LearningModel loadedModel;\n    loadedModel.loadModel("model.dat");\n    std::cout << "Prediction: " << loadedModel.predict(4.0) << std::endl;\n\n    return 0;\n}