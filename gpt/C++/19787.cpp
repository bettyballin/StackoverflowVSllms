#include "DllWrapper.h"\n#include <stdexcept>\n\nDllWrapper::DllWrapper(const char* dllNameA, const char* dllNameB) {\n    dllHandleA = LoadLibrary(dllNameA);\n    if (!dllHandleA) {\n        throw std::runtime_error("Failed to load DLL A");\n    }\n\n    dllHandleB = LoadLibrary(dllNameB);\n    if (!dllHandleB) {\n        FreeLibrary(dllHandleA);\n        throw std::runtime_error("Failed to load DLL B");\n    }\n\n    OpenApiFuncA = (OpenApiFuncType)GetProcAddress(dllHandleA, "OpenApi");\n    if (!OpenApiFuncA) {\n        FreeLibrary(dllHandleA);\n        FreeLibrary(dllHandleB);\n        throw std::runtime_error("Failed to get OpenApi function address from DLL A");\n    }\n\n    OpenApiFuncB = (OpenApiFuncType)GetProcAddress(dllHandleB, "OpenApi");\n    if (!OpenApiFuncB) {\n        FreeLibrary(dllHandleA);\n        FreeLibrary(dllHandleB);\n        throw std::runtime_error("Failed to get OpenApi function address from DLL B");\n    }\n}\n\nDllWrapper::~DllWrapper() {\n    if (dllHandleA) {\n        FreeLibrary(dllHandleA);\n    }\n    if (dllHandleB) {\n        FreeLibrary(dllHandleB);\n    }\n}\n\nvoid DllWrapper::OpenApiA() {\n    if (OpenApiFuncA) {\n        OpenApiFuncA();\n    }\n}\n\nvoid DllWrapper::OpenApiB() {\n    if (OpenApiFuncB) {\n        OpenApiFuncB();\n    }\n}