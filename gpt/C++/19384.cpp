#include <openssl/ssl.h>\n#include <openssl/err.h>\n#include <iostream>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nvoid initialize_openssl() {\n    SSL_load_error_strings();\n    OpenSSL_add_ssl_algorithms();\n}\n\nSSL_CTX* create_context() {\n    const SSL_METHOD *method;\n    SSL_CTX *ctx;\n\n    method = SSLv23_server_method();\n    ctx = SSL_CTX_new(method);\n    if (!ctx) {\n        perror("Unable to create SSL context");\n        ERR_print_errors_fp(stderr);\n        exit(EXIT_FAILURE);\n    }\n\n    return ctx;\n}\n\nvoid configure_context(SSL_CTX *ctx) {\n    SSL_CTX_use_certificate_file(ctx, "cert.pem", SSL_FILETYPE_PEM);\n    SSL_CTX_use_PrivateKey_file(ctx, "key.pem", SSL_FILETYPE_PEM);\n}\n\nint main() {\n    int sockfd;\n    struct sockaddr_in addr;\n\n    initialize_openssl();\n    SSL_CTX *ctx = create_context();\n    configure_context(ctx);\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        perror("Unable to create socket");\n        exit(EXIT_FAILURE);\n    }\n\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(4433);\n    addr.sin_addr.s_addr = htonl(INADDR_ANY);\n\n    if (bind(sockfd, (struct sockaddr*)&addr, sizeof(addr)) < 0) {\n        perror("Unable to bind");\n        exit(EXIT_FAILURE);\n    }\n\n    if (listen(sockfd, 1) < 0) {\n        perror("Unable to listen");\n        exit(EXIT_FAILURE);\n    }\n\n    while (1) {\n        struct sockaddr_in addr;\n        socklen_t len = sizeof(addr);\n        int client = accept(sockfd, (struct sockaddr*)&addr, &len);\n\n        if (client < 0) {\n            perror("Unable to accept");\n            exit(EXIT_FAILURE);\n        }\n\n        SSL *ssl = SSL_new(ctx);\n        SSL_set_fd(ssl, client);\n\n        if (SSL_accept(ssl) <= 0) {\n            ERR_print_errors_fp(stderr);\n        } else {\n            const char reply[] = "Hello, SSL/TLS!";\n            SSL_write(ssl, reply, strlen(reply));\n        }\n\n        SSL_shutdown(ssl);\n        SSL_free(ssl);\n        close(client);\n    }\n\n    close(sockfd);\n    SSL_CTX_free(ctx);\n    EVP_cleanup();\n}