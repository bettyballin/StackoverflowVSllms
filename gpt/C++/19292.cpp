#include <Qt>\n#include <QApplication>\n#include <QTcpServer>\n#include <QMessageBox>\n#include <QTcpSocket>\n#include <QtNetwork>\n#include <QDebug>\n\nclass Server : public QObject\n{\n    Q_OBJECT\n\npublic:\n    Server();\n\npublic slots:\n    void printline();\n\nprivate:\n    QTcpServer *tcp;\n};\n\nServer::Server()\n{\n   tcp = new QTcpServer(this);\n   if (!tcp->listen(QHostAddress::Any, 9876)) {\n       qDebug() << "Server could not start!";\n   } else {\n       qDebug() << "Server started!";\n   }\n\n   connect(tcp, SIGNAL(newConnection()), this, SLOT(printline()));\n}\n\nvoid Server::printline()\n{\n   QTcpSocket *client = tcp->nextPendingConnection();\n   connect(client, SIGNAL(disconnected()), client, SLOT(deleteLater()));\n\n   connect(client, &QTcpSocket::readyRead, [client]() {\n       QByteArray data = client->readAll();\n       qDebug() << "Received:" << data;\n       printf("String = %s\n", data.constData());\n   });\n}\n\nint main(int argc, char** argv)\n{\n   QApplication a(argc, argv);\n\n   Server* server = new Server();\n\n   return a.exec();\n}\n\n#include "main.moc"