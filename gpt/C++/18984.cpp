// main.cpp\n#include <iostream>\n#include <windows.h>\n#include "BaseClass.h"\n\ntypedef BaseClass* (*CreateClassFunc)();\n\nint main() {\n    HMODULE handle = LoadLibrary(TEXT("DerivedClass.dll"));\n    if (!handle) {\n        std::cerr << "Cannot open library: " << GetLastError() << '\n';\n        return 1;\n    }\n\n    // Load the symbol\n    CreateClassFunc create = (CreateClassFunc) GetProcAddress(handle, "createDerivedClass");\n    if (!create) {\n        std::cerr << "Cannot load symbol createDerivedClass: " << GetLastError() << '\n';\n        FreeLibrary(handle);\n        return 1;\n    }\n\n    // Create an instance of the class\n    BaseClass* instance = create();\n    instance->doSomething();\n    delete instance;\n\n    // Close the library\n    FreeLibrary(handle);\n\n    return 0;\n}