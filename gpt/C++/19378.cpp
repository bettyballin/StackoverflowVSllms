#include <winsock2.h>\n#include <ws2tcpip.h>\n#include <iphlpapi.h>\n#include <stdio.h>\n#include <iostream>\n\n#pragma comment(lib, "Ws2_32.lib")\n#pragma comment(lib, "Iphlpapi.lib")\n\nvoid GetProcessUsingPort(USHORT port) {\n    PMIB_TCPTABLE_OWNER_PID pTcpTable;\n    DWORD dwSize = 0;\n    DWORD dwRetVal = 0;\n\n    pTcpTable = (MIB_TCPTABLE_OWNER_PID *)malloc(sizeof(MIB_TCPTABLE_OWNER_PID));\n    if (pTcpTable == NULL) {\n        std::cerr << "Error allocating memory" << std::endl;\n        return;\n    }\n\n    dwSize = sizeof(MIB_TCPTABLE_OWNER_PID);\n    if ((dwRetVal = GetExtendedTcpTable(pTcpTable, &dwSize, TRUE, AF_INET, TCP_TABLE_OWNER_PID_ALL, 0)) == ERROR_INSUFFICIENT_BUFFER) {\n        free(pTcpTable);\n        pTcpTable = (MIB_TCPTABLE_OWNER_PID *)malloc(dwSize);\n        if (pTcpTable == NULL) {\n            std::cerr << "Error allocating memory" << std::endl;\n            return;\n        }\n    }\n\n    if ((dwRetVal = GetExtendedTcpTable(pTcpTable, &dwSize, TRUE, AF_INET, TCP_TABLE_OWNER_PID_ALL, 0)) == NO_ERROR) {\n        for (int i = 0; i < (int)pTcpTable->dwNumEntries; i++) {\n            if (ntohs((u_short)pTcpTable->table[i].dwLocalPort) == port) {\n                std::cout << "Process ID: " << pTcpTable->table[i].dwOwningPid << std::endl;\n                break;\n            }\n        }\n    } else {\n        std::cerr << "GetExtendedTcpTable failed with " << dwRetVal << std::endl;\n    }\n\n    if (pTcpTable != NULL) {\n        free(pTcpTable);\n        pTcpTable = NULL;\n    }\n}\n\nint main() {\n    USHORT port = 12345; // Replace with your port number\n    GetProcessUsingPort(port);\n    return 0;\n}