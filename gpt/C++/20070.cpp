#define _WIN32_WINNT 0x0500\n#include <cstdlib>\n#include <iostream>\n#include <windows.h>\n#include <tlhelp32.h>\n\nusing namespace std;\n\nvoid TerminateProcessesOnDesktop(HDESK hDesktop) {\n    // Obtain a snapshot of all processes\n    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n    if (hSnapshot == INVALID_HANDLE_VALUE) {\n        return;\n    }\n\n    PROCESSENTRY32 pe;\n    pe.dwSize = sizeof(PROCESSENTRY32);\n\n    // Iterate over all processes\n    if (Process32First(hSnapshot, &pe)) {\n        do {\n            // Open the process to query its desktop\n            HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_TERMINATE, FALSE, pe.th32ProcessID);\n            if (hProcess) {\n                HDESK hProcessDesktop;\n                if (GetProcessWindowStation() == GetThreadDesktop(GetCurrentThreadId())) {\n                    if (GetUserObjectInformation(hProcessDesktop, UOI_NAME, NULL, 0, NULL)) {\n                        // Terminate process if it belongs to the target desktop\n                        if (hProcessDesktop == hDesktop) {\n                            TerminateProcess(hProcess, 1);\n                        }\n                    }\n                }\n                CloseHandle(hProcess);\n            }\n        } while (Process32Next(hSnapshot, &pe));\n    }\n    CloseHandle(hSnapshot);\n}\n\nint main(int argc, char *argv[]) {\n    HDESK hOriginalThread;\n    HDESK hOriginalInput;\n    hOriginalThread = GetThreadDesktop(GetCurrentThreadId());\n    hOriginalInput = OpenInputDesktop(0, FALSE, DESKTOP_SWITCHDESKTOP);\n\n    HDESK hNewDesktop = CreateDesktop("BasicAppDesktopDesktop", NULL, NULL, 0, DELETE | READ_CONTROL | WRITE_DAC | WRITE_OWNER | GENERIC_ALL, NULL);\n\n    SetThreadDesktop(hNewDesktop);\n    SwitchDesktop(hNewDesktop);\n\n    STARTUPINFOA si = {0};\n    si.cb = sizeof(STARTUPINFO);\n    si.lpDesktop = "winsta0\\BasicAppDesktopDesktop";\n    PROCESS_INFORMATION infos;\n    CreateProcess(NULL, "explorer", NULL, NULL, false, NORMAL_PRIORITY_CLASS, NULL, NULL, &si, &infos);\n\n    while (!(GetAsyncKeyState(VK_F12) == -32767)) Sleep(50);\n\n    CloseHandle(infos.hProcess);\n    CloseHandle(infos.hThread);\n\n    TerminateProcessesOnDesktop(hNewDesktop);\n\n    SwitchDesktop(hOriginalInput);\n    SetThreadDesktop(hOriginalThread);\n    CloseDesktop(hNewDesktop);\n    CloseDesktop(hOriginalInput);\n\n    return 0;\n}