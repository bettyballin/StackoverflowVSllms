#include <vector>\n#include <algorithm>\n\nint max3(int a, int b, int c) {\n    return std::max(std::max(a, b), c);\n}\n\nint maxSumRec(const std::vector<int> &a, int left, int right) {\n    if (left == right) {\n        return (a[left] > 0) ? a[left] : 0;\n    }\n\n    int center = (left + right) / 2;\n    int maxLeftSum = maxSumRec(a, left, center);\n    int maxRightSum = maxSumRec(a, center + 1, right);\n\n    int leftBorderSum = 0, leftBorderMax = 0;\n    for (int i = center; i >= left; i--) {\n        leftBorderSum += a[i];\n        if (leftBorderSum > leftBorderMax) {\n            leftBorderMax = leftBorderSum;\n        }\n    }\n\n    int rightBorderSum = 0, rightBorderMax = 0;\n    for (int i = center + 1; i <= right; i++) {\n        rightBorderSum += a[i];\n        if (rightBorderSum > rightBorderMax) {\n            rightBorderMax = rightBorderSum;\n        }\n    }\n\n    int crossSum = rightBorderMax + leftBorderMax;\n\n    return max3(maxLeftSum, maxRightSum, crossSum);\n}