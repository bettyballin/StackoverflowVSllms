#include <sqlite3.h>\n#include <iostream>\n\nint insertBlob(sqlite3* db, const void* blob, int len) {\n    sqlite3_stmt* stmt;\n    const char* sql = "INSERT INTO table_name (column_name) VALUES (?)";\n\n    // Prepare the SQL statement\n    int rc = sqlite3_prepare_v2(db, sql, -1, &stmt, NULL);\n    if (rc != SQLITE_OK) {\n        std::cerr << "Cannot prepare statement: " << sqlite3_errmsg(db) << std::endl;\n        return rc;\n    }\n\n    // Bind the BLOB data to the statement\n    rc = sqlite3_bind_blob(stmt, 1, blob, len, SQLITE_STATIC);\n    if (rc != SQLITE_OK) {\n        std::cerr << "Cannot bind blob: " << sqlite3_errmsg(db) << std::endl;\n        sqlite3_finalize(stmt);\n        return rc;\n    }\n\n    // Execute the statement\n    rc = sqlite3_step(stmt);\n    if (rc != SQLITE_DONE) {\n        std::cerr << "Execution failed: " << sqlite3_errmsg(db) << std::endl;\n    } else {\n        std::cout << "BLOB inserted successfully" << std::endl;\n    }\n\n    // Clean up\n    sqlite3_finalize(stmt);\n    return rc;\n}\n\nint main() {\n    sqlite3* db;\n    int rc;\n\n    // Open the database connection\n    rc = sqlite3_open("example.db", &db);\n    if (rc) {\n        std::cerr << "Can't open database: " << sqlite3_errmsg(db) << std::endl;\n        return rc;\n    }\n\n    // Example BLOB data\n    const char blobData[] = "example\0blob\0data";\n    int blobLen = sizeof(blobData);\n\n    // Insert BLOB into the database\n    rc = insertBlob(db, blobData, blobLen);\n    if (rc != SQLITE_OK) {\n        std::cerr << "Failed to insert BLOB" << std::endl;\n    }\n\n    // Close the database connection\n    sqlite3_close(db);\n    return 0;\n}