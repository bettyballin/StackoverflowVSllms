#include <zip.h>\n   #include <iostream>\n   #include <fstream>\n\n   void addFileToZip(const char* zipFilePath, const char* filePath, const char* fileNameInZip) {\n       int error;\n       zip* archive = zip_open(zipFilePath, ZIP_CREATE | ZIP_EXCL, &error);\n       if (!archive) {\n           zip_error_t zipError;\n           zip_error_init_with_code(&zipError, error);\n           std::cerr << "Failed to open zip file: " << zip_error_strerror(&zipError) << std::endl;\n           zip_error_fini(&zipError);\n           return;\n       }\n\n       std::ifstream file(filePath, std::ios::binary);\n       if (!file.is_open()) {\n           std::cerr << "Failed to open input file: " << filePath << std::endl;\n           zip_close(archive);\n           return;\n       }\n\n       file.seekg(0, std::ios::end);\n       std::streamsize size = file.tellg();\n       file.seekg(0, std::ios::beg);\n\n       char* buffer = new char[size];\n       if (!file.read(buffer, size)) {\n           std::cerr << "Failed to read file: " << filePath << std::endl;\n           delete[] buffer;\n           zip_close(archive);\n           return;\n       }\n\n       zip_source* source = zip_source_buffer(archive, buffer, size, 1);\n       if (source == nullptr) {\n           std::cerr << "Failed to create zip source from buffer" << std::endl;\n           delete[] buffer;\n           zip_close(archive);\n           return;\n       }\n\n       if (zip_file_add(archive, fileNameInZip, source, ZIP_FL_OVERWRITE) < 0) {\n           std::cerr << "Failed to add file to zip: " << zip_strerror(archive) << std::endl;\n           zip_source_free(source);\n           delete[] buffer;\n           zip_close(archive);\n           return;\n       }\n\n       if (zip_close(archive) != 0) {\n           std::cerr << "Failed to close zip archive: " << zip_strerror(archive) << std::endl;\n       }\n   }\n\n   void removeFileFromZip(const char* zipFilePath, const char* fileNameInZip) {\n       int error;\n       zip* archive = zip_open(zipFilePath, ZIP_CREATE, &error);\n       if (!archive) {\n           zip_error_t zipError;\n           zip_error_init_with_code(&zipError, error);\n           std::cerr << "Failed to open zip file: " << zip_error_strerror(&zipError) << std::endl;\n           zip_error_fini(&zipError);\n           return;\n       }\n\n       zip_int64_t index = zip_name_locate(archive, fileNameInZip, 0);\n       if (index < 0) {\n           std::cerr << "File not found in zip: " << fileNameInZip << std::endl;\n           zip_close(archive);\n           return;\n       }\n\n       if (zip_delete(archive, index) != 0) {\n           std::cerr << "Failed to delete file from zip: " << zip_strerror(archive) << std::endl;\n           zip_close(archive);\n           return;\n       }\n\n       if (zip_close(archive) != 0) {\n           std::cerr << "Failed to close zip archive: " << zip_strerror(archive) << std::endl;\n       }\n   }\n\n   int main() {\n       const char* zipFilePath = "example.zip";\n       const char* filePathToAdd = "file_to_add.txt";\n       const char* fileNameInZip = "added_file.txt";\n\n       addFileToZip(zipFilePath, filePathToAdd, fileNameInZip);\n       removeFileFromZip(zipFilePath, fileNameInZip);\n\n       return 0;\n   }