#include <windows.h>\n#include <iostream>\n\nbool CaptureWindow(HWND hwnd, const std::wstring& filePath) {\n    HDC hdcScreen = GetDC(NULL);\n    HDC hdcMemDC = CreateCompatibleDC(hdcScreen);\n\n    RECT rc;\n    GetWindowRect(hwnd, &rc);\n    \n    int width = rc.right - rc.left;\n    int height = rc.bottom - rc.top;\n\n    HBITMAP hbmScreen = CreateCompatibleBitmap(hdcScreen, width, height);\n    \n    if (!hbmScreen) {\n        std::cerr << "CreateCompatibleBitmap failed\n";\n        return false;\n    }\n\n    SelectObject(hdcMemDC, hbmScreen);\n\n    if (!PrintWindow(hwnd, hdcMemDC, PW_RENDERFULLCONTENT)) {\n        std::cerr << "PrintWindow failed\n";\n        return false;\n    }\n\n    BITMAP bmpScreen;\n    GetObject(hbmScreen, sizeof(BITMAP), &bmpScreen);\n\n    BITMAPFILEHEADER bmfHeader;\n    BITMAPINFOHEADER bi;\n\n    bi.biSize = sizeof(BITMAPINFOHEADER);\n    bi.biWidth = bmpScreen.bmWidth;\n    bi.biHeight = bmpScreen.bmHeight;\n    bi.biPlanes = 1;\n    bi.biBitCount = 32;\n    bi.biCompression = BI_RGB;\n    bi.biSizeImage = 0;\n    bi.biXPelsPerMeter = 0;\n    bi.biYPelsPerMeter = 0;\n    bi.biClrUsed = 0;\n    bi.biClrImportant = 0;\n\n    DWORD dwBmpSize = ((bmpScreen.bmWidth * bi.biBitCount + 31) / 32) * 4 * bmpScreen.bmHeight;\n\n    HANDLE hDIB = GlobalAlloc(GHND, dwBmpSize);\n    char* lpbitmap = (char*)GlobalLock(hDIB);\n\n    GetDIBits(hdcScreen, hbmScreen, 0, (UINT)bmpScreen.bmHeight, lpbitmap, (BITMAPINFO*)&bi, DIB_RGB_COLORS);\n\n    HANDLE hFile = CreateFile(filePath.c_str(), GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);\n\n    DWORD dwSizeofDIB = dwBmpSize + sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);\n\n    bmfHeader.bfOffBits = sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);\n    bmfHeader.bfSize = dwSizeofDIB;\n    bmfHeader.bfType = 0x4D42; // BM\n\n    DWORD dwBytesWritten = 0;\n    WriteFile(hFile, (LPSTR)&bmfHeader, sizeof(BITMAPFILEHEADER), &dwBytesWritten, NULL);\n    WriteFile(hFile, (LPSTR)&bi, sizeof(BITMAPINFOHEADER), &dwBytesWritten, NULL);\n    WriteFile(hFile, (LPSTR)lpbitmap, dwBmpSize, &dwBytesWritten, NULL);\n\n    GlobalUnlock(hDIB);\n    GlobalFree(hDIB);\n    CloseHandle(hFile);\n\n    DeleteObject(hbmScreen);\n    DeleteObject(hdcMemDC);\n    ReleaseDC(NULL, hdcScreen);\n\n    return true;\n}\n\nint main() {\n    HWND hwnd = FindWindow(NULL, L"Title of Window to Capture");\n    if (hwnd == NULL) {\n        std::cerr << "Window not found\n";\n        return 1;\n    }\n\n    if (CaptureWindow(hwnd, L"capture.bmp")) {\n        std::cout << "Capture successful\n";\n    } else {\n        std::cout << "Capture failed\n";\n    }\n\n    return 0;\n}