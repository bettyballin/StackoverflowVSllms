#include <iostream>\n#include <fstream>\n#include <vector>\n\n// Define the Vertex structure and ensure it is packed\nstruct Vertex\n{\n    float point[3];\n    float normal[3];\n    float texcoord[2];\n} __attribute__((packed));\n\nvoid writeVerticesToFile(const std::vector<Vertex>& vertices, const std::string& filename)\n{\n    std::ofstream ofs(filename, std::ios::binary);\n    if (!ofs)\n    {\n        std::cerr << "Failed to open file for writing: " << filename << std::endl;\n        return;\n    }\n    ofs.write(reinterpret_cast<const char*>(vertices.data()), vertices.size() * sizeof(Vertex));\n    ofs.close();\n}\n\nstd::vector<Vertex> readVerticesFromFile(const std::string& filename)\n{\n    std::ifstream ifs(filename, std::ios::binary);\n    if (!ifs)\n    {\n        std::cerr << "Failed to open file for reading: " << filename << std::endl;\n        return {};\n    }\n\n    // Determine the file size\n    ifs.seekg(0, std::ios::end);\n    std::streamsize size = ifs.tellg();\n    ifs.seekg(0, std::ios::beg);\n\n    // Ensure the file size is a multiple of Vertex size\n    if (size % sizeof(Vertex) != 0)\n    {\n        std::cerr << "File size is not a multiple of Vertex size." << std::endl;\n        return {};\n    }\n\n    // Read the data into a vector\n    std::vector<Vertex> vertices(size / sizeof(Vertex));\n    ifs.read(reinterpret_cast<char*>(vertices.data()), size);\n    ifs.close();\n\n    return vertices;\n}\n\nint main()\n{\n    // Example usage\n    std::vector<Vertex> vertices = {\n        {{1.0f, 2.0f, 3.0f}, {0.0f, 1.0f, 0.0f}, {0.5f, 0.5f}},\n        {{4.0f, 5.0f, 6.0f}, {1.0f, 0.0f, 0.0f}, {0.6f, 0.6f}},\n    };\n\n    std::string filename = "vertices.bin";\n\n    // Write vertices to file\n    writeVerticesToFile(vertices, filename);\n\n    // Read vertices from file\n    std::vector<Vertex> readVertices = readVerticesFromFile(filename);\n\n    // Output read vertices\n    for (const auto& vertex : readVertices)\n    {\n        std::cout << "Point: (" << vertex.point[0] << ", " << vertex.point[1] << ", " << vertex.point[2] << ")\n";\n        std::cout << "Normal: (" << vertex.normal[0] << ", " << vertex.normal[1] << ", " << vertex.normal[2] << ")\n";\n        std::cout << "Texcoord: (" << vertex.texcoord[0] << ", " << vertex.texcoord[1] << ")\n";\n    }\n\n    return 0;\n}