#include <windows.h>\n#include <iostream>\n\ndouble CalculateCPULoad(HANDLE hProcess) {\n    static FILETIME prevSysKernel, prevSysUser, prevProcKernel, prevProcUser;\n    FILETIME sysIdle, sysKernel, sysUser;\n    FILETIME procCreation, procExit, procKernel, procUser;\n\n    if (!GetSystemTimes(&sysIdle, &sysKernel, &sysUser) ||\n        !GetProcessTimes(hProcess, &procCreation, &procExit, &procKernel, &procUser)) {\n        return -1.0;\n    }\n\n    if (CompareFileTime(&prevSysKernel, &sysKernel) == 0 &&\n        CompareFileTime(&prevSysUser, &sysUser) == 0) {\n        memcpy(&prevSysKernel, &sysKernel, sizeof(FILETIME));\n        memcpy(&prevSysUser, &sysUser, sizeof(FILETIME));\n        memcpy(&prevProcKernel, &procKernel, sizeof(FILETIME));\n        memcpy(&prevProcUser, &procUser, sizeof(FILETIME));\n        return -1.0;\n    }\n\n    ULARGE_INTEGER sysKernelDiff, sysUserDiff, procKernelDiff, procUserDiff;\n\n    sysKernelDiff.QuadPart = (*(ULARGE_INTEGER*)&sysKernel).QuadPart - (*(ULARGE_INTEGER*)&prevSysKernel).QuadPart;\n    sysUserDiff.QuadPart = (*(ULARGE_INTEGER*)&sysUser).QuadPart - (*(ULARGE_INTEGER*)&prevSysUser).QuadPart;\n\n    procKernelDiff.QuadPart = (*(ULARGE_INTEGER*)&procKernel).QuadPart - (*(ULARGE_INTEGER*)&prevProcKernel).QuadPart;\n    procUserDiff.QuadPart = (*(ULARGE_INTEGER*)&procUser).QuadPart - (*(ULARGE_INTEGER*)&prevProcUser).QuadPart;\n\n    double sysTotal = (double)(sysKernelDiff.QuadPart + sysUserDiff.QuadPart);\n    double procTotal = (double)(procKernelDiff.QuadPart + procUserDiff.QuadPart);\n\n    memcpy(&prevSysKernel, &sysKernel, sizeof(FILETIME));\n    memcpy(&prevSysUser, &sysUser, sizeof(FILETIME));\n    memcpy(&prevProcKernel, &procKernel, sizeof(FILETIME));\n    memcpy(&prevProcUser, &procUser, sizeof(FILETIME));\n\n    return (procTotal / sysTotal) * 100.0;\n}\n\nint main() {\n    HANDLE hProcess = GetCurrentProcess();\n    while (true) {\n        double cpuLoad = CalculateCPULoad(hProcess);\n        if (cpuLoad >= 0.0) {\n            std::cout << "CPU Load: " << cpuLoad << "%" << std::endl;\n        }\n        Sleep(1000);\n    }\n    return 0;\n}