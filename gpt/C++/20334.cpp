#include <iostream>\n#include <windows.h>\n\ntypedef void (*PluginFunction)();\n\nextern "C" {\n    typedef struct Plugin {\n        const char* name;\n        PluginFunction initialize;\n        PluginFunction shutdown;\n    } Plugin;\n\n    typedef Plugin* (*GetPluginFunc)();\n}\n\nint main() {\n    HMODULE pluginModule = LoadLibrary("plugin.dll");\n    if (!pluginModule) {\n        std::cerr << "Failed to load plugin" << std::endl;\n        return 1;\n    }\n\n    GetPluginFunc getPlugin = (GetPluginFunc)GetProcAddress(pluginModule, "getPlugin");\n    if (!getPlugin) {\n        std::cerr << "Failed to find getPlugin function" << std::endl;\n        return 1;\n    }\n\n    Plugin* plugin = getPlugin();\n    plugin->initialize();\n    std::cout << "Plugin name: " << plugin->name << std::endl;\n    plugin->shutdown();\n\n    FreeLibrary(pluginModule);\n    return 0;\n}