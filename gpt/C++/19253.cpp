class BaseProtocol {\nprotected:\n    int NumberOfBytesInPackOfText;\n    std::string serviceString;\npublic:\n    BaseProtocol(int SizeOfTextPack, const char* extraString): \n        NumberOfBytesInPackOfText(SizeOfTextPack), \n        serviceString(extraString) {}\n    virtual std::string& convertToSystemMessage(const char* message) = 0;\n    virtual std::string& convertToNativeMessage(const char* message) = 0;\n    virtual ~BaseProtocol() {\n        NumberOfBytesInPackOfText = 0;\n        serviceString = "";\n    }\n};\n\nclass ServerProtocol: public BaseProtocol {\npublic:\n    ServerProtocol(int SizeOfTextPack, const char* service): \n        BaseProtocol(SizeOfTextPack, service) {}\n    std::string& convertToSystemMessage(const char* nativeMessage) override {\n        // Implement server-specific conversion to system message\n    }\n    std::string& convertToNativeMessage(const char* systemMessage) override {\n        // Implement server-specific conversion to native message\n    }\n};\n\nclass ClientProtocol: public BaseProtocol {\npublic:\n    ClientProtocol(int SizeOfTextPack, const char* service): \n        BaseProtocol(SizeOfTextPack, service) {}\n    std::string& convertToSystemMessage(const char* nativeMessage) override {\n        // Implement client-specific conversion to system message\n    }\n    std::string& convertToNativeMessage(const char* systemMessage) override {\n        // Implement client-specific conversion to native message\n    }\n};