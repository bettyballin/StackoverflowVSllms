#include <windows.h>\n#include <wlanapi.h>\n#include <objbase.h>\n#include <wtypes.h>\n#include <iostream>\n\n#pragma comment(lib, "wlanapi.lib")\n#pragma comment(lib, "ole32.lib")\n\nint main()\n{\n    HANDLE hClient = NULL;\n    DWORD dwMaxClient = 2;      // Version 2.0\n    DWORD dwCurVersion = 0;\n    DWORD dwResult = 0;\n    DWORD dwRetVal = 0;\n\n    // Initialize the handle for the WLAN API\n    dwResult = WlanOpenHandle(dwMaxClient, NULL, &dwCurVersion, &hClient);\n    if (dwResult != ERROR_SUCCESS) {\n        std::cerr << "WlanOpenHandle failed with error: " << dwResult << std::endl;\n        return 1;\n    }\n\n    PWLAN_INTERFACE_INFO_LIST pIfList = NULL;\n    PWLAN_INTERFACE_INFO pIfInfo = NULL;\n\n    // Enumerate wireless interfaces\n    dwResult = WlanEnumInterfaces(hClient, NULL, &pIfList);\n    if (dwResult != ERROR_SUCCESS) {\n        std::cerr << "WlanEnumInterfaces failed with error: " << dwResult << std::endl;\n        WlanCloseHandle(hClient, NULL);\n        return 1;\n    }\n\n    // Loop through the list of interfaces\n    for (int i = 0; i < (int)pIfList->dwNumberOfItems; i++) {\n        pIfInfo = (WLAN_INTERFACE_INFO*)&pIfList->InterfaceInfo[i];\n\n        PWLAN_AVAILABLE_NETWORK_LIST pBssList = NULL;\n\n        // Get the list of available networks for the interface\n        dwResult = WlanGetAvailableNetworkList(hClient,\n                                               &pIfInfo->InterfaceGuid,\n                                               0,\n                                               NULL,\n                                               &pBssList);\n\n        if (dwResult != ERROR_SUCCESS) {\n            std::cerr << "WlanGetAvailableNetworkList failed with error: " << dwResult << std::endl;\n            continue;\n        }\n\n        // Print the SSIDs of the available networks\n        for (int j = 0; j < (int)pBssList->dwNumberOfItems; j++) {\n            std::wcout << "SSID: " << pBssList->Network[j].dot11Ssid.ucSSID << std::endl;\n        }\n\n        // Free the memory allocated for the network list\n        if (pBssList != NULL) {\n            WlanFreeMemory(pBssList);\n            pBssList = NULL;\n        }\n    }\n\n    // Free the memory allocated for the interface list\n    if (pIfList != NULL) {\n        WlanFreeMemory(pIfList);\n        pIfList = NULL;\n    }\n\n    // Close the handle to the WLAN API\n    WlanCloseHandle(hClient, NULL);\n\n    return 0;\n}