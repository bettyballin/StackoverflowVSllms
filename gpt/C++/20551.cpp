#include <windows.h>\n#include <iostream>\n\n#define PIPE_NAME "\\\\.\\pipe\\MyNamedPipe"\n\nint main()\n{\n    HANDLE hPipe;\n    char buffer[1024];\n    DWORD dwRead;\n\n    // Create a named pipe\n    hPipe = CreateNamedPipe(\n        PIPE_NAME,             // pipe name\n        PIPE_ACCESS_DUPLEX,    // read/write access\n        PIPE_TYPE_MESSAGE |    // message type pipe\n        PIPE_READMODE_MESSAGE | // message-read mode\n        PIPE_WAIT,             // blocking mode\n        1,                     // number of instances\n        1024 * 16,             // output buffer size\n        1024 * 16,             // input buffer size\n        NMPWAIT_USE_DEFAULT_WAIT, // client time-out\n        NULL);                 // default security attribute\n\n    if (hPipe == INVALID_HANDLE_VALUE)\n    {\n        std::cerr << "CreateNamedPipe failed, GLE=" << GetLastError() << std::endl;\n        return 1;\n    }\n\n    std::cout << "Waiting for client connection..." << std::endl;\n\n    // Wait for the client to connect\n    BOOL fConnected = ConnectNamedPipe(hPipe, NULL) ?\n                      TRUE : (GetLastError() == ERROR_PIPE_CONNECTED);\n\n    if (fConnected)\n    {\n        std::cout << "Client connected, reading data..." << std::endl;\n        // Read client requests from the pipe\n        BOOL fSuccess = ReadFile(\n            hPipe,        // handle to pipe\n            buffer,       // buffer to receive data\n            sizeof(buffer) - 1, // size of buffer\n            &dwRead,      // number of bytes read\n            NULL);        // not overlapped I/O\n\n        if (fSuccess)\n        {\n            buffer[dwRead] = '\0'; // null terminate the string\n            std::cout << "Received: " << buffer << std::endl;\n        }\n        else\n        {\n            std::cerr << "ReadFile failed, GLE=" << GetLastError() << std::endl;\n        }\n    }\n    else\n    {\n        std::cerr << "ConnectNamedPipe failed, GLE=" << GetLastError() << std::endl;\n    }\n\n    // Close the pipe\n    CloseHandle(hPipe);\n\n    return 0;\n}