#include <iostream>\n#include <vector>\n#include <queue>\n\nusing namespace std;\n\n// Define a struct to represent a point in the image\nstruct Point {\n    int x, y;\n};\n\n// Directions for moving up, down, left, and right\nconst vector<Point> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\n// Function to check if a point is inside the image boundaries\nbool isInside(int x, int y, int rows, int cols) {\n    return x >= 0 && x < rows && y >= 0 && y < cols;\n}\n\n// Function to perform flood fill and count connected pixels\nint floodFill(vector<vector<int>>& image, int x, int y, int targetColor) {\n    int rows = image.size();\n    int cols = image[0].size();\n    \n    if (image[x][y] != targetColor) return 0;\n\n    queue<Point> q;\n    q.push({x, y});\n    image[x][y] = -1; // Mark the starting point as visited\n    int count = 1;\n\n    while (!q.empty()) {\n        Point p = q.front();\n        q.pop();\n\n        for (const auto& dir : directions) {\n            int newX = p.x + dir.x;\n            int newY = p.y + dir.y;\n\n            if (isInside(newX, newY, rows, cols) && image[newX][newY] == targetColor) {\n                q.push({newX, newY});\n                image[newX][newY] = -1; // Mark as visited\n                count++;\n            }\n        }\n    }\n\n    return count;\n}\n\n// Example usage\nint main() {\n    // Example image (2D vector) with 0 representing background and 1 representing character pixels\n    vector<vector<int>> image = {\n        {0, 0, 1, 1, 0},\n        {0, 1, 1, 0, 0},\n        {0, 0, 1, 0, 0},\n        {1, 1, 0, 0, 0},\n        {1, 1, 0, 0, 0}\n    };\n\n    // Count connected pixels starting from (0, 2)\n    int x = 0;\n    int y = 2;\n    int targetColor = 1; // The color of the character pixels to count\n\n    int connectedPixels = floodFill(image, x, y, targetColor);\n\n    cout << "Number of connected pixels: " << connectedPixels << endl;\n\n    return 0;\n}