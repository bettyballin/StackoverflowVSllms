#include <ShlObj.h>  // For IDropTarget and related interfaces\n\nclass TYourForm : public TForm, public IDropTarget {\n    // Your form and IDropTarget implementation here\npublic:\n    // Implement IDropTarget methods\n    HRESULT STDMETHODCALLTYPE DragEnter(IDataObject *pDataObj, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect) {\n        // Your existing DragEnter implementation\n    }\n    \n    HRESULT STDMETHODCALLTYPE DragOver(DWORD grfKeyState, POINTL pt, DWORD *pdwEffect) {\n        // Your DragOver implementation\n    }\n    \n    HRESULT STDMETHODCALLTYPE DragLeave() {\n        // Your DragLeave implementation\n    }\n    \n    HRESULT STDMETHODCALLTYPE Drop(IDataObject *pDataObj, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect) {\n        // Your Drop implementation\n    }\n\n    // Handle the form's MouseMove event to simulate DragEnter\n    void __fastcall FormMouseMove(TObject *Sender, TShiftState Shift, int X, int Y) {\n        POINTL pt;\n        pt.x = X;\n        pt.y = Y;\n\n        // Check if the coordinates are within your drop target component\n        if (IsInDropTargetComponent(pt)) {\n            IDataObject *pDataObj; // You need to get or create a valid IDataObject instance\n            DWORD grfKeyState = 0; // Adjust based on your needs\n            DWORD dwEffect = 0;    // Adjust based on your needs\n\n            // Manually call DragEnter\n            DragEnter(pDataObj, grfKeyState, pt, &dwEffect);\n        }\n    }\n\n    bool IsInDropTargetComponent(POINTL pt) {\n        // Implement your logic to check if the point is within the bounds of the drop target component\n        // Return true if it is, otherwise return false\n    }\n};\n\n// Hook up the MouseMove event in your form's constructor or initialization code\n__fastcall TYourForm::TYourForm(TComponent* Owner) : TForm(Owner) {\n    this->OnMouseMove = FormMouseMove;\n}