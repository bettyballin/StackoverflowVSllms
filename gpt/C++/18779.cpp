#include <iostream>\n#include <string>\n#include <thread>\n#include <vector>\n#include <unistd.h> // For close()\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <cstring>\n\n// Function to handle individual client connections\nvoid handle_client(int client_socket) {\n    const int buffer_size = 4096;\n    char buffer[buffer_size];\n    bool keep_alive = true;\n\n    while (keep_alive) {\n        memset(buffer, 0, buffer_size);\n        int bytes_received = recv(client_socket, buffer, buffer_size, 0);\n        \n        if (bytes_received <= 0) {\n            break; // Error or connection closed by client\n        }\n\n        std::string request(buffer);\n        \n        // Check for "Connection: close" in the request\n        if (request.find("Connection: close") != std::string::npos) {\n            keep_alive = false;\n        }\n\n        // Process the request and forward to the end server\n        // (simple placeholder code)\n        std::string response = "HTTP/1.1 200 OK\r\n";\n        response += "Content-Length: 13\r\n";\n        if (keep_alive) {\n            response += "Connection: keep-alive\r\n";\n        } else {\n            response += "Connection: close\r\n";\n        }\n        response += "\r\n";\n        response += "Hello, world!";\n        \n        send(client_socket, response.c_str(), response.length(), 0);\n\n        // Check for "Connection: close" in the response\n        if (response.find("Connection: close") != std::string::npos) {\n            keep_alive = false;\n        }\n    }\n\n    close(client_socket);\n}\n\nint main() {\n    int server_socket = socket(AF_INET, SOCK_STREAM, 0);\n    sockaddr_in server_addr;\n\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(8080);\n    server_addr.sin_addr.s_addr = INADDR_ANY;\n\n    bind(server_socket, (sockaddr*)&server_addr, sizeof(server_addr));\n    listen(server_socket, SOMAXCONN);\n\n    while (true) {\n        int client_socket = accept(server_socket, nullptr, nullptr);\n        std::thread(handle_client, client_socket).detach();\n    }\n\n    close(server_socket);\n    return 0;\n}