#include <iostream>\n#include <fstream>\n#include <vector>\n\nclass BufferedLogger {\npublic:\n    BufferedLogger(const std::string& filename, size_t bufferSize) \n        : bufferSize(bufferSize), logFile(filename, std::ios::out | std::ios::binary) {\n        if (!logFile) {\n            throw std::ios_base::failure("Failed to open log file");\n        }\n    }\n\n    ~BufferedLogger() {\n        flush();\n        logFile.close();\n    }\n\n    void log(int number) {\n        buffer.push_back(number);\n        if (buffer.size() >= bufferSize) {\n            flush();\n        }\n    }\n\nprivate:\n    void flush() {\n        for (int number : buffer) {\n            logFile.write(reinterpret_cast<const char*>(&number), sizeof(number));\n        }\n        buffer.clear();\n    }\n\n    size_t bufferSize;\n    std::vector<int> buffer;\n    std::ofstream logFile;\n};\n\nint main() {\n    BufferedLogger logger("log.bin", 1024); // Buffer size of 1024 entries\n\n    for (int i = 0; i < 1000000; ++i) {\n        logger.log(i);\n    }\n\n    return 0;\n}