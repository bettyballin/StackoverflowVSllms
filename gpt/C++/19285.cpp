#include <windows.h>\n#include <iostream>\n\nint main() {\n    STARTUPINFO si;\n    PROCESS_INFORMATION pi;\n    ZeroMemory(&si, sizeof(si));\n    si.cb = sizeof(si);\n    ZeroMemory(&pi, sizeof(pi));\n\n    // Specify the command line to launch the child process\n    LPSTR commandLine = "notepad.exe";\n\n    // Create the child process\n    if (!CreateProcess(NULL, commandLine, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi)) {\n        std::cerr << "CreateProcess failed (" << GetLastError() << ").\n";\n        return 1;\n    }\n\n    // Wait for the child process to complete\n    WaitForSingleObject(pi.hProcess, INFINITE);\n\n    // Get the exit code of the child process\n    DWORD exitCode;\n    if (!GetExitCodeProcess(pi.hProcess, &exitCode)) {\n        std::cerr << "GetExitCodeProcess failed (" << GetLastError() << ").\n";\n    } else {\n        std::cout << "Child process exited with code " << exitCode << ".\n";\n    }\n\n    // Get the CPU usage times\n    FILETIME creationTime, exitTime, kernelTime, userTime;\n    if (GetProcessTimes(pi.hProcess, &creationTime, &exitTime, &kernelTime, &userTime)) {\n        SYSTEMTIME userSystemTime, kernelSystemTime;\n        FileTimeToSystemTime(&userTime, &userSystemTime);\n        FileTimeToSystemTime(&kernelTime, &kernelSystemTime);\n        \n        std::cout << "User time: " << userSystemTime.wHour << "h "\n                  << userSystemTime.wMinute << "m "\n                  << userSystemTime.wSecond << "s.\n";\n        std::cout << "Kernel time: " << kernelSystemTime.wHour << "h "\n                  << kernelSystemTime.wMinute << "m "\n                  << kernelSystemTime.wSecond << "s.\n";\n    } else {\n        std::cerr << "GetProcessTimes failed (" << GetLastError() << ").\n";\n    }\n\n    // Close process and thread handles\n    CloseHandle(pi.hProcess);\n    CloseHandle(pi.hThread);\n\n    return 0;\n}