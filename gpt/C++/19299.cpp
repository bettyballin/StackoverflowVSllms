#include <iostream>\n#include <sys/mman.h>\n#include <sys/wait.h>\n#include <unistd.h>\n\nint main() {\n    // Create shared memory\n    int *count = static_cast<int*>(mmap(nullptr, sizeof(int), PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, -1, 0));\n    if (count == MAP_FAILED) {\n        perror("mmap");\n        return 1;\n    }\n\n    *count = 0; // Initialize the shared counter\n\n    pid_t pid = fork();\n    if (pid < 0) {\n        perror("fork");\n        return 1;\n    } else if (pid == 0) {\n        // Child process\n        for (int i = 0; i < 100; ++i) {\n            ++(*count);\n        }\n        munmap(count, sizeof(int));\n        return 0;\n    } else {\n        // Parent process\n        wait(nullptr); // Wait for child process to finish\n        std::cout << "Final count: " << *count << std::endl;\n        munmap(count, sizeof(int));\n    }\n\n    return 0;\n}