#include <vector>\n#include <string>\n#include <algorithm>\n\n// Function to get the rank of a character\nint charRank(char c) {\n    switch(c) {\n        case 'A': return 0;\n        case 'C': return 1;\n        case 'G': return 2;\n        case 'T': return 3;\n        default: return 4; // For the wildcard character 'N' or any ambiguity code\n    }\n}\n\n// In-place MSD Radix Sort\nvoid msdRadixSort(std::vector<std::string>& arr, int depth, int maxLen) {\n    if (arr.size() <= 1 || depth >= maxLen) return;\n\n    std::vector<int> count(5, 0);\n\n    // Count occurrences\n    for (const auto& str : arr) {\n        int rank = (depth < str.size()) ? charRank(str[depth]) : 4; // Handle strings shorter than maxLen\n        count[rank]++;\n    }\n\n    // Compute prefix sums\n    std::vector<int> start(5, 0);\n    for (int i = 1; i < 5; ++i) {\n        start[i] = start[i - 1] + count[i - 1];\n    }\n\n    // Sort based on current character\n    std::vector<std::string> aux(arr.size());\n    for (const auto& str : arr) {\n        int rank = (depth < str.size()) ? charRank(str[depth]) : 4;\n        aux[start[rank]++] = str;\n    }\n\n    // Copy back to original array\n    std::copy(aux.begin(), aux.end(), arr.begin());\n\n    // Recursively sort each partition\n    int begin = 0;\n    for (int i = 0; i < 5; ++i) {\n        int end = (i == 4) ? arr.size() : start[i];\n        msdRadixSort(arr, depth + 1, maxLen);\n        begin = end;\n    }\n}\n\nint main() {\n    std::vector<std::string> dnaStrings = {"AGT", "AAG", "TTC", "GGA", "CCC"};\n    int maxLen = 100; // Maximum length of the DNA strings\n\n    msdRadixSort(dnaStrings, 0, maxLen);\n\n    for (const auto& str : dnaStrings) {\n        std::cout << str << " ";\n    }\n\n    return 0;\n}