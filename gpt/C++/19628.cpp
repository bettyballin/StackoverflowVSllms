// main.cpp\n#include <iostream>\n#include <windows.h>\n#include "MyClass.h"\n\ntypedef MyClass* (*CreateMyClassFunc)();\ntypedef void (*DestroyMyClassFunc)(MyClass*);\n\nint main() {\n    HMODULE hModule = LoadLibrary(TEXT("MyDll.dll"));\n    if (!hModule) {\n        std::cerr << "Failed to load DLL!" << std::endl;\n        return 1;\n    }\n\n    CreateMyClassFunc createMyClass = (CreateMyClassFunc)GetProcAddress(hModule, "CreateMyClass");\n    DestroyMyClassFunc destroyMyClass = (DestroyMyClassFunc)GetProcAddress(hModule, "DestroyMyClass");\n\n    if (!createMyClass || !destroyMyClass) {\n        std::cerr << "Failed to get function address!" << std::endl;\n        FreeLibrary(hModule);\n        return 1;\n    }\n\n    MyClass* obj = createMyClass();\n    obj->myMethod();\n\n    destroyMyClass(obj);\n    FreeLibrary(hModule);\n\n    return 0;\n}