#include "msgSrv.h"\n\nnamespace msgSrv {\n\nmsgSrv::msgSrv(int listenPort) : listenPort(listenPort) {\n    try {\n        asioIoService = new boost::asio::io_service();\n        asioSocket = new boost::asio::ip::udp::socket(*asioIoService, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), listenPort));\n    } catch (std::exception &e) {\n        std::cerr << "Error initializing ioservice or socket: " << e.what() << std::endl;\n    }\n}\n\nmsgSrv::~msgSrv() {\n    delete asioIoService;\n    delete asioSocket;\n}\n\nvoid msgSrv::start() {\n    asioSocket->async_receive_from(\n        boost::asio::buffer(rcvBuff), lastRcvdPcktEndp,\n        boost::bind(&msgSrv::pckRcvd, this,\n        boost::asio::placeholders::error,\n        boost::asio::placeholders::bytes_transferred)\n    );\n\n    // Run the io_service to start the asynchronous operation\n    asioIoService->run();\n}\n\nvoid msgSrv::pckRcvd(const boost::system::error_code &error, std::size_t bytesRcvd) {\n    if (!error) {\n        std::cout << "Rcvd " << bytesRcvd << " bytes\n";\n    } else {\n        std::cerr << "Error receiving packet: " << error.message() << std::endl;\n    }\n    \n    // Continue to receive the next packet\n    start();\n}\n\n}