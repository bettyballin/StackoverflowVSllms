#include <iostream>\n#include <vector>\n#include <functional>\n#include <string>\n\nclass MenuItem {\npublic:\n    MenuItem(const std::string& cmd, const std::string& desc, std::function<void()> action)\n        : command(cmd), description(desc), action(action) {}\n\n    const std::string& getCommand() const { return command; }\n    const std::string& getDescription() const { return description; }\n    void execute() const { action(); }\n\nprivate:\n    std::string command;\n    std::string description;\n    std::function<void()> action;\n};\n\nint main() {\n    std::vector<MenuItem> items;\n\n    items.emplace_back("add", "Adds 1 and 2", []() {\n        std::cout << "1 + 2 = " << (1 + 2) << std::endl;\n    });\n\n    items.emplace_back("exit", "Exit the program", []() {\n        std::cout << "Exiting the program." << std::endl;\n        std::exit(0);\n    });\n\n    while (true) {\n        std::cout << "Available commands:" << std::endl;\n        for (const auto& item : items) {\n            std::cout << item.getCommand() << " - " << item.getDescription() << std::endl;\n        }\n\n        std::string input;\n        std::cout << "Enter command: ";\n        std::getline(std::cin, input);\n\n        bool found = false;\n        for (const auto& item : items) {\n            if (item.getCommand() == input) {\n                item.execute();\n                found = true;\n                break;\n            }\n        }\n\n        if (!found) {\n            std::cout << "Unknown command. Please try again." << std::endl;\n        }\n    }\n\n    return 0;\n}