#include <vector>\n#include <iterator>\n#include <algorithm>\n\nclass Y {\n    // Assume Y is some class type\n};\n\nclass X {\npublic:\n    template <typename Iter1, typename Iter2>\n    X(Iter1 begin1, Iter1 end1, Iter2 begin2, Iter2 end2)\n        : mVec(concatenate(begin1, end1, begin2, end2)) {}\n\nprivate:\n    std::vector<Y> const mVec;\n\n    template <typename Iter1, typename Iter2>\n    static std::vector<Y> concatenate(Iter1 begin1, Iter1 end1, Iter2 begin2, Iter2 end2) {\n        std::vector<Y> result;\n        result.reserve(std::distance(begin1, end1) + std::distance(begin2, end2));\n        result.insert(result.end(), begin1, end1);\n        result.insert(result.end(), begin2, end2);\n        return result;\n    }\n};