#include <libxml/xmlschemas.h>\n#include <libxml/parser.h>\n#include <iostream>\n\nbool validateXML(const char* xmlFile, const char* xsdFile) {\n    xmlDocPtr doc = xmlReadFile(xmlFile, NULL, 0);\n    if (doc == NULL) {\n        std::cerr << "Failed to parse " << xmlFile << std::endl;\n        return false;\n    }\n\n    xmlSchemaParserCtxtPtr schemaParserCtxt = xmlSchemaNewParserCtxt(xsdFile);\n    xmlSchemaPtr schema = xmlSchemaParse(schemaParserCtxt);\n    xmlSchemaValidCtxtPtr schemaValidCtxt = xmlSchemaNewValidCtxt(schema);\n\n    int ret = xmlSchemaValidateDoc(schemaValidCtxt, doc);\n    if (ret == 0) {\n        std::cout << xmlFile << " is valid." << std::endl;\n    } else if (ret > 0) {\n        std::cout << xmlFile << " is invalid." << std::endl;\n    } else {\n        std::cout << "Validation generated an internal error." << std::endl;\n    }\n\n    xmlSchemaFreeValidCtxt(schemaValidCtxt);\n    xmlSchemaFree(schema);\n    xmlSchemaFreeParserCtxt(schemaParserCtxt);\n    xmlFreeDoc(doc);\n    xmlCleanupParser();\n\n    return (ret == 0);\n}\n\nint main() {\n    const char* xmlFile = "example.xml";\n    const char* xsdFile = "schema.xsd";\n\n    if (validateXML(xmlFile, xsdFile)) {\n        std::cout << "XML is valid against the schema." << std::endl;\n    } else {\n        std::cout << "XML is not valid against the schema." << std::endl;\n    }\n\n    return 0;\n}