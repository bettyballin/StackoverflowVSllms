#include <windows.h>\n#include <userenv.h>\n#include <tlhelp32.h>\n\nBOOL GetTokenByProcessName(LPCTSTR processName, HANDLE &hToken)\n{\n    HANDLE hProcessSnap = INVALID_HANDLE_VALUE;\n    PROCESSENTRY32 pe32;\n    BOOL bRet = FALSE;\n\n    // Take a snapshot of all processes in the system.\n    hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n    if (hProcessSnap == INVALID_HANDLE_VALUE)\n        return FALSE;\n\n    // Fill in the size of the structure before using it.\n    pe32.dwSize = sizeof(PROCESSENTRY32);\n\n    // Retrieve information about the first process,\n    // and exit if unsuccessful\n    if (!Process32First(hProcessSnap, &pe32))\n    {\n        CloseHandle(hProcessSnap);          // clean the snapshot object\n        return FALSE;\n    }\n\n    // Now walk the snapshot of processes\n    do\n    {\n        if (_tcsicmp(pe32.szExeFile, processName) == 0)\n        {\n            HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION, FALSE, pe32.th32ProcessID);\n            if (hProcess)\n            {\n                if (OpenProcessToken(hProcess, TOKEN_DUPLICATE | TOKEN_QUERY | TOKEN_ASSIGN_PRIMARY, &hToken))\n                {\n                    bRet = TRUE;\n                }\n                CloseHandle(hProcess);\n            }\n            break;\n        }\n    } while (Process32Next(hProcessSnap, &pe32));\n\n    CloseHandle(hProcessSnap);\n    return bRet;\n}\n\nvoid LaunchNotepadInUserSession()\n{\n    HANDLE hToken = NULL;\n    STARTUPINFO si;\n    PROCESS_INFORMATION pi;\n    DWORD dwSessionId, winlogonPid;\n    HANDLE hUserTokenDup, hPToken;\n    DWORD dwCreationFlags;\n\n    // Get the session ID of the user logged in to Winlogon.exe\n    dwSessionId = WTSGetActiveConsoleSessionId();\n    GetTokenByProcessName(_T("winlogon.exe"), hToken);\n\n    // Duplicate the token\n    if (!DuplicateTokenEx(hToken, MAXIMUM_ALLOWED, NULL, SecurityIdentification, TokenPrimary, &hUserTokenDup))\n    {\n        CloseHandle(hToken);\n        return;\n    }\n\n    // Initialize the STARTUPINFO structure\n    ZeroMemory(&si, sizeof(STARTUPINFO));\n    si.cb = sizeof(STARTUPINFO);\n    si.lpDesktop = _T("winsta0\\default");\n\n    dwCreationFlags = NORMAL_PRIORITY_CLASS | CREATE_NEW_CONSOLE;\n\n    // Launch the process in the user's session\n    if (!CreateProcessAsUser(hUserTokenDup, _T("C:\\Windows\\System32\\notepad.exe"), NULL, NULL, NULL, FALSE, dwCreationFlags, NULL, NULL, &si, &pi))\n    {\n        CloseHandle(hToken);\n        CloseHandle(hUserTokenDup);\n        return;\n    }\n\n    // Close handles\n    CloseHandle(pi.hProcess);\n    CloseHandle(pi.hThread);\n    CloseHandle(hToken);\n    CloseHandle(hUserTokenDup);\n}