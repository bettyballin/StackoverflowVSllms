#include <boost/asio.hpp>\n   #include <iostream>\n\n   using namespace boost::asio;\n   using ip::tcp;\n\n   int main() {\n       try {\n           io_service io_service;\n           tcp::resolver resolver(io_service);\n           tcp::resolver::query query("www.example.com", "80");\n           tcp::resolver::iterator endpoint_iterator = resolver.resolve(query);\n\n           tcp::socket socket(io_service);\n           connect(socket, endpoint_iterator);\n\n           const std::string request = "GET / HTTP/1.1\r\nHost: www.example.com\r\n\r\n";\n           write(socket, buffer(request));\n\n           boost::asio::streambuf response;\n           read_until(socket, response, "\r\n");\n\n           std::istream response_stream(&response);\n           std::string http_version;\n           response_stream >> http_version;\n           unsigned int status_code;\n           response_stream >> status_code;\n           std::string status_message;\n           std::getline(response_stream, status_message);\n\n           if (!response_stream || http_version.substr(0, 5) != "HTTP/") {\n               std::cout << "Invalid response\n";\n               return 1;\n           }\n           std::cout << "Response returned with status code " << status_code << "\n";\n       } catch (std::exception& e) {\n           std::cerr << "Exception: " << e.what() << "\n";\n       }\n\n       return 0;\n   }