#include <windows.h>\n#include <iostream>\n#include <vector>\n#include <string>\n\nvoid CaptureOutput(const std::string& command) {\n    SECURITY_ATTRIBUTES sa;\n    sa.nLength = sizeof(SECURITY_ATTRIBUTES);\n    sa.bInheritHandle = TRUE;\n    sa.lpSecurityDescriptor = NULL;\n\n    // Create pipes for stdout and stderr\n    HANDLE hStdOutRead, hStdOutWrite;\n    HANDLE hStdErrRead, hStdErrWrite;\n    CreatePipe(&hStdOutRead, &hStdOutWrite, &sa, 0);\n    CreatePipe(&hStdErrRead, &hStdErrWrite, &sa, 0);\n\n    // Ensure the write handles to the pipes are not inherited.\n    SetHandleInformation(hStdOutRead, HANDLE_FLAG_INHERIT, 0);\n    SetHandleInformation(hStdErrRead, HANDLE_FLAG_INHERIT, 0);\n\n    PROCESS_INFORMATION pi;\n    STARTUPINFO si;\n    ZeroMemory(&pi, sizeof(PROCESS_INFORMATION));\n    ZeroMemory(&si, sizeof(STARTUPINFO));\n    si.cb = sizeof(STARTUPINFO);\n    si.hStdOutput = hStdOutWrite;\n    si.hStdError = hStdErrWrite;\n    si.dwFlags |= STARTF_USESTDHANDLES;\n\n    // Convert command string to LPSTR\n    std::vector<char> cmd(command.begin(), command.end());\n    cmd.push_back('\0');\n\n    if (!CreateProcess(NULL, cmd.data(), NULL, NULL, TRUE, 0, NULL, NULL, &si, &pi)) {\n        std::cerr << "CreateProcess failed (" << GetLastError() << ").\n";\n        return;\n    }\n\n    // Close the no longer needed write ends of the pipes\n    CloseHandle(hStdOutWrite);\n    CloseHandle(hStdErrWrite);\n\n    // Read output from the child process's stdout and stderr\n    char buffer[4096];\n    DWORD bytesRead;\n    while (true) {\n        if (!ReadFile(hStdOutRead, buffer, sizeof(buffer) - 1, &bytesRead, NULL) || bytesRead == 0)\n            break;\n        buffer[bytesRead] = '\0';\n        std::cout << "stdout: " << buffer;\n    }\n    while (true) {\n        if (!ReadFile(hStdErrRead, buffer, sizeof(buffer) - 1, &bytesRead, NULL) || bytesRead == 0)\n            break;\n        buffer[bytesRead] = '\0';\n        std::cerr << "stderr: " << buffer;\n    }\n\n    // Wait until child process exits\n    WaitForSingleObject(pi.hProcess, INFINITE);\n\n    // Close handles\n    CloseHandle(pi.hProcess);\n    CloseHandle(pi.hThread);\n    CloseHandle(hStdOutRead);\n    CloseHandle(hStdErrRead);\n}\n\nint main() {\n    std::string command = "your_command_here";  // Replace with your command\n    CaptureOutput(command);\n    return 0;\n}