#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <string>\n#include <unordered_map>\n\nstruct pky {\n    int a_id;\n    int sz_id;\n    int cr_id;\n    int cp_id;\n    int cv_id;\n    int ct_id;\n    int fr;\n    char g;\n    int a;\n    int pc;\n    int p_id;\n\n    pky() : a_id(0), sz_id(0), cr_id(0), cp_id(0), cv_id(0), ct_id(0), fr(0), g('U'), a(0), pc(0), p_id(0) {}\n};\n\nclass Parser {\npublic:\n    void parseFile(const std::string& filename) {\n        std::ifstream file(filename);\n        std::string line;\n        while (std::getline(file, line)) {\n            pky pk = parseLine(line);\n            // Use the populated structure `pk` here\n            // For example, you can pass it to another function:\n            // someFunction(pk);\n        }\n    }\n\nprivate:\n    pky parseLine(const std::string& line) {\n        std::istringstream iss(line);\n        std::unordered_map<std::string, int> kv_pairs;\n        std::string kv_pair;\n        \n        while (iss >> kv_pair) {\n            auto delimiter_pos = kv_pair.find('=');\n            std::string key = kv_pair.substr(0, delimiter_pos);\n            int value = std::stoi(kv_pair.substr(delimiter_pos + 1));\n            kv_pairs[key] = value;\n        }\n\n        pky pk;\n        if (kv_pairs.find("a") != kv_pairs.end()) pk.a_id = kv_pairs["a"];\n        if (kv_pairs.find("sz") != kv_pairs.end()) pk.sz_id = kv_pairs["sz"];\n        if (kv_pairs.find("cr") != kv_pairs.end()) pk.cr_id = kv_pairs["cr"];\n        if (kv_pairs.find("cp") != kv_pairs.end()) pk.cp_id = kv_pairs["cp"];\n        if (kv_pairs.find("cv") != kv_pairs.end()) pk.cv_id = kv_pairs["cv"];\n        if (kv_pairs.find("ct") != kv_pairs.end()) pk.ct_id = kv_pairs["ct"];\n        if (kv_pairs.find("rec") != kv_pairs.end()) pk.fr = kv_pairs["rec"];\n        if (kv_pairs.find("g") != kv_pairs.end()) pk.g = static_cast<char>(kv_pairs["g"]);\n        if (kv_pairs.find("a") != kv_pairs.end()) pk.a = kv_pairs["a"];\n        if (kv_pairs.find("pc") != kv_pairs.end()) pk.pc = kv_pairs["pc"];\n        if (kv_pairs.find("p") != kv_pairs.end()) pk.p_id = kv_pairs["p"];\n\n        return pk;\n    }\n};\n\nint main() {\n    Parser parser;\n    parser.parseFile("input.txt");\n    return 0;\n}