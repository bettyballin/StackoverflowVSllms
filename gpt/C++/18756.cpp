#include <iostream>\n\n// Define the node structure\nstruct node {\n    char data;        // Character data\n    node* next;       // Pointer to the next node\n    node* back;       // Pointer to the previous node\n};\n\n// Define the doubly linked list class\nclass doubly_linked_list {\npublic:\n    node* first;\n    node* last;\n    int length;\n\n    // Constructor\n    doubly_linked_list() : first(nullptr), last(nullptr), length(0) {}\n\n    // Append node\n    node* append(const char c) {\n        // Create a new node and initialize the data member\n        node* new_node = new node;\n        new_node->data = c;\n        new_node->next = nullptr;\n        new_node->back = nullptr;\n\n        // If the list is not empty...\n        if (length > 0) {\n            // Maintain pointers to end nodes\n            node* old_last_node = last;\n            \n            // Re-assign the double link and exit link\n            old_last_node->next = new_node;\n            new_node->back = old_last_node;\n\n            // Re-assign the last pointer\n            last = new_node;\n        }\n        // If this is the first node\n        else {\n            // Assign first and last to the new node\n            last = first = new_node;\n        }\n\n        // Increase length and return the new node\n        ++length;\n        return last;\n    }\n\n    // Friendly output function\n    friend std::ostream& operator<<(std::ostream& out_s, const doubly_linked_list& source_list) {\n        // Create iteration node pointer\n        node* traverse_position = source_list.first;\n\n        // Iterate through, reading from start\n        while (traverse_position != nullptr) {\n            // Print the character\n            out_s << traverse_position->data;\n            traverse_position = traverse_position->next;\n        }\n\n        // Return the output stream\n        return out_s;\n    }\n};\n\nint main() {\n    doubly_linked_list adam;\n    adam.append('a');\n    adam.append('b');\n    adam.append('c');\n\n    std::cout << adam << std::endl;\n\n    return 0;\n}