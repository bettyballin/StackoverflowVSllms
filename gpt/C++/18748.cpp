template <typename Derived>\nclass Comparable {\npublic:\n    int Compare(const Derived& other) const {\n        return static_cast<const Derived*>(this)->CompareImpl(other);\n    }\n};\n\nclass A : public Comparable<A> {\npublic:\n    A() {}\n    ~A() {}\n\n    int CompareImpl(const A& other) const {\n        // Implement comparison logic specific to A\n        return 0; // Example placeholder\n    }\n};\n\nclass B : public Comparable<B> {\npublic:\n    B() {}\n    ~B() {}\n\n    int CompareImpl(const B& other) const {\n        // Implement comparison logic specific to B\n        return 0; // Example placeholder\n    }\n};\n\nclass C : public Comparable<C> {\npublic:\n    C() {}\n    ~C() {}\n\n    int CompareImpl(const C& other) const {\n        // Implement comparison logic specific to C\n        return 0; // Example placeholder\n    }\n};