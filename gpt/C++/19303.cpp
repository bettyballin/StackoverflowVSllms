#include <iostream>\n#include <vector>\n#include <map>\n#include <set>\n#include <utility>\n\nstruct Vertex2D {\n    float x, y;\n    Vertex2D(float x, float y) : x(x), y(y) {}\n};\n\n// Function to convert indexed polygon to unindexed polygon\nstd::vector<std::vector<Vertex2D>> convertToUnindexed(\n    const std::vector<Vertex2D>& vertices,\n    const std::vector<std::pair<int, int>>& edges) {\n        \n    std::map<int, std::vector<int>> edge_map;\n    std::set<std::pair<int, int>> visited;\n    std::vector<std::vector<Vertex2D>> result;\n\n    // Populate the edge map\n    for (const auto& edge : edges) {\n        edge_map[edge.first].push_back(edge.second);\n    }\n\n    // Function to find and traverse a polygon\n    auto traversePolygon = [&](int start_vertex) {\n        std::vector<Vertex2D> polygon;\n        int current_vertex = start_vertex;\n\n        do {\n            polygon.push_back(vertices[current_vertex]);\n            bool found_next_edge = false;\n\n            for (int next_vertex : edge_map[current_vertex]) {\n                if (visited.find({current_vertex, next_vertex}) == visited.end()) {\n                    visited.insert({current_vertex, next_vertex});\n                    current_vertex = next_vertex;\n                    found_next_edge = true;\n                    break;\n                }\n            }\n\n            if (!found_next_edge) break; // No unvisited edge found, exit loop\n\n        } while (current_vertex != start_vertex);\n\n        return polygon;\n    };\n\n    // Traverse and build polygons\n    for (const auto& edge : edges) {\n        if (visited.find(edge) == visited.end()) {\n            std::vector<Vertex2D> polygon = traversePolygon(edge.first);\n            if (!polygon.empty()) {\n                result.push_back(polygon);\n            }\n        }\n    }\n\n    return result;\n}\n\nint main() {\n    std::vector<Vertex2D> vertices = {\n        Vertex2D(1, 0), Vertex2D(1, 1), Vertex2D(0, 1), Vertex2D(0, 0)\n    };\n    std::vector<std::pair<int, int>> edges = {\n        {0, 1}, {1, 2}, {2, 3}, {3, 0}\n    };\n\n    auto unindexed_polygons = convertToUnindexed(vertices, edges);\n    \n    // Print results\n    for (const auto& polygon : unindexed_polygons) {\n        std::cout << "Polygon: ";\n        for (const auto& vertex : polygon) {\n            std::cout << "(" << vertex.x << ", " << vertex.y << ") ";\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;\n}