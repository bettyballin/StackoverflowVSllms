#include <dshow.h>\n#include <iostream>\n#include <vector>\n#include <string>\n\n// Helper function to list codecs\nvoid ListCodecs(const GUID& category, const std::string& type) {\n    ICreateDevEnum *pDevEnum = NULL;\n    IEnumMoniker *pEnum = NULL;\n    \n    // Initialize the COM library\n    CoInitialize(NULL);\n    \n    // Create the System Device Enumerator\n    HRESULT hr = CoCreateInstance(CLSID_SystemDeviceEnum, NULL, CLSCTX_INPROC_SERVER,\n                                  IID_ICreateDevEnum, (void**)&pDevEnum);\n    \n    if (FAILED(hr)) {\n        std::cerr << "Failed to create device enumerator." << std::endl;\n        return;\n    }\n    \n    // Create an enumerator for the category\n    hr = pDevEnum->CreateClassEnumerator(category, &pEnum, 0);\n    if (hr == S_OK) {\n        IMoniker *pMoniker = NULL;\n        while (pEnum->Next(1, &pMoniker, NULL) == S_OK) {\n            IPropertyBag *pPropBag;\n            hr = pMoniker->BindToStorage(0, 0, IID_IPropertyBag, (void**)&pPropBag);\n            if (SUCCEEDED(hr)) {\n                VARIANT var;\n                VariantInit(&var);\n                hr = pPropBag->Read(L"FriendlyName", &var, 0);\n                if (SUCCEEDED(hr)) {\n                    std::wcout << type << ": " << var.bstrVal << std::endl;\n                }\n                VariantClear(&var);\n                pPropBag->Release();\n            }\n            pMoniker->Release();\n        }\n        pEnum->Release();\n    } else {\n        std::cerr << "No devices found." << std::endl;\n    }\n    \n    pDevEnum->Release();\n    CoUninitialize();\n}\n\nint main() {\n    // List video compressors (encoders)\n    ListCodecs(CLSID_VideoCompressorCategory, "Encoder");\n    \n    // List video decompressors (decoders)\n    ListCodecs(CLSID_VideoDecoderCategory, "Decoder");\n    \n    return 0;\n}