#include <Windows.h>\n#include <ExDisp.h>\n#include <ExDispID.h>\n#include <shlguid.h>\n#include <shlobj.h>\n#include <atlbase.h>\n#include <atlcom.h>\n\nstatic SHDocVw::IWebBrowser2Ptr GetBrowserFromHWND(HWND hwnd) {\n    SHDocVw::IWebBrowser2Ptr spWebBrowser;\n    CComPtr<IServiceProvider> spServiceProvider;\n    if (SUCCEEDED(::CoCreateInstance(CLSID_ShellWindows, NULL, CLSCTX_ALL, IID_IServiceProvider, (void**)&spServiceProvider))) {\n        CComPtr<IShellWindows> spShellWindows;\n        if (SUCCEEDED(spServiceProvider->QueryService(SID_STopLevelBrowser, IID_IShellWindows, (void**)&spShellWindows))) {\n            long count = 0;\n            spShellWindows->get_Count(&count);\n            for (long i = 0; i < count; i++) {\n                CComVariant vtIndex(i);\n                CComPtr<IDispatch> spDisp;\n                if (SUCCEEDED(spShellWindows->Item(vtIndex, &spDisp))) {\n                    CComPtr<IWebBrowser2> spBrowser2;\n                    if (SUCCEEDED(spDisp->QueryInterface(IID_IWebBrowser2, (void**)&spBrowser2)) && spBrowser2) {\n                        HWND hwndBrowser = NULL;\n                        if (SUCCEEDED(spBrowser2->get_HWND(reinterpret_cast<SHANDLE_PTR*>(&hwndBrowser)))) {\n                            if (hwndBrowser == hwnd) {\n                                spWebBrowser = spBrowser2;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return spWebBrowser;\n}\n\nstatic SHDocVw::IWebBrowser2Ptr findBrowserByPID(DWORD pid) {\n    SHDocVw::IShellWindowsPtr ptr;\n    ptr.CreateInstance(__uuidof(SHDocVw::ShellWindows));\n    if (ptr == NULL) {\n        return 0;\n    }\n\n    const long nCount = ptr->GetCount();\n\n    for (long i = 0; i < nCount; ++i) {\n        _variant_t va(i, VT_I4);\n        IDispatchPtr spDisp = ptr->Item(va);\n\n        SHDocVw::IWebBrowser2Ptr spBrowser(spDisp);\n        if (spBrowser != NULL) {\n            HWND browserWindow;\n            try {\n                browserWindow = (HWND)spBrowser->GetHWND();\n            } catch (const _com_error &e) {\n                continue;\n            }\n\n            DWORD browserPID;\n            GetWindowThreadProcessId(browserWindow, &browserPID);\n            if (browserPID == pid) {\n                return spBrowser;\n            }\n        }\n    }\n    return 0;\n}