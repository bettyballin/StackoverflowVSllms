#include <iostream>\n#include <vector>\n#include <functional>\n\ntemplate <class T>\nclass MyClass {\npublic:\n    void DoSomething() {\n        std::cout << "Doing something with MyClass<" << typeid(T).name() << ">\n";\n    }\n};\n\nclass Caller {\npublic:\n    template <class T>\n    void Add(MyClass<T>& obj) {\n        actions.emplace_back([&obj]() { obj.DoSomething(); });\n    }\n\n    void CallAll() {\n        for (auto& action : actions) {\n            action();\n        }\n    }\n\nprivate:\n    std::vector<std::function<void()>> actions;\n};\n\nint main() {\n    MyClass<int> obj1;\n    MyClass<double> obj2;\n\n    Caller caller;\n    caller.Add(obj1);\n    caller.Add(obj2);\n\n    caller.CallAll();\n\n    return 0;\n}