#include <iostream>\n#include <fstream>\n#include "Book.h" // Assuming Book class is defined in this header\n\nclass Library {\nprivate:\n    fstream dataFile;\n    fstream overflowFile;\n    int header;\npublic:\n    void addBook(Book newBook);\n};\n\nvoid Library::addBook(Book newBook) {\n    dataFile.open("BookData.dat", ios::in | ios::out | ios::binary);\n    if (!dataFile) {\n        cerr << "File could not be opened" << endl;\n        return;\n    }\n\n    int hashResult = newBook.getId() % 4 + 1; // The result of the hash function\n\n    // Find the right place to place the new book\n    dataFile.seekg((hashResult - 1) * sizeof(Book), ios::beg);\n    if (dataFile.fail()) {\n        cerr << "Seekg failed" << endl;\n        dataFile.close();\n        return;\n    }\n\n    Book readBook;\n    dataFile.read(reinterpret_cast<char*>(&readBook), sizeof(Book));\n    if (dataFile.fail()) {\n        cerr << "Read failed" << endl;\n        dataFile.close();\n        return;\n    }\n\n    // The record doesn't exist or it has been deleted\n    if (readBook.getId() == -1) {\n        // The record doesn't exist\n        if (readBook.getIdPtr() == -1) {\n            dataFile.seekp((hashResult - 1) * sizeof(Book), ios::beg);\n            if (dataFile.fail()) {\n                cerr << "Seekp failed" << endl;\n                dataFile.close();\n                return;\n            }\n            dataFile.write(reinterpret_cast<char*>(&newBook), sizeof(Book));\n            if (dataFile.fail()) {\n                cerr << "Write failed" << endl;\n            }\n        } else {\n            // The record has been deleted or there is already such record with such hash function\n            // so we need to follow the pointer to the overflow file\n            newBook.setIsBookInData(false); // New book is in overflow file\n            overflowFile.open("OverflowData.dat", ios::in | ios::out | ios::binary);\n            if (!overflowFile) {\n                cerr << "Overflow file could not be opened" << endl;\n                dataFile.close();\n                return;\n            }\n\n            overflowFile.seekg((readBook.getIdPtr() - 1) * sizeof(Book), ios::beg);\n            overflowFile.read(reinterpret_cast<char*>(&readBook), sizeof(Book));\n            // Follow the chain\n            while (readBook.getIdPtr() != -1) {\n                overflowFile.seekg((readBook.getIdPtr() - 1) * sizeof(Book), ios::beg);\n                overflowFile.read(reinterpret_cast<char*>(&readBook), sizeof(Book));\n            }\n            readBook.setIdPtr(header); // Make the pointer to point to the new book\n            overflowFile.seekp((header - 1) * sizeof(Book), ios::beg);\n            overflowFile.write(reinterpret_cast<char*>(&newBook), sizeof(Book));\n            header++;\n            overflowFile.close();\n        }\n    }\n    dataFile.close();\n}