#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <string>\n#include <map>\n#include <tinyxml2.h>\n\nusing namespace tinyxml2;\n\nstd::map<std::string, std::string> loadRules(const std::string& filePath) {\n    std::map<std::string, std::string> rules;\n    XMLDocument doc;\n    if (doc.LoadFile(filePath.c_str()) == XML_SUCCESS) {\n        XMLElement* root = doc.FirstChildElement("rules");\n        if (root) {\n            XMLElement* ruleElement = root->FirstChildElement("rule");\n            while (ruleElement) {\n                const char* pattern = ruleElement->Attribute("pattern");\n                const char* token = ruleElement->Attribute("token");\n                if (pattern && token) {\n                    rules[pattern] = token;\n                }\n                ruleElement = ruleElement->NextSiblingElement("rule");\n            }\n        }\n    }\n    return rules;\n}\n\nstd::string tokenizeText(const std::string& input, const std::map<std::string, std::string>& rules) {\n    std::string output;\n    std::string remainingText = input;\n    while (!remainingText.empty()) {\n        bool matched = false;\n        for (const auto& rule : rules) {\n            if (remainingText.find(rule.first) == 0) { // match at the beginning\n                if (!output.empty()) {\n                    output += " + ";\n                }\n                output += rule.second;\n                remainingText = remainingText.substr(rule.first.length());\n                matched = true;\n                break;\n            }\n        }\n        if (!matched) {\n            remainingText = remainingText.substr(1); // skip unmatched character\n        }\n    }\n    return output;\n}\n\nint main() {\n    const std::string xmlFilePath = "rules.xml";\n    const std::string inputText = "appu";\n    \n    std::map<std::string, std::string> rules = loadRules(xmlFilePath);\n    std::string result = tokenizeText(inputText, rules);\n    \n    std::cout << "Tokenized text: " << result << std::endl;\n\n    return 0;\n}