#include <iostream>\n#include <objbase.h>\n#include <ocidl.h>\n\n// Define your sink interface (IID_IS8SimulationEvents should be replaced with the actual IID)\nconst IID IID_IS8SimulationEvents = { /* Insert the actual IID here */ };\n\n// Sink class\nclass CSink : public IUnknown {\npublic:\n    CSink() : m_refCount(1) {}\n\n    // IUnknown methods\n    STDMETHODIMP QueryInterface(REFIID riid, void** ppv) {\n        if (riid == IID_IUnknown || riid == IID_IS8SimulationEvents) {\n            *ppv = static_cast<IS8SimulationEvents*>(this);\n        } else {\n            *ppv = nullptr;\n            return E_NOINTERFACE;\n        }\n        AddRef();\n        return S_OK;\n    }\n\n    STDMETHODIMP_(ULONG) AddRef() {\n        return InterlockedIncrement(&m_refCount);\n    }\n\n    STDMETHODIMP_(ULONG) Release() {\n        ULONG ulRefCount = InterlockedDecrement(&m_refCount);\n        if (0 == ulRefCount) {\n            delete this;\n        }\n        return ulRefCount;\n    }\n\n    // IS8SimulationEvents methods (example)\n    STDMETHODIMP S8SimulationReset() {\n        std::cout << "Simulation reset event received." << std::endl;\n        return S_OK;\n    }\n\nprivate:\n    LONG m_refCount;\n};