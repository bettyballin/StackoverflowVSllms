#include <windows.h>\n#include <shellapi.h>\n\nvoid AdjustForBorderPadding(HWND hwnd) {\n    NONCLIENTMETRICS ncm;\n    ncm.cbSize = sizeof(NONCLIENTMETRICS);\n\n    if (SystemParametersInfo(SPI_GETNONCLIENTMETRICS, sizeof(NONCLIENTMETRICS), &ncm, 0)) {\n        int borderPaddingX = ncm.iBorderWidth;\n        int borderPaddingY = ncm.iBorderHeight;\n\n        RECT rect;\n        GetWindowRect(hwnd, &rect);\n\n        // Adjust window size by border padding\n        SetWindowPos(hwnd, NULL, rect.left, rect.top,\n                     rect.right - rect.left + 2 * borderPaddingX,\n                     rect.bottom - rect.top + 2 * borderPaddingY,\n                     SWP_NOZORDER | SWP_NOACTIVATE);\n    }\n}\n\nint main() {\n    HINSTANCE AppInstance = GetModuleHandle(NULL);\n    HWND hwndToolbar = CreateWindowEx(WS_EX_TOOLWINDOW | WS_EX_TOPMOST, "MAIN_WNDCLASS",\n                                      "", WS_POPUP | WS_THICKFRAME | WS_CLIPCHILDREN,\n                                      0, 0, 400, TOOLBAR_HEIGHT, NULL, NULL,\n                                      AppInstance, NULL);\n\n    if (!hwndToolbar) {\n        return -1;\n    }\n\n    // Adjust toolbar for border padding\n    AdjustForBorderPadding(hwndToolbar);\n\n    APPBARDATA AppBarData = { sizeof(APPBARDATA) };\n    AppBarData.hWnd = hwndToolbar;\n    SHAppBarMessage(ABM_NEW, &AppBarData);\n\n    // Run message loop, etc.\n\n    return 0;\n}