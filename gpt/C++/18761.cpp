#include <windows.h>\n#include <iostream>\n\n// Define a structure to hold the arguments\nstruct ThreadParams {\n    SOCKET socket;\n    RangePtr pRange;\n};\n\n// Thread function\nDWORD WINAPI ThreadFunc(LPVOID lpParam) {\n    // Cast the parameter to ThreadParams*\n    ThreadParams* params = static_cast<ThreadParams*>(lpParam);\n\n    // Access the arguments\n    SOCKET socket = params->socket;\n    RangePtr pRange = params->pRange;\n\n    // Use the arguments\n    // ...\n\n    // Don't forget to free the memory allocated for the parameters\n    delete params;\n\n    return 0;\n}\n\nint main() {\n    // Initialize COM\n    CoInitializeEx(NULL, COINIT_MULTITHREADED);\n\n    // Create and initialize the arguments\n    ThreadParams* params = new ThreadParams;\n    params->socket = /* initialize your SOCKET */;\n    params->pRange = /* initialize your RangePtr */;\n\n    // Create the thread\n    HANDLE hThread = CreateThread(\n        NULL,          // default security attributes\n        0,             // default stack size\n        ThreadFunc,    // thread function\n        params,        // parameter to thread function\n        0,             // default creation flags\n        NULL);         // receive thread identifier\n\n    // Check the return value for success\n    if (hThread == NULL) {\n        std::cerr << "CreateThread failed, error: " << GetLastError() << std::endl;\n        delete params; // Clean up if thread creation failed\n        return 1;\n    }\n\n    // Wait for the thread to finish\n    WaitForSingleObject(hThread, INFINITE);\n\n    // Close the thread handle\n    CloseHandle(hThread);\n\n    // Uninitialize COM\n    CoUninitialize();\n\n    return 0;\n}