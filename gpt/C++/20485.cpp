#include <iostream>\n\nclass Base {\npublic:\n    Base() {}\n    virtual ~Base() {}\n\n    virtual bool Test() = 0;\n};\n\nclass A : public Base {\npublic:\n    bool Test() override {\n        std::cout << "A::Test()" << std::endl;\n        return true;\n    }\n};\n\nclass B : public Base {\npublic:\n    bool Test() override {\n        std::cout << "B::Test()" << std::endl;\n        return true;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    int size = 0;\n    const int maxSize = 10;\n    Base* bases[maxSize];\n\n    bases[size++] = new A();\n    bases[size++] = new B();\n\n    for (int i = 0; i < size; i++) {\n        Base* base = bases[i];\n        base->Test();\n    }\n\n    // Clean up allocated memory\n    for (int i = 0; i < size; i++) {\n        delete bases[i];\n    }\n\n    return 0;\n}