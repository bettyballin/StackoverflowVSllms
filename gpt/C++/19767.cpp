#include <iostream>\nusing namespace std;\n\nclass ListNode {\nprivate:\n    struct Node {\n        int value;\n        Node *next;\n        Node(int v, Node *n = nullptr) : value(v), next(n) {}\n    } *lnFirst;\n\npublic:\n    ListNode() : lnFirst(nullptr) {}\n\n    int getValue(int num) {\n        Node *lnTemp = lnFirst;\n        int intCount = 1;\n        while (lnTemp != nullptr) {\n            if (intCount == num) {\n                return lnTemp->value;\n            }\n            lnTemp = lnTemp->next;\n            intCount++;\n        }\n        return -1; // Return -1 if the index does not exist\n    }\n\n    Node* getNext(Node *node) {\n        if (node != nullptr) {\n            return node->next;\n        }\n        return nullptr;\n    }\n\n    void insert(int num) {\n        if (lnFirst == nullptr) {\n            lnFirst = new Node(num);\n        } else {\n            Node *lnCurrent = lnFirst;\n            while (lnCurrent->next != nullptr) {\n                lnCurrent = lnCurrent->next;\n            }\n            lnCurrent->next = new Node(num);\n        }\n    }\n\n    bool listContains(int num) {\n        Node *lnCurrent = lnFirst;\n        while (lnCurrent != nullptr) {\n            if (lnCurrent->value == num) {\n                return true;\n            }\n            lnCurrent = lnCurrent->next;\n        }\n        return false;\n    }\n\n    void displayList() {\n        Node *lnTemp = lnFirst;\n        while (lnTemp != nullptr) {\n            cout << lnTemp->value << " ";\n            lnTemp = lnTemp->next;\n        }\n        cout << endl;\n    }\n};\n\nint main() {\n    ListNode list;\n    int num;\n    char choice;\n\n    do {\n        cout << "Enter an integer to insert into the list: ";\n        cin >> num;\n        list.insert(num);\n\n        cout << "Do you want to insert another number? (y/n): ";\n        cin >> choice;\n    } while (choice == 'y' || choice == 'Y');\n\n    cout << "The list contains: ";\n    list.displayList();\n\n    cout << "Enter a number to search in the list: ";\n    cin >> num;\n    if (list.listContains(num)) {\n        cout << "The number " << num << " is in the list." << endl;\n    } else {\n        cout << "The number " << num << " is not in the list." << endl;\n    }\n\n    return 0;\n}