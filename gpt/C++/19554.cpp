#include <windows.h>\n#include <iostream>\n\n// Define a simple COM interface\ninterface ISimpleInterface : public IUnknown {\n    virtual HRESULT __stdcall HelloWorld() = 0;\n};\n\n// Implement the COM interface\nclass SimpleComponent : public ISimpleInterface {\nprivate:\n    ULONG m_refCount;\n\npublic:\n    SimpleComponent() : m_refCount(1) {}\n\n    // IUnknown methods\n    HRESULT __stdcall QueryInterface(REFIID riid, void** ppv) override {\n        if (riid == IID_IUnknown || riid == __uuidof(ISimpleInterface)) {\n            *ppv = static_cast<ISimpleInterface*>(this);\n            AddRef();\n            return S_OK;\n        }\n        *ppv = nullptr;\n        return E_NOINTERFACE;\n    }\n\n    ULONG __stdcall AddRef() override {\n        return InterlockedIncrement(&m_refCount);\n    }\n\n    ULONG __stdcall Release() override {\n        ULONG count = InterlockedDecrement(&m_refCount);\n        if (count == 0) {\n            delete this;\n        }\n        return count;\n    }\n\n    // ISimpleInterface method\n    HRESULT __stdcall HelloWorld() override {\n        std::cout << "Hello, COM World!" << std::endl;\n        return S_OK;\n    }\n};\n\nint main() {\n    // Initialize COM library\n    CoInitialize(NULL);\n\n    // Create the COM component\n    SimpleComponent* component = new SimpleComponent();\n\n    // Use the component\n    ISimpleInterface* simpleInterface = nullptr;\n    if (SUCCEEDED(component->QueryInterface(__uuidof(ISimpleInterface), (void**)&simpleInterface))) {\n        simpleInterface->HelloWorld();\n        simpleInterface->Release();\n    }\n\n    // Clean up\n    component->Release();\n    CoUninitialize();\n    return 0;\n}