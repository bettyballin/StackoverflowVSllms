#include <windows.h>\n#include <tchar.h>\n#include <iostream>\n#include <vector>\n\nstd::wstring GetModuleFileName(HMODULE hModule) {\n    wchar_t path[MAX_PATH];\n    if (GetModuleFileNameW(hModule, path, MAX_PATH) == 0) {\n        return L"";\n    }\n    return std::wstring(path);\n}\n\nstd::wstring GetDllVersion(const std::wstring& dllPath) {\n    DWORD handle;\n    DWORD size = GetFileVersionInfoSizeW(dllPath.c_str(), &handle);\n    if (size == 0) {\n        return L"";\n    }\n\n    std::vector<BYTE> buffer(size);\n    if (!GetFileVersionInfoW(dllPath.c_str(), handle, size, buffer.data())) {\n        return L"";\n    }\n\n    VS_FIXEDFILEINFO* fileInfo = nullptr;\n    UINT len;\n    if (!VerQueryValueW(buffer.data(), L"\\", reinterpret_cast<LPVOID*>(&fileInfo), &len) || fileInfo == nullptr) {\n        return L"";\n    }\n\n    DWORD verMS = fileInfo->dwFileVersionMS;\n    DWORD verLS = fileInfo->dwFileVersionLS;\n    DWORD major = HIWORD(verMS);\n    DWORD minor = LOWORD(verMS);\n    DWORD build = HIWORD(verLS);\n    DWORD revision = LOWORD(verLS);\n\n    wchar_t version[50];\n    swprintf(version, 50, L"%d.%d.%d.%d", major, minor, build, revision);\n    return std::wstring(version);\n}\n\nextern "C" __declspec(dllexport) void GetDllInfo() {\n    HMODULE hModule = nullptr;\n    if (GetModuleHandleExW(GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS | GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT, (LPCWSTR)&GetDllInfo, &hModule)) {\n        std::wstring dllPath = GetModuleFileName(hModule);\n        std::wstring version = GetDllVersion(dllPath);\n\n        std::wcout << L"Path: " << dllPath << std::endl;\n        std::wcout << L"Version: " << version << std::endl;\n    }\n}