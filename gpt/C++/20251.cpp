#include <vector>\n#include <stdexcept>\n\ntemplate<typename T>\nclass UnorderedArray {\npublic:\n    void add(const T& element) {\n        arr.push_back(element);\n    }\n\n    void remove(std::size_t index) {\n        if (index >= arr.size()) {\n            throw std::out_of_range("Index out of range");\n        }\n        arr[index] = arr.back();\n        arr.pop_back();\n    }\n\n    const T& get(std::size_t index) const {\n        if (index >= arr.size()) {\n            throw std::out_of_range("Index out of range");\n        }\n        return arr[index];\n    }\n\n    std::size_t size() const {\n        return arr.size();\n    }\n\nprivate:\n    std::vector<T> arr;\n};