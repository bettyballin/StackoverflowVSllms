#include <QtCore/QThread>\n#include <QtCore/QMutex>\n#include <QtCore/QWaitCondition>\n#include <QtCore/QDebug>\n\nclass Foo {\npublic:\n    virtual void someFunc() = 0;\n    virtual void anotherFunc() = 0;\n};\n\nclass FooWrapper {\npublic:\n    FooWrapper(Foo* foo, QMutex* mutex) : foo(foo), mutex(mutex) {}\n\n    void someFunc() {\n        QMutexLocker locker(mutex);\n        foo->someFunc();\n    }\n\n    void anotherFunc() {\n        QMutexLocker locker(mutex);\n        foo->anotherFunc();\n    }\n\nprivate:\n    Foo* foo;\n    QMutex* mutex;\n};\n\nclass TestFoo : public Foo {\npublic:\n    void someFunc() override {\n        QThread::sleep(2); // Simulate long operation\n        qDebug() << "someFunc executed";\n    }\n    void anotherFunc() override {\n        qDebug() << "anotherFunc executed";\n    }\n};\n\nclass Worker : public QThread {\npublic:\n    Worker(FooWrapper* fooWrapper, bool isSomeFunc) \n        : fooWrapper(fooWrapper), isSomeFunc(isSomeFunc) {}\n\n    void run() override {\n        if (isSomeFunc) {\n            fooWrapper->someFunc();\n        } else {\n            fooWrapper->anotherFunc();\n        }\n    }\n\nprivate:\n    FooWrapper* fooWrapper;\n    bool isSomeFunc;\n};\n\nint main(int argc, char *argv[]) {\n    QCoreApplication app(argc, argv);\n\n    QMutex mutex;\n    TestFoo foo1, foo2;\n    FooWrapper fooWrapper1(&foo1, &mutex);\n    FooWrapper fooWrapper2(&foo2, &mutex);\n\n    Worker thread1(&fooWrapper1, true);\n    Worker thread2(&fooWrapper2, false);\n\n    thread1.start();\n    QThread::msleep(500); // Ensure thread1 starts first and blocks\n\n    thread2.start();\n    thread2.wait(); // Wait for thread2 to finish\n\n    thread1.wait(); // Wait for thread1 to finish\n\n    return app.exec();\n}