#include <memory> // For std::uninitialized_copy and std::uninitialized_fill\n#include <iterator> // For std::distance\n\ntemplate <typename T, typename Allocator = std::allocator<T>>\nclass MyContainer {\npublic:\n    void initialize_elements(const T* first, const T* last) {\n        size_t n = std::distance(first, last);\n        data_ = allocator_.allocate(n);\n        std::uninitialized_copy(first, last, data_);\n        size_ = n;\n    }\n\n    void fill_elements(const T& value, size_t n) {\n        data_ = allocator_.allocate(n);\n        std::uninitialized_fill(data_, data_ + n, value);\n        size_ = n;\n    }\n\n    ~MyContainer() {\n        for (size_t i = 0; i < size_; ++i) {\n            allocator_.destroy(data_ + i);\n        }\n        allocator_.deallocate(data_, size_);\n    }\n\nprivate:\n    Allocator allocator_;\n    T* data_;\n    size_t size_;\n};