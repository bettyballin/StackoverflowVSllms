#include <windows.h>\n#include <iostream>\n#include <string>\n\nbool CheckEnvironmentVariableExistence(DWORD processId, const std::string& varName) {\n    HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, processId);\n    if (hProcess == nullptr) {\n        std::cerr << "Failed to open process." << std::endl;\n        return false;\n    }\n\n    // Get the PEB address\n    PROCESS_BASIC_INFORMATION pbi;\n    ULONG returnLength;\n    NTSTATUS status = NtQueryInformationProcess(hProcess, ProcessBasicInformation, &pbi, sizeof(pbi), &returnLength);\n    if (status != STATUS_SUCCESS) {\n        std::cerr << "Failed to query process information." << std::endl;\n        CloseHandle(hProcess);\n        return false;\n    }\n\n    // Read the PEB\n    PEB peb;\n    SIZE_T bytesRead;\n    if (!ReadProcessMemory(hProcess, pbi.PebBaseAddress, &peb, sizeof(peb), &bytesRead) || bytesRead != sizeof(peb)) {\n        std::cerr << "Failed to read PEB." << std::endl;\n        CloseHandle(hProcess);\n        return false;\n    }\n\n    // Read the ProcessParameters\n    RTL_USER_PROCESS_PARAMETERS procParams;\n    if (!ReadProcessMemory(hProcess, peb.ProcessParameters, &procParams, sizeof(procParams), &bytesRead) || bytesRead != sizeof(procParams)) {\n        std::cerr << "Failed to read ProcessParameters." << std::endl;\n        CloseHandle(hProcess);\n        return false;\n    }\n\n    // Read the environment block\n    WCHAR* envBlock = new WCHAR[procParams.EnvironmentSize / sizeof(WCHAR)];\n    if (!ReadProcessMemory(hProcess, procParams.Environment, envBlock, procParams.EnvironmentSize, &bytesRead) || bytesRead != procParams.EnvironmentSize) {\n        std::cerr << "Failed to read environment block." << std::endl;\n        delete[] envBlock;\n        CloseHandle(hProcess);\n        return false;\n    }\n\n    // Search for the environment variable\n    WCHAR* current = envBlock;\n    bool found = false;\n    while (*current) {\n        std::wstring entry(current);\n        if (entry.find(std::wstring(varName.begin(), varName.end())) != std::wstring::npos) {\n            found = true;\n            break;\n        }\n        current += entry.length() + 1;\n    }\n\n    delete[] envBlock;\n    CloseHandle(hProcess);\n    return found;\n}\n\nint main() {\n    DWORD processId = 1234;  // Replace with the target process ID\n    std::string variableName = "MY_ENV_VAR";\n\n    bool exists = CheckEnvironmentVariableExistence(processId, variableName);\n    if (exists) {\n        std::cout << "Environment variable exists." << std::endl;\n    } else {\n        std::cout << "Environment variable does not exist." << std::endl;\n    }\n\n    return 0;\n}