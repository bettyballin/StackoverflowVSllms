#include <vector>\n#include <string>\n#include <matheval.h>\n\nvoid convertVectors(const std::vector<std::string>& names, const std::vector<double>& values, char ***c_names, double **c_values) {\n    // Check if the sizes of both vectors match\n    if (names.size() != values.size()) {\n        throw std::runtime_error("Sizes of names and values vectors do not match.");\n    }\n\n    // Allocate memory for char** names\n    *c_names = new char*[names.size()];\n    for (size_t i = 0; i < names.size(); ++i) {\n        (*c_names)[i] = new char[names[i].size() + 1];\n        std::strcpy((*c_names)[i], names[i].c_str());\n    }\n\n    // Allocate memory for double* values\n    *c_values = new double[values.size()];\n    std::copy(values.begin(), values.end(), *c_values);\n}\n\nvoid freeConvertedArrays(char **c_names, double *c_values, size_t size) {\n    // Free allocated memory for char** names\n    for (size_t i = 0; i < size; ++i) {\n        delete[] c_names[i];\n    }\n    delete[] c_names;\n\n    // Free allocated memory for double* values\n    delete[] c_values;\n}\n\nint main() {\n    // Example usage\n    std::vector<std::string> names = {"a", "b", "c"};\n    std::vector<double> values = {1.0, 2.0, 3.0};\n\n    char **c_names;\n    double *c_values;\n\n    convertVectors(names, values, &c_names, &c_values);\n\n    // Use c_names and c_values as needed\n    // For example, calling evaluator_evaluate:\n    // evaluator_evaluate(evaluator, names.size(), c_names, c_values);\n\n    // Cleanup\n    freeConvertedArrays(c_names, c_values, names.size());\n\n    return 0;\n}