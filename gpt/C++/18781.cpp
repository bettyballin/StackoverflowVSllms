// Foo.h\n#ifndef FOO_H\n#define FOO_H\n\n#include <memory>\n\nclass FooImpl; // forward declaration\n\nclass Foo {\npublic:\n    Foo();\n    ~Foo();\n\n    // Public interface methods\n    void doSomething();\n\nprivate:\n    std::unique_ptr<FooImpl> impl; // Pimpl\n};\n\n#endif // FOO_H\n\n// Foo.cpp\n#include "Foo.h"\n#include "FooImpl.h"\n\nFoo::Foo() : impl(std::make_unique<FooImpl>()) {}\nFoo::~Foo() = default;\n\nvoid Foo::doSomething() {\n    impl->doSomething();\n}\n\n// FooImpl.h\n#ifndef FOOIMPL_H\n#define FOOIMPL_H\n\nclass FooImpl {\npublic:\n    void doSomething();\n};\n\n#endif // FOOIMPL_H\n\n// FooImpl.cpp\n#include "FooImpl.h"\n#include <iostream>\n\nvoid FooImpl::doSomething() {\n    std::cout << "Doing something in FooImpl" << std::endl;\n}