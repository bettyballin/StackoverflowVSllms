#include <memory>\n\n// Wrapper smart pointer class\ntemplate<typename T>\nclass MySmartPointer {\npublic:\n    MySmartPointer(std::shared_ptr<T> ptr) : ptr_(ptr) {}\n\n    T* get() const { return ptr_.get(); }\n    void reset() { ptr_.reset(); }\n\n    // Other necessary smart pointer functionalities...\n    \nprivate:\n    std::shared_ptr<T> ptr_;\n};\n\n// Usage in public API\nclass MyClass {\npublic:\n    MySmartPointer<MyObject> getObject();\n\nprivate:\n    std::shared_ptr<MyObject> obj;\n};