#include <iostream>\n#include <regex>\n#include <string>\n#include <unordered_set>\n\n// Allowed tags and attributes\nconst std::unordered_set<std::string> allowedTags = {"b", "i", "a"};\nconst std::unordered_set<std::string> allowedAttributes = {"href"};\n\n// Function to check if a URL is safe\nbool isSafeUrl(const std::string &url) {\n    std::regex urlPattern(R"((https?|ftp)://)");\n    return std::regex_search(url, urlPattern);\n}\n\n// Function to sanitize a single tag\nstd::string sanitizeTag(const std::string &tag) {\n    std::regex tagPattern(R"(<\s*(/?)\s*([a-zA-Z]+)\s*([^>]*)>)");\n    std::smatch match;\n    if (std::regex_match(tag, match, tagPattern)) {\n        std::string tagName = match[2];\n        if (allowedTags.find(tagName) == allowedTags.end()) {\n            return "";\n        }\n\n        std::string attributes = match[3];\n        std::string sanitizedAttributes;\n        std::regex attrPattern(R"(([a-zA-Z]+)\s*=\s*"([^"]*)")");\n        auto attributesBegin = std::sregex_iterator(attributes.begin(), attributes.end(), attrPattern);\n        auto attributesEnd = std::sregex_iterator();\n\n        for (auto i = attributesBegin; i != attributesEnd; ++i) {\n            std::smatch attrMatch = *i;\n            std::string attrName = attrMatch[1];\n            std::string attrValue = attrMatch[2];\n\n            if (allowedAttributes.find(attrName) != allowedAttributes.end()) {\n                if (attrName == "href" && !isSafeUrl(attrValue)) {\n                    return "";\n                }\n                sanitizedAttributes += " " + attrName + "=\"" + attrValue + "\"";\n            }\n        }\n\n        return "<" + match[1].str() + tagName + sanitizedAttributes + ">";\n    }\n    return "";\n}\n\n// Function to sanitize HTML input\nstd::string sanitizeHtml(const std::string &html) {\n    std::string output;\n    std::regex tagPattern(R"(<[^>]*>)");\n    auto tagsBegin = std::sregex_iterator(html.begin(), html.end(), tagPattern);\n    auto tagsEnd = std::sregex_iterator();\n\n    size_t lastPos = 0;\n    for (auto i = tagsBegin; i != tagsEnd; ++i) {\n        std::smatch match = *i;\n        output += html.substr(lastPos, match.position() - lastPos);\n        output += sanitizeTag(match.str());\n        lastPos = match.position() + match.length();\n    }\n    output += html.substr(lastPos);\n\n    return output;\n}\n\nint main() {\n    std::string inputHtml = R"(<a href="javascript:alert('XSS')">Click On Me</a><b>Bold</b>)";\n    std::string sanitizedHtml = sanitizeHtml(inputHtml);\n    std::cout << "Sanitized HTML: " << sanitizedHtml << std::endl;\n    return 0;\n}