#include <list>\n#include <cmath>\n#include <iostream>\n\nclass Point {\npublic:\n    int x, y;\n    Point(int x1, int y1) : x(x1), y(y1) {}\n};\n\ndouble calculateDistance(int x1, int y1, int x2, int y2) {\n    return std::sqrt(std::pow(x2 - x1, 2) + std::pow(y2 - y1, 2));\n}\n\nvoid deleteClosestPoint(std::list<Point>& pointList, int x, int y) {\n    if (pointList.empty()) {\n        return;\n    }\n\n    auto closestIter = pointList.begin();\n    double minDistance = calculateDistance(x, y, closestIter->x, closestIter->y);\n\n    for (auto iter = pointList.begin(); iter != pointList.end(); ++iter) {\n        double distance = calculateDistance(x, y, iter->x, iter->y);\n        if (distance < minDistance) {\n            minDistance = distance;\n            closestIter = iter;\n        }\n    }\n\n    pointList.erase(closestIter);\n}\n\nint main() {\n    std::list<Point> pointList = { Point(1, 2), Point(4, 6), Point(5, 12), Point(10, 1) };\n    int x = 5, y = 12;\n    \n    deleteClosestPoint(pointList, x, y);\n    \n    for (const auto& point : pointList) {\n        std::cout << "(" << point.x << ", " << point.y << ")\n";\n    }\n\n    return 0;\n}