void SetupConnectionPoint(IUnknown* pUnkSource, IUnknown* pUnkSink) {\n    IConnectionPointContainer* pCPC = nullptr;\n    IConnectionPoint* pCP = nullptr;\n\n    // Get the connection point container\n    HRESULT hr = pUnkSource->QueryInterface(IID_IConnectionPointContainer, (void**)&pCPC);\n    if (FAILED(hr)) {\n        std::cerr << "Failed to get IConnectionPointContainer" << std::endl;\n        return;\n    }\n\n    // Find the connection point for IS8SimulationEvents\n    hr = pCPC->FindConnectionPoint(IID_IS8SimulationEvents, &pCP);\n    if (FAILED(hr)) {\n        std::cerr << "Failed to find connection point" << std::endl;\n        pCPC->Release();\n        return;\n    }\n\n    // Advise the sink object\n    DWORD dwCookie;\n    hr = pCP->Advise(pUnkSink, &dwCookie);\n    if (FAILED(hr)) {\n        std::cerr << "Failed to advise" << std::endl;\n    } else {\n        std::cout << "Sink advised successfully" << std::endl;\n    }\n\n    // Release interfaces\n    pCP->Release();\n    pCPC->Release();\n}\n\nint main() {\n    // Assume pUnkSource is your COM object that supports events\n    IUnknown* pUnkSource = /* Obtain the COM source object */;\n    \n    // Create the sink object\n    CSink* pSink = new CSink();\n\n    // Set up the connection point\n    SetupConnectionPoint(pUnkSource, pSink);\n\n    // Do other work...\n\n    // Clean up\n    pSink->Release();\n    pUnkSource->Release();\n\n    return 0;\n}