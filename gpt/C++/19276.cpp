#include <stdint.h>\n#include <string.h>\n\nuint32_t MurmurHash3(const char* key, uint32_t len, uint32_t seed = 0) {\n    const uint8_t * data = (const uint8_t*)key;\n    const int nblocks = len / 4;\n\n    uint32_t h1 = seed;\n\n    const uint32_t c1 = 0xcc9e2d51;\n    const uint32_t c2 = 0x1b873593;\n\n    // Body\n    const uint32_t * blocks = (const uint32_t *)(data + nblocks*4);\n    for(int i = -nblocks; i; i++) {\n        uint32_t k1 = blocks[i];\n\n        k1 *= c1;\n        k1 = (k1 << 15) | (k1 >> (32 - 15));\n        k1 *= c2;\n        \n        h1 ^= k1;\n        h1 = (h1 << 13) | (h1 >> (32 - 13));\n        h1 = h1*5 + 0xe6546b64;\n    }\n\n    // Tail\n    const uint8_t * tail = (const uint8_t*)(data + nblocks*4);\n    uint32_t k1 = 0;\n\n    switch(len & 3) {\n        case 3: k1 ^= tail[2] << 16;\n        case 2: k1 ^= tail[1] << 8;\n        case 1: k1 ^= tail[0];\n                k1 *= c1;\n                k1 = (k1 << 15) | (k1 >> (32 - 15));\n                k1 *= c2;\n                h1 ^= k1;\n    }\n\n    // Finalization\n    h1 ^= len;\n    h1 ^= h1 >> 16;\n    h1 *= 0x85ebca6b;\n    h1 ^= h1 >> 13;\n    h1 *= 0xc2b2ae35;\n    h1 ^= h1 >> 16;\n\n    return h1;\n}\n\nint main() {\n    const char* key = "aardvark";\n    uint32_t hash = MurmurHash3(key, strlen(key));\n    printf("Hash: %u\n", hash);\n    return 0;\n}