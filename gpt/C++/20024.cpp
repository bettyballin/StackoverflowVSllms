#include <vector>\n#include <algorithm>\n#include <boost/bind.hpp>\n\nstruct point {\n    int x, y;\n};\n\nstruct pinfo {\n    struct point p;\n    unsigned long flags;\n};\n\n// Function that modifies a point\nvoid p_map(struct point &p) {\n    p.x += 1;\n    p.y += 1;\n}\n\n// Equivalent function to modify pinfo\nvoid pi_map(struct pinfo &pi) {\n    p_map(pi.p);\n}\n\n// Function to apply pi_map to each pinfo in vector using for_each\nvoid foreach(std::vector<struct pinfo> &pi_vec) {\n    std::for_each(pi_vec.begin(), pi_vec.end(), pi_map);\n}\n\n// Alternative version using boost::bind\nvoid foreach2(std::vector<struct pinfo> &pi_vec) {\n    boost::function<void (pinfo&)> pi_map2 = boost::bind(&p_map, boost::bind(&pinfo::p, _1));\n    std::for_each(pi_vec.begin(), pi_vec.end(), pi_map2);\n}\n\nint main() {\n    // Example usage\n    std::vector<pinfo> pi_vec = { {{0,0}, 0}, {{1,1}, 0} };\n    \n    foreach(pi_vec);  // Using direct function call\n    foreach2(pi_vec); // Using boost::bind\n\n    return 0;\n}