abstract class AbstractCostCounter {\n    protected $cost;\n\n    // Calculate the cost for non-recurring messages\n    public function countNotRecurrentSendingCost($messageObj) {\n        $totalMessages = $messageObj->getTotalMessages(); // multiple recipients are allowed\n        $message_cost = 1; // just to give you an idea\n        $this->cost = $totalMessages * $message_cost;\n    }\n\n    // Abstract method to be implemented by subclasses\n    abstract protected function countOptional($messageObj);\n\n    // Template method\n    public function countCost($messageObj) {\n        $this->countNotRecurrentSendingCost($messageObj);\n        $this->countOptional($messageObj);\n    }\n\n    // Method to get the calculated cost\n    public function getCost() {\n        return $this->cost;\n    }\n}\n\nclass NonRecurrentCostCounter extends AbstractCostCounter {\n    protected function countOptional($messageObj) {\n        // Do nothing for non-recurring messages\n    }\n}\n\nclass RecurrentCostCounter extends AbstractCostCounter {\n    protected function countOptional($messageObj) {\n        $notRecurrentSendingCost = $this->cost;\n        $totalMessagesInScheduledPlan = $messageObj->getTotalMessagesInScheduledPlan();\n        $recurrentSendingPlanCost = $notRecurrentSendingCost * $totalMessagesInScheduledPlan;\n        $this->cost = $recurrentSendingPlanCost;\n    }\n}\n\n// Example usage:\n$messageObj = new Message(); // Assuming this class exists and has the required methods\n$counter = new RecurrentCostCounter();\n$counter->countCost($messageObj);\necho $counter->getCost();