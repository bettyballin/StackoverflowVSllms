class ProtectedArray implements ArrayAccess {\n    private $container = [];\n\n    public function __construct(array $array) {\n        $this->container = $array;\n    }\n\n    public function offsetSet($offset, $value) {\n        if ($offset === "config") {\n            throw new Exception("Modification of 'config' is not allowed.");\n        }\n        if (is_null($offset)) {\n            $this->container[] = $value;\n        } else {\n            $this->container[$offset] = $value;\n        }\n    }\n\n    public function offsetExists($offset) {\n        return isset($this->container[$offset]);\n    }\n\n    public function offsetUnset($offset) {\n        if ($offset === "config") {\n            throw new Exception("Modification of 'config' is not allowed.");\n        }\n        unset($this->container[$offset]);\n    }\n\n    public function offsetGet($offset) {\n        return isset($this->container[$offset]) ? $this->container[$offset] : null;\n    }\n}\n\n$myArray = new ProtectedArray(array('name' => 'juank', 'age' => 26, 'config' => array('usertype' => 'admin', 'etc' => 'bla bla')));\n\n// Access allowed\n$myArray['name'] = 'john'; \n$myArray['age'] = 30;\n\n// Access forbidden\ntry {\n    $myArray['config'] = array('usertype' => 'user', 'etc' => 'new value');\n} catch (Exception $e) {\n    echo $e->getMessage(); // Outputs: Modification of 'config' is not allowed.\n}\n\n// Access forbidden\ntry {\n    unset($myArray['config']);\n} catch (Exception $e) {\n    echo $e->getMessage(); // Outputs: Modification of 'config' is not allowed.\n}\n\n// Access allowed\nprint_r($myArray['config']);