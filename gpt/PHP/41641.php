class ArrayLikeObject implements ArrayAccess, Iterator, Countable {\n    private $container = [];\n\n    public function __construct(array $array = []) {\n        $this->container = $array;\n    }\n\n    // ArrayAccess methods\n    public function offsetSet($offset, $value) {\n        if (is_null($offset)) {\n            $this->container[] = $value;\n        } else {\n            $this->container[$offset] = $value;\n        }\n    }\n\n    public function offsetExists($offset) {\n        return isset($this->container[$offset]);\n    }\n\n    public function offsetUnset($offset) {\n        unset($this->container[$offset]);\n    }\n\n    public function offsetGet($offset) {\n        return isset($this->container[$offset]) ? $this->container[$offset] : null;\n    }\n\n    // Iterator methods\n    public function current() {\n        return current($this->container);\n    }\n\n    public function key() {\n        return key($this->container);\n    }\n\n    public function next() {\n        return next($this->container);\n    }\n\n    public function rewind() {\n        return reset($this->container);\n    }\n\n    public function valid() {\n        return key($this->container) !== null;\n    }\n\n    // Countable method\n    public function count() {\n        return count($this->container);\n    }\n}\n\n// Example usage\n$arrayLike = new ArrayLikeObject(['a', 'b', 'c']);\nforeach ($arrayLike as $key => $value) {\n    echo "$key => $value\n";\n}\n\n// Custom iterator functions\nfunction custom_reset($obj) {\n    if ($obj instanceof Iterator) {\n        $obj->rewind();\n    }\n}\n\nfunction custom_next($obj) {\n    if ($obj instanceof Iterator) {\n        $obj->next();\n    }\n}\n\nfunction custom_current($obj) {\n    if ($obj instanceof Iterator) {\n        return $obj->current();\n    }\n    return false;\n}\n\nfunction custom_key($obj) {\n    if ($obj instanceof Iterator) {\n        return $obj->key();\n    }\n    return null;\n}\n\n// Using custom iterator functions\ncustom_reset($arrayLike);\necho custom_current($arrayLike) . "\n"; // Outputs: a\ncustom_next($arrayLike);\necho custom_current($arrayLike) . "\n"; // Outputs: b