// Generate token after successful authentication\n$jwt = generateJWT($user);\necho json_encode(['token' => $jwt]);\n\n// Function to generate JWT\nfunction generateJWT($user) {\n    $header = json_encode(['typ' => 'JWT', 'alg' => 'HS256']);\n    $payload = json_encode(['user_id' => $user->id, 'exp' => time() + 3600]); // 1 hour expiry\n    $base64UrlHeader = str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($header));\n    $base64UrlPayload = str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($payload));\n    $signature = hash_hmac('sha256', $base64UrlHeader . "." . $base64UrlPayload, 'your-secret-key', true);\n    $base64UrlSignature = str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($signature));\n    return $base64UrlHeader . "." . $base64UrlPayload . "." . $base64UrlSignature;\n}\n\n// On subsequent requests, verify token\n$jwt = $_SERVER['HTTP_AUTHORIZATION']; // Get the token from the header\nif (verifyJWT($jwt)) {\n    // Proceed with the request\n}\n\nfunction verifyJWT($jwt) {\n    list($header, $payload, $signature) = explode('.', $jwt);\n    $base64UrlHeader = str_replace(['+', '/', '='], ['-', '_', ''], base64_encode(json_decode(base64_decode($header), true)));\n    $base64UrlPayload = str_replace(['+', '/', '='], ['-', '_', ''], base64_encode(json_decode(base64_decode($payload), true)));\n    $signatureCheck = hash_hmac('sha256', $base64UrlHeader . "." . $base64UrlPayload, 'your-secret-key', true);\n    $base64UrlSignatureCheck = str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($signatureCheck));\n    return $signatureCheck === $base64UrlSignatureCheck;\n}