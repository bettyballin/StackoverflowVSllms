/**\n * Converts a value to a SQL-safe format based on its type.\n *\n * @param mixed $value The value to be converted.\n * @param string $value_type The type of the value (e.g., NUMBER, FLOAT, DATETIME, INTEGER, DATE, TIME, TIMESTAMP, NUMBERS_LIST, FLOATS_LIST, INTEGERS_LIST).\n * @param bool $is_delimiters Whether to add delimiters around the value.\n * @param bool $use_null Whether to use NULL for empty values.\n * @return string The SQL-safe formatted value.\n */\nfunction tosql($value, $value_type, $is_delimiters = true, $use_null = true) \n{\n    // Check if the value is non-empty or an array\n    if (is_array($value) || strlen($value)) {\n        switch ($value_type) {\n            case NUMBER:\n            case FLOAT:\n                // Replace commas with dots and remove non-numeric characters\n                return preg_replace(array("/,/", "/[^0-9\.,\-]/"), array(".", ""), $value);\n                break;\n            case DATETIME:\n                // Convert to datetime format if necessary\n                if (!is_array($value) && is_int($value)) { $value = va_time($value); }\n                if (is_array($value)) { $value = va_date($this->DatetimeMask, $value); } \n                else { return "NULL"; }\n                break;\n            case INTEGER:\n                // Convert to integer\n                return intval($value);\n                break;\n            case DATE:\n                // Convert to date format if necessary\n                if (!is_array($value) && is_int($value)) { $value = va_time($value); }\n                if (is_array($value)) { $value = va_date($this->DateMask, $value); }\n                else { return "NULL"; }\n                break;\n            case TIME:\n                // Convert to time format if necessary\n                if (!is_array($value) && is_int($value)) { $value = va_time($value); }\n                if (is_array($value)) { $value = va_date($this->TimeMask, $value); }\n                else { return "NULL"; }\n                break;\n            case TIMESTAMP:\n                // Convert to timestamp format if necessary\n                if (!is_array($value) && is_int($value)) { $value = va_time($value); }\n                if (is_array($value)) { $value = va_date($this->TimestampMask, $value); }\n                else { return "NULL"; }\n                break;\n            case NUMBERS_LIST:\n            case FLOATS_LIST:\n                // Process list of numbers or floats\n                $values = (is_array($value)) ? $value : explode(",", $value);\n                for ($v = 0; $v < sizeof($values); $v++) {\n                    $value = $values[$v];\n                    $value = preg_replace(array("/,/", "/[^0-9\.,\-]/"), array(".", ""), $value);\n                    if (!is_numeric($value)) {\n                        $value = 0;\n                    }\n                    $values[$v] = $value;\n                }\n                return implode(",", $values);\n                break;\n            case INTEGERS_LIST:\n                // Process list of integers\n                $values = (is_array($value)) ? $value : explode(",", $value);\n                for ($v = 0; $v < sizeof($values); $v++) {\n                    $values[$v] = intval($values[$v]);\n                }\n                return implode(",", $values);\n                break;\n            default:\n                // Escape special characters in the value\n                $value = addslashes($value);\n                break;\n        }\n        // Add delimiters if required\n        if ($is_delimiters) {\n            $value = "'" . $value . "'";\n        }\n    } elseif ($use_null) {\n        $value = "NULL";\n    } else {\n        // Handle default value for empty input\n        if ($value_type == INTEGER || $value_type == FLOAT || $value_type == NUMBER \n            || $value_type == NUMBERS_LIST || $value_type == FLOATS_LIST || $value_type == INTEGERS_LIST) {\n            $value = 0;\n        } elseif ($is_delimiters) {\n            $value = "''";\n        }\n    } \n    return $value;\n}