<?php\n\n// Signal handler function\nfunction signal_handler($signo) {\n    switch ($signo) {\n        case SIGUSR1:\n            echo "Received SIGUSR1 from child process\n";\n            break;\n    }\n}\n\n// Install the signal handler\npcntl_signal(SIGUSR1, "signal_handler");\n\n$pid = pcntl_fork();\nif ($pid == -1) {\n    die('could not fork');\n} else if ($pid) {\n    // We are the parent\n    while (true) {\n        // Check if the child process has finished\n        $res = pcntl_waitpid($pid, $status, WNOHANG);\n        if ($res == -1 || $res > 0) {\n            break; // Child process has finished\n        }\n        \n        // Dispatch signals\n        pcntl_signal_dispatch();\n        \n        // Sleep for a short period to avoid busy waiting\n        usleep(100000); // 100ms\n    }\n    \n    if (pcntl_wifexited($status)) {\n        echo "Child exited with status " . pcntl_wexitstatus($status) . "\n";\n    } else {\n        echo "Child process did not terminate normally\n";\n    }\n} else {\n    // We are the child\n    // Simulate some work\n    sleep(2);\n    \n    // Send SIGUSR1 to parent\n    posix_kill(posix_getppid(), SIGUSR1);\n    \n    // Execute the script\n    pcntl_exec("/path/to/php/script");\n    echo "Could not Execute...\n";\n    exit(1); // Ensure the child process exits if exec fails\n}\n\n?>