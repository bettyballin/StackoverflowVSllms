class SQL_Stmt {\n    protected $dbType;\n    protected $queryParts = [];\n\n    public function __construct($dbType) {\n        $this->dbType = $dbType;\n    }\n\n    public function setType($type) {\n        $this->queryParts['type'] = strtoupper($type);\n    }\n\n    public function setColumns($columns) {\n        $this->queryParts['columns'] = $columns;\n    }\n\n    public function setWhere($conditions) {\n        $this->queryParts['where'] = $conditions;\n    }\n\n    public function setOrder($column, $direction) {\n        $this->queryParts['order'] = [$column, strtoupper($direction)];\n    }\n\n    public function setLimit($offset, $limit) {\n        $this->queryParts['limit'] = [$offset, $limit];\n    }\n\n    public function exec() {\n        // Build and execute query based on $this->dbType\n        $query = $this->buildQuery();\n        // Execute the query using PDO or similar\n        // PDO::query($query);\n    }\n\n    protected function buildQuery() {\n        // Logic to build query based on $this->queryParts and $this->dbType\n        // This is a simplified example\n        $query = "{$this->queryParts['type']} {$this->queryParts['columns']} FROM table";\n        if (isset($this->queryParts['where'])) {\n            $query .= " WHERE " . http_build_query($this->queryParts['where'], '', ' AND ');\n        }\n        if (isset($this->queryParts['order'])) {\n            $query .= " ORDER BY {$this->queryParts['order'][0]} {$this->queryParts['order'][1]}";\n        }\n        if (isset($this->queryParts['limit'])) {\n            $query .= " LIMIT {$this->queryParts['limit'][0]}, {$this->queryParts['limit'][1]}";\n        }\n        return $query;\n    }\n}\n\n// Usage\n$stmt = new SQL_Stmt('mysql');\n$stmt->setType('select');\n$stmt->setColumns('*');\n$stmt->setWhere(['id' => 4]);\n$stmt->setOrder('id', 'desc');\n$stmt->setLimit(0, 30);\n$stmt->exec();