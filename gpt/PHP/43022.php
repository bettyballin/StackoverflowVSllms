<?php\n\n// Sample data representing the (id, parent_id) pairs\n$menu_data = [\n    ['id' => 0, 'parent_id' => null],\n    ['id' => 7, 'parent_id' => 0],\n    ['id' => 4, 'parent_id' => 0],\n    ['id' => 9, 'parent_id' => 4],\n    ['id' => 14, 'parent_id' => 4],\n    ['id' => 16, 'parent_id' => 4],\n    ['id' => 6, 'parent_id' => 9],\n];\n\n// Function to build the tree structure\nfunction buildTree($data) {\n    $tree = [];\n    $references = [];\n\n    foreach ($data as $item) {\n        $id = $item['id'];\n        $parent_id = $item['parent_id'];\n        \n        if (!isset($references[$id])) {\n            $references[$id] = ['id' => $id, 'children' => []];\n        }\n\n        if ($parent_id === null) {\n            $tree[$id] = &$references[$id];\n        } else {\n            if (!isset($references[$parent_id])) {\n                $references[$parent_id] = ['id' => $parent_id, 'children' => []];\n            }\n            $references[$parent_id]['children'][$id] = &$references[$id];\n        }\n    }\n\n    return $tree;\n}\n\n// Function to find all descendants of a given node\nfunction findDescendants($tree, $nodeId) {\n    $result = [];\n\n    if (isset($tree[$nodeId])) {\n        $stack = [$tree[$nodeId]];\n        while ($stack) {\n            $current = array_pop($stack);\n            foreach ($current['children'] as $child) {\n                $result[] = $child['id'];\n                $stack[] = $child;\n            }\n        }\n    }\n\n    return $result;\n}\n\n// Build the tree\n$tree = buildTree($menu_data);\n\n// Find all descendants of node with id 4\n$descendants = findDescendants($tree, 4);\n\nprint_r($descendants); // Output: Array ( [0] => 9 [1] => 6 [2] => 14 [3] => 16 )\n\n?>