/**\n * Include a pattern of reserved word based on a filename, \n * and its replacement.\n * @param $default String\n * @return void\n */\nfunction _includeDefaultReplacement($default){\n    $replacements = $this->replacements;\n    list($newPattern, $ext) = $this->splitFilenameAndExt($default);\n    \n    if (!in_array($newPattern, $this->patterns)) {\n        $this->patterns[] = $newPattern;\n        $newReplacement = $newPattern;\n        \n        // Check if the string has a second character.\n        if (isset($newReplacement[1])) { // <--- Check if the string has at least 2 characters\n            // If the second character is not '_', set it to '_'.\n            if ($newReplacement[1] != '_') {\n                $newReplacement[1] = '_';\n            } else {\n                // If the second character is '_', set it to 'a'.\n                $newReplacement[1] = 'a';\n            }\n        } elseif ($newReplacement != '_') {\n            // If the string is less than 2 characters and is not '_', set it to '_'.\n            $newReplacement = '_';\n        } else {\n            // If the string is '_', set it to 'a'.\n            $newReplacement = 'a';\n        }\n        \n        $this->replacements[] = $newReplacement;\n    }\n}\n\n/**\n * Split filename and extension.\n * @param $filename String\n * @return array\n */\nfunction splitFilenameAndExt($filename){\n    $parts = explode('.', $filename);\n    $ext = array_pop($parts);\n    $filename = implode('.', $parts);\n    return array($filename, $ext);\n}