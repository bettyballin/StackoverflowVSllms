class EmailQueue {\n    private $queue = [];\n\n    public function addEmail($email, $priority) {\n        $this->queue[] = ['email' => $email, 'priority' => $priority];\n        // Sort the queue based on priority (higher priority first)\n        usort($this->queue, function($a, $b) {\n            return $b['priority'] - $a['priority'];\n        });\n    }\n\n    public function sendEmails() {\n        foreach ($this->queue as $item) {\n            $this->sendEmail($item['email']);\n        }\n        // Clear the queue after sending\n        $this->queue = [];\n    }\n\n    private function sendEmail($email) {\n        // Implement your email sending logic here\n        // For example: mail($email['to'], $email['subject'], $email['message']);\n    }\n}\n\n// Usage\n$emailQueue = new EmailQueue();\n$emailQueue->addEmail(['to' => 'user@example.com', 'subject' => 'Notification', 'message' => '...'], 10); // High priority\n$emailQueue->addEmail(['to' => 'user2@example.com', 'subject' => 'Newsletter', 'message' => '...'], 1); // Low priority\n$emailQueue->addEmail(['to' => 'user3@example.com', 'subject' => 'Password Reminder', 'message' => '...'], 20); // Highest priority\n\n// Send emails via cron job\n$emailQueue->sendEmails();