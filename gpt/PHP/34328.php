class UserService {\n    private $connection;\n    private $criteriaFactory;\n\n    public function __construct($connection, $criteriaFactory) {\n        $this->connection = $connection;\n        $this->criteriaFactory = $criteriaFactory;\n    }\n\n    public function setSuspended($Suspended, $UserID) {\n        try {\n            $con = $this->connection;\n\n            $c1 = $this->criteriaFactory->create();\n            $c1->add(DomainsPeer::USERID, $UserID);\n\n            $update = $this->criteriaFactory->create();\n            $update->add(DomainsPeer::SUSPENDED, $Suspended);\n\n            BasePeer::doUpdate($c1, $update, $con);\n\n            return true;\n        } catch (PropelException $e) {\n            return $e->getMessage();\n        }\n    }\n}