class MyObj {\n    public function doSomethingWhichIsLogged() {\n        // ...\n        $logger = $this->getLogger();\n        $logger->info('some message');\n        // ...\n    }\n\n    protected function getLogger() {\n        return new Logger('/tmp/log.txt');\n    }\n}\n\nuse PHPUnit\Framework\TestCase;\n\nclass TestMyObj extends TestCase {\n    public function testDoSomethingWhichIsLogged() {\n        // Create a mock for the Logger class\n        $loggerMock = $this->createMock(Logger::class);\n\n        // Set up the expectation for the info() method to be called once\n        $loggerMock->expects($this->once())\n                   ->method('info')\n                   ->with('some message');\n\n        // Create a proxy to override the getLogger method\n        $myObj = $this->getMockBuilder(MyObj::class)\n                      ->onlyMethods(['getLogger'])\n                      ->getMock();\n\n        $myObj->method('getLogger')\n              ->willReturn($loggerMock);\n\n        // Call the method to test\n        $myObj->doSomethingWhichIsLogged();\n    }\n}