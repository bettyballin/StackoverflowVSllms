<?php\n\nclass TrackableArray extends ArrayObject {\n    private $changes = [];\n\n    public function offsetSet($index, $newval) {\n        $this->changes[] = ['action' => 'set', 'index' => $index, 'value' => $newval];\n        parent::offsetSet($index, $newval);\n    }\n\n    public function offsetUnset($index) {\n        $this->changes[] = ['action' => 'unset', 'index' => $index];\n        parent::offsetUnset($index);\n    }\n\n    public function append($value) {\n        $this->changes[] = ['action' => 'append', 'value' => $value];\n        parent::append($value);\n    }\n\n    public function getChanges() {\n        return $this->changes;\n    }\n}\n\nclass Storage {\n    public $object;\n\n    public function __construct() {\n        $this->object = new TrackableArray();\n    }\n\n    public function saveChanges() {\n        $changes = $this->object->getChanges();\n        // Logic to persist changes to storage\n        foreach ($changes as $change) {\n            // Handle persisting each change\n        }\n    }\n}\n\n// Usage example:\n$storage = new Storage();\n$storage->object->append('a');\n$storage->object->append('b');\n$storage->object->append('c');\n$storage->saveChanges();\n\nvar_dump($storage->object);\nvar_dump($storage->object->getChanges());\n?>