function parseTemplate($template, $data) {\n    // Match sections and regular tags\n    $pattern = '/{{#(\w+)}}(.*?){{\/\1}}|{{(\w+)}}/s';\n\n    // Function to process the matches\n    $callback = function($matches) use ($data) {\n        if (!empty($matches[3])) {\n            // Handle regular tags\n            return isset($data[$matches[3]]) ? $data[$matches[3]] : '';\n        } elseif (!empty($matches[1])) {\n            // Handle sections\n            $section = $matches[1];\n            $content = $matches[2];\n            \n            if (isset($data[$section]) && is_array($data[$section])) {\n                $result = '';\n                foreach ($data[$section] as $item) {\n                    $result .= parseTemplate($content, $item);\n                }\n                return $result;\n            }\n        }\n        return '';\n    };\n\n    // Perform the replacement\n    return preg_replace_callback($pattern, $callback, $template);\n}\n\n// Example template\n$template = '{{HEADER}}\n\nHello my name is {{NAME}}\n\n{{#CONTENT}}\n    This is the content ...\n\n    {{#PERSONS}}\n        <p>My name is {{NAME}}.</p>\n    {{/PERSONS}}\n{{/CONTENT}}\n\n{{FOOTER}}';\n\n// Example data\n$data = array(\n    'HEADER' => 'This is a header',\n    'NAME' => 'David',\n    'CONTENT' => array(\n        array('PERSONS' => array(\n            array('NAME' => 'Heino'),\n            array('NAME' => 'Sebastian')\n        ))\n    ),\n    'FOOTER' => 'This is the footer'\n);\n\n// Parse and print the result\necho parseTemplate($template, $data);