class CacheClass {\n    private static $instance = null;\n    private $mem;\n\n    private function __construct() {\n        $this->mem = memcache_connect('host', 'port');\n    }\n\n    public static function getInstance() {\n        if (self::$instance == null) {\n            self::$instance = new CacheClass();\n        }\n        return self::$instance;\n    }\n\n    public function insert($key, $value) {\n        memcache_set($this->mem, $key, $value);\n    }\n\n    public function get($key) {\n        return memcache_get($this->mem, $key);\n    }\n\n    public function delete($key) {\n        memcache_delete($this->mem, $key);\n    }\n}\n\n// Usage\n$cache = CacheClass::getInstance();\n$cache->insert('key', 'value');\n$value = $cache->get('key');\n$cache->delete('key');\n\nclass Abc {\n    private $mc;\n    function __construct() {\n        $this->mc = CacheClass::getInstance();\n    }\n}\n\nclass Def {\n    private $mc;\n    function __construct() {\n        $this->mc = CacheClass::getInstance();\n    }\n}