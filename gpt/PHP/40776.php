class BBCodeParser {\n    private $bbTags = ['block', 'video', 'url']; // Define your BB Code tags here\n\n    public function parse($text) {\n        $stack = [];\n        $output = '';\n\n        $pattern = '/\[([a-z]+)([^\]]*)\](.*?)\[\/\1\]/is';\n        while (preg_match($pattern, $text, $matches)) {\n            $tag = $matches[1];\n            $attributes = $this->parseAttributes($matches[2]);\n            $content = $matches[3];\n\n            if (in_array($tag, $this->bbTags)) {\n                array_push($stack, $tag);\n                $parsedContent = $this->parse($content); // Recursively parse nested content\n                array_pop($stack);\n\n                $output .= $this->renderTag($tag, $attributes, $parsedContent);\n            } else {\n                $output .= $matches[0]; // If tag is not recognized, keep it as is\n            }\n\n            $text = str_replace($matches[0], $output, $text);\n            $output = '';\n        }\n\n        return $text;\n    }\n\n    private function parseAttributes($attributeString) {\n        $attributes = [];\n        preg_match_all('/(\w+)=["\']([^"\']+)["\']/', $attributeString, $matches, PREG_SET_ORDER);\n        foreach ($matches as $match) {\n            $attributes[$match[1]] = $match[2];\n        }\n        return $attributes;\n    }\n\n    private function renderTag($tag, $attributes, $content) {\n        switch ($tag) {\n            case 'block':\n                return "<div class='block'>{$content}</div>";\n            case 'video':\n                $url = $attributes['url'] ?? '';\n                $width = $attributes['width'] ?? '500';\n                $height = $attributes['height'] ?? '500';\n                return "<iframe src='{$url}' width='{$width}' height='{$height}'></iframe>";\n            case 'url':\n                $url = $attributes['url'] ?? $content;\n                return "<a href='{$url}'>{$content}</a>";\n            default:\n                return $content;\n        }\n    }\n}\n\n// Example usage:\n$parser = new BBCodeParser();\n$bbCode = '[block][block][/block][block][block][/block][/block][/block]';\necho $parser->parse($bbCode);