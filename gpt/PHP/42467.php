function isValid($x, $y, $map, $visited) {\n    return ($x >= 0 && $x < count($map) && $y >= 0 && $y < count($map[0]) && $map[$x][$y] == 'land' && !$visited[$x][$y]);\n}\n\nfunction dfs($map, &$visited, $x, $y) {\n    // Define the possible moves in a hexagonal grid\n    $rowMoves = [-1, -1, 0, 0, 1, 1];\n    $colMoves = [-1, 0, -1, 1, 0, 1];\n    \n    $stack = [[$x, $y]];\n    while (!empty($stack)) {\n        list($cx, $cy) = array_pop($stack);\n        $visited[$cx][$cy] = true;\n        \n        for ($i = 0; $i < 6; $i++) {\n            $nx = $cx + $rowMoves[$i];\n            $ny = $cy + $colMoves[$i];\n            if (isValid($nx, $ny, $map, $visited)) {\n                $stack[] = [$nx, $ny];\n            }\n        }\n    }\n}\n\nfunction findIslands($map) {\n    $visited = array_fill(0, count($map), array_fill(0, count($map[0]), false));\n    $islands = [];\n    \n    for ($i = 0; $i < count($map); $i++) {\n        for ($j = 0; $j < count($map[0]); $j++) {\n            if ($map[$i][$j] == 'land' && !$visited[$i][$j]) {\n                dfs($map, $visited, $i, $j);\n                $islands[] = [$i, $j]; // Store starting point of each island\n            }\n        }\n    }\n    \n    return $islands;\n}\n\n// Example usage:\n$map = [\n    ['land', 'water', 'land', 'land'],\n    ['land', 'land', 'water', 'water'],\n    ['water', 'land', 'land', 'water'],\n    ['land', 'water', 'land', 'land']\n];\n\n$islands = findIslands($map);\nprint_r($islands); // Output the starting points of each island