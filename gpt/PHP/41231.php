// Define the Observer interface\ninterface Observer {\n    public function update(Entity $entity);\n}\n\n// Define the Subject interface\ninterface Subject {\n    public function attach(Observer $observer);\n    public function detach(Observer $observer);\n    public function notify();\n}\n\n// Entity class implementing Subject\nclass Entity implements Subject {\n    private $observers = [];\n    private $data;\n\n    public function attach(Observer $observer) {\n        $this->observers[] = $observer;\n    }\n\n    public function detach(Observer $observer) {\n        $key = array_search($observer, $this->observers);\n        if ($key !== false) {\n            unset($this->observers[$key]);\n        }\n    }\n\n    public function notify() {\n        foreach ($this->observers as $observer) {\n            $observer->update($this);\n        }\n    }\n\n    public function setData($data) {\n        $this->data = $data;\n        $this->notify();\n    }\n\n    public function getData() {\n        return $this->data;\n    }\n}\n\n// DataMapper class implementing Observer\nclass DataMapper implements Observer {\n    public function update(Entity $entity) {\n        $this->save($entity);\n    }\n\n    public function save(Entity $entity) {\n        // Code to save entity data to the database\n        echo "Saving data: " . $entity->getData() . "\n";\n    }\n}\n\n// Usage example\n$entity = new Entity();\n$mapper = new DataMapper();\n\n$entity->attach($mapper);\n$entity->setData("New Data"); // This will automatically save to the database