<?php\n\n// Component\nabstract class Component {\n    protected $name;\n    protected $id;\n    protected $desc;\n\n    public function __construct($name, $id, $desc) {\n        $this->name = $name;\n        $this->id = $id;\n        $this->desc = $desc;\n    }\n\n    abstract public function print();\n    public function add(Component $component) {}\n    public function remove(Component $component) {}\n}\n\n// Leaf\nclass Leaf extends Component {\n    public function print() {\n        echo "Leaf: {$this->name}, {$this->id}, {$this->desc}\n";\n    }\n}\n\n// Composite\nclass Node extends Component {\n    private $children = [];\n\n    public function add(Component $component) {\n        $this->children[] = $component;\n    }\n\n    public function remove(Component $component) {\n        $this->children = array_filter($this->children, function($child) use ($component) {\n            return $child !== $component;\n        });\n    }\n\n    public function print() {\n        echo "Node: {$this->name}, {$this->id}, {$this->desc}\n";\n        foreach ($this->children as $child) {\n            $child->print();\n        }\n    }\n}\n\n// Usage\n$struc = new Node('name0', 'id0', 'desc0');\n$node1 = new Node('node1', 'id1', 'desc1');\n$node2 = new Node('node2', 'id2', 'desc2');\n$node3 = new Node('node3', 'id3', 'desc3');\n$leaf1 = new Leaf('leaf1', 'ld1', 'lesc1');\n$leaf2 = new Leaf('leaf2', 'ld2', 'lesc2');\n$leaf3 = new Leaf('leaf3', 'ld3', 'lesc3');\n$leaf4 = new Leaf('leaf4', 'ld4', 'lesc4');\n\n$struc->add($node1);\n$struc->add($node3);\n\n$node1->add($leaf1);\n$node1->add($leaf2);\n$node1->add($node2);\n\n$node2->add($leaf3);\n$node3->add($leaf4);\n\n$struc->print();\n?>