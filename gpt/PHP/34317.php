use PHPUnit\Framework\TestCase;\n\nclass UserServiceTest extends TestCase {\n    public function testSetSuspended() {\n        // Create mock objects\n        $mockConnection = $this->createMock(Connection::class);\n        $mockCriteria = $this->createMock(Criteria::class);\n        $mockCriteriaFactory = $this->createMock(CriteriaFactory::class);\n\n        // Set up the Criteria factory to return the mock Criteria\n        $mockCriteriaFactory->method('create')\n            ->willReturn($mockCriteria);\n\n        // Assuming BasePeer::doUpdate is a static method, you can mock it using a different approach\n        $this->mockStaticMethod(BasePeer::class, 'doUpdate')\n            ->with($mockCriteria, $mockCriteria, $mockConnection)\n            ->willReturn(true);\n\n        // Instantiate the service with the mocks\n        $userService = new UserService($mockConnection, $mockCriteriaFactory);\n\n        // Call the method and assert the expected outcome\n        $result = $userService->setSuspended(true, 1);\n        $this->assertTrue($result);\n    }\n\n    // Helper method to mock static methods (example using PHPUnit)\n    private function mockStaticMethod($className, $methodName) {\n        $mock = $this->getMockBuilder($className)\n            ->disableOriginalConstructor()\n            ->getMock();\n\n        $mock->expects($this->once())\n            ->method($methodName);\n\n        return $mock;\n    }\n}