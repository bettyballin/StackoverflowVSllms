function capturePreviouslyAuthorizedAmount($transactionId, $amount) {\n    $merchantAuthentication = new AnetAPI\MerchantAuthenticationType();\n    $merchantAuthentication->setName("your_api_login_id");\n    $merchantAuthentication->setTransactionKey("your_transaction_key");\n\n    $transactionRequestType = new AnetAPI\TransactionRequestType();\n    $transactionRequestType->setTransactionType("priorAuthCaptureTransaction");\n    $transactionRequestType->setRefTransId($transactionId);\n    $transactionRequestType->setAmount($amount);\n\n    $request = new AnetAPI\CreateTransactionRequest();\n    $request->setMerchantAuthentication($merchantAuthentication);\n    $request->setTransactionRequest($transactionRequestType);\n\n    $controller = new AnetController\CreateTransactionController($request);\n    $response = $controller->executeWithApiResponse(\net\authorize\api\constants\ANetEnvironment::SANDBOX);\n\n    if ($response != null) {\n        if ($response->getMessages()->getResultCode() == "Ok") {\n            $tresponse = $response->getTransactionResponse();\n            if ($tresponse != null && $tresponse->getMessages() != null) {\n                return $tresponse->getTransId();\n            }\n        }\n    }\n    return false;\n}\n\n$capturedTransactionId = capturePreviouslyAuthorizedAmount($transactionId, "150.00");\nif ($capturedTransactionId) {\n    echo "Captured Transaction ID: " . $capturedTransactionId;\n} else {\n    echo "Transaction Capture Failed";\n}