class MethodInterceptor\n{\n    private $realObject;\n\n    public function __construct($realObject)\n    {\n        $this->realObject = $realObject;\n    }\n\n    public function __call($name, $arguments)\n    {\n        // Intercept before the actual method call\n        echo "Intercepting before calling method: $name\n";\n\n        // Call the actual method\n        $result = call_user_func_array([$this->realObject, $name], $arguments);\n\n        // Intercept after the actual method call\n        echo "Intercepting after calling method: $name\n";\n\n        return $result;\n    }\n\n    public static function __callStatic($name, $arguments)\n    {\n        // Intercept before the actual static method call\n        echo "Intercepting before calling static method: $name\n";\n\n        // Call the actual static method\n        $result = call_user_func_array([$this->realObject, $name], $arguments);\n\n        // Intercept after the actual static method call\n        echo "Intercepting after calling static method: $name\n";\n\n        return $result;\n    }\n}\n\nclass RealClass\n{\n    public function exampleMethod($param)\n    {\n        echo "Inside exampleMethod with param: $param\n";\n    }\n\n    public static function exampleStaticMethod($param)\n    {\n        echo "Inside exampleStaticMethod with param: $param\n";\n    }\n}\n\n// Usage\n$realObject = new RealClass();\n$interceptor = new MethodInterceptor($realObject);\n\n$interceptor->exampleMethod('test'); // This will call the interceptor first and then the actual method