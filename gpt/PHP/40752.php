<?php\n\nfunction findShortestPath($graph, $start, $end) {\n    // Initialize the queue with the start node\n    $queue = [[$start]];\n    // Keep track of visited nodes to avoid cycles\n    $visited = [$start => true];\n    \n    while (!empty($queue)) {\n        // Dequeue the first path\n        $path = array_shift($queue);\n        // Get the last node from the path\n        $node = end($path);\n        \n        // If the last node is the end node, we've found the shortest path\n        if ($node == $end) {\n            return $path;\n        }\n        \n        // Get all adjacent nodes (linked nodes)\n        if (isset($graph[$node])) {\n            foreach ($graph[$node] as $adjacent) {\n                if (!isset($visited[$adjacent])) {\n                    // Mark the node as visited\n                    $visited[$adjacent] = true;\n                    // Create a new path including the adjacent node\n                    $new_path = $path;\n                    $new_path[] = $adjacent;\n                    // Enqueue the new path\n                    $queue[] = $new_path;\n                }\n            }\n        }\n    }\n    \n    // If we reach here, there is no path from start to end\n    return null;\n}\n\n// Example usage:\n$graph = [\n    0 => [5, 10, 15, 20],\n    1 => [30, 40, 50],\n    5 => [10, 24],\n    10 => [24, 36],\n    24 => [36, 80],\n    36 => [80],\n    // ... other nodes\n];\n\n$start = 5;\n$end = 80;\n$path = findShortestPath($graph, $start, $end);\n\nif ($path !== null) {\n    echo "Shortest path: " . implode(" -> ", $path);\n} else {\n    echo "No path found from $start to $end.";\n}\n?>