<?php\n$sizes = array(\n    'Shirt Size' => array('Small', 'Medium', 'Large'),\n    'Sleeve Size' => array('Short', 'Long')\n);\n\n$colors = array(\n    'Shirt Color' => array('Black', 'Red'),\n    'Sleeve Color' => array('White', 'Orange')\n);\n\n// Function to generate Cartesian product of multiple arrays\nfunction cartesianProduct($arrays) {\n    $result = array(array());\n\n    foreach ($arrays as $property => $propertyValues) {\n        $temp = array();\n        foreach ($result as $resultItem) {\n            foreach ($propertyValues as $propertyValue) {\n                $temp[] = array_merge($resultItem, array($property => $propertyValue));\n            }\n        }\n        $result = $temp;\n    }\n\n    return $result;\n}\n\n// Combine sizes and colors\n$attributes = array_merge($sizes, $colors);\n$productCombinations = cartesianProduct($attributes);\n\n// Display the product combinations\necho "SHIRT SIZE    SLEEVE SIZE    SHIRT COLOR    SLEEVE COLOR    QTY\n";\nforeach ($productCombinations as $combination) {\n    echo str_pad($combination['Shirt Size'], 12) . " ";\n    echo str_pad($combination['Sleeve Size'], 12) . " ";\n    echo str_pad($combination['Shirt Color'], 12) . " ";\n    echo str_pad($combination['Sleeve Color'], 12) . " ";\n    echo str_pad('0', 3) . "\n"; // Assuming QTY is 0 for demonstration\n}\n?>