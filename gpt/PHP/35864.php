use Psr\Log\LoggerInterface;\n\nclass YourClass\n{\n    private $logger;\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    private function isDebugEnabled(): bool\n    {\n        // Assuming Monolog is used and LoggerInterface is an instance of Monolog\Logger\n        return $this->logger->isHandling(\Monolog\Logger::DEBUG);\n    }\n\n    public function yourMethod()\n    {\n        if ($this->isDebugEnabled()) {\n            $this->logMessage('Expensive operation return value: ' . $this->expensiveFunction(), 'debug');\n        }\n    }\n\n    private function logMessage($message, $level)\n    {\n        // Log the message using the appropriate level\n        $this->logger->log($level, $message);\n    }\n\n    private function expensiveFunction()\n    {\n        // Perform some expensive operation\n        return "expensive result";\n    }\n}