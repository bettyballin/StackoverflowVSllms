<?php\nclass Templater extends Zend_View_Abstract\n{\n    protected $_path;\n    protected $_engine;\n\n    public function __construct()\n    {\n        $config = Zend_Registry::get('config');\n\n        require_once('Smarty/Smarty.class.php');\n\n        $this->_engine = new Smarty();\n\n        // Ensure Smarty is correctly instantiated\n        if (!$this->_engine) {\n            throw new Exception('Smarty could not be instantiated.');\n        }\n\n        $this->_engine->template_dir = $config->paths->templates;\n        $this->_engine->compile_dir = sprintf('%s/tmp/templates_c', $config->paths->data);\n\n        $this->_engine->plugins_dir = array(\n            $config->paths->base . '/include/Templater/plugins',\n            'plugins'\n        );\n    }\n\n    public function getEngine()\n    {\n        return $this->_engine;\n    }\n\n    public function __set($key, $val)\n    {\n        $this->_engine->assign($key, $val);\n    }\n\n    public function __get($key)\n    {\n        return $this->_engine->get_template_vars($key);\n    }\n\n    public function __isset($key)\n    {\n        return $this->_engine->get_template_vars($key) !== null;\n    }\n\n    public function __unset($key)\n    {\n        $this->_engine->clear_assign($key);\n    }\n\n    public function assign($spec, $value = null)\n    {\n        if (is_array($spec)) {\n            $this->_engine->assign($spec);\n            return;\n        }\n\n        $this->_engine->assign($spec, $value);\n    }\n\n    public function clearVars()\n    {\n        $this->_engine->clear_all_assign();\n    }\n\n    public function render($name)\n    {\n        // Ensure $name is a valid string\n        if (!is_string($name) || empty($name)) {\n            throw new InvalidArgumentException('Template name must be a non-empty string.');\n        }\n\n        // Check if _engine is correctly instantiated and fetch method is callable\n        if (!method_exists($this->_engine, 'fetch')) {\n            throw new Exception('Smarty fetch method does not exist.');\n        }\n\n        return $this->_engine->fetch(strtolower($name));\n    }\n\n    public function _run()\n    { }\n}\n?>