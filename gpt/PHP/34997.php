function buildCombinations($arr, $index = 0) {\n    // Base case: if we've reached the end of the array, return an empty array\n    if ($index >= count($arr)) {\n        return [];\n    }\n\n    $result = [];\n    $currentElement = $arr[$index];\n    $id = $currentElement['id'];\n    $options = $currentElement['options'];\n    \n    // Recurse to get the combinations of the remaining elements\n    $nextCombinations = buildCombinations($arr, $index + 1);\n\n    foreach ($options as $option) {\n        $key = "$id-$option";\n        if (empty($nextCombinations)) {\n            // If no more elements, just add an empty array\n            $result[$key] = [];\n        } else {\n            // Otherwise, add the next combinations\n            $result[$key] = $nextCombinations;\n        }\n    }\n\n    return $result;\n}\n\n// Test the function\n$arr = array(\n    array('id' => 10, 'options' => array(3, 5)),\n    array('id' => 15, 'options' => array(2, 4, 8, 9)),\n    array('id' => 20, 'options' => array(2, 6, 7)),\n);\n\n$newArray = buildCombinations($arr);\nprint_r($newArray);