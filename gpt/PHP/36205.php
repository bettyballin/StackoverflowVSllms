function findWords($board, $trie) {\n    $rows = count($board);\n    $cols = count($board[0]);\n    $result = [];\n    $visited = array_fill(0, $rows, array_fill(0, $cols, false));\n\n    function dfs($board, $trie, $row, $col, $path, &$result, &$visited) {\n        $dirs = [[0, 1], [1, 0], [0, -1], [-1, 0], [1, 1], [-1, -1], [1, -1], [-1, 1]];\n        if ($row < 0 || $col < 0 || $row >= count($board) || $col >= count($board[0]) || $visited[$row][$col]) {\n            return;\n        }\n\n        $path .= $board[$row][$col];\n        if (!$trie->startsWith($path)) {\n            return;\n        }\n\n        if ($trie->search($path)) {\n            $result[$path] = true; // Using associative array to avoid duplicate words\n        }\n\n        $visited[$row][$col] = true;\n        foreach ($dirs as $dir) {\n            dfs($board, $trie, $row + $dir[0], $col + $dir[1], $path, $result, $visited);\n        }\n        $visited[$row][$col] = false;\n    }\n\n    for ($r = 0; $r < $rows; $r++) {\n        for ($c = 0; $c < $cols; $c++) {\n            dfs($board, $trie, $r, $c, '', $result, $visited);\n        }\n    }\n\n    return array_keys($result);\n}\n\n// Example usage\n$board = [\n    ['t', 'h', 'i', 's'],\n    ['w', 'a', 't', 's'],\n    ['o', 'a', 'h', 'g'],\n    ['f', 'g', 'd', 't']\n];\n\n$trie = new Trie();\n$words = ['this', 'that', 'what', 'hat', 'fat', 'dog', 'cat', 'god'];\nforeach ($words as $word) {\n    $trie->insert($word);\n}\n\n$foundWords = findWords($board, $trie);\nprint_r($foundWords);