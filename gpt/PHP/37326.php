class ASTNode {\n    public $type;\n    public $name;\n    public $properties = [];\n    public $methods = [];\n    public $parentClass = null;\n\n    public function __construct($type, $name) {\n        $this->type = $type;\n        $this->name = $name;\n    }\n\n    public function addProperty($propertyNode) {\n        $this->properties[] = $propertyNode;\n    }\n\n    public function addMethod($methodNode) {\n        $this->methods[] = $methodNode;\n    }\n\n    public function setParentClass($parentClass) {\n        $this->parentClass = $parentClass;\n    }\n}\n\nclass PropertyNode {\n    public $name;\n    public $defaultValue;\n\n    public function __construct($name, $defaultValue = null) {\n        $this->name = $name;\n        $this->defaultValue = $defaultValue;\n    }\n}\n\nclass MethodNode {\n    public $name;\n    public $parameters = [];\n    public $body;\n\n    public function __construct($name, $parameters, $body) {\n        $this->name = $name;\n        $this->parameters = $parameters;\n        $this->body = $body;\n    }\n}\n\n// Example usage:\n\n// Define a base class\n$baseClassNode = new ASTNode('class', 'BaseClass');\n\n// Define a derived class that extends the base class\n$derivedClassNode = new ASTNode('class', 'DerivedClass');\n$derivedClassNode->setParentClass($baseClassNode);\n\n// Add properties to the derived class\n$derivedClassNode->addProperty(new PropertyNode('property1', 'default'));\n\n// Add methods to the derived class\n$methodBody = []; // This would be an array of nodes representing the method's body\n$derivedClassNode->addMethod(new MethodNode('method1', ['param1'], $methodBody));\n\n// At this point, $derivedClassNode represents a class with a property and a method