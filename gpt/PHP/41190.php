// module/Application/src/Router/DbRoute.php\n    namespace Application\Router;\n\n    use Laminas\Router\Http\RouteInterface;\n    use Laminas\Router\Http\RouteMatch;\n    use Laminas\Stdlib\RequestInterface as Request;\n    use Laminas\Db\Adapter\Adapter;\n\n    class DbRoute implements RouteInterface\n    {\n        protected $dbAdapter;\n\n        public function __construct(Adapter $dbAdapter)\n        {\n            $this->dbAdapter = $dbAdapter;\n        }\n\n        public static function factory($options = [])\n        {\n            if (!isset($options['dbAdapter'])) {\n                throw new \Exception('Database adapter is required');\n            }\n            return new static($options['dbAdapter']);\n        }\n\n        public function match(Request $request)\n        {\n            if (!$request instanceof \Laminas\Http\Request) {\n                return null;\n            }\n\n            $uri = $request->getUri()->getPath();\n            $pageName = trim($uri, '/');\n\n            $sql = 'SELECT * FROM sitePage WHERE pageName = ?';\n            $result = $this->dbAdapter->query($sql, [$pageName])->toArray();\n\n            if (empty($result)) {\n                return null;\n            }\n\n            $page = $result[0];\n            return new RouteMatch([\n                'controller' => $page['controller'],\n                'action'     => $page['action'],\n                'module'     => $page['module'],\n            ]);\n        }\n\n        public function assemble(array $params = [], array $options = [])\n        {\n            throw new \Exception('Not implemented');\n        }\n    }