// In your factory or constructor\nclass ParameterFactory {\n    public function createParametersFromUrl($url) {\n        $parameters = new Parameters($url);\n        \n        if (is_null($parameters->getLanguage()) || !$parameters->getLanguage()->isValid()) {\n            throw new InvalidArgumentException('Language parameter is invalid.');\n        }\n        \n        // Validate other parameters similarly...\n        \n        return $parameters;\n    }\n}\n\n// In your body object\nclass Body {\n    protected $language;\n\n    public function __construct($parameters) {\n        $this->language = $parameters->getLanguage();\n        \n        if (is_null($this->language) || !$this->language->isValid()) {\n            throw new InvalidArgumentException('Language must be valid.');\n        }\n        \n        // Initialize other properties similarly...\n    }\n\n    public function someMethod() {\n        // Since the constructor already validated the parameters,\n        // you can safely use $this->language here.\n    }\n}\n\n// Usage\ntry {\n    $parameters = $parameterFactory->createParametersFromUrl($url);\n    $body = new Body($parameters);\n    // Proceed with using $body...\n} catch (InvalidArgumentException $e) {\n    // Handle the exception, e.g., by showing an error message to the user\n}