switch ($root) {\n    case "new-order-notification": {\n        // Extract relevant data from the notification\n        $order_number = $data[$root]['google-order-number']['VALUE'];\n        $buyer_id = $data[$root]['buyer-id']['VALUE'];\n        // Extract other necessary details as per your requirement\n\n        // Update your local database to reflect the new order\n        // For example, add tokens to the member account\n        // Use a prepared statement to avoid SQL injection\n        $stmt = $db->prepare("UPDATE users SET tokens = tokens + ? WHERE buyer_id = ?");\n        $stmt->bind_param("is", $tokens, $buyer_id);\n        $stmt->execute();\n\n        // Respond to Google to confirm receipt of the notification\n        header("HTTP/1.1 200 OK");\n        break;\n    }\n    case "order-state-change": {\n        // Check the new state of the order\n        $new_fulfillment_order_state = $data[$root]['new-fulfillment-order-state']['VALUE'];\n        $new_financial_order_state = $data[$root]['new-financial-order-state']['VALUE'];\n\n        if ($new_financial_order_state == "CHARGEABLE") {\n            // The order is chargeable, meaning the payment was successful\n            // Update your local database to reflect the successful payment\n            // For example, add tokens to the member account\n            $order_number = $data[$root]['google-order-number']['VALUE'];\n            $buyer_id = $data[$root]['buyer-id']['VALUE'];\n            \n            // Use a prepared statement to avoid SQL injection\n            $stmt = $db->prepare("UPDATE users SET tokens = tokens + ? WHERE buyer_id = ?");\n            $stmt->bind_param("is", $tokens, $buyer_id);\n            $stmt->execute();\n        }\n\n        // Respond to Google to confirm receipt of the notification\n        header("HTTP/1.1 200 OK");\n        break;\n    }\n    case "request-received": {\n        break;\n    }\n    case "error": {\n        break;\n    }\n    case "diagnosis": {\n        break;\n    }\n    case "checkout-redirect": {\n        break;\n    }\n    case "merchant-calculation-callback": {\n        // Create the results and send it\n        $merchant_calc = new GoogleMerchantCalculations($currency);\n\n        // Loop through the list of address ids from the callback\n        $addresses = get_arr_result($data[$root]['calculate']['addresses']['anonymous-address']);\n        foreach($addresses as $curr_address) {\n            $curr_id = $curr_address['id'];\n            $country = $curr_address['country-code']['VALUE'];\n            $city = $curr_address['city']['VALUE'];\n            $region = $curr_address['region']['VALUE'];\n            $postal_code = $curr_address['postal-code']['VALUE'];\n\n            // Loop through each shipping method if merchant-calculated shipping\n        }\n        break;\n    }\n}