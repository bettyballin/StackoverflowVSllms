class MessageType {\n    const MSG_HOT = 'hot';\n    const MSG_WARM = 'warm';\n    const MSG_COLD = 'cold';\n\n    // Optional: add a method to validate message types if needed\n    public static function isValidType($type) {\n        $reflection = new ReflectionClass(__CLASS__);\n        return in_array($type, $reflection->getConstants());\n    }\n}\n\nclass Message {\n    private $type;\n    private $data;\n\n    public function __construct($type, $data) {\n        if (!MessageType::isValidType($type)) {\n            throw new InvalidArgumentException("Invalid message type");\n        }\n        $this->type = $type;\n        $this->data = $data;\n    }\n\n    public function getType() {\n        return $this->type;\n    }\n\n    public function getData() {\n        return $this->data;\n    }\n}\n\n// Usage\ntry {\n    $message = new Message(MessageType::MSG_HOT, "This is hot data");\n    echo "Type: " . $message->getType() . "\n";  // Output: Type: hot\n    echo "Data: " . $message->getData() . "\n";  // Output: Data: This is hot data\n} catch (InvalidArgumentException $e) {\n    echo $e->getMessage();\n}