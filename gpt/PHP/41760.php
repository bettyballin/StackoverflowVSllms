<?php\nfunction evaluate_expression($expression, $form_values) {\n    // Allowed operators and keywords\n    $allowed_operators = ['==', '!=', '<', '<=', '>', '>=', '&&', '||', '!', 'eq', 'ne', 'lt', 'le', 'gt', 'ge', 'and', 'or', 'not'];\n    \n    // Replace form variables in the expression\n    foreach ($form_values as $key => $value) {\n        $expression = str_replace($key, var_export($value, true), $expression);\n    }\n    \n    // Convert named operators to symbols\n    $expression = str_replace(['eq', 'ne', 'lt', 'le', 'gt', 'ge', 'and', 'or', 'not'], ['==', '!=', '<', '<=', '>', '>=', '&&', '||', '!'], $expression);\n    \n    // Validate the expression to only contain allowed operators\n    foreach (explode(' ', $expression) as $token) {\n        if (!preg_match('/^[\d\w\'\"\(\)\s]+$/', $token) && !in_array($token, $allowed_operators)) {\n            throw new Exception('Invalid expression');\n        }\n    }\n    \n    // Evaluate the expression safely\n    $result = false;\n    try {\n        // Create a sandbox function to evaluate the expression\n        $sandbox = function() use ($expression) {\n            return eval('return ' . $expression . ';');\n        };\n        \n        $result = $sandbox();\n    } catch (Exception $e) {\n        // Handle evaluation errors\n        throw new Exception('Error evaluating expression: ' . $e->getMessage());\n    }\n    \n    return $result;\n}\n\n// Example usage\n$form_values = [\n    'firstname' => 'John',\n    'lastname' => ''\n];\n$expression = "firstname == '' || lastname == ''";\n\ntry {\n    $result = evaluate_expression($expression, $form_values);\n    echo $result ? 'Expression is true' : 'Expression is false';\n} catch (Exception $e) {\n    echo 'Error: ' . $e->getMessage();\n}\n?>