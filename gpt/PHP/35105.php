class ConnectionPool {\n    private $pool = [];\n    private $maxConnections;\n    private $host;\n    private $port;\n\n    public function __construct($host, $port, $maxConnections = 10) {\n        $this->host = $host;\n        $this->port = $port;\n        $this->maxConnections = $maxConnections;\n    }\n\n    public function getConnection() {\n        // Reuse an existing connection if available\n        if (!empty($this->pool)) {\n            return array_pop($this->pool);\n        }\n\n        // Create a new connection if pool is not full\n        if (count($this->pool) < $this->maxConnections) {\n            $connection = @stream_socket_client("tcp://{$this->host}:{$this->port}", $errno, $errstr, 30);\n\n            if ($connection === false) {\n                throw new Exception("Failed to connect: $errstr ($errno)");\n            }\n\n            return $connection;\n        }\n\n        throw new Exception("Connection pool limit reached");\n    }\n\n    public function releaseConnection($connection) {\n        if (is_resource($connection) && count($this->pool) < $this->maxConnections) {\n            $this->pool[] = $connection;\n        } else {\n            fclose($connection);\n        }\n    }\n\n    public function __destruct() {\n        // Close all connections when the pool manager is destroyed\n        foreach ($this->pool as $connection) {\n            fclose($connection);\n        }\n    }\n}\n\n// Usage example\ntry {\n    $pool = new ConnectionPool('your-backend-server', 12345);\n\n    // Get a connection from the pool\n    $connection = $pool->getConnection();\n\n    // Use the connection\n    fwrite($connection, "Your data here");\n    $response = fread($connection, 8192);\n\n    // Release the connection back to the pool\n    $pool->releaseConnection($connection);\n} catch (Exception $e) {\n    echo "Error: " . $e->getMessage();\n}