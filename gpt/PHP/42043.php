<?php\n\n/**\n * A class to generate html tags\n * @author Glen Solsberry\n */\nclass HTML {\n\n    private $isOpen;\n    private $tags = [];\n    private $current_tag = 0;\n    private $depth = 0;\n    private $output = "";\n    private $separator = " ";\n    private $pretty_print = true;\n\n    /**\n     * Set the pretty_print status\n     * @param bool $new_value\n     */\n    public function setPretty($new_value) {\n        $this->pretty_print = (bool)$new_value;\n    }\n\n    /**\n     * Set the "separator" (the string that will be printed before tags on a new line)\n     * @param string $new_value\n     */\n    public function setSeparator($new_value) {\n        $this->separator = $new_value;\n    }\n\n    /**\n     * Add a tag to the "DOM"\n     * @param string $tag\n     * @return $this\n     */\n    public function tag($tag) {\n        $this->updateChildrenAndParent();\n        $this->tags[$this->current_tag] = [\n            'tag' => $tag,\n            'open' => true,\n            'attrs' => []\n        ];\n        return $this;\n    }\n\n    /**\n     * Set an attribute on the current tag\n     * @param string $key\n     * @param string $value\n     * @return $this\n     */\n    public function attr($key, $value) {\n        $this->tags[$this->current_tag]['attrs'][$key] = $value;\n        return $this;\n    }\n\n    /**\n     * Close the current tag, if it's open. If the tag is already closed, we work back up the chain to determine which tag needs to be closed.\n     * @return $this\n     */\n    public function close() {\n        if (!empty($this->tags) && $this->isOpen($this->current_tag)) {\n            $this->tags[$this->current_tag]['open'] = false;\n        } else {\n            for ($previous_id = $this->current_tag - 1; $previous_id >= 0; $previous_id--) {\n                if ($this->isOpen($previous_id)) {\n                    $this->tags[$previous_id]['open'] = false;\n                    break;\n                }\n            }\n        }\n        return $this;\n    }\n\n    /**\n     * Create a text node\n     * @param string $text\n     * @return $this\n     */\n    public function text($text) {\n        $this->updateChildrenAndParent();\n        $this->tags[$this->current_tag]['text'] = $text;\n        return $this;\n    }\n\n    /**\n     * Check if a tag is open\n     * @param int $tag_id\n     * @return bool\n     */\n    private function isOpen($tag_id) {\n        return isset($this->tags[$tag_id]['open']) && $this->tags[$tag_id]['open'];\n    }\n\n    /**\n     * Update children and parent relation\n     */\n    private function updateChildrenAndParent() {\n        if (!empty($this->tags) && isset($this->tags[$this->current_tag]['open']) && $this->tags[$this->current_tag]['open']) {\n            $this->current_tag++;\n        }\n    }\n}