class Site_Mapper {\n    private static $instance = null;\n    private $identityMap = [];\n\n    // Singleton pattern to ensure only one instance of the mapper\n    public static function getInstance() {\n        if (self::$instance === null) {\n            self::$instance = new Site_Mapper();\n        }\n        return self::$instance;\n    }\n\n    private function __construct() {\n        // Private to prevent direct instantiation\n    }\n\n    public function get($id) {\n        // If the Site object is already in the identity map, return it\n        if (isset($this->identityMap[$id])) {\n            return $this->identityMap[$id];\n        }\n\n        // Otherwise, create a new Site object\n        $site = $this->findSiteById($id);\n        $this->identityMap[$id] = $site;\n        return $site;\n    }\n\n    private function findSiteById($id) {\n        // Simulate database lookup and object creation\n        // Replace this with actual DB logic\n        return new Site($id);\n    }\n}\n\nclass Site {\n    private $id;\n\n    public function __construct($id) {\n        $this->id = $id;\n    }\n}\n\n// Usage\n$mapper = Site_Mapper::getInstance();\n$a = $mapper->get(1);\n$b = $mapper->get(1);\n\nvar_dump($a == $b);  // true\nvar_dump($a === $b); // true