class TrieNode {\n    public $children = [];\n    public $isEndOfWord = false;\n}\n\nclass Trie {\n    protected $root;\n\n    public function __construct() {\n        $this->root = new TrieNode();\n    }\n\n    public function insert($word) {\n        $node = $this->root;\n        $length = strlen($word);\n        for ($i = 0; $i < $length; $i++) {\n            $char = $word[$i];\n            if (!isset($node->children[$char])) {\n                $node->children[$char] = new TrieNode();\n            }\n            $node = $node->children[$char];\n        }\n        $node->isEndOfWord = true;\n    }\n\n    public function search($word) {\n        $node = $this->root;\n        $length = strlen($word);\n        for ($i = 0; $i < $length; $i++) {\n            $char = $word[$i];\n            if (!isset($node->children[$char])) {\n                return false;\n            }\n            $node = $node->children[$char];\n        }\n        return $node->isEndOfWord;\n    }\n\n    public function startsWith($prefix) {\n        $node = $this->root;\n        $length = strlen($prefix);\n        for ($i = 0; $i < $length; $i++) {\n            $char = $prefix[$i];\n            if (!isset($node->children[$char])) {\n                return false;\n            }\n            $node = $node->children[$char];\n        }\n        return true;\n    }\n}