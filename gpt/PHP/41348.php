class MixedArray implements ArrayAccess {\n    protected $_array = array();\n    protected $_keys = array();\n\n    public function __construct($data) {\n        $this->_array = $data;\n        $this->_keys = array_keys($data);\n    }\n\n    public function offsetExists($offset) {\n        if (is_numeric($offset)) {\n            return isset($this->_keys[$offset]);\n        }\n        return isset($this->_array[$offset]);\n    }\n\n    public function offsetGet($offset) {\n        if (is_numeric($offset)) {\n            $key = $this->_keys[$offset] ?? null;\n            return $key !== null ? $this->_array[$key] : null;\n        }\n        return $this->_array[$offset] ?? null;\n    }\n\n    public function offsetSet($offset, $value) {\n        if (is_numeric($offset)) {\n            $key = $this->_keys[$offset] ?? null;\n            if ($key !== null) {\n                $this->_array[$key] = $value;\n            }\n        } else {\n            $this->_array[$offset] = $value;\n            $this->_keys = array_keys($this->_array);\n        }\n    }\n\n    public function offsetUnset($offset) {\n        if (is_numeric($offset)) {\n            $key = $this->_keys[$offset] ?? null;\n            if ($key !== null) {\n                unset($this->_array[$key]);\n                $this->_keys = array_keys($this->_array);\n            }\n        } else {\n            unset($this->_array[$offset]);\n            $this->_keys = array_keys($this->_array);\n        }\n    }\n}\n\n// Example usage\n$data = array(\n    'one' => 'something', \n    'two' => 'else', \n    'three' => 'completely'\n);\n\n$mixedArray = new MixedArray($data);\n\n// Access by associative key\necho $mixedArray['one']; // Output: something\n\n// Access by numeric index\necho $mixedArray[0]; // Output: something