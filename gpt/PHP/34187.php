<?php\n\ninterface LoggerInterface {\n    public function logMessage($message);\n    public function logDatabaseQuery($query);\n}\n\nclass Database {\n    private $logger;\n\n    public function __construct(LoggerInterface $logger) {\n        $this->logger = $logger;\n    }\n\n    public function runQuery($sUpdateQuery) {\n        // Execute the query\n        // ...\n        $this->logger->logDatabaseQuery($sUpdateQuery);\n    }\n\n    public function doInsert($sInsert) {\n        // Insert the data\n        // ...\n        $this->logger->logDatabaseQuery($sInsert);\n    }\n}\n\nclass Log implements LoggerInterface {\n    private $database;\n\n    public function __construct(Database $database) {\n        $this->database = $database;\n    }\n\n    public function logMessage($message) {\n        // Log to file or email\n        // ...\n    }\n\n    public function logDatabaseQuery($query) {\n        // Log to the database\n        $this->database->doInsert("INSERT INTO logs (query) VALUES ('$query')");\n    }\n}\n\n// Set up the dependencies\n$log = new Log(null); // Temporary null, will be set properly after database instance\n$database = new Database($log);\n$log = new Log($database); // Correctly set the database instance in log\n\n// Now you can use the database and log classes\n$database->doInsert("INSERT INTO users (name) VALUES ('John')");