class Foo1 {\n    public function method1() {\n        echo "Method from Foo1\n";\n    }\n}\n\nclass Foo2 {\n    public function method1() {\n        echo "Method from Foo2\n";\n    }\n}\n\nclass DynamicClass {\n    private $parentClass;\n\n    public function __construct($parentClassName) {\n        if (class_exists($parentClassName)) {\n            $this->parentClass = new $parentClassName();\n        } else {\n            throw new Exception("Class $parentClassName does not exist.");\n        }\n    }\n\n    public function __call($method, $args) {\n        if (method_exists($this->parentClass, $method)) {\n            return call_user_func_array([$this->parentClass, $method], $args);\n        } else {\n            throw new Exception("Method $method does not exist in " . get_class($this->parentClass));\n        }\n    }\n}\n\n$dynamicInstance = new DynamicClass('Foo1');\n$dynamicInstance->method1(); // Outputs: Method from Foo1\n\n$dynamicInstance = new DynamicClass('Foo2');\n$dynamicInstance->method1(); // Outputs: Method from Foo2