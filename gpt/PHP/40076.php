<?php\ninterface FileTransferInterface {\n    public function connect();\n    public function download($remoteFile, $localFile);\n    public function upload($localFile, $remoteFile);\n    public function disconnect();\n}\n\nclass FTPClient implements FileTransferInterface {\n    private $connection;\n    private $host;\n    private $user;\n    private $pass;\n\n    public function __construct($host, $user, $pass) {\n        $this->host = $host;\n        $this->user = $user;\n        $this->pass = $pass;\n    }\n\n    public function connect() {\n        $this->connection = ftp_connect($this->host);\n        return ftp_login($this->connection, $this->user, $this->pass);\n    }\n\n    public function download($remoteFile, $localFile) {\n        return ftp_get($this->connection, $localFile, $remoteFile, FTP_BINARY);\n    }\n\n    public function upload($localFile, $remoteFile) {\n        return ftp_put($this->connection, $remoteFile, $localFile, FTP_BINARY);\n    }\n\n    public function disconnect() {\n        ftp_close($this->connection);\n    }\n}\n\nclass SFTPClient implements FileTransferInterface {\n    private $connection;\n    private $host;\n    private $port;\n    private $user;\n    private $pass;\n\n    public function __construct($host, $user, $pass, $port = 22) {\n        $this->host = $host;\n        $this->port = $port;\n        $this->user = $user;\n        $this->pass = $pass;\n    }\n\n    public function connect() {\n        $this->connection = new SFTP($this->host, $this->port);\n        return $this->connection->login($this->user, $this->pass);\n    }\n\n    public function download($remoteFile, $localFile) {\n        return $this->connection->get($remoteFile, $localFile);\n    }\n\n    public function upload($localFile, $remoteFile) {\n        return $this->connection->put($remoteFile, $localFile);\n    }\n\n    public function disconnect() {\n        $this->connection->disconnect();\n    }\n}\n?>