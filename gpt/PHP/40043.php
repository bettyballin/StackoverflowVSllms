<?php\n\nclass MyArrayObject implements ArrayAccess {\n    private $container = array();\n\n    public function __construct() {\n        $this->container = array();\n    }\n\n    // Implementing offsetSet\n    public function offsetSet($offset, $value) {\n        if (is_null($offset)) {\n            $this->container[] = $value;\n        } else {\n            $this->container[$offset] = $value;\n        }\n    }\n\n    // Implementing offsetExists\n    public function offsetExists($offset) {\n        return isset($this->container[$offset]);\n    }\n\n    // Implementing offsetUnset\n    public function offsetUnset($offset) {\n        unset($this->container[$offset]);\n    }\n\n    // Implementing offsetGet\n    public function offsetGet($offset) {\n        return isset($this->container[$offset]) ? $this->container[$offset] : null;\n    }\n}\n\n// Example function that expects an array\nfunction myFunction(array $argument) {\n    // Do something with the array\n    print_r($argument);\n}\n\n// Create an instance of MyArrayObject\n$arrayObject = new MyArrayObject();\n$arrayObject['key1'] = 'value1';\n$arrayObject['key2'] = 'value2';\n\n// Convert the object to an array and pass it to the function\nmyFunction((array) $arrayObject);\n\n?>