class Father {\n    public $father_id;\n    public $name;\n    public $job;\n    public $sons;\n\n    public function __construct($id, $name, $job) {\n        $this->father_id = $id;\n        $this->name = $name;\n        $this->job = $job;\n        $this->sons = array();\n    }\n\n    public function AddSon($son_id, $son_name, $son_age) {\n        $sonHandler = new Son($son_id, $son_name, $son_age, $this);\n        $this->sons[] = $sonHandler;\n        return $sonHandler;\n    }\n\n    public function ChangeJob($newJob) {\n        $this->job = $newJob;\n    }\n}\n\nclass Son {\n    public $son_id;\n    public $son_name;\n    public $son_age;\n    private $father;\n\n    public function __construct($son_id, $son_name, $son_age, $father) {\n        $this->son_id = $son_id;\n        $this->son_name = $son_name;\n        $this->son_age = $son_age;\n        $this->father = $father;\n    }\n\n    public function GetFatherJob() {\n        return $this->father->job;\n    }\n}\n\n// Usage example\n$daddy = new Father('1', 'Foo', 'Bar');\n\n// Add sons\n$first_son = $daddy->AddSon('2', 'John', '13');\n$second_son = $daddy->AddSon('3', 'Rambo', '18');\n\n// Retrieve daddy's job via any son\necho $first_son->GetFatherJob(); // Outputs: Bar