class ControllerFactory {\n    private $reflectionCache = [];\n\n    public function createController($controllerName) {\n        if (!isset($this->reflectionCache[$controllerName])) {\n            $reflectionClass = new ReflectionClass($controllerName);\n            $this->reflectionCache[$controllerName] = $reflectionClass;\n        } else {\n            $reflectionClass = $this->reflectionCache[$controllerName];\n        }\n\n        return $reflectionClass->newInstance();\n    }\n\n    public function callControllerMethod($controller, $methodName, $params = []) {\n        $controllerClass = get_class($controller);\n\n        if (!isset($this->reflectionCache[$controllerClass][$methodName])) {\n            $reflectionMethod = new ReflectionMethod($controllerClass, $methodName);\n            $this->reflectionCache[$controllerClass][$methodName] = $reflectionMethod;\n        } else {\n            $reflectionMethod = $this->reflectionCache[$controllerClass][$methodName];\n        }\n\n        return $reflectionMethod->invokeArgs($controller, $params);\n    }\n}\n\n// Example usage:\n$factory = new ControllerFactory();\n$controller = $factory->createController('SomeController');\n$factory->callControllerMethod($controller, 'someMethod', ['param1', 'param2']);