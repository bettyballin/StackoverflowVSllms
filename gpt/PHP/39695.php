<?php\nrequire 'vendor/autoload.php'; // Assuming you use Composer for library management\n\nuse KMeans\Space;\nuse KMeans\Cluster;\n\n// Step 1: Fetch articles from database\n$articles = [];\n$sql = "SELECT id, text FROM articles";\n$result = mysql_query($sql);\nwhile ($row = mysql_fetch_assoc($result)) {\n    $articles[$row['id']] = $row['text'];\n}\n\n// Step 2: Convert articles to TF-IDF vectors\n$tfidf = new TFIDF();\n$articleVectors = [];\nforeach ($articles as $id => $text) {\n    $articleVectors[$id] = $tfidf->vectorize($text);\n}\n\n// Step 3: Clustering using K-means\n$space = new Space(count($articleVectors[0]));\nforeach ($articleVectors as $id => $vector) {\n    $space->addPoint($vector, ['id' => $id]);\n}\n$clusters = $space->solve($k = 10); // Choose an appropriate number of clusters\n\n// Step 4: Insert related articles into the `related` table\nforeach ($clusters as $cluster) {\n    $points = $cluster->getPoints();\n    foreach ($points as $point1) {\n        foreach ($points as $point2) {\n            if ($point1 !== $point2) {\n                $id1 = $point1->getCoordinates()['id'];\n                $id2 = $point2->getCoordinates()['id'];\n                $sql = "INSERT INTO related (article1, article2) VALUES ('$id1', '$id2')";\n                mysql_query($sql);\n            }\n        }\n    }\n}\n?>