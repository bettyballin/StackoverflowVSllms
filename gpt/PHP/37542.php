<?php\n// Step 1: Extract Words\nfunction tokenize($text) {\n    // Tokenize text into words, remove punctuation, lowercase\n    $words = preg_split('/\W+/', strtolower($text), -1, PREG_SPLIT_NO_EMPTY);\n    return $words;\n}\n\n// Step 2: Calculate TF-IDF (or term frequency)\nfunction calculateTfIdf($documents) {\n    $tf = [];\n    $df = [];\n    $idf = [];\n    $tfIdf = [];\n    $totalDocuments = count($documents);\n\n    foreach ($documents as $docId => $document) {\n        $words = tokenize($document);\n        $wordCount = array_count_values($words);\n        $tf[$docId] = $wordCount;\n\n        foreach ($wordCount as $word => $count) {\n            if (!isset($df[$word])) {\n                $df[$word] = 0;\n            }\n            $df[$word]++;\n        }\n    }\n\n    foreach ($df as $word => $count) {\n        $idf[$word] = log($totalDocuments / $count);\n    }\n\n    foreach ($tf as $docId => $wordCounts) {\n        foreach ($wordCounts as $word => $count) {\n            if (!isset($tfIdf[$docId])) {\n                $tfIdf[$docId] = [];\n            }\n            $tfIdf[$docId][$word] = $count * $idf[$word];\n        }\n    }\n\n    return $tfIdf;\n}\n\n// Step 3: Build Term-Document Matrix\nfunction buildTermDocumentMatrix($tfIdf) {\n    $uniqueWords = array_unique(array_merge(...array_values($tfIdf)));\n    $matrix = [];\n\n    foreach ($tfIdf as $docId => $wordWeights) {\n        $row = [];\n        foreach ($uniqueWords as $word) {\n            $row[] = isset($wordWeights[$word]) ? $wordWeights[$word] : 0;\n        }\n        $matrix[] = $row;\n    }\n\n    return $matrix;\n}\n\n// Step 4: Perform SVD (Assuming you have an SVD function)\nfunction performSVD($matrix) {\n    // Use your existing SVD implementation\n    list($U, $S, $V) = svd($matrix);\n    return [$U, $S, $V];\n}\n\n// Step 5: Dimension Reduction\nfunction reduceDimensions($U, $S, $V, $k) {\n    // Keep only top k dimensions\n    $U_reduced = array_slice($U, 0, $k);\n    $S_reduced = array_slice($S, 0, $k);\n    $V_reduced = array_slice($V, 0, $k);\n\n    return [$U_reduced, $S_reduced, $V_reduced];\n}\n\n// Example usage\n$documents = [\n    "Document 1 text ...",\n    "Document 2 text ...",\n    // More documents\n];\n\n$tfIdf = calculateTfIdf($documents);\n$termDocumentMatrix = buildTermDocumentMatrix($tfIdf);\nlist($U, $S, $V) = performSVD($termDocumentMatrix);\n$k = 2;  // Number of dimensions to reduce to\nlist($U_reduced, $S_reduced, $V_reduced) = reduceDimensions($U, $S, $V, $k);\n\nprint_r($U_reduced);\nprint_r($S_reduced);\nprint_r($V_reduced);\n?>