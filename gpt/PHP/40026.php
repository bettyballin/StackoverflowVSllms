class MyService {\n    private $dependency;\n\n    public function __construct(MyDependency $dependency) {\n        $this->dependency = $dependency;\n    }\n\n    public function performTask() {\n        // Use the dependency to perform some task\n        $this->dependency->execute();\n    }\n}\n\nclass MyDependency {\n    public function execute() {\n        // Implementation of the dependency\n    }\n}\n\n// Context or Container to manage dependencies\nclass DIContainer {\n    private $services = [];\n\n    public function register($name, $service) {\n        $this->services[$name] = $service;\n    }\n\n    public function get($name) {\n        if (isset($this->services[$name])) {\n            return $this->services[$name];\n        }\n\n        throw new Exception("Service not found: " . $name);\n    }\n}\n\n// Usage\n$container = new DIContainer();\n$container->register('my_dependency', new MyDependency());\n$container->register('my_service', new MyService($container->get('my_dependency')));\n\n$myService = $container->get('my_service');\n$myService->performTask();