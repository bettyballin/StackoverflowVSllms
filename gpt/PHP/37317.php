class Proxy implements Iterator\n{\n    private $data = array();\n    private $position = 0;\n\n    public function __construct()\n    {\n        $this->position = 0;\n    }\n\n    public function __get($name)\n    {\n        return isset($this->data[$name]) ? $this->data[$name] : null;\n    }\n\n    public function __set($name, $value)\n    {\n        $this->data[$name] = $value;\n    }\n\n    // Iterator methods\n    public function rewind()\n    {\n        $this->position = 0;\n    }\n\n    public function current()\n    {\n        return array_values($this->data)[$this->position];\n    }\n\n    public function key()\n    {\n        return array_keys($this->data)[$this->position];\n    }\n\n    public function next()\n    {\n        ++$this->position;\n    }\n\n    public function valid()\n    {\n        return isset(array_values($this->data)[$this->position]);\n    }\n}\n\n// Example usage\n$myProxy = new Proxy();\n$myProxy->a = 1;\n$myProxy->b = 2;\n$myProxy->c = 3;\n\nforeach ($myProxy as $key => $value) {\n    echo "$key => $value\n";\n}