#!/bin/bash\n\n# Function to replace '{}' with the filename\nreplace_placeholders() {\n    local command=$1\n    local filename=$2\n    echo "${command//\{\}/$filename}"\n}\n\n# Function to execute commands on file change\nexecute_commands() {\n    local filename=$1\n    shift\n    for cmd in "$@"; do\n        cmd_to_execute=$(replace_placeholders "$cmd" "$filename")\n        eval "$cmd_to_execute"\n    done\n}\n\n# Check if inotifywait is installed\nif ! command -v inotifywait &> /dev/null; then\n    echo "inotifywait could not be found, please install inotify-tools."\n    exit 1\nfi\n\n# Parse the arguments\nfiles=()\ncommands=()\nwhile [[ $# -gt 0 ]]; do\n    case $1 in\n        do)\n            shift\n            while [[ $# -gt 0 && $1 != "and" ]]; do\n                commands+=("$1")\n                shift\n            done\n            ;;\n        and)\n            shift\n            ;;\n        *)\n            files+=("$1")\n            shift\n            ;;\n    esac\ndone\n\n# Make sure files and commands are provided\nif [ ${#files[@]} -eq 0 ] || [ ${#commands[@]} -eq 0 ]; then\n    echo "Usage: watching FILE+ do COMMAND [ARGS] (and COMMAND [ARGS])*"\n    exit 1\nfi\n\n# Monitor the files for changes\ninotifywait -m -e close_write "${files[@]}" | while read -r directory events filename; do\n    filepath="${directory}${filename}"\n    execute_commands "$filepath" "${commands[@]}"\ndone