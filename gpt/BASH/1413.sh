# Load Outlook interop assembly\nAdd-Type -AssemblyName "Microsoft.Office.Interop.Outlook"\n\n# Create Outlook application object\n$outlook = New-Object -ComObject Outlook.Application\n$nameSpace = $outlook.GetNamespace("MAPI")\n\n# Get the current profile\n$profileName = $nameSpace.CurrentProfileName\n\n# Get the address book settings\n$addressBook = $nameSpace.AddressLists\n\n# Define the desired order of address lists\n$desiredOrder = @("Exchange Address List", "Contacts", "Global Address List")\n\n# Create a hash table to store the address list objects\n$addressListMap = @{}\n\n# Populate the hash table with the address list objects\nforeach ($addressList in $addressBook) {\n    if ($desiredOrder -contains $addressList.Name) {\n        $addressListMap[$addressList.Name] = $addressList\n    }\n}\n\n# Reorder the address lists according to the desired order\n$orderedAddressLists = @()\nforeach ($name in $desiredOrder) {\n    if ($addressListMap.ContainsKey($name)) {\n        $orderedAddressLists += $addressListMap[$name]\n    }\n}\n\n# Set the new order of address lists in the profile\n# Note: This part is conceptual; actual code may vary depending on Outlook version and interop capabilities\n# $profile.SetAddressListOrder($orderedAddressLists)\n\n"Address lists reordered successfully."\n\n# Clean up\n[System.Runtime.InteropServices.Marshal]::ReleaseComObject($addressBook) | Out-Null\n[System.Runtime.InteropServices.Marshal]::ReleaseComObject($nameSpace) | Out-Null\n[System.Runtime.InteropServices.Marshal]::ReleaseComObject($outlook) | Out-Null