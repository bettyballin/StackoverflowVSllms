#!/bin/bash\n\n# Define variables\nDB_USER="your_mysql_user"\nDB_PASSWORD="your_mysql_password"\nDB_HOST="localhost"\nBACKUP_DIR="/path/to/backup"\nEMAIL_TO="destination_email@example.com"\nEMAIL_FAIL="failover_email@example.com"\nDATE=$(date +"%Y%m%d%H%M")\n\n# Create backup directory if it doesn't exist\nmkdir -p ${BACKUP_DIR}/${DATE}\n\n# Get a list of all databases\ndatabases=`mysql -u${DB_USER} -p${DB_PASSWORD} -h${DB_HOST} -e "SHOW DATABASES;" | tr -d "| " | grep -v Database`\n\n# Dump each database\nfor db in $databases; do\n  if [[ "$db" != "information_schema" && "$db" != "performance_schema" && "$db" != "mysql" && "$db" != "sys" ]]; then\n    mysqldump -u${DB_USER} -p${DB_PASSWORD} -h${DB_HOST} --databases $db > ${BACKUP_DIR}/${DATE}/${db}.sql\n  fi\ndone\n\n# Zip the dump files\nzip -r ${BACKUP_DIR}/mysql_backup_${DATE}.zip ${BACKUP_DIR}/${DATE}\n\n# Send the backup via email\necho "MySQL Backup for ${DATE}" | mail -s "MySQL Backup ${DATE}" -a ${BACKUP_DIR}/mysql_backup_${DATE}.zip ${EMAIL_TO}\n\n# Check if the email was sent successfully\nif [ $? -ne 0 ]; then\n  echo "Backup email failed." | mail -s "MySQL Backup Failed ${DATE}" ${EMAIL_FAIL}\nfi\n\n# Cleanup\nrm -rf ${BACKUP_DIR}/${DATE}\nrm -f ${BACKUP_DIR}/mysql_backup_${DATE}.zip