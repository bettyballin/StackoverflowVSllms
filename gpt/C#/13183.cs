using System;\nusing System.Security;\nusing System.Security.Permissions;\nusing System.Security.Policy;\n\npublic class Sandbox\n{\n    public static void ExecuteInSandbox(AppDomainSetup setupInfo, Evidence evidence, PermissionSet permissions, string assemblyName, string typeName, string methodName, object[] parameters)\n    {\n        // Create the sandbox AppDomain\n        AppDomain sandbox = AppDomain.CreateDomain("Sandbox", evidence, setupInfo, permissions);\n\n        try\n        {\n            // Load the assembly and execute the method\n            sandbox.DoCallBack(() =>\n            {\n                var targetType = Type.GetType(typeName);\n                var methodInfo = targetType.GetMethod(methodName);\n                methodInfo.Invoke(null, parameters);\n            });\n        }\n        finally\n        {\n            // Unload the sandbox AppDomain\n            AppDomain.Unload(sandbox);\n        }\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Define the permissions for the sandbox\n        PermissionSet permissions = new PermissionSet(PermissionState.None);\n        permissions.AddPermission(new WebPermission(NetworkAccess.Connect, "http://allowed.website.com"));\n\n        // Define AppDomain setup information\n        AppDomainSetup setupInfo = new AppDomainSetup\n        {\n            ApplicationBase = AppDomain.CurrentDomain.BaseDirectory\n        };\n\n        // Define evidence (optional, can be null)\n        Evidence evidence = new Evidence();\n\n        // Use the sandbox to execute third-party code\n        Sandbox.ExecuteInSandbox(setupInfo, evidence, permissions, "ThirdPartyAssembly", "ThirdPartyNamespace.ThirdPartyClass", "ThirdPartyMethod", null);\n    }\n}