using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic partial class resp\n{\n    public IEnumerable<RuleViolation> GetRuleViolations()\n    {\n        if (String.IsNullOrEmpty(respName))\n            yield return new RuleViolation("Responsibility name required", "respName");\n        yield break;\n    }\n\n    public bool IsValid\n    {\n        // Quick method for checking to see whether an object contains any RuleViolations\n        get { return (GetRuleViolations().Count() == 0); }\n    }\n\n    partial void OnValidate(ChangeAction action)\n    {\n        var validationErrors = new List<string>();\n\n        if (action == ChangeAction.Delete)\n        {\n            if (respApprovers.Count() != 0 || approvals.Count() != 0)\n            {\n                validationErrors.Add("You cannot delete a responsibility that is in use.");\n            }\n        }\n\n        if (!IsValid)\n        {\n            validationErrors.AddRange(GetRuleViolations().Select(v => v.ErrorMessage));\n        }\n\n        if (validationErrors.Any())\n        {\n            throw new ValidationException(validationErrors);\n        }\n    }\n}\n\npublic class RuleViolation\n{\n    public string ErrorMessage { get; }\n    public string PropertyName { get; }\n\n    public RuleViolation(string errorMessage, string propertyName)\n    {\n        ErrorMessage = errorMessage;\n        PropertyName = propertyName;\n    }\n}\n\npublic class ValidationException : Exception\n{\n    public IEnumerable<string> ValidationErrors { get; }\n\n    public ValidationException(IEnumerable<string> validationErrors)\n        : base("Validation failed")\n    {\n        ValidationErrors = validationErrors;\n    }\n}