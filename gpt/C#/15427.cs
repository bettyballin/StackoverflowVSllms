using System;\nusing System.Linq.Expressions;\nusing System.Text;\n\npublic class ExpressionToSql\n{\n    public static string ToSqlWhereClause<T>(Expression<Func<T, bool>> expression)\n    {\n        var visitor = new SimpleExpressionVisitor();\n        visitor.Visit(expression);\n        return visitor.Sql;\n    }\n\n    private class SimpleExpressionVisitor : ExpressionVisitor\n    {\n        private StringBuilder _sql;\n\n        public string Sql => _sql.ToString();\n\n        public SimpleExpressionVisitor()\n        {\n            _sql = new StringBuilder();\n        }\n\n        protected override Expression VisitBinary(BinaryExpression node)\n        {\n            _sql.Append("(");\n            Visit(node.Left);\n            _sql.Append($" {GetSqlOperator(node.NodeType)} ");\n            Visit(node.Right);\n            _sql.Append(")");\n            return node;\n        }\n\n        protected override Expression VisitMember(MemberExpression node)\n        {\n            _sql.Append(node.Member.Name);\n            return node;\n        }\n\n        protected override Expression VisitConstant(ConstantExpression node)\n        {\n            _sql.Append($"'{node.Value}'");\n            return node;\n        }\n\n        private string GetSqlOperator(ExpressionType nodeType)\n        {\n            switch (nodeType)\n            {\n                case ExpressionType.Equal:\n                    return "=";\n                case ExpressionType.AndAlso:\n                    return "AND";\n                default:\n                    throw new NotSupportedException($"Unsupported node type: {nodeType}");\n            }\n        }\n    }\n}\n\n// Usage\nExpression<Func<MyClass, bool>> expr = b => b.user == "joe" && b.domain == "bloggs.com";\nstring sqlWhereClause = ExpressionToSql.ToSqlWhereClause(expr);\nConsole.WriteLine(sqlWhereClause); // Output: ((user = 'joe') AND (domain = 'bloggs.com'))\n\npublic class MyClass\n{\n    public string user { get; set; }\n    public string domain { get; set; }\n}