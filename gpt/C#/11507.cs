using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing iText.Kernel.Pdf;\nusing iText.Kernel.Pdf.Canvas.Parser;\nusing iText.Layout;\nusing iText.Layout.Element;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        string inputFilePath = "input.pdf";\n        string outputFilePath = "output_with_index.pdf";\n\n        Dictionary<string, List<int>> wordIndex = GenerateWordIndex(inputFilePath);\n        AddIndexToPdf(inputFilePath, outputFilePath, wordIndex);\n    }\n\n    static Dictionary<string, List<int>> GenerateWordIndex(string filePath)\n    {\n        Dictionary<string, List<int>> wordIndex = new Dictionary<string, List<int>>();\n        using (PdfReader reader = new PdfReader(filePath))\n        using (PdfDocument pdfDoc = new PdfDocument(reader))\n        {\n            for (int pageNum = 1; pageNum <= pdfDoc.GetNumberOfPages(); pageNum++)\n            {\n                string pageText = PdfTextExtractor.GetTextFromPage(pdfDoc.GetPage(pageNum));\n                string[] words = pageText.Split(new char[] { ' ', '\n', '\r', ',', '.', ';', ':', '!', '?' }, StringSplitOptions.RemoveEmptyEntries);\n\n                foreach (string word in words)\n                {\n                    string key = word.ToLower();\n                    if (!wordIndex.ContainsKey(key))\n                    {\n                        wordIndex[key] = new List<int>();\n                    }\n                    wordIndex[key].Add(pageNum);\n                }\n            }\n        }\n        return wordIndex;\n    }\n\n    static void AddIndexToPdf(string inputFilePath, string outputFilePath, Dictionary<string, List<int>> wordIndex)\n    {\n        using (PdfReader reader = new PdfReader(inputFilePath))\n        using (PdfWriter writer = new PdfWriter(outputFilePath))\n        using (PdfDocument pdfDoc = new PdfDocument(reader, writer))\n        {\n            Document document = new Document(pdfDoc);\n            document.Add(new AreaBreak(AreaBreakType.NEXT_PAGE));\n            document.Add(new Paragraph("Index"));\n\n            foreach (var entry in wordIndex)\n            {\n                string word = entry.Key;\n                List<int> pages = entry.Value;\n                string pageList = string.Join(", ", pages);\n                document.Add(new Paragraph($"{word}: {pageList}"));\n            }\n        }\n    }\n}