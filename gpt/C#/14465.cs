using System;\nusing System.Data.SqlClient;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class EncryptionHelper\n{\n    private static readonly byte[] Key = Encoding.UTF8.GetBytes("YourEncryptionKey");\n    private static readonly byte[] IV = Encoding.UTF8.GetBytes("YourIV");\n\n    public static string EncryptString(string plainText)\n    {\n        using (Aes aesAlg = Aes.Create())\n        {\n            aesAlg.Key = Key;\n            aesAlg.IV = IV;\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n            using (var msEncrypt = new System.IO.MemoryStream())\n            {\n                using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                {\n                    using (var swEncrypt = new System.IO.StreamWriter(csEncrypt))\n                    {\n                        swEncrypt.Write(plainText);\n                    }\n                    return Convert.ToBase64String(msEncrypt.ToArray());\n                }\n            }\n        }\n    }\n\n    public static void StoreCredentials(string username, string password)\n    {\n        string encryptedUsername = EncryptString(username);\n        string encryptedPassword = EncryptString(password);\n\n        using (SqlConnection connection = new SqlConnection("YourConnectionString"))\n        {\n            string query = "INSERT INTO YourTable (Username, Password) VALUES (@Username, @Password)";\n            using (SqlCommand command = new SqlCommand(query, connection))\n            {\n                command.Parameters.AddWithValue("@Username", encryptedUsername);\n                command.Parameters.AddWithValue("@Password", encryptedPassword);\n                connection.Open();\n                command.ExecuteNonQuery();\n            }\n        }\n    }\n}