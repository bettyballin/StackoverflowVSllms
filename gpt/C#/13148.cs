public class DataReaderStream : Stream\n{\n    private readonly IDataReader _dataReader;\n    private readonly string _columnName;\n    private readonly long _length;\n    private long _position;\n\n    public DataReaderStream(IDataReader dataReader, string columnName)\n    {\n        _dataReader = dataReader ?? throw new ArgumentNullException(nameof(dataReader));\n        _columnName = columnName ?? throw new ArgumentNullException(nameof(columnName));\n\n        _length = _dataReader.GetBytes(_dataReader.GetOrdinal(_columnName), 0, null, 0, 0);\n        _position = 0;\n    }\n\n    public override bool CanRead => true;\n    public override bool CanSeek => false;\n    public override bool CanWrite => false;\n    public override long Length => _length;\n    public override long Position\n    {\n        get => _position;\n        set => throw new NotSupportedException();\n    }\n\n    public override void Flush()\n    {\n    }\n\n    public override int Read(byte[] buffer, int offset, int count)\n    {\n        if (buffer == null) throw new ArgumentNullException(nameof(buffer));\n        if (offset < 0) throw new ArgumentOutOfRangeException(nameof(offset));\n        if (count < 0) throw new ArgumentOutOfRangeException(nameof(count));\n        if (buffer.Length - offset < count) throw new ArgumentException("Invalid offset and count.");\n\n        if (_position >= _length)\n        {\n            return 0; // End of stream\n        }\n\n        long bytesRead = _dataReader.GetBytes(_dataReader.GetOrdinal(_columnName), _position, buffer, offset, count);\n        _position += bytesRead;\n        return (int)bytesRead;\n    }\n\n    public override long Seek(long offset, SeekOrigin origin)\n    {\n        throw new NotSupportedException();\n    }\n\n    public override void SetLength(long value)\n    {\n        throw new NotSupportedException();\n    }\n\n    public override void Write(byte[] buffer, int offset, int count)\n    {\n        throw new NotSupportedException();\n    }\n}