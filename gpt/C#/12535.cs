// Allocate buffer and populate it\n   int bufferSize = 1024;\n   IntPtr inputBuffer = Marshal.AllocHGlobal(bufferSize);\n   byte[] managedInputBuffer = new byte[bufferSize];\n   // Fill managedInputBuffer with data\n   Marshal.Copy(managedInputBuffer, 0, inputBuffer, bufferSize);\n\n   // Create input struct\n   BIG_INPUT_STRC inputStruct = new BIG_INPUT_STRC {\n       someValue = 123,\n       buffer = inputBuffer\n   };\n\n   // Allocate output buffer\n   IntPtr outputBuffer = Marshal.AllocHGlobal(bufferSize);\n   BIG_OUTPUT_STRC outputStruct = new BIG_OUTPUT_STRC {\n       outputBuffer = outputBuffer\n   };\n\n   // Call the function\n   IntPtr procHandle = IntPtr.Zero; // Use the actual handle if applicable\n   NativeMethods.ProcessChunk(procHandle, ref inputStruct, ref outputStruct);\n\n   // Retrieve data from output buffer\n   byte[] managedOutputBuffer = new byte[bufferSize];\n   Marshal.Copy(outputBuffer, managedOutputBuffer, 0, bufferSize);\n\n   // Free allocated memory\n   Marshal.FreeHGlobal(inputBuffer);\n   Marshal.FreeHGlobal(outputBuffer);