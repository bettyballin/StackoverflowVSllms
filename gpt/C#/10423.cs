using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Reflection;\nusing System.Data.Linq;\n\npublic class UniqueAttribute : ValidationAttribute\n{\n    private readonly string _entityType;\n    private readonly string _propertyName;\n\n    public UniqueAttribute(string entityType, string propertyName)\n    {\n        _entityType = entityType;\n        _propertyName = propertyName;\n    }\n\n    protected override ValidationResult IsValid(object value, ValidationContext validationContext)\n    {\n        var context = (DataContext)validationContext.GetService(typeof(DataContext));\n        Type entityType = Type.GetType(_entityType);\n        if (entityType == null)\n        {\n            return new ValidationResult($"Entity type {_entityType} not found.");\n        }\n\n        var table = context.GetTable(entityType);\n        var codeProp = entityType.GetProperty(_propertyName);\n        if (codeProp == null)\n        {\n            return new ValidationResult($"Property {_propertyName} not found on {_entityType}.");\n        }\n\n        ParameterExpression param = Expression.Parameter(entityType, "x");\n        MemberExpression memberExp = Expression.Property(param, codeProp);\n        Expression body = Expression.Equal(memberExp, Expression.Constant(value, codeProp.PropertyType));\n        Type lambdaType = typeof(Func<,>).MakeGenericType(entityType, typeof(bool));\n        var predicate = Expression.Lambda(lambdaType, body, param);\n\n        var query = table.Provider.CreateQuery(Expression.Call(\n            typeof(Queryable),\n            "FirstOrDefault",\n            new Type[] { entityType },\n            table.Expression,\n            predicate));\n\n        var result = query.Execute(entityType);\n\n        if (result != null)\n        {\n            return new ValidationResult($"{_propertyName} must be unique.");\n        }\n\n        return ValidationResult.Success;\n    }\n}