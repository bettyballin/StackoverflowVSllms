using System;\n\npublic struct BoundedInt\n{\n    private int _value;\n    \n    public int Value\n    {\n        get { return _value; }\n        private set\n        {\n            if (value < 1 || value > 10)\n                throw new ArgumentOutOfRangeException(nameof(value), "Value must be between 1 and 10.");\n            _value = value;\n        }\n    }\n\n    public BoundedInt(int value)\n    {\n        _value = 0; // temporary value to satisfy the compiler\n        Value = value; // use the property to enforce the range\n    }\n\n    public static implicit operator int(BoundedInt boundedInt)\n    {\n        return boundedInt.Value;\n    }\n\n    public static explicit operator BoundedInt(int value)\n    {\n        return new BoundedInt(value);\n    }\n\n    public override string ToString()\n    {\n        return Value.ToString();\n    }\n}\n\n// Usage example\nclass Program\n{\n    static void Main()\n    {\n        try\n        {\n            BoundedInt boundedInt = new BoundedInt(5);\n            Console.WriteLine(boundedInt); // Output: 5\n\n            boundedInt = (BoundedInt)8;\n            Console.WriteLine(boundedInt); // Output: 8\n\n            int intValue = boundedInt;\n            Console.WriteLine(intValue); // Output: 8\n\n            // This will throw an exception\n            BoundedInt invalidBoundedInt = new BoundedInt(15);\n        }\n        catch (ArgumentOutOfRangeException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n}