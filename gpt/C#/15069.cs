using System;\nusing System.Collections.ObjectModel;\nusing System.Collections.Specialized;\n\npublic class Floor\n{\n    public double Height { get; set; }\n    public double Elevation { get; private set; }\n\n    // You can add other properties here\n}\n\npublic class FloorList : ObservableCollection<Floor>\n{\n    public FloorList() : base()\n    {\n        CollectionChanged += OnCollectionChanged;\n    }\n\n    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)\n    {\n        UpdateFloorElevations();\n    }\n\n    protected override void InsertItem(int index, Floor item)\n    {\n        base.InsertItem(index, item);\n        UpdateFloorElevations();\n    }\n\n    protected override void RemoveItem(int index)\n    {\n        base.RemoveItem(index);\n        UpdateFloorElevations();\n    }\n\n    protected override void SetItem(int index, Floor item)\n    {\n        base.SetItem(index, item);\n        UpdateFloorElevations();\n    }\n\n    protected override void ClearItems()\n    {\n        base.ClearItems();\n        UpdateFloorElevations();\n    }\n\n    private void UpdateFloorElevations()\n    {\n        double currentElevation = 0;\n\n        foreach (var floor in this)\n        {\n            floor.Elevation = currentElevation;\n            currentElevation += floor.Height;\n        }\n    }\n}