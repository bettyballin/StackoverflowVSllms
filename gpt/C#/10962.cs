using System;\nusing System.Collections.Generic;\n\npublic class WorkFlowStep\n{\n    public int WorkFlowStepID { get; set; }\n    public int? ParentWorkFlowStepID { get; set; }\n\n    public WorkFlowStep(int workFlowStepID, int? parentWorkFlowStepID)\n    {\n        WorkFlowStepID = workFlowStepID;\n        ParentWorkFlowStepID = parentWorkFlowStepID;\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Sample data\n        var steps = new List<WorkFlowStep>\n        {\n            new WorkFlowStep(1, null),\n            new WorkFlowStep(2, 1),\n            new WorkFlowStep(3, 2)\n        };\n\n        var linkedList = new LinkedList<WorkFlowStep>();\n\n        // Adding steps to the linked list\n        foreach (var step in steps)\n        {\n            if (step.ParentWorkFlowStepID == null)\n            {\n                linkedList.AddFirst(step);\n            }\n            else\n            {\n                var parentNode = FindNodeByStepID(linkedList, step.ParentWorkFlowStepID.Value);\n                if (parentNode != null)\n                {\n                    linkedList.AddAfter(parentNode, step);\n                }\n                else\n                {\n                    throw new Exception("Parent node not found.");\n                }\n            }\n        }\n\n        // Output the linked list\n        foreach (var step in linkedList)\n        {\n            Console.WriteLine($"WorkFlowStepID: {step.WorkFlowStepID}, ParentWorkFlowStepID: {step.ParentWorkFlowStepID}");\n        }\n    }\n\n    private static LinkedListNode<WorkFlowStep> FindNodeByStepID(LinkedList<WorkFlowStep> linkedList, int stepID)\n    {\n        var current = linkedList.First;\n        while (current != null)\n        {\n            if (current.Value.WorkFlowStepID == stepID)\n            {\n                return current;\n            }\n            current = current.Next;\n        }\n        return null;\n    }\n}