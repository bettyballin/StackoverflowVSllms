using System;\nusing Org.BouncyCastle.Crypto;\nusing Org.BouncyCastle.Crypto.Generators;\nusing Org.BouncyCastle.Crypto.Parameters;\nusing Org.BouncyCastle.Security;\nusing Org.BouncyCastle.Math;\nusing System.Text;\n\npublic class BouncyCastleECCExample\n{\n    public static void Main()\n    {\n        // Generate a key pair\n        var gen = new ECKeyPairGenerator();\n        var keyGenParam = new KeyGenerationParameters(new SecureRandom(), 256);\n        gen.Init(keyGenParam);\n        AsymmetricCipherKeyPair keyPair = gen.GenerateKeyPair();\n\n        // Data to be signed\n        string message = "Hello, world!";\n        byte[] data = Encoding.UTF8.GetBytes(message);\n\n        // Sign the data\n        ISigner signer = SignerUtilities.GetSigner("SHA-256withECDSA");\n        signer.Init(true, keyPair.Private);\n        signer.BlockUpdate(data, 0, data.Length);\n        byte[] signature = signer.GenerateSignature();\n\n        // Verify the signature\n        signer.Init(false, keyPair.Public);\n        signer.BlockUpdate(data, 0, data.Length);\n        bool isValid = signer.VerifySignature(signature);\n\n        Console.WriteLine($"Signature valid: {isValid}");\n    }\n}