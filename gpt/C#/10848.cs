using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Test\n{\n    public void TestMessage()\n    {\n        // Set up array\n        List<string> arrTest = new List<string> { "Hello", "World" };\n        // Get extra values from all available plugins\n        List<string> arrExtras = CMS.InvokeHook("HelloTest");\n        // Now contains Hello, World, Foo, Bar\n        List<string> arrTests = arrTest.Concat(arrExtras).ToList();\n    }\n}\n\npublic static class CMS\n{\n    public static List<string> InvokeHook(string functionName)\n    {\n        // Now contains a couple plugins\n        List<object> plugins = GetPlugins();\n        // Empty array of values\n        List<string> values = new List<string>();\n        \n        foreach (var plugin in plugins)\n        {\n            var method = plugin.GetType().GetMethod(functionName);\n            if (method != null)\n            {\n                // Call the function and merge in the results\n                var result = method.Invoke(plugin, null) as string;\n                if (result != null)\n                {\n                    values.Add(result);\n                }\n            }\n        }\n        // Return results as an array\n        return values;\n    }\n    \n    public static List<object> GetPlugins()\n    {\n        // Add instances of your plugins here\n        return new List<object> { new FooTest(), new BarTest() };\n    }\n}\n\npublic class FooTest\n{\n    public string HelloTest()\n    {\n        return "Foo";\n    }\n}\n\npublic class BarTest\n{\n    public string HelloTest()\n    {\n        return "Bar";\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        Test test = new Test();\n        test.TestMessage();\n    }\n}