using System;\nusing System.IO;\nusing System.Web.Services.Protocols;\n\npublic class SoapLogger : SoapExtension\n{\n    private Stream oldStream;\n    private Stream newStream;\n\n    public override object GetInitializer(Type serviceType)\n    {\n        return null;\n    }\n\n    public override object GetInitializer(LogicalMethodInfo methodInfo, SoapExtensionAttribute attribute)\n    {\n        return null;\n    }\n\n    public override void Initialize(object initializer) { }\n\n    public override void ProcessMessage(SoapMessage message)\n    {\n        switch (message.Stage)\n        {\n            case SoapMessageStage.BeforeSerialize:\n                break;\n            case SoapMessageStage.AfterSerialize:\n                LogSoapMessage(message, newStream);\n                break;\n            case SoapMessageStage.BeforeDeserialize:\n                LogSoapMessage(message, oldStream);\n                break;\n            case SoapMessageStage.AfterDeserialize:\n                break;\n        }\n    }\n\n    public override Stream ChainStream(Stream stream)\n    {\n        oldStream = stream;\n        newStream = new MemoryStream();\n        return newStream;\n    }\n\n    private void LogSoapMessage(SoapMessage message, Stream stream)\n    {\n        stream.Position = 0;\n        using (StreamReader reader = new StreamReader(stream))\n        {\n            string soapMessage = reader.ReadToEnd();\n            // Log the SOAP message to a file or other logging mechanism\n            File.AppendAllText(@"C:\path\to\log.txt", soapMessage);\n            stream.Position = 0;\n        }\n        if (message.Stage == SoapMessageStage.AfterSerialize)\n        {\n            newStream.CopyTo(oldStream);\n        }\n    }\n}