// Define an interface for configuration\npublic interface IConfiguration\n{\n    string DBConnectionString { get; }\n}\n\n// Implement the interface for different environments\npublic class DevelopmentConfiguration : IConfiguration\n{\n    public string DBConnectionString => "DevConnectionString";\n}\n\npublic class ProductionConfiguration : IConfiguration\n{\n    public string DBConnectionString => "ProdConnectionString";\n}\n\n// Inject the configuration into your dependent classes\npublic class MyService\n{\n    private readonly IConfiguration _configuration;\n\n    public MyService(IConfiguration configuration)\n    {\n        _configuration = configuration;\n    }\n\n    public void PerformDatabaseOperation()\n    {\n        string connectionString = _configuration.DBConnectionString;\n        // Use the connection string to perform the operation\n    }\n}\n\n// Usage example\nclass Program\n{\n    static void Main(string[] args)\n    {\n        // Choose the appropriate configuration based on the environment\n        IConfiguration config = new DevelopmentConfiguration();\n        \n        // Inject the configuration into the service\n        MyService service = new MyService(config);\n        \n        service.PerformDatabaseOperation();\n    }\n}