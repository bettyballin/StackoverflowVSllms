using System;\nusing Org.BouncyCastle.Crypto;\nusing Org.BouncyCastle.Crypto.Engines;\nusing Org.BouncyCastle.Crypto.Parameters;\n\nclass Program\n{\n    static void Main()\n    {\n        byte[] response = new byte[6] { 0x00, 0x80, 0x01, 0x61, 0xF8, 0x17 };\n        byte[] key = new byte[8] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 }; // Use your key here\n\n        // Encrypt the last 4 bytes of the packet only (0x01, 0x61, 0xF8, 0x17)\n        BlowfishEncrypt(response, 2, response, 2, 4, key);\n\n        // Send the packet\n        // WS.sock.Send(response); // Uncomment and use appropriate socket send method\n        Console.WriteLine(BitConverter.ToString(response));\n    }\n\n    static void BlowfishEncrypt(byte[] input, int inputOffset, byte[] output, int outputOffset, int length, byte[] key)\n    {\n        if (length != 4)\n            throw new ArgumentException("Length must be 4 bytes for a single Blowfish block.");\n\n        IBufferedCipher cipher = new BufferedBlockCipher(new BlowfishEngine());\n        cipher.Init(true, new KeyParameter(key));\n\n        byte[] tempInput = new byte[8];\n        byte[] tempOutput = new byte[8];\n\n        Array.Copy(input, inputOffset, tempInput, 0, length);\n\n        cipher.DoFinal(tempInput, 0, tempInput.Length, tempOutput, 0);\n\n        Array.Copy(tempOutput, 0, output, outputOffset, length);\n    }\n}