using System;\nusing System.Runtime.InteropServices;\nusing System.Windows.Forms;\n\npublic class ScreenResolution\n{\n    [DllImport("user32.dll")]\n    private static extern int ChangeDisplaySettings(ref DEVMODE devMode, int flags);\n\n    [DllImport("user32.dll")]\n    private static extern bool EnumDisplaySettings(string deviceName, int modeNum, ref DEVMODE devMode);\n\n    private const int ENUM_CURRENT_SETTINGS = -1;\n    private const int CDS_UPDATEREGISTRY = 0x01;\n    private const int DISP_CHANGE_SUCCESSFUL = 0;\n\n    [StructLayout(LayoutKind.Sequential)]\n    private struct DEVMODE\n    {\n        private const int CCHDEVICENAME = 0x20;\n        private const int CCHFORMNAME = 0x20;\n\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = CCHDEVICENAME)]\n        public string dmDeviceName;\n        public short dmSpecVersion;\n        public short dmDriverVersion;\n        public short dmSize;\n        public short dmDriverExtra;\n        public int dmFields;\n\n        public int dmPositionX;\n        public int dmPositionY;\n        public int dmDisplayOrientation;\n        public int dmDisplayFixedOutput;\n\n        public short dmColor;\n        public short dmDuplex;\n        public short dmYResolution;\n        public short dmTTOption;\n        public short dmCollate;\n\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = CCHFORMNAME)]\n        public string dmFormName;\n        public short dmLogPixels;\n        public short dmBitsPerPel;\n        public int dmPelsWidth;\n        public int dmPelsHeight;\n        public int dmDisplayFlags;\n        public int dmDisplayFrequency;\n\n        public int dmICMMethod;\n        public int dmICMIntent;\n        public int dmMediaType;\n        public int dmDitherType;\n        public int dmReserved1;\n        public int dmReserved2;\n        public int dmPanningWidth;\n        public int dmPanningHeight;\n    }\n\n    public static void SetResolution(int width, int height)\n    {\n        DEVMODE dm = new DEVMODE();\n        dm.dmSize = (short)Marshal.SizeOf(typeof(DEVMODE));\n        if (0 != EnumDisplaySettings(null, ENUM_CURRENT_SETTINGS, ref dm))\n        {\n            dm.dmPelsWidth = width;\n            dm.dmPelsHeight = height;\n\n            int iRet = ChangeDisplaySettings(ref dm, CDS_UPDATEREGISTRY);\n\n            if (iRet != DISP_CHANGE_SUCCESSFUL)\n            {\n                MessageBox.Show("Unable to change resolution");\n            }\n        }\n    }\n\n    public static void Main()\n    {\n        // Detect primary monitor\n        Screen primaryMonitor = Screen.PrimaryScreen;\n\n        // Get the current resolution of the primary monitor\n        int currentWidth = primaryMonitor.Bounds.Width;\n        int currentHeight = primaryMonitor.Bounds.Height;\n\n        MessageBox.Show($"Primary Monitor Resolution: {currentWidth}x{currentHeight}");\n\n        // Set new resolution (example: 1920x1080)\n        SetResolution(1920, 1080);\n    }\n}