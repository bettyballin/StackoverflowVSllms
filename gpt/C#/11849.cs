using System;\nusing SuperSocket.SocketBase;\nusing SuperSocket.SocketBase.Protocol;\nusing SuperSocket.SocketEngine;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var appServer = new AppServer();\n\n        if (!appServer.Setup(2020)) // Setup with listening port\n        {\n            Console.WriteLine("Failed to setup!");\n            return;\n        }\n\n        appServer.NewSessionConnected += new SessionHandler<AppSession>(OnNewSessionConnected);\n        appServer.SessionClosed += new SessionHandler<AppSession, CloseReason>(OnSessionClosed);\n        appServer.NewRequestReceived += new RequestHandler<AppSession, StringRequestInfo>(OnNewRequestReceived);\n\n        if (!appServer.Start())\n        {\n            Console.WriteLine("Failed to start!");\n            return;\n        }\n\n        Console.WriteLine("The server started successfully, press key 'q' to stop it!");\n\n        while (Console.ReadKey().KeyChar != 'q')\n        {\n            Console.WriteLine();\n            continue;\n        }\n\n        appServer.Stop();\n\n        Console.WriteLine("The server was stopped!");\n    }\n\n    static void OnNewSessionConnected(AppSession session)\n    {\n        Console.WriteLine("New client connected: " + session.SessionID);\n    }\n\n    static void OnSessionClosed(AppSession session, CloseReason reason)\n    {\n        Console.WriteLine("Client disconnected: " + session.SessionID);\n    }\n\n    static void OnNewRequestReceived(AppSession session, StringRequestInfo requestInfo)\n    {\n        Console.WriteLine("Received request: " + requestInfo.Body);\n        session.Send("Response: " + requestInfo.Body);\n    }\n}