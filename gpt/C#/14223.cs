// Ensure connection pooling is enabled in your connection string\nstring connectionString = "your_connection_string;Pooling=true;";\n\n// Data storage class to accumulate data and periodically flush to the database\npublic class DataBatcher\n{\n    private List<AccelerationData> _buffer = new List<AccelerationData>();\n    private readonly object _lock = new object();\n\n    public void AddData(AccelerationData data)\n    {\n        lock (_lock)\n        {\n            _buffer.Add(data);\n            if (_buffer.Count >= 100) // Adjust batch size as needed\n            {\n                Flush();\n            }\n        }\n    }\n\n    public void Flush()\n    {\n        List<AccelerationData> batch;\n        lock (_lock)\n        {\n            batch = new List<AccelerationData>(_buffer);\n            _buffer.Clear();\n        }\n\n        if (batch.Count > 0)\n        {\n            using (SqlConnection conn = new SqlConnection(connectionString))\n            {\n                conn.Open();\n                using (SqlTransaction transaction = conn.BeginTransaction())\n                {\n                    foreach (var data in batch)\n                    {\n                        using (SqlCommand cmd = new SqlCommand("INSERT INTO acceleration (session_id, measurement_time, acceleration_x, acceleration_y, acceleration_z) VALUES (@sessionID, @measurementTime, @accelerationX, @accelerationY, @accelerationZ)", conn, transaction))\n                        {\n                            cmd.Parameters.AddWithValue("@sessionID", data.SessionID);\n                            cmd.Parameters.AddWithValue("@measurementTime", data.MeasurementTime);\n                            cmd.Parameters.AddWithValue("@accelerationX", data.AccelerationX);\n                            cmd.Parameters.AddWithValue("@accelerationY", data.AccelerationY);\n                            cmd.Parameters.AddWithValue("@accelerationZ", data.AccelerationZ);\n                            cmd.ExecuteNonQuery();\n                        }\n                    }\n                    transaction.Commit();\n                }\n            }\n        }\n    }\n}\n\npublic class AccelerationData\n{\n    public int SessionID { get; set; }\n    public DateTime MeasurementTime { get; set; }\n    public double AccelerationX { get; set; }\n    public double AccelerationY { get; set; }\n    public double AccelerationZ { get; set; }\n}\n\n// Example usage in your web service method\nprivate static DataBatcher _dataBatcher = new DataBatcher();\n\npublic Response StoreAcceleration(string strSessionString, string strMeasurementTime, string strAccelerationX, string strAccelerationY, string strAccelerationZ)\n{\n    Response response = new Response();\n    try\n    {\n        string strTime = strMeasurementTime.Replace("_", " ");\n        DateTime measurementTime = DateTime.ParseExact(strTime, "yyyy-MM-dd HH:mm:ss:fff", null);\n        double accelerationX = Convert.ToDouble(strAccelerationX.Replace(".", ","));\n        double accelerationY = Convert.ToDouble(strAccelerationY.Replace(".", ","));\n        double accelerationZ = Convert.ToDouble(strAccelerationZ.Replace(".", ","));\n\n        int sessionID = getSessionID(strSessionString);\n        if (sessionID == 0)\n        {\n            response.Successful = false;\n            response.Comment = "Invalid session!";\n            return response;\n        }\n\n        updateSessions(sessionID);\n\n        AccelerationData data = new AccelerationData\n        {\n            SessionID = sessionID,\n            MeasurementTime = measurementTime,\n            AccelerationX = accelerationX,\n            AccelerationY = accelerationY,\n            AccelerationZ = accelerationZ\n        };\n\n        _dataBatcher.AddData(data);\n\n        response.Successful = true;\n        response.Comment = "Stored!";\n    }\n    catch (Exception ex)\n    {\n        response.Comment = "An error occurred!";\n        response.Successful = false;\n    }\n\n    return response;\n}