using System;\nusing System.Collections.Generic;\n\npublic class MatrixGreatestValues\n{\n    public double[] GreatestValues(double[][] matrix, int numberOfElements)\n    {\n        if (matrix == null || matrix.Length == 0 || numberOfElements <= 0)\n        {\n            return new double[0];\n        }\n\n        int n = matrix.Length;\n        PriorityQueue<double, double> minHeap = new PriorityQueue<double, double>(numberOfElements, Comparer<double>.Default);\n\n        for (int i = 0; i < n; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                if (minHeap.Count < numberOfElements)\n                {\n                    minHeap.Enqueue(matrix[i][j], matrix[i][j]);\n                }\n                else if (matrix[i][j] > minHeap.Peek())\n                {\n                    minHeap.Dequeue();\n                    minHeap.Enqueue(matrix[i][j], matrix[i][j]);\n                }\n            }\n        }\n\n        double[] result = new double[numberOfElements];\n        for (int i = numberOfElements - 1; i >= 0; i--)\n        {\n            result[i] = minHeap.Dequeue();\n        }\n\n        return result;\n    }\n}