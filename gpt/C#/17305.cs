using UnityEngine;\n\npublic class VisionCheck : MonoBehaviour\n{\n    public Transform observer; // The object that is observing\n    public Transform target; // The object being observed\n    public float fieldOfView = 45f; // Field of view in degrees\n    public float viewRange = 10f; // Maximum view range\n\n    void Update()\n    {\n        if (CanSeeTarget(observer, target, fieldOfView, viewRange))\n        {\n            Debug.Log("Target is within vision!");\n            // Logic to follow the target\n        }\n        else\n        {\n            Debug.Log("Target is out of vision.");\n        }\n    }\n\n    bool CanSeeTarget(Transform observer, Transform target, float fieldOfView, float viewRange)\n    {\n        Vector3 directionToTarget = target.position - observer.position;\n        float distanceToTarget = directionToTarget.magnitude;\n\n        if (distanceToTarget > viewRange)\n        {\n            return false; // Target is out of range\n        }\n\n        directionToTarget.Normalize();\n        Vector3 observerForward = observer.forward;\n\n        float dotProduct = Vector3.Dot(observerForward, directionToTarget);\n        float angleToTarget = Mathf.Acos(dotProduct) * Mathf.Rad2Deg;\n\n        return angleToTarget <= fieldOfView / 2;\n    }\n}