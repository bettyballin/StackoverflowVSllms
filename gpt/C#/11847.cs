using System;\nusing System.Reflection;\n\npublic class MyProxy<T> : DispatchProxy\n{\n    private T _decorated;\n    private Action<MethodInfo, object[]> _beforeExecute;\n\n    public static T Create(T decorated, Action<MethodInfo, object[]> beforeExecute)\n    {\n        object proxy = Create<T, MyProxy<T>>();\n        ((MyProxy<T>)proxy).SetParameters(decorated, beforeExecute);\n        return (T)proxy;\n    }\n\n    private void SetParameters(T decorated, Action<MethodInfo, object[]> beforeExecute)\n    {\n        _decorated = decorated;\n        _beforeExecute = beforeExecute;\n    }\n\n    protected override object Invoke(MethodInfo targetMethod, object[] args)\n    {\n        _beforeExecute?.Invoke(targetMethod, args);\n        return targetMethod.Invoke(_decorated, args);\n    }\n}\n\npublic interface IMyInterface\n{\n    void MyMethod();\n}\n\npublic class MyClass : IMyInterface\n{\n    public void MyMethod()\n    {\n        Console.WriteLine("MyMethod executed");\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        IMyInterface original = new MyClass();\n        IMyInterface proxy = MyProxy<IMyInterface>.Create(original, (method, args) =>\n        {\n            Console.WriteLine("Before executing " + method.Name);\n        });\n\n        proxy.MyMethod();\n    }\n}