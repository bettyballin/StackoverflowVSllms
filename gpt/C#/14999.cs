using System.Reflection;\nusing NHibernate.Cfg;\n\npublic void ConfigureNHibernate(DatabaseType newDBType, string connectionString)\n{\n    Configuration cfg = new Configuration();\n\n    if (newDBType == DatabaseType.MsSqlServer)\n    {\n        cfg.Properties["dialect"] = "NHibernate.Dialect.MsSql2000Dialect";\n        cfg.Properties["connection.driver_class"] = "NHibernate.Driver.SqlClientDriver";\n        cfg.AddInputStream(Assembly.GetExecutingAssembly().GetManifestResourceStream("CompanyName.AppName.Data.DataTypes.MSSQLTypes.hbm.xml"));\n    }\n    else\n    {\n        cfg.Properties["dialect"] = "NHibernate.Dialect.Oracle9Dialect";\n        cfg.Properties["connection.driver_class"] = "NHibernate.Driver.OracleClientDriver";\n        cfg.AddInputStream(Assembly.GetExecutingAssembly().GetManifestResourceStream("CompanyName.AppName.Data.DataTypes.OracleTypes.hbm.xml"));\n    }\n\n    cfg.Properties["connection.provider"] = "NHibernate.Connection.DriverConnectionProvider";\n    cfg.Properties["connection.connection_string"] = connectionString;\n\n    // Adding the main mapping file\n    cfg.AddInputStream(Assembly.GetExecutingAssembly().GetManifestResourceStream("CompanyName.AppName.Data.DataTypes.Types.hbm.xml"));\n\n    // Build the session factory\n    var sessionFactory = cfg.BuildSessionFactory();\n}