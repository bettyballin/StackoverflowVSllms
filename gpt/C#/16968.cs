public static class SequencePrimitives\n{\n    public static IEnumerable<TResult> Map<TSource, TResult>(Func<TSource, TResult> func, IEnumerable<TSource> source)\n    {\n        foreach (var item in source)\n        {\n            yield return func(item);\n        }\n    }\n\n    public static TResult Foldr<TSource, TResult>(Func<TSource, TResult, TResult> func, TResult seed, IEnumerable<TSource> source)\n    {\n        var list = source.Reverse().ToList();\n        foreach (var item in list)\n        {\n            seed = func(item, seed);\n        }\n        return seed;\n    }\n\n    public static IEnumerable<T> Filter<T>(Func<T, bool> predicate, IEnumerable<T> source)\n    {\n        foreach (var item in source)\n        {\n            if (predicate(item))\n            {\n                yield return item;\n            }\n        }\n    }\n}