using System;\nusing Org.BouncyCastle.Asn1;\nusing Org.BouncyCastle.Asn1.X509;\nusing Org.BouncyCastle.Crypto;\nusing Org.BouncyCastle.Crypto.Generators;\nusing Org.BouncyCastle.Crypto.Prng;\nusing Org.BouncyCastle.Math;\nusing Org.BouncyCastle.Security;\nusing Org.BouncyCastle.X509;\n\npublic class CertificateGenerator\n{\n    public static X509Certificate GenerateSelfSignedCertificate(string subjectName)\n    {\n        var random = new SecureRandom(new CryptoApiRandomGenerator());\n        var keyGenerationParameters = new KeyGenerationParameters(random, 2048);\n        var keyPairGenerator = new RsaKeyPairGenerator();\n        keyPairGenerator.Init(keyGenerationParameters);\n        var keyPair = keyPairGenerator.GenerateKeyPair();\n\n        var certificateGenerator = new X509V3CertificateGenerator();\n        var serialNumber = BigInteger.ProbablePrime(120, new Random());\n        certificateGenerator.SetSerialNumber(serialNumber);\n        certificateGenerator.SetIssuerDN(new X509Name("CN=" + subjectName));\n        certificateGenerator.SetNotBefore(DateTime.UtcNow.Date);\n        certificateGenerator.SetNotAfter(DateTime.UtcNow.Date.AddYears(5));\n        certificateGenerator.SetSubjectDN(new X509Name("CN=" + subjectName));\n        certificateGenerator.SetPublicKey(keyPair.Public);\n        certificateGenerator.SetSignatureAlgorithm("SHA256WithRSA");\n\n        // Adding Basic Constraints for a Root CA certificate\n        certificateGenerator.AddExtension(X509Extensions.BasicConstraints, true, new BasicConstraints(true));\n\n        var certificate = certificateGenerator.Generate(keyPair.Private, random);\n        return certificate;\n    }\n}