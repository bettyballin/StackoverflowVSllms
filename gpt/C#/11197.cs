using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class EncryptionHelper\n{\n    private readonly string passPhrase;\n    private readonly string saltValue;\n    private readonly string initVector;\n\n    public EncryptionHelper()\n    {\n        // Retrieve sensitive data from environment variables\n        passPhrase = Environment.GetEnvironmentVariable("ENCRYPTION_PASSPHRASE");\n        saltValue = Environment.GetEnvironmentVariable("ENCRYPTION_SALT");\n        initVector = Environment.GetEnvironmentVariable("ENCRYPTION_INIT_VECTOR");\n\n        if (string.IsNullOrEmpty(passPhrase) || string.IsNullOrEmpty(saltValue) || string.IsNullOrEmpty(initVector))\n        {\n            throw new InvalidOperationException("Encryption parameters are not set in environment variables.");\n        }\n    }\n\n    public string Encrypt(string plainText)\n    {\n        // Encryption logic using the retrieved passPhrase, saltValue, and initVector\n        byte[] initVectorBytes = Encoding.UTF8.GetBytes(initVector);\n        byte[] saltValueBytes = Encoding.UTF8.GetBytes(saltValue);\n        byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);\n\n        using (PasswordDeriveBytes password = new PasswordDeriveBytes(passPhrase, saltValueBytes))\n        {\n            byte[] keyBytes = password.GetBytes(256 / 8);\n\n            using (RijndaelManaged symmetricKey = new RijndaelManaged())\n            {\n                symmetricKey.Mode = CipherMode.CBC;\n\n                using (ICryptoTransform encryptor = symmetricKey.CreateEncryptor(keyBytes, initVectorBytes))\n                {\n                    using (System.IO.MemoryStream memoryStream = new System.IO.MemoryStream())\n                    {\n                        using (CryptoStream cryptoStream = new CryptoStream(memoryStream, encryptor, CryptoStreamMode.Write))\n                        {\n                            cryptoStream.Write(plainTextBytes, 0, plainTextBytes.Length);\n                            cryptoStream.FlushFinalBlock();\n                            byte[] cipherTextBytes = memoryStream.ToArray();\n                            return Convert.ToBase64String(cipherTextBytes);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    public string Decrypt(string cipherText)\n    {\n        // Decryption logic using the retrieved passPhrase, saltValue, and initVector\n        byte[] initVectorBytes = Encoding.UTF8.GetBytes(initVector);\n        byte[] saltValueBytes = Encoding.UTF8.GetBytes(saltValue);\n        byte[] cipherTextBytes = Convert.FromBase64String(cipherText);\n\n        using (PasswordDeriveBytes password = new PasswordDeriveBytes(passPhrase, saltValueBytes))\n        {\n            byte[] keyBytes = password.GetBytes(256 / 8);\n\n            using (RijndaelManaged symmetricKey = new RijndaelManaged())\n            {\n                symmetricKey.Mode = CipherMode.CBC;\n\n                using (ICryptoTransform decryptor = symmetricKey.CreateDecryptor(keyBytes, initVectorBytes))\n                {\n                    using (System.IO.MemoryStream memoryStream = new System.IO.MemoryStream(cipherTextBytes))\n                    {\n                        using (CryptoStream cryptoStream = new CryptoStream(memoryStream, decryptor, CryptoStreamMode.Read))\n                        {\n                            byte[] plainTextBytes = new byte[cipherTextBytes.Length];\n                            int decryptedByteCount = cryptoStream.Read(plainTextBytes, 0, plainTextBytes.Length);\n                            return Encoding.UTF8.GetString(plainTextBytes, 0, decryptedByteCount);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}