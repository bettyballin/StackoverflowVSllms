using System;\nusing System.Windows.Forms;\nusing System.Drawing;\nusing System.Threading;\n\nclass Program\n{\n    static NotifyIcon notifyIcon;\n    static void Main()\n    {\n        Thread notifyThread = new Thread(() =>\n        {\n            notifyIcon = new NotifyIcon()\n            {\n                Icon = SystemIcons.Application,\n                Visible = true,\n                Text = "My Console Application"\n            };\n\n            MenuItem exitMenuItem = new MenuItem("Exit", Exit);\n            ContextMenu contextMenu = new ContextMenu(new MenuItem[] { exitMenuItem });\n            notifyIcon.ContextMenu = contextMenu;\n\n            Application.Run();\n        });\n\n        notifyThread.SetApartmentState(ApartmentState.STA);\n        notifyThread.Start();\n\n        Console.WriteLine("Press 'm' to minimize to tray or 'q' to quit.");\n        while (true)\n        {\n            var key = Console.ReadKey(true);\n            if (key.KeyChar == 'm')\n            {\n                Console.WriteLine("Minimized to tray.");\n                HideConsoleWindow();\n            }\n            else if (key.KeyChar == 'q')\n            {\n                notifyIcon.Dispose();\n                Environment.Exit(0);\n            }\n        }\n    }\n\n    static void HideConsoleWindow()\n    {\n        var handle = GetConsoleWindow();\n        ShowWindow(handle, SW_HIDE);\n    }\n\n    static void ShowConsoleWindow()\n    {\n        var handle = GetConsoleWindow();\n        ShowWindow(handle, SW_SHOW);\n    }\n\n    static void Exit(object sender, EventArgs e)\n    {\n        notifyIcon.Dispose();\n        Environment.Exit(0);\n    }\n\n    [System.Runtime.InteropServices.DllImport("kernel32.dll")]\n    private static extern IntPtr GetConsoleWindow();\n\n    [System.Runtime.InteropServices.DllImport("user32.dll")]\n    private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);\n\n    const int SW_HIDE = 0;\n    const int SW_SHOW = 5;\n}