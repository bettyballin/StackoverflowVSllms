public class RawPrinterHelper\n{\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]\n    public class DOCINFOA\n    {\n        [MarshalAs(UnmanagedType.LPStr)]\n        public string pDocName;\n        [MarshalAs(UnmanagedType.LPStr)]\n        public string pOutputFile;\n        [MarshalAs(UnmanagedType.LPStr)]\n        public string pDataType;\n    }\n\n    [DllImport("winspool.Drv", EntryPoint = "OpenPrinterA", SetLastError = true, CharSet = CharSet.Ansi, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]\n    public static extern bool OpenPrinter(string pPrinterName, out IntPtr phPrinter, IntPtr pDefault);\n\n    [DllImport("winspool.Drv", EntryPoint = "ClosePrinter", SetLastError = true, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]\n    public static extern bool ClosePrinter(IntPtr hPrinter);\n\n    [DllImport("winspool.Drv", EntryPoint = "StartDocPrinterA", SetLastError = true, CharSet = CharSet.Ansi, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]\n    public static extern bool StartDocPrinter(IntPtr hPrinter, int Level, [In, MarshalAs(UnmanagedType.LPStruct)] DOCINFOA pDocInfo);\n\n    [DllImport("winspool.Drv", EntryPoint = "EndDocPrinter", SetLastError = true, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]\n    public static extern bool EndDocPrinter(IntPtr hPrinter);\n\n    [DllImport("winspool.Drv", EntryPoint = "StartPagePrinter", SetLastError = true, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]\n    public static extern bool StartPagePrinter(IntPtr hPrinter);\n\n    [DllImport("winspool.Drv", EntryPoint = "EndPagePrinter", SetLastError = true, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]\n    public static extern bool EndPagePrinter(IntPtr hPrinter);\n\n    [DllImport("winspool.Drv", EntryPoint = "WritePrinter", SetLastError = true, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]\n    public static extern bool WritePrinter(IntPtr hPrinter, IntPtr pBytes, int dwCount, out int dwWritten);\n\n    public static bool SendBytesToPrinter(string szPrinterName, IntPtr pBytes, int dwCount)\n    {\n        IntPtr hPrinter = new IntPtr(0);\n        DOCINFOA di = new DOCINFOA();\n        int dwWritten = 0;\n        bool bSuccess = false;\n\n        di.pDocName = "My C# RAW Document";\n        di.pDataType = "RAW";\n\n        if (OpenPrinter(szPrinterName.Normalize(), out hPrinter, IntPtr.Zero))\n        {\n            if (StartDocPrinter(hPrinter, 1, di))\n            {\n                if (StartPagePrinter(hPrinter))\n                {\n                    bSuccess = WritePrinter(hPrinter, pBytes, dwCount, out dwWritten);\n                    EndPagePrinter(hPrinter);\n                }\n                EndDocPrinter(hPrinter);\n            }\n            ClosePrinter(hPrinter);\n        }\n        if (!bSuccess)\n        {\n            throw new ApplicationException($"Failed to send data to printer. Error code: {Marshal.GetLastWin32Error()}");\n        }\n        return bSuccess;\n    }\n\n    public static bool SendStringToPrinter(string szPrinterName, string szString)\n    {\n        IntPtr pBytes;\n        int dwCount;\n        dwCount = szString.Length;\n        pBytes = Marshal.StringToCoTaskMemAnsi(szString);\n        bool result = SendBytesToPrinter(szPrinterName, pBytes, dwCount);\n        Marshal.FreeCoTaskMem(pBytes);\n        return result;\n    }\n}