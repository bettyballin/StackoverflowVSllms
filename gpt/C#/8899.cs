using System;\nusing System.Reflection;\n\nclass Program\n{\n    static void Main()\n    {\n        // Get the current AppDomain\n        AppDomain currentDomain = AppDomain.CurrentDomain;\n\n        // Subscribe to the AssemblyLoad event to catch when assemblies are loaded\n        currentDomain.AssemblyLoad += (sender, args) =>\n        {\n            Console.WriteLine("Assembly loaded: " + args.LoadedAssembly.FullName);\n        };\n\n        // List all AppDomains in the current process\n        AppDomain[] appDomains = GetAppDomains();\n        foreach (var appDomain in appDomains)\n        {\n            Console.WriteLine("AppDomain: " + appDomain.FriendlyName);\n        }\n    }\n\n    public static AppDomain[] GetAppDomains()\n    {\n        // Use reflection to access the internal _appDomain field in the AppDomainManager\n        Type appDomainManagerType = typeof(AppDomainManager);\n        FieldInfo appDomainManagerField = appDomainManagerType.GetField("_appDomain", BindingFlags.NonPublic | BindingFlags.Instance);\n        AppDomainManager appDomainManager = (AppDomainManager)appDomainManagerField.GetValue(AppDomain.CurrentDomain);\n\n        // Use reflection to access the internal GetAppDomains method\n        MethodInfo getAppDomainsMethod = appDomainManagerType.GetMethod("GetAppDomains", BindingFlags.NonPublic | BindingFlags.Instance);\n        return (AppDomain[])getAppDomainsMethod.Invoke(appDomainManager, null);\n    }\n}