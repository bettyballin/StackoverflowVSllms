using System;\nusing System.Net;\nusing System.Net.Sockets;\n\npublic class TimeSync\n{\n    public static DateTime GetNetworkTime()\n    {\n        // NTP server address\n        const string ntpServer = "time.windows.com";\n\n        // NTP message size - 16 bytes of the digest (RFC 2030)\n        var ntpData = new byte[48];\n\n        // Setting the Leap Indicator, Version Number and Mode values\n        ntpData[0] = 0x1B;\n\n        var addresses = Dns.GetHostEntry(ntpServer).AddressList;\n        var ipEndPoint = new IPEndPoint(addresses[0], 123);\n        var socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);\n\n        socket.Connect(ipEndPoint);\n        socket.Send(ntpData);\n        socket.Receive(ntpData);\n        socket.Close();\n\n        // Offset to get to the "Transmit Timestamp" field (time at which the reply\n        // departed the server for the client, in 64-bit timestamp format)\n        const byte serverReplyTime = 40;\n\n        // Get the seconds part\n        ulong intPart = BitConverter.ToUInt32(ntpData, serverReplyTime);\n        // Get the seconds fraction\n        ulong fractPart = BitConverter.ToUInt32(ntpData, serverReplyTime + 4);\n\n        // Convert from big-endian to little-endian\n        intPart = SwapEndianness(intPart);\n        fractPart = SwapEndianness(fractPart);\n\n        var milliseconds = (intPart * 1000 + (fractPart * 1000) / 0x100000000L);\n\n        // UTC time\n        var networkDateTime = (new DateTime(1900, 1, 1)).AddMilliseconds((long)milliseconds);\n\n        return networkDateTime.ToLocalTime();\n    }\n\n    private static uint SwapEndianness(ulong x)\n    {\n        return (uint)(((x & 0x000000ff) << 24) + ((x & 0x0000ff00) << 8) +\n                      ((x & 0x00ff0000) >> 8) + ((x & 0xff000000) >> 24));\n    }\n\n    public static void SyncTime()\n    {\n        DateTime networkTime = GetNetworkTime();\n        // Set the system time\n        SetSystemTime(networkTime);\n    }\n\n    [System.Runtime.InteropServices.DllImport("coredll.dll")]\n    private static extern bool SetSystemTime(ref SYSTEMTIME time);\n\n    private static void SetSystemTime(DateTime dateTime)\n    {\n        SYSTEMTIME st = new SYSTEMTIME\n        {\n            wYear = (ushort)dateTime.Year,\n            wMonth = (ushort)dateTime.Month,\n            wDay = (ushort)dateTime.Day,\n            wHour = (ushort)dateTime.Hour,\n            wMinute = (ushort)dateTime.Minute,\n            wSecond = (ushort)dateTime.Second,\n            wMilliseconds = (ushort)dateTime.Millisecond\n        };\n\n        SetSystemTime(ref st);\n    }\n\n    [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]\n    private struct SYSTEMTIME\n    {\n        public ushort wYear;\n        public ushort wMonth;\n        public ushort wDayOfWeek;\n        public ushort wDay;\n        public ushort wHour;\n        public ushort wMinute;\n        public ushort wSecond;\n        public ushort wMilliseconds;\n    }\n}