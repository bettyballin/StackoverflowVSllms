using System;\nusing System.IO;\nusing System.Linq;\nusing System.Reflection;\nusing System.Xml.Linq;\n\npublic class XmlDocumentationReader\n{\n    public static string GetXmlDocumentationPath(Assembly assembly)\n    {\n        var assemblyPath = assembly.Location;\n        var xmlDocPath = Path.ChangeExtension(assemblyPath, ".xml");\n        return File.Exists(xmlDocPath) ? xmlDocPath : null;\n    }\n\n    public static string GetMemberXmlDocumentation(Type type, string memberName)\n    {\n        var xmlDocPath = GetXmlDocumentationPath(type.Assembly);\n        if (xmlDocPath == null)\n        {\n            return null;\n        }\n\n        var xdoc = XDocument.Load(xmlDocPath);\n        var memberElement = xdoc.Descendants("member")\n            .FirstOrDefault(m => m.Attribute("name")?.Value == $"M:{type.FullName}.{memberName}");\n\n        return memberElement?.Element("summary")?.Value.Trim();\n    }\n\n    public static void Main(string[] args)\n    {\n        var type = typeof(MyClass); // Replace with your custom type\n        var memberName = "MyMethod"; // Replace with your method name\n\n        var documentation = GetMemberXmlDocumentation(type, memberName);\n        if (documentation != null)\n        {\n            Console.WriteLine($"Documentation for {memberName}: {documentation}");\n        }\n        else\n        {\n            Console.WriteLine($"No documentation found for {memberName}");\n        }\n    }\n}\n\npublic class MyClass\n{\n    /// <summary>\n    /// This is a sample method.\n    /// </summary>\n    public void MyMethod()\n    {\n    }\n}