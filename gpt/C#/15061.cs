using System;\nusing System.Globalization;\n\npublic class PaddedStringFormatInfo : IFormatProvider, ICustomFormatter\n{\n    public object GetFormat(Type formatType)\n    {\n        if (formatType == typeof(ICustomFormatter))\n            return this;\n        return null;\n    }\n\n    public string Format(string format, object arg, IFormatProvider formatProvider)\n    {\n        if (arg == null || format == null)\n            return string.Format("{0}", arg);\n\n        int padding;\n        char padChar = ' ';\n        bool padLeft = true;\n\n        string[] formatParts = format.Split(':');\n        if (formatParts.Length > 1)\n        {\n            format = formatParts[0];\n            string[] padParts = formatParts[1].Split(new char[] { 'L', 'R' }, StringSplitOptions.RemoveEmptyEntries);\n            if (padParts.Length == 2)\n            {\n                padding = int.Parse(padParts[0]);\n                padChar = padParts[1][0];\n                padLeft = formatParts[1].Contains("L");\n            }\n            else\n            {\n                padding = int.Parse(formatParts[1]);\n            }\n        }\n        else\n        {\n            padding = int.Parse(format);\n        }\n\n        string result = arg.ToString();\n        if (padLeft)\n        {\n            result = result.PadLeft(padding, padChar);\n        }\n        else\n        {\n            result = result.PadRight(padding, padChar);\n        }\n\n        return result;\n    }\n}\n\npublic class Program\n{\n    static void Main()\n    {\n        string paddedLeft = string.Format(new PaddedStringFormatInfo(), "->{0:20:x}<-", "hello");\n        string paddedRight = string.Format(new PaddedStringFormatInfo(), "->{0:-20:x}<-", "hello");\n\n        Console.WriteLine(paddedLeft);  // Output: ->xxxxxxxxxxxxxxxhello<-\n        Console.WriteLine(paddedRight); // Output: ->helloxxxxxxxxxxxxxxx<-\n    }\n}