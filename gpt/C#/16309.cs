using System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\n\npublic partial class YourDialog : Window\n{\n    public YourDialog()\n    {\n        InitializeComponent();\n    }\n\n    private void OkButton_Click(object sender, RoutedEventArgs e)\n    {\n        if (ValidateAllControls())\n        {\n            // All validations passed\n            DialogResult = true;\n        }\n        else\n        {\n            // Validation failed\n            MessageBox.Show("Please correct the errors before proceeding.", "Validation Error", MessageBoxButton.OK, MessageBoxImage.Error);\n        }\n    }\n\n    private bool ValidateAllControls()\n    {\n        bool allValid = true;\n\n        foreach (var control in GetLogicalChildCollection<Control>(this))\n        {\n            if (control is TextBox || control is ComboBox)\n            {\n                BindingExpression binding = control.GetBindingExpression(TextBox.TextProperty);\n                if (binding != null)\n                {\n                    binding.UpdateSource();\n                    if (Validation.GetHasError(control))\n                    {\n                        allValid = false;\n                    }\n                }\n            }\n        }\n\n        return allValid;\n    }\n\n    private static List<T> GetLogicalChildCollection<T>(object parent) where T : DependencyObject\n    {\n        var logicalCollection = new List<T>();\n        GetLogicalChildCollection(parent as DependencyObject, logicalCollection);\n        return logicalCollection;\n    }\n\n    private static void GetLogicalChildCollection<T>(DependencyObject parent, List<T> logicalCollection) where T : DependencyObject\n    {\n        IEnumerable children = LogicalTreeHelper.GetChildren(parent);\n        foreach (object child in children)\n        {\n            if (child is DependencyObject)\n            {\n                DependencyObject depChild = child as DependencyObject;\n                if (child is T)\n                {\n                    logicalCollection.Add(child as T);\n                }\n                GetLogicalChildCollection(depChild, logicalCollection);\n            }\n        }\n    }\n}