using System;\n\npublic class TraceEventArgs : EventArgs\n{\n    public DateTime Timestamp { get; }\n    public string Message { get; }\n    public object AdditionalData { get; }\n\n    public TraceEventArgs(string message, object additionalData = null)\n    {\n        Timestamp = DateTime.Now;\n        Message = message;\n        AdditionalData = additionalData;\n    }\n}\n\npublic class Tracer\n{\n    // Define the event using EventHandler<T>\n    public event EventHandler<TraceEventArgs> NewEventRegistered;\n\n    // Method to raise the event\n    public void RegisterEvent(string message, object additionalData = null)\n    {\n        OnNewEventRegistered(new TraceEventArgs(message, additionalData));\n    }\n\n    // Protected method to raise the event\n    protected virtual void OnNewEventRegistered(TraceEventArgs e)\n    {\n        NewEventRegistered?.Invoke(this, e);\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        Tracer tracer = new Tracer();\n\n        // Subscribe to the event\n        tracer.NewEventRegistered += (sender, e) =>\n        {\n            Console.WriteLine($"[{e.Timestamp}] {e.Message}");\n            if (e.AdditionalData != null)\n            {\n                Console.WriteLine($"Additional Data: {e.AdditionalData}");\n            }\n        };\n\n        // Trigger some events\n        tracer.RegisterEvent("Event 1 occurred");\n        tracer.RegisterEvent("Event 2 occurred", new { Detail = "Some additional data" });\n    }\n}