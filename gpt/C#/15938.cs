using Moq;\nusing Xunit;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Security.Claims;\nusing YourNamespace.Controllers;\n\npublic class YourControllerTest\n{\n    [Fact]\n    public void YourAction_UserIsAuthenticated_ReturnsExpectedResult()\n    {\n        // Arrange\n        var user = new ClaimsPrincipal(new ClaimsIdentity(new Claim[]\n        {\n            new Claim(ClaimTypes.Name, "testuser"),\n            new Claim(ClaimTypes.NameIdentifier, "1"),\n            new Claim("custom-claim", "claim-value"),\n        }, "mock"));\n\n        var httpContext = new Mock<HttpContext>();\n        httpContext.Setup(x => x.User).Returns(user);\n\n        var controllerContext = new ControllerContext()\n        {\n            HttpContext = httpContext.Object\n        };\n\n        var controller = new YourController()\n        {\n            ControllerContext = controllerContext\n        };\n\n        // Act\n        var result = controller.YourAction();\n\n        // Assert\n        Assert.IsType<ExpectedActionResultType>(result);\n        // Additional assertions as necessary\n    }\n\n    [Fact]\n    public void YourAction_UserIsNotAuthenticated_ReturnsExpectedResult()\n    {\n        // Arrange\n        var httpContext = new Mock<HttpContext>();\n        httpContext.Setup(x => x.User).Returns(new ClaimsPrincipal(new ClaimsIdentity()));\n\n        var controllerContext = new ControllerContext()\n        {\n            HttpContext = httpContext.Object\n        };\n\n        var controller = new YourController()\n        {\n            ControllerContext = controllerContext\n        };\n\n        // Act\n        var result = controller.YourAction();\n\n        // Assert\n        Assert.IsType<ExpectedActionResultType>(result);\n        // Additional assertions as necessary\n    }\n}