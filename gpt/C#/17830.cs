using System;\nusing System.Collections.Generic;\n\npublic class Range<T>\n{\n    public T Start { get; }\n    public T End { get; }\n\n    private Range(T start, T end)\n    {\n        Start = start;\n        End = end;\n    }\n\n    public static Range<T> Create(T start, T end)\n    {\n        return new Range<T>(start, end);\n    }\n}\n\npublic static class RangeGenerator\n{\n    private static void Swap(ref int a, ref int b)\n    {\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n\n    public static IEnumerable<Range<int>> GenerateRanges(int count = 10000, int maxRangeStart = 10000, int maxRangeLength = 1000)\n    {\n        var r = new Random();\n        for (int i = 0; i < count; i++)\n        {\n            var start = r.Next(maxRangeStart);\n            // Ensuring that ranges can have various lengths, some of which might overlap\n            var length = r.Next(maxRangeLength);\n            var end = start + length;\n\n            yield return Range<int>.Create(start, end);\n        }\n    }\n}\n\n// Example usage\npublic static class Program\n{\n    public static void Main()\n    {\n        var ranges = RangeGenerator.GenerateRanges();\n        foreach (var range in ranges)\n        {\n            Console.WriteLine($"Range: {range.Start} - {range.End}");\n        }\n    }\n}