using System;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\nusing System.Text;\nusing System.Threading;\n\npublic class DebugViewListener : IDisposable\n{\n    private const int WM_CLOSE = 0x0010;\n    private const int WM_COPYDATA = 0x004A;\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct COPYDATASTRUCT\n    {\n        public IntPtr dwData;\n        public int cbData;\n        public IntPtr lpData;\n    }\n\n    [DllImport("user32.dll")]\n    private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);\n\n    [DllImport("user32.dll")]\n    private static extern int SendMessage(IntPtr hWnd, int Msg, IntPtr wParam, IntPtr lParam);\n\n    [DllImport("kernel32.dll")]\n    private static extern void OutputDebugString(string lpOutputString);\n\n    private Thread listenerThread;\n    private bool listening;\n\n    public event Action<string> MessageReceived;\n\n    public DebugViewListener()\n    {\n        listening = true;\n        listenerThread = new Thread(Listen);\n        listenerThread.Start();\n    }\n\n    private void Listen()\n    {\n        IntPtr debugWindowHandle = FindWindow(null, "DBWIN_BUFFER");\n\n        if (debugWindowHandle != IntPtr.Zero)\n        {\n            while (listening)\n            {\n                // Simulate receiving debug messages.\n                // This part should be replaced with actual code to read from the debug output buffer.\n                string message = "Debug message example";\n                MessageReceived?.Invoke(message);\n                Thread.Sleep(1000); // Simulate delay between messages\n            }\n        }\n    }\n\n    public void Dispose()\n    {\n        listening = false;\n        listenerThread?.Join();\n    }\n}