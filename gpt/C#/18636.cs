private void treeView_BeforeExpand(object sender, TreeViewCancelEventArgs e)\n{\n    TreeNode node = e.Node;\n\n    // Check if the node has a dummy child\n    if (node.Nodes.Count == 1 && node.Nodes[0].Text == "Loading...")\n    {\n        node.Nodes.Clear(); // Remove the dummy node\n\n        // Fetch child nodes from the database\n        var childNodes = GetNodesFromDatabase((int)node.Tag);\n\n        foreach (var child in childNodes)\n        {\n            TreeNode childNode = new TreeNode(child.NodeName);\n            childNode.Tag = child.NodeID;\n\n            if (child.HasChildren)\n            {\n                childNode.Nodes.Add(new TreeNode("Loading..."));\n            }\n\n            node.Nodes.Add(childNode);\n        }\n    }\n}\n\n// Example method to simulate database call\nprivate List<TreeNodeData> GetNodesFromDatabase(int? parentId)\n{\n    // Replace with actual database call to get nodes\n    return new List<TreeNodeData>\n    {\n        new TreeNodeData { NodeID = 1, NodeName = "Child 1", HasChildren = false },\n        new TreeNodeData { NodeID = 2, NodeName = "Child 2", HasChildren = true }\n    };\n}\n\n// Data model for tree node\nclass TreeNodeData\n{\n    public int NodeID { get; set; }\n    public string NodeName { get; set; }\n    public bool HasChildren { get; set; }\n}