public class Customer\n{\n    public Guid CustomerId { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n\n    // Navigation property to the stores (many-to-many)\n    public ICollection<CustomerStore> CustomerStores { get; set; }\n}\n\npublic class Store\n{\n    public Guid StoreId { get; set; }\n    public string StoreName { get; set; }\n    public Guid? TopCustomerId { get; set; }\n\n    // Navigation property to the top customer\n    public Customer TopCustomer { get; set; }\n\n    // Navigation property to the customers (many-to-many)\n    public ICollection<CustomerStore> CustomerStores { get; set; }\n}\n\npublic class CustomerStore\n{\n    public Guid CustomerId { get; set; }\n    public Customer Customer { get; set; }\n\n    public Guid StoreId { get; set; }\n    public Store Store { get; set; }\n}\n\npublic class YourDbContext : DbContext\n{\n    public DbSet<Customer> Customers { get; set; }\n    public DbSet<Store> Stores { get; set; }\n    public DbSet<CustomerStore> CustomerStores { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<Customer>()\n            .HasKey(c => c.CustomerId);\n\n        modelBuilder.Entity<Store>()\n            .HasKey(s => s.StoreId);\n\n        modelBuilder.Entity<CustomerStore>()\n            .HasKey(cs => new { cs.CustomerId, cs.StoreId });\n\n        modelBuilder.Entity<CustomerStore>()\n            .HasOne(cs => cs.Customer)\n            .WithMany(c => c.CustomerStores)\n            .HasForeignKey(cs => cs.CustomerId);\n\n        modelBuilder.Entity<CustomerStore>()\n            .HasOne(cs => cs.Store)\n            .WithMany(s => s.CustomerStores)\n            .HasForeignKey(cs => cs.StoreId);\n\n        modelBuilder.Entity<Store>()\n            .HasOne(s => s.TopCustomer)\n            .WithMany()\n            .HasForeignKey(s => s.TopCustomerId)\n            .OnDelete(DeleteBehavior.Restrict);\n    }\n}