using System;\nusing System.Threading.Tasks;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\n[TestClass]\npublic class EventHandlingTests\n{\n    private class EventRaiser\n    {\n        public event EventHandler SomethingHappened;\n        \n        public void RaiseEvent()\n        {\n            SomethingHappened?.Invoke(this, EventArgs.Empty);\n        }\n    }\n\n    [TestMethod]\n    public async Task TestEventHandling()\n    {\n        // Arrange\n        var eventRaiser = new EventRaiser();\n        var tcs = new TaskCompletionSource<bool>();\n\n        eventRaiser.SomethingHappened += (sender, args) =>\n        {\n            tcs.SetResult(true);\n        };\n\n        // Act\n        eventRaiser.RaiseEvent();\n\n        // Assert\n        var eventWasHandled = await tcs.Task.TimeoutAfter(TimeSpan.FromSeconds(5));\n        Assert.IsTrue(eventWasHandled, "The expected event was not handled within the timeout period.");\n    }\n}\n\npublic static class TaskExtensions\n{\n    public static async Task<T> TimeoutAfter<T>(this Task<T> task, TimeSpan timeout)\n    {\n        if (await Task.WhenAny(task, Task.Delay(timeout)) == task)\n        {\n            return await task;\n        }\n        else\n        {\n            throw new TimeoutException("The operation has timed out.");\n        }\n    }\n}