public class ComObjectCache\n{\n    private static readonly object CacheLock = new object();\n    private static readonly Dictionary<string, ComObjectWrapper> Cache = new Dictionary<string, ComObjectWrapper>();\n\n    public static ComObjectWrapper GetOrCreate(string userId, Func<ComObjectWrapper> createComObject)\n    {\n        lock (CacheLock)\n        {\n            if (!Cache.TryGetValue(userId, out var comObject))\n            {\n                comObject = createComObject();\n                Cache[userId] = comObject;\n            }\n            return comObject;\n        }\n    }\n\n    public static void Remove(string userId)\n    {\n        lock (CacheLock)\n        {\n            if (Cache.TryGetValue(userId, out var comObject))\n            {\n                // Ensure proper disposal of the COM object\n                comObject.Dispose();\n                Cache.Remove(userId);\n            }\n        }\n    }\n}\n\npublic class ComObjectWrapper : IDisposable\n{\n    private readonly dynamic _comObject;\n\n    public ComObjectWrapper()\n    {\n        // Initialize your COM object\n        _comObject = Activator.CreateInstance(Type.GetTypeFromProgID("YourComObject.ProgID"));\n    }\n\n    // Implement IDisposable to clean up the COM object\n    public void Dispose()\n    {\n        if (_comObject != null)\n        {\n            System.Runtime.InteropServices.Marshal.ReleaseComObject(_comObject);\n        }\n    }\n\n    // Provide methods to interact with the COM object\n    public void DoSomething()\n    {\n        _comObject.SomeMethod();\n    }\n}