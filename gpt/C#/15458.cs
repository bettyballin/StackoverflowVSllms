[DiagnosticAnalyzer(LanguageNames.VisualBasic)]\n    public class SampleAnalyzer : DiagnosticAnalyzer\n    {\n        private static readonly DiagnosticDescriptor Rule = new DiagnosticDescriptor(\n            "ID001",\n            "Method naming",\n            "Method '{0}' doesn't follow naming conventions",\n            "Naming",\n            DiagnosticSeverity.Warning,\n            isEnabledByDefault: true);\n\n        public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics => ImmutableArray.Create(Rule);\n\n        public override void Initialize(AnalysisContext context)\n        {\n            context.ConfigureGeneratedCodeAnalysis(GeneratedCodeAnalysisFlags.None);\n            context.EnableConcurrentExecution();\n\n            context.RegisterSyntaxNodeAction(AnalyzeMethod, SyntaxKind.SubStatement, SyntaxKind.FunctionStatement);\n        }\n\n        private static void AnalyzeMethod(SyntaxNodeAnalysisContext context)\n        {\n            var methodDeclaration = (MethodStatementSyntax)context.Node;\n\n            // Example: Check if method name starts with an uppercase letter\n            var methodName = methodDeclaration.Identifier.Text;\n            if (!char.IsUpper(methodName[0]))\n            {\n                var diagnostic = Diagnostic.Create(Rule, methodDeclaration.Identifier.GetLocation(), methodName);\n                context.ReportDiagnostic(diagnostic);\n            }\n        }\n    }