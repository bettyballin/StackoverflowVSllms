using System;\n   using System.IO;\n   using System.Security.Cryptography;\n\n   public static void EncryptFile(string inputFile, string outputFile, string password)\n   {\n       byte[] salt = GenerateSalt();\n       using (FileStream fsCrypt = new FileStream(outputFile, FileMode.Create))\n       {\n           byte[] passwordBytes = System.Text.Encoding.UTF8.GetBytes(password);\n           using (RijndaelManaged AES = new RijndaelManaged())\n           {\n               AES.KeySize = 256;\n               AES.BlockSize = 128;\n               var key = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);\n               AES.Key = key.GetBytes(AES.KeySize / 8);\n               AES.IV = key.GetBytes(AES.BlockSize / 8);\n               AES.Padding = PaddingMode.PKCS7;\n\n               fsCrypt.Write(salt, 0, salt.Length);\n\n               using (var cs = new CryptoStream(fsCrypt, AES.CreateEncryptor(), CryptoStreamMode.Write))\n               {\n                   using (FileStream fsIn = new FileStream(inputFile, FileMode.Open))\n                   {\n                       byte[] buffer = new byte[1048576];\n                       int read;\n                       try\n                       {\n                           while ((read = fsIn.Read(buffer, 0, buffer.Length)) > 0)\n                           {\n                               cs.Write(buffer, 0, read);\n                           }\n                       }\n                       catch (Exception ex)\n                       {\n                           Console.WriteLine("Error: " + ex.Message);\n                       }\n                   }\n               }\n           }\n       }\n   }\n\n   private static byte[] GenerateSalt()\n   {\n       byte[] data = new byte[32];\n       using (var rng = new RNGCryptoServiceProvider())\n       {\n           rng.GetBytes(data);\n       }\n       return data;\n   }