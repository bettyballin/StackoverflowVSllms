private void dataGridView1_CellValidating(object sender, DataGridViewCellValidatingEventArgs e)\n{\n    string headerText = dataGridView1.Columns[e.ColumnIndex].HeaderText;\n\n    // Example: Validate the "Name" column to ensure it is not empty\n    if (headerText.Equals("Name"))\n    {\n        if (string.IsNullOrEmpty(e.FormattedValue.ToString()))\n        {\n            dataGridView1.Rows[e.RowIndex].ErrorText = "Name must not be empty";\n            e.Cancel = true; // Cancel the cell editing\n        }\n    }\n\n    // Example: Validate the "Age" column to ensure it is an integer\n    if (headerText.Equals("Age"))\n    {\n        if (!int.TryParse(e.FormattedValue.ToString(), out _))\n        {\n            dataGridView1.Rows[e.RowIndex].ErrorText = "Age must be a number";\n            e.Cancel = true; // Cancel the cell editing\n        }\n    }\n}\n\nprivate void dataGridView1_RowValidating(object sender, DataGridViewCellCancelEventArgs e)\n{\n    DataGridViewRow row = dataGridView1.Rows[e.RowIndex];\n\n    // Example: Ensure "Name" column is not empty\n    if (string.IsNullOrEmpty(row.Cells["Name"].FormattedValue.ToString()))\n    {\n        row.ErrorText = "Name must not be empty";\n        e.Cancel = true; // Cancel the row edit\n    }\n\n    // Example: Ensure "Age" column is a valid integer\n    if (!int.TryParse(row.Cells["Age"].FormattedValue.ToString(), out _))\n    {\n        row.ErrorText = "Age must be a number";\n        e.Cancel = true; // Cancel the row edit\n    }\n}\n\nprivate void dataGridView1_DataError(object sender, DataGridViewDataErrorEventArgs e)\n{\n    // Handle data errors here\n    MessageBox.Show("Invalid data entered: " + e.Exception.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);\n    e.ThrowException = false; // Prevent the exception from being thrown\n}