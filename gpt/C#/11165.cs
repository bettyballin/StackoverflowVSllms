public string Encrypt(byte[] plainTextBytes, byte[] keyBytes, string initialVector)\n{\n    byte[] initialVectorBytes = Encoding.UTF8.GetBytes(initialVector);\n    using (RijndaelManaged symmetricKey = new RijndaelManaged())\n    {\n        symmetricKey.Mode = CipherMode.CBC;\n        symmetricKey.Padding = PaddingMode.PKCS7; // PKCS7 is correct for AES\n\n        using (ICryptoTransform encryptor = symmetricKey.CreateEncryptor(keyBytes, initialVectorBytes))\n        using (MemoryStream memStream = new MemoryStream())\n        using (CryptoStream cryptoStream = new CryptoStream(memStream, encryptor, CryptoStreamMode.Write))\n        {\n            cryptoStream.Write(plainTextBytes, 0, plainTextBytes.Length);\n            cryptoStream.FlushFinalBlock();\n            \n            byte[] cipherTextBytes = memStream.ToArray();\n            return ByteToHexConversion(cipherTextBytes);\n        }\n    }\n}\n\nprivate string ByteToHexConversion(byte[] byteArray)\n{\n    StringBuilder hex = new StringBuilder(byteArray.Length * 2);\n    foreach (byte b in byteArray)\n    {\n        hex.AppendFormat("{0:x2}", b);\n    }\n    return hex.ToString();\n}