public class AccountController : Controller\n{\n    private readonly ApplicationDbContext _context;\n\n    public AccountController(ApplicationDbContext context)\n    {\n        _context = context;\n    }\n\n    [HttpPost]\n    public async Task<IActionResult> RequestPasswordReset(string email)\n    {\n        var user = await _context.Users.SingleOrDefaultAsync(u => u.Email == email);\n        if (user == null) return BadRequest("Invalid email.");\n\n        var token = GenerateSecureToken();\n        var expirationTime = GetTokenExpirationTime();\n\n        var resetToken = new PasswordResetToken\n        {\n            UserId = user.Id,\n            Token = token,\n            ExpirationTime = expirationTime\n        };\n\n        _context.PasswordResetTokens.Add(resetToken);\n        await _context.SaveChangesAsync();\n\n        // Send email with reset link containing the token\n        // e.g., http://yourapp.com/Account/ResetPassword?token=token\n\n        return Ok("Password reset link has been sent to your email.");\n    }\n\n    [HttpGet]\n    public IActionResult ResetPassword(string token)\n    {\n        // Show reset password form\n        return View(model: token);\n    }\n\n    [HttpPost]\n    public async Task<IActionResult> ResetPassword(string token, string newPassword)\n    {\n        var resetToken = await _context.PasswordResetTokens\n            .SingleOrDefaultAsync(t => t.Token == token && t.ExpirationTime > DateTime.UtcNow);\n        \n        if (resetToken == null) return BadRequest("Invalid or expired token.");\n\n        var user = await _context.Users.FindAsync(resetToken.UserId);\n        if (user == null) return BadRequest("User not found.");\n\n        // Update user password (hash the new password)\n        user.PasswordHash = HashPassword(newPassword);\n        await _context.SaveChangesAsync();\n\n        return Ok("Password has been reset successfully.");\n    }\n}