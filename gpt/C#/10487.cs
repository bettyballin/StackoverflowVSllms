using System;\nusing System.IO;\nusing System.Runtime.InteropServices;\nusing System.Runtime.InteropServices.ComTypes;\n\npublic class ComStream : Stream\n{\n    private IStream _comStream;\n\n    public ComStream(IStream comStream)\n    {\n        _comStream = comStream;\n    }\n\n    public override bool CanRead => true;\n    public override bool CanSeek => true;\n    public override bool CanWrite => true;\n\n    public override long Length\n    {\n        get\n        {\n            STATSTG statstg;\n            _comStream.Stat(out statstg, 1);\n            return statstg.cbSize;\n        }\n    }\n\n    public override long Position\n    {\n        get\n        {\n            return Seek(0, SeekOrigin.Current);\n        }\n        set\n        {\n            Seek(value, SeekOrigin.Begin);\n        }\n    }\n\n    public override void Flush()\n    {\n        _comStream.Commit(0);\n    }\n\n    public override int Read(byte[] buffer, int offset, int count)\n    {\n        if (offset != 0)\n        {\n            throw new NotSupportedException("Offsets other than zero are not supported.");\n        }\n\n        IntPtr bytesReadPtr = Marshal.AllocHGlobal(sizeof(int));\n        try\n        {\n            _comStream.Read(buffer, count, bytesReadPtr);\n            return Marshal.ReadInt32(bytesReadPtr);\n        }\n        finally\n        {\n            Marshal.FreeHGlobal(bytesReadPtr);\n        }\n    }\n\n    public override long Seek(long offset, SeekOrigin origin)\n    {\n        IntPtr posPtr = Marshal.AllocHGlobal(sizeof(long));\n        try\n        {\n            _comStream.Seek(offset, (int)origin, posPtr);\n            return Marshal.ReadInt64(posPtr);\n        }\n        finally\n        {\n            Marshal.FreeHGlobal(posPtr);\n        }\n    }\n\n    public override void SetLength(long value)\n    {\n        _comStream.SetSize(value);\n    }\n\n    public override void Write(byte[] buffer, int offset, int count)\n    {\n        if (offset != 0)\n        {\n            throw new NotSupportedException("Offsets other than zero are not supported.");\n        }\n\n        IntPtr bytesWrittenPtr = Marshal.AllocHGlobal(sizeof(int));\n        try\n        {\n            _comStream.Write(buffer, count, bytesWrittenPtr);\n        }\n        finally\n        {\n            Marshal.FreeHGlobal(bytesWrittenPtr);\n        }\n    }\n\n    protected override void Dispose(bool disposing)\n    {\n        if (disposing)\n        {\n            if (_comStream != null)\n            {\n                Marshal.ReleaseComObject(_comStream);\n                _comStream = null;\n            }\n        }\n        base.Dispose(disposing);\n    }\n}