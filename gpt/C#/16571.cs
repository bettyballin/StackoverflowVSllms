public class CustomCorsBehavior : WebHttpBehavior\n{\n    protected override void AddServerErrorHandlers(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher)\n    {\n        base.AddServerErrorHandlers(endpoint, endpointDispatcher);\n        endpointDispatcher.DispatchRuntime.MessageInspectors.Add(new CustomCorsMessageInspector());\n    }\n}\n\npublic class CustomCorsMessageInspector : IDispatchMessageInspector\n{\n    public object AfterReceiveRequest(ref Message request, IClientChannel channel, InstanceContext instanceContext)\n    {\n        var httpRequest = (HttpRequestMessageProperty)request.Properties[HttpRequestMessageProperty.Name];\n        if (httpRequest.Method == "OPTIONS")\n        {\n            var response = Message.CreateMessage(MessageVersion.None, null);\n            var httpResponse = new HttpResponseMessageProperty();\n            httpResponse.StatusCode = HttpStatusCode.OK;\n            httpResponse.Headers.Add("Access-Control-Allow-Origin", "*");\n            httpResponse.Headers.Add("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");\n            httpResponse.Headers.Add("Access-Control-Allow-Headers", "Content-Type, Accept");\n            response.Properties.Add(HttpResponseMessageProperty.Name, httpResponse);\n            return response;\n        }\n        return null;\n    }\n\n    public void BeforeSendReply(ref Message reply, object correlationState)\n    {\n        var httpResponse = (HttpResponseMessageProperty)reply.Properties[HttpResponseMessageProperty.Name];\n        httpResponse.Headers.Add("Access-Control-Allow-Origin", "*");\n    }\n}