using System;\nusing System.IO;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Threading;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        ThreadPool.SetMaxThreads(1000, 500);\n        ThreadPool.SetMinThreads(500, 250);\n\n        TcpListener listener = new TcpListener(IPAddress.Any, 8282);\n        listener.Start();\n\n        while (true)\n        {\n            Socket client = listener.AcceptSocket();\n            ThreadPool.QueueUserWorkItem(ProcessSocket, client);\n        }\n    }\n\n    private static readonly string patternHostPort = @"Host:\s*(\S+):(\d+)";\n    private static readonly string patternHost = @"Host:\s*(\S+)";\n    private static Regex regexHostPort = new Regex(patternHostPort, RegexOptions.IgnoreCase);\n    private static Regex regexHost = new Regex(patternHost, RegexOptions.IgnoreCase);\n\n    static void ProcessSocket(object request)\n    {\n        string requestString = string.Empty;\n        MemoryStream mStream = new MemoryStream();\n        int bytesReceived;\n        byte[] buffer = new byte[4096];\n\n        Socket socketClient = (Socket)request;\n        Console.WriteLine("Incoming connection: " + socketClient.RemoteEndPoint.ToString());\n\n        try\n        {\n            bytesReceived = socketClient.Receive(buffer, 0, buffer.Length, SocketFlags.None);\n            mStream.Write(buffer, 0, bytesReceived);\n            while (socketClient.Available > 0)\n            {\n                bytesReceived = socketClient.Receive(buffer, 0, buffer.Length, SocketFlags.None);\n                mStream.Write(buffer, 0, bytesReceived);\n            }\n\n            byte[] byteOriginalRequest = mStream.ToArray();\n            requestString = Encoding.ASCII.GetString(byteOriginalRequest);\n\n            #region Get requested Host and Port\n            string srvHost = string.Empty;\n            int srvPort = 80; // Default to HTTP port 80\n\n            Match matchHostPort = regexHostPort.Match(requestString);\n            if (matchHostPort.Success)\n            {\n                srvHost = matchHostPort.Groups[1].Value;\n                srvPort = int.Parse(matchHostPort.Groups[2].Value);\n            }\n            else\n            {\n                Match matchHost = regexHost.Match(requestString);\n                if (matchHost.Success)\n                {\n                    srvHost = matchHost.Groups[1].Value;\n                }\n                else\n                {\n                    Console.WriteLine("Host not found in request.");\n                    socketClient.Close();\n                    return;\n                }\n            }\n            #endregion\n\n            // Forward the request to the target server\n            using (TcpClient serverClient = new TcpClient(srvHost, srvPort))\n            {\n                using (NetworkStream serverStream = serverClient.GetStream())\n                {\n                    serverStream.Write(byteOriginalRequest, 0, byteOriginalRequest.Length);\n\n                    // Read the response from the server\n                    using (MemoryStream responseStream = new MemoryStream())\n                    {\n                        while ((bytesReceived = serverStream.Read(buffer, 0, buffer.Length)) > 0)\n                        {\n                            responseStream.Write(buffer, 0, bytesReceived);\n                        }\n\n                        byte[] byteResponse = responseStream.ToArray();\n                        socketClient.Send(byteResponse, 0, byteResponse.Length, SocketFlags.None);\n                    }\n                }\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine("Error: " + ex.Message);\n        }\n        finally\n        {\n            socketClient.Close();\n        }\n    }\n}