using System;\nusing System.ComponentModel;\nusing System.Linq;\n\npublic class CustomTypeDescriptor : ICustomTypeDescriptor\n{\n    private readonly object _instance;\n    private readonly PropertyDescriptorCollection _properties;\n\n    public CustomTypeDescriptor(object instance)\n    {\n        _instance = instance;\n        _properties = TypeDescriptor.GetProperties(instance.GetType());\n    }\n\n    public AttributeCollection GetAttributes() => TypeDescriptor.GetAttributes(_instance);\n    public string GetClassName() => TypeDescriptor.GetClassName(_instance);\n    public string GetComponentName() => TypeDescriptor.GetComponentName(_instance);\n    public TypeConverter GetConverter() => TypeDescriptor.GetConverter(_instance);\n    public EventDescriptor GetDefaultEvent() => TypeDescriptor.GetDefaultEvent(_instance);\n    public PropertyDescriptor GetDefaultProperty() => TypeDescriptor.GetDefaultProperty(_instance);\n    public object GetEditor(Type editorBaseType) => TypeDescriptor.GetEditor(_instance, editorBaseType);\n    public EventDescriptorCollection GetEvents(Attribute[] attributes) => TypeDescriptor.GetEvents(_instance, attributes);\n    public EventDescriptorCollection GetEvents() => TypeDescriptor.GetEvents(_instance);\n    public object GetPropertyOwner(PropertyDescriptor pd) => _instance;\n\n    public PropertyDescriptorCollection GetProperties(Attribute[] attributes)\n    {\n        return GetProperties();\n    }\n\n    public PropertyDescriptorCollection GetProperties()\n    {\n        // Filter properties based on the value of another property\n        var filteredProperties = _properties.Cast<PropertyDescriptor>()\n            .Where(p => ShouldDisplayProperty(p))\n            .ToArray();\n\n        return new PropertyDescriptorCollection(filteredProperties);\n    }\n\n    private bool ShouldDisplayProperty(PropertyDescriptor property)\n    {\n        // Example condition: Hide properties based on the value of a specific property\n        if (_instance is YourClass instance)\n        {\n            if (instance.SomeProperty == "SomeValue" && property.Name == "PropertyToHide")\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\npublic class YourClass\n{\n    public string SomeProperty { get; set; }\n\n    [Browsable(true)]\n    public string PropertyToHide { get; set; }\n\n    [Browsable(true)]\n    public string AnotherProperty { get; set; }\n}\n\n// Usage\nvar yourInstance = new YourClass { SomeProperty = "SomeValue" };\nvar customDescriptor = new CustomTypeDescriptor(yourInstance);\nPropertyGrid1.SelectedObject = customDescriptor;