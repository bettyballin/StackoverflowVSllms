using System;\nusing System.IO;\nusing System.Runtime.InteropServices;\nusing System.Text;\n\npublic class RawPrinterHelper\n{\n    [DllImport("winspool.Drv", EntryPoint = "OpenPrinterA", SetLastError = true, CharSet = CharSet.Ansi, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]\n    public static extern bool OpenPrinter(string szPrinter, out IntPtr hPrinter, IntPtr pd);\n\n    [DllImport("winspool.Drv", EntryPoint = "ClosePrinter", SetLastError = true, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]\n    public static extern bool ClosePrinter(IntPtr hPrinter);\n\n    [DllImport("winspool.Drv", EntryPoint = "StartDocPrinterA", SetLastError = true, CharSet = CharSet.Ansi, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]\n    public static extern bool StartDocPrinter(IntPtr hPrinter, int Level, [In, MarshalAs(UnmanagedType.LPStruct)] DOCINFOA di);\n\n    [DllImport("winspool.Drv", EntryPoint = "EndDocPrinter", SetLastError = true, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]\n    public static extern bool EndDocPrinter(IntPtr hPrinter);\n\n    [DllImport("winspool.Drv", EntryPoint = "StartPagePrinter", SetLastError = true, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]\n    public static extern bool StartPagePrinter(IntPtr hPrinter);\n\n    [DllImport("winspool.Drv", EntryPoint = "EndPagePrinter", SetLastError = true, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]\n    public static extern bool EndPagePrinter(IntPtr hPrinter);\n\n    [DllImport("winspool.Drv", EntryPoint = "WritePrinter", SetLastError = true, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]\n    public static extern bool WritePrinter(IntPtr hPrinter, IntPtr pBytes, int dwCount, out int dwWritten);\n\n    public static bool SendStringToPrinter(string szPrinterName, string szString)\n    {\n        IntPtr pBytes;\n        int dwCount;\n        IntPtr hPrinter = IntPtr.Zero;\n        DOCINFOA di = new DOCINFOA();\n        bool bSuccess = false; \n\n        di.pDocName = "My C#.NET RAW Document";\n        di.pDataType = "RAW";\n\n        try\n        {\n            if (OpenPrinter(szPrinterName.Normalize(), out hPrinter, IntPtr.Zero))\n            {\n                if (StartDocPrinter(hPrinter, 1, di))\n                {\n                    if (StartPagePrinter(hPrinter))\n                    {\n                        dwCount = szString.Length;\n                        pBytes = Marshal.StringToCoTaskMemAnsi(szString);\n\n                        bSuccess = WritePrinter(hPrinter, pBytes, dwCount, out int dwWritten);\n                        Marshal.FreeCoTaskMem(pBytes);\n\n                        EndPagePrinter(hPrinter);\n                    }\n                    EndDocPrinter(hPrinter);\n                }\n                ClosePrinter(hPrinter);\n            }\n        }\n        catch\n        {\n            // Handle exceptions\n        }\n        return bSuccess;\n    }\n\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]\n    public class DOCINFOA\n    {\n        [MarshalAs(UnmanagedType.LPStr)]\n        public string pDocName;\n        [MarshalAs(UnmanagedType.LPStr)]\n        public string pOutputFile;\n        [MarshalAs(UnmanagedType.LPStr)]\n        public string pDataType;\n    }\n}