public class MockTimer : ITimer\n{\n    public event Action Elapsed = delegate { };\n\n    public void Start(TimeSpan interval)\n    {\n        // Simulate timer start\n    }\n\n    public void Stop()\n    {\n        // Simulate timer stop\n    }\n\n    public void TriggerElapsed()\n    {\n        Elapsed();\n    }\n}\n\n[TestClass]\npublic class SystemAvailabilityMonitorTests\n{\n    [TestMethod]\n    public void SystemUnavailable_ShouldRaiseEvent_WhenTimeElapsed()\n    {\n        // Arrange\n        var mockTimer = new MockTimer();\n        var monitor = new SystemAvailabilityMonitor(TimeSpan.FromSeconds(5), mockTimer);\n        bool eventRaised = false;\n        monitor.SystemBecameUnavailable += () => eventRaised = true;\n\n        // Act\n        monitor.SystemUnavailable();\n        mockTimer.TriggerElapsed();\n\n        // Assert\n        Assert.IsTrue(eventRaised);\n    }\n\n    [TestMethod]\n    public void SystemAvailable_ShouldStopTimer_AndRaiseEvent()\n    {\n        // Arrange\n        var mockTimer = new MockTimer();\n        var monitor = new SystemAvailabilityMonitor(TimeSpan.FromSeconds(5), mockTimer);\n        bool eventRaised = false;\n        monitor.SystemBecameAvailable += () => eventRaised = true;\n\n        // Act\n        monitor.SystemAvailable();\n\n        // Assert\n        Assert.IsTrue(eventRaised);\n    }\n}