using System;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\n\nclass Program\n{\n    [DllImport("kernel32.dll")]\n    public static extern IntPtr OpenProcess(uint dwDesiredAccess, bool bInheritHandle, int dwProcessId);\n\n    [DllImport("kernel32.dll")]\n    public static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, uint dwSize, out int lpNumberOfBytesRead);\n\n    [DllImport("kernel32.dll")]\n    public static extern void CloseHandle(IntPtr hObject);\n\n    const uint PROCESS_VM_READ = 0x0010;\n    const uint PROCESS_QUERY_INFORMATION = 0x0400;\n\n    static void Main(string[] args)\n    {\n        Process targetProcess = Process.GetProcessesByName("targetProcessName")[0];\n        IntPtr processHandle = OpenProcess(PROCESS_VM_READ | PROCESS_QUERY_INFORMATION, false, targetProcess.Id);\n\n        byte[] pattern = { 0xEB, 0x20, 0x68, 0x21, 0x27, 0x65, 0x00, 0x21, 0x64, 0xA1 }; // Your pattern\n        IntPtr baseAddress = targetProcess.MainModule.BaseAddress;\n        int memorySize = targetProcess.MainModule.ModuleMemorySize;\n        byte[] buffer = new byte[memorySize];\n\n        if (ReadProcessMemory(processHandle, baseAddress, buffer, (uint)memorySize, out int bytesRead))\n        {\n            int address = FindPattern(buffer, pattern);\n            if (address != -1)\n            {\n                IntPtr patternAddress = IntPtr.Add(baseAddress, address);\n                Console.WriteLine($"Pattern found at address: {patternAddress}");\n            }\n            else\n            {\n                Console.WriteLine("Pattern not found");\n            }\n        }\n\n        CloseHandle(processHandle);\n    }\n\n    static int FindPattern(byte[] data, byte[] pattern)\n    {\n        for (int i = 0; i < data.Length - pattern.Length; i++)\n        {\n            bool found = true;\n            for (int j = 0; j < pattern.Length; j++)\n            {\n                if (pattern[j] != 0x00 && pattern[j] != data[i + j])\n                {\n                    found = false;\n                    break;\n                }\n            }\n            if (found)\n            {\n                return i;\n            }\n        }\n        return -1;\n    }\n}