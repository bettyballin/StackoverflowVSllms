// Startup.Auth.cs\npublic partial class Startup\n{\n    public void ConfigureAuth(IAppBuilder app)\n    {\n        // Configure the db context, user manager and role manager to use a single instance per request\n        app.CreatePerOwinContext(ApplicationDbContext.Create);\n        app.CreatePerOwinContext<ApplicationUserManager>(ApplicationUserManager.Create);\n\n        // Enable the application to use a cookie to store information for the signed in user\n        app.UseCookieAuthentication(new CookieAuthenticationOptions\n        {\n            AuthenticationType = DefaultAuthenticationTypes.ApplicationCookie,\n            LoginPath = new PathString("/Account/Login"),\n            Provider = new CookieAuthenticationProvider\n            {\n                OnValidateIdentity = SecurityStampValidator.OnValidateIdentity<ApplicationUserManager, ApplicationUser>(\n                    validateInterval: TimeSpan.FromMinutes(30),\n                    regenerateIdentity: (manager, user) => user.GenerateUserIdentityAsync(manager))\n            }\n        });            \n        \n        // Enable the application to use external sign-in cookies\n        app.UseExternalSignInCookie(DefaultAuthenticationTypes.ExternalCookie);\n\n        // Configure Google OAuth2 authentication\n        app.UseGoogleAuthentication(new GoogleOAuth2AuthenticationOptions\n        {\n            ClientId = "your-client-id",\n            ClientSecret = "your-client-secret"\n        });\n\n        // Configure other OAuth providers as needed\n        // app.UseFacebookAuthentication(...)\n        // app.UseTwitterAuthentication(...)\n    }\n}\n\n// AccountController.cs\n[AllowAnonymous]\npublic ActionResult ExternalLogin(string provider, string returnUrl)\n{\n    // Request a redirect to the external login provider\n    return new ChallengeResult(provider, Url.Action("ExternalLoginCallback", "Account", new { ReturnUrl = returnUrl }));\n}\n\n[AllowAnonymous]\npublic async Task<ActionResult> ExternalLoginCallback(string returnUrl)\n{\n    var loginInfo = await AuthenticationManager.GetExternalLoginInfoAsync();\n    if (loginInfo == null)\n    {\n        return RedirectToAction("Login");\n    }\n\n    // Sign in the user with this external login provider if the user already has a login\n    var result = await SignInManager.ExternalSignInAsync(loginInfo, isPersistent: false);\n    switch (result)\n    {\n        case SignInStatus.Success:\n            return RedirectToLocal(returnUrl);\n        case SignInStatus.LockedOut:\n            return View("Lockout");\n        case SignInStatus.RequiresVerification:\n            return RedirectToAction("SendCode", new { ReturnUrl = returnUrl, RememberMe = false });\n        case SignInStatus.Failure:\n        default:\n            // If the user does not have an account, then prompt the user to create an account\n            ViewBag.ReturnUrl = returnUrl;\n            ViewBag.LoginProvider = loginInfo.Login.LoginProvider;\n            return View("ExternalLoginConfirmation", new ExternalLoginConfirmationViewModel { Email = loginInfo.Email });\n    }\n}\n\n[HttpPost]\n[AllowAnonymous]\n[ValidateAntiForgeryToken]\npublic async Task<ActionResult> ExternalLoginConfirmation(ExternalLoginConfirmationViewModel model, string returnUrl)\n{\n    if (User.Identity.IsAuthenticated)\n    {\n        return RedirectToAction("Index", "Manage");\n    }\n\n    if (ModelState.IsValid)\n    {\n        // Get the information about the user from the external login provider\n        var info = await AuthenticationManager.GetExternalLoginInfoAsync();\n        if (info == null)\n        {\n            return View("ExternalLoginFailure");\n        }\n        var user = new ApplicationUser { UserName = model.Email, Email = model.Email };\n        var result = await UserManager.CreateAsync(user);\n        if (result.Succeeded)\n        {\n            result = await UserManager.AddLoginAsync(user.Id, info.Login);\n            if (result.Succeeded)\n            {\n                await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);\n                return RedirectToLocal(returnUrl);\n            }\n        }\n        AddErrors(result);\n    }\n\n    ViewBag.ReturnUrl = returnUrl;\n    return View(model);\n}