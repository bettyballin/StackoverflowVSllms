public class NotifyingEnum<T> : INotifyPropertyChanged\n    where T : struct, Enum\n{\n    private T value;\n\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    public NotifyingEnum()\n    {\n        if (!typeof(T).IsEnum)\n            throw new ArgumentException("Type T must be an Enum");\n    }\n\n    public T Value\n    {\n        get { return value; }\n        set\n        {\n            if (!IsValidEnumValue(value))\n                throw new ArgumentOutOfRangeException("value", value, "Value not defined in enum, " + typeof(T).Name);\n\n            if (!this.value.Equals(value))\n            {\n                this.value = value;\n\n                PropertyChangedEventHandler handler = PropertyChanged;\n                if (handler != null)\n                    handler(this, new PropertyChangedEventArgs("Value"));\n            }\n        }\n    }\n\n    private bool IsValidEnumValue(T value)\n    {\n        if (Enum.IsDefined(typeof(T), value))\n            return true;\n\n        long combinedValue = Convert.ToInt64(value);\n        long validValues = 0;\n\n        foreach (T enumValue in Enum.GetValues(typeof(T)))\n        {\n            validValues |= Convert.ToInt64(enumValue);\n        }\n\n        return (combinedValue & validValues) == combinedValue;\n    }\n}