using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic static class SubsequenceExtensions\n{\n    public static IEnumerable<IEnumerable<T>> Subsequences<T>(this IEnumerable<T> source, int count)\n    {\n        if (count == 0)\n        {\n            yield return Enumerable.Empty<T>();\n        }\n        else\n        {\n            var sourceList = source.ToList();\n            for (int i = 0; i <= sourceList.Count - count; i++)\n            {\n                var head = sourceList.Skip(i).Take(1);\n                foreach (var tail in sourceList.Skip(i + 1).Subsequences(count - 1))\n                {\n                    yield return head.Concat(tail);\n                }\n            }\n        }\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var sequence = new List<char> { 'A', 'B', 'C', 'D', 'E' };\n        int length = 3;\n        var subsequences = sequence.Subsequences(length);\n\n        foreach (var subsequence in subsequences)\n        {\n            Console.WriteLine($"[{string.Join(", ", subsequence)}]");\n        }\n    }\n}