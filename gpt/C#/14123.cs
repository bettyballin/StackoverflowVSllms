using System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.X509Certificates;\nusing Org.BouncyCastle.Asn1.X509;\nusing Org.BouncyCastle.Crypto;\nusing Org.BouncyCastle.Crypto.Generators;\nusing Org.BouncyCastle.Crypto.Operators;\nusing Org.BouncyCastle.Security;\nusing Org.BouncyCastle.X509;\n\npublic class CertificateGenerator\n{\n    public static X509Certificate2 GenerateSelfSignedCertificate(string subjectName)\n    {\n        var random = new SecureRandom();\n        var keyGenerationParameters = new KeyGenerationParameters(random, 2048);\n        var keyPairGenerator = new RsaKeyPairGenerator();\n        keyPairGenerator.Init(keyGenerationParameters);\n        AsymmetricCipherKeyPair keyPair = keyPairGenerator.GenerateKeyPair();\n\n        var certificateGenerator = new X509V3CertificateGenerator();\n        var serialNumber = BigIntegers.CreateRandomInRange(BigInteger.One, BigInteger.ValueOf(Int64.MaxValue), random);\n        certificateGenerator.SetSerialNumber(serialNumber);\n        certificateGenerator.SetIssuerDN(new X509Name("CN=" + subjectName));\n        certificateGenerator.SetNotBefore(DateTime.UtcNow.Date);\n        certificateGenerator.SetNotAfter(DateTime.UtcNow.Date.AddYears(5));\n        certificateGenerator.SetSubjectDN(new X509Name("CN=" + subjectName));\n        certificateGenerator.SetPublicKey(keyPair.Public);\n        certificateGenerator.SetSignatureAlgorithm("SHA256WithRSA");\n\n        var certificate = certificateGenerator.Generate(new Asn1SignatureFactory("SHA256WithRSA", keyPair.Private, random));\n        var x509 = new X509Certificate2(certificate.GetEncoded());\n\n        return x509;\n    }\n}