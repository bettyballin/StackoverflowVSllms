public class SyncService : ISyncService\n{\n    private List<Change> _serverChangeLog = new List<Change>();\n    private Dictionary<string, DateTime> _lastSyncTimes = new Dictionary<string, DateTime>();\n\n    public Change[] SyncChanges(string clientId, Change[] clientChanges)\n    {\n        var latestClientChangeTime = clientChanges.Max(c => c.Timestamp);\n        var lastSyncTime = _lastSyncTimes.ContainsKey(clientId) ? _lastSyncTimes[clientId] : DateTime.MinValue;\n\n        // Apply client changes to server state\n        ApplyChangesToServerState(clientChanges);\n\n        // Get changes since last sync\n        var changesSinceLastSync = _serverChangeLog.Where(c => c.Timestamp > lastSyncTime).ToArray();\n\n        // Update last sync time\n        _lastSyncTimes[clientId] = latestClientChangeTime;\n\n        return changesSinceLastSync;\n    }\n\n    private void ApplyChangesToServerState(Change[] changes)\n    {\n        // Implement logic to apply changes to server state and resolve conflicts\n        _serverChangeLog.AddRange(changes);\n    }\n}