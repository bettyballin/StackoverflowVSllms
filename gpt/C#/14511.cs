using System;\nusing System.Reflection;\n\nclass Program\n{\n    static void Main()\n    {\n        // Load the assembly from the specified path\n        Assembly testDLL = Assembly.LoadFile(@"C:\dll\test.dll");\n\n        // Get the type of the class you want to instantiate (replace 'ClassName' with the actual class name)\n        Type type = testDLL.GetType("Namespace.ClassName");\n\n        if (type != null)\n        {\n            // Create an instance of the class\n            object instance = Activator.CreateInstance(type);\n\n            // Optionally, you can also cast the instance to a known interface or base class\n            // IYourInterface instance = (IYourInterface)Activator.CreateInstance(type);\n\n            // Get the method you want to call (replace 'MethodName' with the actual method name)\n            MethodInfo method = type.GetMethod("MethodName");\n\n            if (method != null)\n            {\n                // Prepare any parameters required by the method\n                object[] parameters = new object[] { /* method parameters */ };\n\n                // Invoke the method on the instance\n                object result = method.Invoke(instance, parameters);\n\n                // Optionally, handle the result\n                Console.WriteLine(result);\n            }\n            else\n            {\n                Console.WriteLine("Method not found.");\n            }\n        }\n        else\n        {\n            Console.WriteLine("Class not found.");\n        }\n    }\n}