using System;\nusing System.CodeDom.Compiler;\nusing Microsoft.CSharp;\n\npublic class DynamicCompiler\n{\n    public static void CompileAndRun(string code)\n    {\n        // Create a C# code provider\n        CSharpCodeProvider codeProvider = new CSharpCodeProvider();\n        \n        // Set compiler parameters\n        CompilerParameters parameters = new CompilerParameters\n        {\n            GenerateInMemory = true,\n            GenerateExecutable = false,\n            ReferencedAssemblies = { "System.dll" }\n        };\n        \n        // Compile the code\n        CompilerResults results = codeProvider.CompileAssemblyFromSource(parameters, code);\n        \n        if (results.Errors.HasErrors)\n        {\n            Console.WriteLine("Compilation failed:");\n            foreach (CompilerError error in results.Errors)\n            {\n                Console.WriteLine($"Error ({error.ErrorNumber}): {error.ErrorText} at line {error.Line}");\n            }\n        }\n        else\n        {\n            // Get the compiled assembly\n            var assembly = results.CompiledAssembly;\n            \n            // Get the type of the class containing the Main method\n            var programType = assembly.GetType("DynamicCode.Program");\n            \n            // Get the Main method\n            var mainMethod = programType.GetMethod("Main");\n            \n            // Invoke the Main method\n            mainMethod.Invoke(null, null);\n        }\n    }\n}\n\n// Example usage\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        string code = @"\n        using System;\n        \n        namespace DynamicCode\n        {\n            public class Program\n            {\n                public static void Main()\n                {\n                    Console.WriteLine(""Hello, dynamically compiled world!"");\n                }\n            }\n        }";\n        \n        DynamicCompiler.CompileAndRun(code);\n    }\n}