using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Sockets;\nusing System.Reflection;\n\npublic class Program\n{\n    public delegate void HANDLER_FUNC(object obj, TcpClient client);\n    private Dictionary<string, HANDLER_FUNC> handlerDictionary = new Dictionary<string, HANDLER_FUNC>();\n\n    public Program()\n    {\n        // Discover methods and fill the dictionary\n        DiscoverHandlers();\n    }\n\n    private void DiscoverHandlers()\n    {\n        var methods = this.GetType().GetMethods(BindingFlags.NonPublic | BindingFlags.Instance)\n            .Where(m => m.GetCustomAttributes(typeof(MessageHandlerAttribute), false).Length > 0);\n\n        foreach (var method in methods)\n        {\n            var attribute = (MessageHandlerAttribute)method.GetCustomAttributes(typeof(MessageHandlerAttribute), false).First();\n            HANDLER_FUNC handlerDelegate = (HANDLER_FUNC)Delegate.CreateDelegate(typeof(HANDLER_FUNC), this, method);\n            handlerDictionary.Add(attribute.HandlerName, handlerDelegate);\n        }\n    }\n\n    [MessageHandlerAttribute("HandleLoginResponse")]\n    private void HandleLoginResponse(object obj, TcpClient client)\n    {\n        Console.WriteLine("HandleLoginResponse called");\n        // Method implementation\n    }\n\n    public static void Main(string[] args)\n    {\n        Program program = new Program();\n        // Example of invoking the handler\n        program.handlerDictionary["HandleLoginResponse"](null, null);\n    }\n}