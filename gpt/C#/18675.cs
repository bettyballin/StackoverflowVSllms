using System;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\nusing System.Windows.Forms;\n\npublic class KeyboardInterceptor\n{\n    private static IntPtr hookId = IntPtr.Zero;\n    private static LowLevelKeyboardProc proc = HookCallback;\n\n    public static void Main()\n    {\n        hookId = SetHook(proc);\n        Application.Run();\n        UnhookWindowsHookEx(hookId);\n    }\n\n    private static IntPtr SetHook(LowLevelKeyboardProc proc)\n    {\n        using (Process curProcess = Process.GetCurrentProcess())\n        using (ProcessModule curModule = curProcess.MainModule)\n        {\n            return SetWindowsHookEx(WH_KEYBOARD_LL, proc,\n                GetModuleHandle(curModule.ModuleName), 0);\n        }\n    }\n\n    private delegate IntPtr LowLevelKeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);\n\n    private static IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)\n    {\n        if (nCode >= 0 && wParam == (IntPtr)WM_KEYDOWN)\n        {\n            int vkCode = Marshal.ReadInt32(lParam);\n            Console.WriteLine((Keys)vkCode);\n            \n            // Here you can add your logic to determine if the input is from the keyboard wedge\n            // and redirect it to POS classes if needed.\n        }\n        return CallNextHookEx(hookId, nCode, wParam, lParam);\n    }\n\n    private const int WH_KEYBOARD_LL = 13;\n    private const int WM_KEYDOWN = 0x0100;\n\n    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]\n    private static extern IntPtr SetWindowsHookEx(int idHook, LowLevelKeyboardProc lpfn, IntPtr hMod, uint dwThreadId);\n\n    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    private static extern bool UnhookWindowsHookEx(IntPtr hhk);\n\n    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]\n    private static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);\n\n    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]\n    private static extern IntPtr GetModuleHandle(string lpModuleName);\n}