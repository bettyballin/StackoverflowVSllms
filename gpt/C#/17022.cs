using iTextSharp.text.pdf;\n   using iTextSharp.text.pdf.parser;\n   using System;\n   using System.Collections.Generic;\n   using System.Data.SqlClient;\n   using System.Linq;\n\n   public class PdfKeywordExtractor\n   {\n       public string ExtractTextFromPdf(string filePath)\n       {\n           using (PdfReader reader = new PdfReader(filePath))\n           {\n               string text = "";\n               for (int i = 1; i <= reader.NumberOfPages; i++)\n               {\n                   text += PdfTextExtractor.GetTextFromPage(reader, i);\n               }\n               return text;\n           }\n       }\n\n       public List<string> GenerateKeywords(string text)\n       {\n           var stopWords = new HashSet<string> { "a", "an", "the", "and", "or", "but", "if", "then", "else", "when", "at", "by", "for", "with", "about", "against", "between", "into", "through", "during", "before", "after", "above", "below", "to", "from", "up", "down", "in", "out", "on", "off", "over", "under", "again", "further", "then", "once" };\n           var words = text.Split(new[] { ' ', '\n', '\r', '.', ',', ';', ':', '-', '_', '/', '\\', '!', '?', '(', ')', '[', ']', '{', '}', '"' }, StringSplitOptions.RemoveEmptyEntries)\n                           .Where(word => !stopWords.Contains(word.ToLower()) && word.Length > 2)\n                           .GroupBy(word => word.ToLower())\n                           .OrderByDescending(g => g.Count())\n                           .Select(g => g.Key)\n                           .ToList();\n           return words;\n       }\n\n       public void StoreKeywordsInDatabase(string connectionString, string fileName, List<string> keywords)\n       {\n           using (SqlConnection connection = new SqlConnection(connectionString))\n           {\n               connection.Open();\n               string query = "INSERT INTO PdfKeywords (FileName, Keywords) VALUES (@FileName, @Keywords)";\n               using (SqlCommand command = new SqlCommand(query, connection))\n               {\n                   command.Parameters.AddWithValue("@FileName", fileName);\n                   command.Parameters.AddWithValue("@Keywords", string.Join(",", keywords));\n                   command.ExecuteNonQuery();\n               }\n           }\n       }\n   }