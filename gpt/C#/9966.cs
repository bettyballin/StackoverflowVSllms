using System;\nusing System.Data;\nusing System.Data.SQLite;\nusing System.Threading.Tasks;\n\npublic class BookingService\n{\n    private readonly string _connectionString;\n\n    public BookingService(string connectionString)\n    {\n        _connectionString = connectionString;\n    }\n\n    public async Task<bool> MakeBookingAsync(int customerId, DateTime bookingDateTime)\n    {\n        using (var connection = new SQLiteConnection(_connectionString))\n        {\n            await connection.OpenAsync();\n\n            using (var transaction = connection.BeginTransaction(IsolationLevel.Serializable))\n            {\n                try\n                {\n                    // Check if the slot is already booked\n                    var checkCommand = new SQLiteCommand(\n                        "SELECT COUNT(*) FROM Bookings WHERE BookingDateTime = @BookingDateTime", connection);\n                    checkCommand.Parameters.AddWithValue("@BookingDateTime", bookingDateTime);\n\n                    var count = (long)await checkCommand.ExecuteScalarAsync();\n                    if (count > 0)\n                    {\n                        // Slot already booked\n                        return false;\n                    }\n\n                    // Insert the booking\n                    var insertCommand = new SQLiteCommand(\n                        "INSERT INTO Bookings (CustomerID, BookingDateTime) VALUES (@CustomerID, @BookingDateTime)", connection);\n                    insertCommand.Parameters.AddWithValue("@CustomerID", customerId);\n                    insertCommand.Parameters.AddWithValue("@BookingDateTime", bookingDateTime);\n\n                    await insertCommand.ExecuteNonQueryAsync();\n                    transaction.Commit();\n                    return true;\n                }\n                catch (Exception)\n                {\n                    transaction.Rollback();\n                    throw;\n                }\n            }\n        }\n    }\n}