// Example using ASP.NET Core Middleware\n   public class RateLimitingMiddleware\n   {\n       private static readonly MemoryCache Cache = new MemoryCache(new MemoryCacheOptions());\n       private readonly RequestDelegate _next;\n       private readonly int _maxRequests;\n       private readonly TimeSpan _timeSpan;\n\n       public RateLimitingMiddleware(RequestDelegate next, int maxRequests, TimeSpan timeSpan)\n       {\n           _next = next;\n           _maxRequests = maxRequests;\n           _timeSpan = timeSpan;\n       }\n\n       public async Task InvokeAsync(HttpContext context)\n       {\n           var endpoint = context.Features.Get<IEndpointFeature>()?.Endpoint;\n           if (endpoint == null)\n           {\n               await _next(context);\n               return;\n           }\n\n           var ipAddress = context.Connection.RemoteIpAddress.ToString();\n           var cacheKey = $"{ipAddress}:{endpoint.DisplayName}";\n           if (Cache.TryGetValue(cacheKey, out int requestCount))\n           {\n               if (requestCount >= _maxRequests)\n               {\n                   context.Response.StatusCode = StatusCodes.Status429TooManyRequests;\n                   await context.Response.WriteAsync("Too many requests.");\n                   return;\n               }\n               Cache.Set(cacheKey, requestCount + 1, _timeSpan);\n           }\n           else\n           {\n               Cache.Set(cacheKey, 1, _timeSpan);\n           }\n\n           await _next(context);\n       }\n   }