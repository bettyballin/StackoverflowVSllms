using System;\nusing MSScriptControl;\n\npublic class ApiExposed : IReflect\n{\n    public string ModuleName;\n\n    public void Exit()\n    {\n        System.Environment.Exit(0);\n    }\n\n    // Implement IReflect members here\n    // This is a simplified example; you may need to implement more members based on your requirements\n    public FieldInfo GetField(string name, BindingFlags bindingAttr)\n    {\n        throw new NotImplementedException();\n    }\n\n    public FieldInfo[] GetFields(BindingFlags bindingAttr)\n    {\n        throw new NotImplementedException();\n    }\n\n    public MemberInfo[] GetMember(string name, BindingFlags bindingAttr)\n    {\n        throw new NotImplementedException();\n    }\n\n    public MemberInfo[] GetMembers(BindingFlags bindingAttr)\n    {\n        throw new NotImplementedException();\n    }\n\n    public MethodInfo GetMethod(string name, BindingFlags bindingAttr)\n    {\n        throw new NotImplementedException();\n    }\n\n    public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers)\n    {\n        throw new NotImplementedException();\n    }\n\n    public MethodInfo[] GetMethods(BindingFlags bindingAttr)\n    {\n        throw new NotImplementedException();\n    }\n\n    public PropertyInfo[] GetProperties(BindingFlags bindingAttr)\n    {\n        throw new NotImplementedException();\n    }\n\n    public PropertyInfo GetProperty(string name, BindingFlags bindingAttr)\n    {\n        throw new NotImplementedException();\n    }\n\n    public PropertyInfo GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers)\n    {\n        throw new NotImplementedException();\n    }\n\n    public object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters)\n    {\n        throw new NotImplementedException();\n    }\n\n    public Type UnderlyingSystemType => throw new NotImplementedException();\n}\n\npublic class Api\n{\n    ScriptControl script;\n    ApiExposed ApiObj;\n\n    public Api()\n    {\n        ApiObj = new ApiExposed();\n\n        script = new ScriptControl();\n        script.Language = "VBScript";\n        script.AddObject("tbapi", ApiObj, true);\n\n        script.Eval("tbapi.Exit()");\n    }\n}