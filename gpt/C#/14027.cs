using System;\nusing System.Data;\nusing System.Data.SqlClient;\n\npublic class SqlValidator\n{\n    private string connectionString;\n\n    public SqlValidator(string connectionString)\n    {\n        this.connectionString = connectionString;\n    }\n\n    public bool IsQueryValid(string query, out string message)\n    {\n        try\n        {\n            using (SqlConnection conn = new SqlConnection(connectionString))\n            {\n                conn.Open();\n                using (SqlCommand cmd = new SqlCommand(query, conn))\n                {\n                    cmd.CommandType = CommandType.Text;\n                    // Use a transaction to ensure no data is affected\n                    using (SqlTransaction transaction = conn.BeginTransaction())\n                    {\n                        cmd.Transaction = transaction;\n                        cmd.ExecuteNonQuery();\n                        transaction.Rollback(); // Rollback to prevent any changes\n                    }\n                }\n            }\n\n            message = "Query is valid.";\n            return true;\n        }\n        catch (Exception ex)\n        {\n            message = $"Query is invalid: {ex.Message}";\n            return false;\n        }\n    }\n\n    public bool IsQueryModifyingData(string query)\n    {\n        string trimmedQuery = query.Trim().ToUpper();\n        return trimmedQuery.StartsWith("INSERT") || trimmedQuery.StartsWith("UPDATE") || trimmedQuery.StartsWith("DELETE");\n    }\n}\n\n// Usage example:\nvar validator = new SqlValidator("your-connection-string-here");\nstring query = "SELECT * FROM Users";\n\nstring validationMessage;\nbool isValid = validator.IsQueryValid(query, out validationMessage);\nbool isModifyingData = validator.IsQueryModifyingData(query);\n\nConsole.WriteLine(validationMessage);\nConsole.WriteLine("Is modifying data: " + isModifyingData);