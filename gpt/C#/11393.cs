using System;\nusing System.Data.SqlTypes;\nusing System.IO;\nusing System.Security.Cryptography;\n\npublic class SqlServerClr\n{\n    [Microsoft.SqlServer.Server.SqlFunction(IsDeterministic = true, IsPrecise = true)]\n    public static SqlInt64 CalculateCRC32(SqlString input)\n    {\n        if (input.IsNull)\n            return SqlInt64.Null;\n\n        using (var crc32 = new Crc32())\n        {\n            var bytes = System.Text.Encoding.UTF8.GetBytes(input.Value);\n            var hash = crc32.ComputeHash(bytes);\n            Array.Reverse(hash); // Convert to little-endian\n            return BitConverter.ToInt64(hash, 0);\n        }\n    }\n}\n\npublic class Crc32 : HashAlgorithm\n{\n    private static readonly uint[] Crc32Table;\n\n    private uint _crc;\n\n    public Crc32()\n    {\n        _crc = 0xFFFFFFFF;\n        HashSizeValue = 32;\n    }\n\n    static Crc32()\n    {\n        const uint polynomial = 0xedb88320;\n        Crc32Table = new uint[256];\n\n        for (uint i = 0; i < 256; i++)\n        {\n            uint crc = i;\n            for (uint j = 8; j > 0; j--)\n            {\n                if ((crc & 1) == 1)\n                {\n                    crc = (crc >> 1) ^ polynomial;\n                }\n                else\n                {\n                    crc >>= 1;\n                }\n            }\n            Crc32Table[i] = crc;\n        }\n    }\n\n    public override void Initialize()\n    {\n        _crc = 0xFFFFFFFF;\n    }\n\n    protected override void HashCore(byte[] array, int ibStart, int cbSize)\n    {\n        for (int i = ibStart; i < cbSize; i++)\n        {\n            byte index = (byte)((_crc & 0xFF) ^ array[i]);\n            _crc = (_crc >> 8) ^ Crc32Table[index];\n        }\n    }\n\n    protected override byte[] HashFinal()\n    {\n        _crc = ~_crc;\n        byte[] hash = BitConverter.GetBytes(_crc);\n        if (BitConverter.IsLittleEndian)\n        {\n            Array.Reverse(hash);\n        }\n        return hash;\n    }\n}