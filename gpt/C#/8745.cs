public class CustomAuthenticationModule : IHttpModule\n{\n    public void Init(HttpApplication context)\n    {\n        context.AuthenticateRequest += new EventHandler(OnAuthenticateRequest);\n    }\n\n    private void OnAuthenticateRequest(object sender, EventArgs e)\n    {\n        HttpApplication app = (HttpApplication)sender;\n        HttpContext context = app.Context;\n\n        if (context.User != null && context.User.Identity.IsAuthenticated)\n        {\n            // User is authenticated via Windows Authentication\n            context.User = new CustomPrincipal(context.User.Identity);\n        }\n        else if (FormsAuthentication.CookiesSupported && context.Request.Cookies[FormsAuthentication.FormsCookieName] != null)\n        {\n            // User is authenticated via Forms Authentication\n            try\n            {\n                FormsAuthenticationTicket ticket = FormsAuthentication.Decrypt(context.Request.Cookies[FormsAuthentication.FormsCookieName].Value);\n                if (ticket != null && !ticket.Expired)\n                {\n                    context.User = new CustomPrincipal(new FormsIdentity(ticket));\n                }\n            }\n            catch\n            {\n                // Handle exceptions\n            }\n        }\n    }\n\n    public void Dispose() { }\n}\n\npublic class CustomPrincipal : IPrincipal\n{\n    private IIdentity _identity;\n\n    public CustomPrincipal(IIdentity identity)\n    {\n        _identity = identity;\n    }\n\n    public IIdentity Identity\n    {\n        get { return _identity; }\n    }\n\n    public bool IsInRole(string role)\n    {\n        // Implement role checking logic here\n        return false;\n    }\n}