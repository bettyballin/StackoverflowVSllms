using System;\nusing System.Linq;\nusing System.Linq.Expressions;\n\npublic class GenericSearch\n{\n    private IQueryable<T> GetQuery<T>(\n        IQueryable<T> dataContext,\n        string[] arrayOfQueryTerms,\n        Expression<Func<T, string>> fieldSelector)\n    {\n        var someQuery = dataContext;\n\n        if (arrayOfQueryTerms.Length == 1)\n        {\n            var queryTerm = arrayOfQueryTerms[0];\n            someQuery = someQuery.Where(BuildPredicate(fieldSelector, queryTerm, (field, term) => field.StartsWith(term)));\n        }\n        else\n        {\n            foreach (var queryTerm in arrayOfQueryTerms)\n            {\n                if (!string.IsNullOrEmpty(queryTerm))\n                {\n                    someQuery = someQuery.Where(BuildPredicate(fieldSelector, queryTerm, (field, term) => field.Contains(term)));\n                }\n            }\n        }\n\n        return someQuery;\n    }\n\n    private Expression<Func<T, bool>> BuildPredicate<T>(\n        Expression<Func<T, string>> fieldSelector,\n        string queryTerm,\n        Func<Expression, Expression, Expression> comparison)\n    {\n        var parameter = fieldSelector.Parameters[0];\n        var field = fieldSelector.Body;\n        var term = Expression.Constant(queryTerm);\n        var body = comparison(field, term);\n        return Expression.Lambda<Func<T, bool>>(body, parameter);\n    }\n}