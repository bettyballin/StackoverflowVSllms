using System;\nusing System.Collections.Generic;\nusing System.Text;\n\npublic static class DelimiterEscapeProcessor\n{\n    public static string[] SmartSplit(string delimitedData, char delimiter, char escape)\n    {\n        if (string.IsNullOrEmpty(delimitedData))\n        {\n            return Array.Empty<string>();\n        }\n\n        var result = new List<string>();\n        var current = new StringBuilder();\n        bool isEscaping = false;\n\n        for (int i = 0; i < delimitedData.Length; i++)\n        {\n            char c = delimitedData[i];\n\n            if (isEscaping)\n            {\n                // Add the escaped character and reset escaping flag\n                current.Append(c);\n                isEscaping = false;\n            }\n            else if (c == escape)\n            {\n                // Set escaping flag\n                isEscaping = true;\n            }\n            else if (c == delimiter)\n            {\n                // Add the current buffer to the result and reset the buffer\n                if (current.Length > 0)\n                {\n                    result.Add(current.ToString());\n                    current.Clear();\n                }\n            }\n            else\n            {\n                // Add current character to the buffer\n                current.Append(c);\n            }\n        }\n\n        // Add the last buffer to the result if it's not empty\n        if (current.Length > 0)\n        {\n            result.Add(current.ToString());\n        }\n\n        return result.ToArray();\n    }\n}\n\n// Example usage:\n// var result = DelimiterEscapeProcessor.SmartSplit("a\\,b,c", ',', '\\');\n// Console.WriteLine(string.Join(" | ", result)); // Output: a,b | c