using System;\nusing System.Runtime.InteropServices;\nusing System.Text;\n\nclass Program\n{\n    // Helper function to convert Delphi ShortString to C# string\n    private static string ConvertShortString(byte[] shortString)\n    {\n        int length = shortString[0];\n        return Encoding.ASCII.GetString(shortString, 1, length);\n    }\n\n    // CPU functions\n    [DllImport("HardwareIDExtractor.dll")]\n    public static extern double GetCPUSpeed();\n\n    [DllImport("HardwareIDExtractor.dll")]\n    private static extern void CPUFamily(byte[] shortString);\n\n    public static string GetCPUFamily()\n    {\n        byte[] buffer = new byte[256]; // Allocate a buffer large enough\n        CPUFamily(buffer);\n        return ConvertShortString(buffer);\n    }\n\n    [DllImport("HardwareIDExtractor.dll")]\n    public static extern int GetCpuTheoreticSpeed();\n\n    [DllImport("HardwareIDExtractor.dll")]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    public static extern bool IsCPUIDAvailable();\n\n    [DllImport("HardwareIDExtractor.dll")]\n    private static extern void GetCPUID(byte cpuCore, byte[] shortString);\n\n    public static string GetCPUID(byte cpuCore)\n    {\n        byte[] buffer = new byte[256];\n        GetCPUID(cpuCore, buffer);\n        return ConvertShortString(buffer);\n    }\n\n    [DllImport("HardwareIDExtractor.dll")]\n    private static extern void GetCPUVendor(byte[] shortString);\n\n    public static string GetCPUVendor()\n    {\n        byte[] buffer = new byte[256];\n        GetCPUVendor(buffer);\n        return ConvertShortString(buffer);\n    }\n\n    // RAM functions\n    [DllImport("HardwareIDExtractor.dll")]\n    public static extern uint MemoryStatus(int memType);\n\n    [DllImport("HardwareIDExtractor.dll")]\n    private static extern void MemoryStatus_MB(int memType, byte[] shortString);\n\n    public static string GetMemoryStatus_MB(int memType)\n    {\n        byte[] buffer = new byte[256];\n        MemoryStatus_MB(memType, buffer);\n        return ConvertShortString(buffer);\n    }\n\n    // HDD functions\n    [DllImport("HardwareIDExtractor.dll")]\n    private static extern void GetPartitionID(string partition, byte[] shortString);\n\n    public static string GetPartitionID(string partition)\n    {\n        byte[] buffer = new byte[256];\n        GetPartitionID(partition, buffer);\n        return ConvertShortString(buffer);\n    }\n\n    [DllImport("HardwareIDExtractor.dll")]\n    public static extern IntPtr GetIDESerialNumber(byte driveNumber);\n\n    public static string GetIDESerialNumberString(byte driveNumber)\n    {\n        IntPtr ptr = GetIDESerialNumber(driveNumber);\n        return Marshal.PtrToStringAnsi(ptr);\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine("CPU Speed: " + GetCPUSpeed());\n        Console.WriteLine("CPU Family: " + GetCPUFamily());\n        Console.WriteLine("Theoretic CPU Speed: " + GetCpuTheoreticSpeed());\n        Console.WriteLine("Is CPU ID Available: " + IsCPUIDAvailable());\n        Console.WriteLine("CPU ID: " + GetCPUID(0));\n        Console.WriteLine("CPU Vendor: " + GetCPUVendor());\n        Console.WriteLine("Memory Status (Bytes): " + MemoryStatus(0));\n        Console.WriteLine("Memory Status (MB): " + GetMemoryStatus_MB(0));\n        Console.WriteLine("Partition ID: " + GetPartitionID("C:"));\n        Console.WriteLine("IDE Serial Number: " + GetIDESerialNumberString(0));\n    }\n}