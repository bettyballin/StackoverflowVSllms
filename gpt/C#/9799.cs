using System;\nusing Castle.DynamicProxy;\n\npublic interface IVehicle\n{\n    void Drive();\n    void Stop();\n}\n\npublic class Car : IVehicle\n{\n    public void Drive()\n    {\n        Console.WriteLine("Car is driving.");\n    }\n\n    public void Stop()\n    {\n        Console.WriteLine("Car has stopped.");\n    }\n}\n\npublic class CallCountInterceptor : IInterceptor\n{\n    private int _callCount = 0;\n\n    public void Intercept(IInvocation invocation)\n    {\n        _callCount++;\n        Console.WriteLine($"Calling method {invocation.Method.Name}, call count: {_callCount}");\n        invocation.Proceed();\n    }\n}\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var proxyGenerator = new ProxyGenerator();\n        var car = new Car();\n        var interceptor = new CallCountInterceptor();\n\n        var carProxy = proxyGenerator.CreateInterfaceProxyWithTarget<IVehicle>(car, interceptor);\n\n        carProxy.Drive();\n        carProxy.Stop();\n        carProxy.Drive();\n    }\n}