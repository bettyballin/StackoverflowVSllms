using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing MailKit.Net.Pop3;\nusing MailKit.Net.Smtp;\nusing MimeKit;\n\nclass Pop3ToSmtpForwarder\n{\n    private readonly string pop3Host = "pop3.your-email-provider.com";\n    private readonly int pop3Port = 995;\n    private readonly string pop3Username = "your-pop3-username";\n    private readonly string pop3Password = "your-pop3-password";\n\n    private readonly string smtpHost = "smtp.your-email-provider.com";\n    private readonly int smtpPort = 587;\n    private readonly string smtpUsername = "your-smtp-username";\n    private readonly string smtpPassword = "your-smtp-password";\n\n    public async Task CheckAndForwardEmailsAsync()\n    {\n        using (var pop3Client = new Pop3Client())\n        {\n            await pop3Client.ConnectAsync(pop3Host, pop3Port, true);\n            await pop3Client.AuthenticateAsync(pop3Username, pop3Password);\n\n            for (int i = 0; i < pop3Client.Count; i++)\n            {\n                var message = await pop3Client.GetMessageAsync(i);\n\n                // Custom business logic to determine if the message should be forwarded\n                if (ShouldForwardMessage(message))\n                {\n                    var newMessage = CreateForwardedMessage(message);\n                    await SendMessageAsync(newMessage);\n                }\n\n                // Custom business logic to determine if the message should be deleted\n                if (ShouldDeleteMessage(message))\n                {\n                    await pop3Client.DeleteMessageAsync(i);\n                }\n            }\n\n            await pop3Client.DisconnectAsync(true);\n        }\n    }\n\n    private bool ShouldForwardMessage(MimeMessage message)\n    {\n        // Add your custom logic here\n        return true;\n    }\n\n    private bool ShouldDeleteMessage(MimeMessage message)\n    {\n        // Add your custom logic here\n        return true;\n    }\n\n    private MimeMessage CreateForwardedMessage(MimeMessage originalMessage)\n    {\n        var newMessage = new MimeMessage();\n        newMessage.From.Add(new MailboxAddress("New Sender", "new-sender@example.com"));\n        newMessage.To.Add(new MailboxAddress("Recipient", "recipient@example.com"));\n        newMessage.Subject = originalMessage.Subject;\n        newMessage.Body = originalMessage.Body;\n\n        return newMessage;\n    }\n\n    private async Task SendMessageAsync(MimeMessage message)\n    {\n        using (var smtpClient = new SmtpClient())\n        {\n            await smtpClient.ConnectAsync(smtpHost, smtpPort, MailKit.Security.SecureSocketOptions.StartTls);\n            await smtpClient.AuthenticateAsync(smtpUsername, smtpPassword);\n            await smtpClient.SendAsync(message);\n            await smtpClient.DisconnectAsync(true);\n        }\n    }\n}\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        var forwarder = new Pop3ToSmtpForwarder();\n        await forwarder.CheckAndForwardEmailsAsync();\n    }\n}