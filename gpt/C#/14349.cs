public class RequestRateLimiterMiddleware\n{\n    private static readonly MemoryCache _memoryCache = new MemoryCache(new MemoryCacheOptions());\n    private readonly RequestDelegate _next;\n    private readonly int _requestLimit;\n    private readonly TimeSpan _timeSpan;\n\n    public RequestRateLimiterMiddleware(RequestDelegate next, int requestLimit, TimeSpan timeSpan)\n    {\n        _next = next;\n        _requestLimit = requestLimit;\n        _timeSpan = timeSpan;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        var ipAddress = context.Connection.RemoteIpAddress.ToString();\n        var cacheKey = $"RequestCount_{ipAddress}";\n\n        if (_memoryCache.TryGetValue(cacheKey, out int requestCount))\n        {\n            if (requestCount >= _requestLimit)\n            {\n                context.Response.StatusCode = StatusCodes.Status429TooManyRequests;\n                return;\n            }\n            _memoryCache.Set(cacheKey, ++requestCount, _timeSpan);\n        }\n        else\n        {\n            _memoryCache.Set(cacheKey, 1, _timeSpan);\n        }\n\n        await _next(context);\n    }\n}\n\n// In Startup.cs\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    app.UseMiddleware<RequestRateLimiterMiddleware>(60, TimeSpan.FromMinutes(1)); // Allow 60 requests per minute\n    // Other middlewares\n}