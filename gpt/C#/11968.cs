using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Xml;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        if (args.Length < 1)\n        {\n            Console.WriteLine("Usage: SNKToXML <path to .snk file>");\n            return;\n        }\n\n        var snkPath = args[0];\n        var snkBytes = File.ReadAllBytes(snkPath);\n        var rsa = DecodeRSAPrivateKey(snkBytes);\n\n        var xml = rsa.ToXmlString(true);\n\n        var xmlPath = Path.ChangeExtension(snkPath, ".xml");\n        File.WriteAllText(xmlPath, xml);\n\n        Console.WriteLine($"Converted {snkPath} to {xmlPath}");\n    }\n\n    private static RSACryptoServiceProvider DecodeRSAPrivateKey(byte[] privkey)\n    {\n        // Decode the private key.\n        using (var ms = new MemoryStream(privkey))\n        using (var br = new BinaryReader(ms))\n        {\n            var twobytes = br.ReadUInt16();\n            if (twobytes == 0x8130) br.ReadByte();\n            else if (twobytes == 0x8230) br.ReadInt16();\n            else throw new Exception("Invalid data.");\n\n            twobytes = br.ReadUInt16();\n            if (twobytes != 0x0102) throw new Exception("Invalid version.");\n            if (br.ReadByte() != 0x00) throw new Exception("Invalid data.");\n\n            var modulus = br.ReadBytes(GetIntegerSize(br));\n            var exponent = br.ReadBytes(GetIntegerSize(br));\n            var d = br.ReadBytes(GetIntegerSize(br));\n            var p = br.ReadBytes(GetIntegerSize(br));\n            var q = br.ReadBytes(GetIntegerSize(br));\n            var dp = br.ReadBytes(GetIntegerSize(br));\n            var dq = br.ReadBytes(GetIntegerSize(br));\n            var iq = br.ReadBytes(GetIntegerSize(br));\n\n            var rsa = new RSACryptoServiceProvider();\n            var rsaParams = new RSAParameters\n            {\n                Modulus = modulus,\n                Exponent = exponent,\n                D = d,\n                P = p,\n                Q = q,\n                DP = dp,\n                DQ = dq,\n                InverseQ = iq\n            };\n\n            rsa.ImportParameters(rsaParams);\n            return rsa;\n        }\n    }\n\n    private static int GetIntegerSize(BinaryReader br)\n    {\n        var bt = br.ReadByte();\n        if (bt != 0x02) throw new Exception("Invalid data.");\n\n        bt = br.ReadByte();\n        int count;\n        if (bt == 0x81) count = br.ReadByte();\n        else if (bt == 0x82) count = 256 * br.ReadByte() + br.ReadByte();\n        else count = bt;\n\n        while (br.ReadByte() == 0x00) count -= 1;\n        br.BaseStream.Seek(-1, SeekOrigin.Current);\n\n        return count;\n    }\n}