using System;\nusing System.Collections.Concurrent;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\nusing System.Threading.Tasks;\n\nclass Server\n{\n    private ConcurrentDictionary<int, TcpClient> _clients = new ConcurrentDictionary<int, TcpClient>();\n    private int _clientCounter = 0;\n\n    public async Task StartAsync()\n    {\n        TcpListener listener = new TcpListener(IPAddress.Any, 12345);\n        listener.Start();\n        Console.WriteLine("Server started...");\n\n        while (true)\n        {\n            TcpClient client = await listener.AcceptTcpClientAsync();\n            int clientId = ++_clientCounter;\n            _clients[clientId] = client;\n            Console.WriteLine($"Client {clientId} connected.");\n\n            _ = Task.Run(() => HandleClientAsync(client, clientId));\n        }\n    }\n\n    private async Task HandleClientAsync(TcpClient client, int clientId)\n    {\n        NetworkStream stream = client.GetStream();\n        byte[] buffer = new byte[1024];\n\n        while (true)\n        {\n            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);\n            if (bytesRead == 0) break;\n\n            string message = Encoding.UTF8.GetString(buffer, 0, bytesRead);\n            Console.WriteLine($"Received from client {clientId}: {message}");\n\n            // Echo back the message\n            byte[] response = Encoding.UTF8.GetBytes($"Server response: {message}");\n            await stream.WriteAsync(response, 0, response.Length);\n        }\n\n        _clients.TryRemove(clientId, out _);\n        client.Close();\n        Console.WriteLine($"Client {clientId} disconnected.");\n    }\n}