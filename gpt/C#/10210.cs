using System;\n\npublic class FinValidator\n{\n    public static bool IsValidFIN(string fin)\n    {\n        if (string.IsNullOrEmpty(fin) || fin.Length != 9)\n        {\n            return false;\n        }\n\n        char prefix = fin[0];\n        if (prefix != 'F' && prefix != 'G' && prefix != 'M' && prefix != 'P')\n        {\n            return false;\n        }\n\n        int[] weights = { 2, 7, 6, 5, 4, 3, 2 };\n        char[] checksumCharsF = { 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'T', 'U', 'W', 'X' };\n        char[] checksumCharsG = { 'X', 'W', 'U', 'T', 'R', 'Q', 'P', 'N', 'M', 'L', 'K' };\n        char[] checksumCharsM = { 'R', 'Q', 'P', 'N', 'M', 'L', 'K', 'J', 'H', 'G', 'F' };\n        char[] checksumCharsP = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L' };\n\n        int sum = 0;\n        for (int i = 1; i <= 7; i++)\n        {\n            sum += (fin[i] - '0') * weights[i - 1];\n        }\n\n        int remainder = sum % 11;\n        char expectedChecksum;\n        switch (prefix)\n        {\n            case 'F':\n                expectedChecksum = checksumCharsF[remainder];\n                break;\n            case 'G':\n                expectedChecksum = checksumCharsG[remainder];\n                break;\n            case 'M':\n                expectedChecksum = checksumCharsM[remainder];\n                break;\n            case 'P':\n                expectedChecksum = checksumCharsP[remainder];\n                break;\n            default:\n                return false;\n        }\n\n        return fin[8] == expectedChecksum;\n    }\n\n    public static void Main(string[] args)\n    {\n        string fin = "F1234567N";\n        bool isValid = IsValidFIN(fin);\n        Console.WriteLine($"FIN {fin} is valid: {isValid}");\n    }\n}