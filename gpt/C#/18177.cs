using System;\nusing System.Reflection;\nusing System.Security.Principal;\nusing System.Threading;\n\nnamespace SandboxExample\n{\n    public class Evaluator\n    {\n        public Object Evaluate(String value)\n        {\n            // Begin external code\n            Int32 _index = value.LastIndexOf('.');\n            String _retVal = value.Substring(_index + 1);\n            return _retVal;\n            // End external code\n        }\n    }\n\n    class Program\n    {\n        static void DoSandboxedEvaluation(Object obj)\n        {\n            string codeToEvaluate = obj as string;\n            if (codeToEvaluate == null)\n                throw new ArgumentException("Invalid argument");\n\n            Evaluator evaluator = new Evaluator();\n            var result = evaluator.Evaluate(codeToEvaluate);\n            Console.WriteLine("Result: " + result);\n        }\n\n        static void Main(string[] args)\n        {\n            // The code to evaluate\n            string codeToEvaluate = "example.value";\n\n            Thread tSandbox = new Thread(new ParameterizedThreadStart(DoSandboxedEvaluation));\n            \n            // Impersonate the anonymous user\n            WindowsIdentity tIdentity = WindowsIdentity.GetAnonymous();\n            WindowsImpersonationContext impersonationContext = tIdentity.Impersonate();\n\n            try\n            {\n                tSandbox.Start(codeToEvaluate);\n                tSandbox.Join();\n            }\n            finally\n            {\n                // Revert impersonation\n                if (impersonationContext != null)\n                {\n                    impersonationContext.Undo();\n                }\n            }\n        }\n    }\n}