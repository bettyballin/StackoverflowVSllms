// POCO Class\npublic class User\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n\n// Database-Specific Model with ORM Attributes (e.g., for Entity Framework)\npublic class UserEntity\n{\n    [Key]\n    public int Id { get; set; }\n    \n    [Column("username")]\n    public string Name { get; set; }\n}\n\n// DTO for XML Serialization\npublic class UserXmlDto\n{\n    [XmlElement("UserId")]\n    public int Id { get; set; }\n    \n    [XmlElement("UserName")]\n    public string Name { get; set; }\n}\n\n// AutoMapper Configuration\npublic class MappingProfile : Profile\n{\n    public MappingProfile()\n    {\n        CreateMap<User, UserEntity>().ReverseMap();\n        CreateMap<User, UserXmlDto>().ReverseMap();\n    }\n}\n\n// Repository Interface\npublic interface IUserRepository\n{\n    User GetUserById(int id);\n    void SaveUser(User user);\n}\n\n// Implementation of the Repository for Entity Framework\npublic class UserRepository : IUserRepository\n{\n    private readonly DbContext _context;\n    private readonly IMapper _mapper;\n\n    public UserRepository(DbContext context, IMapper mapper)\n    {\n        _context = context;\n        _mapper = mapper;\n    }\n\n    public User GetUserById(int id)\n    {\n        var userEntity = _context.Set<UserEntity>().Find(id);\n        return _mapper.Map<User>(userEntity);\n    }\n\n    public void SaveUser(User user)\n    {\n        var userEntity = _context.Set<UserEntity>().Find(user.Id);\n        if (userEntity == null)\n        {\n            userEntity = _mapper.Map<UserEntity>(user);\n            _context.Set<UserEntity>().Add(userEntity);\n        }\n        else\n        {\n            _mapper.Map(user, userEntity);\n            _context.Set<UserEntity>().Update(userEntity);\n        }\n        _context.SaveChanges();\n    }\n}