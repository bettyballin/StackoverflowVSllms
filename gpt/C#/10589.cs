private void ValidateForm_Click(object sender, RoutedEventArgs e)\n{\n    // Assuming 'this' is the window or user control containing the form\n    bool hasErrors = false;\n\n    foreach (var element in GetLogicalChildCollection<FrameworkElement>(this))\n    {\n        if (element is TextBox || element is ComboBox || element is DatePicker)\n        {\n            // Force validation update\n            element.GetBindingExpression(TextBox.TextProperty)?.UpdateSource();\n            element.GetBindingExpression(ComboBox.SelectedItemProperty)?.UpdateSource();\n            element.GetBindingExpression(DatePicker.SelectedDateProperty)?.UpdateSource();\n\n            // Check for validation errors\n            if (Validation.GetHasError(element))\n            {\n                hasErrors = true;\n                // Optionally, you can collect and display the errors here\n            }\n        }\n    }\n\n    if (hasErrors)\n    {\n        MessageBox.Show("Form has validation errors.");\n    }\n    else\n    {\n        MessageBox.Show("Form is valid.");\n    }\n}\n\nprivate static IEnumerable<T> GetLogicalChildCollection<T>(object parent) where T : DependencyObject\n{\n    var logicalObjects = new List<T>();\n    GetLogicalChildCollection(parent as DependencyObject, logicalObjects);\n    return logicalObjects;\n}\n\nprivate static void GetLogicalChildCollection<T>(DependencyObject parent, ICollection<T> logicalObjects) where T : DependencyObject\n{\n    if (parent == null) return;\n\n    foreach (object child in LogicalTreeHelper.GetChildren(parent))\n    {\n        if (child is T)\n        {\n            logicalObjects.Add((T)child);\n        }\n\n        if (child is DependencyObject)\n        {\n            GetLogicalChildCollection((DependencyObject)child, logicalObjects);\n        }\n    }\n}