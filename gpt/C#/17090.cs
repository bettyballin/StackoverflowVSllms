using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Http;\nusing System.Threading.Tasks;\n\npublic class CustomAuthenticationMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public CustomAuthenticationMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        // Perform your custom authentication logic here\n        var isAuthenticated = AuthenticateUser(context);\n\n        if (!isAuthenticated)\n        {\n            // If authentication fails, set the response status code to 401 Unauthorized\n            context.Response.StatusCode = StatusCodes.Status401Unauthorized;\n            await context.Response.WriteAsync("Unauthorized");\n            return;\n        }\n\n        // Call the next middleware in the pipeline\n        await _next(context);\n    }\n\n    private bool AuthenticateUser(HttpContext context)\n    {\n        // Implement your authentication logic here\n        // For example, check for a specific header or token\n        var authHeader = context.Request.Headers["Authorization"];\n        if (string.IsNullOrEmpty(authHeader))\n        {\n            return false;\n        }\n\n        // Validate the token or header value\n        // This is just a simple example, replace with your actual validation logic\n        return authHeader == "ValidToken";\n    }\n}\n\n// Extension method used to add the middleware to the HTTP request pipeline\npublic static class CustomAuthenticationMiddlewareExtensions\n{\n    public static IApplicationBuilder UseCustomAuthentication(this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware<CustomAuthenticationMiddleware>();\n    }\n}