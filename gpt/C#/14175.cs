using System;\nusing System.IO;\nusing Org.BouncyCastle.Bcpg.OpenPgp;\nusing Org.BouncyCastle.Bcpg;\nusing Org.BouncyCastle.Security;\n\npublic class PgpEncryptSign\n{\n    public static void EncryptAndSignFile(string inputFile, string encryptedOutputFile, string publicKeyFile, string privateKeyFile, string passPhrase)\n    {\n        using (Stream publicKeyStream = File.OpenRead(publicKeyFile))\n        using (Stream privateKeyStream = File.OpenRead(privateKeyFile))\n        using (Stream outputStream = File.Create(encryptedOutputFile))\n        {\n            PgpPublicKey publicKey = ReadPublicKey(publicKeyStream);\n            PgpSecretKey secretKey = ReadSecretKey(privateKeyStream);\n            PgpPrivateKey privateKey = secretKey.ExtractPrivateKey(passPhrase.ToCharArray());\n\n            PgpEncryptedDataGenerator encryptedDataGenerator = new PgpEncryptedDataGenerator(SymmetricKeyAlgorithmTag.Cast5, true, new SecureRandom());\n            encryptedDataGenerator.AddMethod(publicKey);\n\n            using (Stream encryptedOut = encryptedDataGenerator.Open(outputStream, new byte[1 << 16]))\n            {\n                PgpCompressedDataGenerator compressedDataGenerator = new PgpCompressedDataGenerator(CompressionAlgorithmTag.Zip);\n                using (Stream compressedOut = compressedDataGenerator.Open(encryptedOut))\n                {\n                    PgpSignatureGenerator signatureGenerator = new PgpSignatureGenerator(secretKey.PublicKey.Algorithm, HashAlgorithmTag.Sha1);\n                    signatureGenerator.InitSign(PgpSignature.BinaryDocument, privateKey);\n\n                    foreach (string userId in secretKey.PublicKey.GetUserIds())\n                    {\n                        PgpSignatureSubpacketGenerator subPacketGenerator = new PgpSignatureSubpacketGenerator();\n                        subPacketGenerator.SetSignerUserId(false, userId);\n                        signatureGenerator.SetHashedSubpackets(subPacketGenerator.Generate());\n                        break;\n                    }\n\n                    signatureGenerator.GenerateOnePassVersion(false).Encode(compressedOut);\n\n                    PgpLiteralDataGenerator literalDataGenerator = new PgpLiteralDataGenerator();\n                    using (Stream literalOut = literalDataGenerator.Open(compressedOut, PgpLiteralData.Binary, inputFile, File.GetLastWriteTime(inputFile), new byte[1 << 16]))\n                    using (FileStream inputFileStream = File.OpenRead(inputFile))\n                    {\n                        int ch;\n                        while ((ch = inputFileStream.ReadByte()) >= 0)\n                        {\n                            literalOut.WriteByte((byte)ch);\n                            signatureGenerator.Update((byte)ch);\n                        }\n                    }\n\n                    signatureGenerator.Generate().Encode(compressedOut);\n                }\n            }\n        }\n    }\n\n    private static PgpPublicKey ReadPublicKey(Stream inputStream)\n    {\n        PgpPublicKeyRingBundle pgpPub = new PgpPublicKeyRingBundle(PgpUtilities.GetDecoderStream(inputStream));\n        foreach (PgpPublicKeyRing kRing in pgpPub.GetKeyRings())\n        {\n            foreach (PgpPublicKey key in kRing.GetPublicKeys())\n            {\n                if (key.IsEncryptionKey)\n                {\n                    return key;\n                }\n            }\n        }\n        throw new ArgumentException("Can't find encryption key in key ring.");\n    }\n\n    private static PgpSecretKey ReadSecretKey(Stream inputStream)\n    {\n        PgpSecretKeyRingBundle pgpSec = new PgpSecretKeyRingBundle(PgpUtilities.GetDecoderStream(inputStream));\n        foreach (PgpSecretKeyRing kRing in pgpSec.GetKeyRings())\n        {\n            foreach (PgpSecretKey key in kRing.GetSecretKeys())\n            {\n                if (key.IsSigningKey)\n                {\n                    return key;\n                }\n            }\n        }\n        throw new ArgumentException("Can't find signing key in key ring.");\n    }\n}