public class AccountController : Controller\n{\n    private static readonly Dictionary<string, string> UserSessions = new Dictionary<string, string>();\n\n    [HttpPost]\n    public ActionResult Login(LoginViewModel model)\n    {\n        if (ModelState.IsValid)\n        {\n            // Validate user credentials\n            var user = ValidateUser(model.Username, model.Password);\n            if (user != null)\n            {\n                var sessionId = Session.SessionID;\n                lock (UserSessions)\n                {\n                    if (UserSessions.ContainsKey(user.UserName))\n                    {\n                        // Invalidate previous session\n                        string previousSessionId = UserSessions[user.UserName];\n                        // Assuming we have a method to remove the previous session\n                        InvalidateSession(previousSessionId);\n                    }\n                    UserSessions[user.UserName] = sessionId;\n                }\n\n                // Set authentication cookie and redirect\n                FormsAuthentication.SetAuthCookie(user.UserName, model.RememberMe);\n                return RedirectToAction("Index", "Home");\n            }\n            else\n            {\n                ModelState.AddModelError("", "Invalid username or password");\n            }\n        }\n\n        return View(model);\n    }\n\n    private void InvalidateSession(string sessionId)\n    {\n        // Method to invalidate previous session\n        // This could be implemented by storing sessions in a database and removing the entry\n    }\n\n    private User ValidateUser(string username, string password)\n    {\n        // Method to validate user credentials\n        // Replace this with actual user validation logic\n        return new User { UserName = username };\n    }\n}\n\npublic class User\n{\n    public string UserName { get; set; }\n}