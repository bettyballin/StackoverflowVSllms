// Singleton pattern for JVM initialization\npublic class JavaVMManager\n{\n    private static JavaVMManager _instance;\n    private static readonly object _lock = new object();\n    private bool _isInitialized = false;\n\n    private JavaVMManager() { }\n\n    public static JavaVMManager Instance\n    {\n        get\n        {\n            lock (_lock)\n            {\n                if (_instance == null)\n                {\n                    _instance = new JavaVMManager();\n                }\n                return _instance;\n            }\n        }\n    }\n\n    public void Initialize()\n    {\n        if (!_isInitialized)\n        {\n            // Code to initialize the JavaVM\n            // ...\n\n            _isInitialized = true;\n        }\n    }\n}\n\n// NUnit SetUpFixture to ensure JVM is initialized once per test run\n[SetUpFixture]\npublic class TestSetup\n{\n    [OneTimeSetUp]\n    public void GlobalSetup()\n    {\n        JavaVMManager.Instance.Initialize();\n    }\n}\n\n// Example of a test class\n[TestFixture]\npublic class MyComponentTests\n{\n    private MyComponent _myComponent;\n\n    [SetUp]\n    public void SetUp()\n    {\n        // Assuming MyComponent depends on JavaVMManager\n        _myComponent = new MyComponent(JavaVMManager.Instance);\n    }\n\n    [Test]\n    public void TestMethod1()\n    {\n        // Test code here\n    }\n\n    [Test]\n    public void TestMethod2()\n    {\n        // Test code here\n    }\n}