using System;\n   using System.Data;\n   using Microsoft.Data.Sqlite;\n   using NetTopologySuite.Features;\n   using NetTopologySuite.IO.ShapeFile.Extended;\n   using NetTopologySuite.IO.ShapeFile.Extended.Entities;\n\n   namespace ShapefileReader\n   {\n       class Program\n       {\n           static void Main(string[] args)\n           {\n               string shapefilePath = @"path\to\your\shapefile.shp"; // Update this path\n               string dbfFilePath = @"path\to\your\shapefile.dbf";   // Update this path\n\n               // Read shapefile and dbf file\n               using (var shapefileDataReader = new ShapefileDataReader(shapefilePath, GeometryFactory.Default))\n               {\n                   var header = shapefileDataReader.DbaseHeader;\n\n                   while (shapefileDataReader.Read())\n                   {\n                       var feature = shapefileDataReader.Geometry;\n                       var attributes = shapefileDataReader.DbaseRecord;\n                       \n                       // Assuming the address field is named "Address"\n                       string address = attributes["Address"].ToString();\n\n                       Console.WriteLine($"Address: {address}");\n\n                       // Optionally, save to your database\n                       SaveToDatabase(address);\n                   }\n               }\n           }\n\n           static void SaveToDatabase(string address)\n           {\n               string connectionString = "Data Source=your_database.db"; // Update with your database connection string\n\n               using (var connection = new SqliteConnection(connectionString))\n               {\n                   connection.Open();\n\n                   string insertCommand = "INSERT INTO Addresses (Address) VALUES (@Address)";\n                   using (var command = new SqliteCommand(insertCommand, connection))\n                   {\n                       command.Parameters.AddWithValue("@Address", address);\n                       command.ExecuteNonQuery();\n                   }\n               }\n           }\n       }\n   }