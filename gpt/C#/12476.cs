using System.Windows;\nusing System.Windows.Input;\nusing System.Windows.Media;\n\nnamespace OpacityMaskExample\n{\n    public partial class MainWindow : Window\n    {\n        private bool isDragging = false;\n        private Point clickPosition;\n\n        public MainWindow()\n        {\n            InitializeComponent();\n        }\n\n        private void DragImage_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)\n        {\n            isDragging = true;\n            clickPosition = e.GetPosition(this);\n            DragImage.CaptureMouse();\n        }\n\n        private void DragImage_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)\n        {\n            isDragging = false;\n            DragImage.ReleaseMouseCapture();\n        }\n\n        private void DragImage_MouseMove(object sender, MouseEventArgs e)\n        {\n            if (isDragging)\n            {\n                Point currentPosition = e.GetPosition(this);\n                var transform = DragImage.RenderTransform as TranslateTransform;\n                if (transform == null)\n                {\n                    transform = new TranslateTransform();\n                    DragImage.RenderTransform = transform;\n                }\n                transform.X = currentPosition.X - clickPosition.X;\n                transform.Y = currentPosition.Y - clickPosition.Y;\n\n                // Check if the image is over the background control\n                var imageBounds = DragImage.TransformToAncestor(this).TransformBounds(new Rect(DragImage.RenderSize));\n                var backgroundBounds = BackgroundControl.TransformToAncestor(this).TransformBounds(new Rect(BackgroundControl.RenderSize));\n\n                if (imageBounds.IntersectsWith(backgroundBounds))\n                {\n                    DragImage.Opacity = 1.0;\n                }\n                else\n                {\n                    DragImage.Opacity = 0.5;\n                }\n            }\n        }\n    }\n}