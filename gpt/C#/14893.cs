// Assuming you have a ComboBox named comboBoxType and a data source named typesDataSource\n\n// Add a placeholder for the null value to the data source\nvar nullItem = new { Id = (int?)null, Name = "None" };\nvar typesList = typesDataSource.ToList();\ntypesList.Insert(0, nullItem);\n\n// Bind the modified list to the ComboBox\ncomboBoxType.DataSource = typesList;\ncomboBoxType.DisplayMember = "Name";\ncomboBoxType.ValueMember = "Id";\n\n// When setting the ComboBox value, handle the null case\nif (customer.Type == null)\n{\n    comboBoxType.SelectedIndex = 0; // Select the "None" item\n}\nelse\n{\n    comboBoxType.SelectedValue = customer.Type;\n}\n\n// Ensure that null is handled properly when getting the selected value\nvar selectedValue = comboBoxType.SelectedValue;\nif (selectedValue == null || selectedValue == DBNull.Value)\n{\n    customer.Type = null;\n}\nelse\n{\n    customer.Type = (int?)selectedValue;\n}