using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace GridTest\n{\n    public partial class Form1 : Form\n    {\n        Graphics g;\n        const int gridsize = 20;\n        private bool isSnapping = false;\n\n        public Form1()\n        {\n            InitializeComponent();\n            g = splitContainer1.Panel2.CreateGraphics();\n            splitContainer1.Panel2.Invalidate();\n        }\n\n        private void splitContainer1_Panel2_Paint(object sender, PaintEventArgs e)\n        {\n            Drawgrid();\n        }\n\n        private void Drawgrid()\n        {\n            for (int x = 0; x < splitContainer1.Panel2.ClientSize.Width; x += gridsize)\n            {\n                for (int y = 0; y < splitContainer1.Panel2.ClientSize.Height; y += gridsize)\n                {\n                    g.DrawLine(Pens.Black, new Point(x, y), new Point(x + 1, y));\n                }\n            }\n        }\n\n        private void splitContainer1_Panel2_MouseMove(object sender, MouseEventArgs e)\n        {\n            if (isSnapping) return;\n\n            Point newPosition = RoundToNearest(gridsize, e.Location);\n            Point screenPosition = splitContainer1.Panel2.PointToScreen(newPosition);\n\n            if (Cursor.Position != screenPosition)\n            {\n                isSnapping = true;\n                Cursor.Position = screenPosition;\n                isSnapping = false;\n            }\n        }\n\n        private Point RoundToNearest(int nearestRoundValue, Point currentPoint)\n        {\n            Point newPoint = new Point();\n            int lastDigit;\n\n            lastDigit = currentPoint.X % nearestRoundValue;\n            newPoint.X = lastDigit >= (nearestRoundValue / 2) ? \n                         currentPoint.X - lastDigit + nearestRoundValue : \n                         currentPoint.X - lastDigit;\n\n            lastDigit = currentPoint.Y % nearestRoundValue;\n            newPoint.Y = lastDigit >= (nearestRoundValue / 2) ? \n                         currentPoint.Y - lastDigit + nearestRoundValue : \n                         currentPoint.Y - lastDigit;\n\n            return newPoint;\n        }\n    }\n}