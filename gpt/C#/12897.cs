using System;\nusing System.IO;\n\nnamespace Diones.Util.IO\n{\n    public abstract class FileItem : IComparable\n    {\n        protected String path;\n        public String Path\n        {\n            set { this.path = value; }\n            get { return this.path; }\n        }\n        protected bool isDirectory;\n        public bool IsDirectory\n        {\n            set { this.isDirectory = value; }\n            get { return this.isDirectory; }\n        }\n\n        public abstract void delete();\n        protected abstract void deleteRecursive();\n        public abstract void copy(FileItem fileD);\n        protected abstract void copyRecursive(FileItem fileD);\n\n        public FileItem(String path)\n        {\n            Path = path;\n            if (path.EndsWith("\\") || path.EndsWith("/")) IsDirectory = true;\n            else IsDirectory = false;\n        }\n\n        public FileItem(FileSource directory)\n        {\n            Path = directory.Path;\n        }\n\n        public override String ToString()\n        {\n            return Path;\n        }\n\n        public abstract int CompareTo(object b);\n    }\n\n    public class LocalFileItem : FileItem\n    {\n        public override void delete()\n        {\n            if (!IsDirectory) File.Delete(this.Path);\n            else deleteRecursive();\n        }\n\n        protected override void deleteRecursive()\n        {\n            Directory.Delete(Path, true);\n        }\n\n        public override void copy(FileItem destination)\n        {\n            if (!IsDirectory) \n            {\n                File.Copy(Path, destination.Path, true); // Corrected the parameter order\n            }\n            else \n            {\n                copyRecursive(destination);\n            }\n        }\n\n        protected override void copyRecursive(FileItem destination)\n        {\n            Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(\n                Path, destination.Path, true);\n        }\n\n        public LocalFileItem(String path) : base(path) { }\n\n        public LocalFileItem(FileSource path) : base(path) { }\n\n        public override int CompareTo(object obj)\n        {\n            if (obj is FileItem)\n            {\n                FileItem fi = (FileItem)obj;\n                if (File.GetCreationTime(this.Path).CompareTo(File.GetCreationTime(fi.Path)) > 0) return 1;\n                else if (File.GetCreationTime(this.Path).CompareTo(File.GetCreationTime(fi.Path)) < 0) return -1;\n                else\n                {\n                    if (File.GetLastWriteTime(this.Path).CompareTo(File.GetLastWriteTime(fi.Path)) < 0) return -1;\n                    else if (File.GetLastWriteTime(this.Path).CompareTo(File.GetLastWriteTime(fi.Path)) > 0) return 1;\n                    else return 0;\n                }\n            }\n            else\n                throw new ArgumentException("obj isn't a FileItem");\n        }\n    }\n}