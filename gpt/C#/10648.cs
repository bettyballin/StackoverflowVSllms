using System;\n   using System.Web;\n   using System.Web.Mvc;\n\n   public class CustomAuthorizeAttribute : AuthorizeAttribute\n   {\n       protected override bool AuthorizeCore(HttpContextBase httpContext)\n       {\n           if (httpContext == null)\n               throw new ArgumentNullException("httpContext");\n\n           // Check if the user is authenticated\n           if (!httpContext.User.Identity.IsAuthenticated)\n               return false;\n\n           // Retrieve the user object from the session\n           var user = httpContext.Session["User"] as UserSessionModel;\n           if (user == null)\n               return false;\n\n           // Check if the IP matches\n           string userIp = httpContext.Session["UserIP"] as string;\n           if (userIp == null || userIp != httpContext.Request.UserHostAddress)\n               return false;\n\n           // Check if the user has access to the specific area\n           string area = httpContext.Request.RequestContext.RouteData.Values["area"] as string;\n           if (!user.HasAccessToArea(area))\n               return false;\n\n           return true;\n       }\n\n       protected override void HandleUnauthorizedRequest(AuthorizationContext filterContext)\n       {\n           // Redirect the user to the login page or show an unauthorized message\n           filterContext.Result = new RedirectToRouteResult(\n               new System.Web.Routing.RouteValueDictionary(\n                   new { controller = "Account", action = "Login" }\n               )\n           );\n       }\n   }