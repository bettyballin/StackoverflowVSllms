using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Field\n{\n    public string ObjectName { get; set; }\n    public string ObjectType { get; set; }\n    public string FieldName { get; set; }\n    public string FieldValue { get; set; }\n\n    // Constructor\n    public Field(string objectName, string objectType, string fieldName, string fieldValue)\n    {\n        ObjectName = objectName;\n        ObjectType = objectType;\n        FieldName = fieldName;\n        FieldValue = fieldValue;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        List<Field> fieldList = new List<Field>\n        {\n            new Field("Object1", "Type1", "Field1", "Value1"),\n            new Field("Object2", "Type2", "Field2", "Value2"),\n            new Field("Object1", "Type1", "Field3", "Value3"),\n            new Field("Object3", "Type3", "Field4", "Value4")\n        };\n\n        var distinctObjectNames = fieldList.Select(field => field.ObjectName).Distinct().ToList();\n\n        // Assuming checkedListBox is instance of CheckedListBox control\n        // checkedListBox.Items.AddRange(distinctObjectNames.ToArray());\n\n        // For demonstration, printing the distinct object names\n        foreach (var name in distinctObjectNames)\n        {\n            Console.WriteLine(name);\n        }\n    }\n}