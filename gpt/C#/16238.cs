using System;\nusing System.Collections.Generic;\nusing System.Linq.Expressions;\n\npublic class Rule\n{\n    public string Field { get; set; }\n    public string Operator { get; set; }\n    public object Value { get; set; }\n}\n\npublic class Item\n{\n    public int SomeField { get; set; }\n    // Add other fields as needed\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Sample data\n        var items = new List<Item>\n        {\n            new Item { SomeField = 5 },\n            new Item { SomeField = 10 }\n        };\n\n        var rule = new Rule\n        {\n            Field = "SomeField",\n            Operator = ">",\n            Value = 7\n        };\n\n        foreach (var item in items)\n        {\n            if (EvaluateRule(item, rule))\n            {\n                // Do work\n                Console.WriteLine("Rule matched for item with SomeField = " + item.SomeField);\n            }\n        }\n    }\n\n    public static bool EvaluateRule(Item item, Rule rule)\n    {\n        var param = Expression.Parameter(typeof(Item), "item");\n        var member = Expression.Property(param, rule.Field);\n        var constant = Expression.Constant(Convert.ChangeType(rule.Value, member.Type));\n\n        Expression comparison = rule.Operator switch\n        {\n            "==" => Expression.Equal(member, constant),\n            "!=" => Expression.NotEqual(member, constant),\n            ">" => Expression.GreaterThan(member, constant),\n            ">=" => Expression.GreaterThanOrEqual(member, constant),\n            "<" => Expression.LessThan(member, constant),\n            "<=" => Expression.LessThanOrEqual(member, constant),\n            _ => throw new NotSupportedException($"Operator {rule.Operator} is not supported")\n        };\n\n        var lambda = Expression.Lambda<Func<Item, bool>>(comparison, param).Compile();\n        return lambda(item);\n    }\n}