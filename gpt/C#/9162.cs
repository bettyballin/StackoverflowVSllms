using System;\n\npublic class BoyerMooreSearch\n{\n    private int[] BuildBadCharTable(string pattern)\n    {\n        int[] badCharTable = new int[256];\n        for (int i = 0; i < 256; i++)\n        {\n            badCharTable[i] = pattern.Length;\n        }\n        for (int i = 0; i < pattern.Length - 1; i++)\n        {\n            badCharTable[(int)pattern[i]] = pattern.Length - 1 - i;\n        }\n        return badCharTable;\n    }\n\n    public int Search(string text, string pattern)\n    {\n        int[] badCharTable = BuildBadCharTable(pattern);\n        int offset = 0;\n        while (offset <= (text.Length - pattern.Length))\n        {\n            int scanIndex = pattern.Length - 1;\n            while (pattern[scanIndex] == text[scanIndex + offset])\n            {\n                if (scanIndex == 0)\n                {\n                    return offset;\n                }\n                scanIndex--;\n            }\n            offset += Math.Max(1, badCharTable[text[offset + pattern.Length - 1]]);\n        }\n        return -1; // Pattern not found\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        string text = "This is a sample text for testing the Boyer-Moore search algorithm.";\n        string pattern = "Boyer-Moore";\n\n        BoyerMooreSearch bmSearch = new BoyerMooreSearch();\n        int result = bmSearch.Search(text, pattern);\n\n        if (result != -1)\n        {\n            Console.WriteLine($"Pattern found at index {result}");\n        }\n        else\n        {\n            Console.WriteLine("Pattern not found");\n        }\n    }\n}