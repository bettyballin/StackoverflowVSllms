using System;\nusing System.Collections.Generic;\n\nclass RandomizeWhenEqualComparer<T> : IComparer<T>\n{\n    private readonly Func<T, T, int> _comparer;\n    private readonly Random _random;\n\n    public RandomizeWhenEqualComparer(Func<T, T, int> comparer)\n    {\n        _comparer = comparer;\n        _random = new Random();\n    }\n\n    public int Compare(T x, T y)\n    {\n        int result = _comparer(x, y);\n\n        if (result == 0)\n        {\n            // Return a random value (-1 or 1) to shuffle equal elements randomly\n            return _random.Next(2) == 0 ? -1 : 1;\n        }\n\n        return result;\n    }\n}\n\n// Example usage with a list of objects that have a Score property\npublic class MyObject\n{\n    public int Score { get; set; }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        List<MyObject> myList = new List<MyObject>\n        {\n            new MyObject { Score = 10 },\n            new MyObject { Score = 20 },\n            new MyObject { Score = 10 },\n            new MyObject { Score = 30 }\n        };\n\n        myList.Sort(new RandomizeWhenEqualComparer<MyObject>((x, y) => x.Score.CompareTo(y.Score)));\n\n        foreach (var item in myList)\n        {\n            Console.WriteLine(item.Score);\n        }\n    }\n}