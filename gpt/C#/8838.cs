using System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing System.Timers;\n\nclass Program\n{\n    private static Timer _timer;\n    private static readonly HttpClient _httpClient = new HttpClient();\n    private static readonly string _webServiceUrl = "http://example.com/api/service";\n\n    static async Task Main(string[] args)\n    {\n        _timer = new Timer(60000); // Check every 60 seconds\n        _timer.Elapsed += async (sender, e) => await CheckServiceStatus();\n        _timer.AutoReset = true;\n        _timer.Enabled = true;\n\n        Console.WriteLine("Service monitoring started. Press [Enter] to exit...");\n        Console.ReadLine();\n    }\n\n    private static async Task CheckServiceStatus()\n    {\n        try\n        {\n            HttpResponseMessage response = await _httpClient.GetAsync(_webServiceUrl);\n            if (response.IsSuccessStatusCode)\n            {\n                Console.WriteLine($"Service is up. Status code: {response.StatusCode}");\n            }\n            else\n            {\n                Console.WriteLine($"Service is down. Status code: {response.StatusCode}");\n                // Implement notification logic here (email, log, etc.)\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($"Exception: {ex.Message}");\n            // Implement notification logic here (email, log, etc.)\n        }\n    }\n}