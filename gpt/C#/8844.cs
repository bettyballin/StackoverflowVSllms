using System;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Threading;\n\npublic class Server\n{\n    private ManualResetEvent _AllDone = new ManualResetEvent(false);\n\n    internal void Initialize(int port, string IP)\n    {\n        IPEndPoint _Point = new IPEndPoint(IPAddress.Parse(IP), port);\n        Socket _Accpt = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n        _Accpt.Bind(_Point);\n        _Accpt.Listen(2);\n\n        while (true)\n        {\n            _AllDone.Reset();\n            try\n            {\n                _Accpt.BeginAccept(new AsyncCallback(Accept), _Accpt);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine("BeginAccept Exception: " + ex.Message);\n                continue;\n            }\n            _AllDone.WaitOne(); // This will wait until the Accept method is called and _AllDone is set\n        }\n    }\n\n    private void Accept(IAsyncResult async)\n    {\n        try\n        {\n            Socket _Accpt = (Socket)async.AsyncState;\n            Socket _Handler = _Accpt.EndAccept(async);\n            Console.WriteLine("Connection accepted.");\n\n            _AllDone.Set();\n\n            StateObject _State = new StateObject();\n            _State.workSocket = _Handler;\n\n            _Handler.BeginReceive(_State.buffer, 0, StateObject.BufferSize, 0, new AsyncCallback(ReadCallback), _State);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine("Accept Exception: " + ex.Message);\n        }\n    }\n\n    private void ReadCallback(IAsyncResult async)\n    {\n        // Your ReadCallback implementation here\n    }\n\n    public class StateObject\n    {\n        public Socket workSocket = null;\n        public const int BufferSize = 1024;\n        public byte[] buffer = new byte[BufferSize];\n    }\n}