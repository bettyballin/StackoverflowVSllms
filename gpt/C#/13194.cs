using System.Collections.ObjectModel;\nusing System.ComponentModel;\nusing System.Linq;\nusing System.Runtime.CompilerServices;\n\npublic class MainViewModel : INotifyPropertyChanged\n{\n    private MyDataContext _context;\n    private Company _selectedCompany;\n\n    public ObservableCollection<Company> Companies { get; set; }\n\n    public Company SelectedCompany\n    {\n        get { return _selectedCompany; }\n        set\n        {\n            _selectedCompany = value;\n            OnPropertyChanged();\n            OnPropertyChanged(nameof(Contacts));\n        }\n    }\n\n    public ObservableCollection<Contact> Contacts\n    {\n        get { return new ObservableCollection<Contact>(_selectedCompany?.Contacts ?? Enumerable.Empty<Contact>()); }\n    }\n\n    public MainViewModel()\n    {\n        _context = new MyDataContext(); // Replace with your actual data context\n        Companies = new ObservableCollection<Company>(_context.Companies.ToList());\n    }\n\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    protected void OnPropertyChanged([CallerMemberName] string name = null)\n    {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));\n    }\n}