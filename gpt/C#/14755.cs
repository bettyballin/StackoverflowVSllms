using System;\n    using System.Linq;\n    using System.Linq.Expressions;\n\n    public class SimpleQueryable<T> : IQueryable<T>\n    {\n        private readonly Expression _expression;\n        private readonly IQueryProvider _provider;\n\n        public SimpleQueryable(IQueryProvider provider)\n        {\n            _provider = provider;\n            _expression = Expression.Constant(this);\n        }\n\n        public SimpleQueryable(IQueryProvider provider, Expression expression)\n        {\n            _provider = provider;\n            _expression = expression;\n        }\n\n        public Type ElementType => typeof(T);\n\n        public Expression Expression => _expression;\n\n        public IQueryProvider Provider => _provider;\n\n        public IEnumerator<T> GetEnumerator()\n        {\n            return Provider.Execute<IEnumerable<T>>(Expression).GetEnumerator();\n        }\n\n        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()\n        {\n            return GetEnumerator();\n        }\n    }