using System;\n\nclass MyClass : IEquatable<MyClass>\n{\n    public int SomeValue1 = 1;\n    public int SomeValue2 = 25;\n\n    public override bool Equals(object obj)\n    {\n        return Equals(obj as MyClass);\n    }\n\n    public bool Equals(MyClass obj)\n    {\n        if (ReferenceEquals(obj, null))\n        {\n            return false;\n        }\n\n        if (ReferenceEquals(this, obj))\n        {\n            return true;\n        }\n\n        return SomeValue1 == obj.SomeValue1 && SomeValue2 == obj.SomeValue2;\n    }\n\n    public override int GetHashCode()\n    {\n        unchecked\n        {\n            int hash = 17;\n            hash = hash * 23 + SomeValue1.GetHashCode();\n            hash = hash * 23 + SomeValue2.GetHashCode();\n            return hash;\n        }\n    }\n}\n\nclass MyDerivedClass : MyClass, IEquatable<MyDerivedClass>\n{\n    public int YetAnotherValue = 2;\n\n    public override bool Equals(object obj)\n    {\n        return Equals(obj as MyDerivedClass);\n    }\n\n    public bool Equals(MyDerivedClass obj)\n    {\n        if (!base.Equals(obj))\n        {\n            return false;\n        }\n\n        if (ReferenceEquals(obj, null))\n        {\n            return false;\n        }\n\n        if (ReferenceEquals(this, obj))\n        {\n            return true;\n        }\n\n        return YetAnotherValue == obj.YetAnotherValue;\n    }\n\n    public override int GetHashCode()\n    {\n        unchecked\n        {\n            int hash = base.GetHashCode();\n            hash = hash * 23 + YetAnotherValue.GetHashCode();\n            return hash;\n        }\n    }\n}