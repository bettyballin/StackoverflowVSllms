using System;\nusing System.Collections.Generic;\nusing LinFu.DynamicProxy;\n\npublic interface IMyInterface\n{\n    string Name { get; }\n    int Age { get; }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var proxyFactory = new ProxyFactory();\n        var propertyValues = new Dictionary<string, object>\n        {\n            { "Name", "John Doe" },\n            { "Age", 30 }\n        };\n\n        var proxy = proxyFactory.CreateProxy<IMyInterface>(new MyInterceptor(propertyValues));\n\n        Console.WriteLine(proxy.Name);  // Output: John Doe\n        Console.WriteLine(proxy.Age);   // Output: 30\n    }\n}\n\npublic class MyInterceptor : IInterceptor\n{\n    private readonly Dictionary<string, object> _propertyValues;\n\n    public MyInterceptor(Dictionary<string, object> propertyValues)\n    {\n        _propertyValues = propertyValues;\n    }\n\n    public object Intercept(InvocationInfo info)\n    {\n        if (info.TargetMethod.Name.StartsWith("get_"))\n        {\n            var propertyName = info.TargetMethod.Name.Substring(4);\n            if (_propertyValues.TryGetValue(propertyName, out var value))\n            {\n                return value;\n            }\n        }\n\n        return null;\n    }\n}