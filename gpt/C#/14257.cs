using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.Data.SqlClient;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = "your_connection_string";\n        string query = "your_sql_query";\n        \n        BlockingCollection<YourDataType> dataQueue = new BlockingCollection<YourDataType>();\n        List<Task> processingTasks = new List<Task>();\n\n        // Start tasks to process data\n        for (int i = 0; i < Environment.ProcessorCount; i++)\n        {\n            processingTasks.Add(Task.Run(() => ProcessData(dataQueue)));\n        }\n\n        // Read data from SQL and add to the queue\n        Task.Run(() =>\n        {\n            using (SqlConnection connection = new SqlConnection(connectionString))\n            {\n                connection.Open();\n                using (SqlCommand command = new SqlCommand(query, connection))\n                using (SqlDataReader reader = command.ExecuteReader())\n                {\n                    while (reader.Read())\n                    {\n                        YourDataType data = new YourDataType\n                        {\n                            // Initialize your data type from reader\n                            // Example: Property1 = reader["Column1"].ToString()\n                        };\n                        dataQueue.Add(data);\n                    }\n                }\n            }\n            dataQueue.CompleteAdding();\n        }).Wait();\n\n        // Wait for all processing tasks to complete\n        Task.WaitAll(processingTasks.ToArray());\n    }\n\n    static void ProcessData(BlockingCollection<YourDataType> dataQueue)\n    {\n        foreach (var data in dataQueue.GetConsumingEnumerable())\n        {\n            // Process your data\n        }\n    }\n\n    class YourDataType\n    {\n        // Define properties here\n    }\n}