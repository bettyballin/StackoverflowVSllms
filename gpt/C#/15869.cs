using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\n\npublic class Client\n{\n    public int No { get; set; }\n    public string Name { get; set; }\n    public Address Address { get; set; }\n}\n\npublic class Address\n{\n    public string Street { get; set; }\n    public string Country { get; set; }\n}\n\npublic class PermutationsGenerator\n{\n    private static readonly int[] IntValues = { -1, 0, 1 };\n    private static readonly string[] StringValues = { null, string.Empty, "Hello World" };\n\n    public static IEnumerable<object> GetPermutations(Type myType)\n    {\n        if (myType == typeof(int))\n        {\n            return IntValues.Cast<object>();\n        }\n        else if (myType == typeof(string))\n        {\n            return StringValues.Cast<object>();\n        }\n        else if (myType.IsClass)\n        {\n            return GetClassPermutations(myType);\n        }\n        else\n        {\n            throw new NotSupportedException($"Type {myType} is not supported");\n        }\n    }\n\n    private static IEnumerable<object> GetClassPermutations(Type classType)\n    {\n        var properties = classType.GetProperties(BindingFlags.Public | BindingFlags.Instance)\n                                  .Where(p => p.CanWrite);\n\n        var propertyPermutations = properties.Select(p => GetPermutations(p.PropertyType)).ToList();\n\n        foreach (var combination in CartesianProduct(propertyPermutations))\n        {\n            var instance = Activator.CreateInstance(classType);\n            for (int i = 0; i < properties.Count(); i++)\n            {\n                properties.ElementAt(i).SetValue(instance, combination[i]);\n            }\n            yield return instance;\n        }\n    }\n\n    private static IEnumerable<IList<object>> CartesianProduct(IEnumerable<IEnumerable<object>> sequences)\n    {\n        IEnumerable<IList<object>> result = new List<IList<object>>() { new List<object>() };\n\n        foreach (var sequence in sequences)\n        {\n            result = from sequenceItem in sequence\n                     from item in result\n                     select item.Concat(new[] { sequenceItem }).ToList();\n        }\n\n        return result;\n    }\n}\n\n// Usage example\npublic class Program\n{\n    public static void Main()\n    {\n        var permutations = PermutationsGenerator.GetPermutations(typeof(Client));\n        foreach (var permutation in permutations)\n        {\n            var client = permutation as Client;\n            Console.WriteLine($"No: {client.No}, Name: {client.Name}, Address: {client.Address?.Street}, {client.Address?.Country}");\n        }\n    }\n}