using System.Collections;\nusing System.Collections.Generic;\nusing System.ComponentModel;\n\npublic class MyViewModel : INotifyPropertyChanged, INotifyDataErrorInfo\n{\n    private string _name;\n    private readonly Dictionary<string, List<string>> _errors = new Dictionary<string, List<string>>();\n\n    public string Name\n    {\n        get { return _name; }\n        set\n        {\n            if (_name != value)\n            {\n                _name = value;\n                OnPropertyChanged(nameof(Name));\n                ValidateName();\n            }\n        }\n    }\n\n    public bool HasErrors => _errors.Count > 0;\n\n    public event PropertyChangedEventHandler PropertyChanged;\n    public event EventHandler<DataErrorsChangedEventArgs> ErrorsChanged;\n\n    protected void OnPropertyChanged(string propertyName)\n    {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n    }\n\n    public IEnumerable GetErrors(string propertyName)\n    {\n        if (_errors.ContainsKey(propertyName))\n        {\n            return _errors[propertyName];\n        }\n        return null;\n    }\n\n    private void ValidateName()\n    {\n        if (string.IsNullOrWhiteSpace(Name))\n        {\n            AddError(nameof(Name), "Name cannot be empty.");\n        }\n        else\n        {\n            RemoveError(nameof(Name));\n        }\n    }\n\n    private void AddError(string propertyName, string error)\n    {\n        if (!_errors.ContainsKey(propertyName))\n        {\n            _errors[propertyName] = new List<string>();\n        }\n        if (!_errors[propertyName].Contains(error))\n        {\n            _errors[propertyName].Add(error);\n            RaiseErrorsChanged(propertyName);\n        }\n    }\n\n    private void RemoveError(string propertyName)\n    {\n        if (_errors.ContainsKey(propertyName))\n        {\n            _errors.Remove(propertyName);\n            RaiseErrorsChanged(propertyName);\n        }\n    }\n\n    private void RaiseErrorsChanged(string propertyName)\n    {\n        ErrorsChanged?.Invoke(this, new DataErrorsChangedEventArgs(propertyName));\n    }\n}