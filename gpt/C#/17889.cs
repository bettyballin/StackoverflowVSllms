// Global.asax.cs\n\npublic class Global : HttpApplication\n{\n    private static readonly object _lock = new object();\n    private static bool _isClosing = false;\n\n    protected void Application_BeginRequest(object sender, EventArgs e)\n    {\n        if (_isClosing)\n        {\n            HttpContext context = HttpContext.Current;\n\n            if (context.Session != null && context.Session["CanContinue"] != null && (bool)context.Session["CanContinue"])\n            {\n                // Allow existing sessions to continue\n                return;\n            }\n            else\n            {\n                // Redirect new sessions to maintenance page\n                context.Response.Redirect("~/app_offline.htm");\n            }\n        }\n    }\n\n    public static void StartClosing()\n    {\n        lock (_lock)\n        {\n            _isClosing = true;\n        }\n    }\n\n    public static void StopClosing()\n    {\n        lock (_lock)\n        {\n            _isClosing = false;\n        }\n    }\n}\n\n// In some admin control panel or scheduled task\npublic void StartMaintenance()\n{\n    Global.StartClosing();\n    // Optionally send notifications to existing users\n}\n\npublic void EndMaintenance()\n{\n    Global.StopClosing();\n}