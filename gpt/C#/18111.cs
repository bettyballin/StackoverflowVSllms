using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.Composition.Hosting;\nusing System.IO;\n\npublic class MefImporter\n{\n    private readonly List<ComposablePartCatalog> catalogs = new List<ComposablePartCatalog>();\n    private readonly Dictionary<object, string> partFolderMap = new Dictionary<object, string>();\n\n    public void ImportPartsFromFolders(string[] folderPaths)\n    {\n        foreach (var folderPath in folderPaths)\n        {\n            if (Directory.Exists(folderPath))\n            {\n                var directoryCatalog = new DirectoryCatalog(folderPath);\n                catalogs.Add(directoryCatalog);\n                \n                var container = new CompositionContainer(directoryCatalog);\n                foreach (var part in container.Parts)\n                {\n                    foreach (var export in part.ExportDefinitions)\n                    {\n                        var partInstance = container.GetExportedValue<object>(export.ContractName);\n                        partFolderMap[partInstance] = folderPath;\n                    }\n                }\n            }\n            else\n            {\n                Console.WriteLine($"Folder {folderPath} does not exist.");\n            }\n        }\n\n        var aggregateCatalog = new AggregateCatalog(catalogs);\n        var aggregateContainer = new CompositionContainer(aggregateCatalog);\n        \n        // Use aggregateContainer.ComposeParts(...) to compose parts as needed\n\n        // Example of accessing parts and their folder paths\n        foreach (var kvp in partFolderMap)\n        {\n            Console.WriteLine($"Part: {kvp.Key}, Folder: {kvp.Value}");\n        }\n    }\n}\n\n// Usage\npublic class Program\n{\n    public static void Main()\n    {\n        var importer = new MefImporter();\n        string[] folders = { "path/to/Test1Parts", "path/to/Test2Parts" };\n        importer.ImportPartsFromFolders(folders);\n    }\n}