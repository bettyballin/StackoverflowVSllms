using System;\nusing System.Net.Http;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class InterceptingHandler : DelegatingHandler\n{\n    public InterceptingHandler(HttpMessageHandler innerHandler) : base(innerHandler) { }\n\n    protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\n    {\n        // Inspect the request\n        Console.WriteLine($"Request: {request.Method} {request.RequestUri}");\n\n        // Cancel the request if needed\n        if (ShouldCancelRequest(request))\n        {\n            Console.WriteLine("Request cancelled.");\n            return new HttpResponseMessage(System.Net.HttpStatusCode.BadRequest)\n            {\n                ReasonPhrase = "Request cancelled by interceptor"\n            };\n        }\n\n        // Proceed with the request\n        return await base.SendAsync(request, cancellationToken);\n    }\n\n    private bool ShouldCancelRequest(HttpRequestMessage request)\n    {\n        // Implement your logic to determine if the request should be cancelled\n        // For example, cancel all requests to a specific domain\n        return request.RequestUri.Host.Contains("example.com");\n    }\n}\n\npublic class Program\n{\n    public static async Task Main(string[] args)\n    {\n        var clientHandler = new HttpClientHandler();\n        var interceptingHandler = new InterceptingHandler(clientHandler);\n        var httpClient = new HttpClient(interceptingHandler);\n\n        try\n        {\n            var response = await httpClient.GetAsync("https://www.example.com");\n            Console.WriteLine($"Response: {response.StatusCode}");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($"Exception: {ex.Message}");\n        }\n    }\n}