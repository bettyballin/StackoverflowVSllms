using System;\nusing System.Collections.Generic;\n\npublic class Range\n{\n    public int Offset { get; set; }\n    public int Length { get; set; }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var ranges = new List<Range>\n        {\n            new Range { Offset = 100, Length = 10 },\n            new Range { Offset = 110, Length = 2 },\n            new Range { Offset = 112, Length = 5 },\n            new Range { Offset = 117, Length = 3 },\n            new Range { Offset = 300, Length = 5 },\n            new Range { Offset = 305, Length = 5 },\n            new Range { Offset = 400, Length = 5 },\n            new Range { Offset = 405, Length = 10 },\n            new Range { Offset = 415, Length = 2 },\n            new Range { Offset = 417, Length = 4 },\n            new Range { Offset = 421, Length = 7 },\n            new Range { Offset = 428, Length = 1 },\n            new Range { Offset = 429, Length = 6 },\n            new Range { Offset = 500, Length = 4 },\n            new Range { Offset = 504, Length = 9 }\n        };\n\n        var longestSequence = FindLongestContiguousSubsequence(ranges);\n        Console.WriteLine("Longest contiguous subsequence indices: ");\n        foreach (var index in longestSequence)\n        {\n            Console.Write(index + " ");\n        }\n    }\n\n    public static List<int> FindLongestContiguousSubsequence(List<Range> ranges)\n    {\n        List<int> longestSequence = new List<int>();\n        List<int> currentSequence = new List<int>();\n        longestSequence.Add(0);\n        currentSequence.Add(0);\n\n        for (int i = 1; i < ranges.Count; i++)\n        {\n            if (ranges[i].Offset <= ranges[i - 1].Offset + ranges[i - 1].Length)\n            {\n                currentSequence.Add(i);\n            }\n            else\n            {\n                if (currentSequence.Count > longestSequence.Count)\n                {\n                    longestSequence = new List<int>(currentSequence);\n                }\n                currentSequence.Clear();\n                currentSequence.Add(i);\n            }\n        }\n\n        if (currentSequence.Count > longestSequence.Count)\n        {\n            longestSequence = currentSequence;\n        }\n\n        return longestSequence;\n    }\n}