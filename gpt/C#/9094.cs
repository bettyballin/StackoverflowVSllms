using System;\nusing System.Drawing;\nusing System.IO;\nusing iText.Kernel.Pdf;\nusing iText.Kernel.Pdf.Canvas.Parser;\nusing ZXing;\n\nclass Program\n{\n    static void Main()\n    {\n        // Load the PDF document\n        string pdfPath = "path_to_your_pdf_file.pdf";\n        PdfDocument pdfDoc = new PdfDocument(new PdfReader(pdfPath));\n\n        // Iterate through the pages and extract images\n        for (int i = 1; i <= pdfDoc.GetNumberOfPages(); i++)\n        {\n            var page = pdfDoc.GetPage(i);\n            var strategy = new ImageRenderListener();\n            PdfCanvasProcessor processor = new PdfCanvasProcessor(strategy);\n            processor.ProcessPageContent(page);\n\n            // Decode each extracted image\n            foreach (var image in strategy.Images)\n            {\n                Bitmap bitmap = new Bitmap(new MemoryStream(image));\n                IBarcodeReader reader = new BarcodeReader();\n                var result = reader.Decode(bitmap);\n\n                if (result != null)\n                {\n                    Console.WriteLine($"Decoded barcode text: {result.Text}");\n                    Console.WriteLine($"Barcode format: {result.BarcodeFormat}");\n                }\n                else\n                {\n                    Console.WriteLine("Barcode could not be decoded.");\n                }\n            }\n        }\n    }\n}\n\npublic class ImageRenderListener : IEventListener\n{\n    public List<byte[]> Images { get; } = new List<byte[]>();\n\n    public void EventOccurred(IEventData data, EventType type)\n    {\n        if (type == EventType.RENDER_IMAGE)\n        {\n            var renderInfo = (ImageRenderInfo)data;\n            var imageObject = renderInfo.GetImage();\n            var imageBytes = imageObject.GetImageAsBytes();\n            Images.Add(imageBytes);\n        }\n    }\n\n    public ICollection<EventType> GetSupportedEvents()\n    {\n        return new HashSet<EventType> { EventType.RENDER_IMAGE };\n    }\n}