using System;\nusing System.Runtime.Caching;\nusing System.Web;\n\npublic class IpHitCountModule : IHttpModule\n{\n    private static MemoryCache ipCache = MemoryCache.Default;\n    private static readonly object cacheLock = new object();\n    private const string cachePrefix = "IpHitCount_";\n    private const int hitCountThreshold = 100; // Example threshold\n    private const int timeWindowSeconds = 60; // Example time window\n\n    public void Init(HttpApplication context)\n    {\n        context.PreRequestHandlerExecute += new EventHandler(CheckHitCount);\n    }\n\n    public void Dispose() { }\n\n    private void CheckHitCount(object sender, EventArgs e)\n    {\n        HttpApplication app = (HttpApplication)sender;\n        string userIp = app.Context.Request.UserHostAddress;\n\n        if (userIp != null)\n        {\n            string cacheKey = cachePrefix + userIp;\n            int hitCount;\n\n            lock (cacheLock)\n            {\n                if (!ipCache.Contains(cacheKey))\n                {\n                    ipCache.Add(cacheKey, 1, DateTimeOffset.UtcNow.AddSeconds(timeWindowSeconds));\n                    hitCount = 1;\n                }\n                else\n                {\n                    hitCount = (int)ipCache.Get(cacheKey) + 1;\n                    ipCache.Set(cacheKey, hitCount, DateTimeOffset.UtcNow.AddSeconds(timeWindowSeconds));\n                }\n            }\n\n            if (hitCount > hitCountThreshold)\n            {\n                app.Context.Response.Redirect("HeavyTraffic.aspx");\n                app.CompleteRequest();\n            }\n        }\n    }\n}