using System;\nusing System.Runtime.InteropServices;\nusing System.Text;\n\npublic class CredentialManager\n{\n    public static void SaveCredential(string target, string username, string password)\n    {\n        var credential = new CREDENTIAL()\n        {\n            TargetName = target,\n            UserName = username,\n            CredentialBlob = Marshal.StringToCoTaskMemUni(password),\n            CredentialBlobSize = (uint)Encoding.Unicode.GetBytes(password).Length,\n            AttributeCount = 0,\n            Attributes = IntPtr.Zero,\n            Comment = IntPtr.Zero,\n            TargetAlias = IntPtr.Zero,\n            Type = CRED_TYPE_GENERIC,\n            Persist = (uint)CredentialPersistence.LocalMachine\n        };\n\n        bool result = CredWrite(ref credential, 0);\n        if (!result)\n        {\n            throw new Exception("Failed to save credential.");\n        }\n    }\n\n    public static string GetCredential(string target)\n    {\n        IntPtr credPointer;\n        bool result = CredRead(target, CRED_TYPE_GENERIC, 0, out credPointer);\n        if (!result)\n        {\n            throw new Exception("Failed to retrieve credential.");\n        }\n\n        var credential = (CREDENTIAL)Marshal.PtrToStructure(credPointer, typeof(CREDENTIAL));\n        string password = Marshal.PtrToStringUni(credential.CredentialBlob);\n        CredFree(credPointer);\n\n        return password;\n    }\n\n    // P/Invoke structures and functions\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]\n    struct CREDENTIAL\n    {\n        public uint Flags;\n        public uint Type;\n        public IntPtr TargetName;\n        public IntPtr Comment;\n        public long LastWritten;\n        public uint CredentialBlobSize;\n        public IntPtr CredentialBlob;\n        public uint Persist;\n        public uint AttributeCount;\n        public IntPtr Attributes;\n        public IntPtr TargetAlias;\n        public IntPtr UserName;\n    }\n\n    const uint CRED_TYPE_GENERIC = 1;\n\n    enum CredentialPersistence : uint\n    {\n        Session = 1,\n        LocalMachine,\n        Enterprise\n    }\n\n    [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Unicode)]\n    static extern bool CredWrite([In] ref CREDENTIAL userCredential, [In] uint flags);\n\n    [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Unicode)]\n    static extern bool CredRead(string target, uint type, uint flags, out IntPtr credential);\n\n    [DllImport("advapi32.dll", SetLastError = true)]\n    static extern void CredFree([In] IntPtr buffer);\n}