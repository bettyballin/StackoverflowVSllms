using System;\nusing System.Reflection;\nusing System.Security;\nusing System.Security.Permissions;\nusing System.Security.Policy;\n\nclass Program\n{\n    static void Main()\n    {\n        // Define permissions for the new AppDomain\n        PermissionSet permissionSet = new PermissionSet(PermissionState.None);\n        permissionSet.AddPermission(new SecurityPermission(SecurityPermissionFlag.Execution));\n\n        // Optionally, add other permissions as needed\n        // permissionSet.AddPermission(new UIPermission(UIPermissionWindow.SafeTopLevelWindows));\n        \n        // Define AppDomain setup information\n        AppDomainSetup setup = new AppDomainSetup\n        {\n            ApplicationBase = AppDomain.CurrentDomain.BaseDirectory\n        };\n\n        // Create the new AppDomain\n        AppDomain restrictedDomain = AppDomain.CreateDomain("RestrictedDomain", null, setup, permissionSet, null);\n\n        // Load and execute the assembly in the restricted AppDomain\n        restrictedDomain.DoCallBack(new CrossAppDomainDelegate(ExecuteInRestrictedDomain));\n\n        // Unload the AppDomain after execution to clean up\n        AppDomain.Unload(restrictedDomain);\n    }\n\n    public static void ExecuteInRestrictedDomain()\n    {\n        // Your dynamically compiled and loaded assembly should be executed here\n        // For example:\n        // Assembly assembly = Assembly.LoadFrom("YourAssembly.dll");\n        // MethodInfo method = assembly.EntryPoint;\n        // method.Invoke(null, new object[] { new string[] { } });\n        \n        // Example code to demonstrate restricted execution\n        try\n        {\n            Console.WriteLine("Executing in restricted AppDomain.");\n            // Try performing some restricted actions to test\n            // System.IO.File.Create("test.txt"); // This should throw a security exception\n        }\n        catch (SecurityException se)\n        {\n            Console.WriteLine("Security exception: " + se.Message);\n        }\n    }\n}