public abstract class AmICircular\n{\n    // assume Children is never null\n    private List<AmICircular> Children { get; set; } = new List<AmICircular>();\n\n    // assume target is never null\n    public void Add(AmICircular target)\n    {\n        target.PerformCircularReferenceCheck(this);\n        Children.Add(target);\n    }\n\n    // throws when a circular reference is detected\n    protected void PerformCircularReferenceCheck(AmICircular target)\n    {\n        if (IsReachable(target, this))\n        {\n            throw new InvalidOperationException("Circular reference detected.");\n        }\n    }\n\n    private bool IsReachable(AmICircular start, AmICircular target)\n    {\n        var visited = new HashSet<AmICircular>();\n        var stack = new Stack<AmICircular>();\n        stack.Push(start);\n\n        while (stack.Count > 0)\n        {\n            var current = stack.Pop();\n\n            if (current == target)\n            {\n                return true;\n            }\n\n            if (!visited.Contains(current))\n            {\n                visited.Add(current);\n                foreach (var child in current.Children)\n                {\n                    stack.Push(child);\n                }\n            }\n        }\n\n        return false;\n    }\n}