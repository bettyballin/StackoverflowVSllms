// FooRow.cs\n\npublic partial class FooRow : IFoo\n{\n    private Bar _bar;\n\n    Bar IFoo.Bar\n    {\n        get { return _bar; }\n    }\n\n    protected override void OnColumnChanging(DataColumnChangeEventArgs e)\n    {\n        base.OnColumnChanging(e);\n        if (e.Column.ColumnName == nameof(BarXml))\n        {\n            // Handle the column changing logic here if needed\n        }\n    }\n\n    protected override void OnColumnChanged(DataColumnChangeEventArgs e)\n    {\n        base.OnColumnChanged(e);\n        if (e.Column.ColumnName == nameof(BarXml))\n        {\n            // Deserialize the new value of BarXml and cache it in _bar\n            _bar = DeserializeBar(e.ProposedValue as string);\n        }\n    }\n\n    private Bar DeserializeBar(string barXml)\n    {\n        // Implement your deserialization logic here\n        // For example, using XmlSerializer\n        if (string.IsNullOrEmpty(barXml)) return null;\n\n        var serializer = new XmlSerializer(typeof(Bar));\n        using (var reader = new StringReader(barXml))\n        {\n            return (Bar)serializer.Deserialize(reader);\n        }\n    }\n}