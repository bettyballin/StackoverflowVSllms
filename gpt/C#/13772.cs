using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing.Design;\nusing System.Windows.Forms;\n\npublic class DynamicPropertyClass : ICustomTypeDescriptor\n{\n    private readonly PropertyDescriptorCollection _propertyDescriptors;\n\n    public DynamicPropertyClass(PropertyDescriptorCollection propertyDescriptors)\n    {\n        _propertyDescriptors = propertyDescriptors;\n    }\n\n    public AttributeCollection GetAttributes()\n    {\n        return TypeDescriptor.GetAttributes(this, true);\n    }\n\n    public string GetClassName()\n    {\n        return TypeDescriptor.GetClassName(this, true);\n    }\n\n    public string GetComponentName()\n    {\n        return TypeDescriptor.GetComponentName(this, true);\n    }\n\n    public TypeConverter GetConverter()\n    {\n        return TypeDescriptor.GetConverter(this, true);\n    }\n\n    public EventDescriptor GetDefaultEvent()\n    {\n        return TypeDescriptor.GetDefaultEvent(this, true);\n    }\n\n    public PropertyDescriptor GetDefaultProperty()\n    {\n        return TypeDescriptor.GetDefaultProperty(this, true);\n    }\n\n    public object GetEditor(Type editorBaseType)\n    {\n        return TypeDescriptor.GetEditor(this, editorBaseType, true);\n    }\n\n    public EventDescriptorCollection GetEvents(Attribute[] attributes)\n    {\n        return TypeDescriptor.GetEvents(this, attributes, true);\n    }\n\n    public EventDescriptorCollection GetEvents()\n    {\n        return TypeDescriptor.GetEvents(this, true);\n    }\n\n    public PropertyDescriptorCollection GetProperties(Attribute[] attributes)\n    {\n        return _propertyDescriptors;\n    }\n\n    public PropertyDescriptorCollection GetProperties()\n    {\n        return _propertyDescriptors;\n    }\n\n    public object GetPropertyOwner(PropertyDescriptor pd)\n    {\n        return this;\n    }\n}\n\npublic class DynamicPropertyDescriptor : PropertyDescriptor\n{\n    private readonly Type _propertyType;\n    private object _value;\n\n    public DynamicPropertyDescriptor(string name, Type propertyType, Attribute[] attrs)\n        : base(name, attrs)\n    {\n        _propertyType = propertyType;\n    }\n\n    public override bool CanResetValue(object component)\n    {\n        return false;\n    }\n\n    public override Type ComponentType\n    {\n        get { return typeof(DynamicPropertyClass); }\n    }\n\n    public override object GetValue(object component)\n    {\n        return _value;\n    }\n\n    public override bool IsReadOnly\n    {\n        get { return false; }\n    }\n\n    public override Type PropertyType\n    {\n        get { return _propertyType; }\n    }\n\n    public override void ResetValue(object component)\n    {\n    }\n\n    public override void SetValue(object component, object value)\n    {\n        _value = value;\n    }\n\n    public override bool ShouldSerializeValue(object component)\n    {\n        return true;\n    }\n}\n\npublic class MainForm : Form\n{\n    public MainForm()\n    {\n        var propertyGrid = new PropertyGrid\n        {\n            Dock = DockStyle.Fill\n        };\n\n        var properties = new PropertyDescriptorCollection(new PropertyDescriptor[]\n        {\n            new DynamicPropertyDescriptor("Color", typeof(Color), new Attribute[] { new EditorAttribute(typeof(System.Drawing.Design.ColorEditor), typeof(UITypeEditor)) }),\n            new DynamicPropertyDescriptor("Date", typeof(DateTime), new Attribute[] { new EditorAttribute(typeof(System.ComponentModel.Design.CollectionEditor), typeof(UITypeEditor)) })\n        });\n\n        var dynamicObject = new DynamicPropertyClass(properties);\n        propertyGrid.SelectedObject = dynamicObject;\n\n        Controls.Add(propertyGrid);\n    }\n\n    [STAThread]\n    public static void Main()\n    {\n        Application.Run(new MainForm());\n    }\n}