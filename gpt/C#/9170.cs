using System.Collections.Generic;\nusing System.Linq;\nusing System.Xml.Linq;\nusing Unity;\n\npublic class OperationLoader\n{\n    private readonly IUnityContainer _container;\n\n    public OperationLoader(IUnityContainer container)\n    {\n        _container = container;\n    }\n\n    public IEnumerable<IOperation> LoadOperations(string xmlPath)\n    {\n        var doc = XDocument.Load(xmlPath);\n        var operationTypes = doc.Descendants("Operation")\n                                .Select(x => x.Attribute("Type").Value)\n                                .ToList();\n\n        var operations = new List<IOperation>();\n\n        foreach (var typeName in operationTypes)\n        {\n            var type = Type.GetType(typeName);\n            if (type != null && typeof(IOperation).IsAssignableFrom(type))\n            {\n                var operation = (IOperation)_container.Resolve(type);\n                operations.Add(operation);\n            }\n        }\n\n        return operations;\n    }\n}