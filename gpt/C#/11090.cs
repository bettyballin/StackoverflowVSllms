using QuickGraph;\nusing QuickGraph.Algorithms;\nusing System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main()\n    {\n        // Create the graph\n        var graph = new AdjacencyGraph<string, Edge<string>>();\n\n        // Add vertices\n        graph.AddVertex("A");\n        graph.AddVertex("B");\n        graph.AddVertex("C");\n        graph.AddVertex("D");\n\n        // Add edges\n        graph.AddEdge(new Edge<string>("A", "B"));\n        graph.AddEdge(new Edge<string>("A", "C"));\n        graph.AddEdge(new Edge<string>("B", "D"));\n        graph.AddEdge(new Edge<string>("C", "D"));\n\n        // Define the distance function (for simplicity, all edges have weight 1)\n        Func<Edge<string>, double> edgeCost = e => 1.0;\n\n        // Compute shortest paths using Dijkstra\n        var dijkstra = graph.ShortestPathsDijkstra(edgeCost, "A");\n\n        // Get the shortest path from A to D\n        if (dijkstra("D", out IEnumerable<Edge<string>> path))\n        {\n            Console.WriteLine("Shortest path from A to D:");\n            foreach (var edge in path)\n            {\n                Console.WriteLine($"{edge.Source} -> {edge.Target}");\n            }\n        }\n        else\n        {\n            Console.WriteLine("No path from A to D found.");\n        }\n    }\n}