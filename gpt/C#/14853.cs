using System;\nusing System.IO;\nusing System.Security.Principal;\nusing System.Security.Permissions;\n\npublic class DirectoryAccess\n{\n    public void AccessFilesAndDirectories(IPrincipal userPrincipal)\n    {\n        // Ensure the userPrincipal is a WindowsPrincipal\n        if (!(userPrincipal is WindowsPrincipal windowsPrincipal))\n        {\n            throw new ArgumentException("The provided IPrincipal must be a WindowsPrincipal.");\n        }\n\n        WindowsIdentity windowsIdentity = windowsPrincipal.Identity as WindowsIdentity;\n        if (windowsIdentity == null)\n        {\n            throw new ArgumentException("The provided IPrincipal's Identity must be a WindowsIdentity.");\n        }\n\n        // Impersonate the user\n        WindowsImpersonationContext impersonationContext = null;\n        try\n        {\n            impersonationContext = windowsIdentity.Impersonate();\n            \n            // Now perform the file access operations under the impersonated user\n            string[] directories = Directory.GetDirectories(@"C:\Path\To\Directory");\n            string[] files = Directory.GetFiles(@"C:\Path\To\Directory");\n\n            // Process directories and files as needed\n            foreach (var dir in directories)\n            {\n                Console.WriteLine("Directory: " + dir);\n            }\n\n            foreach (var file in files)\n            {\n                Console.WriteLine("File: " + file);\n            }\n        }\n        finally\n        {\n            // Revert to the original user context\n            impersonationContext?.Undo();\n        }\n    }\n}