public class EventAggregator\n{\n    private readonly Dictionary<Type, List<Action<object>>> _subscribers = new Dictionary<Type, List<Action<object>>>();\n\n    public void Subscribe<T>(Action<T> action)\n    {\n        if (!_subscribers.ContainsKey(typeof(T)))\n        {\n            _subscribers[typeof(T)] = new List<Action<object>>();\n        }\n\n        _subscribers[typeof(T)].Add(x => action((T)x));\n    }\n\n    public void Publish<T>(T eventMessage)\n    {\n        if (_subscribers.ContainsKey(eventMessage.GetType()))\n        {\n            foreach (var action in _subscribers[eventMessage.GetType()])\n            {\n                action(eventMessage);\n            }\n        }\n    }\n}\n\n// Example usage\n[Export]\npublic class ControlA\n{\n    private readonly EventAggregator _eventAggregator;\n\n    [ImportingConstructor]\n    public ControlA(EventAggregator eventAggregator)\n    {\n        _eventAggregator = eventAggregator;\n    }\n\n    public void DoSomething()\n    {\n        _eventAggregator.Publish(new MyEvent { Message = "Hello from ControlA" });\n    }\n}\n\n[Export]\npublic class ControlB\n{\n    private readonly EventAggregator _eventAggregator;\n\n    [ImportingConstructor]\n    public ControlB(EventAggregator eventAggregator)\n    {\n        _eventAggregator.Subscribe<MyEvent>(OnMyEvent);\n    }\n\n    private void OnMyEvent(MyEvent myEvent)\n    {\n        Console.WriteLine(myEvent.Message); // Outputs: Hello from ControlA\n    }\n}\n\npublic class MyEvent\n{\n    public string Message { get; set; }\n}