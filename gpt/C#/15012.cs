using System;\nusing System.Text.RegularExpressions;\n\npublic class HtmlStripper\n{\n    public static string StripHtml(string input)\n    {\n        // Replace <td> tags with tabs\n        string result = Regex.Replace(input, @"<td\b(?:[^>""']|""[^""]*""|'[^']*')*>", "\t", RegexOptions.IgnoreCase);\n\n        // Use a MatchEvaluator to conditionally replace <p> and <div> tags\n        result = Regex.Replace(result, @"<(div|p)\b(?:[^>""']|""[^""]*""|'[^']*')*>", \n            new MatchEvaluator(ReplaceDivP), RegexOptions.IgnoreCase);\n        \n        // Replace </td> with nothing\n        result = Regex.Replace(result, @"</td>", "", RegexOptions.IgnoreCase);\n\n        return result;\n    }\n\n    private static string ReplaceDivP(Match match)\n    {\n        // Check if the match is within a <td> tag\n        int startIndex = Math.Max(0, match.Index - 50);  // Look behind up to 50 characters\n        string context = match.Input.Substring(startIndex, Math.Min(100, match.Input.Length - startIndex));\n\n        if (Regex.IsMatch(context, @"<td\b(?:[^>""']|""[^""]*""|'[^']*')*>", RegexOptions.IgnoreCase))\n        {\n            // If inside <td>, replace with nothing\n            return "";\n        }\n        else\n        {\n            // Otherwise, replace with double carriage returns\n            return "\r\r";\n        }\n    }\n\n    public static void Main()\n    {\n        string input = @"<td>First Text</td><td style=""background:#330000""><p style=""color:#660000;text-align:center"">Some Text</p></td>";\n        string output = StripHtml(input);\n        Console.WriteLine(output);\n    }\n}