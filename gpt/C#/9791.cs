[Fact]\npublic void Register_ShouldPreventInValidRequest()\n{\n    // Prepare the controller as needed\n    PrepareController(home, ThorController.KeyPublic, ThorController.KeyHome, HomeController.KeyRegister);\n\n    // Create an instance of the DTO with invalid data\n    var dto = new UserRegisterDto { Email = "invalidEmail" };\n\n    // Manually add validation errors to the DTO\n    var validator = new DataAnnotationsValidator();\n    var validationResults = new List<ValidationResult>();\n    var validationContext = new ValidationContext(dto, null, null);\n    Validator.TryValidateObject(dto, validationContext, validationResults, true);\n\n    // Simulate validation errors in the controller\n    foreach (var validationResult in validationResults)\n    {\n        home.ControllerContext.ValidationErrors.Add(validationResult);\n    }\n\n    // Call the action method\n    home.Register(dto);\n\n    // Assert that a redirection occurred due to validation errors\n    Assert.True(Response.WasRedirected);\n    Assert.Contains("/public/home/index", Response.RedirectedTo);\n    Assert.NotNull(home.Errors);\n}