using System;\n   using System.Runtime.InteropServices;\n   using System.Security.Principal;\n   using System.Web;\n\n   public class ImpersonationHelper\n   {\n       [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Auto)]\n       public static extern bool LogonUser(string lpszUsername, string lpszDomain, string lpszPassword,\n           int dwLogonType, int dwLogonProvider, out IntPtr phToken);\n\n       [DllImport("kernel32.dll", CharSet = CharSet.Auto)]\n       public extern static bool CloseHandle(IntPtr handle);\n\n       public static void RunAsUser(string domain, string username, string password, Action action)\n       {\n           IntPtr tokenHandle = IntPtr.Zero;\n           WindowsIdentity newId = null;\n           WindowsImpersonationContext impersonatedUser = null;\n\n           try\n           {\n               bool returnValue = LogonUser(username, domain, password,\n                   2, 0, out tokenHandle); // LOGON32_LOGON_INTERACTIVE = 2, LOGON32_PROVIDER_DEFAULT = 0\n\n               if (returnValue == false)\n               {\n                   int ret = Marshal.GetLastWin32Error();\n                   throw new System.ComponentModel.Win32Exception(ret);\n               }\n\n               newId = new WindowsIdentity(tokenHandle);\n               impersonatedUser = newId.Impersonate();\n\n               // Execute the action under the new identity\n               action();\n           }\n           finally\n           {\n               if (impersonatedUser != null)\n               {\n                   impersonatedUser.Undo();\n               }\n\n               if (tokenHandle != IntPtr.Zero)\n               {\n                   CloseHandle(tokenHandle);\n               }\n\n               if (newId != null)\n               {\n                   newId.Dispose();\n               }\n           }\n       }\n   }