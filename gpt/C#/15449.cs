using System;\nusing System.Collections.Generic;\nusing System.Data.SqlClient;\nusing System.Runtime.Caching;\n\npublic class Player\n{\n    public int PlayValue { get; set; }\n    // Other properties...\n}\n\npublic class PlayerService\n{\n    private static readonly ObjectCache Cache = MemoryCache.Default;\n    private const string CacheKey = "PlayerCache";\n    private const string ConnectionString = "your_connection_string";\n\n    public List<Player> GetTopPlayers()\n    {\n        if (Cache.Contains(CacheKey))\n        {\n            return (List<Player>) Cache[CacheKey];\n        }\n\n        var players = FetchPlayersFromDatabase();\n        Cache.Set(CacheKey, players, DateTimeOffset.UtcNow.AddHours(24)); // Cache for 24 hours\n\n        return players;\n    }\n\n    private List<Player> FetchPlayersFromDatabase()\n    {\n        var players = new List<Player>();\n\n        using (var connection = new SqlConnection(ConnectionString))\n        {\n            connection.Open();\n            var command = new SqlCommand("SELECT TOP 100 PlayValue, ... FROM tb_player ORDER BY PlayValue DESC", connection);\n            using (var reader = command.ExecuteReader())\n            {\n                while (reader.Read())\n                {\n                    players.Add(new Player\n                    {\n                        PlayValue = reader.GetInt32(0),\n                        // Map other properties...\n                    });\n                }\n            }\n        }\n\n        return players;\n    }\n}