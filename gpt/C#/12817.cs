using FluentNHibernate.Mapping;\n   using NHibernate;\n   using NHibernate.SqlTypes;\n   using NHibernate.Type;\n   using System;\n   using System.Data;\n   \n   public class PermissionType : PrimitiveType\n   {\n       public PermissionType() : base(SqlTypeFactory.Int32)\n       {\n       }\n\n       public override object Get(IDataReader rs, int index)\n       {\n           return (Permission)Enum.ToObject(typeof(Permission), rs.GetInt32(index));\n       }\n\n       public override void Set(IDbCommand cmd, object value, int index)\n       {\n           IDataParameter parameter = (IDataParameter)cmd.Parameters[index];\n           parameter.Value = (int)value;\n       }\n\n       public override Type ReturnedClass => typeof(Permission);\n\n       public override string Name => "Permission";\n       \n       public override object FromStringValue(string xml)\n       {\n           return (Permission)Enum.Parse(typeof(Permission), xml);\n       }\n\n       public override string ObjectToSQLString(object value)\n       {\n           return ((int)value).ToString();\n       }\n   }