using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Range<T> where T : IComparable<T>\n{\n    public T Start { get; set; }\n    public T End { get; set; }\n\n    public Range(T start, T end)\n    {\n        Start = start;\n        End = end;\n    }\n}\n\npublic static class RangeExtensions\n{\n    public static IEnumerable<Range<T>> Collapse<T>(this IEnumerable<Range<T>> ranges) where T : IComparable<T>\n    {\n        if (ranges == null)\n            throw new ArgumentNullException(nameof(ranges));\n\n        // Sort the ranges by starting value\n        var sortedRanges = ranges.OrderBy(r => r.Start).ToList();\n        \n        var collapsedRanges = new List<Range<T>>();\n\n        foreach (var range in sortedRanges)\n        {\n            if (collapsedRanges.Count == 0 || collapsedRanges.Last().End.CompareTo(range.Start) < 0)\n            {\n                // No overlap, add the range as is\n                collapsedRanges.Add(new Range<T>(range.Start, range.End));\n            }\n            else\n            {\n                // Overlap, merge with the last range\n                collapsedRanges.Last().End = Max(collapsedRanges.Last().End, range.End);\n            }\n        }\n\n        return collapsedRanges;\n    }\n\n    private static T Max<T>(T a, T b) where T : IComparable<T>\n    {\n        return a.CompareTo(b) > 0 ? a : b;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        var ranges = new List<Range<int>>\n        {\n            new Range<int>(1, 5),\n            new Range<int>(3, 9),\n            new Range<int>(11, 15),\n            new Range<int>(12, 14),\n            new Range<int>(13, 20)\n        };\n\n        var collapsedRanges = ranges.Collapse();\n\n        foreach (var range in collapsedRanges)\n        {\n            Console.WriteLine($"{range.Start} to {range.End}");\n        }\n    }\n}