using Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.CSharp;\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\nusing Microsoft.CodeAnalysis.FindSymbols;\nusing Microsoft.CodeAnalysis.MSBuild;\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        // Path to your solution file\n        var solutionPath = @"path\to\your\solution.sln";\n\n        // Load the solution\n        using var workspace = MSBuildWorkspace.Create();\n        var solution = await workspace.OpenSolutionAsync(solutionPath);\n\n        // Specify the class and variable names\n        var className = "Helper";\n        var variableName = "yourPublicVariable";\n\n        foreach (var project in solution.Projects)\n        {\n            var compilation = await project.GetCompilationAsync();\n            var classSymbol = compilation.GetTypeByMetadataName(className);\n            if (classSymbol == null)\n                continue;\n\n            var variableSymbol = classSymbol.GetMembers(variableName)\n                                             .OfType<IFieldSymbol>()\n                                             .FirstOrDefault();\n\n            if (variableSymbol == null)\n                continue;\n\n            // Find all references to the variable\n            var references = await SymbolFinder.FindReferencesAsync(variableSymbol, solution);\n\n            if (references.Any())\n            {\n                Console.WriteLine($"References to {variableName} found in project {project.Name}:");\n                foreach (var reference in references)\n                {\n                    foreach (var location in reference.Locations)\n                    {\n                        Console.WriteLine($"- {location.Location.GetLineSpan().Path}: line {location.Location.GetLineSpan().StartLinePosition.Line + 1}");\n                    }\n                }\n            }\n            else\n            {\n                Console.WriteLine($"No references to {variableName} found in project {project.Name}.");\n            }\n        }\n    }\n}