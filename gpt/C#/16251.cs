using System.Windows;\nusing System.Windows.Controls;\n\npublic static class ValidationHelper\n{\n    public static readonly DependencyProperty HasErrorProperty =\n        DependencyProperty.RegisterAttached("HasError", typeof(bool), typeof(ValidationHelper), new PropertyMetadata(false));\n\n    public static bool GetHasError(DependencyObject obj)\n    {\n        return (bool)obj.GetValue(HasErrorProperty);\n    }\n\n    public static void SetHasError(DependencyObject obj, bool value)\n    {\n        obj.SetValue(HasErrorProperty, value);\n    }\n\n    public static readonly DependencyProperty MonitorValidationProperty =\n        DependencyProperty.RegisterAttached("MonitorValidation", typeof(bool), typeof(ValidationHelper), new PropertyMetadata(false, OnMonitorValidationChanged));\n\n    public static bool GetMonitorValidation(DependencyObject obj)\n    {\n        return (bool)obj.GetValue(MonitorValidationProperty);\n    }\n\n    public static void SetMonitorValidation(DependencyObject obj, bool value)\n    {\n        obj.SetValue(MonitorValidationProperty, value);\n    }\n\n    private static void OnMonitorValidationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\n    {\n        if (d is Control control && e.NewValue is bool shouldMonitor && shouldMonitor)\n        {\n            control.Loaded += (s, args) => UpdateValidationErrorState(control);\n        }\n    }\n\n    private static void UpdateValidationErrorState(Control control)\n    {\n        bool hasError = Validation.GetHasError(control);\n        SetHasError(control, hasError);\n\n        foreach (var child in LogicalTreeHelper.GetChildren(control))\n        {\n            if (child is Control childControl)\n            {\n                UpdateValidationErrorState(childControl);\n            }\n        }\n    }\n}