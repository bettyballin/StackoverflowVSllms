using System;\nusing System.IO;\nusing System.IO.Compression;\nusing System.Web;\n\npublic class HtmlCompressorModule : IHttpModule\n{\n    public void Init(HttpApplication context)\n    {\n        context.PreRequestHandlerExecute += OnPreRequestHandlerExecute;\n    }\n\n    private void OnPreRequestHandlerExecute(object sender, EventArgs e)\n    {\n        HttpApplication app = (HttpApplication)sender;\n        if (app.Context.CurrentHandler is System.Web.UI.Page && app.Request["HTTP_X_REQUESTED_WITH"] != "XMLHttpRequest")\n        {\n            app.Response.Filter = new HtmlCompressorStream(app.Response.Filter);\n        }\n    }\n\n    public void Dispose() { }\n\n    private class HtmlCompressorStream : Stream\n    {\n        private Stream _baseStream;\n        private Stream _compressedStream;\n\n        public HtmlCompressorStream(Stream baseStream)\n        {\n            _baseStream = baseStream;\n            _compressedStream = new GZipStream(baseStream, CompressionMode.Compress);\n        }\n\n        public override bool CanRead => _compressedStream.CanRead;\n        public override bool CanSeek => _compressedStream.CanSeek;\n        public override bool CanWrite => _compressedStream.CanWrite;\n        public override long Length => _compressedStream.Length;\n        public override long Position { get => _compressedStream.Position; set => _compressedStream.Position = value; }\n\n        public override void Flush()\n        {\n            _compressedStream.Flush();\n        }\n\n        public override int Read(byte[] buffer, int offset, int count)\n        {\n            return _compressedStream.Read(buffer, offset, count);\n        }\n\n        public override long Seek(long offset, SeekOrigin origin)\n        {\n            return _compressedStream.Seek(offset, origin);\n        }\n\n        public override void SetLength(long value)\n        {\n            _compressedStream.SetLength(value);\n        }\n\n        public override void Write(byte[] buffer, int offset, int count)\n        {\n            _compressedStream.Write(buffer, offset, count);\n        }\n\n        protected override void Dispose(bool disposing)\n        {\n            _compressedStream.Dispose();\n            base.Dispose(disposing);\n        }\n    }\n}