using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Person\n{\n    public int Id { get; set; }\n    // Other fields...\n}\n\npublic class Compatibility\n{\n    public Person[] People { get; set; }\n    public int Score { get; set; }\n}\n\npublic class CompatibilityCalculator\n{\n    private Dictionary<(int, int, int), Compatibility> _compatibilityDictionary = new Dictionary<(int, int, int), Compatibility>();\n\n    public int GetCompatibilityScore(Person person1, Person person2, Person person3)\n    {\n        var peopleIds = new[] { person1.Id, person2.Id, person3.Id };\n        Array.Sort(peopleIds);\n        var key = (peopleIds[0], peopleIds[1], peopleIds[2]);\n\n        if (_compatibilityDictionary.TryGetValue(key, out var compatibility))\n        {\n            return compatibility.Score;\n        }\n        else\n        {\n            // Calculate new compatibility score\n            var newCompatibility = CalculateCompatibility(person1, person2, person3);\n\n            // Add to dictionary\n            _compatibilityDictionary[key] = newCompatibility;\n\n            return newCompatibility.Score;\n        }\n    }\n\n    private Compatibility CalculateCompatibility(Person person1, Person person2, Person person3)\n    {\n        // Implement your logic to calculate compatibility score\n        var score = new Random().Next(0, 100); // Example score calculation\n        return new Compatibility\n        {\n            People = new[] { person1, person2, person3 },\n            Score = score\n        };\n    }\n}