using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class PasswordManager\n{\n    public static byte[] EncryptStringToBytes_Aes(string plainText, byte[] Key, byte[] IV)\n    {\n        using (Aes aesAlg = Aes.Create())\n        {\n            aesAlg.Key = Key;\n            aesAlg.IV = IV;\n\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n            using (var msEncrypt = new System.IO.MemoryStream())\n            {\n                using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                {\n                    using (var swEncrypt = new System.IO.StreamWriter(csEncrypt))\n                    {\n                        swEncrypt.Write(plainText);\n                    }\n                    return msEncrypt.ToArray();\n                }\n            }\n        }\n    }\n\n    public static string DecryptStringFromBytes_Aes(byte[] cipherText, byte[] Key, byte[] IV)\n    {\n        using (Aes aesAlg = Aes.Create())\n        {\n            aesAlg.Key = Key;\n            aesAlg.IV = IV;\n\n            ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);\n\n            using (var msDecrypt = new System.IO.MemoryStream(cipherText))\n            {\n                using (var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n                {\n                    using (var srDecrypt = new System.IO.StreamReader(csDecrypt))\n                    {\n                        return srDecrypt.ReadToEnd();\n                    }\n                }\n            }\n        }\n    }\n\n    public static byte[] Protect(byte[] data)\n    {\n        return ProtectedData.Protect(data, null, DataProtectionScope.CurrentUser);\n    }\n\n    public static byte[] Unprotect(byte[] data)\n    {\n        return ProtectedData.Unprotect(data, null, DataProtectionScope.CurrentUser);\n    }\n\n    public static string EncryptPassword(string password)\n    {\n        // Generate a random key and IV\n        using (Aes aesAlg = Aes.Create())\n        {\n            byte[] encrypted = EncryptStringToBytes_Aes(password, aesAlg.Key, aesAlg.IV);\n            byte[] fullEncrypted = new byte[aesAlg.Key.Length + aesAlg.IV.Length + encrypted.Length];\n            Array.Copy(aesAlg.Key, 0, fullEncrypted, 0, aesAlg.Key.Length);\n            Array.Copy(aesAlg.IV, 0, fullEncrypted, aesAlg.Key.Length, aesAlg.IV.Length);\n            Array.Copy(encrypted, 0, fullEncrypted, aesAlg.Key.Length + aesAlg.IV.Length, encrypted.Length);\n\n            return Convert.ToBase64String(fullEncrypted);\n        }\n    }\n\n    public static string DecryptPassword(string encryptedPassword)\n    {\n        byte[] fullEncrypted = Convert.FromBase64String(encryptedPassword);\n        byte[] key = new byte[32];\n        byte[] iv = new byte[16];\n        byte[] encrypted = new byte[fullEncrypted.Length - 48];\n\n        Array.Copy(fullEncrypted, 0, key, 0, 32);\n        Array.Copy(fullEncrypted, 32, iv, 0, 16);\n        Array.Copy(fullEncrypted, 48, encrypted, 0, encrypted.Length);\n\n        return DecryptStringFromBytes_Aes(encrypted, key, iv);\n    }\n}