using System;\nusing System.Collections.Generic;\nusing System.Text.RegularExpressions;\n\npublic class FuzzyTextMatching\n{\n    private static readonly string[] ignoreWordsList = { "super", "quality", "http", "mp3" };\n\n    public static float CalculateSimilarity(string s1, string s2)\n    {\n        if (string.IsNullOrEmpty(s1) || string.IsNullOrEmpty(s2)) return 0.0f;\n\n        float dis = LevenshteinDistance.Compute(s1, s2);\n        float maxLen = Math.Max(s1.Length, s2.Length);\n        return maxLen == 0.0F ? 1.0F : 1.0F - dis / maxLen;\n    }\n\n    private bool DoIgnore(string targetString)\n    {\n        if (string.IsNullOrEmpty(targetString)) return false;\n\n        foreach (var word in ignoreWordsList)\n        {\n            if (targetString.Contains(word) || IsMatchInSpecialCases(targetString)) return true;\n        }\n        return false;\n    }\n\n    private bool IsMatchInSpecialCases(string targetString)\n    {\n        return Regex.IsMatch(targetString, @"\d{4}"); // Matches years like 2007, 2008, etc.\n    }\n\n    private void RemoveDuplicates(List<string> list)\n    {\n        if (list == null || list.Count == 0) return;\n\n        for (int i = 0; i < list.Count - 1; ++i)\n        {\n            if (string.Equals(list[i], list[i + 1], StringComparison.OrdinalIgnoreCase))\n            {\n                list.RemoveAt(i);\n                --i;\n            }\n        }\n    }\n\n    public float FuzzyMatch(string source, string target)\n    {\n        if (DoIgnore(target)) return 0.0f;\n\n        source = PreprocessString(source);\n        target = PreprocessString(target);\n\n        return CalculateSimilarity(source, target);\n    }\n\n    private string PreprocessString(string input)\n    {\n        // Remove unwanted characters and noise\n        input = Regex.Replace(input, @"http[s]?://\S+", ""); // Remove URLs\n        input = Regex.Replace(input, @"[_-]", " "); // Replace underscores and hyphens with spaces\n        input = Regex.Replace(input, @"\b(super|quality|mp3)\b", "", RegexOptions.IgnoreCase); // Remove ignore words\n\n        // Trim and convert to lower case\n        return input.Trim().ToLower();\n    }\n}\n\n// Usage\npublic static void Main()\n{\n    FuzzyTextMatching matcher = new FuzzyTextMatching();\n    string song1 = "http://trash..thash..song_name_mp3.mp3";\n    string song2 = "song name";\n    \n    float similarity = matcher.FuzzyMatch(song1, song2);\n    Console.WriteLine($"Similarity: {similarity}");\n}