using System.ComponentModel.Composition;\n    using System.ComponentModel.Composition.Hosting;\n    using Rhino.Mocks;\n    using NUnit.Framework;\n\n    [TestFixture]\n    public class MyComponentTests\n    {\n        [Test]\n        public void TestDoWork()\n        {\n            // Create the mock objects\n            var mockDependency1 = MockRepository.GenerateMock<IDependency1>();\n            var mockDependency2 = MockRepository.GenerateMock<IDependency2>();\n            var mockDependency3 = MockRepository.GenerateMock<IDependency3>();\n\n            // Set up expectations\n            mockDependency1.Expect(d => d.Method1()).Repeat.Once();\n            mockDependency2.Expect(d => d.Method2()).Repeat.Once();\n            mockDependency3.Expect(d => d.Method3()).Repeat.Once();\n\n            // Create a catalog and container\n            var catalog = new TypeCatalog(typeof(MyComponent));\n            var container = new CompositionContainer(catalog);\n\n            // Compose the components\n            var batch = new CompositionBatch();\n            batch.AddExportedValue(mockDependency1);\n            batch.AddExportedValue(mockDependency2);\n            batch.AddExportedValue(mockDependency3);\n            container.Compose(batch);\n\n            // Create the component and satisfy its imports\n            var myComponent = container.GetExportedValue<MyComponent>();\n\n            // Call the method to test\n            myComponent.DoWork();\n\n            // Verify the expectations\n            mockDependency1.VerifyAllExpectations();\n            mockDependency2.VerifyAllExpectations();\n            mockDependency3.VerifyAllExpectations();\n        }\n    }