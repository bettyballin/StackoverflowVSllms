using Castle.MicroKernel.Registration;\nusing Castle.Windsor;\nusing System;\n\npublic interface ITaxService\n{\n    void CalculateTax();\n}\n\npublic class UsTaxService : ITaxService\n{\n    public void CalculateTax()\n    {\n        Console.WriteLine("Calculating US tax");\n    }\n}\n\npublic class UkTaxService : ITaxService\n{\n    public void CalculateTax()\n    {\n        Console.WriteLine("Calculating UK tax");\n    }\n}\n\npublic class TaxServiceFactory\n{\n    private readonly IWindsorContainer _container;\n\n    public TaxServiceFactory(IWindsorContainer container)\n    {\n        _container = container;\n    }\n\n    public ITaxService GetTaxService(string region)\n    {\n        switch (region.ToLower())\n        {\n            case "us":\n                return _container.Resolve<ITaxService>("us");\n            case "uk":\n                return _container.Resolve<ITaxService>("uk");\n            default:\n                throw new ArgumentException("Unknown region");\n        }\n    }\n}\n\npublic class Customer\n{\n    public string Region { get; set; }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var container = new WindsorContainer();\n\n        container.Register(Component.For<ITaxService>().ImplementedBy<UsTaxService>().Named("us"));\n        container.Register(Component.For<ITaxService>().ImplementedBy<UkTaxService>().Named("uk"));\n        container.Register(Component.For<TaxServiceFactory>());\n\n        var factory = container.Resolve<TaxServiceFactory>();\n\n        var customer = new Customer { Region = "us" };\n        var taxService = factory.GetTaxService(customer.Region);\n        taxService.CalculateTax(); // Output: Calculating US tax\n\n        customer.Region = "uk";\n        taxService = factory.GetTaxService(customer.Region);\n        taxService.CalculateTax(); // Output: Calculating UK tax\n    }\n}