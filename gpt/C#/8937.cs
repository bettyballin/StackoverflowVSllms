using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\n\npublic class Person\n{\n    public string name { get; set; }\n    public Email email { get; set; }\n}\n\npublic class Email\n{\n    public string desc { get; set; }\n}\n\npublic static class SortExtension\n{\n    public static IEnumerable<T> Sort<T>(this IEnumerable<T> source, string sortExpression, bool desc)\n    {\n        var param = Expression.Parameter(typeof(T), "x");\n        Expression property = param;\n        foreach (var prop in sortExpression.Split('.'))\n        {\n            property = Expression.Property(property, prop);\n        }\n        var sortLambda = Expression.Lambda<Func<T, object>>(Expression.Convert(property, typeof(object)), param);\n\n        try\n        {\n            if (desc)\n            {\n                return source.AsQueryable().OrderByDescending(sortLambda);\n            }\n\n            return source.AsQueryable().OrderBy(sortLambda);\n        }\n        catch (ArgumentException)\n        {\n            return source;\n        }\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        List<Person> vet = new List<Person>();\n\n        Person p = new Person { name = "aaa", email = new Email { desc = "bbb@aaa.com" } };\n        Person pp = new Person { name = "bbb", email = new Email { desc = "aaa@aaa.com" } };\n        vet.Add(p);\n        vet.Add(pp);\n\n        var sortedByName = vet.Sort("name", true); // Sort by name descending\n        var sortedByEmailDesc = vet.Sort("email.desc", true); // Sort by email.desc descending\n\n        Console.WriteLine("Sorted by name (descending):");\n        foreach (var person in sortedByName)\n        {\n            Console.WriteLine($"{person.name}, {person.email.desc}");\n        }\n\n        Console.WriteLine("\nSorted by email.desc (descending):");\n        foreach (var person in sortedByEmailDesc)\n        {\n            Console.WriteLine($"{person.name}, {person.email.desc}");\n        }\n    }\n}