using System;\nusing System.Globalization;\nusing System.Text.RegularExpressions;\n\npublic class LocaleNumberValidation\n{\n    public static void Main()\n    {\n        // Example input\n        string input = "12.500,34";\n        \n        // Detect the user's locale, for this example we'll use de-DE which uses ',' as decimal separator\n        CultureInfo userCulture = new CultureInfo("de-DE");\n\n        // Parse the number using the user's locale\n        if (decimal.TryParse(input, NumberStyles.Number, userCulture, out decimal result))\n        {\n            Console.WriteLine($"Parsed number: {result}");\n        }\n        else\n        {\n            Console.WriteLine("Invalid number format.");\n        }\n\n        // Build a regex pattern based on the user's locale\n        string decimalSeparator = userCulture.NumberFormat.NumberDecimalSeparator;\n        string groupSeparator = userCulture.NumberFormat.NumberGroupSeparator;\n\n        // Regex pattern to match numbers with optional decimal part\n        string pattern = $@"^\d{{1,5}}({Regex.Escape(groupSeparator)}\d{{3}})*({Regex.Escape(decimalSeparator)}\d{{1,4}})?$";\n        \n        // Validate input using the regex pattern\n        if (Regex.IsMatch(input, pattern))\n        {\n            Console.WriteLine("Input is valid.");\n        }\n        else\n        {\n            Console.WriteLine("Input is invalid.");\n        }\n    }\n}