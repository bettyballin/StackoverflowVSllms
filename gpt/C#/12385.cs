using System;\nusing System.Linq.Expressions;\nusing System.Windows.Forms;\n\npublic class MyForm : Form\n{\n    private TextBox myControl;\n    private MyObject myObject;\n\n    public MyForm()\n    {\n        myControl = new TextBox();\n        myObject = new MyObject();\n\n        this.AddMapping(myControl, myObject, x => x.MyObjectPropertyName);\n    }\n\n    public void AddMapping<TControl, TObject>(TControl control, TObject obj, Expression<Func<TObject, object>> propertyExpression)\n    {\n        var memberExpression = propertyExpression.Body as MemberExpression;\n        if (memberExpression == null)\n        {\n            var unaryExpression = propertyExpression.Body as UnaryExpression;\n            if (unaryExpression != null && unaryExpression.NodeType == ExpressionType.Convert)\n            {\n                memberExpression = unaryExpression.Operand as MemberExpression;\n            }\n\n            if (memberExpression == null)\n            {\n                throw new ArgumentException("Expression must be a member expression", nameof(propertyExpression));\n            }\n        }\n\n        string propertyName = memberExpression.Member.Name;\n\n        // Now you can use propertyName to do the mapping\n        // Example: Store mapping in a dictionary\n        // mappings.Add(control, propertyName);\n        Console.WriteLine($"Mapping control to property name: {propertyName}");\n    }\n}\n\npublic class MyObject\n{\n    public string MyObjectPropertyName { get; set; }\n}