using System;\nusing System.Collections.Generic;\nusing System.Drawing;\n\npublic class EquidistantPoints\n{\n    public static List<PointF> FindAllPointsInLine(PointF start, PointF end, float minDistanceApart)\n    {\n        List<PointF> points = new List<PointF>();\n\n        float totalDistance = Distance(start, end);\n        int numberOfSegments = (int)(totalDistance / minDistanceApart);\n\n        float dx = (end.X - start.X) / numberOfSegments;\n        float dy = (end.Y - start.Y) / numberOfSegments;\n\n        for (int i = 0; i <= numberOfSegments; i++)\n        {\n            float x = start.X + i * dx;\n            float y = start.Y + i * dy;\n            points.Add(new PointF(x, y));\n        }\n\n        return points;\n    }\n\n    private static float Distance(PointF p1, PointF p2)\n    {\n        return (float)Math.Sqrt(Math.Pow(p2.X - p1.X, 2) + Math.Pow(p2.Y - p1.Y, 2));\n    }\n\n    public static void Main()\n    {\n        PointF start = new PointF(0, 0);\n        PointF end = new PointF(10, 10);\n        float minDistanceApart = 2;\n\n        List<PointF> points = FindAllPointsInLine(start, end, minDistanceApart);\n\n        foreach (PointF point in points)\n        {\n            Console.WriteLine($"({point.X}, {point.Y})");\n        }\n    }\n}