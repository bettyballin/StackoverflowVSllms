using System;\nusing System.Collections.Generic;\n\npublic class Graph\n{\n    private Dictionary<string, List<string>> adjList;\n\n    public Graph()\n    {\n        adjList = new Dictionary<string, List<string>>();\n    }\n\n    public void AddEdge(string src, string dest)\n    {\n        if (!adjList.ContainsKey(src))\n        {\n            adjList[src] = new List<string>();\n        }\n        adjList[src].Add(dest);\n\n        if (!adjList.ContainsKey(dest))\n        {\n            adjList[dest] = new List<string>();\n        }\n        adjList[dest].Add(src);\n    }\n\n    public List<string> BFS(string start, string goal)\n    {\n        var queue = new Queue<string>();\n        var visited = new HashSet<string>();\n        var parent = new Dictionary<string, string>();\n\n        queue.Enqueue(start);\n        visited.Add(start);\n\n        while (queue.Count > 0)\n        {\n            var current = queue.Dequeue();\n\n            if (current == goal)\n            {\n                return ConstructPath(parent, start, goal);\n            }\n\n            foreach (var neighbor in adjList[current])\n            {\n                if (!visited.Contains(neighbor))\n                {\n                    queue.Enqueue(neighbor);\n                    visited.Add(neighbor);\n                    parent[neighbor] = current;\n                }\n            }\n        }\n\n        return new List<string>(); // No path found\n    }\n\n    private List<string> ConstructPath(Dictionary<string, string> parent, string start, string goal)\n    {\n        var path = new Stack<string>();\n        var current = goal;\n\n        while (current != start)\n        {\n            path.Push(current);\n            current = parent[current];\n        }\n        path.Push(start);\n\n        return new List<string>(path);\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var graph = new Graph();\n        \n        // Example edges based on the provided image link\n        graph.AddEdge("Table 21", "Table 12");\n        graph.AddEdge("Table 12", "Table 9");\n        graph.AddEdge("Table 9", "Table 6");\n        graph.AddEdge("Table 6", "Table 8");\n        // Add other edges here...\n\n        var path = graph.BFS("Table 21", "Table 8");\n\n        Console.WriteLine("Path: " + string.Join(" -> ", path));\n    }\n}