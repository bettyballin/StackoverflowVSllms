public class CustomHeaderBehavior : IEndpointBehavior\n{\n    private readonly string _username;\n    private readonly string _password;\n\n    public CustomHeaderBehavior(string username, string password)\n    {\n        _username = username;\n        _password = password;\n    }\n\n    public void AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters) { }\n\n    public void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime)\n    {\n        clientRuntime.ClientMessageInspectors.Add(new CustomHeaderMessageInspector(_username, _password));\n    }\n\n    public void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher) { }\n\n    public void Validate(ServiceEndpoint endpoint) { }\n}\n\npublic class CustomHeaderMessageInspector : IClientMessageInspector\n{\n    private readonly string _username;\n    private readonly string _password;\n\n    public CustomHeaderMessageInspector(string username, string password)\n    {\n        _username = username;\n        _password = password;\n    }\n\n    public void AfterReceiveReply(ref Message reply, object correlationState) { }\n\n    public object BeforeSendRequest(ref Message request, IClientChannel channel)\n    {\n        var httpRequestMessageProperty = new HttpRequestMessageProperty();\n        httpRequestMessageProperty.Headers["Username"] = _username;\n        httpRequestMessageProperty.Headers["Password"] = _password;\n        request.Properties[HttpRequestMessageProperty.Name] = httpRequestMessageProperty;\n\n        return null;\n    }\n}