using System;\nusing System.Runtime.InteropServices;\nusing Microsoft.Win32;\n\npublic class CustomActions\n{\n    [DllImport("fusion.dll")]\n    private static extern int CreateAssemblyCache(out IAssemblyCache ppAsmCache, int reserved);\n\n    [ComImport, InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\n    [Guid("e707dcde-d1cd-11d2-bab9-00c04f8eceae")]\n    private interface IAssemblyCache\n    {\n        // Assembly cache methods\n    }\n\n    public static void RegisterAssembly(string assemblyName, string clsid)\n    {\n        string gacPath = GetGacPath(assemblyName);\n        if (!string.IsNullOrEmpty(gacPath))\n        {\n            string registryKey = $@"HKEY_CLASSES_ROOT\CLSID\{{{clsid}}}\CodeBase";\n            Registry.SetValue(registryKey, "", gacPath);\n        }\n    }\n\n    private static string GetGacPath(string assemblyName)\n    {\n        IAssemblyCache assemblyCache;\n        CreateAssemblyCache(out assemblyCache, 0);\n        // Here you need to implement logic to search the GAC for the specific assembly\n        // and return its path. For simplicity, we will return a placeholder value.\n        return @"C:\Windows\Microsoft.NET\assembly\GAC_MSIL\" + assemblyName;\n    }\n}