using System;\nusing System.Collections.Generic;\n\npublic class Rectangle\n{\n    public double x0, y0, x1, y1;\n    public Rectangle(double x0, double y0, double x1, double y1)\n    {\n        this.x0 = x0;\n        this.y0 = y0;\n        this.x1 = x1;\n        this.y1 = y1;\n    }\n}\n\npublic class Event\n{\n    public double x;\n    public Rectangle rect;\n    public bool isStart;\n    \n    public Event(double x, Rectangle rect, bool isStart)\n    {\n        this.x = x;\n        this.rect = rect;\n        this.isStart = isStart;\n    }\n}\n\npublic class Interval\n{\n    public double start;\n    public double end;\n    \n    public Interval(double start, double end)\n    {\n        this.start = start;\n        this.end = end;\n    }\n}\n\npublic class IntervalTree\n{\n    private List<Interval> intervals = new List<Interval>();\n\n    public void Add(Interval interval)\n    {\n        intervals.Add(interval);\n    }\n\n    public void Remove(Interval interval)\n    {\n        intervals.Remove(interval);\n    }\n\n    public double CalculateTotalLength()\n    {\n        if (intervals.Count == 0) return 0;\n        intervals.Sort((a, b) => a.start.CompareTo(b.start));\n\n        double totalLength = 0;\n        double currentStart = intervals[0].start;\n        double currentEnd = intervals[0].end;\n\n        foreach (var interval in intervals)\n        {\n            if (interval.start > currentEnd)\n            {\n                totalLength += currentEnd - currentStart;\n                currentStart = interval.start;\n                currentEnd = interval.end;\n            }\n            else\n            {\n                currentEnd = Math.Max(currentEnd, interval.end);\n            }\n        }\n        totalLength += currentEnd - currentStart;\n        return totalLength;\n    }\n}\n\npublic class Solution\n{\n    public static double CalculateOverlapArea(List<Rectangle> rectangles)\n    {\n        List<Event> events = new List<Event>();\n        foreach (var rect in rectangles)\n        {\n            events.Add(new Event(rect.x0, rect, true)); // Start of rectangle\n            events.Add(new Event(rect.x1, rect, false)); // End of rectangle\n        }\n        events.Sort((a, b) => a.x.CompareTo(b.x));\n\n        IntervalTree activeIntervals = new IntervalTree();\n        double lastX = events[0].x;\n        double totalOverlapArea = 0;\n\n        foreach (var e in events)\n        {\n            double currentX = e.x;\n            double activeLength = activeIntervals.CalculateTotalLength();\n            totalOverlapArea += activeLength * (currentX - lastX);\n\n            if (e.isStart)\n            {\n                activeIntervals.Add(new Interval(e.rect.y0, e.rect.y1));\n            }\n            else\n            {\n                activeIntervals.Remove(new Interval(e.rect.y0, e.rect.y1));\n            }\n\n            lastX = currentX;\n        }\n\n        return totalOverlapArea;\n    }\n\n    public static void Main(string[] args)\n    {\n        List<Rectangle> rectangles = new List<Rectangle>\n        {\n            new Rectangle(0, 0, 10, 10),\n            new Rectangle(5, 5, 15, 15),\n            new Rectangle(10, 10, 20, 20)\n        };\n\n        double overlapArea = CalculateOverlapArea(rectangles);\n        Console.WriteLine("Total Overlap Area: " + overlapArea);\n    }\n}