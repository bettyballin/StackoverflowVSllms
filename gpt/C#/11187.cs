using System;\nusing System.Collections.Generic;\n\nclass Event\n{\n    public int Priority { get; set; }\n    public double Duration { get; set; }\n    public double EarliestTime { get; set; }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Event a = new Event { Priority = 1, Duration = 4.0, EarliestTime = 0.0 };\n        Event b = new Event { Priority = 2, Duration = 5.0, EarliestTime = 6.0 };\n        Event c = new Event { Priority = 3, Duration = 3.0, EarliestTime = 0.0 };\n        Event d = new Event { Priority = 4, Duration = 2.0, EarliestTime = 0.0 };\n\n        List<Event> events = new List<Event> { a, b, c, d };\n        List<Event> sortedEvents = SortEvents(events);\n\n        Console.WriteLine("Sorted Events:");\n        foreach (var ev in sortedEvents)\n        {\n            Console.WriteLine($"Priority: {ev.Priority}, Duration: {ev.Duration}, EarliestTime: {ev.EarliestTime}");\n        }\n    }\n\n    static List<Event> SortEvents(List<Event> events)\n    {\n        List<Event> sortedEvents = new List<Event>();\n        double currentTime = 0.0;\n\n        while (events.Count > 0)\n        {\n            Event nextEvent = null;\n\n            foreach (var ev in events)\n            {\n                if (ev.EarliestTime <= currentTime)\n                {\n                    if (nextEvent == null || ev.Priority < nextEvent.Priority)\n                    {\n                        nextEvent = ev;\n                    }\n                }\n            }\n\n            if (nextEvent != null)\n            {\n                sortedEvents.Add(nextEvent);\n                currentTime += nextEvent.Duration;\n                events.Remove(nextEvent);\n            }\n            else\n            {\n                currentTime += 1.0; // Increment the current time if no event can be scheduled yet\n            }\n        }\n\n        return sortedEvents;\n    }\n}