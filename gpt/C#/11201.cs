using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class CryptMD5\n{\n    public static string Crypt(string password, string salt)\n    {\n        const string magic = "$1$";\n        if (salt.StartsWith(magic))\n        {\n            salt = salt.Substring(magic.Length);\n        }\n\n        int saltEndIndex = salt.IndexOf('$');\n        if (saltEndIndex == -1 || saltEndIndex > 8)\n        {\n            saltEndIndex = 8;\n        }\n        salt = salt.Substring(0, saltEndIndex);\n\n        using (var md5 = MD5.Create())\n        {\n            var ctx = md5.ComputeHash(Encoding.ASCII.GetBytes(password + magic + salt));\n            var ctx1 = md5.ComputeHash(Encoding.ASCII.GetBytes(password + salt + password));\n            var final = md5.ComputeHash(ctx1);\n\n            int pwLength = password.Length;\n            while (pwLength > 0)\n            {\n                int length = Math.Min(16, pwLength);\n                ctx = Combine(ctx, final, length);\n                pwLength -= 16;\n            }\n\n            for (int i = password.Length; i > 0; i >>= 1)\n            {\n                if ((i & 1) != 0)\n                {\n                    ctx = Combine(ctx, final, 1);\n                }\n                else\n                {\n                    ctx = Combine(ctx, Encoding.ASCII.GetBytes(password), 1);\n                }\n            }\n\n            var result = new StringBuilder();\n            result.Append(magic);\n            result.Append(salt);\n            result.Append('$');\n            result.Append(ToBase64(ctx));\n\n            return result.ToString();\n        }\n    }\n\n    private static byte[] Combine(byte[] first, byte[] second, int length)\n    {\n        var result = new byte[first.Length + length];\n        Buffer.BlockCopy(first, 0, result, 0, first.Length);\n        Buffer.BlockCopy(second, 0, result, first.Length, length);\n        return result;\n    }\n\n    private static string ToBase64(byte[] data)\n    {\n        const string base64Chars = "./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";\n        var result = new char[22];\n        int index = 0;\n        int i = 0;\n\n        while (i < data.Length - 1)\n        {\n            int value = (data[i++] << 16) | (data[i++] << 8) | data[i++];\n            result[index++] = base64Chars[(value >> 18) & 0x3f];\n            result[index++] = base64Chars[(value >> 12) & 0x3f];\n            result[index++] = base64Chars[(value >> 6) & 0x3f];\n            result[index++] = base64Chars[value & 0x3f];\n        }\n\n        if (i < data.Length)\n        {\n            int value = data[i++] << 16;\n            result[index++] = base64Chars[(value >> 18) & 0x3f];\n            if (i < data.Length)\n            {\n                value |= data[i] << 8;\n                result[index++] = base64Chars[(value >> 12) & 0x3f];\n                result[index++] = base64Chars[(value >> 6) & 0x3f];\n            }\n            else\n            {\n                result[index++] = base64Chars[(value >> 12) & 0x3f];\n            }\n        }\n\n        return new string(result, 0, index);\n    }\n}