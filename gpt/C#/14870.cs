using System;\nusing System.Collections;\nusing System.Collections.Generic;\n\npublic class ListChecker\n{\n    public bool IsList(object value)\n    {\n        if (value == null)\n        {\n            return false;\n        }\n\n        Type type = value.GetType();\n        \n        // Check if type is a generic list of any type\n        if (type.IsGenericType && typeof(IList<>).IsAssignableFrom(type.GetGenericTypeDefinition()))\n        {\n            return true;\n        }\n\n        foreach (Type interfaceType in type.GetInterfaces())\n        {\n            if (interfaceType.IsGenericType && interfaceType.GetGenericTypeDefinition() == typeof(IList<>))\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n\n// Example usage\npublic class Program\n{\n    public static void Main()\n    {\n        ListChecker checker = new ListChecker();\n        List<int> intList = new List<int>();\n        Console.WriteLine(checker.IsList(intList)); // Output: True\n\n        ArrayList arrayList = new ArrayList();\n        Console.WriteLine(checker.IsList(arrayList)); // Output: False\n    }\n}