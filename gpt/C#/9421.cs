using System;\nusing System.Collections.Generic;\n\npublic class DefaultingMap<TKey, TValue>\n{\n    private readonly Dictionary<Tuple<TKey, TKey, TKey>, TValue> _map;\n    private readonly int[] _priorities;\n\n    public DefaultingMap(int[] priorities)\n    {\n        if (priorities.Length != 3)\n            throw new ArgumentException("Priorities array must have exactly 3 elements.");\n\n        _map = new Dictionary<Tuple<TKey, TKey, TKey>, TValue>();\n        _priorities = priorities;\n    }\n\n    public void Add(TKey key1, TKey key2, TKey key3, TValue value)\n    {\n        var key = Tuple.Create(key1, key2, key3);\n        _map[key] = value;\n    }\n\n    public TValue GetEffectiveValue(TKey key1, TKey key2, TKey key3)\n    {\n        var keys = new List<Tuple<TKey, TKey, TKey>>()\n        {\n            Tuple.Create(key1, key2, key3),\n            Tuple.Create(default(TKey), key2, key3),\n            Tuple.Create(key1, default(TKey), key3),\n            Tuple.Create(key1, key2, default(TKey)),\n            Tuple.Create(default(TKey), default(TKey), key3),\n            Tuple.Create(default(TKey), key2, default(TKey)),\n            Tuple.Create(key1, default(TKey), default(TKey)),\n            Tuple.Create(default(TKey), default(TKey), default(TKey)),\n        };\n\n        keys.Sort((x, y) =>\n        {\n            int scoreX = CalculatePriorityScore(x);\n            int scoreY = CalculatePriorityScore(y);\n            return scoreY.CompareTo(scoreX);\n        });\n\n        foreach (var key in keys)\n        {\n            if (_map.TryGetValue(key, out TValue value))\n            {\n                return value;\n            }\n        }\n\n        throw new KeyNotFoundException("No matching configuration found.");\n    }\n\n    private int CalculatePriorityScore(Tuple<TKey, TKey, TKey> key)\n    {\n        int score = 0;\n        if (!EqualityComparer<TKey>.Default.Equals(key.Item1, default(TKey))) score += _priorities[0];\n        if (!EqualityComparer<TKey>.Default.Equals(key.Item2, default(TKey))) score += _priorities[1];\n        if (!EqualityComparer<TKey>.Default.Equals(key.Item3, default(TKey))) score += _priorities[2];\n        return score;\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var priorities = new[] { 10, 7, 5 };\n\n        var configMap = new DefaultingMap<int?, int>(priorities);\n        configMap.Add(null, null, null, 1);\n        configMap.Add(1, null, null, 2);\n        configMap.Add(9, null, null, 21);\n        configMap.Add(1, null, 3, 3);\n        configMap.Add(null, 2, 3, 4);\n        configMap.Add(1, 2, 3, 5);\n\n        Console.WriteLine(configMap.GetEffectiveValue(1, 2, 3)); // Output: 5\n        Console.WriteLine(configMap.GetEffectiveValue(3, 2, 3)); // Output: 4\n        Console.WriteLine(configMap.GetEffectiveValue(8, 10, 11)); // Output: 1\n        Console.WriteLine(configMap.GetEffectiveValue(1, 10, 11)); // Output: 2\n        Console.WriteLine(configMap.GetEffectiveValue(9, 2, 3)); // Output: 4\n        Console.WriteLine(configMap.GetEffectiveValue(8, 2, 3)); // Output: 4\n        Console.WriteLine(configMap.GetEffectiveValue(9, 3, 3)); // Output: 21\n    }\n}