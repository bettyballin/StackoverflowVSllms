using System;\n   using System.IO;\n   using System.Linq;\n   using System.Reflection;\n   using System.Web;\n\n   public class DynamicModuleLoader : IHttpModule\n   {\n       private FileSystemWatcher _watcher;\n       private string _modulesPath = HttpContext.Current.Server.MapPath("~/App_Data/Modules");\n\n       public void Init(HttpApplication context)\n       {\n           LoadModules();\n           _watcher = new FileSystemWatcher(_modulesPath, "*.dll")\n           {\n               NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.FileName\n           };\n           _watcher.Changed += (s, e) => LoadModules();\n           _watcher.Created += (s, e) => LoadModules();\n           _watcher.Deleted += (s, e) => LoadModules();\n           _watcher.Renamed += (s, e) => LoadModules();\n           _watcher.EnableRaisingEvents = true;\n       }\n\n       public void Dispose()\n       {\n           _watcher?.Dispose();\n       }\n\n       private void LoadModules()\n       {\n           var moduleFiles = Directory.GetFiles(_modulesPath, "*.dll");\n           foreach (var file in moduleFiles)\n           {\n               try\n               {\n                   var assembly = Assembly.LoadFrom(file);\n                   var types = assembly.GetTypes().Where(t => typeof(IHttpModule).IsAssignableFrom(t) && !t.IsInterface);\n                   foreach (var type in types)\n                   {\n                       var module = (IHttpModule)Activator.CreateInstance(type);\n                       module.Init(HttpContext.Current.ApplicationInstance);\n                   }\n               }\n               catch (Exception ex)\n               {\n                   // Log or handle the exception\n               }\n           }\n       }\n   }