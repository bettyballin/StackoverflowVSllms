using System;\nusing System.Data;\nusing System.Web.UI.WebControls;\n\npublic partial class TreeViewBinding : System.Web.UI.Page\n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        if (!IsPostBack)\n        {\n            DataTable dt = GetCategoriesDataTable(); // Method to retrieve your DataTable\n            PopulateTreeView(dt, null, null);\n        }\n    }\n\n    private DataTable GetCategoriesDataTable()\n    {\n        // Replace this with your actual logic to retrieve data from your database\n        DataTable dt = new DataTable();\n        dt.Columns.Add("CategoryID", typeof(int));\n        dt.Columns.Add("CategoryName", typeof(string));\n        dt.Columns.Add("ParentID", typeof(int));\n\n        dt.Rows.Add(1, "Root", DBNull.Value);\n        dt.Rows.Add(2, "Child 1", 1);\n        dt.Rows.Add(3, "Child 2", 1);\n        dt.Rows.Add(4, "Sub Child 1", 2);\n        \n        return dt;\n    }\n\n    private void PopulateTreeView(DataTable dt, TreeNode parentNode, int? parentId)\n    {\n        DataRow[] rows = dt.Select(parentId == null ? "ParentID IS NULL" : $"ParentID = {parentId}");\n        foreach (DataRow row in rows)\n        {\n            TreeNode node = new TreeNode\n            {\n                Text = row["CategoryName"].ToString(),\n                Value = row["CategoryID"].ToString()\n            };\n\n            if (parentNode == null)\n            {\n                TreeView1.Nodes.Add(node);\n            }\n            else\n            {\n                parentNode.ChildNodes.Add(node);\n            }\n\n            PopulateTreeView(dt, node, Convert.ToInt32(row["CategoryID"]));\n        }\n    }\n}