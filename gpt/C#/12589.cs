// Data Access Layer (DAL)\npublic class EmployeeRepository\n{\n    private readonly DataContext _context;\n\n    public EmployeeRepository(string connectionString)\n    {\n        _context = new DataContext(connectionString);\n    }\n\n    public IEnumerable<Employee> GetAllEmployees()\n    {\n        return _context.GetTable<Employee>().ToList();\n    }\n\n    public void AddEmployee(Employee employee)\n    {\n        _context.GetTable<Employee>().InsertOnSubmit(employee);\n        _context.SubmitChanges();\n    }\n\n    // Other CRUD operations...\n}\n\n// Business Logic Layer (BLL)\npublic class EmployeeService\n{\n    private readonly EmployeeRepository _repository;\n\n    public EmployeeService(EmployeeRepository repository)\n    {\n        _repository = repository;\n    }\n\n    public IEnumerable<Employee> GetAllEmployees()\n    {\n        // Add business logic if needed\n        return _repository.GetAllEmployees();\n    }\n\n    public void AddEmployee(Employee employee)\n    {\n        // Add validation and business rules\n        if (string.IsNullOrEmpty(employee.Name))\n        {\n            throw new ArgumentException("Employee name cannot be empty.");\n        }\n        _repository.AddEmployee(employee);\n    }\n\n    // Other business methods...\n}\n\n// Presentation Layer (e.g., Windows Forms)\npublic partial class MainForm : Form\n{\n    private readonly EmployeeService _employeeService;\n\n    public MainForm()\n    {\n        InitializeComponent();\n        var repository = new EmployeeRepository("your_connection_string_here");\n        _employeeService = new EmployeeService(repository);\n    }\n\n    private void LoadEmployees()\n    {\n        var employees = _employeeService.GetAllEmployees();\n        // Bind to UI (e.g., DataGridView)\n    }\n\n    private void AddEmployee(string name)\n    {\n        var employee = new Employee { Name = name };\n        _employeeService.AddEmployee(employee);\n        LoadEmployees();\n    }\n\n    // Other UI methods...\n}