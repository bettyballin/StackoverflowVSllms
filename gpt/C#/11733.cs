public class ContrivedExampleInterceptor : IInterceptor\n{\n    public void Intercept(IInvocation invocation)\n    {\n        // Assuming that the property name will be the same as the method name being invoked\n        string fieldName = invocation.Method.Name.Substring(4); // Remove the "get_" prefix\n\n        // Retrieve the target object\n        DataContainer container = invocation.InvocationTarget as DataContainer;\n\n        // Ensure the container and field exist\n        if (container != null && container.Data.ContainsKey(fieldName))\n        {\n            invocation.ReturnValue = container.Data[fieldName];\n        }\n        else\n        {\n            invocation.ReturnValue = null; // or handle the missing key as needed\n        }\n    }\n}\n\n// Usage\nvar c = new DataContainer();\nc.Data.Add("Name", "Jordan");\n\nvar pg = new ProxyGenerator();\nIContrivedExample ice = pg.CreateInterfaceProxyWithTarget<IContrivedExample>(c, new ContrivedExampleInterceptor());\nDebug.Assert(ice.Name == "Jordan");