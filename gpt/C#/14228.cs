// Define the callback contract for duplex communication\npublic interface IChatCallback\n{\n    [OperationContract(IsOneWay = true)]\n    void ReceiveMessage(string message);\n}\n\n// Define the service contract for the chat service\n[ServiceContract(CallbackContract = typeof(IChatCallback))]\npublic interface IChatService\n{\n    [OperationContract]\n    void SendMessage(string message);\n}\n\n// Implement the callback handler\npublic class ChatCallbackHandler : IChatCallback\n{\n    public void ReceiveMessage(string message)\n    {\n        // Handle the received message (e.g., store in session or database)\n    }\n}\n\n// Singleton pattern for WCF client\npublic sealed class ChatServiceClientSingleton\n{\n    private static readonly Lazy<ChatServiceClientSingleton> instance =\n        new Lazy<ChatServiceClientSingleton>(() => new ChatServiceClientSingleton());\n\n    private DuplexChannelFactory<IChatService> channelFactory;\n    private IChatService chatService;\n\n    private ChatServiceClientSingleton()\n    {\n        var callbackHandler = new ChatCallbackHandler();\n        var instanceContext = new InstanceContext(callbackHandler);\n        channelFactory = new DuplexChannelFactory<IChatService>(instanceContext, "YourWcfEndpoint");\n        chatService = channelFactory.CreateChannel();\n    }\n\n    public static ChatServiceClientSingleton Instance => instance.Value;\n\n    public IChatService ChatService => chatService;\n}\n\n// Using the singleton in your ASP.NET application\npublic class ChatController : Controller\n{\n    public ActionResult SendMessage(string message)\n    {\n        var client = ChatServiceClientSingleton.Instance.ChatService;\n        lock (client)\n        {\n            client.SendMessage(message);\n        }\n        return Json(new { success = true });\n    }\n\n    public ActionResult ReceiveMessage()\n    {\n        // Implement logic to retrieve messages for the current user/session\n        return Json(new { messages = new string[] { /* messages */ } });\n    }\n}