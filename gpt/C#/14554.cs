using System.Web;\nusing System.Web.Mvc;\nusing NUnit.Framework;\nusing Rhino.Mocks;\n\n[TestFixture]\npublic class CityControllerTests\n{\n    private CityController controller;\n    private ICityService _cityService;\n    private SessionData _sessionData;\n    private HttpContextBase _httpContext;\n    private HttpSessionStateBase _session;\n    private ControllerContext _controllerContext;\n\n    [SetUp]\n    public void SetUp()\n    {\n        // Create mock objects\n        _cityService = MockRepository.GenerateStub<ICityService>();\n        _sessionData = new SessionData { UserId = 1, SessionId = "1" };\n\n        // Mock the HttpContext\n        _httpContext = MockRepository.GenerateStub<HttpContextBase>();\n        _session = MockRepository.GenerateStub<HttpSessionStateBase>();\n        _httpContext.Stub(x => x.Session).Return(_session);\n\n        // Assign the session data to the mocked session\n        _session.Stub(x => x["UserSession"]).Return(_sessionData);\n\n        // Create the controller and assign the mocked ControllerContext\n        controller = new CityController(_cityService);\n        _controllerContext = new ControllerContext()\n        {\n            HttpContext = _httpContext\n        };\n        controller.ControllerContext = _controllerContext;\n    }\n\n    [Test]\n    public void Index_Action_Returns_View_With_Correct_Model()\n    {\n        // Arrange\n        var expectedCities = new List<City> { new City { Name = "Sample City" } };\n        _cityService.Stub(x => x.GetAll(_sessionData.UserId)).Return(expectedCities);\n\n        // Act\n        var result = controller.Index() as ViewResult;\n\n        // Assert\n        Assert.IsNotNull(result);\n        Assert.AreEqual(expectedCities, result.ViewData.Model);\n    }\n}