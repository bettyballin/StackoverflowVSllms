using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Runtime.Serialization;\nusing System.Windows.Media;\n\n[DataContract]\npublic class FontInfo\n{\n    [DataMember]\n    public string FontName { get; set; }\n\n    [IgnoreDataMember]\n    public FontFamily FontFamily { get; private set; }\n\n    public FontInfo(string fontName)\n    {\n        FontName = fontName;\n        FontFamily = new FontFamily(fontName);\n    }\n}\n\npublic class FontInfoSurrogate : IObjectReference\n{\n    [DataMember]\n    public string FontName { get; set; }\n\n    public object GetRealObject(StreamingContext context)\n    {\n        if (Fonts.SystemFontFamilies.Any(f => f.Source.Equals(FontName, StringComparison.OrdinalIgnoreCase)))\n        {\n            return new FontInfo(FontName);\n        }\n\n        return null; // Indicates the font was not found\n    }\n}\n\npublic class FontInfoSurrogateSelector : IDataContractSurrogate\n{\n    public Type GetDataContractType(Type type)\n    {\n        if (typeof(FontInfo).IsAssignableFrom(type))\n        {\n            return typeof(FontInfoSurrogate);\n        }\n        return type;\n    }\n\n    public object GetObjectToSerialize(object obj, Type targetType)\n    {\n        if (obj is FontInfo fontInfo)\n        {\n            return new FontInfoSurrogate { FontName = fontInfo.FontName };\n        }\n        return obj;\n    }\n\n    public object GetDeserializedObject(object obj, Type targetType)\n    {\n        return obj;\n    }\n\n    public object GetCustomDataToExport(Type clrType, Type dataContractType)\n    {\n        return null;\n    }\n\n    public object GetCustomDataToExport(MemberInfo memberInfo, Type dataContractType)\n    {\n        return null;\n    }\n\n    public void GetKnownCustomDataTypes(Collection<Type> customDataTypes)\n    {\n    }\n\n    public Type GetReferencedTypeOnImport(string typeName, string typeNamespace, object customData)\n    {\n        return null;\n    }\n\n    public CodeTypeDeclaration ProcessImportedType(CodeTypeDeclaration typeDeclaration, CodeCompileUnit compileUnit)\n    {\n        return typeDeclaration;\n    }\n}\n\n// Usage example\nvar serializer = new DataContractSerializer(typeof(List<FontInfo>), null, int.MaxValue, false, true, null, new FontInfoSurrogateSelector());\n\nusing (var stream = new MemoryStream())\n{\n    // Serialize\n    var fontList = new List<FontInfo> { new FontInfo("Arial"), new FontInfo("NonExistentFont") };\n    serializer.WriteObject(stream, fontList);\n\n    // Deserialize\n    stream.Position = 0;\n    var deserializedFontList = (List<FontInfo>)serializer.ReadObject(stream);\n    var validFonts = deserializedFontList.Where(f => f != null).ToList();\n}