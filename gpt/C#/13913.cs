using System;\nusing System.Runtime.InteropServices;\nusing System.Text;\n\npublic class CryptoAPI\n{\n    [DllImport("coredll.dll", SetLastError = true)]\n    private static extern bool CryptAcquireContext(\n        ref IntPtr hProv,\n        string pszContainer,\n        string pszProvider,\n        uint dwProvType,\n        uint dwFlags);\n\n    [DllImport("coredll.dll", SetLastError = true)]\n    private static extern bool CryptReleaseContext(\n        IntPtr hProv,\n        uint dwFlags);\n\n    [DllImport("coredll.dll", SetLastError = true)]\n    private static extern bool CryptEncrypt(\n        IntPtr hKey,\n        IntPtr hHash,\n        bool Final,\n        uint dwFlags,\n        byte[] pbData,\n        ref uint pdwDataLen,\n        uint dwBufLen);\n\n    [DllImport("coredll.dll", SetLastError = true)]\n    private static extern bool CryptDecrypt(\n        IntPtr hKey,\n        IntPtr hHash,\n        bool Final,\n        uint dwFlags,\n        byte[] pbData,\n        ref uint pdwDataLen);\n\n    public static byte[] EncryptData(byte[] data, IntPtr hKey)\n    {\n        uint dataLength = (uint)data.Length;\n        uint bufferSize = dataLength + 16; // Add padding\n\n        byte[] buffer = new byte[bufferSize];\n        Array.Copy(data, buffer, dataLength);\n\n        if (!CryptEncrypt(hKey, IntPtr.Zero, true, 0, buffer, ref dataLength, bufferSize))\n        {\n            throw new Exception("Encryption failed.");\n        }\n\n        Array.Resize(ref buffer, (int)dataLength);\n        return buffer;\n    }\n\n    public static byte[] DecryptData(byte[] data, IntPtr hKey)\n    {\n        uint dataLength = (uint)data.Length;\n\n        if (!CryptDecrypt(hKey, IntPtr.Zero, true, 0, data, ref dataLength))\n        {\n            throw new Exception("Decryption failed.");\n        }\n\n        Array.Resize(ref data, (int)dataLength);\n        return data;\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Example usage\n        IntPtr hProv = IntPtr.Zero;\n        IntPtr hKey = IntPtr.Zero;\n\n        try\n        {\n            if (!CryptAcquireContext(ref hProv, null, null, 1 /* PROV_RSA_FULL */, 0))\n            {\n                throw new Exception("Cryptographic context acquisition failed.");\n            }\n\n            // Assume hKey has been generated or imported\n\n            byte[] dataToEncrypt = Encoding.UTF8.GetBytes("Sensitive Data");\n            byte[] encryptedData = CryptoAPI.EncryptData(dataToEncrypt, hKey);\n            byte[] decryptedData = CryptoAPI.DecryptData(encryptedData, hKey);\n\n            Console.WriteLine("Original Data: " + Encoding.UTF8.GetString(dataToEncrypt));\n            Console.WriteLine("Decrypted Data: " + Encoding.UTF8.GetString(decryptedData));\n        }\n        finally\n        {\n            if (hProv != IntPtr.Zero)\n            {\n                CryptReleaseContext(hProv, 0);\n            }\n        }\n    }\n}