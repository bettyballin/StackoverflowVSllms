using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.ComponentModel;\n\nnamespace TestMvvm444.Model\n{\n    class Customer : INotifyPropertyChanged, INotifyDataErrorInfo\n    {\n        public int ID { get; set; }\n        public int NumberOfContracts { get; set; }\n\n        private string firstName;\n        private string lastName;\n        private readonly Dictionary<string, List<string>> _errors = new Dictionary<string, List<string>>();\n\n        public string FirstName\n        {\n            get { return firstName; }\n            set\n            {\n                if (firstName != value)\n                {\n                    firstName = value;\n                    RaisePropertyChanged("FirstName");\n                    RaisePropertyChanged("FullName");\n                }\n            }\n        }\n\n        public string LastName\n        {\n            get { return lastName; }\n            set\n            {\n                if (lastName != value)\n                {\n                    ValidateLastName(value);\n                    lastName = value;\n                    RaisePropertyChanged("LastName");\n                    RaisePropertyChanged("FullName");\n                }\n            }\n        }\n\n        public string FullName\n        {\n            get { return firstName + " " + lastName; }\n        }\n\n        private void ValidateLastName(string value)\n        {\n            ClearErrors(nameof(LastName));\n            if (value.Length > 50)\n            {\n                AddError(nameof(LastName), "Last name may only contain 50 characters.");\n            }\n        }\n\n        #region INotifyPropertyChanged\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        private void RaisePropertyChanged(string property)\n        {\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(property));\n        }\n        #endregion\n\n        #region INotifyDataErrorInfo\n        public event EventHandler<DataErrorsChangedEventArgs> ErrorsChanged;\n\n        public bool HasErrors => _errors.Count > 0;\n\n        public IEnumerable GetErrors(string propertyName)\n        {\n            if (string.IsNullOrEmpty(propertyName) || !_errors.ContainsKey(propertyName))\n            {\n                return null;\n            }\n\n            return _errors[propertyName];\n        }\n\n        private void AddError(string propertyName, string error)\n        {\n            if (!_errors.ContainsKey(propertyName))\n            {\n                _errors[propertyName] = new List<string>();\n            }\n\n            _errors[propertyName].Add(error);\n            OnErrorsChanged(propertyName);\n        }\n\n        private void ClearErrors(string propertyName)\n        {\n            if (_errors.ContainsKey(propertyName))\n            {\n                _errors.Remove(propertyName);\n                OnErrorsChanged(propertyName);\n            }\n        }\n\n        private void OnErrorsChanged(string propertyName)\n        {\n            ErrorsChanged?.Invoke(this, new DataErrorsChangedEventArgs(propertyName));\n        }\n        #endregion\n    }\n}