using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.Composition;\nusing System.ComponentModel.Composition.Hosting;\n\npublic class PluginManager\n{\n    private AggregateCatalog catalog;\n    private CompositionContainer container;\n    private CompositionBatch batch;\n    private Dictionary<string, string> pluginDictionary;\n    private List<ComposablePart> loadedParts = new List<ComposablePart>();\n\n    [Import]\n    public IEnumerable<IFilter> filters { get; set; }\n\n    public PluginManager()\n    {\n        ScanPluginDirectory();\n    }\n\n    private void ScanPluginDirectory()\n    {\n        catalog = new AggregateCatalog();\n        catalog.Catalogs.Add(new DirectoryCatalog(@"..\..\plugin"));\n        container = new CompositionContainer(catalog);\n\n        batch = new CompositionBatch();\n        batch.AddPart(this);\n\n        container.Compose(batch);\n\n        pluginDictionary = new Dictionary<string, string>();\n        foreach (IFilter filter in filters)\n        {\n            Type t = filter.GetType();\n            pluginDictionary.Add(filter.Name, t.Module.Name);\n        }\n\n        // Initially, load all plugins. This can be adjusted as needed.\n        LoadPlugins();\n    }\n\n    public void LoadPlugins()\n    {\n        foreach (var part in catalog.Parts)\n        {\n            ComposablePart composablePart = container.SatisfyImportsOnce(part);\n            loadedParts.Add(composablePart);\n        }\n    }\n\n    public void UnloadPlugin(string pluginName)\n    {\n        var partToRemove = loadedParts.Find(part =>\n        {\n            foreach (var def in part.ExportDefinitions)\n            {\n                if (def.ContractName.Contains(pluginName))\n                    return true;\n            }\n            return false;\n        });\n\n        if (partToRemove != null)\n        {\n            batch.RemovePart(partToRemove);\n            container.Compose(batch);\n            loadedParts.Remove(partToRemove);\n        }\n    }\n\n    // Call this method when a checkbox for a plugin is checked\n    public void OnPluginChecked(string pluginName)\n    {\n        // Load the plugin\n        LoadPlugins();\n    }\n\n    // Call this method when a checkbox for a plugin is unchecked\n    public void OnPluginUnchecked(string pluginName)\n    {\n        // Unload the plugin\n        UnloadPlugin(pluginName);\n    }\n}\n\npublic interface IFilter\n{\n    string Name { get; }\n}