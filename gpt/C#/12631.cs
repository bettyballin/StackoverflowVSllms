using System;\nusing System.IO;\nusing System.Xml;\nusing System.Xml.Schema;\n\npublic class XmlValidator\n{\n    private static bool isValid = true;\n\n    public static void ValidateXml(string xmlFilePath, string xsdFilePath)\n    {\n        XmlReaderSettings settings = new XmlReaderSettings();\n        settings.Schemas.Add(null, xsdFilePath);\n        settings.ValidationType = ValidationType.Schema;\n        settings.ValidationEventHandler += new ValidationEventHandler(ValidationEventHandler);\n\n        XmlDocument document = new XmlDocument();\n        document.Load(xmlFilePath);\n\n        using (XmlReader rdr = XmlReader.Create(new StringReader(document.InnerXml), settings))\n        {\n            while (rdr.Read()) { }\n        }\n\n        Console.WriteLine(isValid ? "XML is valid." : "XML is invalid.");\n    }\n\n    private static void ValidationEventHandler(object sender, ValidationEventArgs e)\n    {\n        isValid = false;\n\n        IXmlLineInfo lineInfo = sender as IXmlLineInfo;\n        if (lineInfo != null)\n        {\n            Console.WriteLine($"Error: {e.Message} at line {lineInfo.LineNumber}, position {lineInfo.LinePosition}");\n        }\n        else\n        {\n            Console.WriteLine($"Error: {e.Message}");\n        }\n    }\n\n    public static void Main(string[] args)\n    {\n        string xmlFilePath = "path/to/your/xmlfile.xml";\n        string xsdFilePath = "path/to/your/schema.xsd";\n        ValidateXml(xmlFilePath, xsdFilePath);\n    }\n}