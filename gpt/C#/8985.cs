// Assuming Accessories is a class with a property 'AccessoryId'\npublic class Accessories\n{\n    public int AccessoryId { get; set; }\n}\n\nclass ItemTpComparer : IComparer<Accessories>\n{\n    private IList<int> otherList;\n\n    public ItemTpComparer(IList<int> otherList)\n    {\n        this.otherList = otherList;\n    }\n\n    #region IComparer<Accessories> Members\n\n    public int Compare(Accessories x, Accessories y)\n    {\n        int xIndex = otherList.IndexOf(x.AccessoryId);\n        int yIndex = otherList.IndexOf(y.AccessoryId);\n\n        if (xIndex > yIndex)\n            return 1;\n        else if (xIndex < yIndex)\n            return -1;\n        else\n            return 0;\n    }\n\n    #endregion\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        List<Accessories> accessories = new List<Accessories>\n        {\n            new Accessories { AccessoryId = 6 },\n            new Accessories { AccessoryId = 7 },\n            new Accessories { AccessoryId = 8 },\n            new Accessories { AccessoryId = 10 },\n            new Accessories { AccessoryId = 11 },\n        };\n\n        List<int> sortOrder = new List<int> { 8, 6, 10, 11, 7 };\n\n        // Sort accessories list in place\n        accessories.Sort(new ItemTpComparer(sortOrder));\n\n        // Print the sorted list to verify\n        foreach (var accessory in accessories)\n        {\n            Console.WriteLine(accessory.AccessoryId);\n        }\n    }\n}