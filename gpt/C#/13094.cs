using BulletSharp;\nusing System;\n\nclass Program\n{\n    static void Main()\n    {\n        // Initialize Bullet physics world\n        var collisionConfiguration = new DefaultCollisionConfiguration();\n        var dispatcher = new CollisionDispatcher(collisionConfiguration);\n        var broadphase = new DbvtBroadphase();\n        var solver = new SequentialImpulseConstraintSolver();\n        var dynamicsWorld = new DiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration)\n        {\n            Gravity = new BulletSharp.Math.Vector3(0, -10, 0)\n        };\n\n        // Define the box shape and create a rigid body for it\n        var boxShape = new BoxShape(1, 1, 1);\n        var boxTransform = BulletSharp.Math.Matrix.Translation(0, 5, 0);\n        var mass = 1.0f;\n        var localInertia = boxShape.CalculateLocalInertia(mass);\n\n        var boxMotionState = new DefaultMotionState(boxTransform);\n        var boxConstructionInfo = new RigidBodyConstructionInfo(mass, boxMotionState, boxShape, localInertia);\n        var boxBody = new RigidBody(boxConstructionInfo);\n\n        // Add the box to the world\n        dynamicsWorld.AddRigidBody(boxBody);\n\n        // Simulate the world\n        for (int i = 0; i < 300; i++)\n        {\n            dynamicsWorld.StepSimulation(1 / 60.0f, 10);\n            var boxTransformUpdated = boxBody.MotionState.WorldTransform;\n            Console.WriteLine($"Box position at step {i}: {boxTransformUpdated.Origin}");\n        }\n\n        // Clean up\n        boxBody.Dispose();\n        boxConstructionInfo.Dispose();\n        boxMotionState.Dispose();\n        boxShape.Dispose();\n        dynamicsWorld.Dispose();\n        solver.Dispose();\n        broadphase.Dispose();\n        dispatcher.Dispose();\n        collisionConfiguration.Dispose();\n    }\n}