using System;\nusing System.Collections.Concurrent;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class ComObjectThread\n{\n    private readonly Thread _thread;\n    private readonly BlockingCollection<Action> _queue = new BlockingCollection<Action>();\n\n    public ComObjectThread()\n    {\n        _thread = new Thread(ProcessQueue) { IsBackground = true };\n        _thread.SetApartmentState(ApartmentState.STA); // Ensure the thread is STA\n        _thread.Start();\n    }\n\n    private void ProcessQueue()\n    {\n        foreach (var action in _queue.GetConsumingEnumerable())\n        {\n            action();\n        }\n    }\n\n    public void Enqueue(Action action)\n    {\n        _queue.Add(action);\n    }\n\n    public Task<T> Enqueue<T>(Func<T> func)\n    {\n        var tcs = new TaskCompletionSource<T>();\n        Enqueue(() =>\n        {\n            try\n            {\n                tcs.SetResult(func());\n            }\n            catch (Exception ex)\n            {\n                tcs.SetException(ex);\n            }\n        });\n        return tcs.Task;\n    }\n\n    public void Stop()\n    {\n        _queue.CompleteAdding();\n        _thread.Join();\n    }\n}\n\n// Example usage\npublic class Program\n{\n    public static void Main()\n    {\n        var comObjectThread = new ComObjectThread();\n\n        // Example of enqueuing a void action\n        comObjectThread.Enqueue(() =>\n        {\n            // Call your COM object methods here\n            Console.WriteLine("Action executed on the dedicated thread.");\n        });\n\n        // Example of enqueuing a function that returns a result\n        var task = comObjectThread.Enqueue(() =>\n        {\n            // Call your COM object methods and return a result\n            Console.WriteLine("Function executed on the dedicated thread.");\n            return 42;\n        });\n\n        task.ContinueWith(t => Console.WriteLine($"Result: {t.Result}"));\n\n        // Wait for the result\n        task.Wait();\n\n        // Stop the thread when done\n        comObjectThread.Stop();\n    }\n}