using System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.Linq;\n\npublic class Category\n{\n    public string ID { get; set; }\n    public string ParentCategoryID { get; set; }\n}\n\npublic class CategorySorter\n{\n    public static List<Category> TopologicalSort(ObservableCollection<Category> categories)\n    {\n        var sortedCategories = new List<Category>();\n        var visited = new HashSet<string>();\n        var tempVisited = new HashSet<string>();\n\n        var categoryDict = categories.ToDictionary(c => c.ID, c => c);\n\n        foreach (var category in categories)\n        {\n            if (!visited.Contains(category.ID))\n            {\n                if (!TopologicalSortUtil(category, categoryDict, visited, tempVisited, sortedCategories))\n                {\n                    throw new InvalidOperationException("Cyclic dependency detected.");\n                }\n            }\n        }\n\n        return sortedCategories;\n    }\n\n    private static bool TopologicalSortUtil(Category category, Dictionary<string, Category> categoryDict, HashSet<string> visited, HashSet<string> tempVisited, List<Category> sortedCategories)\n    {\n        if (tempVisited.Contains(category.ID))\n        {\n            return false; // Cycle detected\n        }\n\n        if (!visited.Contains(category.ID))\n        {\n            tempVisited.Add(category.ID);\n            var parentID = category.ParentCategoryID;\n\n            if (!string.IsNullOrEmpty(parentID) && categoryDict.ContainsKey(parentID))\n            {\n                var parentCategory = categoryDict[parentID];\n                if (!TopologicalSortUtil(parentCategory, categoryDict, visited, tempVisited, sortedCategories))\n                {\n                    return false; // Cycle detected in recursion\n                }\n            }\n\n            tempVisited.Remove(category.ID);\n            visited.Add(category.ID);\n            sortedCategories.Add(category);\n        }\n\n        return true;\n    }\n}\n\n// Example usage\nclass Program\n{\n    static void Main()\n    {\n        var categories = new ObservableCollection<Category>\n        {\n            new Category { ID = "1", ParentCategoryID = null },\n            new Category { ID = "2", ParentCategoryID = "1" },\n            new Category { ID = "3", ParentCategoryID = "1" },\n            new Category { ID = "4", ParentCategoryID = "2" },\n            new Category { ID = "5", ParentCategoryID = "2" }\n        };\n\n        try\n        {\n            var sortedCategories = CategorySorter.TopologicalSort(categories);\n            foreach (var category in sortedCategories)\n            {\n                Console.WriteLine($"Category ID: {category.ID}, Parent ID: {category.ParentCategoryID}");\n            }\n        }\n        catch (InvalidOperationException ex)\n        {\n            Console.WriteLine(ex.Message);\n        }\n    }\n}