using System;\nusing System.Collections.Concurrent;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\npublic class MyForm : Form\n{\n    private Button myButton;\n    private ConcurrentDictionary<int, string> safeDictionary = new ConcurrentDictionary<int, string>();\n    private readonly object _lockObject = new object();\n\n    public MyForm()\n    {\n        myButton = new Button();\n        myButton.Click += async (sender, args) => await OnButtonClickAsync();\n        Controls.Add(myButton);\n    }\n\n    private async Task OnButtonClickAsync()\n    {\n        await Task.Run(() => DoWork());\n        UpdateUI();\n    }\n\n    private void DoWork()\n    {\n        lock (_lockObject)\n        {\n            // Simulating work\n            safeDictionary.TryAdd(1, "value");\n        }\n    }\n\n    private void UpdateUI()\n    {\n        if (this.InvokeRequired)\n        {\n            this.Invoke(new MethodInvoker(delegate {\n                myButton.Text = "Updated";\n            }));\n        }\n        else\n        {\n            myButton.Text = "Updated";\n        }\n    }\n}