private static readonly object CacheLockObject = new object();\n\npublic SqlCommand GetCachedSqlCommand(string sql, SqlConnection con)\n{\n    SqlCommand com;\n\n    lock (CacheLockObject)\n    {\n        com = HttpContext.Current.Cache["mycommand"] as SqlCommand;\n        if (com == null)\n        {\n            com = new SqlCommand(sql, con)\n            {\n                CommandType = CommandType.StoredProcedure,\n                CommandTimeout = 120\n            };\n\n            SqlParameter par = new SqlParameter("@id", SqlDbType.Int)\n            {\n                Direction = ParameterDirection.Input\n            };\n\n            com.Parameters.Add(par);\n            HttpContext.Current.Cache["mycommand"] = com;\n        }\n        else\n        {\n            // Clone the command to avoid shared state issues\n            com = (SqlCommand)((ICloneable)HttpContext.Current.Cache["mycommand"]).Clone();\n            com.Connection = con;\n        }\n    }\n\n    return com;\n}