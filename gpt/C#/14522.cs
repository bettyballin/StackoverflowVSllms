using System.Collections.ObjectModel;\nusing System.ComponentModel;\nusing System.Runtime.CompilerServices;\n\npublic class SelectorViewModel<T> : INotifyPropertyChanged where T : ISelectableItem\n{\n    public ObservableCollection<T> AvailableItems { get; set; }\n    public ObservableCollection<T> SelectedItems { get; set; }\n\n    public SelectorViewModel()\n    {\n        AvailableItems = new ObservableCollection<T>();\n        SelectedItems = new ObservableCollection<T>();\n    }\n\n    public void MoveItem(T item)\n    {\n        if (item.IsSelected)\n        {\n            SelectedItems.Remove(item);\n            item.IsSelected = false;\n            AvailableItems.Add(item);\n        }\n        else\n        {\n            AvailableItems.Remove(item);\n            item.IsSelected = true;\n            SelectedItems.Add(item);\n        }\n\n        OnPropertyChanged(nameof(AvailableItems));\n        OnPropertyChanged(nameof(SelectedItems));\n    }\n\n    public event PropertyChangedEventHandler PropertyChanged;\n    protected void OnPropertyChanged([CallerMemberName] string propertyName = null)\n    {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n    }\n}