// Define a common interface for products\npublic interface IProduct\n{\n    int ProductId { get; set; }\n    string Description { get; set; }\n    void LoadAttributes(IEnumerable<KeyValuePair<string, string>> attributes);\n}\n\n// Implement specific product types\n[Export(typeof(IProduct))]\npublic class LightBulb : IProduct\n{\n    public int ProductId { get; set; }\n    public string Description { get; set; }\n    public string Type { get; set; }\n    public int Wattage { get; set; }\n    public string Style { get; set; }\n\n    public void LoadAttributes(IEnumerable<KeyValuePair<string, string>> attributes)\n    {\n        foreach (var attribute in attributes)\n        {\n            switch (attribute.Key)\n            {\n                case "Type": Type = attribute.Value; break;\n                case "Wattage": Wattage = int.Parse(attribute.Value); break;\n                case "Style": Style = attribute.Value; break;\n            }\n        }\n    }\n}\n\n// Discover and load products dynamically\npublic class ProductLoader\n{\n    [ImportMany]\n    public IEnumerable<Lazy<IProduct>> Products { get; set; }\n\n    public void LoadProduct(int productId)\n    {\n        // Fetch product and attributes from DB\n        var productData = FetchProductData(productId);\n        var productType = productData.ProductType;\n        var attributes = FetchProductAttributes(productId);\n\n        var product = Products.FirstOrDefault(p => p.Value.GetType().Name == productType)?.Value;\n        if (product != null)\n        {\n            product.ProductId = productData.ProductId;\n            product.Description = productData.Description;\n            product.LoadAttributes(attributes);\n        }\n    }\n\n    // Methods to fetch data from the database\n    private (int ProductId, string ProductType, string Description) FetchProductData(int productId)\n    {\n        // Implement data fetching here\n        // Example return value\n        return (1, "LightBulb", "A 75-watt incandescent light bulb");\n    }\n\n    private IEnumerable<KeyValuePair<string, string>> FetchProductAttributes(int productId)\n    {\n        // Implement attribute fetching here\n        // Example return value\n        return new List<KeyValuePair<string, string>>()\n        {\n            new KeyValuePair<string, string>("Type", "Incandescent"),\n            new KeyValuePair<string, string>("Wattage", "75"),\n            new KeyValuePair<string, string>("Style", "Spot")\n        };\n    }\n}