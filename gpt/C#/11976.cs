using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class PasswordChecker\n{\n    private const int SaltSize = 16; // 128 bit\n    private const int KeySize = 32;  // 256 bit\n    private const int Iterations = 10000;\n    private const string KnownPlaintext = "CheckValue";\n\n    public static (byte[], byte[], byte[]) CreatePasswordHash(string password)\n    {\n        using (var rng = new RNGCryptoServiceProvider())\n        {\n            var salt = new byte[SaltSize];\n            rng.GetBytes(salt);\n\n            var key = new Rfc2898DeriveBytes(password, salt, Iterations).GetBytes(KeySize);\n\n            using (var aes = new AesManaged())\n            {\n                aes.Key = key;\n                aes.GenerateIV();\n                var iv = aes.IV;\n\n                using (var encryptor = aes.CreateEncryptor(aes.Key, aes.IV))\n                using (var ms = new System.IO.MemoryStream())\n                using (var cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))\n                using (var sw = new System.IO.StreamWriter(cs))\n                {\n                    sw.Write(KnownPlaintext);\n                    sw.Flush();\n                    cs.FlushFinalBlock();\n\n                    var checkValue = ms.ToArray();\n                    return (salt, iv, checkValue);\n                }\n            }\n        }\n    }\n\n    public static bool VerifyPassword(string password, byte[] salt, byte[] iv, byte[] checkValue)\n    {\n        var key = new Rfc2898DeriveBytes(password, salt, Iterations).GetBytes(KeySize);\n\n        using (var aes = new AesManaged())\n        {\n            aes.Key = key;\n            aes.IV = iv;\n\n            using (var decryptor = aes.CreateDecryptor(aes.Key, aes.IV))\n            using (var ms = new System.IO.MemoryStream(checkValue))\n            using (var cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read))\n            using (var sr = new System.IO.StreamReader(cs))\n            {\n                var decryptedText = sr.ReadToEnd();\n                return decryptedText == KnownPlaintext;\n            }\n        }\n    }\n}\n\n// Example usage:\n// var (salt, iv, checkValue) = PasswordChecker.CreatePasswordHash("user-password");\n// bool isValid = PasswordChecker.VerifyPassword("user-password", salt, iv, checkValue);