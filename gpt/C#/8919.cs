using System;\nusing System.ComponentModel;\nusing System.Threading;\n\nclass Program\n{\n    static BackgroundWorker backgroundWorker = new BackgroundWorker();\n    static ManualResetEvent cancelCompletedEvent = new ManualResetEvent(false);\n\n    static void Main(string[] args)\n    {\n        // Set up the BackgroundWorker\n        backgroundWorker.WorkerSupportsCancellation = true;\n        backgroundWorker.DoWork += new DoWorkEventHandler(BackgroundWorker_DoWork);\n        backgroundWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(BackgroundWorker_RunWorkerCompleted);\n\n        // Set up the CancelKeyPress event handler\n        Console.CancelKeyPress += new ConsoleCancelEventHandler(Console_CancelKeyPress);\n\n        // Start the BackgroundWorker\n        backgroundWorker.RunWorkerAsync();\n\n        // Wait for the background worker to complete\n        cancelCompletedEvent.WaitOne();\n\n        Console.WriteLine("Application is closing...");\n    }\n\n    static void BackgroundWorker_DoWork(object sender, DoWorkEventArgs e)\n    {\n        // Simulating long-running operation\n        for (int i = 0; i < 10; i++)\n        {\n            if (backgroundWorker.CancellationPending)\n            {\n                e.Cancel = true;\n                break;\n            }\n            Console.WriteLine("Working...");\n            Thread.Sleep(1000); // Simulate work\n        }\n    }\n\n    static void BackgroundWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)\n    {\n        if (e.Cancelled)\n        {\n            Console.WriteLine("Operation was cancelled.");\n        }\n        else\n        {\n            Console.WriteLine("Operation completed.");\n        }\n        \n        // Signal that the background worker has finished\n        cancelCompletedEvent.Set();\n    }\n\n    static void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs e)\n    {\n        // Prevent the application from terminating immediately\n        e.Cancel = true;\n\n        if (backgroundWorker.IsBusy)\n        {\n            Console.WriteLine("Cancellation requested...");\n            backgroundWorker.CancelAsync();\n        }\n    }\n}