using System;\nusing System.Runtime.InteropServices;\nusing System.Windows.Forms;\n\npublic class RawInputDevice\n{\n    [StructLayout(LayoutKind.Sequential)]\n    public struct RAWINPUTDEVICE\n    {\n        public ushort usUsagePage;\n        public ushort usUsage;\n        public uint dwFlags;\n        public IntPtr hwndTarget;\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct RAWINPUTHEADER\n    {\n        public uint dwType;\n        public uint dwSize;\n        public IntPtr hDevice;\n        public IntPtr wParam;\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct RAWINPUT\n    {\n        public RAWINPUTHEADER header;\n        public RAWKEYBOARD keyboard;\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct RAWKEYBOARD\n    {\n        public ushort MakeCode;\n        public ushort Flags;\n        public ushort Reserved;\n        public ushort VKey;\n        public uint Message;\n        public uint ExtraInformation;\n    }\n\n    [DllImport("User32.dll")]\n    public static extern bool RegisterRawInputDevices(RAWINPUTDEVICE[] pRawInputDevices, uint uiNumDevices, uint cbSize);\n\n    [DllImport("User32.dll")]\n    public static extern uint GetRawInputData(IntPtr hRawInput, uint uiCommand, IntPtr pData, ref uint pcbSize, uint cbSizeHeader);\n\n    [DllImport("User32.dll")]\n    public static extern uint GetRawInputDeviceInfo(IntPtr hDevice, uint uiCommand, IntPtr pData, ref uint pcbSize);\n\n    const uint RIDEV_INPUTSINK = 0x00000100;\n    const uint RID_INPUT = 0x10000003;\n    const uint RIDI_DEVICEINFO = 0x2000000b;\n    const uint RIM_TYPEKEYBOARD = 1;\n\n    public void RegisterKeyboardDevice(IntPtr hwnd)\n    {\n        RAWINPUTDEVICE[] rid = new RAWINPUTDEVICE[1];\n        rid[0].usUsagePage = 0x01;\n        rid[0].usUsage = 0x06; // Keyboard\n        rid[0].dwFlags = RIDEV_INPUTSINK;\n        rid[0].hwndTarget = hwnd;\n\n        if (!RegisterRawInputDevices(rid, (uint)rid.Length, (uint)Marshal.SizeOf(typeof(RAWINPUTDEVICE))))\n        {\n            throw new ApplicationException("Failed to register raw input device(s).");\n        }\n    }\n\n    public void ProcessRawInput(IntPtr hRawInput)\n    {\n        uint dwSize = 0;\n        GetRawInputData(hRawInput, RID_INPUT, IntPtr.Zero, ref dwSize, (uint)Marshal.SizeOf(typeof(RAWINPUTHEADER)));\n\n        IntPtr buffer = Marshal.AllocHGlobal((int)dwSize);\n        try\n        {\n            if (GetRawInputData(hRawInput, RID_INPUT, buffer, ref dwSize, (uint)Marshal.SizeOf(typeof(RAWINPUTHEADER))) != dwSize)\n            {\n                throw new ApplicationException("Failed to get raw input data.");\n            }\n\n            RAWINPUT raw = (RAWINPUT)Marshal.PtrToStructure(buffer, typeof(RAWINPUT));\n            if (raw.header.dwType == RIM_TYPEKEYBOARD)\n            {\n                // Now you have the device handle in raw.header.hDevice\n                Console.WriteLine($"Key: {raw.keyboard.VKey}, Device: {raw.header.hDevice}");\n                \n                // You can use GetRawInputDeviceInfo to get more information about the device\n                uint pcbSize = 0;\n                GetRawInputDeviceInfo(raw.header.hDevice, RIDI_DEVICEINFO, IntPtr.Zero, ref pcbSize);\n                IntPtr deviceInfo = Marshal.AllocHGlobal((int)pcbSize);\n                GetRawInputDeviceInfo(raw.header.hDevice, RIDI_DEVICEINFO, deviceInfo, ref pcbSize);\n                \n                // Process device information if needed\n                // ...\n                \n                Marshal.FreeHGlobal(deviceInfo);\n            }\n        }\n        finally\n        {\n            Marshal.FreeHGlobal(buffer);\n        }\n    }\n}