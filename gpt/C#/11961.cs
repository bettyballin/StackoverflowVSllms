using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Item\n{\n    public int ItemId { get; set; }\n    public string Brand { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n    public string Condition { get; set; }\n    public string Description { get; set; }\n    public bool Active { get; set; }\n}\n\npublic class Tag\n{\n    public int TagId { get; set; }\n    public string Name { get; set; }\n    public bool Active { get; set; }\n}\n\npublic class TagMap\n{\n    public int TagMapId { get; set; }\n    public int TagId { get; set; }\n    public int ItemId { get; set; }\n    public bool Active { get; set; }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        List<Item> items = new List<Item>(); // Populate with your items\n        List<Tag> tags = new List<Tag>(); // Populate with your tags\n        List<TagMap> tagMaps = new List<TagMap>(); // Populate with your tag maps\n\n        int[] tagIds = { 2, 3, 4, 7 };\n\n        var query = from item in items\n                    join tagMap in tagMaps on item.ItemId equals tagMap.ItemId\n                    where tagIds.Contains(tagMap.TagId) && item.Active && tagMap.Active\n                    select item;\n\n        var result = query.Distinct().ToList();\n\n        foreach (var item in result)\n        {\n            Console.WriteLine($"Item: {item.Name}, Brand: {item.Brand}");\n        }\n    }\n}