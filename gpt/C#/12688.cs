public abstract class ModelBase\n{\n    public bool IsValid\n    {\n        get\n        {\n            return GetRuleViolations().Count() == 0;\n        }\n    }\n\n    public void Validate()\n    {\n        if (!IsValid)\n        {\n            throw new ApplicationException("Rule violations prevent saving");\n        }\n    }\n\n    public abstract IEnumerable<RuleViolation> GetRuleViolations();\n}\n\npublic partial class Foo : ModelBase\n{\n    public override IEnumerable<RuleViolation> GetRuleViolations()\n    {\n        // Add Foo-specific rule violations here\n        yield break;\n    }\n\n    partial void OnValidate(ChangeAction action)\n    {\n        Validate();\n    }\n}\n\npublic partial class Bar : ModelBase\n{\n    public override IEnumerable<RuleViolation> GetRuleViolations()\n    {\n        // Add Bar-specific rule violations here\n        yield break;\n    }\n\n    partial void OnValidate(ChangeAction action)\n    {\n        Validate();\n    }\n}