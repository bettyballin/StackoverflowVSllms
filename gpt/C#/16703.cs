using System;\nusing System.Collections.Generic;\n\npublic class DomainMatcher\n{\n    private class TrieNode\n    {\n        public Dictionary<string, TrieNode> Children = new Dictionary<string, TrieNode>();\n        public bool IsEndOfDomain = false;\n    }\n\n    private TrieNode root = new TrieNode();\n\n    public void AddDomain(string domain)\n    {\n        var parts = domain.Split('.');\n        Array.Reverse(parts);\n        var node = root;\n\n        foreach (var part in parts)\n        {\n            if (!node.Children.ContainsKey(part))\n            {\n                node.Children[part] = new TrieNode();\n            }\n            node = node.Children[part];\n        }\n        node.IsEndOfDomain = true;\n    }\n\n    public bool MatchDomain(string domain)\n    {\n        var parts = domain.Split('.');\n        Array.Reverse(parts);\n\n        return MatchNode(parts, 0, root);\n    }\n\n    private bool MatchNode(string[] parts, int index, TrieNode node)\n    {\n        if (index == parts.Length)\n        {\n            return node.IsEndOfDomain;\n        }\n\n        if (node.Children.ContainsKey("*"))\n        {\n            return true;\n        }\n\n        if (node.Children.ContainsKey(parts[index]))\n        {\n            return MatchNode(parts, index + 1, node.Children[parts[index]]);\n        }\n\n        return false;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        var matcher = new DomainMatcher();\n        matcher.AddDomain("example.com");\n        matcher.AddDomain("*.example.com");\n\n        Console.WriteLine(matcher.MatchDomain("www.example.com")); // True\n        Console.WriteLine(matcher.MatchDomain("example.com")); // True\n        Console.WriteLine(matcher.MatchDomain("sub.www.example.com")); // True\n        Console.WriteLine(matcher.MatchDomain("other.com")); // False\n    }\n}