public interface IMathOperators<T>\n{\n    T Add(T other);\n    T Subtract(T other);\n}\n\npublic class IntMath : IMathOperators<int>\n{\n    public int Add(int other) => this + other;\n    public int Subtract(int other) => this - other;\n}\n\npublic class DoubleMath : IMathOperators<double>\n{\n    public double Add(double other) => this + other;\n    public double Subtract(double other) => this - other;\n}\n\npublic class MathCollection<T, TMath> where TMath : IMathOperators<T>, new()\n{\n    private readonly TMath _mathOperator = new TMath();\n    private readonly List<T> _items = new List<T>();\n\n    public void Add(T item) => _items.Add(item);\n\n    public T AddAll()\n    {\n        T sum = default;\n        foreach (var item in _items)\n        {\n            sum = _mathOperator.Add(sum, item);\n        }\n        return sum;\n    }\n\n    public T SubtractAll()\n    {\n        T difference = default;\n        foreach (var item in _items)\n        {\n            difference = _mathOperator.Subtract(difference, item);\n        }\n        return difference;\n    }\n}\n\n// Usage\nvar intCollection = new MathCollection<int, IntMath>();\nintCollection.Add(1);\nintCollection.Add(2);\nint sum = intCollection.AddAll(); // sum will be 3\n\nvar doubleCollection = new MathCollection<double, DoubleMath>();\ndoubleCollection.Add(1.1);\ndoubleCollection.Add(2.2);\ndouble doubleSum = doubleCollection.AddAll(); // doubleSum will be 3.3