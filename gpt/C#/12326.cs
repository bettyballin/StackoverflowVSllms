using System;\nusing System.IO;\nusing System.Web.Services;\nusing System.Web.Services.Protocols;\n\npublic class SOAPTraceExtension : SoapExtension\n{\n    private Stream oldStream;\n    private Stream newStream;\n\n    public override object GetInitializer(Type serviceType)\n    {\n        return null;\n    }\n\n    public override object GetInitializer(LogicalMethodInfo methodInfo, SoapExtensionAttribute attribute)\n    {\n        return null;\n    }\n\n    public override void Initialize(object initializer) {}\n\n    public override void ProcessMessage(SoapMessage message)\n    {\n        switch (message.Stage)\n        {\n            case SoapMessageStage.BeforeSerialize:\n                break;\n            case SoapMessageStage.AfterSerialize:\n                LogSOAPMessage(message);\n                break;\n            case SoapMessageStage.BeforeDeserialize:\n                LogSOAPMessage(message);\n                break;\n            case SoapMessageStage.AfterDeserialize:\n                break;\n        }\n    }\n\n    public override Stream ChainStream(Stream stream)\n    {\n        oldStream = stream;\n        newStream = new MemoryStream();\n        return newStream;\n    }\n\n    private void LogSOAPMessage(SoapMessage message)\n    {\n        newStream.Position = 0;\n        StreamReader reader = new StreamReader(newStream);\n        string soapMessage = reader.ReadToEnd();\n        newStream.Position = 0;\n\n        // Log the SOAP message to a file or another logging mechanism\n        File.AppendAllText("C:\\SOAPLogs\\SOAPMessages.log", soapMessage);\n        \n        CopyStream(newStream, oldStream);\n    }\n\n    private void CopyStream(Stream fromStream, Stream toStream)\n    {\n        byte[] buffer = new byte[8192];\n        int count;\n        while ((count = fromStream.Read(buffer, 0, buffer.Length)) > 0)\n        {\n            toStream.Write(buffer, 0, count);\n        }\n        toStream.Position = 0;\n    }\n}