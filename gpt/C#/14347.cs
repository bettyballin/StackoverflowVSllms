// Initial Synchronization\nvoid InitialSync(IMAPClient client, Database db) {\n    var folders = client.GetFolders();\n    foreach (var folder in folders) {\n        var messages = client.FetchAllMessageHeaders(folder);\n        foreach (var message in messages) {\n            db.InsertOrUpdateMessage(folder, message);\n        }\n    }\n}\n\n// Incremental Synchronization\nvoid IncrementalSync(IMAPClient client, Database db) {\n    var folders = client.GetFolders();\n    foreach (var folder in folders) {\n        var lastSyncUID = db.GetLastSyncUID(folder);\n        var newMessages = client.FetchNewMessages(folder, lastSyncUID);\n        foreach (var message in newMessages) {\n            db.InsertOrUpdateMessage(folder, message);\n        }\n\n        var deletedMessages = db.GetMessagesNotIn(folder, newMessages.Select(m => m.UID).ToList());\n        foreach (var deletedMessage in deletedMessages) {\n            db.DeleteMessage(deletedMessage);\n        }\n    }\n}\n\n// Real-time Updates with IMAP IDLE\nasync void RealTimeSync(IMAPClient client, Database db) {\n    var folders = client.GetFolders();\n    foreach (var folder in folders) {\n        client.OnNewMessage += (sender, message) => {\n            db.InsertOrUpdateMessage(folder, message);\n        };\n        client.OnMessageDeleted += (sender, messageUID) => {\n            db.DeleteMessageByUID(folder, messageUID);\n        };\n        await client.StartIdle(folder);\n    }\n}