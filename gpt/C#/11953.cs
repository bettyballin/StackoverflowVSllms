using System.Collections.Immutable;\nusing Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.Diagnostics;\n\n[DiagnosticAnalyzer(LanguageNames.CSharp)]\npublic class AlwaysPassTestAnalyzerAnalyzer : DiagnosticAnalyzer\n{\n    public const string DiagnosticId = "AlwaysPassTestAnalyzer";\n\n    private static readonly LocalizableString Title = "Test always passes";\n    private static readonly LocalizableString MessageFormat = "This test always passes";\n    private const string Category = "Testing";\n\n    private static DiagnosticDescriptor Rule = new DiagnosticDescriptor(DiagnosticId, Title, MessageFormat, Category, DiagnosticSeverity.Warning, isEnabledByDefault: true);\n\n    public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics => ImmutableArray.Create(Rule);\n\n    public override void Initialize(AnalysisContext context)\n    {\n        context.ConfigureGeneratedCodeAnalysis(GeneratedCodeAnalysisFlags.None);\n        context.EnableConcurrentExecution();\n        context.RegisterSyntaxNodeAction(AnalyzeNode, Microsoft.CodeAnalysis.CSharp.SyntaxKind.MethodDeclaration);\n    }\n\n    private static void AnalyzeNode(SyntaxNodeAnalysisContext context)\n    {\n        var methodDeclaration = (Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax)context.Node;\n\n        // Check if the method has a test attribute\n        var attributes = methodDeclaration.AttributeLists;\n        bool isTestMethod = false;\n\n        foreach (var attributeList in attributes)\n        {\n            foreach (var attribute in attributeList.Attributes)\n            {\n                var name = attribute.Name.ToString();\n                if (name.Contains("Test") || name.Contains("Fact"))\n                {\n                    isTestMethod = true;\n                    break;\n                }\n            }\n\n            if (isTestMethod)\n                break;\n        }\n\n        if (!isTestMethod)\n            return;\n\n        // Check for assert(true) or similar patterns\n        var body = methodDeclaration.Body;\n        if (body != null)\n        {\n            foreach (var statement in body.Statements)\n            {\n                if (statement.ToString().Contains("Assert.True(true") || statement.ToString().Contains("Assert.IsTrue(true"))\n                {\n                    var diagnostic = Diagnostic.Create(Rule, methodDeclaration.GetLocation());\n                    context.ReportDiagnostic(diagnostic);\n                    break;\n                }\n            }\n        }\n    }\n}