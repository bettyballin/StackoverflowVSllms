using System;\nusing System.Collections.Generic;\n\npublic class FastList<T>\n{\n    private List<T> _list = new List<T>();\n    private Dictionary<T, int> _indexMap = new Dictionary<T, int>();\n\n    public void Add(T item)\n    {\n        _list.Add(item);\n        _indexMap[item] = _list.Count - 1;\n    }\n\n    public void Insert(int index, T item)\n    {\n        _list.Insert(index, item);\n        UpdateIndexMapFrom(index);\n    }\n\n    public bool Remove(T item)\n    {\n        if (_indexMap.TryGetValue(item, out int index))\n        {\n            _list.RemoveAt(index);\n            _indexMap.Remove(item);\n            UpdateIndexMapFrom(index);\n            return true;\n        }\n        return false;\n    }\n\n    public int IndexOf(T item)\n    {\n        return _indexMap.TryGetValue(item, out int index) ? index : -1;\n    }\n\n    public T this[int index]\n    {\n        get { return _list[index]; }\n        set\n        {\n            T oldItem = _list[index];\n            _list[index] = value;\n            _indexMap.Remove(oldItem);\n            _indexMap[value] = index;\n        }\n    }\n\n    private void UpdateIndexMapFrom(int startIndex)\n    {\n        for (int i = startIndex; i < _list.Count; i++)\n        {\n            _indexMap[_list[i]] = i;\n        }\n    }\n\n    public int Count => _list.Count;\n}