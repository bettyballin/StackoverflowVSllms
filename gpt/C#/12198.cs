using System;\nusing System.Configuration;\nusing System.IO;\nusing System.Reflection;\nusing System.Xml;\n\npublic class ConfigLoader\n{\n    public static void LoadConfig(string configFilePath)\n    {\n        var configMap = new ExeConfigurationFileMap { ExeConfigFilename = configFilePath };\n        Configuration config = ConfigurationManager.OpenMappedExeConfiguration(configMap, ConfigurationUserLevel.None);\n\n        // Clear the existing settings and add the new ones\n        ConfigurationManager.AppSettings.Clear();\n        foreach (var key in config.AppSettings.Settings.AllKeys)\n        {\n            ConfigurationManager.AppSettings.Set(key, config.AppSettings.Settings[key].Value);\n        }\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // Specify the path to the DLL's config file\n        string dllConfigPath = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), "yourDllConfig.config");\n\n        // Load the config settings\n        ConfigLoader.LoadConfig(dllConfigPath);\n\n        // Now you can access the settings as if they were in the main application's config file\n        Console.WriteLine(ConfigurationManager.AppSettings["ConnectString"]);\n    }\n}