using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Item\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public int? ParentId { get; set; }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        List<Item> items = new List<Item>\n        {\n            new Item { Id = 1, Name = "TOP CHILD", ParentId = null },\n            new Item { Id = 2, Name = "Child C", ParentId = 3 },\n            new Item { Id = 3, Name = "Child B", ParentId = 4 },\n            new Item { Id = 4, Name = "Child A", ParentId = 1 }\n        };\n\n        var sortedItems = TopologicalSort(items);\n        \n        foreach (var item in sortedItems)\n        {\n            Console.WriteLine($"Id: {item.Id}, Name: {item.Name}, ParentId: {item.ParentId}");\n        }\n    }\n\n    static List<Item> TopologicalSort(List<Item> items)\n    {\n        var sortedList = new List<Item>();\n        var visited = new Dictionary<int, bool>();\n        var itemDict = items.ToDictionary(i => i.Id);\n\n        foreach (var item in items)\n        {\n            if (!visited.ContainsKey(item.Id))\n            {\n                DFS(item, visited, sortedList, itemDict);\n            }\n        }\n\n        return sortedList;\n    }\n\n    static void DFS(Item item, Dictionary<int, bool> visited, List<Item> sortedList, Dictionary<int, Item> itemDict)\n    {\n        visited[item.Id] = true;\n\n        foreach (var child in itemDict.Values.Where(i => i.ParentId == item.Id))\n        {\n            if (!visited.ContainsKey(child.Id))\n            {\n                DFS(child, visited, sortedList, itemDict);\n            }\n        }\n\n        sortedList.Insert(0, item); // Add to the beginning of the list to maintain topological order\n    }\n}