using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Foo\n{\n    public int id { get; set; }\n    public string name { get; set; }\n}\n\npublic class Bar\n{\n    public ArrayList foos { get; set; }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Assuming fooTable and fooTable2 are your data sources\n        var fooTable = new List<Foo>\n        {\n            new Foo { id = 1, name = "Foo1" },\n            new Foo { id = 2, name = "Foo2" },\n            new Foo { id = 1, name = "Foo3" }\n        };\n\n        var fooTable2 = new List<Foo>\n        {\n            new Foo { id = 1, name = "Foo1", colour = "white" },\n            new Foo { id = 2, name = "Foo2", colour = "black" },\n            new Foo { id = 1, name = "Foo3", colour = "white" }\n        };\n\n        var query = from tFoo in fooTable\n                    join tFoo2 in fooTable2 on tFoo.id equals tFoo2.id\n                    where tFoo2.colour == "white"\n                    select new Foo\n                    {\n                        id = tFoo.id,\n                        name = tFoo.name\n                    };\n\n        var query2 = from foo in query\n                     group foo by foo.id into groupedFoos\n                     select new Bar\n                     {\n                         foos = new ArrayList(groupedFoos.ToList())\n                     };\n\n        // To see the result\n        foreach (var bar in query2)\n        {\n            Console.WriteLine("Bar:");\n            foreach (Foo foo in bar.foos)\n            {\n                Console.WriteLine($"- Foo: id = {foo.id}, name = {foo.name}");\n            }\n        }\n    }\n}