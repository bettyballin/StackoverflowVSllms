// Generate CSRF token and store it in the session\npublic void GenerateCsrfToken(HttpContext context)\n{\n    string csrfToken = Guid.NewGuid().ToString();\n    context.Session["CsrfToken"] = csrfToken;\n}\n\n// Add CSRF token to the form as a hidden field\npublic void InjectCsrfToken(HttpContext context, HtmlTextWriter writer)\n{\n    string csrfToken = context.Session["CsrfToken"] as string;\n    if (!string.IsNullOrEmpty(csrfToken))\n    {\n        writer.Write($"<input type='hidden' name='csrfToken' value='{csrfToken}' />");\n    }\n}\n\n// Validate CSRF token on form submission\npublic bool ValidateCsrfToken(HttpContext context)\n{\n    string storedToken = context.Session["CsrfToken"] as string;\n    string requestToken = context.Request.Form["csrfToken"];\n\n    return !string.IsNullOrEmpty(storedToken) && storedToken == requestToken;\n}\n\n// Example IHttpModule implementation\npublic class CsrfModule : IHttpModule\n{\n    public void Init(HttpApplication context)\n    {\n        context.BeginRequest += (sender, e) =>\n        {\n            HttpContext httpContext = ((HttpApplication)sender).Context;\n            if (httpContext.Request.HttpMethod == "GET")\n            {\n                GenerateCsrfToken(httpContext);\n            }\n        };\n        \n        context.PreRequestHandlerExecute += (sender, e) =>\n        {\n            HttpContext httpContext = ((HttpApplication)sender).Context;\n            if (httpContext.Request.HttpMethod == "POST")\n            {\n                if (!ValidateCsrfToken(httpContext))\n                {\n                    httpContext.Response.StatusCode = 403;\n                    httpContext.Response.End();\n                }\n            }\n        };\n    }\n\n    public void Dispose() { }\n}