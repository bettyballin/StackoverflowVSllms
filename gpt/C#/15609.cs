using System;\n   using System.Net;\n   using System.Threading.Tasks;\n   using Titanium.Web.Proxy;\n   using Titanium.Web.Proxy.EventArguments;\n   using Titanium.Web.Proxy.Models;\n\n   public class TestProxy : IDisposable\n   {\n       private readonly ProxyServer proxyServer;\n       private readonly ExplicitProxyEndPoint explicitEndPoint;\n\n       public TestProxy()\n       {\n           proxyServer = new ProxyServer();\n           explicitEndPoint = new ExplicitProxyEndPoint(IPAddress.Loopback, 8080, true);\n           proxyServer.AddEndPoint(explicitEndPoint);\n           proxyServer.BeforeRequest += OnRequest;\n           proxyServer.BeforeResponse += OnResponse;\n       }\n\n       public void Start()\n       {\n           proxyServer.Start();\n       }\n\n       public void Stop()\n       {\n           proxyServer.Stop();\n       }\n\n       private Task OnRequest(object sender, SessionEventArgs e)\n       {\n           // Inspect or modify the request here\n           Console.WriteLine($"Request: {e.HttpClient.Request.Url}");\n           return Task.CompletedTask;\n       }\n\n       private Task OnResponse(object sender, SessionEventArgs e)\n       {\n           // Inspect or modify the response here\n           Console.WriteLine($"Response: {e.HttpClient.Response.StatusCode}");\n           return Task.CompletedTask;\n       }\n\n       public void Dispose()\n       {\n           Stop();\n           proxyServer.Dispose();\n       }\n   }