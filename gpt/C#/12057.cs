using System;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Runtime.InteropServices;\nusing System.Security;\nusing System.Security.Principal;\n\nclass Program\n{\n    [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Auto)]\n    public static extern bool CreateProcessWithLogonW(\n        string userName,\n        string domain,\n        string password,\n        int logonFlags,\n        string applicationName,\n        string commandLine,\n        int creationFlags,\n        IntPtr environment,\n        string currentDirectory,\n        ref STARTUPINFO startupInfo,\n        out PROCESS_INFORMATION processInformation);\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct STARTUPINFO\n    {\n        public int cb;\n        public string lpReserved;\n        public string lpDesktop;\n        public string lpTitle;\n        public int dwX;\n        public int dwY;\n        public int dwXSize;\n        public int dwYSize;\n        public int dwXCountChars;\n        public int dwYCountChars;\n        public int dwFillAttribute;\n        public int dwFlags;\n        public short wShowWindow;\n        public short cbReserved2;\n        public IntPtr lpReserved2;\n        public IntPtr hStdInput;\n        public IntPtr hStdOutput;\n        public IntPtr hStdError;\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct PROCESS_INFORMATION\n    {\n        public IntPtr hProcess;\n        public IntPtr hThread;\n        public int dwProcessId;\n        public int dwThreadId;\n    }\n\n    public const int LOGON_WITH_PROFILE = 1;\n    public const int CREATE_NO_WINDOW = 0x08000000;\n    public const int STARTF_USESTDHANDLES = 0x00000100;\n\n    static void Main(string[] args)\n    {\n        string userName = "yourUsername";\n        string domain = "yourDomain";\n        string password = "yourPassword";\n        string command = "robocopy yourSource yourDestination";\n\n        STARTUPINFO si = new STARTUPINFO();\n        si.cb = Marshal.SizeOf(si);\n        si.dwFlags = STARTF_USESTDHANDLES;\n        si.hStdOutput = GetStdHandle(StdHandle.Stdout);\n        si.hStdError = GetStdHandle(StdHandle.Stderr);\n\n        PROCESS_INFORMATION pi;\n\n        if (!CreateProcessWithLogonW(userName, domain, password, LOGON_WITH_PROFILE, null, command, CREATE_NO_WINDOW, IntPtr.Zero, null, ref si, out pi))\n        {\n            throw new System.ComponentModel.Win32Exception(Marshal.GetLastWin32Error());\n        }\n\n        Process process = Process.GetProcessById(pi.dwProcessId);\n        using (StreamReader reader = process.StandardOutput)\n        {\n            string result = reader.ReadToEnd();\n            Console.WriteLine(result);\n        }\n\n        process.WaitForExit();\n        int exitCode = process.ExitCode;\n        Console.WriteLine("Exit Code: " + exitCode);\n    }\n\n    [DllImport("kernel32.dll", SetLastError = true)]\n    private static extern IntPtr GetStdHandle(StdHandle nStdHandle);\n\n    private enum StdHandle\n    {\n        Stdin = -10,\n        Stdout = -11,\n        Stderr = -12\n    }\n}