using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class AesEncryption\n{\n    public static void Main()\n    {\n        string original = "Sensitive data to encrypt";\n\n        using (Aes aes = Aes.Create())\n        {\n            aes.Key = GenerateRandomKey();\n            aes.IV = GenerateRandomIV();\n\n            byte[] encrypted = EncryptStringToBytes_Aes(original, aes.Key, aes.IV);\n            string decrypted = DecryptStringFromBytes_Aes(encrypted, aes.Key, aes.IV);\n\n            Console.WriteLine($"Original:   {original}");\n            Console.WriteLine($"Encrypted:  {Convert.ToBase64String(encrypted)}");\n            Console.WriteLine($"Decrypted:  {decrypted}");\n        }\n    }\n\n    static byte[] GenerateRandomKey()\n    {\n        using (var rng = new RNGCryptoServiceProvider())\n        {\n            byte[] key = new byte[32]; // 256 bits\n            rng.GetBytes(key);\n            return key;\n        }\n    }\n\n    static byte[] GenerateRandomIV()\n    {\n        using (var rng = new RNGCryptoServiceProvider())\n        {\n            byte[] iv = new byte[16]; // 128 bits\n            rng.GetBytes(iv);\n            return iv;\n        }\n    }\n\n    static byte[] EncryptStringToBytes_Aes(string plainText, byte[] Key, byte[] IV)\n    {\n        if (plainText == null || plainText.Length <= 0)\n            throw new ArgumentNullException(nameof(plainText));\n        if (Key == null || Key.Length <= 0)\n            throw new ArgumentNullException(nameof(Key));\n        if (IV == null || IV.Length <= 0)\n            throw new ArgumentNullException(nameof(IV));\n\n        byte[] encrypted;\n\n        using (Aes aesAlg = Aes.Create())\n        {\n            aesAlg.Key = Key;\n            aesAlg.IV = IV;\n\n            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n            using (MemoryStream msEncrypt = new MemoryStream())\n            {\n                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                {\n                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))\n                    {\n                        swEncrypt.Write(plainText);\n                    }\n                    encrypted = msEncrypt.ToArray();\n                }\n            }\n        }\n\n        return encrypted;\n    }\n\n    static string DecryptStringFromBytes_Aes(byte[] cipherText, byte[] Key, byte[] IV)\n    {\n        if (cipherText == null || cipherText.Length <= 0)\n            throw new ArgumentNullException(nameof(cipherText));\n        if (Key == null || Key.Length <= 0)\n            throw new ArgumentNullException(nameof(Key));\n        if (IV == null || IV.Length <= 0)\n            throw new ArgumentNullException(nameof(IV));\n\n        string plaintext;\n\n        using (Aes aesAlg = Aes.Create())\n        {\n            aesAlg.Key = Key;\n            aesAlg.IV = IV;\n\n            ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);\n\n            using (MemoryStream msDecrypt = new MemoryStream(cipherText))\n            {\n                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n                {\n                    using (StreamReader srDecrypt = new StreamReader(csDecrypt))\n                    {\n                        plaintext = srDecrypt.ReadToEnd();\n                    }\n                }\n            }\n        }\n\n        return plaintext;\n    }\n}