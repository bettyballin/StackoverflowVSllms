using System;\nusing System.IO;\nusing System.Security.Cryptography;\n\npublic class EncryptionHelper\n{\n    public static void EncryptFile(string inputFile, string outputFile, string password)\n    {\n        byte[] salt = GenerateRandomSalt();\n        using (FileStream fsCrypt = new FileStream(outputFile, FileMode.Create))\n        {\n            byte[] passwordBytes = System.Text.Encoding.UTF8.GetBytes(password);\n\n            using (RijndaelManaged AES = new RijndaelManaged())\n            {\n                AES.KeySize = 256;\n                AES.BlockSize = 128;\n                var key = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);\n                AES.Key = key.GetBytes(AES.KeySize / 8);\n                AES.IV = key.GetBytes(AES.BlockSize / 8);\n                AES.Padding = PaddingMode.PKCS7;\n\n                fsCrypt.Write(salt, 0, salt.Length);\n\n                using (CryptoStream cs = new CryptoStream(fsCrypt, AES.CreateEncryptor(), CryptoStreamMode.Write))\n                {\n                    using (FileStream fsIn = new FileStream(inputFile, FileMode.Open))\n                    {\n                        byte[] buffer = new byte[1048576];\n                        int read;\n                        while ((read = fsIn.Read(buffer, 0, buffer.Length)) > 0)\n                        {\n                            cs.Write(buffer, 0, read);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private static byte[] GenerateRandomSalt()\n    {\n        byte[] data = new byte[32];\n        using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())\n        {\n            rng.GetBytes(data);\n        }\n        return data;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        string fileToEncrypt = "path/to/your/file.txt";\n        string encryptedFile = "path/to/your/encryptedFile.enc";\n        string zipFileToCreate = "path/to/your/archive.zip";\n        string password = "YourStrongPassword";\n\n        // Encrypt the file\n        EncryptionHelper.EncryptFile(fileToEncrypt, encryptedFile, password);\n\n        // Create a zip file and add the encrypted file to it\n        using (ZipFile zip = new ZipFile())\n        {\n            zip.AddFile(encryptedFile, ""); // Add the encrypted file to the zip\n            zip.Save(zipFileToCreate); // Save the zip file\n        }\n\n        Console.WriteLine("File encrypted and compressed successfully.");\n    }\n}