using System;\nusing System.Collections.Generic;\n\npublic class CombinationSumSolver\n{\n    public decimal[][] Solve(decimal goal, decimal[] elements)\n    {\n        List<decimal[]> result = new List<decimal[]>();\n        List<decimal> combination = new List<decimal>();\n        Array.Sort(elements); // Sort elements to handle duplicates and facilitate the process\n        FindCombinations(result, combination, elements, goal, 0);\n        return result.ToArray();\n    }\n\n    private void FindCombinations(List<decimal[]> result, List<decimal> combination, decimal[] elements, decimal target, int startIndex)\n    {\n        if (target == 0)\n        {\n            result.Add(combination.ToArray());\n            return;\n        }\n\n        for (int i = startIndex; i < elements.Length; i++)\n        {\n            if (i > startIndex && elements[i] == elements[i - 1]) // Skip duplicates\n                continue;\n\n            if (elements[i] > target)\n                break;\n\n            combination.Add(elements[i]);\n            FindCombinations(result, combination, elements, target - elements[i], i + 1); // Use i+1 to avoid reusing the same element\n            combination.RemoveAt(combination.Count - 1);\n        }\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        CombinationSumSolver solver = new CombinationSumSolver();\n        decimal goal = 7.0m;\n        decimal[] elements = { 2.5m, 3.5m, 1.5m, 6.0m, 2.0m };\n\n        decimal[][] result = solver.Solve(goal, elements);\n        Console.WriteLine("Combinations that sum to the goal:");\n        foreach (var combination in result)\n        {\n            Console.WriteLine(string.Join(", ", combination));\n        }\n    }\n}