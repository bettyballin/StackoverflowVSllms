using System;\nusing System.Collections.Generic;\nusing iText.Kernel.Pdf;\nusing iText.Kernel.Pdf.Canvas.Parser;\nusing iText.Kernel.Pdf.Canvas.Parser.Listener;\nusing iText.Kernel.Pdf.Navigation;\n\nclass Program\n{\n    static void Main()\n    {\n        string sourcePdf = "source.pdf";\n        string destinationPdf = "destination.pdf";\n\n        PdfDocument pdfDoc = new PdfDocument(new PdfReader(sourcePdf), new PdfWriter(destinationPdf));\n        var bookmarks = new PdfOutline(pdfDoc.GetOutlines(false), "Root", pdfDoc);\n\n        for (int i = 1; i <= pdfDoc.GetNumberOfPages(); i++)\n        {\n            var processor = new PdfCanvasProcessor(new CustomTextExtractionStrategy());\n            processor.ProcessPageContent(pdfDoc.GetPage(i));\n\n            var strategy = (CustomTextExtractionStrategy)processor.GetEventListener();\n            foreach (var header in strategy.Headers)\n            {\n                var outline = bookmarks.AddOutline(header);\n                outline.AddDestination(PdfExplicitDestination.CreateFit(pdfDoc.GetPage(i)));\n            }\n        }\n\n        pdfDoc.Close();\n    }\n}\n\npublic class CustomTextExtractionStrategy : LocationTextExtractionStrategy\n{\n    public List<string> Headers { get; private set; } = new List<string>();\n\n    public override void EventOccurred(IEventData data, EventType type)\n    {\n        base.EventOccurred(data, type);\n\n        if (type == EventType.RENDER_TEXT)\n        {\n            var renderInfo = (TextRenderInfo)data;\n            if (renderInfo.GetFontSize() > 12) // Assuming headers have font size larger than 12\n            {\n                Headers.Add(renderInfo.GetText());\n            }\n        }\n    }\n}