using System;\nusing System.Management;\n\npublic class RemoteProcess\n{\n    public static void Main(string[] args)\n    {\n        string remoteMachine = "RemoteMachineName";\n        string username = "Username";\n        string password = "Password";\n        string command = @"C:\Path\To\Your\Executable.exe";\n        string workingDirectory = @"C:\Path\To\Working\Directory";\n\n        ConnectionOptions options = new ConnectionOptions();\n        options.Username = username;\n        options.Password = password;\n        options.Impersonation = ImpersonationLevel.Impersonate;\n        options.EnablePrivileges = true;\n\n        ManagementScope scope = new ManagementScope($"\\\\{remoteMachine}\\root\\cimv2", options);\n        scope.Connect();\n\n        ManagementClass processClass = new ManagementClass(scope, new ManagementPath("Win32_Process"), new ObjectGetOptions());\n        ManagementBaseObject inParams = processClass.GetMethodParameters("Create");\n\n        // Setting the command and working directory\n        inParams["CommandLine"] = command;\n        ManagementClass startupClass = new ManagementClass(scope, new ManagementPath("Win32_ProcessStartup"), new ObjectGetOptions());\n        ManagementObject startup = startupClass.CreateInstance();\n        startup["WorkingDirectory"] = workingDirectory;\n        inParams["ProcessStartupInformation"] = startup;\n\n        ManagementBaseObject outParams = processClass.InvokeMethod("Create", inParams, null);\n\n        // Output the result\n        Console.WriteLine("Process ID: {0}", outParams["processId"]);\n        Console.WriteLine("Return Value: {0}", outParams["returnValue"]);\n    }\n}