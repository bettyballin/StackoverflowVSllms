using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class PasswordHasher\n{\n    public const int SaltSize = 16; // 128 bit\n    public const int HashSize = 20; // 160 bit\n\n    public static string HashPassword(string password)\n    {\n        // Generate a salt\n        byte[] salt;\n        new RNGCryptoServiceProvider().GetBytes(salt = new byte[SaltSize]);\n\n        // Create the Rfc2898DeriveBytes and get the hash value\n        var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 10000);\n        byte[] hash = pbkdf2.GetBytes(HashSize);\n\n        // Combine the salt and password bytes for later use\n        byte[] hashBytes = new byte[SaltSize + HashSize];\n        Array.Copy(salt, 0, hashBytes, 0, SaltSize);\n        Array.Copy(hash, 0, hashBytes, SaltSize, HashSize);\n\n        // Turn the combined salt+hash into a string for storage\n        string savedPasswordHash = Convert.ToBase64String(hashBytes);\n        return savedPasswordHash;\n    }\n\n    public static bool VerifyPassword(string savedPasswordHash, string password)\n    {\n        // Extract the bytes\n        byte[] hashBytes = Convert.FromBase64String(savedPasswordHash);\n\n        // Get the salt\n        byte[] salt = new byte[SaltSize];\n        Array.Copy(hashBytes, 0, salt, 0, SaltSize);\n\n        // Compute the hash on the password the user entered\n        var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 10000);\n        byte[] hash = pbkdf2.GetBytes(HashSize);\n\n        // Compare the results\n        for (int i = 0; i < HashSize; i++)\n            if (hashBytes[i + SaltSize] != hash[i])\n                return false;\n\n        return true;\n    }\n}