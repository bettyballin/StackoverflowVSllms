using Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.CSharp;\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\nusing Microsoft.CodeAnalysis.Diagnostics;\n\n[DiagnosticAnalyzer(LanguageNames.CSharp)]\npublic class MyAttributeAnalyzer : DiagnosticAnalyzer\n{\n    public const string DiagnosticId = "MyAttributeWarning";\n\n    private static readonly LocalizableString Title = "Custom Attribute Warning";\n    private static readonly LocalizableString MessageFormat = "{0}";\n    private static readonly LocalizableString Description = "This is a custom attribute warning";\n    private const string Category = "Refactoring";\n\n    private static DiagnosticDescriptor Rule = new DiagnosticDescriptor(DiagnosticId, Title, MessageFormat, Category, DiagnosticSeverity.Warning, isEnabledByDefault: true, description: Description);\n\n    public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics { get { return ImmutableArray.Create(Rule); } }\n\n    public override void Initialize(AnalysisContext context)\n    {\n        context.RegisterSyntaxNodeAction(AnalyzeNode, SyntaxKind.MethodDeclaration);\n    }\n\n    private void AnalyzeNode(SyntaxNodeAnalysisContext context)\n    {\n        var methodDeclaration = (MethodDeclarationSyntax)context.Node;\n        var attributes = methodDeclaration.AttributeLists.SelectMany(al => al.Attributes);\n\n        foreach (var attribute in attributes)\n        {\n            var symbol = context.SemanticModel.GetSymbolInfo(attribute).Symbol as IMethodSymbol;\n            if (symbol?.ContainingType.Name == "MyAttribute")\n            {\n                var message = (string)((LiteralExpressionSyntax)attribute.ArgumentList.Arguments[0].Expression).Token.Value;\n                var diagnostic = Diagnostic.Create(Rule, attribute.GetLocation(), message);\n                context.ReportDiagnostic(diagnostic);\n            }\n        }\n    }\n}