using System;\nusing System.Diagnostics;\nusing System.IO;\nusing System.IO.Pipes;\nusing System.Threading;\nusing System.Windows.Forms;\n\nclass Program\n{\n    private const string PipeName = "MyUniquePipeName";\n\n    static void Main()\n    {\n        bool isNewInstance;\n        using (Mutex mutex = new Mutex(true, "MyUniqueMutexName", out isNewInstance))\n        {\n            if (isNewInstance)\n            {\n                // This is the primary instance\n                StartNamedPipeServer();\n                Application.Run(new MainForm()); // Your main application form\n            }\n            else\n            {\n                // This is a secondary instance\n                using (NamedPipeClientStream client = new NamedPipeClientStream(".", PipeName, PipeDirection.Out))\n                {\n                    try\n                    {\n                        client.Connect(1000); // Wait up to 1 second to connect\n                        using (StreamWriter writer = new StreamWriter(client))\n                        {\n                            writer.WriteLine("UpdateAction");\n                            writer.Flush();\n                        }\n                    }\n                    catch (TimeoutException)\n                    {\n                        MessageBox.Show("Failed to communicate with the primary instance.");\n                    }\n                }\n                return;\n            }\n        }\n    }\n\n    private static void StartNamedPipeServer()\n    {\n        Thread pipeThread = new Thread(() =>\n        {\n            using (NamedPipeServerStream server = new NamedPipeServerStream(PipeName, PipeDirection.In))\n            {\n                while (true)\n                {\n                    server.WaitForConnection();\n                    using (StreamReader reader = new StreamReader(server))\n                    {\n                        string message = reader.ReadLine();\n                        if (message == "UpdateAction")\n                        {\n                            // Handle the update action\n                            MessageBox.Show("The action will be updated as requested by the new instance.");\n                            // Update your application's state here\n                        }\n                    }\n                    server.Disconnect();\n                }\n            }\n        });\n        pipeThread.IsBackground = true;\n        pipeThread.Start();\n    }\n}