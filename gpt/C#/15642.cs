using NHibernate;\nusing NHibernate.SqlTypes;\nusing NHibernate.UserTypes;\nusing System;\nusing System.Data;\n\npublic class BooleanUserType : IUserType\n{\n    public SqlType[] SqlTypes => new SqlType[] { SqlTypeFactory.GetString(1) };\n\n    public Type ReturnedType => typeof(bool);\n\n    public bool IsMutable => false;\n\n    public object NullSafeGet(IDataReader rs, string[] names, object owner)\n    {\n        var value = NHibernateUtil.String.NullSafeGet(rs, names[0]) as string;\n        return value == "Y";\n    }\n\n    public void NullSafeSet(IDbCommand cmd, object value, int index)\n    {\n        var parameter = (IDataParameter)cmd.Parameters[index];\n        parameter.Value = (bool)value ? "Y" : "N";\n    }\n\n    public object DeepCopy(object value) => value;\n\n    public object Replace(object original, object target, object owner) => original;\n\n    public object Assemble(object cached, object owner) => cached;\n\n    public object Disassemble(object value) => value;\n\n    public bool Equals(object x, object y) => x?.Equals(y) ?? y == null;\n\n    public int GetHashCode(object x) => x?.GetHashCode() ?? 0;\n}