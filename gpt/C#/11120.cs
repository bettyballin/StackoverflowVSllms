using System;\nusing System.Runtime.InteropServices;\nusing System.Runtime.InteropServices.ComTypes;\n\npublic class ComEventExample\n{\n    private delegate void ComEventHandler();\n\n    public static void RegisterComEvent(object comObject, Guid eventGuid, int dispid, Action handler)\n    {\n        var sink = new ComEventSink(eventGuid, dispid, handler);\n        ComEventsHelper.Combine(comObject, sink);\n    }\n\n    public static void UnregisterComEvent(object comObject, Guid eventGuid, int dispid)\n    {\n        ComEventsHelper.Remove(comObject, eventGuid, dispid);\n    }\n\n    private class ComEventSink : ICustomQueryInterface\n    {\n        private readonly Guid _eventGuid;\n        private readonly int _dispid;\n        private readonly Action _handler;\n\n        public ComEventSink(Guid eventGuid, int dispid, Action handler)\n        {\n            _eventGuid = eventGuid;\n            _dispid = dispid;\n            _handler = handler;\n        }\n\n        public CustomQueryInterfaceResult GetInterface(ref Guid iid, out IntPtr ppv)\n        {\n            if (iid == _eventGuid)\n            {\n                ppv = Marshal.GetComInterfaceForObject(this, typeof(IDispatch));\n                return CustomQueryInterfaceResult.Handled;\n            }\n\n            ppv = IntPtr.Zero;\n            return CustomQueryInterfaceResult.NotHandled;\n        }\n\n        [DispId(0)]\n        public void Invoke()\n        {\n            _handler.Invoke();\n        }\n    }\n}