// Step 1: Define a base entity class\npublic abstract class BaseEntity\n{\n    public int Id { get; set; }\n    public string CreatedByUserId { get; set; } // or TenantId\n}\n\n// Step 2: Define an interface for entities that require RLS\npublic interface IRowLevelSecurity\n{\n    string CreatedByUserId { get; set; }\n}\n\n// Step 3: Implement RLS in the DbContext\npublic class ApplicationDbContext : DbContext\n{\n    private readonly string _currentUserId;\n\n    // Assuming you have a way to get the current user's ID, perhaps via a service\n    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options, IUserService userService)\n        : base(options)\n    {\n        _currentUserId = userService.GetCurrentUserId();\n    }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        base.OnModelCreating(modelBuilder);\n\n        // Apply global query filter to all entities implementing IRowLevelSecurity\n        foreach (var entityType in modelBuilder.Model.GetEntityTypes())\n        {\n            if (typeof(IRowLevelSecurity).IsAssignableFrom(entityType.ClrType))\n            {\n                var parameter = Expression.Parameter(entityType.ClrType, "e");\n                var filter = Expression.Lambda(\n                    Expression.Equal(\n                        Expression.Property(parameter, nameof(IRowLevelSecurity.CreatedByUserId)),\n                        Expression.Constant(_currentUserId)\n                    ),\n                    parameter\n                );\n\n                modelBuilder.Entity(entityType.ClrType).HasQueryFilter(filter);\n            }\n        }\n    }\n\n    public DbSet<SomeEntity> SomeEntities { get; set; }\n}\n\n// Example entity implementing BaseEntity and IRowLevelSecurity\npublic class SomeEntity : BaseEntity, IRowLevelSecurity\n{\n    public string Name { get; set; }\n    // Other properties\n}