using System;\nusing System.Runtime.InteropServices;\nusing System.Net;\nusing System.Security;\n\npublic class TaskSchedulerHelper\n{\n    public void CreateScheduledTask()\n    {\n        NetworkCredential taskSchedulerCredentials = GetCredentialFromManager("taskSchedulerUser");\n\n        // Impersonate the user using the retrieved credentials\n        using (new Impersonation(taskSchedulerCredentials.UserName, "DOMAIN", taskSchedulerCredentials.Password))\n        {\n            // Code to create the scheduled task\n        }\n    }\n\n    private NetworkCredential GetCredentialFromManager(string target)\n    {\n        // Implement logic to retrieve credentials from Windows Credential Manager\n        return new NetworkCredential("taskSchedulerUser", "password", "DOMAIN");\n    }\n}\n\npublic class Impersonation : IDisposable\n{\n    private IntPtr userHandle = IntPtr.Zero;\n    private WindowsImpersonationContext impersonatedUser;\n\n    [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Auto)]\n    private extern static bool LogonUser(String lpszUsername, String lpszDomain, String lpszPassword, int dwLogonType, int dwLogonProvider, ref IntPtr phToken);\n\n    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]\n    private extern static bool DuplicateToken(IntPtr ExistingTokenHandle, int SECURITY_IMPERSONATION_LEVEL, ref IntPtr DuplicateTokenHandle);\n\n    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]\n    private extern static bool RevertToSelf();\n\n    [DllImport("kernel32.dll", CharSet = CharSet.Auto)]\n    private extern static bool CloseHandle(IntPtr handle);\n\n    public Impersonation(string userName, string domain, string password)\n    {\n        userHandle = IntPtr.Zero;\n\n        const int LOGON32_PROVIDER_DEFAULT = 0;\n        const int LOGON32_LOGON_INTERACTIVE = 2;\n        const int SecurityImpersonation = 2;\n\n        userHandle = IntPtr.Zero;\n\n        bool returnValue = LogonUser(userName, domain, password, LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT, ref userHandle);\n\n        if (returnValue == false)\n        {\n            int ret = Marshal.GetLastWin32Error();\n            throw new System.ComponentModel.Win32Exception(ret);\n        }\n\n        IntPtr tokenHandle = IntPtr.Zero;\n        returnValue = DuplicateToken(userHandle, SecurityImpersonation, ref tokenHandle);\n\n        if (returnValue == false)\n        {\n            CloseHandle(userHandle);\n            int ret = Marshal.GetLastWin32Error();\n            throw new System.ComponentModel.Win32Exception(ret);\n        }\n\n        WindowsIdentity newId = new WindowsIdentity(tokenHandle);\n        impersonatedUser = newId.Impersonate();\n    }\n\n    public void Dispose()\n    {\n        impersonatedUser.Undo();\n        if (userHandle != IntPtr.Zero)\n        {\n            CloseHandle(userHandle);\n        }\n    }\n}