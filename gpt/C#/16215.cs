using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing System.Web.Mvc;\n\npublic class MvcInspector\n{\n    public static List<ControllerActionInfo> GetControllersAndActions()\n    {\n        var assembly = Assembly.GetExecutingAssembly();\n        var controllerTypes = assembly.GetTypes()\n                                      .Where(type => typeof(Controller).IsAssignableFrom(type))\n                                      .ToList();\n\n        var controllerActionInfos = new List<ControllerActionInfo>();\n\n        foreach (var controllerType in controllerTypes)\n        {\n            var actions = controllerType.GetMethods(BindingFlags.Instance | BindingFlags.DeclaredOnly | BindingFlags.Public)\n                                        .Where(m => !m.IsSpecialName && typeof(ActionResult).IsAssignableFrom(m.ReturnType));\n\n            foreach (var action in actions)\n            {\n                controllerActionInfos.Add(new ControllerActionInfo\n                {\n                    ControllerName = controllerType.Name,\n                    ActionName = action.Name\n                });\n            }\n        }\n\n        return controllerActionInfos;\n    }\n}\n\npublic class ControllerActionInfo\n{\n    public string ControllerName { get; set; }\n    public string ActionName { get; set; }\n}