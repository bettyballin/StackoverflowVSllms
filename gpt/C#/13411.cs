using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class BigInteger\n{\n    private List<int> digits; // Stores digits in reverse order for easier manipulation\n\n    public BigInteger(string number)\n    {\n        digits = number.Reverse().Select(d => int.Parse(d.ToString())).ToList();\n    }\n\n    public BigInteger Add(BigInteger other)\n    {\n        List<int> result = new List<int>();\n        int carry = 0;\n        int maxLength = Math.Max(digits.Count, other.digits.Count);\n\n        for (int i = 0; i < maxLength; i++)\n        {\n            int sum = carry;\n            if (i < digits.Count)\n                sum += digits[i];\n            if (i < other.digits.Count)\n                sum += other.digits[i];\n\n            carry = sum / 10;\n            result.Add(sum % 10);\n        }\n\n        if (carry > 0)\n            result.Add(carry);\n\n        return new BigInteger(string.Concat(result.Select(d => d.ToString()).Reverse()));\n    }\n\n    public override string ToString()\n    {\n        return string.Concat(digits.Select(d => d.ToString()).Reverse());\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        BigInteger num1 = new BigInteger("12345678901234567890");\n        BigInteger num2 = new BigInteger("98765432109876543210");\n        BigInteger sum = num1.Add(num2);\n        Console.WriteLine(sum); // Output: 111111111011111111100\n    }\n}