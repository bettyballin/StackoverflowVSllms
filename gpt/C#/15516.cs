using System;\nusing System.Web;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class CookieHelper\n{\n    private static readonly string EncryptionKey = "YourEncryptionKeyHere"; // Replace with your key\n\n    public static void SetEncryptedCookie(HttpResponse response, string name, string value)\n    {\n        string encryptedValue = Encrypt(value);\n        HttpCookie cookie = new HttpCookie(name, encryptedValue)\n        {\n            Secure = true,\n            HttpOnly = true\n        };\n        response.Cookies.Add(cookie);\n    }\n\n    public static string GetDecryptedCookie(HttpRequest request, string name)\n    {\n        HttpCookie cookie = request.Cookies[name];\n        if (cookie != null)\n        {\n            return Decrypt(cookie.Value);\n        }\n        return null;\n    }\n\n    private static string Encrypt(string clearText)\n    {\n        byte[] clearBytes = Encoding.Unicode.GetBytes(clearText);\n        using (Aes encryptor = Aes.Create())\n        {\n            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 });\n            encryptor.Key = pdb.GetBytes(32);\n            encryptor.IV = pdb.GetBytes(16);\n            using (System.IO.MemoryStream ms = new System.IO.MemoryStream())\n            {\n                using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateEncryptor(), CryptoStreamMode.Write))\n                {\n                    cs.Write(clearBytes, 0, clearBytes.Length);\n                    cs.Close();\n                }\n                clearText = Convert.ToBase64String(ms.ToArray());\n            }\n        }\n        return clearText;\n    }\n\n    private static string Decrypt(string cipherText)\n    {\n        cipherText = cipherText.Replace(" ", "+");\n        byte[] cipherBytes = Convert.FromBase64String(cipherText);\n        using (Aes encryptor = Aes.Create())\n        {\n            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 });\n            encryptor.Key = pdb.GetBytes(32);\n            encryptor.IV = pdb.GetBytes(16);\n            using (System.IO.MemoryStream ms = new System.IO.MemoryStream())\n            {\n                using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateDecryptor(), CryptoStreamMode.Write))\n                {\n                    cs.Write(cipherBytes, 0, cipherBytes.Length);\n                    cs.Close();\n                }\n                cipherText = Encoding.Unicode.GetString(ms.ToArray());\n            }\n        }\n        return cipherText;\n    }\n}