using System;\nusing System.IO;\nusing System.Text.RegularExpressions;\n\nclass Program {\n    static void Main(string[] args) {\n        string directory;\n        string ext = "*.xml"; // Use wildcard for GetFiles method\n\n        if (args.Length != 1) {\n            Console.WriteLine("Please provide exactly one argument specifying the directory path.");\n            return; // Exit if the argument is not provided\n        } else {\n            Console.WriteLine("Argument accepted.");\n            directory = args[0];\n\n            // Make sure the directory passed is valid\n            if (ValidateDirectory(directory)) {\n                Console.WriteLine("Directory is valid.");\n                DeleteFiles(directory, ext);\n            } else {\n                Console.WriteLine("Invalid directory.");\n            }\n        }\n        Console.WriteLine("Done.");\n    }\n\n    static bool ValidateDirectory(string d) {\n        // Improved regex to validate directory path\n        return Regex.IsMatch(d, @"^(?:[a-zA-Z]\:|\\)(\\[a-zA-Z0-9._-]+)+\\?$");\n    }\n\n    static void DeleteFiles(string d, string ext) {\n        try {\n            DirectoryInfo di = new DirectoryInfo(d);\n            FileInfo[] fi = di.GetFiles(ext);\n\n            Console.WriteLine("Number of files = " + fi.Length + ".");\n            foreach (FileInfo f in fi) {\n                try {\n                    Console.WriteLine(f.FullName);\n                    f.Delete();\n                } catch (Exception ex) {\n                    // Log exception details\n                    Console.WriteLine("Error deleting file: " + ex.Message);\n                }\n            }\n        } catch (Exception ex) {\n            // Log exception if directory access fails\n            Console.WriteLine("Error accessing directory: " + ex.Message);\n        }\n    }\n}