using System;\nusing System.CodeDom.Compiler;\nusing Microsoft.CSharp;\n\nclass Program\n{\n    static void Main()\n    {\n        var codeProvider = new CSharpCodeProvider(new Dictionary<string, string> { { "CompilerVersion", "v3.5" } });\n        var parameters = new CompilerParameters\n        {\n            GenerateInMemory = true,\n            TreatWarningsAsErrors = false,\n            CompilerOptions = "/optimize"\n        };\n\n        string code = @"\n        using System;\n        public class DynamicClass\n        {\n            public void Execute()\n            {\n                var message = ""Hello, World!"";\n                Console.WriteLine(message);\n            }\n        }";\n\n        CompilerResults results = codeProvider.CompileAssemblyFromSource(parameters, code);\n\n        if (results.Errors.HasErrors)\n        {\n            foreach (CompilerError error in results.Errors)\n            {\n                Console.WriteLine($"Error ({error.ErrorNumber}): {error.ErrorText}");\n            }\n        }\n        else\n        {\n            var assembly = results.CompiledAssembly;\n            var dynamicClass = assembly.GetType("DynamicClass");\n            var instance = Activator.CreateInstance(dynamicClass);\n            dynamicClass.GetMethod("Execute").Invoke(instance, null);\n        }\n    }\n}