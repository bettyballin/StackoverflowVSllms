using System;\n     using System.IO;\n     using System.Reflection;\n     using System.Web;\n     using System.Web.Hosting;\n\n     public class EmbeddedResourceVirtualPathProvider : VirtualPathProvider\n     {\n         public override bool FileExists(string virtualPath)\n         {\n             return base.FileExists(virtualPath) || GetResourceStream(virtualPath) != null;\n         }\n\n         public override VirtualFile GetFile(string virtualPath)\n         {\n             if (base.FileExists(virtualPath))\n             {\n                 return base.GetFile(virtualPath);\n             }\n             var resourceStream = GetResourceStream(virtualPath);\n             if (resourceStream != null)\n             {\n                 return new EmbeddedResourceVirtualFile(virtualPath, resourceStream);\n             }\n             return base.GetFile(virtualPath);\n         }\n\n         private Stream GetResourceStream(string virtualPath)\n         {\n             var assembly = Assembly.GetExecutingAssembly();\n             var resourceName = assembly.GetName().Name + virtualPath.Replace("~", "").Replace("/", ".");\n             return assembly.GetManifestResourceStream(resourceName);\n         }\n     }\n\n     public class EmbeddedResourceVirtualFile : VirtualFile\n     {\n         private readonly Stream _resourceStream;\n\n         public EmbeddedResourceVirtualFile(string virtualPath, Stream resourceStream) : base(virtualPath)\n         {\n             _resourceStream = resourceStream;\n         }\n\n         public override Stream Open()\n         {\n             return _resourceStream;\n         }\n     }