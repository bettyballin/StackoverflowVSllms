using System;\nusing System.Collections.Generic;\nusing UglyToad.PdfPig;\n\nclass Program\n{\n    static void Main()\n    {\n        string pdfPath = "path/to/your/pdf/file.pdf";\n        string searchString = "your_filename_string";\n        List<string> matchingLines = new List<string>();\n\n        using (PdfDocument document = PdfDocument.Open(pdfPath))\n        {\n            foreach (var page in document.GetPages())\n            {\n                var words = page.GetWords();\n                var lines = GetLinesFromWords(words);\n\n                foreach (var line in lines)\n                {\n                    if (line.Contains(searchString))\n                    {\n                        matchingLines.Add(line);\n                    }\n                }\n            }\n        }\n\n        // Output or use the matching lines as needed\n        foreach (var line in matchingLines)\n        {\n            Console.WriteLine(line);\n        }\n    }\n\n    private static List<string> GetLinesFromWords(IEnumerable<Word> words)\n    {\n        // This is a simple example to group words by their Y coordinate to form lines.\n        // Depending on your PDF's formatting, you may need a more sophisticated approach.\n        List<string> lines = new List<string>();\n        Dictionary<double, List<string>> linesDict = new Dictionary<double, List<string>>();\n\n        foreach (var word in words)\n        {\n            double y = word.BoundingBox.Bottom;\n            if (!linesDict.ContainsKey(y))\n            {\n                linesDict[y] = new List<string>();\n            }\n            linesDict[y].Add(word.Text);\n        }\n\n        foreach (var line in linesDict.Values)\n        {\n            lines.Add(string.Join(" ", line));\n        }\n\n        return lines;\n    }\n}