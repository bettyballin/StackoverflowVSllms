using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddHttpClient();\n    }\n\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n\n        app.UseRouting();\n\n        app.UseEndpoints(endpoints =>\n        {\n            endpoints.MapGet("/{**catchAll}", async context =>\n            {\n                var httpClientFactory = context.RequestServices.GetRequiredService<IHttpClientFactory>();\n                var httpClient = httpClientFactory.CreateClient();\n\n                // Forward the request to the internal server.\n                var internalServerUrl = "http://internal-server-address"; // Change this to your internal server URL.\n                var requestMessage = new HttpRequestMessage\n                {\n                    Method = new HttpMethod(context.Request.Method),\n                    RequestUri = new System.Uri(internalServerUrl + context.Request.Path + context.Request.QueryString),\n                    Content = new StreamContent(context.Request.Body)\n                };\n\n                foreach (var header in context.Request.Headers)\n                {\n                    requestMessage.Headers.TryAddWithoutValidation(header.Key, header.Value.ToArray());\n                }\n\n                var responseMessage = await httpClient.SendAsync(requestMessage);\n\n                context.Response.StatusCode = (int)responseMessage.StatusCode;\n                foreach (var header in responseMessage.Headers)\n                {\n                    context.Response.Headers[header.Key] = header.Value.ToArray();\n                }\n\n                using (var responseStream = await responseMessage.Content.ReadAsStreamAsync())\n                {\n                    await responseStream.CopyToAsync(context.Response.Body);\n                }\n            });\n        });\n    }\n}\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        CreateHostBuilder(args).Build().Run();\n    }\n\n    public static IHostBuilder CreateHostBuilder(string[] args) =>\n        Host.CreateDefaultBuilder(args)\n            .ConfigureWebHostDefaults(webBuilder =>\n            {\n                webBuilder.UseStartup<Startup>();\n            });\n}