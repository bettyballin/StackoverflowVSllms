using System;\nusing NHibernate;\nusing NHibernate.Cfg;\nusing NHibernate.Mapping.ByCode;\nusing NHibernate.Mapping.ByCode.Conformist;\n\npublic class GisObject\n{\n    public virtual int Id { get; set; }\n    public virtual string Description { get; set; }\n    // Add other common properties here\n}\n\npublic class GisObjectMap : ClassMapping<GisObject>\n{\n    public GisObjectMap(string tableName)\n    {\n        Table(tableName);\n        Id(x => x.Id, m => m.Generator(Generators.Identity));\n        Property(x => x.Description);\n        // Map other common properties here\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Fetch the table name dynamically from metadata table\n        string tableName = FetchTableNameFromMetadata("SomeGisClass");\n\n        // Configure NHibernate\n        var cfg = new Configuration();\n        cfg.Configure(); // Assuming you have hibernate.cfg.xml\n\n        var mapper = new ModelMapper();\n        mapper.AddMapping(new GisObjectMap(tableName));\n        cfg.AddMapping(mapper.CompileMappingForAllExplicitlyAddedEntities());\n\n        ISessionFactory sessionFactory = cfg.BuildSessionFactory();\n\n        // Use sessionFactory to interact with the database\n        using (ISession session = sessionFactory.OpenSession())\n        {\n            var gisObjects = session.QueryOver<GisObject>().List();\n            foreach (var gisObject in gisObjects)\n            {\n                Console.WriteLine($"{gisObject.Id}: {gisObject.Description}");\n            }\n        }\n    }\n\n    private static string FetchTableNameFromMetadata(string gisClass)\n    {\n        // Implement the logic to fetch table name from the metadata table\n        // For example, query the database to get the table name for the given GIS class\n        // Return the table name as a string\n        return "YourTableName";\n    }\n}