using System;\nusing System.Diagnostics;\nusing System.Reflection;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        try\n        {\n            MethodA(42, "example");\n        }\n        catch (Exception ex)\n        {\n            LogExceptionDetails(ex);\n        }\n    }\n\n    static void MethodA(int x, string y)\n    {\n        MethodB(x, y, DateTime.Now);\n    }\n\n    static void MethodB(int a, string b, DateTime time)\n    {\n        throw new InvalidOperationException("An error occurred.");\n    }\n\n    static void LogExceptionDetails(Exception ex)\n    {\n        var st = new StackTrace(ex, true);\n        foreach (var frame in st.GetFrames())\n        {\n            var method = frame.GetMethod();\n            if (method != null)\n            {\n                Console.WriteLine($"Method: {method.Name}");\n                var parameters = method.GetParameters();\n                object[] values = GetParameterValues(frame, parameters);\n\n                for (int i = 0; i < parameters.Length; i++)\n                {\n                    Console.WriteLine($"Parameter: {parameters[i].Name}, Value: {values[i]}");\n                }\n            }\n        }\n    }\n\n    static object[] GetParameterValues(StackFrame frame, ParameterInfo[] parameters)\n    {\n        // Values might be inaccessible directly; this is a best-effort example.\n        var values = new object[parameters.Length];\n        // Further implementation needed here to actually retrieve values.\n        // This might involve inspecting local variables, method arguments, etc.\n        // Note: Reflection alone cannot retrieve these values directly from the stack frame.\n\n        return values;\n    }\n}