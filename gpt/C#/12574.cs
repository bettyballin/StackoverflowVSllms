using System;\n\nnamespace MyFirstRayTracer\n{\n    public class AreaLight : ILight\n    {\n        private const int _radius = 5;\n        private const int _samples = 16;\n        private static readonly Random _random = new Random();\n        public Color Color { get; set; }\n        public Vector Location { get; set; }\n\n        #region ILight Members\n\n        public float GetLightingInformation(Vector point, ISceneObject[] scene, out Color color)\n        {\n            int intersectCount = 0;\n            float totalDistance = 0;\n\n            for (int i = 0; i < _samples; i++)\n            {\n                // Generate random offset within light radius\n                float randX = (float)(_random.NextDouble() * 2 * _radius - _radius);\n                float randY = (float)(_random.NextDouble() * 2 * _radius - _radius);\n                float randZ = (float)(_random.NextDouble() * 2 * _radius - _radius);\n\n                Vector randomizedLocation = new Vector(Location.X + randX, Location.Y + randY, Location.Z + randZ);\n                Vector direction = (randomizedLocation - point).Normalize();\n\n                Ray shadowRay = new Ray(point, direction);\n                bool intersects = false;\n\n                foreach (ISceneObject obj in scene)\n                {\n                    if (obj.Intersect(shadowRay, out Vector iPoint))\n                    {\n                        intersects = true;\n                        break;\n                    }\n                }\n\n                if (intersects)\n                {\n                    intersectCount++;\n                }\n                else\n                {\n                    totalDistance += (randomizedLocation - point).Length;\n                }\n            }\n\n            float factor = 1 - ((float)intersectCount / _samples);\n            color = new Color(factor * Color.R, factor * Color.G, factor * Color.B);\n            float averageDistance = (intersectCount < _samples) ? totalDistance / (_samples - intersectCount) : 0;\n\n            return averageDistance;\n        }\n\n        #endregion\n    }\n}