using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main()\n    {\n        List<int> transactions = new List<int> { 2, 4, 5, 7 };\n        int targetSum = 13;\n        List<int> result = FindSubsetSum(transactions, targetSum);\n\n        if (result != null)\n        {\n            Console.WriteLine("Result Set:");\n            foreach (var item in result)\n            {\n                Console.WriteLine(item);\n            }\n        }\n        else\n        {\n            Console.WriteLine("No subset found that sums to the target amount.");\n        }\n    }\n\n    static List<int> FindSubsetSum(List<int> transactions, int targetSum)\n    {\n        List<int> result = new List<int>();\n        if (FindSubsetSumRecursive(transactions, targetSum, 0, result))\n        {\n            return result;\n        }\n        return null;\n    }\n\n    static bool FindSubsetSumRecursive(List<int> transactions, int targetSum, int index, List<int> result)\n    {\n        if (targetSum == 0)\n        {\n            return true;\n        }\n        if (index >= transactions.Count || targetSum < 0)\n        {\n            return false;\n        }\n\n        // Include the current transaction\n        result.Add(transactions[index]);\n        if (FindSubsetSumRecursive(transactions, targetSum - transactions[index], index + 1, result))\n        {\n            return true;\n        }\n        // Exclude the current transaction\n        result.RemoveAt(result.Count - 1);\n        return FindSubsetSumRecursive(transactions, targetSum, index + 1, result);\n    }\n}