using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\npublic class DynamicClassExample\n{\n    public static void Main()\n    {\n        // Create an assembly name\n        AssemblyName assemblyName = new AssemblyName("DynamicAssembly");\n        \n        // Define a dynamic assembly in the current application domain\n        AssemblyBuilder assemblyBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run);\n        \n        // Define a dynamic module in the assembly\n        ModuleBuilder moduleBuilder = assemblyBuilder.DefineDynamicModule("DynamicModule");\n        \n        // Define a public class named "DynamicClass" in the module\n        TypeBuilder typeBuilder = moduleBuilder.DefineType("DynamicClass", TypeAttributes.Public);\n        \n        // Define a private field for the property\n        FieldBuilder fieldBuilder = typeBuilder.DefineField("_dynamicProperty", typeof(string), FieldAttributes.Private);\n        \n        // Define a public property named "DynamicProperty"\n        PropertyBuilder propertyBuilder = typeBuilder.DefineProperty("DynamicProperty", PropertyAttributes.HasDefault, typeof(string), null);\n        \n        // Define the 'get' accessor method for the property\n        MethodBuilder getPropMthdBldr = typeBuilder.DefineMethod("get_DynamicProperty", MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig, typeof(string), Type.EmptyTypes);\n        ILGenerator getIL = getPropMthdBldr.GetILGenerator();\n        getIL.Emit(OpCodes.Ldarg_0);\n        getIL.Emit(OpCodes.Ldfld, fieldBuilder);\n        getIL.Emit(OpCodes.Ret);\n\n        // Define the 'set' accessor method for the property\n        MethodBuilder setPropMthdBldr = typeBuilder.DefineMethod("set_DynamicProperty", MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig, null, new Type[] { typeof(string) });\n        ILGenerator setIL = setPropMthdBldr.GetILGenerator();\n        setIL.Emit(OpCodes.Ldarg_0);\n        setIL.Emit(OpCodes.Ldarg_1);\n        setIL.Emit(OpCodes.Stfld, fieldBuilder);\n        setIL.Emit(OpCodes.Ret);\n        \n        // Assign the get and set methods to the property\n        propertyBuilder.SetGetMethod(getPropMthdBldr);\n        propertyBuilder.SetSetMethod(setPropMthdBldr);\n\n        // Create the class\n        Type dynamicType = typeBuilder.CreateType();\n\n        // Create an instance of the dynamic class\n        object dynamicInstance = Activator.CreateInstance(dynamicType);\n\n        // Set the property value\n        PropertyInfo prop = dynamicType.GetProperty("DynamicProperty");\n        prop.SetValue(dynamicInstance, "Hello, World!", null);\n\n        // Get the property value\n        string propertyValue = (string)prop.GetValue(dynamicInstance, null);\n        Console.WriteLine(propertyValue); // Output: Hello, World!\n    }\n}