using System;\nusing System.IO;\nusing System.Management;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        WqlEventQuery query = new WqlEventQuery("SELECT * FROM Win32_VolumeChangeEvent WHERE EventType = 2");\n        ManagementEventWatcher watcher = new ManagementEventWatcher(query);\n        watcher.EventArrived += new EventArrivedEventHandler(USBInserted);\n        watcher.Start();\n\n        Console.WriteLine("Listening for USB drive insertions. Press Enter to exit.");\n        Console.ReadLine();\n\n        watcher.Stop();\n    }\n\n    private static void USBInserted(object sender, EventArrivedEventArgs e)\n    {\n        Console.WriteLine("A USB drive was inserted.");\n        string driveLetter = GetDriveLetterFromEvent(e);\n        if (!string.IsNullOrEmpty(driveLetter))\n        {\n            MonitorUSBDrive(driveLetter);\n        }\n    }\n\n    private static string GetDriveLetterFromEvent(EventArrivedEventArgs e)\n    {\n        // Logic to extract the drive letter from the event\n        // This may vary based on the system and event details\n        return "E:"; // Example drive letter, replace with actual logic\n    }\n\n    private static void MonitorUSBDrive(string driveLetter)\n    {\n        FileSystemWatcher fileWatcher = new FileSystemWatcher(driveLetter);\n        fileWatcher.IncludeSubdirectories = true;\n        fileWatcher.NotifyFilter = NotifyFilters.FileName | NotifyFilters.DirectoryName | NotifyFilters.LastWrite;\n\n        fileWatcher.Created += (s, ev) => Console.WriteLine($"File created: {ev.FullPath}");\n        fileWatcher.Changed += (s, ev) => Console.WriteLine($"File changed: {ev.FullPath}");\n        fileWatcher.Deleted += (s, ev) => Console.WriteLine($"File deleted: {ev.FullPath}");\n        fileWatcher.Renamed += (s, ev) => Console.WriteLine($"File renamed: {ev.OldFullPath} to {ev.FullPath}");\n\n        fileWatcher.EnableRaisingEvents = true;\n        Console.WriteLine($"Monitoring drive: {driveLetter}");\n    }\n}