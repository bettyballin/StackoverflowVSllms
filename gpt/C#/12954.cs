using System;\nusing System.Collections.Generic;\n\npublic abstract class ExprNode\n{\n    public abstract double Evaluate(Dictionary<string, double> variables);\n}\n\npublic class ConstantNode : ExprNode\n{\n    private double _value;\n    public ConstantNode(double value) => _value = value;\n    public override double Evaluate(Dictionary<string, double> variables) => _value;\n}\n\npublic class VariableNode : ExprNode\n{\n    private string _name;\n    public VariableNode(string name) => _name = name;\n    public override double Evaluate(Dictionary<string, double> variables) => variables[_name];\n}\n\npublic class BinaryOperationNode : ExprNode\n{\n    private ExprNode _left, _right;\n    private Func<double, double, double> _operation;\n    public BinaryOperationNode(ExprNode left, ExprNode right, Func<double, double, double> operation)\n    {\n        _left = left;\n        _right = right;\n        _operation = operation;\n    }\n    public override double Evaluate(Dictionary<string, double> variables) => _operation(_left.Evaluate(variables), _right.Evaluate(variables));\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // Example: Parsing the expression "3 + x"\n        ExprNode expression = new BinaryOperationNode(\n            new ConstantNode(3),\n            new VariableNode("x"),\n            (left, right) => left + right\n        );\n\n        // Evaluate the expression with different values of x\n        var variables = new Dictionary<string, double> { { "x", 5 } };\n        Console.WriteLine(expression.Evaluate(variables)); // Output: 8\n\n        variables["x"] = 10;\n        Console.WriteLine(expression.Evaluate(variables)); // Output: 13\n    }\n}