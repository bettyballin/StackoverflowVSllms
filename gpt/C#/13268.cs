public partial class LawEnforcementDataContext : DataContext\n{\n    partial void DeleteReservation(Reservation instance)\n    {\n        // Get ID's of those seated in course\n        var roster = new Roster(this, instance.CourseID);\n        var seated = from r in roster.All\n                     where r.WaitingList == false\n                     select r.ID;\n\n        // delete the reservation\n        this.ExecuteDynamicDelete(instance);\n\n        // get seated id's not in original seated ids\n        var newlySeated = from r in roster.All\n                          where r.WaitingList == false && !seated.Contains(r.ID)\n                          select r.ID;\n\n        var reservations = this.Reservations.Where(r => newlySeated.Contains(r.ID));\n\n        foreach (var r in reservations)\n        {\n            r.Confirmed = false;\n        }\n        \n        // Ensure changes are submitted\n        this.SubmitChanges();\n    }\n\n    public override void SubmitChanges(System.Data.Linq.ConflictMode failureMode)\n    {\n        ChangeSet delta = GetChangeSet();\n\n        foreach (var res in delta.Deletes.OfType<Reservation>())\n        {\n            // Get ID's of those seated in course\n            var roster = new Roster(this, res.CourseID);\n            var seated = from r in roster.All\n                         where r.WaitingList == false\n                         select r.ID;\n\n            base.SubmitChanges(failureMode);\n\n            // get seated id's not in original seated ids\n            var newlySeated = from r in roster.All\n                              where r.WaitingList == false && !seated.Contains(r.ID)\n                              select r.ID;\n\n            var reservations = this.Reservations.Where(r => newlySeated.Contains(r.ID));\n\n            foreach (var r in reservations)\n            {\n                r.Confirmed = false;\n            }\n        }\n\n        base.SubmitChanges(failureMode);\n    }\n}