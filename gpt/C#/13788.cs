using System;\nusing System.IO;\n\nclass Program\n{\n    static void Main()\n    {\n        // Specify the directory to monitor and the file to watch\n        string directoryToWatch = @"C:\path\to\directory";\n        string fileToWatch = "example.txt";\n\n        // Initialize the FileSystemWatcher\n        FileSystemWatcher watcher = new FileSystemWatcher(directoryToWatch, fileToWatch);\n\n        // Set the notification filters\n        watcher.NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.FileName | NotifyFilters.Size;\n\n        // Register event handlers\n        watcher.Changed += OnChanged;\n        watcher.Created += OnChanged;\n        watcher.Deleted += OnChanged;\n        watcher.Renamed += OnRenamed;\n\n        // Start watching\n        watcher.EnableRaisingEvents = true;\n\n        Console.WriteLine($"Monitoring changes to {fileToWatch} in {directoryToWatch}");\n        Console.WriteLine("Press 'q' to quit the sample.");\n\n        // Keep the program running until the user quits\n        while (Console.Read() != 'q') ;\n    }\n\n    // Define what is done when a file is changed, created, or deleted\n    private static void OnChanged(object source, FileSystemEventArgs e) =>\n        Console.WriteLine($"File: {e.FullPath} {e.ChangeType}");\n\n    // Define what is done when a file is renamed\n    private static void OnRenamed(object source, RenamedEventArgs e) =>\n        Console.WriteLine($"File: {e.OldFullPath} renamed to {e.FullPath}");\n}