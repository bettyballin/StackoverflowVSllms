public static List<User> FilterBySearchTerms( List<User> usersToFilter, string searchTerms, bool searchEmailText )\n{\n    string[] terms = searchTerms.ToLower().Trim().Split(' ');\n\n    var filteredUsers = usersToFilter\n        .Select(user => new\n        {\n            User = user,\n            MatchCount = GetMatchCount(user, terms, searchEmailText)\n        })\n        .Where(x => x.MatchCount > 0)\n        .OrderByDescending(x => x.MatchCount)\n        .Select(x => x.User)\n        .ToList();\n\n    return filteredUsers;\n}\n\nprivate static int GetMatchCount(User user, string[] terms, bool searchEmailText)\n{\n    int matchCount = 0;\n\n    foreach (string term in terms)\n    {\n        if (searchEmailText && user.Email.ToLower().Contains(term))\n            matchCount++;\n        \n        if (user.FirstName.ToLower().Contains(term))\n            matchCount++;\n        \n        if (user.Surname.ToLower().Contains(term))\n            matchCount++;\n        \n        if (user.Position.ToLower().Contains(term))\n            matchCount++;\n        \n        if (user.Company.ToLower().Contains(term))\n            matchCount++;\n        \n        if (user.Office.ToLower().Contains(term))\n            matchCount++;\n        \n        if (user.Title.ToLower().Contains(term))\n            matchCount++;\n        \n        int encodedID;\n        if (int.TryParse(term, out encodedID))\n        {\n            User fromInvite = GetByEncodedUserInviteID(encodedID);\n            if (fromInvite != null && fromInvite.ID.HasValue && fromInvite.ID.Value == user.ID)\n                matchCount++;\n        }\n    }\n\n    return matchCount;\n}\n\nprivate static User GetByEncodedUserInviteID(int encodedID)\n{\n    // Implementation for fetching user by encoded invite ID\n    // This is a placeholder and should be replaced with actual implementation\n    return null;\n}