using System;\nusing System.Data;\nusing System.Data.SqlClient;\nusing Moq;\nusing NUnit.Framework;\n\n[TestFixture]\npublic class DatabaseTests\n{\n    [Test]\n    public void ExecuteQuery_ShouldReturnDataTable()\n    {\n        // Arrange\n        var mockConnection = new Mock<SqlConnection>();\n        var mockDataAdapter = new Mock<SqlDataAdapter>();\n        var mockCommand = new Mock<SqlCommand>();\n        var mockParameters = new Mock<SqlParameterCollection>();\n\n        var dataTable = new DataTable();\n        mockDataAdapter.Setup(da => da.Fill(It.IsAny<DataTable>())).Callback<DataTable>(dt => dt.Rows.Add(dt.NewRow()));\n\n        mockCommand.Setup(cmd => cmd.Connection).Returns(mockConnection.Object);\n        mockCommand.Setup(cmd => cmd.CommandText).Returns("SELECT * FROM DummyTable");\n        mockCommand.Setup(cmd => cmd.Parameters).Returns(mockParameters.Object);\n\n        // Act\n        var result = ExecuteQuery(mockConnection.Object, "SELECT * FROM DummyTable", mockParameters.Object);\n\n        // Assert\n        Assert.IsNotNull(result);\n        Assert.IsInstanceOf<DataTable>(result);\n    }\n\n    private DataTable ExecuteQuery(SqlConnection activeConnection, string query, SqlParameterCollection parameters)\n    {\n        DataTable resultSet = new DataTable();\n        SqlCommand queryCommand = new SqlCommand();\n        try\n        {\n            queryCommand.Connection = activeConnection;\n            queryCommand.CommandText = query;\n\n            if (parameters != null)\n            {\n                foreach (SqlParameter param in parameters)\n                {\n                    queryCommand.Parameters.Add(param);\n                }\n            }\n\n            SqlDataAdapter queryDA = new SqlDataAdapter(queryCommand);\n            queryDA.Fill(resultSet);\n        }\n        catch (Exception ex)\n        {\n            //TODO: Improve error handling\n            Console.WriteLine(ex.Message);\n        }\n\n        return resultSet;\n    }\n}