using System;\nusing System.Reflection;\n\npublic class CoreInstance\n{\n    public static Kernel Kernel { get; } = new Kernel();\n    public static Devices Devices { get; } = new Devices();\n    public static Interfaces Interfaces { get; } = new Interfaces();\n    public static Interoperability Interoperability { get; } = new Interoperability();\n    public static Environment Environment { get; } = new Environment();\n    public static Data Data { get; } = new Data();\n}\n\npublic class Kernel\n{\n    public void RaiseError(string message, ErrorLevel level)\n    {\n        Console.WriteLine($"Error: {message}, Level: {level}");\n    }\n}\n\npublic class Environment\n{\n    public User User { get; } = new User();\n}\n\npublic class User\n{\n    public string FullName { get; } = "John Doe";\n}\n\npublic enum ErrorLevel\n{\n    Trivial,\n    Serious,\n    Critical\n}\n\npublic class ReflectionInvoker\n{\n    public object InvokeRecursive(object obj, string[] path, string methodOrProperty, object[] parameters)\n    {\n        foreach (var part in path)\n        {\n            PropertyInfo prop = obj.GetType().GetProperty(part);\n            if (prop == null)\n            {\n                throw new Exception($"Property '{part}' not found");\n            }\n            obj = prop.GetValue(obj);\n        }\n\n        // Check if it's a method\n        MethodInfo method = obj.GetType().GetMethod(methodOrProperty);\n        if (method != null)\n        {\n            return method.Invoke(obj, parameters);\n        }\n\n        // Check if it's a property\n        PropertyInfo property = obj.GetType().GetProperty(methodOrProperty);\n        if (property != null)\n        {\n            return property.GetValue(obj);\n        }\n\n        throw new Exception($"Method or property '{methodOrProperty}' not found");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        var invoker = new ReflectionInvoker();\n        \n        // Example 1: Invoking a method\n        var coreInstancePath1 = new string[] { "Kernel" };\n        invoker.InvokeRecursive(CoreInstance.Kernel, coreInstancePath1, "RaiseError", new object[] { "I'm an error lol!", ErrorLevel.Trivial });\n\n        // Example 2: Accessing a property\n        var coreInstancePath2 = new string[] { "Environment", "User" };\n        var fullName = invoker.InvokeRecursive(CoreInstance.Environment, coreInstancePath2, "FullName", null);\n        Console.WriteLine($"User Full Name: {fullName}");\n    }\n}