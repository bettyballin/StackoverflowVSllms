// Controller\npublic class AccountController : Controller\n{\n    private readonly UserManager<ApplicationUser> _userManager;\n    private readonly IEmailSender _emailSender;\n\n    public AccountController(UserManager<ApplicationUser> userManager, IEmailSender emailSender)\n    {\n        _userManager = userManager;\n        _emailSender = emailSender;\n    }\n\n    [HttpPost]\n    [AllowAnonymous]\n    [ValidateAntiForgeryToken]\n    public async Task<IActionResult> Register(RegisterViewModel model)\n    {\n        if (ModelState.IsValid)\n        {\n            var user = new ApplicationUser { UserName = model.Email, Email = model.Email };\n            var result = await _userManager.CreateAsync(user, model.Password);\n\n            if (result.Succeeded)\n            {\n                var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);\n                var callbackUrl = Url.Action("ConfirmEmail", "Account", new { userId = user.Id, code = code }, protocol: HttpContext.Request.Scheme);\n\n                await _emailSender.SendEmailAsync(model.Email, "Confirm your email",\n                   $"Please confirm your account by clicking this link: <a href='{callbackUrl}'>link</a>");\n\n                return RedirectToAction("Index", "Home");\n            }\n            AddErrors(result);\n        }\n\n        return View(model);\n    }\n\n    [HttpGet]\n    [AllowAnonymous]\n    public async Task<IActionResult> ConfirmEmail(string userId, string code)\n    {\n        if (userId == null || code == null)\n        {\n            return View("Error");\n        }\n        var user = await _userManager.FindByIdAsync(userId);\n        if (user == null)\n        {\n            return View("Error");\n        }\n        var result = await _userManager.ConfirmEmailAsync(user, code);\n        return View(result.Succeeded ? "ConfirmEmail" : "Error");\n    }\n}