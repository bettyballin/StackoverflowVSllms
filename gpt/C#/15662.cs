using Moq;\nusing NUnit.Framework;\n\npublic interface IMapinfo\n{\n    void Do(string cmd);\n    string Eval(string cmd);\n}\n\npublic class Table\n{\n    private readonly IMapinfo _mapinfo;\n\n    public Table(IMapinfo mapinfo)\n    {\n        _mapinfo = mapinfo;\n    }\n\n    public string Name\n    {\n        get { return _mapinfo.Eval("TableInfo(1,1)"); }\n    }\n}\n\n[TestFixture]\npublic class TableTests\n{\n    [Test]\n    public void MockMapinfo()\n    {\n        // Arrange\n        var mockMapinfo = new Mock<IMapinfo>();\n        mockMapinfo.Setup(mi => mi.Eval(It.IsAny<string>())).Returns("Water_Mains");\n\n        var table = new Table(mockMapinfo.Object);\n\n        // Act\n        var tablename = table.Name;\n\n        // Assert\n        Assert.AreEqual("Water_Mains", tablename);\n        mockMapinfo.Verify(mi => mi.Eval("TableInfo(1,1)"), Times.Once, "Eval was not called with the expected parameter");\n    }\n}