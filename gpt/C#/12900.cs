using System;\nusing System.IO;\nusing System.Threading;\nusing System.Web;\n\npublic class BandwidthThrottleModule : IHttpModule\n{\n    private const int ThrottleRate = 10 * 1024; // 10 KBps\n\n    public void Init(HttpApplication context)\n    {\n        context.BeginRequest += new EventHandler(OnBeginRequest);\n    }\n\n    private void OnBeginRequest(object sender, EventArgs e)\n    {\n        HttpApplication application = (HttpApplication)sender;\n        HttpContext context = application.Context;\n        string userIpAddress = context.Request.UserHostAddress;\n\n        // Define the IP address range for VPN\n        if (IsVpnUser(userIpAddress))\n        {\n            context.Response.Filter = new ThrottledStream(context.Response.Filter, ThrottleRate);\n        }\n    }\n\n    private bool IsVpnUser(string ipAddress)\n    {\n        // Implement your logic to check if the IP address is within the VPN range\n        // Example: return ipAddress.StartsWith("192.168.");\n        return ipAddress.StartsWith("10.") || ipAddress.StartsWith("192.168.");\n    }\n\n    public void Dispose() { }\n\n    private class ThrottledStream : Stream\n    {\n        private Stream _baseStream;\n        private int _throttleRate;\n\n        public ThrottledStream(Stream baseStream, int throttleRate)\n        {\n            _baseStream = baseStream;\n            _throttleRate = throttleRate;\n        }\n\n        public override bool CanRead => _baseStream.CanRead;\n        public override bool CanSeek => _baseStream.CanSeek;\n        public override bool CanWrite => _baseStream.CanWrite;\n        public override long Length => _baseStream.Length;\n        public override long Position { get => _baseStream.Position; set => _baseStream.Position = value; }\n\n        public override void Flush()\n        {\n            _baseStream.Flush();\n        }\n\n        public override int Read(byte[] buffer, int offset, int count)\n        {\n            return _baseStream.Read(buffer, offset, count);\n        }\n\n        public override long Seek(long offset, SeekOrigin origin)\n        {\n            return _baseStream.Seek(offset, origin);\n        }\n\n        public override void SetLength(long value)\n        {\n            _baseStream.SetLength(value);\n        }\n\n        public override void Write(byte[] buffer, int offset, int count)\n        {\n            int bytesToWrite = count;\n            int bytesWritten = 0;\n\n            while (bytesToWrite > 0)\n            {\n                int chunkSize = Math.Min(_throttleRate, bytesToWrite);\n                _baseStream.Write(buffer, offset + bytesWritten, chunkSize);\n                bytesWritten += chunkSize;\n                bytesToWrite -= chunkSize;\n\n                if (bytesToWrite > 0)\n                {\n                    Thread.Sleep(1000); // Sleep for 1 second to enforce throttling\n                }\n            }\n        }\n    }\n}