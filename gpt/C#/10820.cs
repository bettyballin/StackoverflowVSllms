using Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.CSharp;\nusing Microsoft.CodeAnalysis.Diagnostics;\n\n[DiagnosticAnalyzer(LanguageNames.CSharp)]\npublic class DoEventsAnalyzer : DiagnosticAnalyzer\n{\n    public const string DiagnosticId = "DoEventsUsage";\n    private static readonly LocalizableString Title = "DoEvents usage detected";\n    private static readonly LocalizableString MessageFormat = "Usage of 'Application.DoEvents()' is disallowed";\n    private static readonly LocalizableString Description = "Avoid using 'Application.DoEvents()' to prevent re-entrancy issues.";\n    private const string Category = "Usage";\n\n    private static readonly DiagnosticDescriptor Rule = new DiagnosticDescriptor(\n        DiagnosticId, Title, MessageFormat, Category, DiagnosticSeverity.Error, isEnabledByDefault: true, description: Description);\n\n    public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics { get { return ImmutableArray.Create(Rule); } }\n\n    public override void Initialize(AnalysisContext context)\n    {\n        context.EnableConcurrentExecution();\n        context.ConfigureGeneratedCodeAnalysis(GeneratedCodeAnalysisFlags.None);\n        context.RegisterSyntaxNodeAction(AnalyzeNode, SyntaxKind.InvocationExpression);\n    }\n\n    private void AnalyzeNode(SyntaxNodeAnalysisContext context)\n    {\n        var invocationExpr = (InvocationExpressionSyntax)context.Node;\n        var memberAccessExpr = invocationExpr.Expression as MemberAccessExpressionSyntax;\n\n        if (memberAccessExpr?.ToString() == "Application.DoEvents")\n        {\n            var diagnostic = Diagnostic.Create(Rule, invocationExpr.GetLocation());\n            context.ReportDiagnostic(diagnostic);\n        }\n    }\n}