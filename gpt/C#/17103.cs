// Assume 'CountryLayers.dll' is the shared assembly containing CountryBase and ICountryBase\nAssembly sharedAssembly = Assembly.LoadFrom("CountryLayers.dll");\nType countryBaseType = sharedAssembly.GetType("CountryLayers.CountryBase");\nType iCountryBaseType = sharedAssembly.GetType("CountryLayers.ICountryBase");\n\n// Load the plugin assembly\nAssembly pluginAssembly = Assembly.LoadFrom("Plugin.dll");\n\n// Find the type that implements the CountryBase\nforeach (Type t in pluginAssembly.GetTypes())\n{\n    if (countryBaseType.IsAssignableFrom(t) && !t.IsAbstract)\n    {\n        var countryInstance = Activator.CreateInstance(t);\n\n        if (countryInstance is CountryBase countryBaseInstance)\n        {\n            Console.WriteLine("Successfully cast to CountryBase");\n        }\n        else if (countryInstance is ICountryBase iCountryBaseInstance)\n        {\n            Console.WriteLine("Successfully cast to ICountryBase");\n        }\n        else\n        {\n            Console.WriteLine("Failed to cast to expected types");\n        }\n    }\n}