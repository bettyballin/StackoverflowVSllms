using System;\n    using System.IO;\n    using System.Security.Cryptography;\n    using System.Text;\n\n    public class EncryptionHelper\n    {\n        private static readonly string EncryptionKey = "YourStrongEncryptionKey";\n\n        public static string Encrypt(string plainText)\n        {\n            byte[] plainBytes = Encoding.UTF8.GetBytes(plainText);\n            using (Aes aes = Aes.Create())\n            {\n                aes.Key = Encoding.UTF8.GetBytes(EncryptionKey);\n                aes.IV = new byte[16]; // Initialization vector with zeros\n\n                using (MemoryStream ms = new MemoryStream())\n                {\n                    using (CryptoStream cs = new CryptoStream(ms, aes.CreateEncryptor(), CryptoStreamMode.Write))\n                    {\n                        cs.Write(plainBytes, 0, plainBytes.Length);\n                        cs.Close();\n                    }\n                    return Convert.ToBase64String(ms.ToArray());\n                }\n            }\n        }\n\n        public static string Decrypt(string encryptedText)\n        {\n            byte[] cipherBytes = Convert.FromBase64String(encryptedText);\n            using (Aes aes = Aes.Create())\n            {\n                aes.Key = Encoding.UTF8.GetBytes(EncryptionKey);\n                aes.IV = new byte[16]; // Initialization vector with zeros\n\n                using (MemoryStream ms = new MemoryStream())\n                {\n                    using (CryptoStream cs = new CryptoStream(ms, aes.CreateDecryptor(), CryptoStreamMode.Write))\n                    {\n                        cs.Write(cipherBytes, 0, cipherBytes.Length);\n                        cs.Close();\n                    }\n                    return Encoding.UTF8.GetString(ms.ToArray());\n                }\n            }\n        }\n    }