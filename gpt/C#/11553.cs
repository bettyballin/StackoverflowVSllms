using System;\nusing System.Collections.Generic;\nusing System.Linq.Expressions;\n\npublic class DynamicExpressionEvaluator\n{\n    public static bool Evaluate(string expression, Dictionary<string, bool> variables)\n    {\n        var param = Expression.Parameter(typeof(Dictionary<string, bool>), "vars");\n        var expr = BuildExpression(expression, param);\n        var lambda = Expression.Lambda<Func<Dictionary<string, bool>, bool>>(expr, param).Compile();\n        return lambda(variables);\n    }\n\n    private static Expression BuildExpression(string expression, ParameterExpression param)\n    {\n        var tokens = expression.Split(' ');\n        Stack<Expression> stack = new Stack<Expression>();\n\n        foreach (var token in tokens)\n        {\n            switch (token)\n            {\n                case "&&":\n                case "And":\n                    {\n                        var right = stack.Pop();\n                        var left = stack.Pop();\n                        stack.Push(Expression.AndAlso(left, right));\n                        break;\n                    }\n                case "||":\n                case "Or":\n                    {\n                        var right = stack.Pop();\n                        var left = stack.Pop();\n                        stack.Push(Expression.OrElse(left, right));\n                        break;\n                    }\n                case "!":\n                case "Not":\n                    {\n                        var operand = stack.Pop();\n                        stack.Push(Expression.Not(operand));\n                        break;\n                    }\n                default:\n                    {\n                        bool boolValue;\n                        Expression expr;\n                        if (bool.TryParse(token, out boolValue))\n                        {\n                            expr = Expression.Constant(boolValue);\n                        }\n                        else\n                        {\n                            expr = Expression.Property(param, "Item", Expression.Constant(token));\n                        }\n                        stack.Push(expr);\n                        break;\n                    }\n            }\n        }\n\n        return stack.Pop();\n    }\n}\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        string expression = "(A && B) || (A && C) || (!B && C)";\n        var variables = new Dictionary<string, bool>\n        {\n            { "A", true },\n            { "B", false },\n            { "C", true }\n        };\n\n        bool result = DynamicExpressionEvaluator.Evaluate(expression, variables);\n        Console.WriteLine(result);  // Output: True\n    }\n}