using System;\nusing System.Collections.Generic;\nusing System.Text.RegularExpressions;\n\npublic class AhoCorasick\n{\n    private class Node\n    {\n        public Dictionary<char, Node> Children { get; } = new Dictionary<char, Node>();\n        public Node Fail { get; set; }\n        public List<string> Outputs { get; } = new List<string>();\n    }\n\n    private readonly Node root = new Node();\n\n    public void AddPattern(string pattern)\n    {\n        var node = root;\n        foreach (var c in pattern)\n        {\n            if (!node.Children.ContainsKey(c))\n                node.Children[c] = new Node();\n            node = node.Children[c];\n        }\n        node.Outputs.Add(pattern);\n    }\n\n    public void Build()\n    {\n        var queue = new Queue<Node>();\n        foreach (var node in root.Children.Values)\n        {\n            node.Fail = root;\n            queue.Enqueue(node);\n        }\n\n        while (queue.Count > 0)\n        {\n            var current = queue.Dequeue();\n            foreach (var kvp in current.Children)\n            {\n                var child = kvp.Value;\n                var fail = current.Fail;\n                while (fail != null && !fail.Children.ContainsKey(kvp.Key))\n                    fail = fail.Fail;\n\n                if (fail == null)\n                    child.Fail = root;\n                else\n                {\n                    child.Fail = fail.Children[kvp.Key];\n                    child.Outputs.AddRange(child.Fail.Outputs);\n                }\n\n                queue.Enqueue(child);\n            }\n        }\n    }\n\n    public HashSet<string> Search(string text)\n    {\n        var result = new HashSet<string>();\n        var node = root;\n\n        foreach (var c in text)\n        {\n            while (node != null && !node.Children.ContainsKey(c))\n                node = node.Fail;\n\n            if (node == null)\n                node = root;\n            else\n            {\n                node = node.Children[c];\n                foreach (var output in node.Outputs)\n                    result.Add(output);\n            }\n        }\n\n        return result;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        var ahoCorasick = new AhoCorasick();\n\n        // Add patterns\n        var patterns = new List<string> { "term1", "term2", "term3", /* Add your 1000 terms here */ };\n        foreach (var pattern in patterns)\n        {\n            ahoCorasick.AddPattern(pattern);\n        }\n\n        // Build the Aho-Corasick automaton\n        ahoCorasick.Build();\n\n        // Search text\n        string text = "Your large text goes here...";\n        var matchedTerms = ahoCorasick.Search(text);\n\n        // Output matched terms\n        foreach (var term in matchedTerms)\n        {\n            Console.WriteLine(term);\n        }\n    }\n}