[HttpPost]\n   [AllowAnonymous]\n   [ValidateAntiForgeryToken]\n   public async Task<ActionResult> Login(LoginViewModel model, string returnUrl)\n   {\n       if (!ModelState.IsValid)\n       {\n           return View(model);\n       }\n\n       var userManager = HttpContext.GetOwinContext().GetUserManager<ApplicationUserManager>();\n       var user = await userManager.FindAsync(model.Email, model.Password);\n       if (user != null)\n       {\n           await SignInAsync(user, model.RememberMe);\n           return RedirectToLocal(returnUrl);\n       }\n       else\n       {\n           ModelState.AddModelError("", "Invalid login attempt.");\n           return View(model);\n       }\n   }\n\n   private async Task SignInAsync(ApplicationUser user, bool isPersistent)\n   {\n       var authenticationManager = HttpContext.GetOwinContext().Authentication;\n       authenticationManager.SignOut(DefaultAuthenticationTypes.ExternalCookie);\n       var identity = await user.GenerateUserIdentityAsync(UserManager);\n       authenticationManager.SignIn(new AuthenticationProperties() { IsPersistent = isPersistent }, identity);\n   }