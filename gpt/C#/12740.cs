using System;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Web;\nusing System.Web.Mvc;\n\npublic class FormController : Controller\n{\n    private static readonly byte[] Key = Encoding.UTF8.GetBytes("your-encryption-key"); // Must be 16, 24, or 32 bytes\n    private static readonly byte[] IV = Encoding.UTF8.GetBytes("your-initialization-vector"); // Must be 16 bytes\n\n    public ActionResult RenderForm()\n    {\n        string username = "user123"; // Get the logged-in username\n        string nonce = Guid.NewGuid().ToString();\n        string timestamp = DateTime.UtcNow.ToString("o");\n\n        string encryptedData = Encrypt($"{username}|{nonce}|{timestamp}");\n        ViewBag.EncryptedData = encryptedData;\n\n        return View();\n    }\n\n    [HttpPost]\n    public ActionResult SubmitForm(string encryptedData)\n    {\n        string decryptedData = Decrypt(encryptedData);\n        string[] parts = decryptedData.Split('|');\n        string username = parts[0];\n        string nonce = parts[1];\n        DateTime timestamp = DateTime.Parse(parts[2]);\n\n        // Validate timestamp (e.g., within 5 minutes)\n        if ((DateTime.UtcNow - timestamp).TotalMinutes > 5)\n        {\n            return new HttpStatusCodeResult(HttpStatusCode.BadRequest, "Request expired");\n        }\n\n        // Validate nonce (store used nonces in memory/cache to prevent reuse)\n        if (IsNonceUsed(nonce))\n        {\n            return new HttpStatusCodeResult(HttpStatusCode.BadRequest, "Invalid nonce");\n        }\n        MarkNonceAsUsed(nonce);\n\n        // Process the form\n        return new HttpStatusCodeResult(HttpStatusCode.OK);\n    }\n\n    private string Encrypt(string plainText)\n    {\n        using (Aes aes = Aes.Create())\n        {\n            aes.Key = Key;\n            aes.IV = IV;\n            ICryptoTransform encryptor = aes.CreateEncryptor(aes.Key, aes.IV);\n\n            using (MemoryStream ms = new MemoryStream())\n            {\n                using (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))\n                {\n                    using (StreamWriter sw = new StreamWriter(cs))\n                    {\n                        sw.Write(plainText);\n                    }\n                }\n                return Convert.ToBase64String(ms.ToArray());\n            }\n        }\n    }\n\n    private string Decrypt(string cipherText)\n    {\n        using (Aes aes = Aes.Create())\n        {\n            aes.Key = Key;\n            aes.IV = IV;\n            ICryptoTransform decryptor = aes.CreateDecryptor(aes.Key, aes.IV);\n\n            using (MemoryStream ms = new MemoryStream(Convert.FromBase64String(cipherText)))\n            {\n                using (CryptoStream cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read))\n                {\n                    using (StreamReader sr = new StreamReader(cs))\n                    {\n                        return sr.ReadToEnd();\n                    }\n                }\n            }\n        }\n    }\n\n    private bool IsNonceUsed(string nonce)\n    {\n        // Implement nonce validation logic (e.g., check against a cache)\n        return false;\n    }\n\n    private void MarkNonceAsUsed(string nonce)\n    {\n        // Implement nonce marking logic (e.g., store in a cache)\n    }\n}