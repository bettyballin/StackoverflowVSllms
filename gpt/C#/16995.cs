public class TranslationCache\n{\n    private static readonly object _lock = new object();\n    private static Dictionary<string, Dictionary<string, string>> _cache;\n    private static DateTime _lastRefreshTime;\n    private static TimeSpan _cacheDuration = TimeSpan.FromMinutes(30); // Cache duration\n\n    public static Dictionary<string, string> GetTranslations(string language)\n    {\n        lock (_lock)\n        {\n            if (_cache == null || DateTime.Now - _lastRefreshTime > _cacheDuration)\n            {\n                RefreshCache();\n            }\n\n            if (_cache.TryGetValue(language, out var translations))\n            {\n                return translations;\n            }\n\n            return new Dictionary<string, string>(); // Return an empty dictionary if no translations found\n        }\n    }\n\n    private static void RefreshCache()\n    {\n        // Fetch data from the database\n        var translationsFromDb = FetchTranslationsFromDatabase();\n        \n        // Populate the cache\n        _cache = translationsFromDb.GroupBy(t => t.Language)\n                                   .ToDictionary(g => g.Key, g => g.ToDictionary(t => t.Key, t => t.Value));\n\n        _lastRefreshTime = DateTime.Now;\n    }\n\n    private static List<Translation> FetchTranslationsFromDatabase()\n    {\n        // Simulate fetching translation data from the database\n        return new List<Translation>\n        {\n            new Translation { Language = "en", Key = "hello", Value = "Hello" },\n            new Translation { Language = "es", Key = "hello", Value = "Hola" },\n            // Add more translations as needed\n        };\n    }\n\n    private class Translation\n    {\n        public string Language { get; set; }\n        public string Key { get; set; }\n        public string Value { get; set; }\n    }\n}