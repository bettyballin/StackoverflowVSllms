using System;\nusing System.ComponentModel.Composition;\nusing System.ComponentModel.Composition.Hosting;\nusing IronPython.Hosting;\nusing Microsoft.Scripting.Hosting;\n\nnamespace MEFWithDLRExample\n{\n    // Define a contract interface\n    public interface IGreet\n    {\n        string Greet();\n    }\n\n    // The MEF consumer class\n    public class Program\n    {\n        [Import(typeof(IGreet))]\n        public IGreet Greeter { get; set; }\n\n        public static void Main(string[] args)\n        {\n            var program = new Program();\n            program.Compose();\n            Console.WriteLine(program.Greeter.Greet());\n        }\n\n        private void Compose()\n        {\n            var catalog = new AggregateCatalog();\n\n            // Add DLR (IronPython) part using a script engine\n            var pythonEngine = Python.CreateEngine();\n            var scope = pythonEngine.ExecuteFile("MyPythonScript.py");\n            dynamic myPythonClassInstance = pythonEngine.Operations.Invoke(scope.MyPythonClass);\n\n            // Wrap the dynamic object in a class that implements the contract\n            var greeter = new DynamicGreeter(myPythonClassInstance);\n\n            // Create a catalog for the wrapped instance\n            var typeCatalog = new TypeCatalog(greeter.GetType());\n\n            // Add the catalog to the AggregateCatalog\n            catalog.Catalogs.Add(typeCatalog);\n\n            var container = new CompositionContainer(catalog);\n            container.ComposeParts(this);\n        }\n    }\n\n    // A wrapper class that implements IGreet and delegates to the IronPython object\n    public class DynamicGreeter : IGreet\n    {\n        private readonly dynamic _instance;\n\n        public DynamicGreeter(dynamic instance)\n        {\n            _instance = instance;\n        }\n\n        public string Greet()\n        {\n            return _instance.greet();\n        }\n    }\n}