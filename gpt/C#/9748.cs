// Initial ORM-based DAL using Entity Framework\npublic class UserRepository\n{\n    private readonly DbContext _context;\n\n    public UserRepository(DbContext context)\n    {\n        _context = context;\n    }\n\n    public async Task<User> GetUserByIdAsync(int id)\n    {\n        return await _context.Users.FindAsync(id);\n    }\n\n    public async Task AddUserAsync(User user)\n    {\n        _context.Users.Add(user);\n        await _context.SaveChangesAsync();\n    }\n}\n\n// Transition to Hand Coded DAL using ADO.NET\npublic class UserRepository\n{\n    private readonly string _connectionString;\n\n    public UserRepository(string connectionString)\n    {\n        _connectionString = connectionString;\n    }\n\n    public async Task<User> GetUserByIdAsync(int id)\n    {\n        using (var connection = new SqlConnection(_connectionString))\n        {\n            await connection.OpenAsync();\n            using (var command = new SqlCommand("GetUserById", connection))\n            {\n                command.CommandType = CommandType.StoredProcedure;\n                command.Parameters.AddWithValue("@Id", id);\n\n                using (var reader = await command.ExecuteReaderAsync())\n                {\n                    if (await reader.ReadAsync())\n                    {\n                        return new User\n                        {\n                            Id = reader.GetInt32(0),\n                            Name = reader.GetString(1)\n                        };\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    public async Task AddUserAsync(User user)\n    {\n        using (var connection = new SqlConnection(_connectionString))\n        {\n            await connection.OpenAsync();\n            using (var command = new SqlCommand("AddUser", connection))\n            {\n                command.CommandType = CommandType.StoredProcedure;\n                command.Parameters.AddWithValue("@Name", user.Name);\n\n                await command.ExecuteNonQueryAsync();\n            }\n        }\n    }\n}