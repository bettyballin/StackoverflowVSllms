public static bool AreGraphsIdentical<T>(T current, T previous)\n{\n    return CheckIdentical(current, previous);\n}\n\nprivate static bool CheckIdentical<T>(T current, T previous)\n{\n    // Base case: check if both nodes are null\n    if (current == null && previous == null)\n    {\n        return true;\n    }\n\n    // Base case: check if one of the nodes is null\n    if (current == null || previous == null)\n    {\n        return false;\n    }\n\n    // Check if current and previous nodes are identical\n    if (!current.Equals(previous))\n    {\n        return false;\n    }\n\n    // Recursively check the children or properties of current and previous\n    // This is a placeholder, actual implementation depends on the structure of T\n    foreach (var childPair in GetChildPairs(current, previous))\n    {\n        if (!CheckIdentical(childPair.Item1, childPair.Item2))\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// Placeholder method that should return pairs of child nodes to compare\nprivate static IEnumerable<(T, T)> GetChildPairs<T>(T current, T previous)\n{\n    // Implement this method based on your object's structure\n    throw new NotImplementedException();\n}