using System;\nusing System.Runtime.InteropServices;\nusing System.Text;\n\nclass Program\n{\n    [DllImport("coredll.dll", SetLastError = true)]\n    private static extern IntPtr CreateFile(\n        string lpFileName,\n        uint dwDesiredAccess,\n        uint dwShareMode,\n        IntPtr lpSecurityAttributes,\n        uint dwCreationDisposition,\n        uint dwFlagsAndAttributes,\n        IntPtr hTemplateFile);\n\n    [DllImport("coredll.dll", SetLastError = true)]\n    private static extern bool DeviceIoControl(\n        IntPtr hDevice,\n        uint dwIoControlCode,\n        IntPtr lpInBuffer,\n        uint nInBufferSize,\n        IntPtr lpOutBuffer,\n        uint nOutBufferSize,\n        ref uint lpBytesReturned,\n        IntPtr lpOverlapped);\n\n    [DllImport("coredll.dll", SetLastError = true)]\n    private static extern bool CloseHandle(IntPtr hObject);\n\n    private const uint GENERIC_READ = 0x80000000;\n    private const uint OPEN_EXISTING = 3;\n    private const uint IOCTL_DISK_GET_STORAGEID = 0x0007c088;\n\n    public static string GetStorageCardSerialNumber(string storageCardPath)\n    {\n        IntPtr hDevice = CreateFile(storageCardPath, GENERIC_READ, 0, IntPtr.Zero, OPEN_EXISTING, 0, IntPtr.Zero);\n        if (hDevice == IntPtr.Zero)\n        {\n            throw new System.ComponentModel.Win32Exception(Marshal.GetLastWin32Error());\n        }\n\n        try\n        {\n            uint bytesReturned = 0;\n            byte[] buffer = new byte[256];\n            GCHandle handle = GCHandle.Alloc(buffer, GCHandleType.Pinned);\n            try\n            {\n                IntPtr pBuffer = handle.AddrOfPinnedObject();\n                if (!DeviceIoControl(hDevice, IOCTL_DISK_GET_STORAGEID, IntPtr.Zero, 0, pBuffer, (uint)buffer.Length, ref bytesReturned, IntPtr.Zero))\n                {\n                    throw new System.ComponentModel.Win32Exception(Marshal.GetLastWin32Error());\n                }\n\n                // Extract the serial number from the buffer (this will depend on the actual structure returned)\n                string serialNumber = Encoding.ASCII.GetString(buffer, 0, (int)bytesReturned);\n                return serialNumber;\n            }\n            finally\n            {\n                handle.Free();\n            }\n        }\n        finally\n        {\n            CloseHandle(hDevice);\n        }\n    }\n\n    static void Main()\n    {\n        try\n        {\n            string serialNumber = GetStorageCardSerialNumber("\\Storage Card\\");\n            Console.WriteLine($"Storage Card Serial Number: {serialNumber}");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($"Error: {ex.Message}");\n        }\n    }\n}