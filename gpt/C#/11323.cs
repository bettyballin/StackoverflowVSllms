using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Reflection;\n\npublic interface ICommand\n{\n    void Execute();\n}\n\npublic class CommandLoader\n{\n    public List<ICommand> LoadCommands(string folderPath)\n    {\n        List<ICommand> commands = new List<ICommand>();\n\n        foreach (var dll in Directory.GetFiles(folderPath, "*.dll"))\n        {\n            Assembly assembly = Assembly.LoadFrom(dll);\n            var commandTypes = assembly.GetTypes()\n                .Where(t => typeof(ICommand).IsAssignableFrom(t) && !t.IsInterface && !t.IsAbstract);\n\n            foreach (var type in commandTypes)\n            {\n                if (Activator.CreateInstance(type) is ICommand commandInstance)\n                {\n                    commands.Add(commandInstance);\n                }\n            }\n        }\n\n        return commands;\n    }\n}\n\n// Example usage\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        CommandLoader loader = new CommandLoader();\n        List<ICommand> commands = loader.LoadCommands("path_to_your_dll_folder");\n\n        foreach (ICommand command in commands)\n        {\n            // Add the command to your list box or execute it\n            Console.WriteLine(command.GetType().Name);\n            command.Execute();\n        }\n    }\n}