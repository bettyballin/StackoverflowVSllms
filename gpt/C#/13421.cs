using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Reflection;\n\npublic abstract class ValidatableBase : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    protected virtual void OnPropertyChanged(string propertyName)\n    {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n        ValidateProperty(propertyName);\n    }\n\n    private void ValidateProperty(string propertyName)\n    {\n        var context = new ValidationContext(this) { MemberName = propertyName };\n        var results = new List<ValidationResult>();\n\n        var propertyInfo = this.GetType().GetProperty(propertyName);\n        var value = propertyInfo.GetValue(this);\n\n        Validator.TryValidateProperty(value, context, results);\n\n        foreach (var validationResult in results)\n        {\n            Console.WriteLine($"Property {propertyName} failed validation. Error: {validationResult.ErrorMessage}");\n        }\n\n        // You can extend this to store validation results, raise additional events, etc.\n    }\n\n    protected bool SetProperty<T>(ref T field, T value, string propertyName)\n    {\n        if (!EqualityComparer<T>.Default.Equals(field, value))\n        {\n            field = value;\n            OnPropertyChanged(propertyName);\n            return true;\n        }\n        return false;\n    }\n}