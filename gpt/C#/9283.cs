using System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing System.Web;\n\npublic partial class GetContent : System.Web.UI.Page\n{\n    protected async void Page_Load(object sender, EventArgs e)\n    {\n        string url = Request.QueryString["url"];\n        if (!string.IsNullOrEmpty(url) && Uri.IsWellFormedUriString(url, UriKind.Absolute))\n        {\n            string sanitizedUrl = SanitizeUrl(url);\n            string content = await FetchContentAsync(sanitizedUrl);\n            Response.ContentType = "text/html";\n            Response.Write(HttpUtility.HtmlEncode(content)); // Encode to prevent XSS\n        }\n        else\n        {\n            Response.StatusCode = 400; // Bad Request\n            Response.Write("Invalid URL");\n        }\n    }\n\n    private string SanitizeUrl(string url)\n    {\n        // Implement URL sanitization logic here\n        // For example, allow only specific domains\n        Uri uri = new Uri(url);\n        if (uri.Host.EndsWith("targetdomain.com", StringComparison.OrdinalIgnoreCase))\n        {\n            return url;\n        }\n        throw new ArgumentException("Invalid URL domain");\n    }\n\n    private async Task<string> FetchContentAsync(string url)\n    {\n        using (HttpClient client = new HttpClient())\n        {\n            HttpResponseMessage response = await client.GetAsync(url);\n            response.EnsureSuccessStatusCode();\n            return await response.Content.ReadAsStringAsync();\n        }\n    }\n}