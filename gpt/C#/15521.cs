using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class EncryptionHelper\n{\n    public static byte[] EncryptData(string plaintext, RSAParameters publicKey)\n    {\n        using (Aes aes = Aes.Create())\n        {\n            aes.GenerateKey();\n            aes.GenerateIV();\n\n            byte[] encryptedMessage;\n            using (ICryptoTransform encryptor = aes.CreateEncryptor(aes.Key, aes.IV))\n            using (MemoryStream msEncrypt = new MemoryStream())\n            using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n            using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))\n            {\n                swEncrypt.Write(plaintext);\n                swEncrypt.Close();\n                encryptedMessage = msEncrypt.ToArray();\n            }\n\n            byte[] encryptedKey;\n            using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())\n            {\n                rsa.ImportParameters(publicKey);\n                encryptedKey = rsa.Encrypt(aes.Key, false);\n            }\n\n            byte[] result = new byte[encryptedKey.Length + aes.IV.Length + encryptedMessage.Length];\n            Buffer.BlockCopy(encryptedKey, 0, result, 0, encryptedKey.Length);\n            Buffer.BlockCopy(aes.IV, 0, result, encryptedKey.Length, aes.IV.Length);\n            Buffer.BlockCopy(encryptedMessage, 0, result, encryptedKey.Length + aes.IV.Length, encryptedMessage.Length);\n\n            return result;\n        }\n    }\n\n    public static string DecryptData(byte[] encryptedData, RSAParameters privateKey)\n    {\n        using (Aes aes = Aes.Create())\n        {\n            byte[] encryptedKey = new byte[256]; // Assuming 2048-bit RSA key (256 bytes)\n            byte[] iv = new byte[aes.BlockSize / 8];\n            byte[] encryptedMessage = new byte[encryptedData.Length - encryptedKey.Length - iv.Length];\n\n            Buffer.BlockCopy(encryptedData, 0, encryptedKey, 0, encryptedKey.Length);\n            Buffer.BlockCopy(encryptedData, encryptedKey.Length, iv, 0, iv.Length);\n            Buffer.BlockCopy(encryptedData, encryptedKey.Length + iv.Length, encryptedMessage, 0, encryptedMessage.Length);\n\n            byte[] decryptedKey;\n            using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())\n            {\n                rsa.ImportParameters(privateKey);\n                decryptedKey = rsa.Decrypt(encryptedKey, false);\n            }\n\n            string plaintext;\n            using (ICryptoTransform decryptor = aes.CreateDecryptor(decryptedKey, iv))\n            using (MemoryStream msDecrypt = new MemoryStream(encryptedMessage))\n            using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n            using (StreamReader srDecrypt = new StreamReader(csDecrypt))\n            {\n                plaintext = srDecrypt.ReadToEnd();\n            }\n\n            return plaintext;\n        }\n    }\n}\n\n// Example usage:\n// RSAParameters publicKey = ... // Load or generate the public key\n// RSAParameters privateKey = ... // Load or generate the private key\n\n// string message = "Hello, World!";\n// byte[] encryptedData = EncryptionHelper.EncryptData(message, publicKey);\n// string decryptedMessage = EncryptionHelper.DecryptData(encryptedData, privateKey);\n\n// Console.WriteLine("Decrypted message: " + decryptedMessage);