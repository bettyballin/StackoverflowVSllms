using System;\nusing System.Runtime.InteropServices;\nusing System.Security.Principal;\n\npublic class Impersonation : IDisposable\n{\n    private WindowsImpersonationContext _context;\n\n    public Impersonation(string domain, string username, string password)\n    {\n        Impersonate(domain, username, password);\n    }\n\n    private void Impersonate(string domain, string username, string password)\n    {\n        IntPtr userToken = IntPtr.Zero;\n\n        bool success = LogonUser(username, domain, password, LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT, out userToken);\n        if (!success)\n        {\n            throw new UnauthorizedAccessException("Logon user failed.");\n        }\n\n        _context = WindowsIdentity.Impersonate(userToken);\n\n        CloseHandle(userToken);\n    }\n\n    public void Dispose()\n    {\n        _context?.Undo();\n    }\n\n    [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Auto)]\n    private static extern bool LogonUser(string lpszUsername, string lpszDomain, string lpszPassword, int dwLogonType, int dwLogonProvider, out IntPtr phToken);\n\n    [DllImport("kernel32.dll", CharSet = CharSet.Auto)]\n    private extern static bool CloseHandle(IntPtr handle);\n\n    private const int LOGON32_LOGON_INTERACTIVE = 2;\n    private const int LOGON32_PROVIDER_DEFAULT = 0;\n}