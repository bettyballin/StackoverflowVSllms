using System;\nusing System.Collections.Generic;\n\npublic class Range<T> where T : IComparable<T>\n{\n    public T Start { get; }\n    public T End { get; }\n\n    private Range(T start, T end)\n    {\n        Start = start;\n        End = end;\n    }\n\n    public static Range<T> Create(T start, T end)\n    {\n        return new Range<T>(start, end);\n    }\n}\n\npublic static class RangeExtensions\n{\n    public static IEnumerable<Range<T>> MergeAdjacent<T>(this IEnumerable<Range<T>> source, Func<T, T, bool> isAdjacent) where T : IComparable<T>\n    {\n        using (var sourceIterator = source.GetEnumerator())\n        {\n            if (!sourceIterator.MoveNext())\n                yield break;\n\n            var current = sourceIterator.Current;\n\n            while (sourceIterator.MoveNext())\n            {\n                var next = sourceIterator.Current;\n\n                if (isAdjacent(current.End, next.Start))\n                {\n                    current = Range.Create(current.Start, next.End);\n                }\n                else\n                {\n                    yield return current;\n                    current = next;\n                }\n            }\n\n            yield return current;\n        }\n    }\n}