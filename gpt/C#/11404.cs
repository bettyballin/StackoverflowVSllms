using System;\nusing System.Collections.Generic;\n\npublic class MedianCalculator\n{\n    private PriorityQueue<int, int> maxHeap; // Max-heap for the lower half\n    private PriorityQueue<int, int> minHeap; // Min-heap for the upper half\n\n    public MedianCalculator()\n    {\n        maxHeap = new PriorityQueue<int, int>(Comparer<int>.Create((a, b) => b.CompareTo(a)));\n        minHeap = new PriorityQueue<int, int>();\n    }\n\n    public void Add(int value)\n    {\n        if (maxHeap.Count == 0 || value <= maxHeap.Peek())\n        {\n            maxHeap.Enqueue(value, value);\n        }\n        else\n        {\n            minHeap.Enqueue(value, value);\n        }\n\n        // Balance the heaps\n        if (maxHeap.Count > minHeap.Count + 1)\n        {\n            minHeap.Enqueue(maxHeap.Dequeue(), maxHeap.Peek());\n        }\n        else if (minHeap.Count > maxHeap.Count)\n        {\n            maxHeap.Enqueue(minHeap.Dequeue(), minHeap.Peek());\n        }\n    }\n\n    public double Median\n    {\n        get\n        {\n            if (maxHeap.Count == minHeap.Count)\n            {\n                return (maxHeap.Peek() + minHeap.Peek()) / 2.0;\n            }\n            else\n            {\n                return maxHeap.Peek();\n            }\n        }\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var medianCalculator = new MedianCalculator();\n        var sourceData = new List<int> { 1, 3, 5, 7, 9, 2, 4, 6, 8 };\n\n        foreach (var value in sourceData)\n        {\n            medianCalculator.Add(value);\n        }\n\n        Console.WriteLine("The median is: {0}", medianCalculator.Median);\n    }\n}