using NHibernate;\nusing NHibernate.Cfg;\nusing NHibernate.Tool.hbm2ddl;\nusing System.Data.SQLite;\n\npublic class NHibernateHelper\n{\n    private static ISessionFactory _sessionFactory;\n    private static Configuration _configuration;\n    private static SQLiteConnection _connection;\n\n    public static ISessionFactory SessionFactory\n    {\n        get\n        {\n            if (_sessionFactory == null)\n            {\n                InitializeSessionFactory();\n            }\n            return _sessionFactory;\n        }\n    }\n\n    private static void InitializeSessionFactory()\n    {\n        _configuration = new Configuration();\n        _configuration.Configure(); // configure from hibernate.cfg.xml\n        _configuration.AddAssembly(typeof(YourEntityClass).Assembly);\n\n        // Create an in-memory SQLite connection\n        _connection = new SQLiteConnection("Data Source=:memory:;Version=3;New=True;");\n        _connection.Open();\n\n        _configuration.SetProperty(NHibernate.Cfg.Environment.ConnectionString, _connection.ConnectionString);\n        _configuration.SetProperty(NHibernate.Cfg.Environment.ConnectionDriver, "NHibernate.Driver.SQLite20Driver");\n        _configuration.SetProperty(NHibernate.Cfg.Environment.Dialect, "NHibernate.Dialect.SQLiteDialect");\n\n        // Create the schema in the in-memory database\n        new SchemaExport(_configuration).Execute(true, true, false, _connection, null);\n\n        _sessionFactory = _configuration.BuildSessionFactory();\n    }\n\n    public static ISession OpenSession()\n    {\n        return SessionFactory.OpenSession(_connection);\n    }\n}\n\n// Usage in your tests\nusing (var session = NHibernateHelper.OpenSession())\n{\n    using (var transaction = session.BeginTransaction())\n    {\n        // Your test code here\n        transaction.Commit();\n    }\n}