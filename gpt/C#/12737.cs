using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class ConfigEncryption\n{\n    private static RSAParameters _publicKey;\n    private static RSAParameters _privateKey;\n\n    public static void GenerateKeys()\n    {\n        using (var rsa = new RSACryptoServiceProvider(2048))\n        {\n            rsa.PersistKeyInCsp = false;\n            _publicKey = rsa.ExportParameters(false);\n            _privateKey = rsa.ExportParameters(true);\n        }\n    }\n\n    public static string Encrypt(string dataToEncrypt)\n    {\n        byte[] data = Encoding.UTF8.GetBytes(dataToEncrypt);\n        byte[] cipherBytes;\n        using (var rsa = new RSACryptoServiceProvider())\n        {\n            rsa.ImportParameters(_publicKey);\n            cipherBytes = rsa.Encrypt(data, false);\n        }\n        return Convert.ToBase64String(cipherBytes);\n    }\n\n    public static string Decrypt(string dataToDecrypt)\n    {\n        byte[] data = Convert.FromBase64String(dataToDecrypt);\n        byte[] plainBytes;\n        using (var rsa = new RSACryptoServiceProvider())\n        {\n            rsa.ImportParameters(_privateKey);\n            plainBytes = rsa.Decrypt(data, false);\n        }\n        return Encoding.UTF8.GetString(plainBytes);\n    }\n\n    public static void Main()\n    {\n        // Generate and display keys (for demonstration purposes)\n        GenerateKeys();\n        Console.WriteLine("Public Key: " + Convert.ToBase64String(_publicKey.Modulus));\n        Console.WriteLine("Private Key (Keep this secure!): " + Convert.ToBase64String(_privateKey.D));\n\n        // Encrypt and decrypt a sample string\n        string original = "SensitiveConfigData";\n        string encrypted = Encrypt(original);\n        string decrypted = Decrypt(encrypted);\n\n        Console.WriteLine("Original: " + original);\n        Console.WriteLine("Encrypted: " + encrypted);\n        Console.WriteLine("Decrypted: " + decrypted);\n    }\n}