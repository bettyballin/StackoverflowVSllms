using System;\nusing System.Collections.Generic;\n\npublic class Node\n{\n    public string Name { get; set; }\n    public List<Node> Neighbors { get; set; }\n\n    public Node(string name)\n    {\n        Name = name;\n        Neighbors = new List<Node>();\n    }\n}\n\npublic class DirectedGraph\n{\n    public Node Head { get; set; }\n    public Node Foot { get; set; }\n\n    public DirectedGraph(Node head, Node foot)\n    {\n        Head = head;\n        Foot = foot;\n    }\n\n    public List<List<string>> FindAllPaths()\n    {\n        List<List<string>> allPaths = new List<List<string>>();\n        List<string> currentPath = new List<string>();\n        FindPathsRecursive(Head, currentPath, allPaths);\n        return allPaths;\n    }\n\n    private void FindPathsRecursive(Node currentNode, List<string> currentPath, List<List<string>> allPaths)\n    {\n        currentPath.Add(currentNode.Name);\n\n        if (currentNode == Foot)\n        {\n            // Reached the foot node, add the current path to all paths\n            allPaths.Add(new List<string>(currentPath));\n        }\n        else\n        {\n            // Continue to traverse the neighbors\n            foreach (var neighbor in currentNode.Neighbors)\n            {\n                FindPathsRecursive(neighbor, currentPath, allPaths);\n            }\n        }\n\n        // Backtrack\n        currentPath.RemoveAt(currentPath.Count - 1);\n    }\n}\n\n// Example usage\npublic class Program\n{\n    public static void Main()\n    {\n        // Construct the graph based on your example\n        Node n1 = new Node("n1");\n        Node n2 = new Node("n2");\n        Node n4 = new Node("n4");\n        Node n5 = new Node("n5");\n        Node n6 = new Node("n6");\n        Node n7 = new Node("n7");\n        Node n8 = new Node("n8");\n        Node n9 = new Node("n9");\n        Node n10 = new Node("n10");\n        Node n11 = new Node("n11");\n        Node n12 = new Node("n12");\n        Node n13 = new Node("n13");\n\n        n1.Neighbors.Add(n2);\n        n2.Neighbors.Add(n4);\n        n4.Neighbors.Add(n5);\n        n4.Neighbors.Add(n6);\n        n4.Neighbors.Add(n10);\n        n5.Neighbors.Add(n7);\n        n6.Neighbors.Add(n8);\n        n7.Neighbors.Add(n9);\n        n8.Neighbors.Add(n9);\n        n9.Neighbors.Add(n13);\n        n10.Neighbors.Add(n11);\n        n11.Neighbors.Add(n12);\n        n12.Neighbors.Add(n13);\n\n        DirectedGraph graph = new DirectedGraph(n1, n13);\n        List<List<string>> allPaths = graph.FindAllPaths();\n\n        // Print all paths\n        foreach (var path in allPaths)\n        {\n            Console.WriteLine(string.Join(",", path));\n        }\n    }\n}