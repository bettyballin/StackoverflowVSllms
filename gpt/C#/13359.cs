using System.Reflection;\n\npublic void UpdateObject<T>(T target, T source)\n{\n    PropertyInfo[] properties = typeof(T).GetProperties();\n    foreach (var property in properties)\n    {\n        // Check if the property can be written to (i.e., it has a setter)\n        if (property.CanWrite)\n        {\n            // Get the value from the source object\n            var value = property.GetValue(source);\n            // Set the value to the target object\n            property.SetValue(target, value);\n        }\n    }\n}\n\n// Usage example\nvar newCaller = // initialize or fetch your new caller object\nvar oldCaller = // fetch your old caller object from database\n\nUpdateObject(oldCaller, newCaller);