using System;\nusing System.IO;\nusing System.Reflection;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(OnResolveAssembly);\n        \n        // Your application logic here\n        // For example, loading plugins\n        LoadPlugins();\n\n        Console.WriteLine("Application started.");\n    }\n\n    private static Assembly OnResolveAssembly(object sender, ResolveEventArgs args)\n    {\n        // Extract the name of the assembly from the full name\n        var assemblyName = new AssemblyName(args.Name).Name;\n        \n        // Define the paths to the directories where you want to look for assemblies\n        string[] searchPaths = new string[]\n        {\n            Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "PluginsFolder"),\n            AppDomain.CurrentDomain.BaseDirectory\n        };\n\n        foreach (var path in searchPaths)\n        {\n            // Check for the assembly in each path\n            var assemblyPath = Path.Combine(path, assemblyName + ".dll");\n            if (File.Exists(assemblyPath))\n            {\n                return Assembly.LoadFrom(assemblyPath);\n            }\n        }\n\n        // Return null if the assembly is not found\n        return null;\n    }\n\n    private static void LoadPlugins()\n    {\n        // Example method to load plugins\n        string pluginsPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "PluginsFolder");\n        foreach (var pluginFile in Directory.GetFiles(pluginsPath, "*.dll"))\n        {\n            Assembly.LoadFrom(pluginFile);\n        }\n    }\n}