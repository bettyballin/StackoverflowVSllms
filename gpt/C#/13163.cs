using Moq;\nusing Xunit;\n\npublic interface IRepository\n{\n    Task<Item> GetItemAsync(int id);\n}\n\npublic class ItemService\n{\n    private readonly IRepository _repository;\n    \n    public ItemService(IRepository repository)\n    {\n        _repository = repository;\n    }\n    \n    public async Task<Item> GetItemByIdAsync(int id)\n    {\n        return await _repository.GetItemAsync(id);\n    }\n}\n\npublic class ItemServiceTests\n{\n    [Fact]\n    public async Task GetItemByIdAsync_ReturnsItem()\n    {\n        // Arrange\n        var mockRepo = new Mock<IRepository>();\n        mockRepo.Setup(repo => repo.GetItemAsync(It.IsAny<int>())).ReturnsAsync(new Item { Id = 1, Name = "Test Item" });\n        \n        var service = new ItemService(mockRepo.Object);\n        \n        // Act\n        var result = await service.GetItemByIdAsync(1);\n        \n        // Assert\n        Assert.NotNull(result);\n        Assert.Equal(1, result.Id);\n        Assert.Equal("Test Item", result.Name);\n    }\n}\n\npublic class Item\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}