using System;\nusing System.Runtime.Caching;\n\npublic static class CacheHelper\n{\n    private static readonly MemoryCache Cache = MemoryCache.Default;\n\n    public static T GetOrAdd<T>(string cacheKey, Func<T> getItemCallback, double cacheDurationInSeconds) where T : class\n    {\n        if (Cache.Contains(cacheKey))\n        {\n            return Cache.Get(cacheKey) as T;\n        }\n\n        var item = getItemCallback();\n        if (item != null)\n        {\n            CacheItemPolicy policy = new CacheItemPolicy\n            {\n                AbsoluteExpiration = DateTimeOffset.Now.AddSeconds(cacheDurationInSeconds)\n            };\n            Cache.Add(cacheKey, item, policy);\n        }\n\n        return item;\n    }\n\n    public static void Remove(string cacheKey)\n    {\n        if (Cache.Contains(cacheKey))\n        {\n            Cache.Remove(cacheKey);\n        }\n    }\n}