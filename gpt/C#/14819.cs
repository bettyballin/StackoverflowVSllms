using System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Text;\n\npublic class SqlQueryBuilder\n{\n    private StringBuilder _selectClause = new StringBuilder();\n    private StringBuilder _fromClause = new StringBuilder();\n    private StringBuilder _whereClause = new StringBuilder();\n    private StringBuilder _groupByClause = new StringBuilder();\n    private StringBuilder _havingClause = new StringBuilder();\n    private StringBuilder _orderByClause = new StringBuilder();\n    private List<SqlParameter> _parameters = new List<SqlParameter>();\n\n    public SqlQueryBuilder Select(string fields)\n    {\n        _selectClause.Append(fields);\n        return this;\n    }\n\n    public SqlQueryBuilder From(string table)\n    {\n        _fromClause.Append(table);\n        return this;\n    }\n\n    public SqlQueryBuilder Where(string condition, SqlParameter parameter)\n    {\n        if (_whereClause.Length > 0)\n        {\n            _whereClause.Append(" AND ");\n        }\n        _whereClause.Append(condition);\n        _parameters.Add(parameter);\n        return this;\n    }\n\n    public SqlQueryBuilder GroupBy(string fields)\n    {\n        _groupByClause.Append(fields);\n        return this;\n    }\n\n    public SqlQueryBuilder Having(string condition)\n    {\n        _havingClause.Append(condition);\n        return this;\n    }\n\n    public SqlQueryBuilder OrderBy(string fields)\n    {\n        _orderByClause.Append(fields);\n        return this;\n    }\n\n    public string BuildQuery()\n    {\n        var query = new StringBuilder();\n        query.Append("SELECT ").Append(_selectClause);\n        query.Append(" FROM ").Append(_fromClause);\n        if (_whereClause.Length > 0)\n        {\n            query.Append(" WHERE ").Append(_whereClause);\n        }\n        if (_groupByClause.Length > 0)\n        {\n            query.Append(" GROUP BY ").Append(_groupByClause);\n        }\n        if (_havingClause.Length > 0)\n        {\n            query.Append(" HAVING ").Append(_havingClause);\n        }\n        if (_orderByClause.Length > 0)\n        {\n            query.Append(" ORDER BY ").Append(_orderByClause);\n        }\n        return query.ToString();\n    }\n\n    public List<SqlParameter> GetParameters()\n    {\n        return _parameters;\n    }\n}\n\n// Usage example:\nvar queryBuilder = new SqlQueryBuilder();\nqueryBuilder.Select("c.id AS ContactID, ROW_NUMBER() OVER (ORDER BY c.Name ASC) as ROWRANK")\n            .From("contacts c")\n            .Where("c.Name = @name", new SqlParameter("@name", SqlDbType.VarChar) { Value = "John Doe" })\n            .OrderBy("c.Name ASC");\n\nstring query = queryBuilder.BuildQuery();\nList<SqlParameter> parameters = queryBuilder.GetParameters();\n\n// Now you can use the query and parameters with SqlCommand\nusing (SqlCommand sqlCmd = new SqlCommand(query))\n{\n    sqlCmd.Parameters.AddRange(parameters.ToArray());\n    // Execute the command...\n}