using System;\nusing Microsoft.FxCop.Sdk;\nusing Microsoft.FxCop.Sdk.Introspection;\n\npublic class CheckNullableIntegerComparisonRule : BaseIntrospectionRule\n{\n    public CheckNullableIntegerComparisonRule() \n        : base("CheckNullableIntegerComparisonRule",\n               "YourNamespace.Rules",\n               typeof(CheckNullableIntegerComparisonRule).Assembly)\n    {\n    }\n\n    public override ProblemCollection Check(Member member)\n    {\n        if (member is Method method)\n        {\n            VisitStatements(method.Body.Statements);\n        }\n        return this.Problems;\n    }\n\n    private void VisitStatements(StatementCollection statements)\n    {\n        foreach (var statement in statements)\n        {\n            if (statement is IfNode ifNode)\n            {\n                VisitExpression(ifNode.Condition);\n            }\n            else if (statement is Block block)\n            {\n                VisitStatements(block.Statements);\n            }\n        }\n    }\n\n    private void VisitExpression(Expression expression)\n    {\n        if (expression is BinaryExpression binaryExpression)\n        {\n            if (binaryExpression.NodeType == NodeType.Eq && \n                binaryExpression.Operand1.Type.IsNullableType() &&\n                binaryExpression.Operand2 is Literal literal && literal.Value == null)\n            {\n                this.Problems.Add(new Problem(new Resolution("Use 'Is Nothing' instead of '= Nothing' for nullable types")));\n            }\n        }\n    }\n}