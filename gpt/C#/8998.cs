using System;\n   using System.Runtime.InteropServices;\n\n   public static class ComRegistrationHelper\n   {\n       [DllImport("kernel32.dll", SetLastError = true)]\n       private static extern IntPtr LoadLibrary(string lpFileName);\n\n       [DllImport("kernel32.dll", SetLastError = true)]\n       private static extern IntPtr GetProcAddress(IntPtr hModule, string lpProcName);\n\n       [DllImport("kernel32.dll", SetLastError = true)]\n       private static extern bool FreeLibrary(IntPtr hModule);\n\n       private delegate int DllRegisterServer();\n\n       public static void RegisterComComponent(string filePath)\n       {\n           IntPtr hModule = LoadLibrary(filePath);\n           if (hModule == IntPtr.Zero)\n               throw new Exception("Failed to load library: " + filePath);\n\n           IntPtr procAddress = GetProcAddress(hModule, "DllRegisterServer");\n           if (procAddress == IntPtr.Zero)\n           {\n               FreeLibrary(hModule);\n               throw new Exception("Failed to find DllRegisterServer in " + filePath);\n           }\n\n           DllRegisterServer dllRegisterServer = (DllRegisterServer)Marshal.GetDelegateForFunctionPointer(procAddress, typeof(DllRegisterServer));\n           int result = dllRegisterServer();\n           FreeLibrary(hModule);\n\n           if (result != 0)\n               throw new Exception("DllRegisterServer failed with error code: " + result);\n       }\n   }