using System;\nusing System.ServiceProcess;\nusing System.Threading;\n\npublic class MyService : ServiceBase\n{\n    private static Mutex _mutex;\n\n    protected override void OnStart(string[] args)\n    {\n        const string mutexName = "Global\\MyUniqueServiceName";\n        bool createdNew;\n\n        _mutex = new Mutex(true, mutexName, out createdNew);\n\n        if (!createdNew)\n        {\n            Log.Info("Another instance is already running. Exiting.");\n            Stop(); // Stop the service if another instance is already running\n            return;\n        }\n\n        Log.Info("STARTING SERVICE");\n\n        // Your initialization code here\n    }\n\n    protected override void OnStop()\n    {\n        Log.Info("STOPPING SERVICE");\n\n        // Wait for working threads to finish\n        _Worker.Die();\n\n        // Kill inner processes still running\n        ProcessUtility.KillTree(System.Diagnostics.Process.GetCurrentProcess().Id);\n\n        // Release the mutex\n        if (_mutex != null)\n        {\n            _mutex.ReleaseMutex();\n            _mutex.Dispose();\n            _mutex = null;\n        }\n\n        // Call parent's class Stop\n        base.OnStop();\n    }\n\n    public static void Main()\n    {\n        ServiceBase.Run(new MyService());\n    }\n}