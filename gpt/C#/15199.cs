using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Linq;\nusing System.Runtime.Serialization;\n\n[DataContract]\npublic class SortableBindingList<T> : BindingList<T>\n{\n    private bool _isSorted;\n    private ListSortDirection _sortDirection;\n    private PropertyDescriptor _sortProperty;\n\n    public SortableBindingList() : base() { }\n\n    public SortableBindingList(IList<T> list) : base(list) { }\n\n    protected override bool SupportsSortingCore => true;\n\n    protected override bool IsSortedCore => _isSorted;\n\n    protected override ListSortDirection SortDirectionCore => _sortDirection;\n\n    protected override PropertyDescriptor SortPropertyCore => _sortProperty;\n\n    protected override void ApplySortCore(PropertyDescriptor prop, ListSortDirection direction)\n    {\n        var items = this.Items as List<T>;\n\n        if (items != null)\n        {\n            var property = typeof(T).GetProperty(prop.Name);\n            if (property != null)\n            {\n                items.Sort((x, y) => \n                    Comparer<object>.Default.Compare(property.GetValue(x), property.GetValue(y)) * (direction == ListSortDirection.Ascending ? 1 : -1)\n                );\n\n                _isSorted = true;\n                _sortDirection = direction;\n                _sortProperty = prop;\n\n                OnListChanged(new ListChangedEventArgs(ListChangedType.Reset, -1));\n            }\n        }\n    }\n\n    protected override void RemoveSortCore()\n    {\n        _isSorted = false;\n        _sortDirection = ListSortDirection.Ascending;\n        _sortProperty = null;\n\n        OnListChanged(new ListChangedEventArgs(ListChangedType.Reset, -1));\n    }\n}