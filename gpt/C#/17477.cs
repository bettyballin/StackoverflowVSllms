public interface IClientStrategy\n{\n    void ExecuteBusinessLogic();\n}\n\npublic class ClientAStrategy : IClientStrategy\n{\n    public void ExecuteBusinessLogic()\n    {\n        // Client A specific logic\n    }\n}\n\npublic class ClientBStrategy : IClientStrategy\n{\n    public void ExecuteBusinessLogic()\n    {\n        // Client B specific logic\n    }\n}\n\npublic class ClientContext\n{\n    private readonly IClientStrategy _strategy;\n\n    public ClientContext(IClientStrategy strategy)\n    {\n        _strategy = strategy;\n    }\n\n    public void Execute()\n    {\n        _strategy.ExecuteBusinessLogic();\n    }\n}\n\n// Usage\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        IClientStrategy strategy = GetClientStrategy(clientId);\n        ClientContext context = new ClientContext(strategy);\n        context.Execute();\n    }\n\n    private static IClientStrategy GetClientStrategy(string clientId)\n    {\n        // Logic to determine and return the appropriate strategy\n        switch (clientId)\n        {\n            case "ClientA":\n                return new ClientAStrategy();\n            case "ClientB":\n                return new ClientBStrategy();\n            default:\n                throw new ArgumentException("Invalid client ID");\n        }\n    }\n}