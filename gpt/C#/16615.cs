using System;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.ServiceProcess;\n\npublic class Program\n{\n    public static void Main()\n    {\n        if (IsRunningAsService())\n        {\n            // Run as service\n            ServiceBase[] ServicesToRun;\n            ServicesToRun = new ServiceBase[]\n            {\n                new MyService()\n            };\n            ServiceBase.Run(ServicesToRun);\n        }\n        else\n        {\n            // Run as console application\n            Console.WriteLine("Running as console application.");\n            // Your console application code here\n        }\n    }\n\n    private static bool IsRunningAsService()\n    {\n        // Check if the environment is interactive\n        if (Environment.UserInteractive)\n        {\n            return false;\n        }\n\n        // Check if the parent process is services.exe\n        using (var process = Process.GetCurrentProcess())\n        {\n            var parent = GetParentProcess(process.Id);\n            if (parent != null && parent.ProcessName == "services")\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private static Process GetParentProcess(int id)\n    {\n        var parentPid = 0;\n        var process = new Process();\n\n        try\n        {\n            using (var mo = new System.Management.ManagementObject($"win32_process.handle='{id}'"))\n            {\n                mo.Get();\n                parentPid = Convert.ToInt32(mo["ParentProcessId"]);\n            }\n            process = Process.GetProcessById(parentPid);\n        }\n        catch\n        {\n            return null;\n        }\n\n        return process;\n    }\n}\n\npublic class MyService : ServiceBase\n{\n    protected override void OnStart(string[] args)\n    {\n        // Service start logic\n    }\n\n    protected override void OnStop()\n    {\n        // Service stop logic\n    }\n}