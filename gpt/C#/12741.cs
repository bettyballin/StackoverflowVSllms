using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Windows.Forms;\nusing System.ComponentModel;\nusing System.ServiceProcess;\nusing System.Configuration.Install;\nusing System.Diagnostics;\n\nnamespace Form_Service\n{\n    static class Program\n    {\n        [STAThread]\n        static int Main(string[] args)\n        {\n            bool arg_install = false;\n            bool arg_uninstall = false;\n            bool arg_gui = false;\n            bool rethrow = false;\n            try\n            {\n                foreach (string arg in args)\n                {\n                    switch (arg.ToLower())\n                    {\n                        case "-i":\n                        case "-install":\n                            arg_install = true; break;\n                        case "-u":\n                        case "-uninstall":\n                            arg_uninstall = true; break;\n                        case "-g":\n                        case "-gui":\n                            arg_gui = true; break;\n                        default:\n                            Console.Error.WriteLine("Argument not expected: " + arg);\n                            break;\n                    }\n                }\n                if (arg_uninstall)\n                {\n                    Install(true, args);\n                }\n                if (arg_install)\n                {\n                    Install(false, args);\n                }\n                if (!(arg_install || arg_uninstall))\n                {\n                    if (arg_gui || Environment.UserInteractive || Debugger.IsAttached)\n                    {\n                        Application.EnableVisualStyles();\n                        Application.SetCompatibleTextRenderingDefault(false);\n                        Application.Run(new Form1());\n                    }\n                    else\n                    {\n                        rethrow = true; // so that windows sees error... \n                        ServiceBase[] services = { new Service1() };\n                        ServiceBase.Run(services);\n                        rethrow = false;\n                    }\n                }\n                return 0;\n            }\n            catch (Exception ex)\n            {\n                if (rethrow) throw;\n                Console.Error.WriteLine(ex.Message);\n                return -1;\n            }\n        }\n\n        static void Install(bool undo, string[] args)\n        {\n            try\n            {\n                Console.WriteLine(undo ? "Uninstalling" : "Installing");\n                using (AssemblyInstaller inst = new AssemblyInstaller(typeof(Program).Assembly, args))\n                {\n                    IDictionary state = new Hashtable();\n                    inst.UseNewContext = true;\n                    try\n                    {\n                        if (undo)\n                        {\n                            inst.Uninstall(state);\n                        }\n                        else\n                        {\n                            inst.Install(state);\n                            inst.Commit(state);\n                        }\n                    }\n                    catch\n                    {\n                        try\n                        {\n                            inst.Rollback(state);\n                        }\n                        catch { }\n                        throw;\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.Error.WriteLine(ex.Message);\n            }\n        }\n    }\n\n    [RunInstaller(true)]\n    public sealed class MyServiceInstallerProcess : ServiceProcessInstaller\n    {\n        public MyServiceInstallerProcess()\n        {\n            this.Account = ServiceAccount.NetworkService;\n        }\n    }\n\n    [RunInstaller(true)]\n    public sealed class MyServiceInstaller : ServiceInstaller\n    {\n        public MyServiceInstaller()\n        {\n            this.Description = "My Service";\n            this.DisplayName = "My Service";\n            this.ServiceName = "My Service";\n            this.StartType = System.ServiceProcess.ServiceStartMode.Manual;\n        }\n    }\n}