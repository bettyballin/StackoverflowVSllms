using System;\n   using System.Data;\n   using System.Data.SqlClient;\n   using System.IO;\n\n   public class SqlSchemaGenerator\n   {\n       public static void GenerateSqlTablesFromDataSet(string xsdFilePath, string connectionString)\n       {\n           DataSet dataSet = new DataSet();\n           dataSet.ReadXmlSchema(xsdFilePath);\n\n           using (SqlConnection connection = new SqlConnection(connectionString))\n           {\n               connection.Open();\n\n               foreach (DataTable table in dataSet.Tables)\n               {\n                   string createTableSql = GenerateCreateTableSql(table);\n                   using (SqlCommand command = new SqlCommand(createTableSql, connection))\n                   {\n                       command.ExecuteNonQuery();\n                   }\n               }\n           }\n       }\n\n       private static string GenerateCreateTableSql(DataTable table)\n       {\n           StringWriter sql = new StringWriter();\n           sql.WriteLine($"CREATE TABLE {table.TableName} (");\n\n           foreach (DataColumn column in table.Columns)\n           {\n               sql.Write($"{column.ColumnName} {GetSqlType(column.DataType)}");\n               if (column.AutoIncrement)\n               {\n                   sql.Write(" IDENTITY(1,1)");\n               }\n               if (!column.AllowDBNull)\n               {\n                   sql.Write(" NOT NULL");\n               }\n               sql.WriteLine(",");\n           }\n\n           sql.WriteLine($"PRIMARY KEY ({table.PrimaryKey[0].ColumnName})");\n           sql.WriteLine(");");\n\n           return sql.ToString();\n       }\n\n       private static string GetSqlType(Type type)\n       {\n           switch (Type.GetTypeCode(type))\n           {\n               case TypeCode.Int32: return "INT";\n               case TypeCode.String: return "NVARCHAR(MAX)";\n               case TypeCode.DateTime: return "DATETIME";\n               case TypeCode.Boolean: return "BIT";\n               case TypeCode.Decimal: return "DECIMAL";\n               default: throw new NotSupportedException($"Type {type.Name} is not supported.");\n           }\n       }\n   }