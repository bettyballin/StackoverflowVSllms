using System;\nusing System.Net;\nusing System.Net.Sockets;\n\npublic class Server\n{\n    static Socket handler = null;\n\n    public static void Main(string[] args)\n    {\n        // Setup listener socket\n        IPEndPoint localEndPoint = new IPEndPoint(IPAddress.Any, 11000);\n        Socket listener = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n        \n        listener.Bind(localEndPoint);\n        listener.Listen(10);\n\n        Console.WriteLine("Waiting for a connection...");\n        listener.BeginAccept(new AsyncCallback(AcceptCallback), listener);\n\n        // Prevent the main thread from exiting\n        Console.ReadLine();\n    }\n\n    public static void AcceptCallback(IAsyncResult ar)\n    {\n        Socket listener = (Socket)ar.AsyncState;\n        handler = listener.EndAccept(ar);\n\n        Console.WriteLine("Client connected.");\n\n        // Start receiving data from the client\n        StateObject state = new StateObject();\n        state.workSocket = handler;\n        handler.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0, new AsyncCallback(ReadCallback), state);\n    }\n\n    public static void ReadCallback(IAsyncResult ar)\n    {\n        StateObject state = (StateObject)ar.AsyncState;\n        Socket handler = state.workSocket;\n\n        int bytesRead = handler.EndReceive(ar);\n\n        if (bytesRead > 0)\n        {\n            // Data was received\n            Console.WriteLine("Received {0} bytes from client.", bytesRead);\n\n            // Continue receiving data\n            handler.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0, new AsyncCallback(ReadCallback), state);\n        }\n        else\n        {\n            // No data received means the client has disconnected\n            Console.WriteLine("Client disconnected.");\n            handler.Close();\n        }\n    }\n\n    public class StateObject\n    {\n        public Socket workSocket = null;\n        public const int BufferSize = 1024;\n        public byte[] buffer = new byte[BufferSize];\n    }\n}