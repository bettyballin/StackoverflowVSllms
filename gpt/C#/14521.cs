using System;\nusing System.Drawing;\nusing System.Runtime.InteropServices;\n\npublic class FileIcon\n{\n    [DllImport("shell32.dll", CharSet = CharSet.Auto)]\n    private static extern IntPtr SHGetFileInfo(string pszPath, uint dwFileAttributes, ref SHFILEINFO psfi, uint cbFileInfo, uint uFlags);\n\n    private const uint SHGFI_ICON = 0x100;\n    private const uint SHGFI_LARGEICON = 0x0; // Large icon\n    private const uint SHGFI_SMALLICON = 0x1; // Small icon\n\n    [StructLayout(LayoutKind.Sequential)]\n    private struct SHFILEINFO\n    {\n        public IntPtr hIcon;\n        public int iIcon;\n        public uint dwAttributes;\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]\n        public string szDisplayName;\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 80)]\n        public string szTypeName;\n    };\n\n    public static Icon GetFileIcon(string filePath, bool largeIcon = true)\n    {\n        SHFILEINFO shinfo = new SHFILEINFO();\n        uint flags = SHGFI_ICON;\n\n        if (largeIcon)\n        {\n            flags |= SHGFI_LARGEICON;\n        }\n        else\n        {\n            flags |= SHGFI_SMALLICON;\n        }\n\n        SHGetFileInfo(filePath, 0, ref shinfo, (uint)Marshal.SizeOf(shinfo), flags);\n\n        return Icon.FromHandle(shinfo.hIcon);\n    }\n}