using System;\nusing System.Diagnostics;\nusing System.Management;\nusing System.Threading;\n\nclass Program\n{\n    private static int m_ParentPID = 0;\n    private static Timer timer;\n\n    static void Main(string[] args)\n    {\n        Process process = Process.GetCurrentProcess();\n        using (ManagementObject mgmtObj = new ManagementObject("win32_process.handle='" + process.Id.ToString() + "'"))\n        {\n            mgmtObj.Get();\n            m_ParentPID = Convert.ToInt32(mgmtObj["ParentProcessId"]);\n        }\n        string parentProcessName = Process.GetProcessById(m_ParentPID).ProcessName;\n        Log("Parent Process: " + parentProcessName + Environment.NewLine);\n\n        // Create a timer for monitoring parent process.\n        timer = new Timer(new TimerCallback(CheckParentProcess), null, 0, 1000);\n\n        // Read data from stdin\n        char[] charray = new char[256];\n        while (true)\n        {\n            try\n            {\n                int read = Console.In.Read(charray, 0, charray.Length);\n                if (read == 0)\n                {\n                    // Handle end of input\n                    break;\n                }\n                // Process the input data here\n            }\n            catch (Exception ex)\n            {\n                Log("Exception: " + ex.Message);\n                break;\n            }\n        }\n    }\n\n    private static void CheckParentProcess(object state)\n    {\n        try\n        {\n            if (m_ParentPID != 0)\n            {\n                Process parent = Process.GetProcessById(m_ParentPID);\n                if (parent == null)\n                {\n                    Log("Parent process stopped/killed. Terminating self.");\n                    CleanupAndExit();\n                }\n            }\n        }\n        catch (ArgumentException)\n        {\n            // Parent process does not exist\n            Log("Parent process stopped/killed. Terminating self.");\n            CleanupAndExit();\n        }\n    }\n\n    private static void CleanupAndExit()\n    {\n        timer.Dispose(); // Dispose of the timer\n        Environment.Exit(0); // Exit the application\n    }\n\n    private static void Log(string message)\n    {\n        Console.WriteLine(message);\n    }\n}