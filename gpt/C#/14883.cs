// Task.cs\npublic class Task\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Description { get; set; }\n    public DateTime DueDate { get; set; }\n    public bool IsCompleted { get; set; }\n}\n\n// TaskContext.cs\npublic class TaskContext : DbContext\n{\n    public DbSet<Task> Tasks { get; set; }\n    \n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        optionsBuilder.UseSqlServer("YourConnectionStringHere");\n    }\n}\n\n// TaskRepository.cs\npublic class TaskRepository\n{\n    private readonly TaskContext _context;\n\n    public TaskRepository(TaskContext context)\n    {\n        _context = context;\n    }\n\n    public IEnumerable<Task> GetAllTasks()\n    {\n        return _context.Tasks.ToList();\n    }\n\n    public Task GetTaskById(int id)\n    {\n        return _context.Tasks.Find(id);\n    }\n\n    public void AddTask(Task task)\n    {\n        _context.Tasks.Add(task);\n        _context.SaveChanges();\n    }\n\n    public void UpdateTask(Task task)\n    {\n        _context.Tasks.Update(task);\n        _context.SaveChanges();\n    }\n\n    public void DeleteTask(int id)\n    {\n        var task = _context.Tasks.Find(id);\n        if (task != null)\n        {\n            _context.Tasks.Remove(task);\n            _context.SaveChanges();\n        }\n    }\n}