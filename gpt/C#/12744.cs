// Model\npublic class FormModel\n{\n    public string TextBoxValue { get; set; }\n    public bool IsRadioButtonChecked { get; set; }\n\n    public List<ValidationError> Validate()\n    {\n        var errors = new List<ValidationError>();\n\n        if (IsRadioButtonChecked && string.IsNullOrWhiteSpace(TextBoxValue))\n        {\n            errors.Add(new ValidationError("TextBoxValue", "Textbox must contain text when the radio button is checked."));\n        }\n\n        return errors;\n    }\n}\n\npublic class ValidationError\n{\n    public string ControlName { get; set; }\n    public string ErrorMessage { get; set; }\n\n    public ValidationError(string controlName, string errorMessage)\n    {\n        ControlName = controlName;\n        ErrorMessage = errorMessage;\n    }\n}\n\n// View Interface\npublic interface IFormView\n{\n    event EventHandler TextBoxValueChanged;\n    event EventHandler RadioButtonCheckedChanged;\n\n    string TextBoxValue { get; }\n    bool IsRadioButtonChecked { get; }\n\n    void DisplayValidationErrors(List<ValidationError> errors);\n}\n\n// Presenter\npublic class FormPresenter\n{\n    private readonly IFormView view;\n    private readonly FormModel model;\n\n    public FormPresenter(IFormView view, FormModel model)\n    {\n        this.view = view;\n        this.model = model;\n\n        this.view.TextBoxValueChanged += OnTextBoxValueChanged;\n        this.view.RadioButtonCheckedChanged += OnRadioButtonCheckedChanged;\n    }\n\n    private void OnTextBoxValueChanged(object sender, EventArgs e)\n    {\n        model.TextBoxValue = view.TextBoxValue;\n        ValidateForm();\n    }\n\n    private void OnRadioButtonCheckedChanged(object sender, EventArgs e)\n    {\n        model.IsRadioButtonChecked = view.IsRadioButtonChecked;\n        ValidateForm();\n    }\n\n    private void ValidateForm()\n    {\n        var errors = model.Validate();\n        view.DisplayValidationErrors(errors);\n    }\n}