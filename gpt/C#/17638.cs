using System;\n\n// Define the Caption class\npublic class Caption\n{\n    // Declare the event using EventHandler\n    public event EventHandler CaptionChanged;\n\n    private string _text;\n    public string Text\n    {\n        get { return _text; }\n        set\n        {\n            if (_text != value)\n            {\n                _text = value;\n                // Raise the event\n                OnCaptionChanged(EventArgs.Empty);\n            }\n        }\n    }\n\n    // Method to raise the event\n    protected virtual void OnCaptionChanged(EventArgs e)\n    {\n        CaptionChanged?.Invoke(this, e);\n    }\n}\n\n// Define the Gauge class\npublic class Gauge\n{\n    private Caption _caption;\n    public Caption Caption\n    {\n        get { return _caption; }\n        set\n        {\n            if (_caption != null)\n            {\n                // Unsubscribe from the old Caption's event\n                _caption.CaptionChanged -= OnCaptionChanged;\n            }\n\n            _caption = value;\n\n            if (_caption != null)\n            {\n                // Subscribe to the new Caption's event\n                _caption.CaptionChanged += OnCaptionChanged;\n            }\n        }\n    }\n\n    // Event handler method\n    private void OnCaptionChanged(object sender, EventArgs e)\n    {\n        // Execute some subroutine in the Gauge class\n        Console.WriteLine("Caption changed in Gauge.");\n    }\n}\n\n// Example usage\npublic class Program\n{\n    public static void Main()\n    {\n        Caption caption = new Caption();\n        Gauge gauge = new Gauge();\n        gauge.Caption = caption;\n\n        // Change the property to trigger the event\n        caption.Text = "New Caption Text";\n    }\n}