using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.Data.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class LocationUpdate\n{\n    public DateTime UpdateTime { get; set; }\n    public string DeviceId { get; set; }\n    public double Latitude { get; set; }\n    public double Longitude { get; set; }\n}\n\npublic class LocationUpdateService\n{\n    private readonly ConcurrentQueue<LocationUpdate> _updateQueue;\n    private readonly CancellationTokenSource _cancellationTokenSource;\n    private readonly Task _processingTask;\n    private const int BatchSize = 100;\n\n    public LocationUpdateService()\n    {\n        _updateQueue = new ConcurrentQueue<LocationUpdate>();\n        _cancellationTokenSource = new CancellationTokenSource();\n        _processingTask = Task.Factory.StartNew(ProcessQueue, _cancellationTokenSource.Token, TaskCreationOptions.LongRunning, TaskScheduler.Default);\n    }\n\n    public void AddUpdate(LocationUpdate update)\n    {\n        _updateQueue.Enqueue(update);\n    }\n\n    private void ProcessQueue()\n    {\n        while (!_cancellationTokenSource.Token.IsCancellationRequested)\n        {\n            List<LocationUpdate> batch = new List<LocationUpdate>();\n            while (batch.Count < BatchSize && _updateQueue.TryDequeue(out var update))\n            {\n                batch.Add(update);\n            }\n\n            if (batch.Count > 0)\n            {\n                InsertBatch(batch);\n            }\n\n            Thread.Sleep(100); // Adjust sleep time as needed\n        }\n    }\n\n    private void InsertBatch(List<LocationUpdate> batch)\n    {\n        using (var context = new YourDataContext()) // Replace with your actual DataContext\n        {\n            var transaction = context.Connection.BeginTransaction();\n            try\n            {\n                foreach (var update in batch)\n                {\n                    context.ExecuteCommand("INSERT INTO LocationUpdates (UpdateTime, DeviceId, Latitude, Longitude) VALUES ({0}, {1}, {2}, {3})",\n                        update.UpdateTime, update.DeviceId, update.Latitude, update.Longitude);\n                }\n                transaction.Commit();\n            }\n            catch\n            {\n                transaction.Rollback();\n                throw;\n            }\n        }\n    }\n\n    public void Stop()\n    {\n        _cancellationTokenSource.Cancel();\n        _processingTask.Wait();\n    }\n}