using System;\nusing System.IO;\nusing System.Text;\n\nclass BinaryFileSearcher\n{\n    public static void SearchBinaryFile(string filePath, string[] patterns)\n    {\n        const int BufferSize = 4096; // Define a buffer size\n        byte[] buffer = new byte[BufferSize];\n        byte[] leftover = Array.Empty<byte>();\n\n        using (FileStream fs = new FileStream(filePath, FileMode.Open, FileAccess.Read))\n        {\n            int bytesRead;\n            while ((bytesRead = fs.Read(buffer, 0, BufferSize)) > 0)\n            {\n                byte[] combined = Combine(leftover, buffer, bytesRead);\n                foreach (string pattern in patterns)\n                {\n                    SearchPatternInBuffer(combined, pattern);\n                }\n                leftover = GetLeftoverBytes(combined, patternLength: patterns[0].Length);\n            }\n        }\n    }\n\n    private static byte[] Combine(byte[] leftover, byte[] buffer, int bytesRead)\n    {\n        byte[] combined = new byte[leftover.Length + bytesRead];\n        Buffer.BlockCopy(leftover, 0, combined, 0, leftover.Length);\n        Buffer.BlockCopy(buffer, 0, combined, leftover.Length, bytesRead);\n        return combined;\n    }\n\n    private static void SearchPatternInBuffer(byte[] buffer, string pattern)\n    {\n        byte[] patternBytes = Encoding.ASCII.GetBytes(pattern);\n        for (int i = 0; i <= buffer.Length - patternBytes.Length; i++)\n        {\n            if (IsMatch(buffer, i, patternBytes))\n            {\n                Console.WriteLine($"Pattern '{pattern}' found at index {i}");\n            }\n        }\n    }\n\n    private static bool IsMatch(byte[] buffer, int position, byte[] pattern)\n    {\n        for (int i = 0; i < pattern.Length; i++)\n        {\n            if (buffer[position + i] != pattern[i])\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static byte[] GetLeftoverBytes(byte[] combined, int patternLength)\n    {\n        int leftoverLength = combined.Length > patternLength ? patternLength - 1 : combined.Length;\n        byte[] leftover = new byte[leftoverLength];\n        Buffer.BlockCopy(combined, combined.Length - leftoverLength, leftover, 0, leftoverLength);\n        return leftover;\n    }\n\n    public static void Main(string[] args)\n    {\n        string filePath = "path_to_your_binary_file";\n        string[] patterns = { ".debug_info", ".debug_abbrev" };\n\n        SearchBinaryFile(filePath, patterns);\n    }\n}