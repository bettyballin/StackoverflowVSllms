using System;\nusing System.IO;\nusing System.Security.AccessControl;\nusing System.Security.Principal;\n\npublic class FileCreationChecker\n{\n    public static bool CanCreateFile(string folderPath, string fileName)\n    {\n        try\n        {\n            // Check if directory exists\n            if (!Directory.Exists(folderPath))\n            {\n                return false;\n            }\n\n            // Check for write permissions\n            var writeAllow = false;\n            var writeDeny = false;\n            var accessControlList = Directory.GetAccessControl(folderPath);\n            if (accessControlList == null)\n            {\n                return false;\n            }\n\n            var accessRules = accessControlList.GetAccessRules(true, true, typeof(SecurityIdentifier));\n            if (accessRules == null)\n            {\n                return false;\n            }\n\n            var currentUser = WindowsIdentity.GetCurrent();\n            if (currentUser == null)\n            {\n                return false;\n            }\n\n            var principal = new WindowsPrincipal(currentUser);\n            foreach (FileSystemAccessRule rule in accessRules)\n            {\n                if ((FileSystemRights.Write & rule.FileSystemRights) != FileSystemRights.Write)\n                {\n                    continue;\n                }\n\n                if (rule.AccessControlType == AccessControlType.Allow)\n                {\n                    if (principal.IsInRole(rule.IdentityReference as SecurityIdentifier))\n                    {\n                        writeAllow = true;\n                    }\n                }\n                else if (rule.AccessControlType == AccessControlType.Deny)\n                {\n                    if (principal.IsInRole(rule.IdentityReference as SecurityIdentifier))\n                    {\n                        writeDeny = true;\n                    }\n                }\n            }\n\n            // Allow takes precedence over deny\n            if (writeAllow && !writeDeny)\n            {\n                // Check if file already exists\n                var filePath = Path.Combine(folderPath, fileName);\n                if (File.Exists(filePath))\n                {\n                    return false;\n                }\n\n                return true;\n            }\n\n            return false;\n        }\n        catch\n        {\n            return false;\n        }\n    }\n}