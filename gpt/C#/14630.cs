public partial class Window1 : Window\n{\n    private List<Particle> particles;\n    private List<Particle> deadList;\n    private Random random;\n    private DrawingVisual drawingVisual;\n\n    public Window1()\n    {\n        InitializeComponent();\n        particles = new List<Particle>();\n        deadList = new List<Particle>();\n        random = new Random();\n        drawingVisual = new DrawingVisual();\n        particleCanvas.Children.Add(new VisualHost(drawingVisual));\n    }\n\n    private void Window_Loaded(object sender, RoutedEventArgs e)\n    {\n        CompositionTarget.Rendering += CompositionTarget_Rendering;\n        GenerateParticles(100); // Example to generate 100 particles\n    }\n\n    private void CompositionTarget_Rendering(object sender, EventArgs e)\n    {\n        UpdateParticles();\n        RenderParticles();\n    }\n\n    private void GenerateParticles(int count)\n    {\n        for (int i = 0; i < count; i++)\n        {\n            particles.Add(new Particle\n            {\n                Position = new Point3D(random.NextDouble() * Width, random.NextDouble() * Height, 0),\n                Velocity = new Point3D(random.NextDouble() - 0.5, random.NextDouble() - 0.5, 0),\n                Size = random.Next(1, 10),\n                Opacity = random.NextDouble(),\n                Brush = new SolidColorBrush(Color.FromArgb((byte)(random.NextDouble() * 255), (byte)random.Next(255), (byte)random.Next(255), (byte)random.Next(255))),\n                BlurRadius = random.NextDouble() * 5\n            });\n        }\n    }\n\n    private void UpdateParticles()\n    {\n        deadList.Clear();\n        foreach (Particle p in particles)\n        {\n            if (p.Position.Y < -p.Size || p.Position.X < -p.Size || p.Position.X > Width + p.Size || p.Position.Y > Height + p.Size)\n            {\n                deadList.Add(p);\n            }\n            else\n            {\n                p.Position.X += p.Velocity.X;\n                p.Position.Y += p.Velocity.Y;\n                p.Position.Z += p.Velocity.Z;\n            }\n        }\n\n        foreach (var deadParticle in deadList)\n        {\n            particles.Remove(deadParticle);\n        }\n    }\n\n    private void RenderParticles()\n    {\n        using (DrawingContext dc = drawingVisual.RenderOpen())\n        {\n            foreach (Particle p in particles)\n            {\n                dc.PushOpacity(p.Opacity);\n                dc.PushEffect(new BlurEffect { Radius = p.BlurRadius }, null);\n                dc.DrawEllipse(p.Brush, null, new Point(p.Position.X, p.Position.Y), p.Size, p.Size);\n                dc.Pop();\n                dc.Pop();\n            }\n        }\n    }\n}\n\npublic class VisualHost : FrameworkElement\n{\n    private Visual _visual;\n\n    public VisualHost(Visual visual)\n    {\n        _visual = visual;\n        AddVisualChild(_visual);\n    }\n\n    protected override Visual GetVisualChild(int index)\n    {\n        return _visual;\n    }\n\n    protected override int VisualChildrenCount => 1;\n}