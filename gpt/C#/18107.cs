public interface IProductRepository\n{\n    Task<IEnumerable<Product>> GetAllAsync();\n    Task<Product> GetByIdAsync(int id);\n    Task AddAsync(Product product);\n    Task UpdateAsync(Product product);\n    Task DeleteAsync(int id);\n}\n\npublic class ProductRepository : IProductRepository\n{\n    private readonly ApplicationDbContext _context;\n\n    public ProductRepository(ApplicationDbContext context)\n    {\n        _context = context;\n    }\n\n    public async Task<IEnumerable<Product>> GetAllAsync()\n    {\n        return await _context.Products.ToListAsync();\n    }\n\n    public async Task<Product> GetByIdAsync(int id)\n    {\n        return await _context.Products.FindAsync(id);\n    }\n\n    public async Task AddAsync(Product product)\n    {\n        _context.Products.Add(product);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task UpdateAsync(Product product)\n    {\n        _context.Products.Update(product);\n        await _context.SaveChangesAsync();\n    }\n\n    public async Task DeleteAsync(int id)\n    {\n        var product = await _context.Products.FindAsync(id);\n        if (product != null)\n        {\n            _context.Products.Remove(product);\n            await _context.SaveChangesAsync();\n        }\n    }\n}