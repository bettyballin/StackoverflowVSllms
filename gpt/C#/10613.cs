using System;\nusing System.Reflection;\nusing System.Runtime.InteropServices;\n\nnamespace ScriptingDictionaryExample\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Create an instance of the Scripting.Dictionary\n            Type dictType = Type.GetTypeFromProgID("Scripting.Dictionary");\n            if (dictType == null)\n            {\n                Console.WriteLine("Failed to get the type for Scripting.Dictionary");\n                return;\n            }\n\n            object dict = Activator.CreateInstance(dictType);\n            if (dict == null)\n            {\n                Console.WriteLine("Failed to create an instance of Scripting.Dictionary");\n                return;\n            }\n\n            // Add items to the dictionary\n            dictType.InvokeMember("Add", BindingFlags.InvokeMethod, null, dict, new object[] { "key1", "value1" });\n            dictType.InvokeMember("Add", BindingFlags.InvokeMethod, null, dict, new object[] { "key2", "value2" });\n\n            // Access an item from the dictionary\n            object value = dictType.InvokeMember("Item", BindingFlags.GetProperty, null, dict, new object[] { "key1" });\n            Console.WriteLine("key1: " + value);\n\n            // Check if a key exists\n            bool exists = (bool)dictType.InvokeMember("Exists", BindingFlags.InvokeMethod, null, dict, new object[] { "key2" });\n            Console.WriteLine("key2 exists: " + exists);\n\n            // Remove an item\n            dictType.InvokeMember("Remove", BindingFlags.InvokeMethod, null, dict, new object[] { "key1" });\n\n            // Clean up\n            Marshal.ReleaseComObject(dict);\n        }\n    }\n}