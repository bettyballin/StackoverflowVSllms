protected void Application_AuthenticateRequest(object sender, EventArgs e)\n{\n    HttpCookie authCookie = Context.Request.Cookies[FormsAuthentication.FormsCookieName];\n    if (authCookie != null)\n    {\n        try\n        {\n            FormsAuthenticationTicket ticket = FormsAuthentication.Decrypt(authCookie.Value);\n            if (ticket != null && !ticket.Expired)\n            {\n                string storedSessionId = ticket.UserData;\n                string currentSessionId = Session.SessionID;\n\n                // Validate that the stored session ID matches the current session ID\n                if (storedSessionId == currentSessionId)\n                {\n                    // Create the GenericPrincipal object\n                    string[] roles = new string[] {}; // You may want to fetch roles from a data store\n                    GenericPrincipal userPrincipal = new GenericPrincipal(new FormsIdentity(ticket), roles);\n                    Context.User = userPrincipal;\n                }\n                else\n                {\n                    // Session ID mismatch, treat as unauthenticated\n                    FormsAuthentication.SignOut();\n                }\n            }\n        }\n        catch\n        {\n            // Handle the exception (log it, etc.)\n            FormsAuthentication.SignOut();\n        }\n    }\n}