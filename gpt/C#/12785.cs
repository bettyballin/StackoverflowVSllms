public class MyViewModel : ViewModelBase, IDataErrorInfo\n{\n    private readonly MyModel _model;\n\n    public MyViewModel(MyModel model)\n    {\n        _model = model;\n    }\n\n    // Expose model properties as ViewModel properties\n    public string SomeProperty\n    {\n        get { return _model.SomeProperty; }\n        set\n        {\n            _model.SomeProperty = value;\n            OnPropertyChanged(nameof(SomeProperty));\n        }\n    }\n\n    // Implement IDataErrorInfo in ViewModel and delegate to the model\n    public string Error => (_model as IDataErrorInfo)?.Error;\n\n    public string this[string columnName] => (_model as IDataErrorInfo)?[columnName];\n\n    // Implement OnPropertyChanged method\n    protected void OnPropertyChanged(string propertyName)\n    {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n    }\n    \n    public event PropertyChangedEventHandler PropertyChanged;\n}\n\n// Example model implementing IDataErrorInfo\npublic class MyModel : IDataErrorInfo\n{\n    public string SomeProperty { get; set; }\n\n    public string Error => null; // Implement your logic here\n\n    public string this[string columnName]\n    {\n        get\n        {\n            if (columnName == nameof(SomeProperty))\n            {\n                // Validate SomeProperty and return error message if invalid\n                if (string.IsNullOrWhiteSpace(SomeProperty))\n                {\n                    return "SomeProperty cannot be empty.";\n                }\n            }\n            return null;\n        }\n    }\n}