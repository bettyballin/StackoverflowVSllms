using System;\nusing System.Collections.Concurrent;\nusing System.Threading.Tasks;\n\npublic class InMemoryQueue<T>\n{\n    private ConcurrentQueue<T> _queue = new ConcurrentQueue<T>();\n    private SemaphoreSlim _signal = new SemaphoreSlim(0);\n\n    public void Enqueue(T item)\n    {\n        _queue.Enqueue(item);\n        _signal.Release();\n    }\n\n    public async Task<T> DequeueAsync()\n    {\n        await _signal.WaitAsync();\n        _queue.TryDequeue(out var item);\n        return item;\n    }\n}\n\npublic class Program\n{\n    public static async Task Main(string[] args)\n    {\n        var queue = new InMemoryQueue<string>();\n\n        // Producer\n        Task.Run(() => {\n            for (int i = 0; i < 10; i++)\n            {\n                queue.Enqueue($"Message {i}");\n                Console.WriteLine($"Enqueued: Message {i}");\n                Task.Delay(500).Wait();\n            }\n        });\n\n        // Consumer\n        Task.Run(async () => {\n            for (int i = 0; i < 10; i++)\n            {\n                var message = await queue.DequeueAsync();\n                Console.WriteLine($"Dequeued: {message}");\n            }\n        });\n\n        // Prevent application from exiting immediately\n        Console.ReadLine();\n    }\n}