using System;\nusing System.Security.Cryptography;\nusing System.Text;\nusing Org.BouncyCastle.Crypto;\nusing Org.BouncyCastle.Crypto.Parameters;\nusing Org.BouncyCastle.OpenSsl;\nusing Org.BouncyCastle.Security;\n\npublic class PemReaderExample\n{\n    public static RSACryptoServiceProvider GetRsaCryptoServiceProvider(string pem)\n    {\n        AsymmetricCipherKeyPair keyPair;\n\n        using (var reader = new StringReader(pem))\n        {\n            var pemReader = new PemReader(reader);\n            keyPair = (AsymmetricCipherKeyPair)pemReader.ReadObject();\n        }\n\n        var rsaPrivateKey = (RsaPrivateCrtKeyParameters)keyPair.Private;\n        var rsaParams = new RSAParameters\n        {\n            Modulus = rsaPrivateKey.Modulus.ToByteArrayUnsigned(),\n            Exponent = rsaPrivateKey.PublicExponent.ToByteArrayUnsigned(),\n            D = rsaPrivateKey.Exponent.ToByteArrayUnsigned(),\n            P = rsaPrivateKey.P.ToByteArrayUnsigned(),\n            Q = rsaPrivateKey.Q.ToByteArrayUnsigned(),\n            DP = rsaPrivateKey.DP.ToByteArrayUnsigned(),\n            DQ = rsaPrivateKey.DQ.ToByteArrayUnsigned(),\n            InverseQ = rsaPrivateKey.QInv.ToByteArrayUnsigned()\n        };\n\n        var rsa = new RSACryptoServiceProvider();\n        rsa.ImportParameters(rsaParams);\n\n        return rsa;\n    }\n}