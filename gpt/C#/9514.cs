// Assume you have these interfaces and classes\npublic interface IServiceA\n{\n    string GetData();\n}\n\npublic class ServiceAProxy : IServiceA\n{\n    public string GetData() => "Data from Service A";\n}\n\npublic class ServiceB\n{\n    private readonly IServiceA _serviceA;\n\n    public ServiceB(IServiceA serviceA)\n    {\n        _serviceA = serviceA;\n    }\n\n    public string GetProcessedData()\n    {\n        var data = _serviceA.GetData();\n        return $"Processed {data}";\n    }\n}\n\n// Unit Test using Moq\n[TestClass]\npublic class ServiceBTests\n{\n    [TestMethod]\n    public void GetProcessedData_ShouldReturnProcessedData()\n    {\n        // Arrange\n        var mockServiceA = new Mock<IServiceA>();\n        mockServiceA.Setup(sa => sa.GetData()).Returns("Mock Data from Service A");\n        \n        var serviceB = new ServiceB(mockServiceA.Object);\n\n        // Act\n        var result = serviceB.GetProcessedData();\n\n        // Assert\n        Assert.AreEqual("Processed Mock Data from Service A", result);\n    }\n}