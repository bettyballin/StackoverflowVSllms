using System;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\n\npublic class AsyncSocketServer\n{\n    private const int BufferSize = 1024;\n    private Socket serverSocket;\n    private byte[] buffer = new byte[BufferSize];\n    private int bufferOffset = 0;\n\n    public void StartServer(string ipAddress, int port)\n    {\n        IPEndPoint localEndPoint = new IPEndPoint(IPAddress.Parse(ipAddress), port);\n        serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n\n        serverSocket.Bind(localEndPoint);\n        serverSocket.Listen(10);\n        serverSocket.BeginAccept(new AsyncCallback(AcceptCallback), null);\n    }\n\n    private void AcceptCallback(IAsyncResult ar)\n    {\n        Socket clientSocket = serverSocket.EndAccept(ar);\n        clientSocket.BeginReceive(buffer, bufferOffset, BufferSize - bufferOffset, SocketFlags.None, new AsyncCallback(ReceiveCallback), clientSocket);\n        serverSocket.BeginAccept(new AsyncCallback(AcceptCallback), null);\n    }\n\n    private void ReceiveCallback(IAsyncResult ar)\n    {\n        Socket clientSocket = (Socket)ar.AsyncState;\n        int bytesRead = clientSocket.EndReceive(ar);\n\n        if (bytesRead > 0)\n        {\n            bufferOffset += bytesRead;\n            ProcessBuffer(clientSocket);\n        }\n        else\n        {\n            clientSocket.Close();\n        }\n    }\n\n    private void ProcessBuffer(Socket clientSocket)\n    {\n        int offset = 0;\n\n        while (offset < bufferOffset)\n        {\n            if (bufferOffset - offset < 4)\n            {\n                // Not enough data to read the payload size\n                break;\n            }\n\n            int payloadSize = BitConverter.ToInt32(buffer, offset);\n            if (bufferOffset - offset < payloadSize + 4)\n            {\n                // Not enough data to read the complete payload\n                break;\n            }\n\n            byte[] payload = new byte[payloadSize];\n            Buffer.BlockCopy(buffer, offset + 4, payload, 0, payloadSize);\n            HandlePayload(payload);\n\n            offset += payloadSize + 4;\n        }\n\n        if (offset < bufferOffset)\n        {\n            // Move remaining data to the beginning of the buffer\n            Buffer.BlockCopy(buffer, offset, buffer, 0, bufferOffset - offset);\n            bufferOffset -= offset;\n        }\n        else\n        {\n            bufferOffset = 0;\n        }\n\n        clientSocket.BeginReceive(buffer, bufferOffset, BufferSize - bufferOffset, SocketFlags.None, new AsyncCallback(ReceiveCallback), clientSocket);\n    }\n\n    private void HandlePayload(byte[] payload)\n    {\n        string message = Encoding.ASCII.GetString(payload);\n        Console.WriteLine("Received: " + message);\n    }\n\n    public static void Main(string[] args)\n    {\n        AsyncSocketServer server = new AsyncSocketServer();\n        server.StartServer("127.0.0.1", 11000);\n        Console.WriteLine("Server started. Press ENTER to exit.");\n        Console.ReadLine();\n    }\n}