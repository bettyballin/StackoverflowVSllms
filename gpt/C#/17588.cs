using System;\nusing System.Linq.Expressions;\n\npublic class TestA\n{\n    public bool B { get; set; }\n    public bool C { get; set; }\n}\n\npublic class RuleCompiler\n{\n    public static Func<TestA, bool> CompileRule(string rule)\n    {\n        // For simplicity, assume the rule is always "IF TestA.B AND TestA.C THEN Return True"\n        // In a full implementation, you would parse the rule string into its components\n\n        // Parameter expression representing the input object\n        var param = Expression.Parameter(typeof(TestA), "testA");\n\n        // Access the properties B and C\n        var propB = Expression.Property(param, "B");\n        var propC = Expression.Property(param, "C");\n\n        // Create the AND expression\n        var andExpression = Expression.AndAlso(propB, propC);\n\n        // Compile the expression into a lambda function\n        var lambda = Expression.Lambda<Func<TestA, bool>>(andExpression, param);\n\n        return lambda.Compile();\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var ruleFunc = RuleCompiler.CompileRule("IF TestA.B AND TestA.C THEN Return True");\n\n        var testA1 = new TestA { B = true, C = true };\n        var testA2 = new TestA { B = true, C = false };\n\n        Console.WriteLine(ruleFunc(testA1)); // Output: True\n        Console.WriteLine(ruleFunc(testA2)); // Output: False\n    }\n}