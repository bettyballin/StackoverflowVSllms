using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace Agnus.Cipher\n{\n    public class RSASender\n    {\n        private RSACryptoServiceProvider rsaProvider;\n\n        public RSASender()\n        {\n            rsaProvider = new RSACryptoServiceProvider();\n        }\n\n        public string GetPublicKey()\n        {\n            return rsaProvider.ToXmlString(false);\n        }\n\n        public byte[] Encrypt(string plainText, string receiverPublicKey)\n        {\n            byte[] plainBytes = Encoding.Unicode.GetBytes(plainText);\n            rsaProvider.FromXmlString(receiverPublicKey);\n            return rsaProvider.Encrypt(plainBytes, true);\n        }\n\n        public byte[] SignData(byte[] dataToSign)\n        {\n            using (SHA256 sha256 = SHA256.Create())\n            {\n                byte[] hash = sha256.ComputeHash(dataToSign);\n                return rsaProvider.SignHash(hash, CryptoConfig.MapNameToOID("SHA256"));\n            }\n        }\n    }\n\n    public class RSAReceiver\n    {\n        private RSACryptoServiceProvider rsaProvider;\n\n        public RSAReceiver()\n        {\n            rsaProvider = new RSACryptoServiceProvider();\n        }\n\n        public string GetPublicKey()\n        {\n            return rsaProvider.ToXmlString(false);\n        }\n\n        public void SetPrivateKey(string privateKey)\n        {\n            rsaProvider.FromXmlString(privateKey);\n        }\n\n        public string Decrypt(byte[] encryptedData)\n        {\n            byte[] decryptedBytes = rsaProvider.Decrypt(encryptedData, true);\n            return Encoding.Unicode.GetString(decryptedBytes);\n        }\n\n        public bool VerifySignature(byte[] dataToVerify, byte[] signature, string senderPublicKey)\n        {\n            rsaProvider.FromXmlString(senderPublicKey);\n            using (SHA256 sha256 = SHA256.Create())\n            {\n                byte[] hash = sha256.ComputeHash(dataToVerify);\n                return rsaProvider.VerifyHash(hash, CryptoConfig.MapNameToOID("SHA256"), signature);\n            }\n        }\n    }\n}