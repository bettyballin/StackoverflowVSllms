using System;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\n\npublic class Program\n{\n    [StructLayout(LayoutKind.Sequential)]\n    public struct STARTUPINFO\n    {\n        public int cb;\n        public string lpReserved;\n        public string lpDesktop;\n        public string lpTitle;\n        public int dwX;\n        public int dwY;\n        public int dwXSize;\n        public int dwYSize;\n        public int dwXCountChars;\n        public int dwYCountChars;\n        public int dwFillAttribute;\n        public int dwFlags;\n        public short wShowWindow;\n        public short cbReserved2;\n        public IntPtr lpReserved2;\n        public IntPtr hStdInput;\n        public IntPtr hStdOutput;\n        public IntPtr hStdError;\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    public struct PROCESS_INFORMATION\n    {\n        public IntPtr hProcess;\n        public IntPtr hThread;\n        public int dwProcessId;\n        public int dwThreadId;\n    }\n\n    [DllImport("kernel32.dll", SetLastError = true)]\n    public static extern bool CreateProcess(\n        string lpApplicationName,\n        string lpCommandLine,\n        IntPtr lpProcessAttributes,\n        IntPtr lpThreadAttributes,\n        bool bInheritHandles,\n        uint dwCreationFlags,\n        IntPtr lpEnvironment,\n        string lpCurrentDirectory,\n        ref STARTUPINFO lpStartupInfo,\n        out PROCESS_INFORMATION lpProcessInformation);\n\n    [DllImport("kernel32.dll", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    public static extern bool CloseHandle(IntPtr hObject);\n\n    public static void Main(string[] args)\n    {\n        STARTUPINFO si = new STARTUPINFO();\n        si.cb = Marshal.SizeOf(si);\n        si.lpDesktop = @"Winsta0\Winlogon";  // Set the desktop\n\n        PROCESS_INFORMATION pi = new PROCESS_INFORMATION();\n\n        string applicationPath = "C:\\Path\\To\\Your\\Application.exe";\n\n        bool success = CreateProcess(\n            null,\n            applicationPath,\n            IntPtr.Zero,\n            IntPtr.Zero,\n            false,\n            0,\n            IntPtr.Zero,\n            null,\n            ref si,\n            out pi);\n\n        if (success)\n        {\n            Console.WriteLine("Process created successfully.");\n            CloseHandle(pi.hProcess);\n            CloseHandle(pi.hThread);\n        }\n        else\n        {\n            Console.WriteLine("Process creation failed. Error: " + Marshal.GetLastWin32Error());\n        }\n    }\n}