using System;\nusing System.IO;\nusing System.Runtime.InteropServices;\nusing Microsoft.Win32.SafeHandles;\n\nclass Program\n{\n    // Constants for CreateFile\n    private const uint GENERIC_READ = 0x80000000;\n    private const uint GENERIC_WRITE = 0x40000000;\n    private const uint OPEN_EXISTING = 3;\n\n    // P/Invoke declarations\n    [DllImport("kernel32.dll", SetLastError = true)]\n    private static extern SafeFileHandle CreateFile(\n        string lpFileName,\n        uint dwDesiredAccess,\n        uint dwShareMode,\n        IntPtr lpSecurityAttributes,\n        uint dwCreationDisposition,\n        uint dwFlagsAndAttributes,\n        IntPtr hTemplateFile);\n\n    [DllImport("kernel32.dll", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    private static extern bool ReadFile(\n        SafeFileHandle hFile,\n        byte[] lpBuffer,\n        uint nNumberOfBytesToRead,\n        out uint lpNumberOfBytesRead,\n        IntPtr lpOverlapped);\n\n    [DllImport("kernel32.dll", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    private static extern bool WriteFile(\n        SafeFileHandle hFile,\n        byte[] lpBuffer,\n        uint nNumberOfBytesToWrite,\n        out uint lpNumberOfBytesWritten,\n        IntPtr lpOverlapped);\n\n    [DllImport("kernel32.dll", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    private static extern bool CloseHandle(IntPtr hObject);\n\n    static void Main(string[] args)\n    {\n        string filePath = "example.txt";\n        string adsName = "example.txt:stream";\n\n        // Write to ADS\n        WriteToADS(adsName, "This is a test data for ADS.");\n\n        // Read from ADS\n        string adsData = ReadFromADS(adsName);\n        Console.WriteLine($"Read from ADS: {adsData}");\n    }\n\n    static void WriteToADS(string adsPath, string data)\n    {\n        SafeFileHandle handle = CreateFile(\n            adsPath,\n            GENERIC_WRITE,\n            0,\n            IntPtr.Zero,\n            OPEN_EXISTING,\n            0,\n            IntPtr.Zero);\n\n        if (handle.IsInvalid)\n        {\n            throw new IOException("Failed to open ADS.", Marshal.GetLastWin32Error());\n        }\n\n        byte[] bytes = System.Text.Encoding.UTF8.GetBytes(data);\n        if (!WriteFile(handle, bytes, (uint)bytes.Length, out uint bytesWritten, IntPtr.Zero) || bytes.Length != bytesWritten)\n        {\n            throw new IOException("Failed to write to ADS.", Marshal.GetLastWin32Error());\n        }\n\n        handle.Close();\n    }\n\n    static string ReadFromADS(string adsPath)\n    {\n        SafeFileHandle handle = CreateFile(\n            adsPath,\n            GENERIC_READ,\n            0,\n            IntPtr.Zero,\n            OPEN_EXISTING,\n            0,\n            IntPtr.Zero);\n\n        if (handle.IsInvalid)\n        {\n            throw new IOException("Failed to open ADS.", Marshal.GetLastWin32Error());\n        }\n\n        byte[] buffer = new byte[1024];\n        if (!ReadFile(handle, buffer, (uint)buffer.Length, out uint bytesRead, IntPtr.Zero))\n        {\n            throw new IOException("Failed to read from ADS.", Marshal.GetLastWin32Error());\n        }\n\n        handle.Close();\n        return System.Text.Encoding.UTF8.GetString(buffer, 0, (int)bytesRead);\n    }\n}