using System;\nusing System.Collections;\nusing System.Reflection;\n\nclass MyClass\n{\n    private object _recordSet;\n    public object RecordSet\n    {\n        get { return _recordSet; }\n        set { _recordSet = value; }\n    }\n\n    public string Draw()\n    {\n        if (_recordSet == null)\n        {\n            throw new ArgumentNullException(nameof(_recordSet));\n        }\n\n        Type listType = _recordSet.GetType();\n        PropertyInfo countProperty = listType.GetProperty("Count");\n        MethodInfo getItemMethod = listType.GetMethod("get_Item");\n\n        if (countProperty == null || getItemMethod == null)\n        {\n            throw new InvalidOperationException("The provided object is not a List<T>.");\n        }\n\n        int recordCount = (int)countProperty.GetValue(_recordSet);\n        for (int i = 0; i < recordCount; i++)\n        {\n            object item = getItemMethod.Invoke(_recordSet, new object[] { i });\n            PropertyInfo nameProperty = item.GetType().GetProperty("Name");\n\n            if (nameProperty != null)\n            {\n                string name = (string)nameProperty.GetValue(item);\n                Console.WriteLine(name);\n            }\n        }\n\n        return "Draw complete";\n    }\n}