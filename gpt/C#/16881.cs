using System;\nusing System.Net;\n\npublic class CIDR\n{\n    public IPAddress Address { get; private set; }\n    public int PrefixLength { get; private set; }\n\n    public static CIDR Parse(string cidr)\n    {\n        if (string.IsNullOrEmpty(cidr))\n        {\n            throw new ArgumentException("CIDR notation cannot be null or empty");\n        }\n\n        string[] parts = cidr.Split('/');\n        if (parts.Length != 2)\n        {\n            throw new FormatException("Invalid CIDR notation");\n        }\n\n        if (!IPAddress.TryParse(parts[0], out IPAddress address))\n        {\n            throw new FormatException("Invalid IP address in CIDR notation");\n        }\n\n        if (!int.TryParse(parts[1], out int prefixLength))\n        {\n            throw new FormatException("Invalid prefix length in CIDR notation");\n        }\n\n        if (address.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork) // IPv4\n        {\n            if (prefixLength < 0 || prefixLength > 32)\n            {\n                throw new ArgumentOutOfRangeException(nameof(prefixLength), "Prefix length for IPv4 must be between 0 and 32");\n            }\n        }\n        else if (address.AddressFamily == System.Net.Sockets.AddressFamily.InterNetworkV6) // IPv6\n        {\n            if (prefixLength < 0 || prefixLength > 128)\n            {\n                throw new ArgumentOutOfRangeException(nameof(prefixLength), "Prefix length for IPv6 must be between 0 and 128");\n            }\n        }\n        else\n        {\n            throw new NotSupportedException("Only IPv4 and IPv6 addresses are supported");\n        }\n\n        return new CIDR\n        {\n            Address = address,\n            PrefixLength = prefixLength\n        };\n    }\n\n    public override string ToString()\n    {\n        return $"{Address}/{PrefixLength}";\n    }\n}