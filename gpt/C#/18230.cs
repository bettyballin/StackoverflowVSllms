using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Threading;\n\npublic class TaskManager\n{\n    private readonly Dictionary<string, BackgroundWorker> _tasks = new Dictionary<string, BackgroundWorker>();\n    private readonly object _lock = new object();\n\n    public bool IsTaskRunning(string taskName)\n    {\n        lock (_lock)\n        {\n            return _tasks.ContainsKey(taskName) && _tasks[taskName].IsBusy;\n        }\n    }\n\n    public void StartTask(string taskName, DoWorkEventHandler workHandler, RunWorkerCompletedEventHandler completedHandler = null)\n    {\n        lock (_lock)\n        {\n            if (IsTaskRunning(taskName))\n            {\n                throw new InvalidOperationException($"Task '{taskName}' is already running.");\n            }\n\n            var worker = new BackgroundWorker();\n            worker.DoWork += workHandler;\n            if (completedHandler != null)\n            {\n                worker.RunWorkerCompleted += completedHandler;\n            }\n\n            _tasks[taskName] = worker;\n            worker.RunWorkerAsync();\n        }\n    }\n\n    public void StopTask(string taskName)\n    {\n        lock (_lock)\n        {\n            if (_tasks.ContainsKey(taskName) && _tasks[taskName].IsBusy)\n            {\n                _tasks[taskName].CancelAsync();\n            }\n        }\n    }\n}\n\n// Usage example\npublic class MainForm : Form\n{\n    private TaskManager _taskManager = new TaskManager();\n\n    private void StartButton_Click(object sender, EventArgs e)\n    {\n        try\n        {\n            _taskManager.StartTask("Task1", Task1_DoWork, Task1_Completed);\n        }\n        catch (InvalidOperationException ex)\n        {\n            MessageBox.Show(ex.Message);\n        }\n    }\n\n    private void StopButton_Click(object sender, EventArgs e)\n    {\n        _taskManager.StopTask("Task1");\n    }\n\n    private void Task1_DoWork(object sender, DoWorkEventArgs e)\n    {\n        // Perform the task here\n        Thread.Sleep(5000); // Simulate long-running task\n    }\n\n    private void Task1_Completed(object sender, RunWorkerCompletedEventArgs e)\n    {\n        MessageBox.Show("Task1 completed.");\n    }\n}