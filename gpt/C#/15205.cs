public class TokenValidationMiddleware\n    {\n        private readonly RequestDelegate _next;\n\n        public TokenValidationMiddleware(RequestDelegate next)\n        {\n            _next = next;\n        }\n\n        public async Task Invoke(HttpContext context)\n        {\n            if (!context.Request.Headers.TryGetValue("Authorization", out var authorizationHeader))\n            {\n                context.Response.StatusCode = 401; // Unauthorized\n                await context.Response.WriteAsync("Authorization header missing");\n                return;\n            }\n\n            var token = authorizationHeader.ToString().Replace("Bearer ", string.Empty);\n\n            if (!IsValidToken(token))\n            {\n                context.Response.StatusCode = 401; // Unauthorized\n                await context.Response.WriteAsync("Invalid token");\n                return;\n            }\n\n            await _next(context);\n        }\n\n        private bool IsValidToken(string token)\n        {\n            // Implement your token validation logic here\n            return token == "your_valid_token";\n        }\n    }\n\n    public class Startup\n    {\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n            app.UseMiddleware<TokenValidationMiddleware>();\n\n            app.UseMvc();\n        }\n    }