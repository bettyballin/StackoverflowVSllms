using System;\nusing System.IO;\nusing System.Web;\n\npublic class CaptureHtmlModule : IHttpModule\n{\n    public void Init(HttpApplication context)\n    {\n        context.BeginRequest += new EventHandler(OnBeginRequest);\n        context.EndRequest += new EventHandler(OnEndRequest);\n    }\n\n    private void OnBeginRequest(object sender, EventArgs e)\n    {\n        HttpApplication application = (HttpApplication)sender;\n        application.Response.Filter = new CaptureStream(application.Response.Filter);\n    }\n\n    private void OnEndRequest(object sender, EventArgs e)\n    {\n        HttpApplication application = (HttpApplication)sender;\n        CaptureStream filter = application.Response.Filter as CaptureStream;\n        if (filter != null)\n        {\n            string html = filter.GetCapturedHtml();\n            // Log or process the captured HTML\n            LogHtml(html);\n        }\n    }\n\n    public void Dispose() { }\n\n    private void LogHtml(string html)\n    {\n        // Implement your logging logic here\n        // Example: File.AppendAllText(HttpContext.Current.Server.MapPath("~/CapturedHtml.log"), html);\n    }\n\n    private class CaptureStream : Stream\n    {\n        private Stream _responseStream;\n        private MemoryStream _captureStream;\n\n        public CaptureStream(Stream responseStream)\n        {\n            _responseStream = responseStream;\n            _captureStream = new MemoryStream();\n        }\n\n        public string GetCapturedHtml()\n        {\n            _captureStream.Position = 0;\n            using (StreamReader reader = new StreamReader(_captureStream))\n            {\n                return reader.ReadToEnd();\n            }\n        }\n\n        public override bool CanRead => _responseStream.CanRead;\n        public override bool CanSeek => _responseStream.CanSeek;\n        public override bool CanWrite => _responseStream.CanWrite;\n        public override long Length => _responseStream.Length;\n\n        public override long Position\n        {\n            get => _responseStream.Position;\n            set => _responseStream.Position = value;\n        }\n\n        public override void Flush()\n        {\n            _responseStream.Flush();\n        }\n\n        public override int Read(byte[] buffer, int offset, int count)\n        {\n            return _responseStream.Read(buffer, offset, count);\n        }\n\n        public override long Seek(long offset, SeekOrigin origin)\n        {\n            return _responseStream.Seek(offset, origin);\n        }\n\n        public override void SetLength(long value)\n        {\n            _responseStream.SetLength(value);\n        }\n\n        public override void Write(byte[] buffer, int offset, int count)\n        {\n            _captureStream.Write(buffer, offset, count);\n            _responseStream.Write(buffer, offset, count);\n        }\n    }\n}