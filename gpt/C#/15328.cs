using Microsoft.DirectX.Direct3D;\n\npublic bool CheckDeviceCapabilities()\n{\n    try\n    {\n        // Create a Direct3D object\n        Direct3D direct3D = new Direct3D();\n\n        // Get the capabilities of the default adapter\n        Caps caps = direct3D.GetDeviceCaps(0, DeviceType.Hardware);\n\n        // Check for hardware transform and lighting support\n        bool supportsHardwareTnL = caps.DeviceCaps.SupportsHardwareTransformAndLight;\n        \n        // Check for vertex shader support\n        bool supportsVertexShader = caps.VertexShaderVersion >= new Version(1, 1);\n        \n        // Check for pixel shader support\n        bool supportsPixelShader = caps.PixelShaderVersion >= new Version(1, 1);\n\n        // Check for minimal texture support\n        bool supportsTextures = caps.TextureCaps.SupportsTexture && caps.MaxTextureWidth >= 256 && caps.MaxTextureHeight >= 256;\n\n        // Additional checks can be added here as needed\n        \n        return supportsHardwareTnL && supportsVertexShader && supportsPixelShader && supportsTextures;\n    }\n    catch (Exception ex)\n    {\n        // Handle exceptions appropriately\n        Console.WriteLine("Error checking device capabilities: " + ex.Message);\n        return false;\n    }\n}