private bool CanDrop(DragEventArgs e)\n{\n    Point point = tree.PointToClient(new Point(e.X, e.Y));\n    TreeNode target = tree.GetNodeAt(point);\n\n    if (target == null || !CanWrite(target))\n    {\n        return false;\n    }\n\n    if (IsInternalApplicationDrop(e))\n    {\n        return true;\n    }\n\n    if (IsNodeFromDifferentSource(tree.SelectedNode) && !TargetExistsInNode(tree.SelectedNode, target))\n    {\n        return IsValidDropEffect(e.Effect);\n    }\n\n    return false;\n}\n\nprivate bool IsInternalApplicationDrop(DragEventArgs e)\n{\n    var dataInfo = e.Data.GetData(typeof(DataInfoObject)) as DataInfoObject;\n    if (dataInfo == null)\n    {\n        return false;\n    }\n\n    var data = dataInfo.GetData(typeof(DragDataCollection)) as DragDataCollection;\n    return data != null;\n}\n\nprivate bool IsNodeFromDifferentSource(TreeNode node)\n{\n    return node.Tag.GetType() != typeof(TreeRow);\n}\n\nprivate bool IsValidDropEffect(DragDropEffects effect)\n{\n    return effect == DragDropEffects.Copy || effect == DragDropEffects.Move;\n}\n\nprivate bool CanWrite(TreeNode node)\n{\n    // Your logic to check user permissions\n    return true; // Placeholder\n}\n\nprivate bool TargetExistsInNode(TreeNode source, TreeNode target)\n{\n    // Your logic to check if the target exists in the node's children\n    return false; // Placeholder\n}