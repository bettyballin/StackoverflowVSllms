using System;\nusing System.Collections.Generic;\n\npublic class User\n{\n    public string Username { get; set; }\n    public string Role { get; set; }\n    public string BranchID { get; set; }\n    public string Country { get; set; }\n}\n\npublic class Account\n{\n    public string AccountID { get; set; }\n    public string BranchID { get; set; }\n    public string Country { get; set; }\n}\n\npublic class AccessControlService\n{\n    private Dictionary<string, List<string>> rolePermissions = new Dictionary<string, List<string>>();\n\n    public AccessControlService()\n    {\n        // Define role permissions\n        rolePermissions["BranchManager"] = new List<string> { "ViewAccount", "EditAccount" };\n        rolePermissions["Teller"] = new List<string> { "ViewAccount" };\n        rolePermissions["Auditor"] = new List<string> { "ViewAccount" };\n    }\n\n    public bool HasAccess(User user, Account account, string action)\n    {\n        if (!rolePermissions.ContainsKey(user.Role))\n            return false;\n\n        bool hasPermission = rolePermissions[user.Role].Contains(action);\n        bool sameBranch = user.BranchID == account.BranchID;\n        bool sameCountry = user.Country == account.Country;\n\n        return hasPermission && sameBranch && sameCountry;\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var user = new User { Username = "john.doe", Role = "Teller", BranchID = "123", Country = "USA" };\n        var account = new Account { AccountID = "acc001", BranchID = "123", Country = "USA" };\n\n        var accessControlService = new AccessControlService();\n\n        bool canView = accessControlService.HasAccess(user, account, "ViewAccount");\n        bool canEdit = accessControlService.HasAccess(user, account, "EditAccount");\n\n        Console.WriteLine($"User {user.Username} can view account: {canView}");\n        Console.WriteLine($"User {user.Username} can edit account: {canEdit}");\n    }\n}