using System;\nusing System.ComponentModel;\nusing System.Windows.Forms;\n\npublic class MyDataObject : INotifyPropertyChanged\n{\n    private string _myProperty;\n\n    public string MyProperty\n    {\n        get { return _myProperty; }\n        set\n        {\n            if (_myProperty != value)\n            {\n                _myProperty = value;\n                OnPropertyChanged("MyProperty");\n            }\n        }\n    }\n\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    protected void OnPropertyChanged(string propertyName)\n    {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n    }\n\n    public string ValidateMyProperty()\n    {\n        // Perform validation and return error message if any\n        if (string.IsNullOrWhiteSpace(MyProperty))\n        {\n            return "MyProperty cannot be empty.";\n        }\n        return null;\n    }\n}\n\npublic class MyForm : Form\n{\n    private TextBox myTextBox;\n    private ErrorProvider errorProvider;\n    private MyDataObject myDataObject;\n\n    public MyForm()\n    {\n        myTextBox = new TextBox { Location = new System.Drawing.Point(10, 10) };\n        errorProvider = new ErrorProvider();\n        myDataObject = new MyDataObject();\n\n        myTextBox.DataBindings.Add("Text", myDataObject, "MyProperty", false, DataSourceUpdateMode.OnPropertyChanged);\n        myDataObject.PropertyChanged += MyDataObject_PropertyChanged;\n\n        this.Controls.Add(myTextBox);\n    }\n\n    private void MyDataObject_PropertyChanged(object sender, PropertyChangedEventArgs e)\n    {\n        if (e.PropertyName == "MyProperty")\n        {\n            string errorMessage = myDataObject.ValidateMyProperty();\n            errorProvider.SetError(myTextBox, errorMessage);\n        }\n    }\n}