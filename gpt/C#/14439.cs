using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class EncryptionHelper\n{\n    private static readonly string EncryptionKey = "your-encryption-key"; // Use a robust and unique key\n\n    public static string EncryptString(string plainText)\n    {\n        byte[] keyBytes;\n        byte[] ivBytes;\n        using (var key = new Rfc2898DeriveBytes(EncryptionKey, Encoding.UTF8.GetBytes(EncryptionKey)))\n        {\n            keyBytes = key.GetBytes(32); // AES-256 key\n            ivBytes = key.GetBytes(16);  // AES block size\n        }\n\n        using (var aes = Aes.Create())\n        {\n            aes.Key = keyBytes;\n            aes.IV = ivBytes;\n            aes.Mode = CipherMode.CBC;\n            aes.Padding = PaddingMode.PKCS7;\n\n            using (var encryptor = aes.CreateEncryptor(aes.Key, aes.IV))\n            {\n                using (var ms = new MemoryStream())\n                {\n                    using (var cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))\n                    {\n                        using (var sw = new StreamWriter(cs))\n                        {\n                            sw.Write(plainText);\n                        }\n                        return Convert.ToBase64String(ms.ToArray());\n                    }\n                }\n            }\n        }\n    }\n\n    public static string DecryptString(string cipherText)\n    {\n        byte[] keyBytes;\n        byte[] ivBytes;\n        using (var key = new Rfc2898DeriveBytes(EncryptionKey, Encoding.UTF8.GetBytes(EncryptionKey)))\n        {\n            keyBytes = key.GetBytes(32); // AES-256 key\n            ivBytes = key.GetBytes(16);  // AES block size\n        }\n\n        using (var aes = Aes.Create())\n        {\n            aes.Key = keyBytes;\n            aes.IV = ivBytes;\n            aes.Mode = CipherMode.CBC;\n            aes.Padding = PaddingMode.PKCS7;\n\n            using (var decryptor = aes.CreateDecryptor(aes.Key, aes.IV))\n            {\n                byte[] cipherBytes = Convert.FromBase64String(cipherText);\n                using (var ms = new MemoryStream(cipherBytes))\n                {\n                    using (var cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read))\n                    {\n                        using (var sr = new StreamReader(cs))\n                        {\n                            return sr.ReadToEnd();\n                        }\n                    }\n                }\n            }\n        }\n    }\n}