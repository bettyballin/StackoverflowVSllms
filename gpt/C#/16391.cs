public static class GridHelpers\n{\n    public static readonly DependencyProperty RowDefinitionsProperty =\n        DependencyProperty.RegisterAttached(\n            "RowDefinitions", \n            typeof(string), \n            typeof(GridHelpers), \n            new PropertyMetadata(null, OnRowDefinitionsChanged));\n\n    public static string GetRowDefinitions(DependencyObject obj)\n    {\n        return (string)obj.GetValue(RowDefinitionsProperty);\n    }\n\n    public static void SetRowDefinitions(DependencyObject obj, string value)\n    {\n        obj.SetValue(RowDefinitionsProperty, value);\n    }\n\n    private static void OnRowDefinitionsChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\n    {\n        if (d is Grid grid)\n        {\n            grid.RowDefinitions.Clear();\n            string[] rowDefinitions = ((string)e.NewValue).Split(',');\n\n            foreach (var rowDefinition in rowDefinitions)\n            {\n                grid.RowDefinitions.Add(new RowDefinition { Height = GridLengthConverter.ConvertFromString(rowDefinition) });\n            }\n        }\n    }\n}\n\npublic class GridLengthConverter : TypeConverter\n{\n    public static GridLength ConvertFromString(string value)\n    {\n        var converter = TypeDescriptor.GetConverter(typeof(GridLength));\n        return (GridLength)converter.ConvertFromString(value);\n    }\n}