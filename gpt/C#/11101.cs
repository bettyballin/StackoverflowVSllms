using System;\nusing System.Runtime.InteropServices;\n\n[StructLayout(LayoutKind.Sequential, Pack = 1)]\npublic class CARDIDTYPE {\n    public UInt32 JobId;\n    public UInt32 CardNum;\n    public IntPtr hPrinter;\n}\n\n[StructLayout(LayoutKind.Sequential)]\npublic class CARD_INFO_1 {\n    public bool bActive;\n    public bool bSuccess;\n}\n\n[StructLayout(LayoutKind.Sequential)]\npublic class CARD_INFO_2 {\n    public UInt32 dwCopiesPrinted;\n    public UInt32 dwRemakeAttempts;\n    public SYSTEMTIME TimeCompleted;\n}\n\n[StructLayout(LayoutKind.Sequential)]\npublic struct SYSTEMTIME {\n    public ushort wYear;\n    public ushort wMonth;\n    public ushort wDayOfWeek;\n    public ushort wDay;\n    public ushort wHour;\n    public ushort wMinute;\n    public ushort wSecond;\n    public ushort wMilliseconds;\n}\n\nclass NativeMethods {\n    [DllImport("ICE_API.DLL", CharSet = CharSet.Auto, CallingConvention = CallingConvention.Winapi, SetLastError = true)]\n    public static extern bool GetCardId(HandleRef hDC, [Out] CARDIDTYPE pCardId);\n\n    [DllImport("ICE_API.DLL", CharSet = CharSet.Auto, CallingConvention = CallingConvention.Winapi, SetLastError = true)]\n    public static extern bool GetCardStatus(CARDIDTYPE CardId, UInt32 level, IntPtr pData, UInt32 cbBuf, out UInt32 pcbNeeded);\n}\n\nclass Program {\n    static void Main() {\n        // Assuming you have a valid HDC handle\n        IntPtr hdc = IntPtr.Zero;\n        var cardId = new CARDIDTYPE();\n        var cardIdHandle = new HandleRef(null, hdc);\n\n        if (NativeMethods.GetCardId(cardIdHandle, cardId)) {\n            Console.WriteLine("GetCardId succeeded");\n\n            uint needed;\n            uint level = 1; // Assuming you want CARD_INFO_1\n            int sizeOfLevel1 = Marshal.SizeOf(typeof(CARD_INFO_1));\n            IntPtr pData = Marshal.AllocHGlobal(sizeOfLevel1);\n\n            try {\n                if (NativeMethods.GetCardStatus(cardId, level, pData, (uint)sizeOfLevel1, out needed)) {\n                    var cardInfo1 = Marshal.PtrToStructure<CARD_INFO_1>(pData);\n                    Console.WriteLine($"bActive: {cardInfo1.bActive}, bSuccess: {cardInfo1.bSuccess}");\n                } else {\n                    Console.WriteLine("GetCardStatus failed");\n                }\n            } finally {\n                Marshal.FreeHGlobal(pData);\n            }\n\n            level = 2; // Assuming you want CARD_INFO_2\n            int sizeOfLevel2 = Marshal.SizeOf(typeof(CARD_INFO_2));\n            pData = Marshal.AllocHGlobal(sizeOfLevel2);\n\n            try {\n                if (NativeMethods.GetCardStatus(cardId, level, pData, (uint)sizeOfLevel2, out needed)) {\n                    var cardInfo2 = Marshal.PtrToStructure<CARD_INFO_2>(pData);\n                    Console.WriteLine($"dwCopiesPrinted: {cardInfo2.dwCopiesPrinted}, dwRemakeAttempts: {cardInfo2.dwRemakeAttempts}");\n                    Console.WriteLine($"TimeCompleted: {cardInfo2.TimeCompleted.wYear}-{cardInfo2.TimeCompleted.wMonth}-{cardInfo2.TimeCompleted.wDay}");\n                } else {\n                    Console.WriteLine("GetCardStatus failed");\n                }\n            } finally {\n                Marshal.FreeHGlobal(pData);\n            }\n        } else {\n            Console.WriteLine("GetCardId failed");\n        }\n    }\n}