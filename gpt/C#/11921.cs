using System;\nusing System.Collections.Generic;\n\npublic class SqlBlock\n{\n    public string Type { get; set; }\n    public string Condition { get; set; }\n    public List<SqlBlock> InnerBlocks { get; set; } = new List<SqlBlock>();\n    public List<string> Statements { get; set; } = new List<string>();\n}\n\npublic class SqlParser\n{\n    public SqlBlock Parse(string sqlCode)\n    {\n        var lines = sqlCode.Split(new[] { '\n' }, StringSplitOptions.RemoveEmptyEntries);\n        Stack<SqlBlock> stack = new Stack<SqlBlock>();\n        SqlBlock rootBlock = new SqlBlock { Type = "Root" };\n        stack.Push(rootBlock);\n\n        foreach (var line in lines)\n        {\n            var trimmedLine = line.Trim();\n\n            if (trimmedLine.StartsWith("for"))\n            {\n                var condition = trimmedLine.Substring(4, trimmedLine.IndexOf("loop") - 4).Trim();\n                var newBlock = new SqlBlock { Type = "Loop", Condition = condition };\n                stack.Peek().InnerBlocks.Add(newBlock);\n                stack.Push(newBlock);\n            }\n            else if (trimmedLine == "end loop;")\n            {\n                stack.Pop();\n            }\n            else\n            {\n                stack.Peek().Statements.Add(trimmedLine);\n            }\n        }\n\n        return rootBlock;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        string sqlCode = @"\nfor condition1 loop\nstmt1;\nfor condition2 loop\nstmt2;\nend loop;\nend loop;\n";\n\n        SqlParser parser = new SqlParser();\n        SqlBlock parsedStructure = parser.Parse(sqlCode);\n\n        PrintBlock(parsedStructure, 0);\n    }\n\n    static void PrintBlock(SqlBlock block, int indent)\n    {\n        Console.WriteLine(new string(' ', indent * 2) + block.Type + (block.Condition != null ? " (" + block.Condition + ")" : ""));\n        \n        foreach (var stmt in block.Statements)\n        {\n            Console.WriteLine(new string(' ', (indent + 1) * 2) + stmt);\n        }\n\n        foreach (var innerBlock in block.InnerBlocks)\n        {\n            PrintBlock(innerBlock, indent + 1);\n        }\n    }\n}