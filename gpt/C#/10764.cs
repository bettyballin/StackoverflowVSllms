using System;\nusing System.IO;\nusing System.Text.RegularExpressions;\nusing System.Web;\nusing System.Web.Mvc;\n\npublic class WhiteSpaceFilter : ActionFilterAttribute\n{\n    public override void OnActionExecuting(ActionExecutingContext filterContext)\n    {\n        var response = filterContext.HttpContext.Response;\n        response.Filter = new WhiteSpaceStream(response.Filter);\n    }\n\n    private class WhiteSpaceStream : Stream\n    {\n        private readonly Stream _base;\n        private static readonly Regex _regex = new Regex(@"\s{2,}", RegexOptions.Compiled);\n\n        public WhiteSpaceStream(Stream responseStream)\n        {\n            _base = responseStream;\n        }\n\n        public override void Write(byte[] buffer, int offset, int count)\n        {\n            var html = System.Text.Encoding.UTF8.GetString(buffer, offset, count);\n            var strippedHtml = _regex.Replace(html, " ");\n            var outdata = System.Text.Encoding.UTF8.GetBytes(strippedHtml);\n            _base.Write(outdata, 0, outdata.Length);\n        }\n\n        // Other necessary overrides of abstract members of Stream\n        public override bool CanRead => _base.CanRead;\n        public override bool CanSeek => _base.CanSeek;\n        public override bool CanWrite => _base.CanWrite;\n        public override long Length => _base.Length;\n        public override long Position { get => _base.Position; set => _base.Position = value; }\n        public override void Flush() => _base.Flush();\n        public override int Read(byte[] buffer, int offset, int count) => _base.Read(buffer, offset, count);\n        public override long Seek(long offset, SeekOrigin origin) => _base.Seek(offset, origin);\n        public override void SetLength(long value) => _base.SetLength(value);\n    }\n}