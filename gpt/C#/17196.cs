using System;\nusing System.ComponentModel.Composition;\nusing System.ComponentModel.Composition.Hosting;\n\n// Define a contract for the core functionality\npublic interface ICoreFunctionality\n{\n    void Execute();\n}\n\n// Implement the core functionality\n[Export(typeof(ICoreFunctionality))]\npublic class CoreFunctionality : ICoreFunctionality\n{\n    public void Execute()\n    {\n        Console.WriteLine("Core Functionality");\n    }\n}\n\n// Implement a bespoke functionality in the product\n[Export(typeof(ICoreFunctionality))]\npublic class ProductFunctionality : ICoreFunctionality\n{\n    public void Execute()\n    {\n        Console.WriteLine("Product Specific Functionality");\n    }\n}\n\nclass Program\n{\n    [ImportMany]\n    public IEnumerable<ICoreFunctionality> Functionalities { get; set; }\n\n    static void Main(string[] args)\n    {\n        // Create a catalog of parts\n        var catalog = new AggregateCatalog();\n        catalog.Catalogs.Add(new AssemblyCatalog(typeof(Program).Assembly));\n\n        // Create a container\n        var container = new CompositionContainer(catalog);\n\n        // Compose parts\n        var program = new Program();\n        container.ComposeParts(program);\n\n        // Execute all functionalities\n        foreach (var functionality in program.Functionalities)\n        {\n            functionality.Execute();\n        }\n    }\n}