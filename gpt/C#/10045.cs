using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class CryptoHelper\n{\n    private static readonly string key = "your-256-bit-secret"; // This should be a 32-byte key\n\n    public static string EncryptString(string plainText)\n    {\n        byte[] iv = new byte[16];\n        using (Aes aesAlg = Aes.Create())\n        {\n            aesAlg.Key = Encoding.UTF8.GetBytes(key);\n            aesAlg.IV = iv;\n\n            var encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n            using (var msEncrypt = new MemoryStream())\n            {\n                using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                using (var swEncrypt = new StreamWriter(csEncrypt))\n                {\n                    swEncrypt.Write(plainText);\n                }\n                var encrypted = msEncrypt.ToArray();\n                return Convert.ToBase64String(encrypted);\n            }\n        }\n    }\n    \n    public static string DecryptString(string cipherText)\n    {\n        byte[] iv = new byte[16];\n        byte[] buffer = Convert.FromBase64String(cipherText);\n\n        using (Aes aesAlg = Aes.Create())\n        {\n            aesAlg.Key = Encoding.UTF8.GetBytes(key);\n            aesAlg.IV = iv;\n\n            var decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);\n\n            using (var msDecrypt = new MemoryStream(buffer))\n            using (var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n            using (var srDecrypt = new StreamReader(csDecrypt))\n            {\n                return srDecrypt.ReadToEnd();\n            }\n        }\n    }\n}