try\n{\n    // Create the ws endpoint\n    var uriServiceAddress = new Uri("urn:something-wse:something_NNNN");\n    var uribuilderViaRouter = new UriBuilder("http://xx.xxx.xx/SrvXXX_NNNN/Test.asmx");\n    var endpointReference = new EndpointReference(uriServiceAddress, uribuilderViaRouter.Uri);\n\n    // Create the ws client\n    var client = (WebServicesClientProtocol)new Test.Something();\n    client.Destination = endpointReference;\n\n    // Read the certificate from MyStore on LocalMachine\n    X509CertificateStore localStore = X509CertificateStore.LocalMachineStore(X509CertificateStore.MyStore);\n    X509SecurityToken securityToken = null;\n    \n    if (!localStore.OpenRead()) throw new Exception("Unable to open local store for read");\n\n    X509CertificateCollection certificateCollection = localStore.FindCertificateBySubjectString("email@subject.test");\n    if (certificateCollection.Count == 0) throw new Exception("Unable to obtain security token.");\n\n    securityToken = new X509SecurityToken(certificateCollection[0]);\n    localStore.Close();\n\n    // Attach the security token to the client request\n    client.RequestSoapContext.Security.Tokens.Add(securityToken);\n    client.RequestSoapContext.Security.Elements.Add(new MessageSignature(securityToken));\n\n    // Set the timeouts\n    client.RequestSoapContext.Security.Timestamp.TtlInSeconds = 2 * 60;\n    client.Timeout = 60 * 10 * 1000; // 10 minutes should suffice\n\n    // Call the test function\n    DataSet set = ((Test.Something)client).searchMethod("Parameter 1", "Parameter 2");\n    Label1.Text = User.Identity.Name + " worked! " + set.Tables.Count + " tables!";\n}\ncatch (Exception exc)\n{\n    Label1.Text = User.Identity.Name + " exception: " + exc.Message;\n    // Optionally log the exception for further analysis\n    // LogException(exc);\n}