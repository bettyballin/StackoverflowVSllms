public interface ITimer\n{\n    event Action Elapsed;\n    void Start(TimeSpan interval);\n    void Stop();\n}\n\npublic class SystemAvailabilityMonitor\n{\n    public event Action SystemBecameUnavailable = delegate { };\n    public event Action SystemBecameAvailable = delegate { };\n\n    private readonly ITimer timer;\n    private readonly TimeSpan bufferBeforeRaisingEvent;\n\n    public SystemAvailabilityMonitor(TimeSpan bufferBeforeRaisingEvent, ITimer timer)\n    {\n        this.bufferBeforeRaisingEvent = bufferBeforeRaisingEvent;\n        this.timer = timer;\n        this.timer.Elapsed += OnTimerElapsed;\n    }\n\n    public void SystemUnavailable()\n    {\n        timer.Start(bufferBeforeRaisingEvent);\n    }\n\n    public void SystemAvailable()\n    {\n        timer.Stop();\n        SystemBecameAvailable();\n    }\n\n    private void OnTimerElapsed()\n    {\n        SystemBecameUnavailable();\n    }\n}