using System;\nusing System.IO.Ports;\nusing System.Threading.Tasks;\n\npublic class SerialPortCommunicator\n{\n    private SerialPort _serialPort;\n\n    public SerialPortCommunicator(string portName, int baudRate)\n    {\n        _serialPort = new SerialPort(portName, baudRate);\n        _serialPort.DataReceived += OnDataReceived;\n    }\n\n    public void Open()\n    {\n        if (!_serialPort.IsOpen)\n        {\n            _serialPort.Open();\n        }\n    }\n\n    public void Close()\n    {\n        if (_serialPort.IsOpen)\n        {\n            _serialPort.Close();\n        }\n    }\n\n    public async Task SendCommandAsync(string command)\n    {\n        if (_serialPort.IsOpen)\n        {\n            await Task.Run(() => _serialPort.WriteLine(command));\n        }\n    }\n\n    private void OnDataReceived(object sender, SerialDataReceivedEventArgs e)\n    {\n        string data = _serialPort.ReadLine();\n        ProcessReceivedData(data);\n    }\n\n    private void ProcessReceivedData(string data)\n    {\n        // Implement your logic to process the received data and update the UI or state accordingly\n        Console.WriteLine($"Received: {data}");\n    }\n}