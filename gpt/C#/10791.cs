using System;\nusing NAudio.Wave;\nusing NAudio.Wave.SampleProviders;\n\nclass Program\n{\n    static void Main()\n    {\n        int sampleRate = 44100;\n        int channels = 1;\n\n        var waveOut = new WaveOutEvent();\n        var sineWaveProvider = new SineWaveProvider32();\n        sineWaveProvider.SetWaveFormat(sampleRate, channels); // 44.1kHz mono\n        sineWaveProvider.Frequency = 1000; // 1kHz\n        sineWaveProvider.Amplitude = 0.25f; // 25% of full scale\n\n        waveOut.Init(sineWaveProvider);\n        waveOut.Play();\n\n        Console.WriteLine("Playing... Press any key to stop.");\n        Console.ReadKey();\n\n        waveOut.Stop();\n    }\n}\n\npublic class SineWaveProvider32 : WaveProvider32\n{\n    private int sample;\n    public float Frequency { get; set; }\n    public float Amplitude { get; set; }\n\n    public SineWaveProvider32()\n    {\n        Frequency = 1000;\n        Amplitude = 0.25f;\n    }\n\n    public override int Read(float[] buffer, int offset, int sampleCount)\n    {\n        int sampleRate = WaveFormat.SampleRate;\n        for (int n = 0; n < sampleCount; n++)\n        {\n            buffer[n + offset] = (float)(Amplitude * Math.Sin((2 * Math.PI * sample * Frequency) / sampleRate));\n            sample++;\n            if (sample >= sampleRate) sample = 0;\n        }\n        return sampleCount;\n    }\n}