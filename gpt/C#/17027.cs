using System;\nusing System.IO;\n\npublic class DllChecker\n{\n    public static bool Is64BitDll(string dllPath)\n    {\n        if (!File.Exists(dllPath))\n            throw new FileNotFoundException("DLL file not found.", dllPath);\n\n        using (var stream = new FileStream(dllPath, FileMode.Open, FileAccess.Read))\n        using (var reader = new BinaryReader(stream))\n        {\n            // Check the MZ signature\n            if (reader.ReadUInt16() != 0x5A4D) // MZ\n                throw new InvalidDataException("Not a valid DLL file.");\n\n            // Move to the PE header location\n            stream.Seek(0x3C, SeekOrigin.Begin);\n            var peHeaderOffset = reader.ReadUInt32();\n            stream.Seek(peHeaderOffset, SeekOrigin.Begin);\n\n            // Check the PE signature\n            if (reader.ReadUInt32() != 0x00004550) // PE\0\0\n                throw new InvalidDataException("Not a valid PE file.");\n\n            // Skip the COFF File Header\n            stream.Seek(20, SeekOrigin.Current);\n\n            // Read the Magic number from the Optional Header to determine 32 or 64 bits\n            var magic = reader.ReadUInt16();\n            return magic == 0x20B; // PE32+ (64-bit)\n        }\n    }\n\n    public static void Main(string[] args)\n    {\n        try\n        {\n            string dllPath = "path_to_your_dll.dll";\n            bool is64Bit = Is64BitDll(dllPath);\n            Console.WriteLine(is64Bit ? "The DLL is 64-bit." : "The DLL is 32-bit.");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($"Error: {ex.Message}");\n        }\n    }\n}