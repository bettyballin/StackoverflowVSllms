using System;\nusing System.CodeDom.Compiler;\nusing System.IO;\nusing Microsoft.CSharp;\n\npublic class DynamicDllGenerator\n{\n    public void GenerateDll(string sourceCode, string outputDllPath)\n    {\n        // Create a new instance of CSharpCodeProvider\n        CSharpCodeProvider codeProvider = new CSharpCodeProvider();\n        \n        // Set the compiler parameters\n        CompilerParameters compilerParams = new CompilerParameters\n        {\n            GenerateExecutable = false, // We want a DLL, not an EXE\n            OutputAssembly = outputDllPath,\n            GenerateInMemory = false\n        };\n\n        // Reference necessary assemblies\n        compilerParams.ReferencedAssemblies.Add("System.dll");\n        compilerParams.ReferencedAssemblies.Add("System.Core.dll");\n\n        // Compile the source code\n        CompilerResults results = codeProvider.CompileAssemblyFromSource(compilerParams, sourceCode);\n\n        // Check for compilation errors\n        if (results.Errors.HasErrors)\n        {\n            using (StringWriter sw = new StringWriter())\n            {\n                foreach (CompilerError error in results.Errors)\n                {\n                    sw.WriteLine($"Error ({error.ErrorNumber}): {error.ErrorText}");\n                }\n                throw new Exception($"Compilation failed: {sw.ToString()}");\n            }\n        }\n\n        Console.WriteLine($"DLL generated successfully at: {outputDllPath}");\n    }\n}