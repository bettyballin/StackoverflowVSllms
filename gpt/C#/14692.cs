using System;\nusing System.Runtime.InteropServices;\nusing System.Windows;\nusing System.Windows.Interop;\n\npublic class DpiHelper\n{\n    [DllImport("Shcore.dll", SetLastError = true)]\n    private static extern int GetDpiForMonitor(IntPtr hmonitor, MonitorDpiType dpiType, out uint dpiX, out uint dpiY);\n\n    private enum MonitorDpiType\n    {\n        MDT_EFFECTIVE_DPI = 0,\n        MDT_ANGULAR_DPI = 1,\n        MDT_RAW_DPI = 2,\n        MDT_DEFAULT = MDT_EFFECTIVE_DPI\n    }\n\n    public static double GetDpi(Window window)\n    {\n        var hwnd = new WindowInteropHelper(window).Handle;\n        var hmonitor = MonitorFromWindow(hwnd, MONITOR_DEFAULTTONEAREST);\n        uint dpiX, dpiY;\n        int result = GetDpiForMonitor(hmonitor, MonitorDpiType.MDT_EFFECTIVE_DPI, out dpiX, out dpiY);\n\n        if (result != 0)\n        {\n            throw new InvalidOperationException("Could not get DPI for monitor.");\n        }\n\n        return dpiX; // dpiX and dpiY should be the same for standard monitors\n    }\n\n    [DllImport("User32.dll")]\n    private static extern IntPtr MonitorFromWindow(IntPtr hwnd, uint dwFlags);\n\n    private const uint MONITOR_DEFAULTTONEAREST = 2;\n}\n\n// Usage example:\npublic partial class MainWindow : Window\n{\n    public MainWindow()\n    {\n        InitializeComponent();\n        Loaded += MainWindow_Loaded;\n    }\n\n    private void MainWindow_Loaded(object sender, RoutedEventArgs e)\n    {\n        double actualDpi = DpiHelper.GetDpi(this);\n        double actualWidthInches = canvas.ActualWidth / actualDpi;\n        double actualHeightInches = canvas.ActualHeight / actualDpi;\n\n        MessageBox.Show($"Canvas Size in Inches: Width = {actualWidthInches}, Height = {actualHeightInches}");\n    }\n}