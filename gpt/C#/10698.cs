public abstract class UniqueNamedEntity : Entity\n{\n    protected UniqueNamedEntity() { }\n\n    protected UniqueNamedEntity(string uniqueName)\n    {\n        Check.Require(!string.IsNullOrEmpty(uniqueName) && uniqueName.Trim() != string.Empty,\n                      "The unique name must be provided");\n\n        UniqueName = uniqueName;\n    }\n\n    [DomainSignature]\n    [NotNull, NotEmpty]\n    public virtual string UniqueName { get; protected set; }\n}\n\npublic class SomeSubclassOfUniqueNamedEntity : UniqueNamedEntity\n{\n    public SomeSubclassOfUniqueNamedEntity() { }\n\n    public SomeSubclassOfUniqueNamedEntity(string uniqueName) : base(uniqueName) { }\n\n    // Additional properties and methods\n}