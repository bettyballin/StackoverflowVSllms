using System;\nusing System.Reflection;\n\npublic class Program\n{\n    static void Main()\n    {\n        AppDomainSetup domainSetup = new AppDomainSetup();\n        domainSetup.ApplicationBase = AppDomain.CurrentDomain.BaseDirectory;\n\n        AppDomain newDomain = AppDomain.CreateDomain("IsolatedDomain", null, domainSetup);\n        var loader = (DllLoader)newDomain.CreateInstanceAndUnwrap(\n            Assembly.GetExecutingAssembly().FullName, typeof(DllLoader).FullName);\n\n        loader.LoadAndUseDll("path_to_a.dll");\n        loader.LoadAndUseDll("path_to_b.dll");\n\n        AppDomain.Unload(newDomain);\n    }\n}\n\npublic class DllLoader : MarshalByRefObject\n{\n    public void LoadAndUseDll(string dllPath)\n    {\n        Assembly assembly = Assembly.LoadFrom(dllPath);\n        // Assume the DLL has a class named "MyClass" with a method "MyMethod"\n        Type type = assembly.GetType("MyNamespace.MyClass");\n        object instance = Activator.CreateInstance(type);\n        MethodInfo method = type.GetMethod("MyMethod");\n        method.Invoke(instance, null);\n    }\n}