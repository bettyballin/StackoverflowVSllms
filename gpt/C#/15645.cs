public class RSAFileDecryption\n{\n    public static void DecryptFile(string inputFile, string outputFile, string privateKey)\n    {\n        using (FileStream fsInput = new FileStream(inputFile, FileMode.Open))\n        {\n            // Read the encrypted AES key length.\n            byte[] lengthBuffer = new byte[sizeof(int)];\n            fsInput.Read(lengthBuffer, 0, lengthBuffer.Length);\n            int keyLength = BitConverter.ToInt32(lengthBuffer, 0);\n\n            // Read the encrypted AES key.\n            byte[] encryptedKey = new byte[keyLength];\n            fsInput.Read(encryptedKey, 0, encryptedKey.Length);\n\n            // Read the IV.\n            byte[] iv = new byte[16]; // AES block size\n            fsInput.Read(iv, 0, iv.Length);\n\n            // Decrypt the AES key with RSA.\n            byte[] aesKey;\n            using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())\n            {\n                byte[] keyValue = Convert.FromBase64String(privateKey);\n                rsa.ImportCspBlob(keyValue);\n                aesKey = rsa.Decrypt(encryptedKey, RSAEncryptionPadding.OaepSHA1);\n            }\n\n            // Decrypt the file using AES.\n            using (Aes aes = Aes.Create())\n            {\n                aes.Key = aesKey;\n                aes.IV = iv;\n\n                using (FileStream fsOutput = new FileStream(outputFile, FileMode.Create))\n                {\n                    using (CryptoStream cs = new CryptoStream(fsInput, aes.CreateDecryptor(), CryptoStreamMode.Read))\n                    {\n                        byte[] buffer = new byte[1048576]; // 1 MB buffer\n                        int bytesRead;\n                        while ((bytesRead = cs.Read(buffer, 0, buffer.Length)) > 0)\n                        {\n                            fsOutput.Write(buffer, 0, bytesRead);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}