using System;\nusing Titanium.Web.Proxy;\nusing Titanium.Web.Proxy.EventArguments;\nusing Titanium.Web.Proxy.Models;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var proxyServer = new ProxyServer();\n\n        // Optionally set proxy server properties here\n        proxyServer.TrustRootCertificate = true;\n\n        // Subscribe to the BeforeRequest event\n        proxyServer.BeforeRequest += OnRequest;\n\n        // Subscribe to the BeforeResponse event\n        proxyServer.BeforeResponse += OnResponse;\n\n        // Start the proxy server\n        var explicitEndPoint = new ExplicitProxyEndPoint(System.Net.IPAddress.Any, 8000, true);\n        proxyServer.AddEndPoint(explicitEndPoint);\n        proxyServer.Start();\n\n        // Assign the proxy server to your browser (e.g., through browser automation tools)\n        Console.WriteLine("Proxy server started. Press any key to exit...");\n        Console.ReadKey();\n\n        // Stop the proxy server when done\n        proxyServer.Stop();\n    }\n\n    private static async Task OnRequest(object sender, SessionEventArgs e)\n    {\n        Console.WriteLine($"Request: {e.HttpClient.Request.Url}");\n    }\n\n    private static async Task OnResponse(object sender, SessionEventArgs e)\n    {\n        Console.WriteLine($"Response: {e.HttpClient.Response.StatusCode}");\n    }\n}