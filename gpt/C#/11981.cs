private ISessionFactory _sessionFactory;\nprivate Configuration _configuration;\n\n_configuration = new Configuration();\n_configuration.Configure();\n_configuration.AddAssembly(typeof(Task).Assembly);\n_sessionFactory = _configuration.BuildSessionFactory();\n\nusing (var s = _sessionFactory.OpenSession())\n{\n    using (var t = s.BeginTransaction(IsolationLevel.RepeatableRead))\n    {\n        try\n        {\n            var taskToSave = new Task\n            {\n                Class = "test class",\n                IsActive = true,\n                Namespace = "test namespace"\n            };\n\n            s.Save(taskToSave);\n            s.Flush(); // Explicitly flush the session\n            t.Commit(); // Commit the transaction\n        }\n        catch (Exception ex)\n        {\n            t.Rollback(); // Rollback transaction on error\n            Console.WriteLine(ex.Message); // Log the exception\n        }\n    }\n}