using System;\nusing System.Drawing;\nusing System.Drawing.Imaging;\nusing System.Runtime.InteropServices;\nusing System.Windows.Media.Imaging;\n\npublic void SaveBitmapAsJpeg(string path, ushort[] dataArray, int width, int height)\n{\n    // Create a new Bitmap with 24bppRgb format\n    Bitmap img = new Bitmap(width, height, PixelFormat.Format24bppRgb);\n    BitmapData imgData = img.LockBits(new Rectangle(0, 0, width, height), ImageLockMode.WriteOnly, img.PixelFormat);\n\n    int bytesPerPixel = 3; // 24bppRgb means 3 bytes per pixel\n    int stride = imgData.Stride;\n    byte[] pixelData = new byte[height * stride];\n\n    for (int y = 0; y < height; y++)\n    {\n        for (int x = 0; x < width; x++)\n        {\n            ushort value = dataArray[y * width + x];\n            byte grayValue = (byte)(value >> 8); // Convert 16-bit to 8-bit\n\n            int position = y * stride + x * bytesPerPixel;\n            pixelData[position] = grayValue; // Blue\n            pixelData[position + 1] = grayValue; // Green\n            pixelData[position + 2] = grayValue; // Red\n        }\n    }\n\n    Marshal.Copy(pixelData, 0, imgData.Scan0, pixelData.Length);\n    img.UnlockBits(imgData);\n\n    // Save the image as a JPEG file\n    img.Save(path, ImageFormat.Jpeg);\n    img.Dispose();\n}\n\n// Example usage\nushort[] dataArray = new ushort[width * height];\n// Fill dataArray with your pixel data\nSaveBitmapAsJpeg("path/to/save/image.jpg", dataArray, width, height);