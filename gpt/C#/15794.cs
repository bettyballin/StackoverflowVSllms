private const int BufferSize = 1024 * 1024; // 1MB buffer for example\nprivate byte[] buffer = new byte[BufferSize];\nprivate int totalBytesReceived = 0;\n\nprivate void DataReceivedCallback(IAsyncResult ar)\n{\n    try\n    {\n        // Retrieve the state object and the client socket\n        StateObject state = (StateObject)ar.AsyncState;\n        Socket clientSocket = state.workSocket;\n\n        // Read data from the client socket\n        int bytesRead = clientSocket.EndReceive(ar);\n\n        if (bytesRead > 0)\n        {\n            // Copy the data to the buffer\n            Array.Copy(state.buffer, 0, buffer, totalBytesReceived, bytesRead);\n            totalBytesReceived += bytesRead;\n\n            // Check if the end of the data has been reached (depends on your protocol)\n            if (IsEndOfData(buffer, totalBytesReceived))\n            {\n                // Process the complete data\n                ProcessData(buffer, totalBytesReceived);\n\n                // Reset the buffer and counter for the next message\n                totalBytesReceived = 0;\n                Array.Clear(buffer, 0, buffer.Length);\n            }\n            else\n            {\n                // Continue receiving data\n                clientSocket.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0,\n                    new AsyncCallback(DataReceivedCallback), state);\n            }\n        }\n    }\n    catch (Exception e)\n    {\n        Console.WriteLine(e.ToString());\n    }\n}\n\nprivate bool IsEndOfData(byte[] buffer, int totalBytesReceived)\n{\n    // Implement your logic to determine if the end of the data has been received\n    // For example, if you are sending the length of the data first, you can check if\n    // totalBytesReceived matches the expected length\n    return true; // Placeholder\n}\n\nprivate void ProcessData(byte[] buffer, int totalBytesReceived)\n{\n    // Implement your logic to process the complete data\n    // For example, display the image on the screen\n}