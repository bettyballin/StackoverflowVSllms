using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class RSAEncryption\n{\n    public static void Main()\n    {\n        // Generate RSA key pair\n        using (var rsa = new RSACryptoServiceProvider(2048))\n        {\n            try\n            {\n                // Export public key\n                var publicKey = rsa.ToXmlString(false);\n                Console.WriteLine("Public Key: \n" + publicKey);\n\n                // Export private key\n                var privateKey = rsa.ToXmlString(true);\n                Console.WriteLine("Private Key: \n" + privateKey);\n\n                // Encrypt data using public key\n                var dataToEncrypt = "Hello, World!";\n                var encryptedData = EncryptData(publicKey, dataToEncrypt);\n                Console.WriteLine("Encrypted Data: " + Convert.ToBase64String(encryptedData));\n\n                // Decrypt data using private key\n                var decryptedData = DecryptData(privateKey, encryptedData);\n                Console.WriteLine("Decrypted Data: " + decryptedData);\n            }\n            finally\n            {\n                // Clear the RSA key pair from memory\n                rsa.PersistKeyInCsp = false;\n            }\n        }\n    }\n\n    public static byte[] EncryptData(string publicKeyXml, string dataToEncrypt)\n    {\n        using (var rsa = new RSACryptoServiceProvider())\n        {\n            rsa.FromXmlString(publicKeyXml);\n            var dataBytes = Encoding.UTF8.GetBytes(dataToEncrypt);\n            return rsa.Encrypt(dataBytes, false);\n        }\n    }\n\n    public static string DecryptData(string privateKeyXml, byte[] dataToDecrypt)\n    {\n        using (var rsa = new RSACryptoServiceProvider())\n        {\n            rsa.FromXmlString(privateKeyXml);\n            var decryptedBytes = rsa.Decrypt(dataToDecrypt, false);\n            return Encoding.UTF8.GetString(decryptedBytes);\n        }\n    }\n}