using System;\nusing System.Reflection;\nusing System.ServiceProcess;\n\nstatic class Program\n{\n    static void Main(string[] args)\n    {\n        ServiceBase[] servicesToRun;\n        servicesToRun = new ServiceBase[]\n        {\n            new Service1()\n        };\n\n        if (Environment.UserInteractive)\n        {\n            Type type = typeof(ServiceBase);\n            BindingFlags flags = BindingFlags.Instance | BindingFlags.NonPublic;\n            MethodInfo method = type.GetMethod("OnStart", flags);\n\n            try\n            {\n                foreach (ServiceBase service in servicesToRun)\n                {\n                    method.Invoke(service, new object[] { args });\n                }\n\n                Console.WriteLine("Press any key to exit");\n                Console.ReadKey();\n\n                foreach (ServiceBase service in servicesToRun)\n                {\n                    service.Stop(); // ERROR OCCURS HERE!\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine("An error occurred: " + ex.Message);\n                Console.WriteLine(ex.StackTrace);\n            }\n        }\n        else\n        {\n            ServiceBase.Run(servicesToRun);\n        }\n    }\n}\n\npublic partial class Service1 : ServiceBase\n{\n    public Service1()\n    {\n        InitializeComponent();\n    }\n\n    protected override void OnStart(string[] args)\n    {\n        // Add start logic here\n    }\n\n    protected override void OnStop()\n    {\n        // Add stop logic here\n    }\n}