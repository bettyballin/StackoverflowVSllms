using System;\nusing System.Runtime.InteropServices;\n\npublic class ComInvoker\n{\n    [DllImport("oleaut32.dll", CharSet = CharSet.Unicode, PreserveSig = false)]\n    private static extern void CLSIDFromProgID(string progId, out Guid clsid);\n\n    [DllImport("ole32.dll", PreserveSig = false)]\n    private static extern void CoCreateInstance(\n        ref Guid clsid,\n        IntPtr pUnkOuter,\n        uint dwClsContext,\n        ref Guid riid,\n        [MarshalAs(UnmanagedType.Interface)] out object ppv);\n\n    [ComImport, InterfaceType(ComInterfaceType.InterfaceIsIUnknown), Guid("00020400-0000-0000-C000-000000000046")]\n    private interface IDispatch\n    {\n        [PreserveSig]\n        int GetTypeInfoCount(out uint pctinfo);\n\n        [PreserveSig]\n        int GetTypeInfo(uint iTInfo, int lcid, out IntPtr ppTInfo);\n\n        [PreserveSig]\n        int GetIDsOfNames(ref Guid riid, [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPWStr)] string[] rgszNames, uint cNames, int lcid, [MarshalAs(UnmanagedType.LPArray)] int[] rgDispId);\n\n        [PreserveSig]\n        int Invoke(int dispIdMember, ref Guid riid, uint lcid, ushort wFlags, ref DISPPARAMS pDispParams, out object pVarResult, ref EXCEPINFO pExcepInfo, out uint puArgErr);\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    private struct DISPPARAMS\n    {\n        [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.Struct)]\n        public object[] rgvarg;\n        public IntPtr rgdispidNamedArgs;\n        public uint cArgs;\n        public uint cNamedArgs;\n    }\n\n    [StructLayout(LayoutKind.Sequential)]\n    private struct EXCEPINFO\n    {\n        public ushort wCode;\n        public ushort wReserved;\n        [MarshalAs(UnmanagedType.BStr)]\n        public string bstrSource;\n        [MarshalAs(UnmanagedType.BStr)]\n        public string bstrDescription;\n        [MarshalAs(UnmanagedType.BStr)]\n        public string bstrHelpFile;\n        public uint dwHelpContext;\n        public IntPtr pvReserved;\n        public IntPtr pfnDeferredFillIn;\n        public int scode;\n    }\n\n    private static readonly Guid IID_IDispatch = new Guid("00020400-0000-0000-C000-000000000046");\n\n    public static void InvokeMethod(string progId, string methodName, object[] parameters)\n    {\n        CLSIDFromProgID(progId, out Guid clsid);\n\n        CoCreateInstance(ref clsid, IntPtr.Zero, 1 /*CLSCTX_INPROC_SERVER*/, ref IID_IDispatch, out object comObject);\n\n        IDispatch dispatch = (IDispatch)comObject;\n\n        int[] dispIds = new int[1];\n        string[] methodNames = { methodName };\n        dispatch.GetIDsOfNames(ref IID_IDispatch, methodNames, 1, 0, dispIds);\n\n        DISPPARAMS dispParams = new DISPPARAMS\n        {\n            rgvarg = parameters,\n            rgdispidNamedArgs = IntPtr.Zero,\n            cArgs = (uint)(parameters?.Length ?? 0),\n            cNamedArgs = 0\n        };\n\n        dispatch.Invoke(dispIds[0], ref IID_IDispatch, 0, 1 /*DISPATCH_METHOD*/, ref dispParams, out object result, ref new EXCEPINFO(), out _);\n\n        // Use the result if needed\n    }\n}