using NHibernate;\nusing NHibernate.SqlTypes;\nusing NHibernate.UserTypes;\nusing System;\nusing System.Data;\n\npublic class ListType : IUserType\n{\n    public SqlType[] SqlTypes => new SqlType[] { SqlTypeFactory.Int64 };\n\n    public Type ReturnedType => typeof(string);\n\n    public bool IsMutable => false;\n\n    public object NullSafeGet(IDataReader rs, string[] names, object owner)\n    {\n        var id = (long)NHibernateUtil.Int64.NullSafeGet(rs, names[0]);\n        return GetItemById(id);\n    }\n\n    public void NullSafeSet(IDbCommand cmd, object value, int index)\n    {\n        var item = (string)value;\n        var id = GetIdByItem(item);\n        NHibernateUtil.Int64.NullSafeSet(cmd, id, index);\n    }\n\n    public object DeepCopy(object value) => value;\n\n    public object Replace(object original, object target, object owner) => original;\n\n    public object Assemble(object cached, object owner) => cached;\n\n    public object Disassemble(object value) => value;\n\n    public bool Equals(object x, object y) => x?.Equals(y) ?? y == null;\n\n    public int GetHashCode(object x) => x?.GetHashCode() ?? 0;\n\n    private string GetItemById(long id)\n    {\n        // Implement your logic to fetch the string value by ID from the database or cache\n    }\n\n    private long GetIdByItem(string item)\n    {\n        // Implement your logic to fetch the ID by string value from the database or cache\n    }\n}