using System;\nusing System.Collections.Concurrent;\n\npublic interface IQueueWriter<T>\n{\n    void Enqueue(T item);\n}\n\npublic sealed class SecureQueue<T> : IQueueWriter<T>\n{\n    private readonly ConcurrentQueue<T> _queue = new ConcurrentQueue<T>();\n\n    public void Enqueue(T item)\n    {\n        _queue.Enqueue(item);\n    }\n\n    // You could add other internal methods to manage the queue here, if needed.\n    internal bool TryDequeue(out T result)\n    {\n        return _queue.TryDequeue(out result);\n    }\n}\n\npublic interface IGameClient\n{\n    void HandleStateChange(IGameState gameState, IQueueWriter<IGameAction> actionQueue);\n}\n\n// Example implementation of IGameClient\npublic class GameClient : IGameClient\n{\n    public void HandleStateChange(IGameState gameState, IQueueWriter<IGameAction> actionQueue)\n    {\n        // Client can only enqueue actions\n        actionQueue.Enqueue(new GameAction());\n    }\n}\n\n// Example GameAction and IGameState classes\npublic class GameAction : IGameAction { }\npublic interface IGameAction { }\npublic interface IGameState { }\n\npublic class Server\n{\n    private SecureQueue<IGameAction> _actionQueue = new SecureQueue<IGameAction>();\n\n    public void ProcessClient(IGameClient client, IGameState gameState)\n    {\n        client.HandleStateChange(gameState, _actionQueue);\n    }\n}