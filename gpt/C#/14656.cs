[Route("api/[controller]")]\n   [ApiController]\n   public class ProductsController : ControllerBase\n   {\n       private readonly AppDbContext _context;\n\n       public ProductsController(AppDbContext context)\n       {\n           _context = context;\n       }\n\n       [HttpGet]\n       public async Task<ActionResult<IEnumerable<Product>>> GetProducts()\n       {\n           return await _context.Products.ToListAsync();\n       }\n\n       [HttpGet("{id}")]\n       public async Task<ActionResult<Product>> GetProduct(int id)\n       {\n           var product = await _context.Products.FindAsync(id);\n\n           if (product == null)\n           {\n               return NotFound();\n           }\n\n           return product;\n       }\n\n       [HttpPost]\n       public async Task<ActionResult<Product>> PostProduct(Product product)\n       {\n           _context.Products.Add(product);\n           await _context.SaveChangesAsync();\n\n           return CreatedAtAction(nameof(GetProduct), new { id = product.Id }, product);\n       }\n\n       [HttpPut("{id}")]\n       public async Task<IActionResult> PutProduct(int id, Product product)\n       {\n           if (id != product.Id)\n           {\n               return BadRequest();\n           }\n\n           _context.Entry(product).State = EntityState.Modified;\n\n           try\n           {\n               await _context.SaveChangesAsync();\n           }\n           catch (DbUpdateConcurrencyException)\n           {\n               if (!_context.Products.Any(e => e.Id == id))\n               {\n                   return NotFound();\n               }\n               else\n               {\n                   throw;\n               }\n           }\n\n           return NoContent();\n       }\n\n       [HttpDelete("{id}")]\n       public async Task<IActionResult> DeleteProduct(int id)\n       {\n           var product = await _context.Products.FindAsync(id);\n           if (product == null)\n           {\n               return NotFound();\n           }\n\n           _context.Products.Remove(product);\n           await _context.SaveChangesAsync();\n\n           return NoContent();\n       }\n   }