class Program\n{\n    static void Main()\n    {\n        List<Node> nodes = new List<Node>\n        {\n            new Node(1, 0, 0, "root"),\n            new Node(2, 1, 0, "child 1"),\n            new Node(3, 1, 1, "child 2"),\n            new Node(4, 1, 2, "child 3"),\n            new Node(5, 4, 0, "grandchild 1")\n        };\n\n        Node root = Hierarchize(nodes);\n        PrintHierarchy(root, 0);\n    }\n\n    static Node Hierarchize(List<Node> nodes)\n    {\n        var nodeDictionary = nodes.ToDictionary(n => n.Id);\n        Node root = null;\n\n        foreach (var node in nodes)\n        {\n            if (node.ParentId == 0)\n            {\n                root = node;\n            }\n            else\n            {\n                if (nodeDictionary.TryGetValue(node.ParentId, out var parentNode))\n                {\n                    parentNode.Children.Add(node);\n                }\n            }\n        }\n\n        return root;\n    }\n\n    static void PrintHierarchy(Node node, int level)\n    {\n        if (node == null) return;\n\n        Console.WriteLine(new string(' ', level * 2) + node.Title);\n\n        foreach (var child in node.Children.OrderBy(c => c.Position))\n        {\n            PrintHierarchy(child, level + 1);\n        }\n    }\n}