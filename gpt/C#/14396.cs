using System;\nusing System.IO;\nusing System.Security.Cryptography;\n\npublic class SimpleBlobGenerator\n{\n    public static byte[] GetRC4SessionBlobFromKey(byte[] keyData, RSACryptoServiceProvider publicKey)\n    {\n        using (MemoryStream ms = new MemoryStream())\n        using (BinaryWriter w = new BinaryWriter(ms))\n        {\n            w.Write((byte)0x01); // SIMPLEBLOB\n            w.Write((byte)0x02); // Version 2\n            w.Write((byte)0x00); // Reserved\n            w.Write((int)0x00006801);  // ALG_ID = RC4 for the encrypted key\n            w.Write((int)0x0000a400);  // CALG_RSA_KEYX\n            w.Write(publicKey.Encrypt(keyData, false)); // Encrypt key data\n            w.Flush();\n\n            return ms.ToArray();\n        }\n    }\n\n    public static void Main(string[] args)\n    {\n        CspParameters cspParams = new CspParameters\n        {\n            KeyContainerName = "Container Name",\n            KeyNumber = (int)KeyNumber.Exchange,\n            ProviderType = 1,\n            ProviderName = "Microsoft Enhanced Cryptographic Provider v1.0",\n            Flags = CspProviderFlags.UseMachineKeyStore\n        };\n\n        RSACryptoServiceProvider rsaClient = new RSACryptoServiceProvider(cspParams);\n        rsaClient.ImportCspBlob(File.ReadAllBytes(@"C:\client.key"));\n\n        byte[] keyMaterial = new byte[] { /* your key material here */ };\n        byte[] sessionBlob = GetRC4SessionBlobFromKey(keyMaterial, rsaClient);\n\n        // Output or use sessionBlob as needed\n    }\n}