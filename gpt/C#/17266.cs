public class WorkloadManager\n{\n    private static readonly object _lock = new object();\n    private readonly IMemoryCache _cache;\n\n    public WorkloadManager(IMemoryCache cache)\n    {\n        _cache = cache;\n    }\n\n    public void AllocateWorkItem(string userId)\n    {\n        lock (_lock)\n        {\n            var workload = _cache.GetOrCreate(userId, entry => new WorkloadInfo());\n            workload.Increment();\n            _cache.Set(userId, workload);\n\n            // Additional logic to allocate the work item\n        }\n    }\n\n    public void CompleteWorkItem(string userId)\n    {\n        lock (_lock)\n        {\n            var workload = _cache.Get<WorkloadInfo>(userId);\n            if (workload != null)\n            {\n                workload.Decrement();\n                _cache.Set(userId, workload);\n            }\n\n            // Additional logic to mark the item as completed\n        }\n    }\n}\n\npublic class WorkloadInfo\n{\n    public int Count { get; private set; }\n\n    public void Increment() => Count++;\n    public void Decrement() => Count--;\n}