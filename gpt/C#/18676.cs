using System;\nusing System.Runtime.InteropServices;\nusing System.Text;\n\npublic class DllDependencyScanner\n{\n    [DllImport("Dbghelp.dll", SetLastError = true)]\n    private static extern bool SymInitialize(IntPtr hProcess, string UserSearchPath, bool fInvadeProcess);\n\n    [DllImport("Dbghelp.dll", SetLastError = true)]\n    private static extern bool SymCleanup(IntPtr hProcess);\n\n    [DllImport("Dbghelp.dll", SetLastError = true)]\n    private static extern bool SymEnumModules(IntPtr hProcess, SymEnumModulesProc EnumModulesCallback, IntPtr UserContext);\n\n    private delegate bool SymEnumModulesProc(string ModuleName, ulong BaseOfDll, IntPtr UserContext);\n\n    public static void GetDllDependencies(string filePath)\n    {\n        IntPtr hProcess = System.Diagnostics.Process.GetCurrentProcess().Handle;\n\n        if (!SymInitialize(hProcess, null, false))\n        {\n            throw new System.ComponentModel.Win32Exception(Marshal.GetLastWin32Error());\n        }\n\n        try\n        {\n            SymEnumModules(hProcess, (moduleName, baseOfDll, userContext) =>\n            {\n                Console.WriteLine(moduleName);\n                return true; // Continue enumeration\n            }, IntPtr.Zero);\n        }\n        finally\n        {\n            SymCleanup(hProcess);\n        }\n    }\n\n    public static void Main(string[] args)\n    {\n        if (args.Length != 1)\n        {\n            Console.WriteLine("Usage: DllDependencyScanner <path to exe or dll>");\n            return;\n        }\n\n        GetDllDependencies(args[0]);\n    }\n}