using System;\nusing System.Collections.Generic;\nusing System.Runtime.Caching;\n\npublic class AutoSuggestService\n{\n    private readonly ObjectCache _cache = MemoryCache.Default;\n    private readonly TimeSpan _cacheExpiration = TimeSpan.FromMinutes(30);\n    \n    // Method to get suggestions\n    public List<string> GetSuggestions(string userId, string prefix)\n    {\n        var cacheKey = $"AutoSuggest_{userId}";\n        var userSuggestions = _cache.Get(cacheKey) as List<string>;\n\n        if (userSuggestions == null)\n        {\n            // Fetch from database if not in cache\n            userSuggestions = FetchSuggestionsFromDatabase(userId);\n            _cache.Set(cacheKey, userSuggestions, DateTimeOffset.Now.Add(_cacheExpiration));\n        }\n\n        // Return filtered suggestions based on the prefix\n        return userSuggestions.FindAll(s => s.StartsWith(prefix, StringComparison.OrdinalIgnoreCase));\n    }\n\n    // Method to add a new suggestion\n    public void AddSuggestion(string userId, string newWord)\n    {\n        var cacheKey = $"AutoSuggest_{userId}";\n        var userSuggestions = _cache.Get(cacheKey) as List<string>;\n\n        if (userSuggestions == null)\n        {\n            userSuggestions = FetchSuggestionsFromDatabase(userId);\n        }\n\n        if (!userSuggestions.Contains(newWord))\n        {\n            userSuggestions.Add(newWord);\n            _cache.Set(cacheKey, userSuggestions, DateTimeOffset.Now.Add(_cacheExpiration));\n            SaveSuggestionToDatabase(userId, newWord);\n        }\n    }\n\n    // Placeholder for database fetching logic\n    private List<string> FetchSuggestionsFromDatabase(string userId)\n    {\n        // Implement the logic to fetch user-specific suggestions from the database\n        return new List<string>();\n    }\n\n    // Placeholder for database saving logic\n    private void SaveSuggestionToDatabase(string userId, string newWord)\n    {\n        // Implement the logic to save new suggestion to the database\n    }\n}